void sub_216F25098(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_267B92D60);
  _Unwind_Resume(a1);
}

void *sub_216F2511C(uint64_t **a1)
{
  qword_267B92D70 = 0;
  unk_267B92D78 = 0;
  qword_267B92D68 = 0;
  sub_216973388((char **)&qword_267B92D68, ((*(void *)algn_267B92D50 - qword_267B92D48) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B92D68, (void *)qword_267B92D70, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B92D68, (void *)qword_267B92D70, (uint64_t *)qword_267B92D48, *(uint64_t **)algn_267B92D50, (*(void *)algn_267B92D50 - qword_267B92D48) >> 3);
}

void sub_216F251B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F251D4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F05F9C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F252B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F25300(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F25394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F253B8()
{
  sub_216F278D8();
  sub_216779094(__p, "NurbsPatch");
  sub_216F27A04((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F25408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::~UsdGeomNurbsPatch(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::~UsdGeomPointBased(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CC48;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    v9 = "usdGeom/nurbsPatch.cpp";
    v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdGeomNurbsPatch pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CC48;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F255D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92D90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92D90))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B92D88, "NurbsPatch");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B92D88, &dword_216758000);
    __cxa_guard_release(&qword_267B92D90);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B92D88, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CC48;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    v9 = "usdGeom/nurbsPatch.cpp";
    v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdGeomNurbsPatch pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CC48;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F257E0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92DA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92DA0))
  {
    __cxa_guard_release(&qword_267B92DA0);
  }
  return &qword_267B92D98;
}

void sub_216F25888(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92DB0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)__cxa_guard_acquire(&qword_267B92DB0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::_GetStaticTfType(v2);
      byte_267B92DA8 = sub_216D16508((char *)&qword_267B92D98, v3, v4);
      __cxa_guard_release(&qword_267B92DB0);
    }
  }
  return byte_267B92DA8;
}

void sub_216F25908(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return &qword_267B92D98;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetUVertexCountAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1200), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F259E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateUVertexCountAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1200), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 16), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVVertexCountAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1296), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F25B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateVVertexCountAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1296), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 16), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetUOrderAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1176), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F25CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateUOrderAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1176), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 16), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVOrderAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1280), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F25E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateVOrderAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1280), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 16), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetUKnotsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1144), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F25F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateUKnotsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 520), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVKnotsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1272), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F260E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateVKnotsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1272), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 520), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetUFormAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1136), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F26250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateUFormAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1136), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVFormAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1248), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F263B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateVFormAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1248), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetURangeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1192), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F26520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateURangeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1192), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 176), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVRangeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1288), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F26688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateVRangeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1288), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 176), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetPointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 824), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F267F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreatePointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 824), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 520), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetTrimCurveCountsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1080), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F26958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateTrimCurveCountsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1080), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 464), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetTrimCurveOrdersAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1096), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F26AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateTrimCurveOrdersAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1096), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 464), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetTrimCurveVertexCountsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1120), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F26C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateTrimCurveVertexCountsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1120), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 464), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetTrimCurveKnotsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1088), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F26D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateTrimCurveKnotsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1088), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 520), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetTrimCurveRangesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1112), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F26EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateTrimCurveRangesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1112), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 632), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetTrimCurvePointsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1104), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F27060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::CreateTrimCurvePointsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1104), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 640), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  int v1 = (int)this;
  uint64_t v57 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92DD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92DD0))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v4 = *((void *)v3 + 150);
    uint64_t v40 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v40 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5) {
      char v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v6 = *((void *)v5 + 162);
    uint64_t v41 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v41 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v7) {
      int v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v8 = *((void *)v7 + 147);
    uint64_t v42 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v42 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v9) {
      v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v10 = *((void *)v9 + 160);
    uint64_t v43 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v43 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v11) {
      uint64_t v11 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v12 = *((void *)v11 + 143);
    uint64_t v44 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v44 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v13) {
      char v13 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v14 = *((void *)v13 + 159);
    uint64_t v45 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v45 &= 0xFFFFFFFFFFFFFFF8;
    }
    v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v15) {
      v15 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v16 = *((void *)v15 + 142);
    uint64_t v46 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v46 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v17) {
      v17 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v18 = *((void *)v17 + 156);
    uint64_t v47 = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v47 &= 0xFFFFFFFFFFFFFFF8;
    }
    v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v19) {
      v19 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v20 = *((void *)v19 + 149);
    uint64_t v48 = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v48 &= 0xFFFFFFFFFFFFFFF8;
    }
    v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v21) {
      v21 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v22 = *((void *)v21 + 161);
    uint64_t v49 = v22;
    if ((v22 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v49 &= 0xFFFFFFFFFFFFFFF8;
    }
    v23 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v23) {
      v23 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v24 = *((void *)v23 + 103);
    uint64_t v50 = v24;
    if ((v24 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v50 &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v25) {
      v25 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v26 = *((void *)v25 + 135);
    uint64_t v51 = v26;
    if ((v26 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v51 &= 0xFFFFFFFFFFFFFFF8;
    }
    v27 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v27) {
      v27 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v28 = *((void *)v27 + 137);
    uint64_t v52 = v28;
    if ((v28 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v52 &= 0xFFFFFFFFFFFFFFF8;
    }
    v29 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v29) {
      v29 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v30 = *((void *)v29 + 140);
    uint64_t v53 = v30;
    if ((v30 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v53 &= 0xFFFFFFFFFFFFFFF8;
    }
    v31 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v31) {
      v31 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v32 = *((void *)v31 + 136);
    uint64_t v54 = v32;
    if ((v32 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v54 &= 0xFFFFFFFFFFFFFFF8;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v33) {
      v33 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v34 = *((void *)v33 + 139);
    uint64_t v55 = v34;
    if ((v34 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v55 &= 0xFFFFFFFFFFFFFFF8;
    }
    v35 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v35) {
      v35 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v36 = *((void *)v35 + 138);
    uint64_t v56 = v36;
    if ((v36 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v56 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B92DB8, &v40, 0x11uLL);
    for (uint64_t i = 128; i != -8; i -= 8)
    {
      uint64_t v38 = *(uint64_t *)((char *)&v40 + i);
      if ((v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B92DB8, &dword_216758000);
    __cxa_guard_release(&qword_267B92DD0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92DF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92DF0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)1);
    sub_216F27820((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B92DD8, &dword_216758000);
    __cxa_guard_release(&qword_267B92DF0);
  }
  if (v1) {
    return &qword_267B92DD8;
  }
  else {
    return &qword_267B92DB8;
  }
}

void sub_216F2779C(_Unwind_Exception *a1)
{
}

void *sub_216F27820(uint64_t **a1)
{
  qword_267B92DE0 = 0;
  unk_267B92DE8 = 0;
  qword_267B92DD8 = 0;
  sub_216973388((char **)&qword_267B92DD8, ((unk_267B92DC0 - qword_267B92DB8) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B92DD8, (void *)qword_267B92DE0, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B92DD8, (void *)qword_267B92DE0, (uint64_t *)qword_267B92DB8, unk_267B92DC0, (unk_267B92DC0 - qword_267B92DB8) >> 3);
}

void sub_216F278B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F278D8()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F12A84((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F279B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F27A04(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F27A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F27ABC()
{
  sub_216F28EA0();
  sub_216779094(__p, "Plane");
  sub_216F28FCC((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F27B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPlane::~UsdGeomPlane(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPlane::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CCA0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    v9 = "usdGeom/plane.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdGeomPlane pxrInternal__aapl__pxrReserved__::UsdGeomPlane::Get(const UsdStagePtr &,"
                            " const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CCA0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F27CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPlane::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92E00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92E00))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B92DF8, "Plane");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B92DF8, &dword_216758000);
    __cxa_guard_release(&qword_267B92E00);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B92DF8, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CCA0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    v9 = "usdGeom/plane.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdGeomPlane pxrInternal__aapl__pxrReserved__::UsdGeomPlane::Define(const UsdStagePtr"
                            " &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CCA0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F27EE4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPlane::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPlane::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92E10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92E10))
  {
    __cxa_guard_release(&qword_267B92E10);
  }
  return &qword_267B92E08;
}

void sub_216F27F8C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPlane::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92E20, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomPlane *)__cxa_guard_acquire(&qword_267B92E20);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPlane::_GetStaticTfType(v2);
      byte_267B92E18 = sub_216D16508((char *)&qword_267B92E08, v3, v4);
      __cxa_guard_release(&qword_267B92E20);
    }
  }
  return byte_267B92E18;
}

void sub_216F2800C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPlane::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this)
{
  return &qword_267B92E08;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPlane::GetDoubleSidedAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 240), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F280E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPlane::CreateDoubleSidedAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 240), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPlane::GetWidthAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1304), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2824C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPlane::CreateWidthAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1304), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPlane::GetLengthAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 536), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F283B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPlane::CreateLengthAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 536), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPlane::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 24), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2851C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPlane::CreateAxisAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 24), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPlane::GetExtentAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 296), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F28684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPlane::CreateExtentAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 296), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 616), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPlane::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomPlane *this)
{
  int v1 = (int)this;
  uint64_t v21 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92E40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92E40))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v4 = *((void *)v3 + 30);
    uint64_t v16 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5) {
      char v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v6 = *((void *)v5 + 163);
    uint64_t v17 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v7) {
      int v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v8 = *((void *)v7 + 67);
    uint64_t v18 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v9) {
      v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v10 = *((void *)v9 + 3);
    uint64_t v19 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v11) {
      uint64_t v11 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v12 = *((void *)v11 + 37);
    uint64_t v20 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B92E28, &v16, 5uLL);
    for (uint64_t i = 32; i != -8; i -= 8)
    {
      uint64_t v14 = *(uint64_t *)((char *)&v16 + i);
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B92E28, &dword_216758000);
    __cxa_guard_release(&qword_267B92E40);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92E60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92E60))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)1);
    sub_216F28AB4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B92E48, &dword_216758000);
    __cxa_guard_release(&qword_267B92E60);
  }
  if (v1) {
    return &qword_267B92E48;
  }
  else {
    return &qword_267B92E28;
  }
}

void sub_216F28A30(_Unwind_Exception *a1)
{
}

void *sub_216F28AB4(uint64_t **a1)
{
  qword_267B92E50 = 0;
  unk_267B92E58 = 0;
  qword_267B92E48 = 0;
  sub_216973388((char **)&qword_267B92E48, ((*(void *)algn_267B92E30 - qword_267B92E28) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B92E48, (void *)qword_267B92E50, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B92E48, (void *)qword_267B92E50, (uint64_t *)qword_267B92E28, *(uint64_t **)algn_267B92E30, (*(void *)algn_267B92E30 - qword_267B92E28) >> 3);
}

void sub_216F28B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPlane::ComputeExtent(void *a1, unint64_t *a2, double a3, double a4)
{
  float v18 = 0.0;
  float32x2_t v17 = 0;
  uint64_t v19 = &v17;
  sub_2168FD278(a2, 2uLL, (uint64_t **)&v19);
  uint64_t v10 = sub_216F28C28(a1, (float *)&v17, a3, a4);
  if (v10)
  {
    float32_t v11 = -v18;
    sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v8, v9);
    uint64_t v12 = (float32x2_t *)a2[4];
    *uint64_t v12 = vneg_f32(v17);
    v12[1].f32[0] = v11;
    sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v13, v14);
    unint64_t v15 = a2[4];
    *(float32x2_t *)(v15 + 12) = v17;
    *(float *)(v15 + 20) = v18;
  }
  return v10;
}

uint64_t sub_216F28C28(void *a1, float *a2, double a3, double a4)
{
  double v6 = a3 * 0.5;
  double v7 = a4 * 0.5;
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float v9 = v6;
  float v10 = v7;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 166) & 0xFFFFFFFFFFFFFFF8))
  {
    float v14 = 0.0;
    float v15 = v10;
  }
  else
  {
    float32_t v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v11) {
      float32_t v11 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 168) & 0xFFFFFFFFFFFFFFF8))
    {
      float v15 = 0.0;
      float v14 = v9;
      float v9 = v10;
    }
    else
    {
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v12) {
        uint64_t v12 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v12 + 169) & 0xFFFFFFFFFFFFFFF8)) {
        return 0;
      }
      float v14 = v9;
      float v15 = v10;
      float v9 = 0.0;
    }
  }
  *a2 = v14;
  a2[1] = v15;
  uint64_t result = 1;
  a2[2] = v9;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPlane::ComputeExtent(void *a1, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2, unint64_t *a3, double a4, double a5)
{
  DWORD2(v27[0]) = 0;
  *(void *)&v27[0] = 0;
  *(void *)&v23.f64[0] = v27;
  sub_2168FD278(a3, 2uLL, (uint64_t **)&v23);
  uint64_t v10 = sub_216F28C28(a1, (float *)v29, a4, a5);
  if (v10)
  {
    float32x2_t v11 = (float32x2_t)vrev64_s32(*(int32x2_t *)v29);
    v11.f32[0] = -*(float *)&v29[8];
    v27[0] = vcvtq_f64_f32(vneg_f32(*(float32x2_t *)v29));
    v27[1] = vcvtq_f64_f32(v11);
    v27[2] = vcvtq_f64_f32(*(float32x2_t *)&v29[4]);
    pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)v27, a2);
    char v28 = 0;
    pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)v27, (uint64_t)&v23);
    float32_t v12 = v24;
    float32x2_t v13 = vcvt_f32_f64(v23);
    sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
    uint64_t v16 = (float32x2_t *)a3[4];
    *uint64_t v16 = v13;
    v16[1].f32[0] = v12;
    float v17 = v26;
    float32x2_t v18 = vcvt_f32_f64(v25);
    sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v19, v20);
    unint64_t v21 = a3[4];
    *(float32x2_t *)(v21 + 12) = v18;
    *(float *)(v21 + 20) = v17;
  }
  return v10;
}

void sub_216F28E60(uint64_t a1, const std::type_info *a2, char *a3)
{
  var8.__vftable = (std::type_info_vtbl *)sub_216F29084;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_216F28EA0()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F0D538((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F28F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F28FCC(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F29060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F29084(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1)
{
  int v1 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v5, a1);
  char v5 = &unk_26C76CCA0;
  if (v6 && (*(unsigned char *)(v6 + 57) & 8) == 0 && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v1) & 1) != 0
    || (v3[0] = "usdGeom/plane.cpp",
        v3[1] = "_ComputeExtentForPlane",
        v3[2] = 306,
        v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtentForPlane(const UsdGeomBoundable &, const UsdTimeCod"
                "e &, const GfMatrix4d *, VtVec3fArray *)",
        char v4 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v3, "planeSchema", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPlane::GetWidthAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPlane *)&v5, (uint64_t)v3);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)&v5);
  return 0;
}

void sub_216F292C8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)(v1 - 56));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::~UsdGeomPointBased(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CCF8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    float v9 = "usdGeom/pointBased.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdGeomPointBased pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CCF8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F294F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92E70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92E70))
  {
    __cxa_guard_release(&qword_267B92E70);
  }
  return &qword_267B92E68;
}

void sub_216F29580(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92E80, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)__cxa_guard_acquire(&qword_267B92E80);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::_GetStaticTfType(v2);
      byte_267B92E78 = sub_216D16508((char *)&qword_267B92E68, v3, v4);
      __cxa_guard_release(&qword_267B92E80);
    }
  }
  return byte_267B92E78;
}

void sub_216F29600(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  return &qword_267B92E68;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 816), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F296D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreatePointsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 816), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 664), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetVelocitiesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1216), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F29840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreateVelocitiesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1216), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 688), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetAccelerationsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, v3, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F299A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreateAccelerationsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 688), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 704), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F29B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreateNormalsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 704), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 712), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  int v1 = (int)this;
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92EA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92EA0))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v4 = *((void *)v3 + 102);
    uint64_t v14 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5) {
      char v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v6 = *((void *)v5 + 152);
    uint64_t v15 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v7) {
      int v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v8 = *(void *)v7;
    uint64_t v16 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    float v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v9) {
      float v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v10 = *((void *)v9 + 88);
    uint64_t v17 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B92E88, &v14, 4uLL);
    for (uint64_t i = 24; i != -8; i -= 8)
    {
      uint64_t v12 = *(uint64_t *)((char *)&v14 + i);
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B92E88, &dword_216758000);
    __cxa_guard_release(&qword_267B92EA0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92EC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92EC0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)1);
    sub_216F29EF4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B92EA8, &dword_216758000);
    __cxa_guard_release(&qword_267B92EC0);
  }
  if (v1) {
    return &qword_267B92EA8;
  }
  else {
    return &qword_267B92E88;
  }
}

void sub_216F29E70(_Unwind_Exception *a1)
{
}

void *sub_216F29EF4(uint64_t **a1)
{
  qword_267B92EB0 = 0;
  unk_267B92EB8 = 0;
  qword_267B92EA8 = 0;
  sub_216973388((char **)&qword_267B92EA8, ((*(void *)algn_267B92E90 - qword_267B92E88) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B92EA8, (void *)qword_267B92EB0, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B92EA8, (void *)qword_267B92EB0, (uint64_t *)qword_267B92E88, *(uint64_t **)algn_267B92E90, (*(void *)algn_267B92E90 - qword_267B92E88) >> 3);
}

void sub_216F29F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this@<X0>, atomic_uint **a2@<X8>)
{
  char v13 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr(this, (uint64_t)&v8);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v14 = 0;
  BOOL v4 = sub_216D1D1CC((uint64_t)&v8, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 488), (uint64_t)&v13, &v14);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
  if (v4)
  {
    *a2 = v13;
    char v13 = 0;
  }
  else
  {
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5) {
      char v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v6 = (atomic_uint *)*((void *)v5 + 153);
    *a2 = v6;
    if ((v6 & 7) != 0)
    {
      int v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v7;
      }
    }
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F2A0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::SetNormalsInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsValidInterpolation(a2, a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr(this, (uint64_t)v17);
    BOOL v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v4) {
      BOOL v4 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v10 = 0;
    sub_216D1CF30((uint64_t)v17, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v4 + 488));
  }
  v17[0] = "usdGeom/pointBased.cpp";
  v17[1] = "SetNormalsInterpolation";
  v17[2] = 233;
  v17[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::SetNormalsInterpolation(const TfToken &)";
  char v18 = 0;
  unint64_t v5 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    uint64_t v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0) {
      uint64_t v6 = *(const char **)v6;
    }
  }
  else
  {
    uint64_t v6 = "";
  }
  sub_216D16CFC((uint64_t)&v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216D0162C((uint64_t)&v10, &v15);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
  if (*((char *)String + 23) >= 0) {
    uint64_t v8 = (const char *)String;
  }
  else {
    uint64_t v8 = (const char *)*String;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to set invalid interpolation \"%s\" for normals attr on prim %s", v6, v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  return 0;
}

void sub_216F2A2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_216D2EDA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::ComputeExtent(void *a1, unint64_t *a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  v33 = a1;
  int v45 = 0;
  uint64_t v44 = 0;
  v39[0] = &v44;
  sub_2168FD278(a2, 2uLL, v39);
  int64x2_t v35 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  long long v36 = xmmword_217412860;
  int64x2_t v37 = vdupq_n_s64(0xC7EFFFFFE0000000);
  uint64_t v7 = *a1;
  if (*a1)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v4))
    {
      LODWORD(v44) = 0;
      uint64_t v46 = 65539;
      int v47 = 55;
      tbb::task_group_context::init((uint64_t)&v44, v5, (uint64_t)v6, v8);
      int64x2_t v40 = v35;
      long long v41 = v36;
      uint64_t v38 = &v33;
      v39[0] = (uint64_t *)&v35;
      v39[1] = (uint64_t *)&v38;
      v39[2] = (uint64_t *)&v34;
      int64x2_t v42 = v37;
      uint64_t v43 = (tbb::task_group_context *)&v44;
      uint64_t v9 = tbb::internal::allocate_root_with_context_proxy::allocate(&v43, 0x40uLL);
      *(unsigned char *)(v9 - 11) = 1;
      *(void *)uint64_t v9 = &unk_26C76CD50;
      *(void *)(v9 + 8) = v39;
      *(void *)(v9 + 16) = v7;
      *(_OWORD *)(v9 + 24) = xmmword_2174A3F20;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v9);
      *(_DWORD *)(v9 + 48) = 0;
      *(unsigned char *)(v9 + 52) = 5;
      *(void *)(v9 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      *(unsigned char *)(v9 + 56) = 0;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v9 - 40) + 16))(*(void *)(v9 - 40), v9, v9 - 8);
      double v12 = *(double *)&v40.i64[1];
      double v11 = *(double *)v40.i64;
      double v13 = *((double *)&v41 + 1);
      double v14 = *(double *)&v41;
      double v15 = *(double *)&v42.i64[1];
      double v16 = *(double *)v42.i64;
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v44);
    }
    else
    {
      uint64_t v17 = (float *)(a1[4] + 8);
      double v14 = 3.40282347e38;
      double v15 = -3.40282347e38;
      double v16 = -3.40282347e38;
      double v13 = -3.40282347e38;
      double v12 = 3.40282347e38;
      double v11 = 3.40282347e38;
      do
      {
        double v18 = *(v17 - 2);
        double v19 = *(v17 - 1);
        float v20 = *v17;
        v17 += 3;
        double v21 = v20;
        if (v11 > v18) {
          double v11 = v18;
        }
        if (v12 > v19) {
          double v12 = v19;
        }
        if (v14 > v21) {
          double v14 = v21;
        }
        if (v13 < v18) {
          double v13 = v18;
        }
        if (v16 < v19) {
          double v16 = v19;
        }
        if (v15 < v21) {
          double v15 = v21;
        }
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    double v13 = -3.40282347e38;
    double v11 = 3.40282347e38;
    double v12 = 3.40282347e38;
    double v14 = 3.40282347e38;
    double v16 = -3.40282347e38;
    double v15 = -3.40282347e38;
  }
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v5, v6);
  float v22 = v11;
  float v23 = v12;
  double v24 = (float *)a2[4];
  float v25 = v14;
  *double v24 = v22;
  v24[1] = v23;
  v24[2] = v25;
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v26, v27);
  float v28 = v13;
  float v29 = v16;
  float v30 = v15;
  v31 = (float *)a2[4];
  v31[3] = v28;
  v31[4] = v29;
  v31[5] = v30;
  return 1;
}

void sub_216F2A614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a27, v31);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a29);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::ComputeExtent(uint64_t *a1, float64x2_t *a2, unint64_t *a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  v38[0] = a1;
  v38[1] = a2;
  int v50 = 0;
  uint64_t v49 = 0;
  v44[0] = &v49;
  sub_2168FD278(a3, 2uLL, v44);
  int64x2_t v40 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  long long v41 = xmmword_217412860;
  int64x2_t v42 = vdupq_n_s64(0xC7EFFFFFE0000000);
  uint64_t v9 = *a1;
  if (*a1)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v6))
    {
      LODWORD(v49) = 0;
      uint64_t v51 = 65539;
      int v52 = 55;
      tbb::task_group_context::init((uint64_t)&v49, v10, v11, v12);
      int64x2_t v45 = v40;
      long long v46 = v41;
      uint64_t v43 = v38;
      v44[0] = (uint64_t *)&v40;
      v44[1] = (uint64_t *)&v43;
      v44[2] = (uint64_t *)&v39;
      int64x2_t v47 = v42;
      uint64_t v48 = (tbb::task_group_context *)&v49;
      uint64_t v13 = tbb::internal::allocate_root_with_context_proxy::allocate(&v48, 0x40uLL);
      *(unsigned char *)(v13 - 11) = 1;
      *(void *)uint64_t v13 = &unk_26C76CDE0;
      *(void *)(v13 + 8) = v44;
      *(void *)(v13 + 16) = v9;
      *(_OWORD *)(v13 + 24) = xmmword_2174A3F20;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v13);
      *(_DWORD *)(v13 + 48) = 0;
      *(unsigned char *)(v13 + 52) = 5;
      *(void *)(v13 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      *(unsigned char *)(v13 + 56) = 0;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v13 - 40) + 16))(*(void *)(v13 - 40), v13, v13 - 8);
      double v16 = *(double *)&v45.i64[1];
      double v15 = *(double *)v45.i64;
      double v17 = *((double *)&v46 + 1);
      double v18 = *(double *)&v46;
      double v19 = *(double *)&v47.i64[1];
      double v20 = *(double *)v47.i64;
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v49);
    }
    else
    {
      uint64_t v21 = 0;
      double v18 = 3.40282347e38;
      double v19 = -3.40282347e38;
      double v20 = -3.40282347e38;
      double v17 = -3.40282347e38;
      double v16 = 3.40282347e38;
      double v15 = 3.40282347e38;
      do
      {
        double v22 = sub_216F2C3F8(a2, (float *)(a1[4] + v21)).f32[0];
        double v24 = v23;
        double v26 = v25;
        if (v15 > v22) {
          double v15 = v22;
        }
        if (v16 > v24) {
          double v16 = v24;
        }
        if (v18 > v26) {
          double v18 = v26;
        }
        if (v17 < v22) {
          double v17 = v22;
        }
        if (v20 < v24) {
          double v20 = v24;
        }
        if (v19 < v26) {
          double v19 = v26;
        }
        v21 += 12;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    double v17 = -3.40282347e38;
    double v15 = 3.40282347e38;
    double v16 = 3.40282347e38;
    double v18 = 3.40282347e38;
    double v20 = -3.40282347e38;
    double v19 = -3.40282347e38;
  }
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v7, v8);
  float v27 = v15;
  float v28 = v16;
  float v29 = (float *)a3[4];
  float v30 = v18;
  float *v29 = v27;
  v29[1] = v28;
  v29[2] = v30;
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v31, v32);
  float v33 = v17;
  float v34 = v20;
  float v35 = v19;
  long long v36 = (float *)a3[4];
  v36[3] = v33;
  v36[4] = v34;
  v36[5] = v35;
  return 1;
}

void sub_216F2A920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a29, v33);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a31);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::ComputePointsAtTime(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v8 = (void **)operator new(8uLL);
  *(double *)uint64_t v8 = a3;
  v11[1] = v8 + 1;
  v11[2] = v8 + 1;
  v11[0] = v8;
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::ComputePointsAtTimes(a1, (uint64_t *)&v12, (uint64_t *)v11, a4);
  if (v9)
  {
    if (v13 == v12) {
      sub_216F2C540();
    }
    sub_216C48F14(a2, v12);
  }
  operator delete(v8);
  v11[0] = (void **)&v12;
  sub_216F2C49C(v11);
  return v9;
}

void sub_216F2AA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  sub_216F2C49C(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::ComputePointsAtTimes(uint64_t a1, uint64_t *a2, uint64_t *a3, double a4)
{
  uint64_t v5 = a3[1];
  uint64_t v17 = *a3;
  uint64_t v16 = v5 - *a3;
  if (v5 != *a3)
  {
    uint64_t v6 = *a3;
    do
      v6 += 8;
    while (v6 != v5);
  }
  uint64_t v43 = 0;
  memset(v42, 0, sizeof(v42));
  uint64_t v41 = 0;
  memset(v40, 0, sizeof(v40));
  double v39 = 0.0;
  uint64_t v38 = 0;
  memset(v37, 0, sizeof(v37));
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)a1, (uint64_t)&v20);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetVelocitiesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)a1, (uint64_t)v32);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetAccelerationsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)a1, (uint64_t)&v28);
  sub_216D16CFC((uint64_t)&v23, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t PositionsVelocitiesAndAccelerations = pxrInternal__aapl__pxrReserved__::UsdGeom_GetPositionsVelocitiesAndAccelerations((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v20, a4, (uint64_t)v32, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v28, 0, (uint64_t *)v42, v40, &v39, v37, (uint64_t)&v23);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_21697C414(&v25);
  if (v24) {
    sub_216D16E0C(v24);
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  if (v29) {
    sub_216D16E0C(v29);
  }
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
  sub_21697C414(&v34);
  if (v33) {
    sub_216D16E0C(v33);
  }
  if ((BYTE8(v21) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v21 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
  sub_21697C414(&v21);
  if (*((void *)&v20 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v20 + 1));
  }
  if (PositionsVelocitiesAndAccelerations)
  {
    unint64_t v8 = v16 >> 3;
    if (*(void *)&v42[0])
    {
      sub_216D16CFC((uint64_t)&v20, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v20, v9, &v23);
      if ((BYTE8(v21) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v21 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
      sub_21697C414(&v21);
      if (*((void *)&v20 + 1)) {
        sub_216D16E0C(*((atomic_ullong **)&v20 + 1));
      }
      float v28 = 0;
      float v29 = 0;
      uint64_t v30 = 0;
      sub_216F2B0E4((uint64_t *)&v28, v8);
      if (v17 != v5)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)&v40[0];
        if (v8 <= 1) {
          unint64_t v8 = 1;
        }
        do
        {
          if (!v12)
          {
            uint64_t v22 = 0;
            long long v20 = 0u;
            long long v21 = 0u;
            pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)a1, (uint64_t)v32);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::ComputePointsAtTime((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)((char *)v28 + v10), &v23, (uint64_t *)v42, (uint64_t *)v40, (uint64_t *)v37, *(double *)(*a3 + 8 * v11++), v39);
          v10 += 40;
        }
        while (v8 != v11);
      }
      if (&v28 != (long long **)a2) {
        sub_216F2C974(a2, v28, (long long *)v29, 0xCCCCCCCCCCCCCCCDLL * (((char *)v29 - (char *)v28) >> 3));
      }
      *(void *)&long long v20 = &v28;
      sub_216F2C49C((void ***)&v20);
      uint64_t v13 = v24;
      uint64_t PositionsVelocitiesAndAccelerations = PositionsVelocitiesAndAccelerations;
      if (v24 && atomic_fetch_add_explicit((atomic_uint *volatile)v24 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_ullong *))(*v13 + 8))(v13);
      }
    }
    else
    {
      sub_216F2C4F0((uint64_t)a2, *a2);
      sub_216F2B0E4(a2, v8);
    }
  }
  sub_2168F83DC((uint64_t)v37);
  sub_2168F83DC((uint64_t)v40);
  sub_2168F83DC((uint64_t)v42);
  return PositionsVelocitiesAndAccelerations;
}

void sub_216F2AF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_2168F83DC((uint64_t)&a33);
  sub_2168F83DC(v33 - 192);
  sub_2168F83DC(v33 - 144);
  _Unwind_Resume(a1);
}

void sub_216F2B0E4(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_216F2C558(a1, v4);
  }
  else if (!v3)
  {
    sub_216F2C4F0((uint64_t)a1, *a1 + 40 * a2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::ComputePointsAtTime(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, double a6, double a7)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  int64x2_t v37 = a1;
  unint64_t v13 = *a3;
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::PcpCache **)sub_216D01530(a2);
  double TimeCodesPerSecond = pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v14);
  double v36 = pxrInternal__aapl__pxrReserved__::UsdGeom_CalculateTimeDelta(a6, a7, TimeCodesPerSecond);
  int v40 = 0;
  uint64_t v39 = 0;
  v35[0] = &v39;
  sub_2168FD278((unint64_t *)a1, v13, v35);
  v35[0] = (uint64_t *)&v36;
  v35[1] = a3;
  v35[2] = a4;
  v35[3] = a5;
  v35[4] = (uint64_t *)&v37;
  if (v13)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v16))
    {
      LODWORD(v39) = 0;
      uint64_t v41 = 65539;
      int v42 = 55;
      tbb::task_group_context::init((uint64_t)&v39, v17, (uint64_t)v18, v19);
      uint64_t v38 = (tbb::task_group_context *)&v39;
      uint64_t v20 = tbb::internal::allocate_root_with_context_proxy::allocate(&v38, 0x38uLL);
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C76CE70;
      *(void *)(v20 + 8) = v13;
      *(_OWORD *)(v20 + 16) = xmmword_217411D30;
      *(void *)(v20 + 32) = v35;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v20);
      *(_DWORD *)(v20 + 48) = 0;
      *(unsigned char *)(v20 + 52) = 5;
      *(void *)(v20 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v20 - 40) + 16))(*(void *)(v20 - 40), v20, v20 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v39);
    }
    else
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v23 = (float32x2_t *)(a3[4] + v22);
        float32x2_t v24 = *v23;
        float v25 = v23[1].f32[0];
        if (*a4)
        {
          int v26 = (float32x2_t *)(a4[4] + v22);
          float32x2_t v27 = *v26;
          float v28 = v26[1].f32[0];
          if (*a5)
          {
            float v29 = (float32x2_t *)(a5[4] + v22);
            float v30 = v36 * v29[1].f32[0];
            float32x2_t v27 = vadd_f32(v27, vmul_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v29), v36)), (float32x2_t)0x3F0000003F000000));
            float v28 = v28 + (float)(v30 * 0.5);
          }
          float v31 = v36 * v28;
          float32x2_t v24 = vadd_f32(v24, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v27), v36)));
          float v25 = v25 + v31;
        }
        uint64_t v32 = v37;
        sub_2168FD54C(v37, v17, v18);
        uint64_t v33 = (float32x2_t *)(*((void *)v32 + 4) + v22);
        float32x2_t *v33 = v24;
        v33[1].f32[0] = v25;
        v22 += 12;
        --v13;
      }
      while (v13);
    }
  }
  return 1;
}

void sub_216F2B3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a17, v21);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a19);
  _Unwind_Resume(a1);
}

void sub_216F2B3E4(uint64_t a1, const std::type_info *a2, char *a3)
{
  var8.__vftable = (std::type_info_vtbl *)sub_216F2B554;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_216F2B424()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F0D538((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F2B504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216F2B554(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1)
{
  int v1 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v7, a1);
  int v7 = &unk_26C76CCF8;
  if (v8 && (*(unsigned char *)(v8 + 57) & 8) == 0 && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v1) & 1) != 0
    || (*(void *)&long long v4 = "usdGeom/pointBased.cpp",
        *((void *)&v4 + 1) = "_ComputeExtentForPointBased",
        *(void *)&long long v5 = 300,
        *((void *)&v5 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtentForPointBased(const UsdGeomBoundable"
                               " &, const UsdTimeCode &, const GfMatrix4d *, VtVec3fArray *)",
        LOBYTE(v6) = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v4, "pointBased", 0) & 1) != 0))
  {
    uint64_t v6 = 0;
    long long v4 = 0u;
    long long v5 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)&v7, (uint64_t)&v3);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)&v7);
  return 0;
}

void sub_216F2B6B8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_216F2B708(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  if (*((unsigned char *)this + 56) == 2)
  {
    uint64_t v4 = *((void *)this - 4);
    uint64_t v5 = *(void *)(v4 + 16);
    __dmb(0xBu);
    if (!v5)
    {
      uint64_t v6 = (long long **)*((void *)this + 1);
      *(void *)(v4 + 24) = *v6;
      uint64_t v7 = v4 + 24;
      *(void *)(v7 + 8) = v6[1];
      *(void *)(v7 + 16) = v6[2];
      uint64_t v8 = *v6;
      long long v9 = *v8;
      long long v10 = v8[1];
      *(_OWORD *)(v7 + 56) = v8[2];
      *(_OWORD *)(v7 + 40) = v10;
      *(_OWORD *)(v7 + 24) = v9;
      *((void *)this + 1) = v7;
      *(unsigned char *)(v7 - 15) = 1;
    }
  }
  uint64_t v11 = (long long *)((char *)this + 16);
  unint64_t v12 = *((void *)this + 4);
  unint64_t v13 = *((void *)this + 2) - *((void *)this + 3);
  if (v12 < v13)
  {
    unint64_t v14 = *((void *)this + 5);
    if (v14 > 1) {
      goto LABEL_15;
    }
    if (v14 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_15:
      while (1)
      {
        uint64_t v15 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x60uLL);
        *((void *)this - 4) = v15;
        *(void *)(v15 - 24) = 2;
        uint64_t v16 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v15, 0x40uLL);
        char v17 = *((unsigned char *)this + 56);
        *(unsigned char *)(v15 - 11) = 1;
        *(void *)uint64_t v15 = &unk_26C751420;
        __dmb(0xBu);
        *(unsigned char *)(v15 + 8) = 0;
        *(void *)uint64_t v15 = &unk_26C76CD98;
        *(unsigned char *)(v15 + 9) = 0;
        *(unsigned char *)(v15 + 10) = v17;
        *(void *)(v15 + 16) = 0;
        *(unsigned char *)(v16 - 11) = 1;
        *(void *)uint64_t v16 = &unk_26C76CD50;
        *(void *)(v16 + 8) = *((void *)this + 1);
        *(void *)(v16 + 16) = *((void *)this + 2);
        uint64_t v18 = *((void *)this + 3) + ((*((void *)this + 2) - *((void *)this + 3)) >> 1);
        *((void *)this + 2) = v18;
        *(void *)(v16 + 24) = v18;
        *(void *)(v16 + 32) = *((void *)this + 4);
        uint64_t v19 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v19;
        *(void *)(v16 + 40) = v19;
        *(_DWORD *)(v16 + 48) = 2;
        *(unsigned char *)(v16 + 52) = *((unsigned char *)this + 52);
        *(unsigned char *)(v16 + 56) = 2;
        *((unsigned char *)this + 56) = 1;
        (***(void (****)(void))(v16 - 40))();
        unint64_t v12 = *((void *)this + 4);
        unint64_t v13 = *((void *)this + 2) - *((void *)this + 3);
        if (v12 >= v13) {
          break;
        }
        unint64_t v20 = *((void *)this + 5);
        if (v20 <= 1)
        {
          if (!v20 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v12 < v13 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)double v36 = 0x10000;
    long long v37 = *v11;
    uint64_t v38 = *((void *)this + 4);
    while (1)
    {
      sub_216B17510(v36, *((unsigned __int8 *)this + 52));
      char v21 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if (v21)
      {
        unsigned __int8 v23 = *((unsigned char *)this + 52) + 1;
        *((unsigned char *)this + 52) = v23;
        unsigned __int8 v24 = v36[2];
        if (v36[2] >= 2u)
        {
          unsigned int v25 = v36[1];
          unsigned __int8 v26 = v36[v36[1] + 3];
          uint64_t v27 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x60uLL);
          *((void *)this - 4) = v27;
          *(void *)(v27 - 24) = 2;
          uint64_t v28 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v27, 0x40uLL);
          float v29 = (char *)&v37 + 24 * v25;
          char v30 = *((unsigned char *)this + 56);
          *(unsigned char *)(v27 - 11) = 1;
          *(void *)uint64_t v27 = &unk_26C751420;
          __dmb(0xBu);
          *(unsigned char *)(v27 + 8) = 0;
          *(void *)uint64_t v27 = &unk_26C76CD98;
          *(unsigned char *)(v27 + 9) = 0;
          *(unsigned char *)(v27 + 10) = v30;
          *(void *)(v27 + 16) = 0;
          *(unsigned char *)(v28 - 11) = 1;
          *(void *)uint64_t v28 = &unk_26C76CD50;
          *(void *)(v28 + 8) = *((void *)this + 1);
          long long v31 = *(_OWORD *)v29;
          *(void *)(v28 + 32) = *((void *)v29 + 2);
          *(_OWORD *)(v28 + 16) = v31;
          uint64_t v32 = *((void *)this + 5) >> 1;
          *((void *)this + 5) = v32;
          *(void *)(v28 + 40) = v32;
          *(_DWORD *)(v28 + 48) = 2;
          LOBYTE(v32) = *((unsigned char *)this + 52);
          *(unsigned char *)(v28 + 56) = 2;
          *(unsigned char *)(v28 + 52) = v32 - v26;
          *((unsigned char *)this + 56) = 1;
          (***(void (****)(void))(v28 - 40))();
          unsigned __int8 v24 = --v36[2];
          v36[1] = (v36[1] + 1) & 7;
          goto LABEL_30;
        }
        unsigned int v22 = v36[0];
        if (v36[v36[0] + 3] < v23
          && *((void *)&v37 + 3 * v36[0] + 2) < *((void *)&v37 + 3 * v36[0]) - *((void *)&v37 + 3 * v36[0] + 1))
        {
          goto LABEL_30;
        }
      }
      else
      {
        unsigned int v22 = v36[0];
      }
      sub_216F2BCC8((uint64_t)this, (void *)&v37 + 3 * v22);
      unsigned __int8 v24 = --v36[2];
      v36[0] = (v36[0] - 1) & 7;
LABEL_30:
      if (!v24 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        goto LABEL_34;
      }
    }
  }
  sub_216F2BCC8((uint64_t)this, (void *)this + 2);
LABEL_34:
  if (*((unsigned char *)this + 56) == 1)
  {
    uint64_t v33 = *((void *)this - 4);
    uint64_t v34 = *((void *)this + 1);
    __dmb(0xBu);
    *(void *)(v33 + 16) = v34;
  }
  return 0;
}

void *sub_216F2BC2C(void *result)
{
  *uint64_t result = &unk_26C76CD98;
  return result;
}

uint64_t sub_216F2BC50(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9))
  {
    uint64_t v1 = *(void *)(a1 + 16);
    v2.f64[0] = *(float64_t *)(a1 + 64);
    v2.f64[1] = *(float64_t *)(v1 + 48);
    v3.f64[0] = *(float64_t *)(v1 + 40);
    v3.f64[1] = *(float64_t *)(a1 + 72);
    int8x16_t v4 = vbslq_s8((int8x16_t)vcgtq_f64(v3, v2), *(int8x16_t *)(a1 + 64), *(int8x16_t *)(v1 + 40));
    int8x16_t v5 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(a1 + 80), *(float64x2_t *)(v1 + 56)), *(int8x16_t *)(a1 + 80), *(int8x16_t *)(v1 + 56));
    *(int8x16_t *)(v1 + 24) = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v1 + 24), *(float64x2_t *)(a1 + 48)), *(int8x16_t *)(a1 + 48), *(int8x16_t *)(v1 + 24));
    *(int8x16_t *)(v1 + 40) = v4;
    *(int8x16_t *)(v1 + 56) = v5;
  }
  if (*(unsigned char *)(a1 + 10) == 1)
  {
    uint64_t v6 = *(void *)(a1 - 32);
    uint64_t v7 = *(void *)(a1 + 16);
    __dmb(0xBu);
    *(void *)(v6 + 16) = v7;
  }
  return 0;
}

uint64_t sub_216F2BCC8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = a2[1];
  float64x2_t v4 = *(float64x2_t *)(v2 + 24);
  int8x16_t v5 = *(int8x16_t *)(v2 + 40);
  float64x2_t v6 = *(float64x2_t *)(v2 + 56);
  uint64_t v7 = *a2 - v3;
  if (*a2 != v3)
  {
    uint64_t v8 = (float *)(*(void *)(***(void ***)(v2 + 8) + 32) + 12 * v3 + 8);
    do
    {
      float64x2_t v9 = vcvtq_f64_f32(*(float32x2_t *)(v8 - 2));
      float64x2_t v10 = (float64x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL);
      v11.f64[1] = v10.f64[1];
      *(void *)&v12.f64[1] = v5.i64[1];
      *(void *)&v11.f64[0] = v5.i64[0];
      v12.f64[0] = *v8;
      float64x2_t v4 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v4, v9), (int8x16_t)v9, (int8x16_t)v4);
      v13.i64[1] = *(void *)&v10.f64[1];
      *(double *)v13.i64 = v12.f64[0];
      int8x16_t v5 = vbslq_s8((int8x16_t)vcgtq_f64(v11, v12), v13, v5);
      v10.f64[1] = v12.f64[0];
      float64x2_t v6 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v10, v6), (int8x16_t)v10, (int8x16_t)v6);
      v8 += 3;
      --v7;
    }
    while (v7);
  }
  *(float64x2_t *)(v2 + 24) = v4;
  *(int8x16_t *)(v2 + 40) = v5;
  *(float64x2_t *)(v2 + 56) = v6;
  return result;
}

uint64_t sub_216F2BD6C(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  if (*((unsigned char *)this + 56) == 2)
  {
    uint64_t v4 = *((void *)this - 4);
    uint64_t v5 = *(void *)(v4 + 16);
    __dmb(0xBu);
    if (!v5)
    {
      float64x2_t v6 = (long long **)*((void *)this + 1);
      *(void *)(v4 + 24) = *v6;
      uint64_t v7 = v4 + 24;
      *(void *)(v7 + 8) = v6[1];
      *(void *)(v7 + 16) = v6[2];
      uint64_t v8 = *v6;
      long long v9 = *v8;
      long long v10 = v8[1];
      *(_OWORD *)(v7 + 56) = v8[2];
      *(_OWORD *)(v7 + 40) = v10;
      *(_OWORD *)(v7 + 24) = v9;
      *((void *)this + 1) = v7;
      *(unsigned char *)(v7 - 15) = 1;
    }
  }
  float64x2_t v11 = (long long *)((char *)this + 16);
  unint64_t v12 = *((void *)this + 4);
  unint64_t v13 = *((void *)this + 2) - *((void *)this + 3);
  if (v12 < v13)
  {
    unint64_t v14 = *((void *)this + 5);
    if (v14 > 1) {
      goto LABEL_15;
    }
    if (v14 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_15:
      while (1)
      {
        uint64_t v15 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x60uLL);
        *((void *)this - 4) = v15;
        *(void *)(v15 - 24) = 2;
        uint64_t v16 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v15, 0x40uLL);
        char v17 = *((unsigned char *)this + 56);
        *(unsigned char *)(v15 - 11) = 1;
        *(void *)uint64_t v15 = &unk_26C751420;
        __dmb(0xBu);
        *(unsigned char *)(v15 + 8) = 0;
        *(void *)uint64_t v15 = &unk_26C76CE28;
        *(unsigned char *)(v15 + 9) = 0;
        *(unsigned char *)(v15 + 10) = v17;
        *(void *)(v15 + 16) = 0;
        *(unsigned char *)(v16 - 11) = 1;
        *(void *)uint64_t v16 = &unk_26C76CDE0;
        *(void *)(v16 + 8) = *((void *)this + 1);
        *(void *)(v16 + 16) = *((void *)this + 2);
        uint64_t v18 = *((void *)this + 3) + ((*((void *)this + 2) - *((void *)this + 3)) >> 1);
        *((void *)this + 2) = v18;
        *(void *)(v16 + 24) = v18;
        *(void *)(v16 + 32) = *((void *)this + 4);
        uint64_t v19 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v19;
        *(void *)(v16 + 40) = v19;
        *(_DWORD *)(v16 + 48) = 2;
        *(unsigned char *)(v16 + 52) = *((unsigned char *)this + 52);
        *(unsigned char *)(v16 + 56) = 2;
        *((unsigned char *)this + 56) = 1;
        (***(void (****)(void))(v16 - 40))();
        unint64_t v12 = *((void *)this + 4);
        unint64_t v13 = *((void *)this + 2) - *((void *)this + 3);
        if (v12 >= v13) {
          break;
        }
        unint64_t v20 = *((void *)this + 5);
        if (v20 <= 1)
        {
          if (!v20 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v12 < v13 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)double v36 = 0x10000;
    long long v37 = *v11;
    uint64_t v38 = *((void *)this + 4);
    while (1)
    {
      sub_216B17510(v36, *((unsigned __int8 *)this + 52));
      char v21 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v21 & 1) == 0) {
        break;
      }
      unsigned __int8 v24 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v24;
      unsigned __int8 v23 = v36[2];
      if (v36[2] < 2u)
      {
        unsigned int v22 = v36[0];
        if (v36[v36[0] + 3] < v24
          && *((void *)&v37 + 3 * v36[0] + 2) < *((void *)&v37 + 3 * v36[0]) - *((void *)&v37 + 3 * v36[0] + 1))
        {
          goto LABEL_30;
        }
        goto LABEL_25;
      }
      unsigned int v25 = v36[1];
      unsigned __int8 v26 = v36[v36[1] + 3];
      uint64_t v27 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x60uLL);
      *((void *)this - 4) = v27;
      *(void *)(v27 - 24) = 2;
      uint64_t v28 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v27, 0x40uLL);
      float v29 = (char *)&v37 + 24 * v25;
      char v30 = *((unsigned char *)this + 56);
      *(unsigned char *)(v27 - 11) = 1;
      *(void *)uint64_t v27 = &unk_26C751420;
      __dmb(0xBu);
      *(unsigned char *)(v27 + 8) = 0;
      *(void *)uint64_t v27 = &unk_26C76CE28;
      *(unsigned char *)(v27 + 9) = 0;
      *(unsigned char *)(v27 + 10) = v30;
      *(void *)(v27 + 16) = 0;
      *(unsigned char *)(v28 - 11) = 1;
      *(void *)uint64_t v28 = &unk_26C76CDE0;
      *(void *)(v28 + 8) = *((void *)this + 1);
      long long v31 = *(_OWORD *)v29;
      *(void *)(v28 + 32) = *((void *)v29 + 2);
      *(_OWORD *)(v28 + 16) = v31;
      uint64_t v32 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v32;
      *(void *)(v28 + 40) = v32;
      *(_DWORD *)(v28 + 48) = 2;
      LOBYTE(v32) = *((unsigned char *)this + 52);
      *(unsigned char *)(v28 + 56) = 2;
      *(unsigned char *)(v28 + 52) = v32 - v26;
      *((unsigned char *)this + 56) = 1;
      (***(void (****)(void))(v28 - 40))();
      unsigned __int8 v23 = --v36[2];
      v36[1] = (v36[1] + 1) & 7;
LABEL_30:
      if (!v23 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        goto LABEL_34;
      }
    }
    unsigned int v22 = v36[0];
LABEL_25:
    sub_216F2C32C((uint64_t)this, (void *)&v37 + 3 * v22);
    unsigned __int8 v23 = --v36[2];
    v36[0] = (v36[0] - 1) & 7;
    goto LABEL_30;
  }
  sub_216F2C32C((uint64_t)this, (void *)this + 2);
LABEL_34:
  if (*((unsigned char *)this + 56) == 1)
  {
    uint64_t v33 = *((void *)this - 4);
    uint64_t v34 = *((void *)this + 1);
    __dmb(0xBu);
    *(void *)(v33 + 16) = v34;
  }
  return 0;
}

void *sub_216F2C290(void *result)
{
  *uint64_t result = &unk_26C76CE28;
  return result;
}

uint64_t sub_216F2C2B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9))
  {
    uint64_t v1 = *(void *)(a1 + 16);
    v2.f64[0] = *(float64_t *)(a1 + 64);
    v2.f64[1] = *(float64_t *)(v1 + 48);
    v3.f64[0] = *(float64_t *)(v1 + 40);
    v3.f64[1] = *(float64_t *)(a1 + 72);
    int8x16_t v4 = vbslq_s8((int8x16_t)vcgtq_f64(v3, v2), *(int8x16_t *)(a1 + 64), *(int8x16_t *)(v1 + 40));
    int8x16_t v5 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(a1 + 80), *(float64x2_t *)(v1 + 56)), *(int8x16_t *)(a1 + 80), *(int8x16_t *)(v1 + 56));
    *(int8x16_t *)(v1 + 24) = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v1 + 24), *(float64x2_t *)(a1 + 48)), *(int8x16_t *)(a1 + 48), *(int8x16_t *)(v1 + 24));
    *(int8x16_t *)(v1 + 40) = v4;
    *(int8x16_t *)(v1 + 56) = v5;
  }
  if (*(unsigned char *)(a1 + 10) == 1)
  {
    uint64_t v6 = *(void *)(a1 - 32);
    uint64_t v7 = *(void *)(a1 + 16);
    __dmb(0xBu);
    *(void *)(v6 + 16) = v7;
  }
  return 0;
}

void sub_216F2C32C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = a2[1];
  double v5 = *(double *)(v2 + 24);
  double v4 = *(double *)(v2 + 32);
  double v7 = *(double *)(v2 + 40);
  double v6 = *(double *)(v2 + 48);
  double v9 = *(double *)(v2 + 56);
  double v8 = *(double *)(v2 + 64);
  uint64_t v10 = *a2 - v3;
  if (*a2 != v3)
  {
    float64x2_t v11 = **(float64x2_t ****)(v2 + 8);
    uint64_t v12 = 12 * v3;
    do
    {
      double v13 = sub_216F2C3F8(v11[1], (float *)(*(void *)&(*v11)[2].f64[0] + v12)).f32[0];
      double v15 = v14;
      double v17 = v16;
      if (v5 > v13) {
        double v5 = v13;
      }
      if (v4 > v15) {
        double v4 = v15;
      }
      if (v7 > v17) {
        double v7 = v17;
      }
      if (v6 < v13) {
        double v6 = v13;
      }
      if (v9 < v15) {
        double v9 = v15;
      }
      if (v8 < v17) {
        double v8 = v17;
      }
      v12 += 12;
      --v10;
    }
    while (v10);
  }
  *(double *)(v2 + 24) = v5;
  *(double *)(v2 + 32) = v4;
  *(double *)(v2 + 40) = v7;
  *(double *)(v2 + 48) = v6;
  *(double *)(v2 + 56) = v9;
  *(double *)(v2 + 64) = v8;
}

float32x2_t sub_216F2C3F8(float64x2_t *a1, float *a2)
{
  double v2 = *a2;
  double v3 = a2[1];
  double v4 = a2[2];
  double v5 = a1[7].f64[1] + a1[1].f64[1] * v2 + a1[3].f64[1] * v3 + a1[5].f64[1] * v4;
  if (v5 == 0.0) {
    double v6 = 1.0;
  }
  else {
    double v6 = 1.0 / v5;
  }
  return vcvt_f32_f64(vmulq_n_f64(vaddq_f64(a1[6], vaddq_f64(vaddq_f64(vmulq_n_f64(*a1, v2), vmulq_n_f64(a1[2], v3)), vmulq_n_f64(a1[4], v4))), v6));
}

void sub_216F2C49C(void ***a1)
{
  double v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_216F2C4F0((uint64_t)v2, *v2);
    double v3 = **a1;
    operator delete(v3);
  }
}

void sub_216F2C4F0(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; sub_2168F83DC(i))
    i -= 40;
  *(void *)(a1 + 8) = a2;
}

void sub_216F2C540()
{
}

void sub_216F2C558(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)sub_2168720A4(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    double v15 = v12;
    float v16 = &v12[40 * v8];
    uint64_t v18 = &v12[40 * v11];
    size_t v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    double v17 = &v16[v14];
    sub_216F2C6C0(a1, &v15);
    sub_216F2C8F8((uint64_t)&v15);
  }
}

void sub_216F2C6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F2C8F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F2C6C0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216F2C738((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216F2C738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      uint64_t v9 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v9;
      if (v9)
      {
        unint64_t v10 = (atomic_ullong *)(v9 - 16);
        if (*(void *)(v7 - 16)) {
          unint64_t v10 = *(atomic_ullong **)(v7 - 16);
        }
        atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
        uint64_t v7 = *((void *)&v16 + 1);
      }
      a3 -= 40;
      v7 -= 40;
      *((void *)&v16 + 1) = v7;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216F2C7F4((uint64_t)v13);
  return v11;
}

uint64_t sub_216F2C7F4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216F2C82C((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_216F2C82C(uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return sub_216F2C8A4(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_216F2C8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(void *)(a2 + 32); result != *(void *)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    sub_2168F83DC(result);
    uint64_t result = *(void *)(a2 + 32) + 40;
  }
  return result;
}

uint64_t sub_216F2C8F8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216F2C930(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    *(void *)(a1 + 16) = v4 - 40;
    sub_2168F83DC(v4 - 40);
  }
}

void sub_216F2C974(uint64_t *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a4)
  {
    sub_216F2CAE0(a1);
    if (a4 > 0x666666666666666) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_2168724E8(a1, v11);
    uint64_t v12 = sub_216F2CB1C(v8, (uint64_t)a2, (uint64_t)a3, a1[1]);
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v13 = (long long *)((char *)a2 + 8 * ((a1[1] - v9) >> 3));
    sub_216F2CC38(a2, v13, v9);
    uint64_t v12 = sub_216F2CB1C(v8, (uint64_t)v13, (uint64_t)a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  sub_216F2CC38(a2, a3, v9);

  sub_216F2C4F0((uint64_t)a1, v14);
}

void sub_216F2CAD0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216F2CAD8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216F2CAE0(uint64_t *a1)
{
  if (*a1)
  {
    sub_216F2C4F0((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_216F2CB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  uint64_t v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  for (v9[2] = &v12; a2 != a3; a2 += 40)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
    *(_OWORD *)(v4 + 16) = v5;
    uint64_t v6 = *(void *)(a2 + 32);
    *(void *)(v4 + 32) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)(v6 - 16);
      if (*(void *)(v4 + 24)) {
        uint64_t v7 = *(atomic_ullong **)(v4 + 24);
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = v12;
    }
    v4 += 40;
    uint64_t v12 = v4;
  }
  char v10 = 1;
  sub_216F2CBBC((uint64_t)v9);
  return v4;
}

uint64_t sub_216F2CBBC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216F2CBF4(a1);
  }
  return a1;
}

void sub_216F2CBF4(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 40;
    sub_2168F83DC(v1);
  }
}

long long *sub_216F2CC38(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_216C48F14(a3, v4);
      uint64_t v4 = (long long *)((char *)v4 + 40);
      a3 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_216F2CCA0(tbb::internal::allocate_continuation_proxy *this, uint64_t a2, char *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v4 = *((void *)this - 4);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + 8) = 1;
        unsigned int v5 = *((unsigned __int8 *)this + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *((unsigned char *)this + 52) = v5 + 1;
      }
    }
  }
  uint64_t v6 = (long long *)((char *)this + 8);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = *((void *)this + 1) - *((void *)this + 2);
  if (v7 < v8)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        char v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)char v10 = &unk_26C751420;
        __dmb(0xBu);
        v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76CE70;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v7 = *((void *)this + 3);
        unint64_t v8 = *((void *)this + 1) - *((void *)this + 2);
        if (v7 >= v8) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)uint64_t v28 = 0x10000;
    long long v29 = *v6;
    uint64_t v30 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v28, *((unsigned __int8 *)this + 52));
      char v16 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v16 & 1) == 0) {
        break;
      }
      unsigned __int8 v19 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v19;
      unsigned __int8 v18 = v28[2];
      if (v28[2] < 2u)
      {
        unsigned int v17 = v28[0];
        if (v28[v28[0] + 3] < v19
          && *((void *)&v29 + 3 * v28[0] + 2) < *((void *)&v29 + 3 * v28[0]) - *((void *)&v29 + 3 * v28[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v20 = v28[1];
      unsigned __int8 v21 = v28[v28[1] + 3];
      unsigned int v22 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v22 - 11) = 1;
      *(void *)unsigned int v22 = &unk_26C751420;
      __dmb(0xBu);
      v22[8] = 0;
      *((void *)this - 4) = v22;
      *((void *)v22 - 3) = 2;
      uint64_t v23 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v22, 0x38uLL);
      unsigned __int8 v24 = (char *)&v29 + 24 * v20;
      *(unsigned char *)(v23 - 11) = 1;
      *(void *)uint64_t v23 = &unk_26C76CE70;
      long long v25 = *(_OWORD *)v24;
      *(void *)(v23 + 24) = *((void *)v24 + 2);
      *(_OWORD *)(v23 + 8) = v25;
      *(void *)(v23 + 32) = *((void *)this + 4);
      uint64_t v26 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v26;
      *(void *)(v23 + 40) = v26;
      *(_DWORD *)(v23 + 48) = 2;
      *(unsigned char *)(v23 + 52) = *((unsigned char *)this + 52) - v21;
      (***(void (****)(void))(v23 - 40))();
      unsigned __int8 v18 = --v28[2];
      v28[1] = (v28[1] + 1) & 7;
LABEL_27:
      if (!v18 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v17 = v28[0];
LABEL_22:
    sub_216F2D0D4((uint64_t)this, (void *)&v29 + 3 * v17, v15);
    unsigned __int8 v18 = --v28[2];
    v28[0] = (v28[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_216F2D0D4((uint64_t)this, (void *)this + 1, a3);
  return 0;
}

void sub_216F2D0D4(uint64_t a1, void *a2, char *a3)
{
  unint64_t v3 = a2[1];
  unint64_t v4 = *a2 - v3;
  if (*a2 > v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = 12 * v3;
    do
    {
      unint64_t v7 = *(void **)(v5 + 16);
      unint64_t v8 = (float32x2_t *)(*(void *)(*(void *)(v5 + 8) + 32) + v6);
      float32x2_t v9 = *v8;
      float v10 = v8[1].f32[0];
      if (*v7)
      {
        uint64_t v11 = (float32x2_t *)(v7[4] + v6);
        float32x2_t v12 = *v11;
        float v13 = v11[1].f32[0];
        unint64_t v14 = *(void **)(v5 + 24);
        double v15 = **(double **)v5;
        if (*v14)
        {
          char v16 = (float32x2_t *)(v14[4] + v6);
          float v17 = v15 * v16[1].f32[0];
          float32x2_t v12 = vadd_f32(v12, vmul_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v16), v15)), (float32x2_t)0x3F0000003F000000));
          float v13 = v13 + (float)(v17 * 0.5);
        }
        float v18 = v15 * v13;
        float32x2_t v9 = vadd_f32(v9, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v12), v15)));
        float v10 = v10 + v18;
      }
      unsigned __int8 v19 = **(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase ***)(v5 + 32);
      sub_2168FD54C(v19, (uint64_t)a2, a3);
      unsigned int v20 = (float32x2_t *)(*((void *)v19 + 4) + v6);
      *unsigned int v20 = v9;
      v20[1].f32[0] = v10;
      v6 += 12;
      --v4;
    }
    while (v4);
  }
}

void sub_216F2D1EC()
{
  sub_216F35220();
  sub_216779094(__p, "PointInstancer");
  sub_216F3534C((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F2D23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::~UsdGeomPointInstancer(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CEB8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    float32x2_t v9 = "usdGeom/pointInstancer.cpp";
    float v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdGeomPointInstancer pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::Get(co"
                            "nst UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    float v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CEB8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F2D408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92ED0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92ED0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B92EC8, "PointInstancer");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B92EC8, &dword_216758000);
    __cxa_guard_release(&qword_267B92ED0);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B92EC8, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CEB8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    float32x2_t v9 = "usdGeom/pointInstancer.cpp";
    float v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdGeomPointInstancer pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::Define"
                            "(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    float v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76CEB8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F2D614(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92EE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92EE0))
  {
    __cxa_guard_release(&qword_267B92EE0);
  }
  return &qword_267B92ED8;
}

void sub_216F2D6BC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92EF0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)__cxa_guard_acquire(&qword_267B92EF0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_GetStaticTfType(v2);
      byte_267B92EE8 = sub_216D16508((char *)&qword_267B92ED8, v3, v4);
      __cxa_guard_release(&qword_267B92EF0);
    }
  }
  return byte_267B92EE8;
}

void sub_216F2D73C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this)
{
  return &qword_267B92ED8;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetProtoIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 872), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2D814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::CreateProtoIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float32x2_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float32x2_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 872), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 464), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetIdsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 448), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2D97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::CreateIdsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float32x2_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float32x2_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 448), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 488), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetPositionsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 832), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2DAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::CreatePositionsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float32x2_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float32x2_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 832), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 664), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetOrientationsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 736), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2DC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::CreateOrientationsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float32x2_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float32x2_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 736), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 776), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetOrientationsfAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 744), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2DDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::CreateOrientationsfAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float32x2_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float32x2_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 744), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 784), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetScalesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 984), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2DF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::CreateScalesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float32x2_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float32x2_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 984), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 616), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetVelocitiesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1216), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2E084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::CreateVelocitiesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float32x2_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float32x2_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1216), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 688), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetAccelerationsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, v3, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2E1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::CreateAccelerationsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float32x2_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float32x2_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 688), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetAngularVelocitiesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 16), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2E354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::CreateAngularVelocitiesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float32x2_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float32x2_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 16), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 688), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetInvisibleIdsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 504), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2E4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::CreateInvisibleIdsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  float32x2_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float32x2_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 504), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 488), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetPrototypesRel(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 880), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2E624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::CreatePrototypesRel(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 880), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F2E6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this)
{
  int v1 = (int)this;
  uint64_t v36 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92F10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92F10))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v4 = *((void *)v3 + 109);
    uint64_t v26 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5) {
      uint64_t v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v6 = *((void *)v5 + 56);
    uint64_t v27 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v7) {
      int v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v8 = *((void *)v7 + 104);
    uint64_t v28 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    float32x2_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v9) {
      float32x2_t v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v10 = *((void *)v9 + 92);
    uint64_t v29 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v11) {
      uint64_t v11 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v12 = *((void *)v11 + 93);
    uint64_t v30 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v13) {
      char v13 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v14 = *((void *)v13 + 123);
    uint64_t v31 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    double v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v15) {
      double v15 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v16 = *((void *)v15 + 152);
    uint64_t v32 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    float v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v17) {
      float v17 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v18 = *(void *)v17;
    uint64_t v33 = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    unsigned __int8 v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v19) {
      unsigned __int8 v19 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v20 = *((void *)v19 + 2);
    uint64_t v34 = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    unsigned __int8 v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v21) {
      unsigned __int8 v21 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v22 = *((void *)v21 + 63);
    uint64_t v35 = v22;
    if ((v22 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B92EF8, &v26, 0xAuLL);
    for (uint64_t i = 72; i != -8; i -= 8)
    {
      uint64_t v24 = *(uint64_t *)((char *)&v26 + i);
      if ((v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B92EF8, &dword_216758000);
    __cxa_guard_release(&qword_267B92F10);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92F30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92F30))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)1);
    sub_216F2EBDC((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B92F18, &dword_216758000);
    __cxa_guard_release(&qword_267B92F30);
  }
  if (v1) {
    return &qword_267B92F18;
  }
  else {
    return &qword_267B92EF8;
  }
}

void sub_216F2EB58(_Unwind_Exception *a1)
{
}

void *sub_216F2EBDC(uint64_t **a1)
{
  qword_267B92F20 = 0;
  unk_267B92F28 = 0;
  qword_267B92F18 = 0;
  sub_216973388((char **)&qword_267B92F18, ((unk_267B92F00 - qword_267B92EF8) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B92F18, (void *)qword_267B92F20, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B92F18, (void *)qword_267B92F20, (uint64_t *)qword_267B92EF8, unk_267B92F00, (unk_267B92F00 - qword_267B92EF8) >> 3);
}

void sub_216F2EC74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216F2EC94()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDGEOM_POINTINSTANCER_NEW_APPLYOPS)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void sub_216F2ECDC()
{
  sub_216779094(v3, "UsdGeomPointInstancer::IncludeProtoXform");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76CF00, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "UsdGeomPointInstancer::ExcludeProtoXform");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76CF00, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "UsdGeomPointInstancer::ApplyMask");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76CF10, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "UsdGeomPointInstancer::IgnoreMask");
  __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76CF10, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216F2EE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::UsesOrientationsf(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this, pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetOrientationsfAttr(this, (uint64_t)&v6);
  *(_DWORD *)a2 = v6;
  uint64_t v3 = *((void *)&v6 + 1);
  *((void *)&v6 + 1) = 0;
  char v4 = (atomic_ullong *)*((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  if (v4) {
    sub_216D16E0C(v4);
  }
  sub_21697DE94((int *)a2 + 4, (int *)&v7);
  sub_21697DEEC((int *)a2 + 5, (int *)&v7 + 1);
  if (&v6 == (long long *)a2)
  {
    if ((BYTE8(v7) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v7 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v5 = *((void *)a2 + 3);
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *((void *)a2 + 3) = *((void *)&v7 + 1);
    *((void *)&v7 + 1) = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
  sub_21697C414(&v7);
  if (*((void *)&v6 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v6 + 1));
  }
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>();
}

void sub_216F2F064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancerApplyNewStyleListOps(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDGEOM_POINTINSTANCER_NEW_APPLYOPS);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  return *v1;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancerSetOrMergeOverOp()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp();
}

void sub_216F2FA4C(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  if (__p)
  {
    a49 = (uint64_t)__p;
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a4);
  sub_216D483F4(v49 - 200);
  uint64_t v51 = a6;
  if (a6)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
    }
  }
  sub_2169DD2C4(&a7);
  sub_2169DD2C4(&a26);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ActivateId(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this, uint64_t a2)
{
  uint64_t v6 = a2;
  sub_216F35990(&__p, 1uLL, &v6);
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens)) {
    sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancerSetOrMergeOverOp();
}

void sub_216F2FD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ActivateIds(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = (const void *)a2[4];
  unint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)v3 + 8 * *a2;
  memset(__p, 0, sizeof(__p));
  sub_2169DE1DC(__p, v3, v5, v4);
  sub_216D16CFC((uint64_t)v7, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens)) {
    sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancerSetOrMergeOverOp();
}

void sub_216F2FE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ActivateAllIds(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this)
{
}

void sub_216F2FFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::DeactivateId(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this, uint64_t a2)
{
  uint64_t v7 = a2;
  sub_216F35990(&__p, 1uLL, &v7);
  if (atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDGEOM_POINTINSTANCER_NEW_APPLYOPS))
  {
    sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens)) {
      sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancerSetOrMergeOverOp();
  }
  pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
}

void sub_216F30148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::DeactivateIds(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = (const void *)a2[4];
  unint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)v3 + 8 * *a2;
  memset(__p, 0, sizeof(__p));
  sub_2169DE1DC(__p, v3, v5, v4);
  if (atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDGEOM_POINTINSTANCER_NEW_APPLYOPS))
  {
    sub_216D16CFC((uint64_t)v8, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens)) {
      sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancerSetOrMergeOverOp();
  }
  pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
}

void sub_216F30290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::VisId(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this, uint64_t a2, const pxrInternal__aapl__pxrReserved__::UsdTimeCode *a3)
{
  v5[1] = *MEMORY[0x263EF8340];
  v5[0] = a2;
  sub_216F30644((uint64_t)v4, (uint64_t)v5, 1);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::VisIds(this);
}

void sub_216F30350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::VisIds(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v4 = 0;
  long long v2 = 0u;
  long long v3 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetInvisibleIdsAttr(a1, (uint64_t)&v1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<long long>>();
}

void sub_216F305BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2167FB780((uint64_t)va, v5);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216F30644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_216F35A14((unint64_t *)a1, a2, a2 + 8 * a3);
  return a1;
}

void sub_216F3067C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

void sub_216F30694(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    uint64_t v7 = sub_2169ADF98((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    uint64_t v6 = sub_2169ADF98((uint64_t)a1, a2);
    uint64_t v7 = v6;
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        v6[i] = *(void *)(v3 + i * 8);
    }
LABEL_12:
    sub_2168F83DC((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::VisAllIds(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this, const pxrInternal__aapl__pxrReserved__::UsdTimeCode *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  sub_2169AD8FC((uint64_t)v10, 0);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetInvisibleIdsAttr(this, (uint64_t)&v5);
  BOOL HasAuthoredValue = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v5);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  if (HasAuthoredValue)
  {
    v11.__type_name = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::CreateInvisibleIdsAttr(this, &v11, 0, (uint64_t)&v5);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<long long>>();
  }
  sub_2168F83DC((uint64_t)v10);
  return 1;
}

void sub_216F30870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::InvisId(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this, uint64_t a2, const pxrInternal__aapl__pxrReserved__::UsdTimeCode *a3)
{
  v5[1] = *MEMORY[0x263EF8340];
  v5[0] = a2;
  sub_216F30644((uint64_t)v4, (uint64_t)v5, 1);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::InvisIds(this);
}

void sub_216F30968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::InvisIds(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v4 = 0;
  long long v2 = 0u;
  long long v3 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetInvisibleIdsAttr(a1, (uint64_t)&v1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<long long>>();
}

void sub_216F30BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ComputeMaskAtTime(void *a1@<X8>)
{
  uint64_t v6 = 0;
  long long v4 = 0u;
  long long v5 = 0u;
  uint64_t v3 = 0;
  long long v1 = 0u;
  long long v2 = 0u;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp();
}

void sub_216F31094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_216D16AD8((uint64_t)&a13);
  sub_2169DD2C4(&a24);
  if (*v24) {
    operator delete(*v24);
  }
  sub_2168F83DC(v25 - 176);
  sub_2168F83DC(v25 - 128);
  _Unwind_Resume(a1);
}

void sub_216F311AC(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      sub_21677CB10();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_2168059F0((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  int v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_GetProtoIndicesForInstanceTransforms(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *this, double a2)
{
  double v12 = 0.0;
  double v13 = 0.0;
  BOOL v11 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetProtoIndicesAttr(this, (uint64_t)v6);
  BOOL BracketingTimeSamples = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetBracketingTimeSamples((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v6, a2, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v13, &v12, &v11);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  if (BracketingTimeSamples)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetProtoIndicesAttr(this, (uint64_t)v6);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
  }
  return 0;
}

void sub_216F313E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D2EDA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_GetPrototypePathsForInstanceTransforms(uint64_t a1, uint64_t *a2, char **a3)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetPrototypesRel((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v25);
  if (!pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)&v25, (uint64_t *)&v30))
  {
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    sub_21697C414(&v27);
    if (v26) {
      sub_216D16E0C(v26);
    }
    goto LABEL_19;
  }
  unint64_t v6 = v30;
  unint64_t v7 = v31;
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
  sub_21697C414(&v27);
  if (v26) {
    sub_216D16E0C(v26);
  }
  if (v6 == v7)
  {
LABEL_19:
    uint64_t v25 = (char **)"usdGeom/pointInstancer.cpp";
    uint64_t v26 = (atomic_ullong *)"_GetPrototypePathsForInstanceTransforms";
    uint64_t v27 = 690;
    unint64_t v28 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_GetPrototypePathsForInstanceT"
                            "ransforms(const VtIntArray &, SdfPathVector *) const";
    char v29 = 0;
    sub_216D16CFC((uint64_t)v18, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    sub_216D0162C((uint64_t)v18, &v23);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v25, (pxrInternal__aapl__pxrReserved__ *)"%s -- no prototypes", v14, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_21697C414(&v23);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_21;
  }
  uint64_t v8 = *a2;
  if (!*a2)
  {
LABEL_12:
    if (&v30 != a3) {
      sub_216A98D9C((uint64_t)a3, v30, v31, (v31 - v30) >> 3);
    }
    uint64_t v12 = 1;
    goto LABEL_24;
  }
  int v9 = (unsigned int *)a2[4];
  uint64_t v10 = 4 * v8;
  while (1)
  {
    unint64_t v11 = *v9;
    if ((v11 & 0x80000000) != 0 || (v31 - v30) >> 3 <= v11) {
      break;
    }
    ++v9;
    v10 -= 4;
    if (!v10) {
      goto LABEL_12;
    }
  }
  uint64_t v25 = (char **)"usdGeom/pointInstancer.cpp";
  uint64_t v26 = (atomic_ullong *)"_GetPrototypePathsForInstanceTransforms";
  uint64_t v27 = 700;
  unint64_t v28 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_GetPrototypePathsForInstanceTra"
                          "nsforms(const VtIntArray &, SdfPathVector *) const";
  char v29 = 0;
  sub_216D16CFC((uint64_t)v18, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  sub_216D0162C((uint64_t)v18, &v23);
  uint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v25, (pxrInternal__aapl__pxrReserved__ *)"%s -- invalid prototype index: %d. Should be in [0, %zu)", v17, v16, *v9, (v31 - v30) >> 3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_21697C414(&v23);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_21:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_21697C414(&v20);
  if (v19) {
    sub_216D16E0C(v19);
  }
  uint64_t v12 = 0;
LABEL_24:
  uint64_t v25 = &v30;
  sub_216981168((void ***)&v25);
  return v12;
}

void sub_216F316C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  sub_216D16AD8((uint64_t)&a12);
  a17 = (void **)(v17 - 72);
  sub_216981168(&a17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputePointInstancerAttributesPreamble(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *a1, int a2, int a3, uint64_t *a4, char **a5, double a6)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_GetProtoIndicesForInstanceTransforms(a1, a6);
  if (result)
  {
    if (a2
      || (uint64_t result = pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_GetPrototypePathsForInstanceTransforms((uint64_t)a1, a4, a5), result))
    {
      if (!a3) {
        pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ComputeMaskAtTime(&v12);
      }
      return 1;
    }
  }
  return result;
}

void sub_216F318D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ComputeInstanceTransformsAtTime(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *a1, double a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v4 = (double *)operator new(8uLL);
  __p = v4;
  *unint64_t v4 = a2;
  unint64_t v6 = v4 + 1;
  unint64_t v7 = v4 + 1;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ComputeInstanceTransformsAtTimes(a1);
}

void sub_216F319C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, char a12)
{
  __p = &a12;
  sub_216F35FFC((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ComputeInstanceTransformsAtTimes(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *a1)
{
  int v2 = 3;
  uint64_t v3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v5);
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::UsesOrientationsf(a1, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v2);
}

void sub_216F31C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

BOOL sub_216F31CA4(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int a5, uint64_t a6, double a7)
{
  uint64_t v8 = a3[1];
  uint64_t v23 = *a3;
  uint64_t v22 = v8 - *a3;
  uint64_t v27 = v8;
  if (v8 != *a3)
  {
    uint64_t v9 = *a3;
    do
      v9 += 8;
    while (v9 != v8);
  }
  uint64_t v62 = 0;
  memset(v61, 0, sizeof(v61));
  uint64_t v60 = 0;
  memset(v59, 0, sizeof(v59));
  uint64_t v58 = 0;
  memset(v57, 0, sizeof(v57));
  double v56 = 0.0;
  uint64_t v55 = 0;
  memset(v54, 0, sizeof(v54));
  uint64_t v53 = 0;
  memset(v52, 0, sizeof(v52));
  uint64_t v51 = 0;
  memset(v50, 0, sizeof(v50));
  uint64_t v49 = 0;
  memset(v48, 0, sizeof(v48));
  double v47 = 0.0;
  memset(v46, 0, sizeof(v46));
  memset(__p, 0, sizeof(__p));
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputePointInstancerAttributesPreamble((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, a4, a5, (uint64_t *)v61, v46, a7) & 1) == 0)goto LABEL_57; {
  uint64_t v10 = *(void *)&v61[0];
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetPositionsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v36);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetVelocitiesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v32);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetAccelerationsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v28);
  sub_216D16CFC((uint64_t)&v41, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  char PositionsVelocitiesAndAccelerations = pxrInternal__aapl__pxrReserved__::UsdGeom_GetPositionsVelocitiesAndAccelerations((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v36, a7, (uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v28, v10, (uint64_t *)v59, v57, &v56, v54, (uint64_t)&v41);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
  sub_21697C414(&v43);
  if (v42) {
    sub_216D16E0C(v42);
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_21697C414(&v29);
  if (*((void *)&v28 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v28 + 1));
  }
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
  sub_21697C414(&v33);
  if (*((void *)&v32 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v32 + 1));
  }
  if ((BYTE8(v37) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v37 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
  sub_21697C414(&v37);
  if (*((void *)&v36 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v36 + 1));
  }
  if (PositionsVelocitiesAndAccelerations)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetScalesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v36);
    sub_216D16CFC((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdGeom_GetScales((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v36, v10, v52, (uint64_t)&v32, a7);
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
    sub_21697C414(&v33);
    if (*((void *)&v32 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v32 + 1));
    }
    if ((BYTE8(v37) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v37 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
    sub_21697C414(&v37);
    if (*((void *)&v36 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v36 + 1));
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetAngularVelocitiesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v36);
    sub_216D16CFC((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdGeom_GetOrientationsAndAngularVelocities(a6, &v36, v10, v50, v48, &v47, &v32, a7);
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
    sub_21697C414(&v33);
    if (*((void *)&v32 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v32 + 1));
    }
    if ((BYTE8(v37) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v37 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
    unint64_t v12 = v22 >> 3;
    sub_21697C414(&v37);
    if (*((void *)&v36 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v36 + 1));
    }
    if (v10)
    {
      sub_216D16CFC((uint64_t)&v36, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36, v13, &v39);
      if ((BYTE8(v37) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v37 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
      sub_21697C414(&v37);
      if (*((void *)&v36 + 1)) {
        sub_216D16E0C(*((atomic_ullong **)&v36 + 1));
      }
      uint64_t v41 = 0;
      int v42 = 0;
      uint64_t v43 = 0;
      sub_216F360A0((uint64_t *)&v41, v12);
      BOOL v14 = (*(void *)&v57[0] | *(void *)&v48[0]) == 0;
      if (v23 == v27)
      {
LABEL_51:
        if (&v41 != (long long **)a2) {
          sub_216F364F8(a2, v41, (long long *)v42, 0xCCCCCCCCCCCCCCCDLL * (((char *)v42 - (char *)v41) >> 3));
        }
        BOOL v16 = 1;
      }
      else
      {
        uint64_t v15 = 0;
        BOOL v16 = 0;
        uint64_t v17 = 0;
        if (v12 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v22 >> 3;
        }
        while (1)
        {
          if (v14)
          {
            uint64_t v38 = 0;
            long long v36 = 0u;
            long long v37 = 0u;
            pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetPositionsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v32);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
          }
          if ((sub_216F33274((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)((char *)v41 + v15), &v39, (pxrInternal__aapl__pxrReserved__ **)v61, (uint64_t)v59, (uint64_t)v57, (uint64_t)v54, (uint64_t)v52, (uint64_t)v50, *(double *)(*a3 + 8 * v17), v56, v47, (uint64_t)v48, (uint64_t *)v46, __p) & 1) == 0)break; {
          BOOL v16 = ++v17 >= v12;
          }
          v15 += 40;
          if (v18 == v17) {
            goto LABEL_51;
          }
        }
      }
      *(void *)&long long v36 = &v41;
      sub_216F35FFC((void ***)&v36);
      uint64_t v19 = v40;
      if (v40 && atomic_fetch_add_explicit((atomic_uint *volatile)(v40 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
    }
    else
    {
      sub_216F36050((uint64_t)a2, *a2);
      sub_216F360A0(a2, v12);
      BOOL v16 = 1;
    }
  }
  else
  {
LABEL_57:
    BOOL v16 = 0;
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  *(void *)&long long v36 = v46;
  sub_216981168((void ***)&v36);
  sub_2168F83DC((uint64_t)v48);
  sub_2168F83DC((uint64_t)v50);
  sub_2168F83DC((uint64_t)v52);
  sub_2168F83DC((uint64_t)v54);
  sub_2168F83DC((uint64_t)v57);
  sub_2168F83DC((uint64_t)v59);
  sub_2168F83DC((uint64_t)v61);
  return v16;
}

void sub_216F3253C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  a33 = (uint64_t)&a40;
  sub_216F35FFC((void ***)&a33);
  uint64_t v71 = a39;
  if (a39 && atomic_fetch_add_explicit((atomic_uint *volatile)(a39 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
  }
  if (__p) {
    operator delete(__p);
  }
  a33 = (uint64_t)&a47;
  sub_216981168((void ***)&a33);
  sub_2168F83DC((uint64_t)&a51);
  sub_2168F83DC((uint64_t)&a57);
  sub_2168F83DC((uint64_t)&a63);
  sub_2168F83DC((uint64_t)&a69);
  sub_2168F83DC(v69 - 240);
  sub_2168F83DC(v69 - 192);
  sub_2168F83DC(v69 - 144);
  _Unwind_Resume(a1);
}

BOOL sub_216F32780(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int a5, uint64_t a6, double a7)
{
  uint64_t v8 = a3[1];
  uint64_t v23 = *a3;
  uint64_t v22 = v8 - *a3;
  uint64_t v27 = v8;
  if (v8 != *a3)
  {
    uint64_t v9 = *a3;
    do
      v9 += 8;
    while (v9 != v8);
  }
  uint64_t v62 = 0;
  memset(v61, 0, sizeof(v61));
  uint64_t v60 = 0;
  memset(v59, 0, sizeof(v59));
  uint64_t v58 = 0;
  memset(v57, 0, sizeof(v57));
  double v56 = 0.0;
  uint64_t v55 = 0;
  memset(v54, 0, sizeof(v54));
  uint64_t v53 = 0;
  memset(v52, 0, sizeof(v52));
  uint64_t v51 = 0;
  memset(v50, 0, sizeof(v50));
  uint64_t v49 = 0;
  memset(v48, 0, sizeof(v48));
  double v47 = 0.0;
  memset(v46, 0, sizeof(v46));
  memset(__p, 0, sizeof(__p));
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputePointInstancerAttributesPreamble((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, a4, a5, (uint64_t *)v61, v46, a7) & 1) == 0)goto LABEL_57; {
  uint64_t v10 = *(void *)&v61[0];
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetPositionsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v36);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetVelocitiesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v32);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetAccelerationsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v28);
  sub_216D16CFC((uint64_t)&v41, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  char PositionsVelocitiesAndAccelerations = pxrInternal__aapl__pxrReserved__::UsdGeom_GetPositionsVelocitiesAndAccelerations((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v36, a7, (uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v28, v10, (uint64_t *)v59, v57, &v56, v54, (uint64_t)&v41);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
  sub_21697C414(&v43);
  if (v42) {
    sub_216D16E0C(v42);
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_21697C414(&v29);
  if (*((void *)&v28 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v28 + 1));
  }
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
  sub_21697C414(&v33);
  if (*((void *)&v32 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v32 + 1));
  }
  if ((BYTE8(v37) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v37 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
  sub_21697C414(&v37);
  if (*((void *)&v36 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v36 + 1));
  }
  if (PositionsVelocitiesAndAccelerations)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetScalesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v36);
    sub_216D16CFC((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdGeom_GetScales((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v36, v10, v52, (uint64_t)&v32, a7);
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
    sub_21697C414(&v33);
    if (*((void *)&v32 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v32 + 1));
    }
    if ((BYTE8(v37) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v37 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
    sub_21697C414(&v37);
    if (*((void *)&v36 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v36 + 1));
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetAngularVelocitiesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v36);
    sub_216D16CFC((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdGeom_GetOrientationsAndAngularVelocities(a6, &v36, v10, v50, v48, &v47, &v32, a7);
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
    sub_21697C414(&v33);
    if (*((void *)&v32 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v32 + 1));
    }
    if ((BYTE8(v37) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v37 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
    unint64_t v12 = v22 >> 3;
    sub_21697C414(&v37);
    if (*((void *)&v36 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v36 + 1));
    }
    if (v10)
    {
      sub_216D16CFC((uint64_t)&v36, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36, v13, &v39);
      if ((BYTE8(v37) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v37 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
      sub_21697C414(&v37);
      if (*((void *)&v36 + 1)) {
        sub_216D16E0C(*((atomic_ullong **)&v36 + 1));
      }
      uint64_t v41 = 0;
      int v42 = 0;
      uint64_t v43 = 0;
      sub_216F360A0((uint64_t *)&v41, v12);
      BOOL v14 = (*(void *)&v57[0] | *(void *)&v48[0]) == 0;
      if (v23 == v27)
      {
LABEL_51:
        if (&v41 != (long long **)a2) {
          sub_216F364F8(a2, v41, (long long *)v42, 0xCCCCCCCCCCCCCCCDLL * (((char *)v42 - (char *)v41) >> 3));
        }
        BOOL v16 = 1;
      }
      else
      {
        uint64_t v15 = 0;
        BOOL v16 = 0;
        uint64_t v17 = 0;
        if (v12 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v22 >> 3;
        }
        while (1)
        {
          if (v14)
          {
            uint64_t v38 = 0;
            long long v36 = 0u;
            long long v37 = 0u;
            pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetPositionsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1, (uint64_t)&v32);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
          }
          if ((sub_216F33560((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)((char *)v41 + v15), &v39, (pxrInternal__aapl__pxrReserved__ **)v61, (uint64_t)v59, (uint64_t)v57, (uint64_t)v54, (uint64_t)v52, (uint64_t)v50, *(double *)(*a3 + 8 * v17), v56, v47, (uint64_t)v48, (uint64_t *)v46, __p) & 1) == 0)break; {
          BOOL v16 = ++v17 >= v12;
          }
          v15 += 40;
          if (v18 == v17) {
            goto LABEL_51;
          }
        }
      }
      *(void *)&long long v36 = &v41;
      sub_216F35FFC((void ***)&v36);
      uint64_t v19 = v40;
      if (v40 && atomic_fetch_add_explicit((atomic_uint *volatile)(v40 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
    }
    else
    {
      sub_216F36050((uint64_t)a2, *a2);
      sub_216F360A0(a2, v12);
      BOOL v16 = 1;
    }
  }
  else
  {
LABEL_57:
    BOOL v16 = 0;
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  *(void *)&long long v36 = v46;
  sub_216981168((void ***)&v36);
  sub_2168F83DC((uint64_t)v48);
  sub_2168F83DC((uint64_t)v50);
  sub_2168F83DC((uint64_t)v52);
  sub_2168F83DC((uint64_t)v54);
  sub_2168F83DC((uint64_t)v57);
  sub_2168F83DC((uint64_t)v59);
  sub_2168F83DC((uint64_t)v61);
  return v16;
}

void sub_216F33018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  a33 = (uint64_t)&a40;
  sub_216F35FFC((void ***)&a33);
  uint64_t v71 = a39;
  if (a39 && atomic_fetch_add_explicit((atomic_uint *volatile)(a39 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
  }
  if (__p) {
    operator delete(__p);
  }
  a33 = (uint64_t)&a47;
  sub_216981168((void ***)&a33);
  sub_2168F83DC((uint64_t)&a51);
  sub_2168F83DC((uint64_t)&a57);
  sub_2168F83DC((uint64_t)&a63);
  sub_2168F83DC((uint64_t)&a69);
  sub_2168F83DC(v69 - 240);
  sub_2168F83DC(v69 - 192);
  sub_2168F83DC(v69 - 144);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ComputeInstanceTransformsAtTime(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, uint64_t a12, uint64_t *a13, void *a14)
{
  return sub_216F33274(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

{
  return sub_216F33560(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_216F33274(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, uint64_t a12, uint64_t *a13, void *a14)
{
  *(void *)&long long v41 = a5;
  *((void *)&v41 + 1) = a6;
  v61 = a1;
  int v20 = *a3;
  int v21 = (pxrInternal__aapl__pxrReserved__::PcpCache **)sub_216D01530(a2);
  double TimeCodesPerSecond = pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v21);
  double v60 = pxrInternal__aapl__pxrReserved__::UsdGeom_CalculateTimeDelta(a9, a10, TimeCodesPerSecond);
  double v59 = pxrInternal__aapl__pxrReserved__::UsdGeom_CalculateTimeDelta(a9, a11, TimeCodesPerSecond);
  memset(v62, 0, 128);
  *(void *)&long long v43 = v62;
  sub_216902248((unint64_t *)a1, (unint64_t)v20, (long long **)&v43);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v62, 1.0);
  sub_216F369CC(__p, (a13[1] - *a13) >> 3, v62);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((uint64_t)v57, a9);
  uint64_t v23 = *a13;
  if (a13[1] != *a13)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    do
    {
      uint64_t v27 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a2);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + v25), (uint64_t)v52);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v52, v28))
      {
        BOOL v51 = 0;
        pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalTransformation((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)v57, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v52, &v51, &v43);
        int v29 = (char *)__p[0] + v24;
        long long v30 = v43;
        long long v31 = v44;
        long long v32 = v46;
        v29[2] = v45;
        v29[3] = v32;
        v29[1] = v31;
        long long v33 = v50;
        long long v34 = v48;
        long long v35 = v47;
        v29[6] = v49;
        v29[7] = v33;
        v29[4] = v35;
        v29[5] = v34;
        _OWORD *v29 = v30;
      }
      if ((v56 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
      sub_21697C414(&v54);
      if (v53) {
        sub_216D16E0C(v53);
      }
      ++v26;
      uint64_t v23 = *a13;
      v25 += 8;
      v24 += 128;
    }
    while (v26 < (a13[1] - *a13) >> 3);
  }
  *(void *)&long long v43 = a14;
  *((void *)&v43 + 1) = &v60;
  *(void *)&long long v44 = &v59;
  *((void *)&v44 + 1) = a7;
  *(void *)&long long v45 = a8;
  *((void *)&v45 + 1) = a4;
  long long v46 = v41;
  *(void *)&long long v47 = a12;
  *((void *)&v47 + 1) = __p;
  *(void *)&long long v48 = a3;
  *((void *)&v48 + 1) = a13;
  *(void *)&long long v49 = &v61;
  sub_216F36AE8(v20, (uint64_t)&v43, 1);
  uint64_t v36 = sub_216F3681C(a14, v61, (char *)1);
  sub_216EF9C4C((uint64_t)v57);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v36;
}

void sub_216F33500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F33560(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, uint64_t a12, uint64_t *a13, void *a14)
{
  *(void *)&long long v41 = a5;
  *((void *)&v41 + 1) = a6;
  v61 = a1;
  int v20 = *a3;
  int v21 = (pxrInternal__aapl__pxrReserved__::PcpCache **)sub_216D01530(a2);
  double TimeCodesPerSecond = pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v21);
  double v60 = pxrInternal__aapl__pxrReserved__::UsdGeom_CalculateTimeDelta(a9, a10, TimeCodesPerSecond);
  double v59 = pxrInternal__aapl__pxrReserved__::UsdGeom_CalculateTimeDelta(a9, a11, TimeCodesPerSecond);
  memset(v62, 0, 128);
  *(void *)&long long v43 = v62;
  sub_216902248((unint64_t *)a1, (unint64_t)v20, (long long **)&v43);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v62, 1.0);
  sub_216F369CC(__p, (a13[1] - *a13) >> 3, v62);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((uint64_t)v57, a9);
  uint64_t v23 = *a13;
  if (a13[1] != *a13)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    do
    {
      uint64_t v27 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a2);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + v25), (uint64_t)v52);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v52, v28))
      {
        BOOL v51 = 0;
        pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalTransformation((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)v57, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v52, &v51, &v43);
        int v29 = (char *)__p[0] + v24;
        long long v30 = v43;
        long long v31 = v44;
        long long v32 = v46;
        v29[2] = v45;
        v29[3] = v32;
        v29[1] = v31;
        long long v33 = v50;
        long long v34 = v48;
        long long v35 = v47;
        v29[6] = v49;
        v29[7] = v33;
        v29[4] = v35;
        v29[5] = v34;
        _OWORD *v29 = v30;
      }
      if ((v56 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
      sub_21697C414(&v54);
      if (v53) {
        sub_216D16E0C(v53);
      }
      ++v26;
      uint64_t v23 = *a13;
      v25 += 8;
      v24 += 128;
    }
    while (v26 < (a13[1] - *a13) >> 3);
  }
  *(void *)&long long v43 = a14;
  *((void *)&v43 + 1) = &v60;
  *(void *)&long long v44 = &v59;
  *((void *)&v44 + 1) = a7;
  *(void *)&long long v45 = a8;
  *((void *)&v45 + 1) = a4;
  long long v46 = v41;
  *(void *)&long long v47 = a12;
  *((void *)&v47 + 1) = __p;
  *(void *)&long long v48 = a3;
  *((void *)&v48 + 1) = a13;
  *(void *)&long long v49 = &v61;
  sub_216F375F8(v20, (uint64_t)&v43, 1);
  uint64_t v36 = sub_216F3681C(a14, v61, (char *)1);
  sub_216EF9C4C((uint64_t)v57);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v36;
}

void sub_216F337EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTimePreamble(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetProtoIndicesAttr(a1, (uint64_t)&v1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
}

void sub_216F33D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentFromTransforms(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, double a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  v110[6] = *MEMORY[0x263EF8340];
  uint64_t v94 = a9;
  sub_216D16CFC((uint64_t)v103, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v103, v12, &v92);
  uint64_t v72 = a2;
  if ((v107 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v106);
  sub_21697C414(&v105);
  if (v104) {
    sub_216D16E0C(v104);
  }
  uint64_t v14 = *a7;
  uint64_t v13 = a7[1];
  if (*a3 <= (v13 - *a7) >> 3)
  {
    BOOL v15 = sub_216EF5D20(1);
    uint64_t v14 = *a7;
    uint64_t v13 = a7[1];
    if (v15)
    {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Number of prototypes (%zu) is >= numberof instances (%zu). May be inefficient.", v16, v17, (v13 - v14) >> 3, *a3);
      uint64_t v14 = *a7;
      uint64_t v13 = a7[1];
    }
  }
  v89 = 0;
  v90 = 0;
  unint64_t v91 = 0;
  sub_216F34814((void **)&v89, (v13 - v14) >> 3);
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v18) {
    uint64_t v18 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v19 = *((void *)v18 + 29);
  *(void *)__src = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)__src &= 0xFFFFFFFFFFFFFFF8;
  }
  int v20 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v20) {
    int v20 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v21 = *((void *)v20 + 111);
  *(void *)&__src[8] = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)&__src[8] &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v22) {
    uint64_t v22 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v23 = *((void *)v22 + 119);
  *(void *)&__src[16] = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)&__src[16] &= 0xFFFFFFFFFFFFFFF8;
  }
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v96 = (int64x2_t *)&v86;
  LOBYTE(p_p_p_p) = 0;
  uint64_t v24 = (char *)operator new(0x18uLL);
  uint64_t v25 = 0;
  v86 = v24;
  v87 = v24;
  v88 = v24 + 24;
  do
  {
    uint64_t v26 = *(void *)&__src[v25];
    *(void *)&v24[v25] = v26;
    if ((v26 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v24[v25] &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 += 8;
  }
  while (v25 != 24);
  v87 = v24 + 24;
  pxrInternal__aapl__pxrReserved__::UsdGeomBBoxCache::UsdGeomBBoxCache(v103, &v86, 0, 0, a5);
  v96 = (int64x2_t *)&v86;
  sub_216889A04((void ***)&v96);
  for (uint64_t i = 16; i != -8; i -= 8)
  {
    uint64_t v28 = *(void *)&__src[i];
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v29 = *a7;
  if (a7[1] != *a7)
  {
    unint64_t v30 = 0;
    do
    {
      long long v31 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v92);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v29 + 8 * v30), (uint64_t)&v96);
      pxrInternal__aapl__pxrReserved__::UsdGeomBBoxCache::ComputeUntransformedBound((pxrInternal__aapl__pxrReserved__::UsdGeomBBoxCache *)v103, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v96, (pxrInternal__aapl__pxrReserved__::GfBBox3d *)__src);
      long long v32 = v90;
      if ((unint64_t)v90 >= v91)
      {
        long long v34 = v89;
        uint64_t v35 = 0x6F96F96F96F96F97 * ((v90 - v89) >> 3);
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) > 0xD20D20D20D20D2) {
          sub_21677CB10();
        }
        if (0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(v91 - (void)v89) >> 3) > v36) {
          unint64_t v36 = 0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(v91 - (void)v89) >> 3);
        }
        if ((unint64_t)(0x6F96F96F96F96F97 * ((uint64_t)(v91 - (void)v89) >> 3)) >= 0x69069069069069) {
          unint64_t v37 = 0xD20D20D20D20D2;
        }
        else {
          unint64_t v37 = v36;
        }
        if (v37)
        {
          uint64_t v38 = (char *)sub_216F38110((uint64_t)&v91, v37);
          uint64_t v40 = v39;
          long long v32 = v90;
          long long v34 = v89;
        }
        else
        {
          uint64_t v38 = 0;
          uint64_t v40 = 0;
        }
        long long v41 = &v38[312 * v35];
        memcpy(v41, __src, 0x138uLL);
        int v42 = v41;
        while (v32 != v34)
        {
          v32 -= 312;
          v42 -= 312;
          memcpy(v42, v32, 0x132uLL);
        }
        long long v33 = v41 + 312;
        v89 = v42;
        v90 = v33;
        unint64_t v91 = (unint64_t)&v38[312 * v40];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        memcpy(v90, __src, 0x138uLL);
        long long v33 = v32 + 312;
      }
      v90 = v33;
      if ((LOBYTE(v99.f64[0]) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v99.f64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v98 + 1);
      sub_21697C414(&v98);
      if (p_p_p_p) {
        sub_216D16E0C((atomic_ullong *)p_p_p_p);
      }
      ++v30;
      uint64_t v29 = *a7;
    }
    while (v30 < (a7[1] - *a7) >> 3);
  }
  long long v43 = (pxrInternal__aapl__pxrReserved__ *)sub_216F3815C(&__p, *a3);
  v83[0] = a4;
  v83[1] = a3;
  v83[2] = &v94;
  v83[3] = &v89;
  v83[4] = a8;
  v83[5] = &__p;
  unint64_t v44 = *a3;
  if (*a3)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v43))
    {
      *(_DWORD *)__src = 0;
      *(void *)&__src[128] = 65539;
      *(_DWORD *)&__src[168] = 55;
      tbb::task_group_context::init((uint64_t)__src, v45, v46, v47);
      v96 = (int64x2_t *)__src;
      uint64_t v48 = tbb::internal::allocate_root_with_context_proxy::allocate((tbb::task_group_context **)&v96, 0x38uLL);
      *(unsigned char *)(v48 - 11) = 1;
      *(void *)uint64_t v48 = &unk_26C76CFF8;
      *(void *)(v48 + 8) = v44;
      *(_OWORD *)(v48 + 16) = xmmword_217411D30;
      *(void *)(v48 + 32) = v83;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v48);
      *(_DWORD *)(v48 + 48) = 0;
      *(unsigned char *)(v48 + 52) = 5;
      *(void *)(v48 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v48 - 40) + 16))(*(void *)(v48 - 40), v48, v48 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)__src);
    }
    else
    {
      sub_216F38634((uint64_t)v83, 0, v44);
    }
  }
  int64x2_t v50 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  int64x2_t v80 = v50;
  long long v81 = xmmword_217412860;
  int64x2_t v51 = vdupq_n_s64(0xC7EFFFFFE0000000);
  int64x2_t v82 = v51;
  p_p = &__p;
  if (v85 == __p)
  {
    float64x2_t v75 = (float64x2_t)v51;
    float64x2_t v77 = (float64x2_t)v50;
    double v59 = -3.40282347e38;
    double v58 = 3.40282347e38;
  }
  else
  {
    uint64_t v55 = (v85 - (unsigned char *)__p) / 48;
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v43))
    {
      *(_DWORD *)__src = 0;
      *(void *)&__src[128] = 65539;
      *(_DWORD *)&__src[168] = 55;
      tbb::task_group_context::init((uint64_t)__src, v52, v53, v54);
      float64x2_t v99 = (float64x2_t)v80;
      p_p_p = &p_p;
      v96 = &v80;
      p_p_p_p = &p_p_p;
      v98 = &v78;
      v100[0] = v81;
      v100[1] = v82;
      v101 = (tbb::task_group_context *)__src;
      uint64_t v56 = tbb::internal::allocate_root_with_context_proxy::allocate(&v101, 0x40uLL);
      *(unsigned char *)(v56 - 11) = 1;
      *(void *)uint64_t v56 = &unk_26C76D040;
      *(void *)(v56 + 8) = &v96;
      *(void *)(v56 + 16) = v55;
      *(_OWORD *)(v56 + 24) = xmmword_2174A3F20;
      unint64_t v57 = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v56);
      *(_DWORD *)(v56 + 48) = 0;
      *(unsigned char *)(v56 + 52) = 5;
      *(void *)(v56 + 40) = (v57 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      *(unsigned char *)(v56 + 56) = 0;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v56 - 40) + 16))(*(void *)(v56 - 40), v56, v56 - 8);
      double v58 = *(double *)v100;
      float64x2_t v75 = *(float64x2_t *)((char *)v100 + 8);
      float64x2_t v77 = v99;
      double v59 = *((double *)&v100[1] + 1);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)__src);
    }
    else
    {
      uint64_t v60 = 0;
      *(int64x2_t *)__src = v80;
      *(_OWORD *)&__src[16] = v81;
      *(int64x2_t *)&__src[32] = v82;
      do
      {
        sub_2168931C0((uint64_t)__src, (uint64_t)*p_p + v60);
        v60 += 48;
        --v55;
      }
      while (v55);
      double v58 = *(double *)&__src[16];
      float64x2_t v75 = *(float64x2_t *)&__src[24];
      float64x2_t v77 = *(float64x2_t *)__src;
      double v59 = *(double *)&__src[40];
    }
  }
  sub_2168FD0E8((uint64_t)__src, 2uLL);
  if (__src != (unsigned char *)v72)
  {
    sub_2168F83DC(v72);
    long long v61 = *(_OWORD *)&__src[16];
    *(_OWORD *)uint64_t v72 = *(_OWORD *)__src;
    *(_OWORD *)(v72 + 16) = v61;
    memset(__src, 0, 32);
    *(void *)(v72 + 32) = *(void *)&__src[32];
    *(void *)&__src[32] = 0;
  }
  sub_2168F83DC((uint64_t)__src);
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v72, v62, v63);
  float32_t v64 = v58;
  v65 = *(float32x2_t **)(v72 + 32);
  float32x2_t *v65 = vcvt_f32_f64(v77);
  v65[1].f32[0] = v64;
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v72, v66, v67);
  float v68 = v59;
  uint64_t v69 = *(void *)(v72 + 32);
  *(float32x2_t *)(v69 + 12) = vcvt_f32_f64(v75);
  *(float *)(v69 + 20) = v68;
  if (__p)
  {
    v85 = __p;
    operator delete(__p);
  }
  sub_216EFF674((uint64_t)v110);
  sub_216EF9C4C((uint64_t)&v109);
  *(void *)__src = &v108;
  sub_216889A04((void ***)__src);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v103);
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  uint64_t v70 = v93;
  if (v93 && atomic_fetch_add_explicit((atomic_uint *volatile)(v93 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
  }
  return 1;
}

void sub_216F34654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,atomic_uint *a44)
{
  if (a40) {
    operator delete(a40);
  }
  if (a44)
  {
    if (atomic_fetch_add_explicit(a44 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a44 + 8))(a44);
    }
  }
  _Unwind_Resume(a1);
}

void sub_216F34814(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6F96F96F96F96F97 * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xD20D20D20D20D3) {
      sub_21677CB10();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_216F38110(v3, a2);
    unint64_t v7 = &v6[v5];
    uint64_t v9 = &v6[312 * v8];
    unint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v10 -= 312;
        v12 -= 312;
        memcpy(v12, v10, 0x132uLL);
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTime(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v23 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v13 = 4;
    uint64_t v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v16);
    uint64_t v17 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTimePreamble((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1);
  }
  *(void *)&long long v21 = "usdGeom/pointInstancer.cpp";
  *((void *)&v21 + 1) = "_ComputeExtentAtTime";
  *(void *)&long long v22 = 1272;
  *((void *)&v22 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTime(VtVec3fArra"
                          "y *, const UsdTimeCode, const UsdTimeCode, const GfMatrix4d *) const";
  LOBYTE(v23) = 0;
  sub_216D16CFC((uint64_t)&v6, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  sub_216D0162C((uint64_t)&v6, (int *)&v5);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v5);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"%s -- null container passed to ComputeExtentAtTime()", Text);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v5 + 1);
  sub_21697C414(&v5);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (*((void *)&v6 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v6 + 1));
  }
  return 0;
}

void sub_216F34C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_216D16AD8((uint64_t)&a11);
  sub_2168F83DC((uint64_t)&a21);
  a21 = (void **)&a27;
  sub_216981168(&a21);
  sub_216D33F64((uint64_t)&a30);
  long long v32 = *(void **)(v30 - 152);
  if (v32) {
    operator delete(v32);
  }
  sub_2168F83DC(v30 - 128);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTimes(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v22 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v11 = 4;
    uint64_t v13 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v15);
    uint64_t v16 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTimePreamble((pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *)a1);
  }
  *(void *)&long long v20 = "usdGeom/pointInstancer.cpp";
  *((void *)&v20 + 1) = "_ComputeExtentAtTimes";
  *(void *)&long long v21 = 1326;
  *((void *)&v21 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTimes(std::vecto"
                          "r<VtVec3fArray> *, const std::vector<UsdTimeCode> &, const UsdTimeCode, const GfMatrix4d *) const";
  LOBYTE(v22) = 0;
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  sub_216D0162C((uint64_t)&v5, &v11);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"%s -- null container passed to ComputeExtentAtTimes()", Text);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
  sub_21697C414(&v6);
  if (*((void *)&v5 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v5 + 1));
  }
  return 0;
}

void sub_216F35040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p)
{
  sub_216D16AD8((uint64_t)&a10);
  a15 = &a20;
  sub_216F35FFC((void ***)&a15);
  a15 = &a23;
  sub_216981168((void ***)&a15);
  sub_216D33F64((uint64_t)&a26);
  if (__p) {
    operator delete(__p);
  }
  sub_2168F83DC(v30 - 144);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ComputeExtentAtTime(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTime(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ComputeExtentAtTimes(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTimes(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetInstanceCount(pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::GetProtoIndicesAttr(a1, (uint64_t)v4);
  uint64_t v3 = 0;
  long long v1 = 0u;
  long long v2 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
}

void sub_216F351C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_216F351E0(uint64_t a1, const std::type_info *a2, char *a3)
{
  var8.__vftable = (std::type_info_vtbl *)sub_216F35404;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_216F35220()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1C36C((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F35300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F3534C(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F353E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F35404(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v9, a1);
  uint64_t v9 = &unk_26C76CEB8;
  if (v10
    && (*(unsigned char *)(v10 + 57) & 8) == 0
    && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v9) & 1) != 0
    || (v7[0] = "usdGeom/pointInstancer.cpp",
        v7[1] = "_ComputeExtentForPointInstancer",
        v7[2] = 1434,
        v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtentForPointInstancer(const UsdGeomBoundable &, const U"
                "sdTimeCode &, const GfMatrix4d *, VtVec3fArray *)",
        char v8 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "pointInstancerSchema", 0) & 1) != 0))
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::_ComputeExtentAtTime((uint64_t)&v9, a4);
  }
  else
  {
    uint64_t v5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)&v9);
  return v5;
}

void sub_216F35510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)va);
  _Unwind_Resume(a1);
}

void *sub_216F35528(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216F35588(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F355A4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_216F35644(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t sub_216F3566C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result = sub_21698F580(a2);
  if (result)
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==();
  }
  return result;
}

uint64_t sub_216F356DC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216F35760((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_216F35748(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216F35760(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)sub_216F357E8(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    size_t v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    void v7[4] = *a4;
    sub_21677B358(a1, v11, v8, v7);
  }
  return v7;
}

void *sub_216F357E8(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (uint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    uint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          uint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    long long v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v21 = v20;
          uint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          long long v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        long long v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      long long v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_216F35990(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_216F359F8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F35A14(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  sub_2168F845C(a1);
  v6[0] = (uint64_t **)&v8;
  v6[1] = (uint64_t **)&v7;
  sub_216F35A74(a1, (a3 - a2) >> 3, v6);
}

void sub_216F35A74(unint64_t *a1, unint64_t a2, uint64_t ***a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_2169ADF98((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            int v12 = **a3;
            uint64_t v13 = *a3[1];
            if (v12 != v13)
            {
              uint64_t v14 = v3;
              do
              {
                uint64_t v15 = *v12++;
                v7[v14++] = v15;
              }
              while (v12 != v13);
            }
          }
          uint64_t v16 = v7;
LABEL_34:
          if (v16 != (uint64_t *)a1[4])
          {
            sub_2168F83DC((uint64_t)a1);
            a1[4] = (unint64_t)v16;
          }
          *a1 = a2;
          return;
        }
        uint64_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v21 = a2;
      }
      else {
        unint64_t v21 = *a1;
      }
      uint64_t v22 = sub_2169ADF98((uint64_t)a1, a2);
      uint64_t v16 = v22;
      if (v21)
      {
        uint64_t v23 = 8 * v21;
        uint64_t v24 = v22;
        do
        {
          uint64_t v25 = *v7++;
          *v24++ = v25;
          v23 -= 8;
        }
        while (v23);
      }
      if (v3 < a2)
      {
        uint64_t v26 = **a3;
        uint64_t v27 = *a3[1];
        if (v26 != v27)
        {
          uint64_t v28 = v3;
          do
          {
            uint64_t v29 = *v26++;
            v22[v28++] = v29;
          }
          while (v26 != v27);
        }
      }
      goto LABEL_34;
    }
    if (8 * a2 / a2 == 8)
    {
      uint64_t v17 = sub_2169ADF98((uint64_t)a1, a2);
      uint64_t v16 = v17;
      uint64_t v18 = **a3;
      uint64_t v19 = *a3[1];
      if (v18 != v19)
      {
        uint64_t v20 = 0;
        do
        {
          v17[v20] = v18[v20];
          ++v20;
        }
        while (&v18[v20] != v19);
      }
      goto LABEL_34;
    }
  }

  sub_2168F845C(a1);
}

uint64_t sub_216F35C68(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216F35760((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_216F35CD4(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_216F35CEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    uint64_t v5 = v2[4];
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_2167AE00C((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void sub_216F35D68(uint64_t a1, void *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(void *)(v5 + 8 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    unint64_t v9 = *(uint64_t **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    int v12 = sub_2169ADF98(a1, v11);
    uint64_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 8 * v4;
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v9++;
        *v15++ = v16;
        v14 -= 8;
      }
      while (v14);
    }
    v12[v4] = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<long long>::emplace_back(Args &&...) [T = long long, Args = <c"
           "onst long long &>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

BOOL sub_216F35ED0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8 || (*(unsigned char *)(v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v9 = *(void *)v8;
  v11[1] = a3;
  v11[2] = &stru_26C755190;
  __int16 v12 = 0;
  v11[0] = &unk_26C769CF0;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

uint64_t sub_216F35F78(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      sub_216F35760((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_216F35FE4(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_216F35FFC(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_216F36050((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_216F36050(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; sub_2168F83DC(i))
    i -= 40;
  *(void *)(a1 + 8) = a2;
}

void sub_216F360A0(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_216F360DC(a1, v4);
  }
  else if (!v3)
  {
    sub_216F36050((uint64_t)a1, *a1 + 40 * a2);
  }
}

void sub_216F360DC(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      __int16 v12 = (char *)sub_2168720A4(v4, v11);
    }
    else {
      __int16 v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[40 * v8];
    uint64_t v18 = &v12[40 * v11];
    size_t v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    int v17 = &v16[v14];
    sub_216F36244(a1, &v15);
    sub_216F3647C((uint64_t)&v15);
  }
}

void sub_216F36230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F3647C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F36244(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216F362BC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216F362BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      uint64_t v9 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v9;
      if (v9)
      {
        unint64_t v10 = (atomic_ullong *)(v9 - 16);
        if (*(void *)(v7 - 16)) {
          unint64_t v10 = *(atomic_ullong **)(v7 - 16);
        }
        atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
        uint64_t v7 = *((void *)&v16 + 1);
      }
      a3 -= 40;
      v7 -= 40;
      *((void *)&v16 + 1) = v7;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216F36378((uint64_t)v13);
  return v11;
}

uint64_t sub_216F36378(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216F363B0((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_216F363B0(uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return sub_216F36428(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_216F36428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(void *)(a2 + 32); result != *(void *)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    sub_2168F83DC(result);
    uint64_t result = *(void *)(a2 + 32) + 40;
  }
  return result;
}

uint64_t sub_216F3647C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216F364B4(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    *(void *)(a1 + 16) = v4 - 40;
    sub_2168F83DC(v4 - 40);
  }
}

void sub_216F364F8(uint64_t *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a4)
  {
    sub_216F36664(a1);
    if (a4 > 0x666666666666666) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_2168724E8(a1, v11);
    uint64_t v12 = sub_216F366A0(v8, (uint64_t)a2, (uint64_t)a3, a1[1]);
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v13 = (long long *)((char *)a2 + 8 * ((a1[1] - v9) >> 3));
    sub_216F367BC(a2, v13, v9);
    uint64_t v12 = sub_216F366A0(v8, (uint64_t)v13, (uint64_t)a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  sub_216F367BC(a2, a3, v9);

  sub_216F36050((uint64_t)a1, v14);
}

void sub_216F36654(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216F3665C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216F36664(uint64_t *a1)
{
  if (*a1)
  {
    sub_216F36050((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_216F366A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  uint64_t v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  for (v9[2] = &v12; a2 != a3; a2 += 40)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
    *(_OWORD *)(v4 + 16) = v5;
    uint64_t v6 = *(void *)(a2 + 32);
    *(void *)(v4 + 32) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)(v6 - 16);
      if (*(void *)(v4 + 24)) {
        uint64_t v7 = *(atomic_ullong **)(v4 + 24);
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = v12;
    }
    v4 += 40;
    uint64_t v12 = v4;
  }
  char v10 = 1;
  sub_216F36740((uint64_t)v9);
  return v4;
}

uint64_t sub_216F36740(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216F36778(a1);
  }
  return a1;
}

void sub_216F36778(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 40;
    sub_2168F83DC(v1);
  }
}

long long *sub_216F367BC(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_216C467D8(a3, v4);
      uint64_t v4 = (long long *)((char *)v4 + 40);
      a3 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_216F3681C(void *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, char *a3)
{
  if (this)
  {
    uint64_t v4 = a1[1];
    if (!v4) {
      return 1;
    }
    int v5 = (int)a3;
    uint64_t v7 = *(void *)this;
    if (*(void *)this == (int)a3) {
      return 1;
    }
    if (v4 * (int)a3 == v7)
    {
      sub_216902540(this, (uint64_t)this, a3);
      unint64_t v8 = 0;
      unint64_t v9 = 0;
      char v10 = (_OWORD *)*((void *)this + 4);
      uint64_t v11 = v10;
      do
      {
        if ((*(void *)(*a1 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8))
        {
          uint64_t v12 = v5;
          uint64_t v13 = v10;
          if (v5 >= 1)
          {
            do
            {
              long long v14 = *v13;
              long long v15 = v13[1];
              long long v16 = v13[3];
              v11[2] = v13[2];
              void v11[3] = v16;
              *uint64_t v11 = v14;
              v11[1] = v15;
              long long v17 = v13[4];
              long long v18 = v13[5];
              long long v19 = v13[7];
              v11[6] = v13[6];
              v11[7] = v19;
              v11[4] = v17;
              v11[5] = v18;
              v11 += 8;
              v13 += 8;
              --v12;
            }
            while (v12);
          }
          v9 += v5;
        }
        ++v8;
        v10 += 8;
      }
      while (v8 != v4);
      if (v9 < *(void *)this)
      {
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        uint64_t v29 = &v21;
        sub_216902248((unint64_t *)this, v9, &v29);
      }
      return 1;
    }
    *(void *)&long long v21 = "usdGeom/pointInstancer.h";
    *((void *)&v21 + 1) = "ApplyMaskToArray";
    *(void *)&long long v22 = 1231;
    *((void *)&v22 + 1) = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ApplyMaskToArray(const "
                            "std::vector<BOOL> &, VtArray<T> *, const int) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v23) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v21, (pxrInternal__aapl__pxrReserved__ *)"Input mask's size (%zu) is not compatible with the input dataArray (%zu) and elementSize (%d).", a3, v4, v7, a3);
  }
  else
  {
    *(void *)&long long v21 = "usdGeom/pointInstancer.h";
    *((void *)&v21 + 1) = "ApplyMaskToArray";
    *(void *)&long long v22 = 1221;
    *((void *)&v22 + 1) = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPointInstancer::ApplyMaskToArray(const "
                            "std::vector<BOOL> &, VtArray<T> *, const int) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v23) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"NULL dataArray.");
  }
  return 0;
}

void *sub_216F369CC(void *a1, unint64_t a2, long long *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216F36A6C(a1, a2);
    uint64_t v6 = (_OWORD *)a1[1];
    uint64_t v7 = &v6[8 * a2];
    unint64_t v8 = a2 << 7;
    do
    {
      long long v9 = *a3;
      long long v10 = a3[1];
      long long v11 = a3[3];
      v6[2] = a3[2];
      v6[3] = v11;
      *uint64_t v6 = v9;
      v6[1] = v10;
      long long v12 = a3[4];
      long long v13 = a3[5];
      long long v14 = a3[7];
      v6[6] = a3[6];
      v6[7] = v14;
      v6[4] = v12;
      v6[5] = v13;
      v6 += 8;
      v8 -= 128;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_216F36A50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216F36A6C(void *a1, unint64_t a2)
{
  if (a2 >> 57) {
    sub_21677CB10();
  }
  uint64_t result = (char *)sub_216F36AB0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

void *sub_216F36AB0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57) {
    sub_21677CA1C();
  }
  return operator new(a2 << 7);
}

void sub_216F36AE8(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      v12[0] = 0;
      uint64_t v13 = 65539;
      int v14 = 55;
      tbb::task_group_context::init((uint64_t)v12, v6, v7, v8);
      v10[0] = a1;
      v10[1] = 0;
      v10[2] = a3;
      uint64_t v9 = a2;
      sub_216F36C04(v10, &v9, (uint64_t)&v11, (tbb::task_group_context *)v12);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v12);
    }
    else
    {
      sub_216F3725C(a2, 0, (unint64_t)a1);
    }
  }
}

void sub_216F36BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

void *sub_216F36C04(void *result, void *a2, uint64_t a3, tbb::task_group_context *a4)
{
  if (result[1] < *result)
  {
    int v5 = result;
    uint64_t v9 = a4;
    uint64_t v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(unsigned char *)(v6 - 11) = 1;
    *(void *)uint64_t v6 = &unk_26C76CF68;
    uint64_t v7 = v5[2];
    *(_OWORD *)(v6 + 8) = *(_OWORD *)v5;
    *(void *)(v6 + 24) = v7;
    *(void *)(v6 + 32) = *a2;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 48) = 0;
    *(unsigned char *)(v6 + 52) = 5;
    *(void *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 - 40) + 16))(*(void *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_216F36CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_216F36D04(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = a1 + 40;
  if (!v3)
  {
    *(void *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      uint64_t v4 = *(void *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + 8) = 1;
        unsigned int v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *(unsigned char *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_216F36D74(v2, (tbb::internal::allocate_continuation_proxy *)a1, (unint64_t *)(a1 + 8));
  return 0;
}

void sub_216F36D74(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, unint64_t *a3)
{
  if (a3[2] < *a3 - a3[1])
  {
    if (*(void *)a1 > 1uLL) {
      goto LABEL_6;
    }
    if (*(void *)a1)
    {
LABEL_4:
      if (*(unsigned char *)(a1 + 12))
      {
        --*(unsigned char *)(a1 + 12);
        *(void *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_216F36E28(a2);
          if (a3[2] >= *a3 - a3[1]) {
            break;
          }
          if (*(void *)a1 <= 1uLL)
          {
            if (*(void *)a1) {
              goto LABEL_4;
            }
            break;
          }
        }
      }
    }
  }
  sub_216F36EFC(a1, (uint64_t)a2, a3);
}

uint64_t sub_216F36E28(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v2 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(void *)uint64_t v2 = &unk_26C751420;
  __dmb(0xBu);
  v2[8] = 0;
  *((void *)a1 - 4) = v2;
  *((void *)v2 - 3) = 2;
  uint64_t v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  __n128 v4 = sub_216F370D4(v3, (uint64_t)a1);
  uint64_t v6 = ***(uint64_t (****)(__n128))(v5 - 40);

  return v6(v4);
}

void sub_216F36EFC(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v4 = a3[1];
  if (a3[2] < *a3 - v4 && *(unsigned char *)(a1 + 12))
  {
    *(_DWORD *)long long v12 = 0x10000;
    long long v13 = *(_OWORD *)a3;
    unint64_t v14 = a3[2];
    while (1)
    {
      sub_216B17510(v12, *(unsigned __int8 *)(a1 + 12));
      char v6 = *(unsigned char *)(*(void *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v6 & 1) == 0) {
        break;
      }
      unsigned __int8 v9 = *(unsigned char *)(a1 + 12) + 1;
      *(unsigned char *)(a1 + 12) = v9;
      unsigned __int8 v8 = v12[2];
      if (v12[2] < 2u)
      {
        unsigned int v7 = v12[0];
        if (v12[v12[0] + 3] < v9
          && *((void *)&v13 + 3 * v12[0] + 2) < *((void *)&v13 + 3 * v12[0]) - *((void *)&v13 + 3 * v12[0] + 1))
        {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      sub_216F3713C(a2, (long long *)((char *)&v13 + 24 * v12[1]), v12[v12[1] + 3]);
      unsigned __int8 v8 = --v12[2];
      v12[1] = (v12[1] + 1) & 7;
LABEL_11:
      if (!v8 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56))) {
        return;
      }
    }
    unsigned int v7 = v12[0];
LABEL_6:
    sub_216F3725C(*(void *)(a2 + 32), *((void *)&v13 + 3 * v7 + 1), *((void *)&v13 + 3 * v7));
    unsigned __int8 v8 = --v12[2];
    v12[0] = (v12[0] - 1) & 7;
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(a2 + 32);
  unint64_t v11 = *a3;

  sub_216F3725C(v10, v4, v11);
}

__n128 sub_216F370D4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 - 11) = 1;
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)a1 = &unk_26C76CF68;
  *(void *)(a1 + 8) = v2;
  uint64_t v4 = v3 + ((unint64_t)(*(void *)(a2 + 8) - v3) >> 1);
  *(void *)(a2 + 8) = v4;
  *(void *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  uint64_t v6 = *(void *)(a2 + 40) >> 1;
  *(void *)(a2 + 40) = v6;
  *(void *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 48) = 2;
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  return result;
}

uint64_t sub_216F3713C(uint64_t a1, long long *a2, char a3)
{
  uint64_t v6 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(void *)uint64_t v6 = &unk_26C751420;
  __dmb(0xBu);
  unsigned char v6[8] = 0;
  *(void *)(a1 - 32) = v6;
  *((void *)v6 - 3) = 2;
  uint64_t v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(unsigned char *)(v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C76CF68;
  long long v8 = *a2;
  *(void *)(v7 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(v7 + 8) = v8;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40) >> 1;
  *(void *)(a1 + 40) = v10;
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v10;
  *(_DWORD *)(v7 + 48) = 2;
  *(unsigned char *)(v7 + 52) = *(unsigned char *)(a1 + 52) - a3;
  unint64_t v11 = ***(uint64_t (****)(void))(v7 - 40);

  return v11();
}

void sub_216F3725C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v79 = v10;
    uint64_t v80 = v9;
    uint64_t v81 = v8;
    uint64_t v82 = v7;
    uint64_t v83 = v6;
    uint64_t v84 = v5;
    uint64_t v85 = v3;
    uint64_t v86 = v4;
    unint64_t v12 = a2;
    uint64_t v14 = 12 * a2;
    uint64_t v15 = 16 * a2;
    while (*(void *)(*(void *)a1 + 8)
         && ((*(void *)(**(void **)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    {
LABEL_25:
      ++v12;
      v14 += 12;
      v15 += 16;
      if (a3 == v12) {
        return;
      }
    }
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v78, 1.0);
    long long v16 = *(void **)(a1 + 24);
    if (*v16)
    {
      long long v17 = (float32x2_t *)(v16[4] + v14);
      float64x2_t v70 = vcvtq_f64_f32(*v17);
      v71.f64[0] = v17[1].f32[0];
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale((uint64_t)v78, &v70);
      long long v18 = *(void **)(a1 + 32);
      if (*v18)
      {
        pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(&v67, (float32x2_t *)(v18[4] + v15));
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((uint64_t)&v70, v67.f64);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v78, v70.f64);
        goto LABEL_10;
      }
    }
    else
    {
      long long v19 = *(void **)(a1 + 32);
      if (*v19)
      {
        pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(&v70, (float32x2_t *)(v19[4] + v15));
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((uint64_t)v78, v70.f64);
LABEL_10:
        uint64_t v20 = *(void **)(a1 + 64);
        if (*v20)
        {
          long long v21 = (float *)(v20[4] + v14);
          float v22 = v21[1];
          float v23 = v21[2];
          double v24 = *v21;
          double v25 = v22;
          double v26 = v23;
          double v27 = **(double **)(a1 + 16) * sqrtf((float)((float)(*v21 * *v21) + (float)(v22 * v22)) + (float)(v23 * v23));
          v67.f64[0] = v24;
          v67.f64[1] = v25;
          double v68 = v26;
          double v69 = v27;
          double v28 = v24 * v24 + v25 * v25 + v26 * v26;
          if (fabs(v28 + -1.0) >= 1.0e-10)
          {
            double v29 = sqrt(v28);
            if (v29 <= 1.0e-10) {
              double v30 = 1.0e10;
            }
            else {
              double v30 = 1.0 / v29;
            }
            v67.f64[0] = v30 * v24;
            v67.f64[1] = v30 * v25;
            double v68 = v30 * v26;
          }
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v70, &v67);
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v78, v70.f64);
        }
      }
    }
    long long v31 = *(void **)(a1 + 48);
    long long v32 = (float32x2_t *)(*(void *)(*(void *)(a1 + 40) + 32) + v14);
    float32x2_t v33 = *v32;
    float v34 = v32[1].f32[0];
    if (*v31)
    {
      uint64_t v35 = (float32x2_t *)(v31[4] + v14);
      float32x2_t v36 = *v35;
      float v37 = v35[1].f32[0];
      uint64_t v38 = *(void **)(a1 + 56);
      double v39 = **(double **)(a1 + 8);
      if (*v38)
      {
        uint64_t v40 = (float32x2_t *)(v38[4] + v14);
        float v41 = v39 * v40[1].f32[0];
        float32x2_t v36 = vadd_f32(v36, vmul_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v40), v39)), (float32x2_t)0x3F0000003F000000));
        float v37 = v37 + (float)(v41 * 0.5);
      }
      float v42 = v39 * v37;
      float32x2_t v33 = vadd_f32(v33, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v36), v39)));
      float v34 = v34 + v42;
    }
    float64x2_t v70 = vcvtq_f64_f32(v33);
    v71.f64[0] = v34;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslateOnly((uint64_t)v78, (uint64_t)&v70);
    if (*(void *)(*(void *)(a1 + 88) + 8) == **(void **)(a1 + 88))
    {
      v63 = **(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase ***)(a1 + 96);
      sub_216902540(v63, v43, v44);
      uint64_t v55 = (float64x2_t *)(*((void *)v63 + 4) + 8 * v15);
      float64x2_t v64 = (float64x2_t)v78[0];
      float64x2_t v65 = (float64x2_t)v78[1];
      float64x2_t v66 = (float64x2_t)v78[3];
      v55[2] = (float64x2_t)v78[2];
      v55[3] = v66;
      *uint64_t v55 = v64;
      v55[1] = v65;
      float64x2_t v59 = (float64x2_t)v78[4];
      float64x2_t v60 = (float64x2_t)v78[5];
      float64x2_t v61 = (float64x2_t)v78[6];
      float64x2_t v62 = (float64x2_t)v78[7];
    }
    else
    {
      uint64_t v45 = (float64x2_t *)(**(void **)(a1 + 72)
                          + ((uint64_t)*(int *)(*(void *)(*(void *)(a1 + 80) + 32) + 4 * v12) << 7));
      float64x2_t v46 = v45[3];
      float64x2_t v48 = *v45;
      float64x2_t v47 = v45[1];
      float64x2_t v72 = v45[2];
      float64x2_t v73 = v46;
      float64x2_t v70 = v48;
      float64x2_t v71 = v47;
      float64x2_t v49 = v45[7];
      float64x2_t v51 = v45[4];
      float64x2_t v50 = v45[5];
      float64x2_t v76 = v45[6];
      float64x2_t v77 = v49;
      float64x2_t v74 = v51;
      float64x2_t v75 = v50;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v70.f64, (double *)v78);
      uint64_t v52 = **(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase ***)(a1 + 96);
      sub_216902540(v52, v53, v54);
      uint64_t v55 = (float64x2_t *)(*((void *)v52 + 4) + 8 * v15);
      float64x2_t v56 = v70;
      float64x2_t v57 = v71;
      float64x2_t v58 = v73;
      v55[2] = v72;
      v55[3] = v58;
      *uint64_t v55 = v56;
      v55[1] = v57;
      float64x2_t v59 = v74;
      float64x2_t v60 = v75;
      float64x2_t v61 = v76;
      float64x2_t v62 = v77;
    }
    v55[6] = v61;
    v55[7] = v62;
    v55[4] = v59;
    v55[5] = v60;
    goto LABEL_25;
  }
}

void sub_216F375F8(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      v12[0] = 0;
      uint64_t v13 = 65539;
      int v14 = 55;
      tbb::task_group_context::init((uint64_t)v12, v6, v7, v8);
      v10[0] = a1;
      v10[1] = 0;
      v10[2] = a3;
      uint64_t v9 = a2;
      sub_216F37714(v10, &v9, (uint64_t)&v11, (tbb::task_group_context *)v12);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v12);
    }
    else
    {
      sub_216F37D6C(a2, 0, (unint64_t)a1);
    }
  }
}

void sub_216F376F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

void *sub_216F37714(void *result, void *a2, uint64_t a3, tbb::task_group_context *a4)
{
  if (result[1] < *result)
  {
    uint64_t v5 = result;
    uint64_t v9 = a4;
    uint64_t v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(unsigned char *)(v6 - 11) = 1;
    *(void *)uint64_t v6 = &unk_26C76CFB0;
    uint64_t v7 = v5[2];
    *(_OWORD *)(v6 + 8) = *(_OWORD *)v5;
    *(void *)(v6 + 24) = v7;
    *(void *)(v6 + 32) = *a2;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 48) = 0;
    *(unsigned char *)(v6 + 52) = 5;
    *(void *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 - 40) + 16))(*(void *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_216F377F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_216F37814(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = a1 + 40;
  if (!v3)
  {
    *(void *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      uint64_t v4 = *(void *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + 8) = 1;
        unsigned int v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *(unsigned char *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_216F37884(v2, (tbb::internal::allocate_continuation_proxy *)a1, (unint64_t *)(a1 + 8));
  return 0;
}

void sub_216F37884(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, unint64_t *a3)
{
  if (a3[2] < *a3 - a3[1])
  {
    if (*(void *)a1 > 1uLL) {
      goto LABEL_6;
    }
    if (*(void *)a1)
    {
LABEL_4:
      if (*(unsigned char *)(a1 + 12))
      {
        --*(unsigned char *)(a1 + 12);
        *(void *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_216F37938(a2);
          if (a3[2] >= *a3 - a3[1]) {
            break;
          }
          if (*(void *)a1 <= 1uLL)
          {
            if (*(void *)a1) {
              goto LABEL_4;
            }
            break;
          }
        }
      }
    }
  }
  sub_216F37A0C(a1, (uint64_t)a2, a3);
}

uint64_t sub_216F37938(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v2 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(void *)uint64_t v2 = &unk_26C751420;
  __dmb(0xBu);
  v2[8] = 0;
  *((void *)a1 - 4) = v2;
  *((void *)v2 - 3) = 2;
  uint64_t v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  __n128 v4 = sub_216F37BE4(v3, (uint64_t)a1);
  uint64_t v6 = ***(uint64_t (****)(__n128))(v5 - 40);

  return v6(v4);
}

void sub_216F37A0C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v4 = a3[1];
  if (a3[2] < *a3 - v4 && *(unsigned char *)(a1 + 12))
  {
    *(_DWORD *)unint64_t v12 = 0x10000;
    long long v13 = *(_OWORD *)a3;
    unint64_t v14 = a3[2];
    while (1)
    {
      sub_216B17510(v12, *(unsigned __int8 *)(a1 + 12));
      char v6 = *(unsigned char *)(*(void *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v6 & 1) == 0) {
        break;
      }
      unsigned __int8 v9 = *(unsigned char *)(a1 + 12) + 1;
      *(unsigned char *)(a1 + 12) = v9;
      unsigned __int8 v8 = v12[2];
      if (v12[2] < 2u)
      {
        unsigned int v7 = v12[0];
        if (v12[v12[0] + 3] < v9
          && *((void *)&v13 + 3 * v12[0] + 2) < *((void *)&v13 + 3 * v12[0]) - *((void *)&v13 + 3 * v12[0] + 1))
        {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      sub_216F37C4C(a2, (long long *)((char *)&v13 + 24 * v12[1]), v12[v12[1] + 3]);
      unsigned __int8 v8 = --v12[2];
      v12[1] = (v12[1] + 1) & 7;
LABEL_11:
      if (!v8 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56))) {
        return;
      }
    }
    unsigned int v7 = v12[0];
LABEL_6:
    sub_216F37D6C(*(void *)(a2 + 32), *((void *)&v13 + 3 * v7 + 1), *((void *)&v13 + 3 * v7));
    unsigned __int8 v8 = --v12[2];
    v12[0] = (v12[0] - 1) & 7;
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(a2 + 32);
  unint64_t v11 = *a3;

  sub_216F37D6C(v10, v4, v11);
}

__n128 sub_216F37BE4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 - 11) = 1;
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)a1 = &unk_26C76CFB0;
  *(void *)(a1 + 8) = v2;
  uint64_t v4 = v3 + ((unint64_t)(*(void *)(a2 + 8) - v3) >> 1);
  *(void *)(a2 + 8) = v4;
  *(void *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  uint64_t v6 = *(void *)(a2 + 40) >> 1;
  *(void *)(a2 + 40) = v6;
  *(void *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 48) = 2;
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  return result;
}

uint64_t sub_216F37C4C(uint64_t a1, long long *a2, char a3)
{
  uint64_t v6 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(void *)uint64_t v6 = &unk_26C751420;
  __dmb(0xBu);
  unsigned char v6[8] = 0;
  *(void *)(a1 - 32) = v6;
  *((void *)v6 - 3) = 2;
  uint64_t v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(unsigned char *)(v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C76CFB0;
  long long v8 = *a2;
  *(void *)(v7 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(v7 + 8) = v8;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40) >> 1;
  *(void *)(a1 + 40) = v10;
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v10;
  *(_DWORD *)(v7 + 48) = 2;
  *(unsigned char *)(v7 + 52) = *(unsigned char *)(a1 + 52) - a3;
  unint64_t v11 = ***(uint64_t (****)(void))(v7 - 40);

  return v11();
}

void sub_216F37D6C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v80 = v10;
    uint64_t v81 = v9;
    uint64_t v82 = v8;
    uint64_t v83 = v7;
    uint64_t v84 = v6;
    uint64_t v85 = v5;
    uint64_t v86 = v3;
    uint64_t v87 = v4;
    unint64_t v12 = a2;
    uint64_t v14 = 12 * a2;
    uint64_t v15 = 8 * a2;
    uint64_t v16 = a2 << 7;
    while (*(void *)(*(void *)a1 + 8)
         && ((*(void *)(**(void **)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    {
LABEL_25:
      ++v12;
      v14 += 12;
      v15 += 8;
      v16 += 128;
      if (a3 == v12) {
        return;
      }
    }
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v79, 1.0);
    long long v17 = *(void **)(a1 + 24);
    if (*v17)
    {
      long long v18 = (float32x2_t *)(v17[4] + v14);
      float64x2_t v71 = vcvtq_f64_f32(*v18);
      v72.f64[0] = v18[1].f32[0];
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale((uint64_t)v79, &v71);
      long long v19 = *(void **)(a1 + 32);
      if (*v19)
      {
        pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v68.f64, (unsigned __int16 *)(v19[4] + v15));
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((uint64_t)&v71, v68.f64);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v79, v71.f64);
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v20 = *(void **)(a1 + 32);
      if (*v20)
      {
        pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v71.f64, (unsigned __int16 *)(v20[4] + v15));
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((uint64_t)v79, v71.f64);
LABEL_10:
        long long v21 = *(void **)(a1 + 64);
        if (*v21)
        {
          float v22 = (float *)(v21[4] + v14);
          float v23 = v22[1];
          float v24 = v22[2];
          double v25 = *v22;
          double v26 = v23;
          double v27 = v24;
          double v28 = **(double **)(a1 + 16) * sqrtf((float)((float)(*v22 * *v22) + (float)(v23 * v23)) + (float)(v24 * v24));
          v68.f64[0] = v25;
          v68.f64[1] = v26;
          double v69 = v27;
          double v70 = v28;
          double v29 = v25 * v25 + v26 * v26 + v27 * v27;
          if (fabs(v29 + -1.0) >= 1.0e-10)
          {
            double v30 = sqrt(v29);
            if (v30 <= 1.0e-10) {
              double v31 = 1.0e10;
            }
            else {
              double v31 = 1.0 / v30;
            }
            v68.f64[0] = v31 * v25;
            v68.f64[1] = v31 * v26;
            double v69 = v31 * v27;
          }
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v71, &v68);
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v79, v71.f64);
        }
      }
    }
    long long v32 = *(void **)(a1 + 48);
    float32x2_t v33 = (float32x2_t *)(*(void *)(*(void *)(a1 + 40) + 32) + v14);
    float32x2_t v34 = *v33;
    float v35 = v33[1].f32[0];
    if (*v32)
    {
      float32x2_t v36 = (float32x2_t *)(v32[4] + v14);
      float32x2_t v37 = *v36;
      float v38 = v36[1].f32[0];
      double v39 = *(void **)(a1 + 56);
      double v40 = **(double **)(a1 + 8);
      if (*v39)
      {
        float v41 = (float32x2_t *)(v39[4] + v14);
        float v42 = v40 * v41[1].f32[0];
        float32x2_t v37 = vadd_f32(v37, vmul_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v41), v40)), (float32x2_t)0x3F0000003F000000));
        float v38 = v38 + (float)(v42 * 0.5);
      }
      float v43 = v40 * v38;
      float32x2_t v34 = vadd_f32(v34, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v37), v40)));
      float v35 = v35 + v43;
    }
    float64x2_t v71 = vcvtq_f64_f32(v34);
    v72.f64[0] = v35;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslateOnly((uint64_t)v79, (uint64_t)&v71);
    if (*(void *)(*(void *)(a1 + 88) + 8) == **(void **)(a1 + 88))
    {
      float64x2_t v64 = **(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase ***)(a1 + 96);
      sub_216902540(v64, v44, v45);
      float64x2_t v56 = (float64x2_t *)(*((void *)v64 + 4) + v16);
      float64x2_t v65 = (float64x2_t)v79[0];
      float64x2_t v66 = (float64x2_t)v79[1];
      float64x2_t v67 = (float64x2_t)v79[3];
      v56[2] = (float64x2_t)v79[2];
      v56[3] = v67;
      *float64x2_t v56 = v65;
      v56[1] = v66;
      float64x2_t v60 = (float64x2_t)v79[4];
      float64x2_t v61 = (float64x2_t)v79[5];
      float64x2_t v62 = (float64x2_t)v79[6];
      float64x2_t v63 = (float64x2_t)v79[7];
    }
    else
    {
      float64x2_t v46 = (float64x2_t *)(**(void **)(a1 + 72)
                          + ((uint64_t)*(int *)(*(void *)(*(void *)(a1 + 80) + 32) + 4 * v12) << 7));
      float64x2_t v47 = v46[3];
      float64x2_t v49 = *v46;
      float64x2_t v48 = v46[1];
      float64x2_t v73 = v46[2];
      float64x2_t v74 = v47;
      float64x2_t v71 = v49;
      float64x2_t v72 = v48;
      float64x2_t v50 = v46[7];
      float64x2_t v52 = v46[4];
      float64x2_t v51 = v46[5];
      float64x2_t v77 = v46[6];
      float64x2_t v78 = v50;
      float64x2_t v75 = v52;
      float64x2_t v76 = v51;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v71.f64, (double *)v79);
      uint64_t v53 = **(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase ***)(a1 + 96);
      sub_216902540(v53, v54, v55);
      float64x2_t v56 = (float64x2_t *)(*((void *)v53 + 4) + v16);
      float64x2_t v57 = v71;
      float64x2_t v58 = v72;
      float64x2_t v59 = v74;
      v56[2] = v73;
      v56[3] = v59;
      *float64x2_t v56 = v57;
      v56[1] = v58;
      float64x2_t v60 = v75;
      float64x2_t v61 = v76;
      float64x2_t v62 = v77;
      float64x2_t v63 = v78;
    }
    v56[6] = v62;
    v56[7] = v63;
    v56[4] = v60;
    v56[5] = v61;
    goto LABEL_25;
  }
}

void *sub_216F38110(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xD20D20D20D20D3) {
    sub_21677CA1C();
  }
  return operator new(312 * a2);
}

void *sub_216F3815C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2169D8290(a1, a2);
    uint64_t v4 = (int64x2_t *)a1[1];
    int64x2_t v5 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
    uint64_t v6 = &v4[3 * a2];
    int64x2_t v7 = vdupq_n_s64(0xC7EFFFFFE0000000);
    do
    {
      *uint64_t v4 = v5;
      v4[1] = (int64x2_t)xmmword_217412860;
      v4[2] = v7;
      v4 += 3;
    }
    while (v4 != v6);
    a1[1] = v6;
  }
  return a1;
}

void sub_216F381DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F38200(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  int64x2_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76CFF8;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)double v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      long long v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)long long v21 = &unk_26C751420;
      __dmb(0xBu);
      v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      float v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76CFF8;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_216F38634(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_216F38634(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_216F38634(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v24 = v3;
    uint64_t v25 = v4;
    unint64_t v6 = a2;
    uint64_t v8 = a2 << 7;
    uint64_t v9 = 48 * a2;
    do
    {
      if (!*(void *)(*(void *)a1 + 8)
        || ((*(void *)(**(void **)a1 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      {
        memcpy(__dst, (const void *)(**(void **)(a1 + 24) + 312 * *(int *)(*(void *)(*(void *)(a1 + 8) + 32) + 4 * v6)), sizeof(__dst));
        uint64_t v10 = (double *)(*(void *)(*(void *)(a1 + 32) + 32) + v8);
        long long v20 = *(_OWORD *)&__dst[112];
        long long v21 = *(_OWORD *)&__dst[128];
        long long v22 = *(_OWORD *)&__dst[144];
        long long v23 = *(_OWORD *)&__dst[160];
        long long v16 = *(_OWORD *)&__dst[48];
        long long v17 = *(_OWORD *)&__dst[64];
        long long v18 = *(_OWORD *)&__dst[80];
        long long v19 = *(_OWORD *)&__dst[96];
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v16, v10);
        pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)__dst, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v16);
        uint64_t v11 = **(double ***)(a1 + 16);
        if (v11)
        {
          long long v20 = *(_OWORD *)&__dst[112];
          long long v21 = *(_OWORD *)&__dst[128];
          long long v22 = *(_OWORD *)&__dst[144];
          long long v23 = *(_OWORD *)&__dst[160];
          long long v16 = *(_OWORD *)&__dst[48];
          long long v17 = *(_OWORD *)&__dst[64];
          long long v18 = *(_OWORD *)&__dst[80];
          long long v19 = *(_OWORD *)&__dst[96];
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v16, v11);
          pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)__dst, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v16);
        }
        pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)__dst, (uint64_t)&v16);
        uint64_t v12 = (_OWORD *)(**(void **)(a1 + 40) + v9);
        long long v13 = v16;
        long long v14 = v18;
        v12[1] = v17;
        v12[2] = v14;
        *uint64_t v12 = v13;
      }
      ++v6;
      v8 += 128;
      v9 += 48;
    }
    while (a3 != v6);
  }
}

uint64_t sub_216F387B8(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  if (*((unsigned char *)this + 56) == 2)
  {
    uint64_t v4 = *((void *)this - 4);
    uint64_t v5 = *(void *)(v4 + 16);
    __dmb(0xBu);
    if (!v5)
    {
      unint64_t v6 = (long long **)*((void *)this + 1);
      *(void *)(v4 + 24) = *v6;
      uint64_t v7 = v4 + 24;
      *(void *)(v7 + 8) = v6[1];
      *(void *)(v7 + 16) = v6[2];
      uint64_t v8 = *v6;
      long long v9 = *v8;
      long long v10 = v8[1];
      *(_OWORD *)(v7 + 56) = v8[2];
      *(_OWORD *)(v7 + 40) = v10;
      *(_OWORD *)(v7 + 24) = v9;
      *((void *)this + 1) = v7;
      *(unsigned char *)(v7 - 15) = 1;
    }
  }
  uint64_t v11 = (long long *)((char *)this + 16);
  unint64_t v12 = *((void *)this + 4);
  unint64_t v13 = *((void *)this + 2) - *((void *)this + 3);
  if (v12 < v13)
  {
    unint64_t v14 = *((void *)this + 5);
    if (v14 > 1) {
      goto LABEL_15;
    }
    if (v14 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_15:
      while (1)
      {
        uint64_t v15 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x60uLL);
        *((void *)this - 4) = v15;
        *(void *)(v15 - 24) = 2;
        uint64_t v16 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v15, 0x40uLL);
        char v17 = *((unsigned char *)this + 56);
        *(unsigned char *)(v15 - 11) = 1;
        *(void *)uint64_t v15 = &unk_26C751420;
        __dmb(0xBu);
        *(unsigned char *)(v15 + 8) = 0;
        *(void *)uint64_t v15 = &unk_26C76D088;
        *(unsigned char *)(v15 + 9) = 0;
        *(unsigned char *)(v15 + 10) = v17;
        *(void *)(v15 + 16) = 0;
        *(unsigned char *)(v16 - 11) = 1;
        *(void *)uint64_t v16 = &unk_26C76D040;
        *(void *)(v16 + 8) = *((void *)this + 1);
        *(void *)(v16 + 16) = *((void *)this + 2);
        uint64_t v18 = *((void *)this + 3) + ((*((void *)this + 2) - *((void *)this + 3)) >> 1);
        *((void *)this + 2) = v18;
        *(void *)(v16 + 24) = v18;
        *(void *)(v16 + 32) = *((void *)this + 4);
        uint64_t v19 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v19;
        *(void *)(v16 + 40) = v19;
        *(_DWORD *)(v16 + 48) = 2;
        *(unsigned char *)(v16 + 52) = *((unsigned char *)this + 52);
        *(unsigned char *)(v16 + 56) = 2;
        *((unsigned char *)this + 56) = 1;
        (***(void (****)(void))(v16 - 40))();
        unint64_t v12 = *((void *)this + 4);
        unint64_t v13 = *((void *)this + 2) - *((void *)this + 3);
        if (v12 >= v13) {
          break;
        }
        unint64_t v20 = *((void *)this + 5);
        if (v20 <= 1)
        {
          if (!v20 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v12 < v13 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)float32x2_t v36 = 0x10000;
    long long v37 = *v11;
    uint64_t v38 = *((void *)this + 4);
    while (1)
    {
      sub_216B17510(v36, *((unsigned __int8 *)this + 52));
      char v21 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v21 & 1) == 0) {
        break;
      }
      unsigned __int8 v24 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v24;
      unsigned __int8 v23 = v36[2];
      if (v36[2] < 2u)
      {
        unsigned int v22 = v36[0];
        if (v36[v36[0] + 3] < v24
          && *((void *)&v37 + 3 * v36[0] + 2) < *((void *)&v37 + 3 * v36[0]) - *((void *)&v37 + 3 * v36[0] + 1))
        {
          goto LABEL_30;
        }
        goto LABEL_25;
      }
      unsigned int v25 = v36[1];
      unsigned __int8 v26 = v36[v36[1] + 3];
      uint64_t v27 = tbb::internal::allocate_continuation_proxy::allocate(this, 0x60uLL);
      *((void *)this - 4) = v27;
      *(void *)(v27 - 24) = 2;
      uint64_t v28 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v27, 0x40uLL);
      uint64_t v29 = (char *)&v37 + 24 * v25;
      char v30 = *((unsigned char *)this + 56);
      *(unsigned char *)(v27 - 11) = 1;
      *(void *)uint64_t v27 = &unk_26C751420;
      __dmb(0xBu);
      *(unsigned char *)(v27 + 8) = 0;
      *(void *)uint64_t v27 = &unk_26C76D088;
      *(unsigned char *)(v27 + 9) = 0;
      *(unsigned char *)(v27 + 10) = v30;
      *(void *)(v27 + 16) = 0;
      *(unsigned char *)(v28 - 11) = 1;
      *(void *)uint64_t v28 = &unk_26C76D040;
      *(void *)(v28 + 8) = *((void *)this + 1);
      long long v31 = *(_OWORD *)v29;
      *(void *)(v28 + 32) = *((void *)v29 + 2);
      *(_OWORD *)(v28 + 16) = v31;
      uint64_t v32 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v32;
      *(void *)(v28 + 40) = v32;
      *(_DWORD *)(v28 + 48) = 2;
      LOBYTE(v32) = *((unsigned char *)this + 52);
      *(unsigned char *)(v28 + 56) = 2;
      *(unsigned char *)(v28 + 52) = v32 - v26;
      *((unsigned char *)this + 56) = 1;
      (***(void (****)(void))(v28 - 40))();
      unsigned __int8 v23 = --v36[2];
      v36[1] = (v36[1] + 1) & 7;
LABEL_30:
      if (!v23 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        goto LABEL_34;
      }
    }
    unsigned int v22 = v36[0];
LABEL_25:
    sub_216F38D78((uint64_t)this, (unint64_t *)&v37 + 3 * v22);
    unsigned __int8 v23 = --v36[2];
    v36[0] = (v36[0] - 1) & 7;
    goto LABEL_30;
  }
  sub_216F38D78((uint64_t)this, (unint64_t *)this + 2);
LABEL_34:
  if (*((unsigned char *)this + 56) == 1)
  {
    uint64_t v33 = *((void *)this - 4);
    uint64_t v34 = *((void *)this + 1);
    __dmb(0xBu);
    *(void *)(v33 + 16) = v34;
  }
  return 0;
}

void *sub_216F38CDC(void *result)
{
  *__n128 result = &unk_26C76D088;
  return result;
}

uint64_t sub_216F38D00(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9))
  {
    uint64_t v1 = *(void *)(a1 + 16);
    v2.f64[0] = *(float64_t *)(a1 + 64);
    v2.f64[1] = *(float64_t *)(v1 + 48);
    v3.f64[0] = *(float64_t *)(v1 + 40);
    v3.f64[1] = *(float64_t *)(a1 + 72);
    int8x16_t v4 = vbslq_s8((int8x16_t)vcgtq_f64(v3, v2), *(int8x16_t *)(a1 + 64), *(int8x16_t *)(v1 + 40));
    int8x16_t v5 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(a1 + 80), *(float64x2_t *)(v1 + 56)), *(int8x16_t *)(a1 + 80), *(int8x16_t *)(v1 + 56));
    *(int8x16_t *)(v1 + 24) = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v1 + 24), *(float64x2_t *)(a1 + 48)), *(int8x16_t *)(a1 + 48), *(int8x16_t *)(v1 + 24));
    *(int8x16_t *)(v1 + 40) = v4;
    *(int8x16_t *)(v1 + 56) = v5;
  }
  if (*(unsigned char *)(a1 + 10) == 1)
  {
    uint64_t v6 = *(void *)(a1 - 32);
    uint64_t v7 = *(void *)(a1 + 16);
    __dmb(0xBu);
    *(void *)(v6 + 16) = v7;
  }
  return 0;
}

double sub_216F38D78(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  float64x2_t v3 = (_OWORD *)(v2 + 24);
  int8x16_t v4 = **(void ****)(v2 + 8);
  unint64_t v6 = *a2;
  unint64_t v5 = a2[1];
  long long v7 = *(_OWORD *)(v2 + 24);
  long long v8 = *(_OWORD *)(v2 + 56);
  long long v15 = *(_OWORD *)(v2 + 40);
  long long v16 = v8;
  long long v14 = v7;
  unint64_t v9 = v6 - v5;
  if (v6 > v5)
  {
    uint64_t v10 = 48 * v5;
    do
    {
      sub_2168931C0((uint64_t)&v14, **v4 + v10);
      v10 += 48;
      --v9;
    }
    while (v9);
  }
  double result = *(double *)&v14;
  long long v12 = v15;
  long long v13 = v16;
  *float64x2_t v3 = v14;
  v3[1] = v12;
  v3[2] = v13;
  return result;
}

void sub_216F38E14()
{
  sub_216F3A218();
  sub_216779094(__p, "Points");
  sub_216F3A344((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F38E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::~UsdGeomPoints(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::~UsdGeomPointBased(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    long long v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D0D0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "usdGeom/points.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdGeomPoints pxrInternal__aapl__pxrReserved__::UsdGeomPoints::Get(const UsdStagePtr "
                            "&, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D0D0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F39030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92F40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92F40))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B92F38, "Points");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B92F38, &dword_216758000);
    __cxa_guard_release(&qword_267B92F40);
  }
  unint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    long long v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B92F38, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D0D0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "usdGeom/points.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdGeomPoints pxrInternal__aapl__pxrReserved__::UsdGeomPoints::Define(const UsdStageP"
                            "tr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D0D0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F3923C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92F50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92F50))
  {
    __cxa_guard_release(&qword_267B92F50);
  }
  return &qword_267B92F48;
}

void sub_216F392E4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92F60, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomPoints *)__cxa_guard_acquire(&qword_267B92F60);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_GetStaticTfType(v2);
      byte_267B92F58 = sub_216D16508((char *)&qword_267B92F48, v3, v4);
      __cxa_guard_release(&qword_267B92F60);
    }
  }
  return byte_267B92F58;
}

void sub_216F39364(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  return &qword_267B92F48;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetWidthsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  float64x2_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    float64x2_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1312), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F3943C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::CreateWidthsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1312), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetIdsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  float64x2_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    float64x2_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 448), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F395A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::CreateIdsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 448), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 488), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92F80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92F80))
  {
    float64x2_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      float64x2_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v4 = *((void *)v3 + 164);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      unint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6) {
      int v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 56);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B92F68, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B92F68, &dword_216758000);
    __cxa_guard_release(&qword_267B92F80);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92FA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92FA0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)1);
    sub_216F398C4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B92F88, &dword_216758000);
    __cxa_guard_release(&qword_267B92FA0);
  }
  if (v1) {
    return &qword_267B92F88;
  }
  else {
    return &qword_267B92F68;
  }
}

void sub_216F3984C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B92F80);
  _Unwind_Resume(a1);
}

void *sub_216F398C4(uint64_t **a1)
{
  qword_267B92F90 = 0;
  unk_267B92F98 = 0;
  qword_267B92F88 = 0;
  sub_216973388((char **)&qword_267B92F88, ((*(void *)algn_267B92F70 - qword_267B92F68) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B92F88, (void *)qword_267B92F90, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B92F88, (void *)qword_267B92F90, (uint64_t *)qword_267B92F68, *(uint64_t **)algn_267B92F70, (*(void *)algn_267B92F70 - qword_267B92F68) >> 3);
}

void sub_216F3995C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetWidthsInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this@<X0>, atomic_uint **a2@<X8>)
{
  char v13 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetWidthsAttr(this, (uint64_t)&v8);
  float64x2_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    float64x2_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v14 = 0;
  BOOL v4 = sub_216D1D1CC((uint64_t)&v8, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 488), (uint64_t)&v13, &v14);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
  if (v4)
  {
    *a2 = v13;
    char v13 = 0;
  }
  else
  {
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5) {
      unint64_t v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    int v6 = (atomic_uint *)*((void *)v5 + 153);
    *a2 = v6;
    if ((v6 & 7) != 0)
    {
      int v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v7;
      }
    }
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F39AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::SetWidthsInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsValidInterpolation(a2, a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetWidthsAttr(this, (uint64_t)v17);
    BOOL v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v4) {
      BOOL v4 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v10 = 0;
    sub_216D1CF30((uint64_t)v17, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v4 + 488));
  }
  v17[0] = "usdGeom/points.cpp";
  v17[1] = "SetWidthsInterpolation";
  v17[2] = 212;
  v17[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPoints::SetWidthsInterpolation(const TfToken &)";
  char v18 = 0;
  unint64_t v5 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    int v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0) {
      int v6 = *(const char **)v6;
    }
  }
  else
  {
    int v6 = "";
  }
  sub_216D16CFC((uint64_t)&v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216D0162C((uint64_t)&v10, &v15);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
  if (*((char *)String + 23) >= 0) {
    uint64_t v8 = (const char *)String;
  }
  else {
    uint64_t v8 = (const char *)*String;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to set invalid interpolation \"%s\" for widths attr on prim %s", v6, v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  return 0;
}

void sub_216F39CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_216D2EDA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::ComputeExtent(uint64_t *a1, void *a2, unint64_t *a3)
{
  return pxrInternal__aapl__pxrReserved__::UsdGeomPoints::ComputeExtent(a1, a2, 0, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::ComputeExtent(uint64_t *a1, void *a2, uint64_t a3, unint64_t *a4)
{
  if (*a1 != *a2) {
    return 0;
  }
  DWORD2(v92[0]) = 0;
  *(void *)&v92[0] = 0;
  v93[0] = (uint64_t *)v92;
  sub_2168FD278(a4, 2uLL, v93);
  uint64_t v10 = a2[4] + 4 * *a2;
  v97[0] = a2[4];
  v97[1] = v10;
  uint64_t v11 = *a1;
  uint64_t v12 = a1[4] + 12 * *a1;
  uint64_t v95 = a1[4];
  uint64_t v96 = v12;
  if (v11)
  {
    double v13 = 3.40282347e38;
    double v14 = -3.40282347e38;
    double v15 = -3.40282347e38;
    double v16 = -3.40282347e38;
    double v17 = 3.40282347e38;
    double v18 = 3.40282347e38;
    while (1)
    {
      double v90 = v18;
      float v21 = *(float *)sub_216F3A3FC(v97, v8, v9) * 0.5;
      if (a3)
      {
        uint64_t v94 = 0;
        memset(v93, 0, sizeof(v93));
        long long v22 = *(_OWORD *)(a3 + 80);
        v92[4] = *(_OWORD *)(a3 + 64);
        v92[5] = v22;
        long long v23 = *(_OWORD *)(a3 + 112);
        v92[6] = *(_OWORD *)(a3 + 96);
        v92[7] = v23;
        long long v24 = *(_OWORD *)(a3 + 16);
        v92[0] = *(_OWORD *)a3;
        v92[1] = v24;
        long long v25 = *(_OWORD *)(a3 + 48);
        v92[2] = *(_OWORD *)(a3 + 32);
        v92[3] = v25;
        memset(v91, 0, sizeof(v91));
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslateOnly((uint64_t)v92, (uint64_t)v91);
        if ((pxrInternal__aapl__pxrReserved__::UsdGeomSphere::ComputeExtent((const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v92, (unint64_t *)v93, v21) & 1) == 0)
        {
          sub_2168F83DC((uint64_t)v93);
          return 0;
        }
        uint64_t v28 = (float *)sub_216F3A47C(&v95, v26, v27);
        unsigned __int32 v29 = sub_216F2C3F8((float64x2_t *)a3, v28).u32[0];
        float v31 = v30;
        float v33 = v32;
        double v88 = v13;
        double v89 = v16;
        double v34 = v14;
        sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v93, v35, v36);
        double v86 = v17;
        double v87 = v15;
        float v37 = v94[1];
        float v84 = *v94;
        float v85 = *(float *)&v29;
        float v38 = v94[2];
        sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v93, v39, v40);
        float v41 = v94[3];
        float v42 = v94[4];
        float v43 = v94[5];
        sub_2168F83DC((uint64_t)v93);
        double v44 = (float)(v33 + v38);
        if (v34 >= v44) {
          double v45 = v34;
        }
        else {
          double v45 = (float)(v33 + v38);
        }
        double v46 = (float)(v33 + v43);
        if (v45 >= v46) {
          double v14 = v45;
        }
        else {
          double v14 = (float)(v33 + v43);
        }
        double v47 = (float)(v31 + v37);
        double v48 = v87;
        if (v87 < v47) {
          double v48 = (float)(v31 + v37);
        }
        double v49 = (float)(v31 + v42);
        if (v48 >= v49) {
          double v15 = v48;
        }
        else {
          double v15 = (float)(v31 + v42);
        }
        double v50 = (float)(v85 + v84);
        double v51 = v89;
        if (v89 < v50) {
          double v51 = (float)(v85 + v84);
        }
        double v52 = (float)(v85 + v41);
        if (v51 >= v52) {
          double v16 = v51;
        }
        else {
          double v16 = (float)(v85 + v41);
        }
        if (v88 <= v44) {
          double v44 = v88;
        }
        if (v44 <= v46) {
          double v13 = v44;
        }
        else {
          double v13 = (float)(v33 + v43);
        }
        double v53 = v86;
        if (v86 > v47) {
          double v53 = v47;
        }
        if (v53 <= v49) {
          double v17 = v53;
        }
        else {
          double v17 = v49;
        }
        double v54 = v90;
        if (v90 > v50) {
          double v54 = (float)(v85 + v84);
        }
        if (v54 <= v52) {
          double v18 = v54;
        }
        else {
          double v18 = v52;
        }
      }
      else
      {
        uint64_t v55 = (float *)sub_216F3A47C(&v95, v19, v20);
        double v58 = (float)(v21 + *v55);
        double v59 = (float)(v21 + v55[1]);
        double v60 = (float)(v21 + v55[2]);
        if (v90 <= v58) {
          double v61 = v90;
        }
        else {
          double v61 = (float)(v21 + *v55);
        }
        if (v17 <= v59) {
          double v62 = v17;
        }
        else {
          double v62 = (float)(v21 + v55[1]);
        }
        double v63 = v14;
        if (v13 <= v60) {
          double v64 = v13;
        }
        else {
          double v64 = (float)(v21 + v55[2]);
        }
        if (v16 < v58) {
          double v16 = (float)(v21 + *v55);
        }
        if (v15 >= v59) {
          double v65 = v15;
        }
        else {
          double v65 = (float)(v21 + v55[1]);
        }
        if (v63 >= v60) {
          double v66 = v63;
        }
        else {
          double v66 = (float)(v21 + v55[2]);
        }
        float64x2_t v67 = (float *)sub_216F3A47C(&v95, v56, v57);
        double v68 = (float)(*v67 - v21);
        double v69 = (float)(v67[1] - v21);
        double v70 = (float)(v67[2] - v21);
        if (v61 <= v68) {
          double v18 = v61;
        }
        else {
          double v18 = (float)(*v67 - v21);
        }
        if (v62 <= v69) {
          double v71 = v62;
        }
        else {
          double v71 = v69;
        }
        if (v64 <= v70) {
          double v13 = v64;
        }
        else {
          double v13 = v70;
        }
        if (v16 < v68) {
          double v16 = v68;
        }
        if (v65 >= v69) {
          double v72 = v65;
        }
        else {
          double v72 = v69;
        }
        double v17 = v71;
        if (v66 < v70) {
          double v14 = v70;
        }
        else {
          double v14 = v66;
        }
        double v15 = v72;
      }
      sub_216F3A57C(v97);
      sub_216F3A4FC(&v95);
      if (v95 == v96) {
        goto LABEL_75;
      }
    }
  }
  double v16 = -3.40282347e38;
  double v18 = 3.40282347e38;
  double v17 = 3.40282347e38;
  double v13 = 3.40282347e38;
  double v15 = -3.40282347e38;
  double v14 = -3.40282347e38;
LABEL_75:
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v8, v9);
  float64x2_t v76 = (float *)a4[4];
  float v73 = v18;
  *float64x2_t v76 = v73;
  float v74 = v17;
  v76[1] = v74;
  float v75 = v13;
  v76[2] = v75;
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v80, v81);
  uint64_t v82 = (float *)a4[4];
  float v77 = v16;
  v82[3] = v77;
  float v78 = v15;
  v82[4] = v78;
  float v79 = v14;
  v82[5] = v79;
  return 1;
}

void sub_216F3A0E4(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 192);
  _Unwind_Resume(a1);
}

void sub_216F3A114(uint64_t a1, const std::type_info *a2, char *a3)
{
  var8.__vftable = (std::type_info_vtbl *)sub_216F3A5FC;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetPointCount(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(a1, (uint64_t)v4);
  uint64_t v3 = 0;
  long long v1 = 0u;
  long long v2 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
}

void sub_216F3A1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t *sub_216F3A218()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F12A84((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F3A2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F3A344(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F3A3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F3A3FC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::VtArray<float"
            ">>::operator*() [T = const pxrInternal__aapl__pxrReserved__::VtArray<float>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216F3A474()
{
}

uint64_t sub_216F3A47C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::VtArray<pxrIn"
            "ternal__aapl__pxrReserved__::GfVec3f>>::operator*() [T = const pxrInternal__aapl__pxrReserved__::VtArray<pxr"
            "Internal__aapl__pxrReserved__::GfVec3f>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216F3A4F4()
{
}

void *sub_216F3A4FC(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::operator++() [T = const pxrInternal__aapl__pxrReserved"
            "__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 12;
  }
  return a1;
}

void *sub_216F3A57C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":VtArray<float>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::VtArray<float>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

uint64_t sub_216F3A5FC(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1)
{
  long long v1 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v7, a1);
  int v7 = &unk_26C76D0D0;
  if (v8 && (*(unsigned char *)(v8 + 57) & 8) == 0 && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v1) & 1) != 0
    || (*(void *)&long long v4 = "usdGeom/points.cpp",
        *((void *)&v4 + 1) = "_ComputeExtentForPoints",
        *(void *)&long long v5 = 293,
        *((void *)&v5 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtentForPoints(const UsdGeomBoundable &, "
                               "const UsdTimeCode &, const GfMatrix4d *, VtVec3fArray *)",
        LOBYTE(v6) = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v4, "pointsSchema", 0) & 1) != 0))
  {
    uint64_t v6 = 0;
    long long v4 = 0u;
    long long v5 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)&v7, (uint64_t)&v3);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::~UsdGeomPointBased((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)&v7);
  return 0;
}

void sub_216F3A818(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::~UsdGeomPointBased((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    atomic_store(0, (unsigned int *)(a1 + 40));
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = *(atomic_ullong **)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    if (v5) {
      sub_216D16E0C(v5);
    }
    sub_2169C487C((int *)(a1 + 16), (_DWORD *)(a2 + 16));
    sub_2169C48D4((int *)(a1 + 20), (_DWORD *)(a2 + 20));
    sub_2168D2318((void *)(a1 + 24), (void *)(a2 + 24));
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2);
  if (result)
  {
    uint64_t v4 = sub_216D563F8(this);
    return pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsValidPrimvarName(v4, v5);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsValidPrimvarName(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v2 = this;
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    long long v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    long long v3 = this;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(this);
  if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    uint64_t v6 = (const char *)EmptyString;
  }
  else {
    uint64_t v6 = (const char *)*EmptyString;
  }
  int v7 = *((char *)v3 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    size_t v8 = *((void *)v3 + 1);
  }
  size_t v9 = strlen(v6);
  if (v8 < v9) {
    return 0;
  }
  size_t v10 = v9;
  uint64_t v11 = v7 >= 0 ? (const char *)v3 : *(const char **)v3;
  uint64_t v12 = (uint64_t *)strncmp(v11, v6, v10);
  if (v12) {
    return 0;
  }
  if ((*(void *)v2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v14 = (*(void *)v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v12);
    unint64_t v14 = (unint64_t)v12;
  }
  double v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v12);
  if ((*((void *)v15 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v16 = (uint64_t *)((*((void *)v15 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  }
  if (*((char *)v16 + 23) >= 0) {
    double v17 = (const char *)v16;
  }
  else {
    double v17 = (const char *)*v16;
  }
  int v18 = *(char *)(v14 + 23);
  if (v18 >= 0) {
    size_t v19 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    size_t v19 = *(void *)(v14 + 8);
  }
  size_t v20 = strlen(v17);
  if (v19 < v20) {
    return 1;
  }
  unint64_t v21 = *(void *)v14;
  if (v18 >= 0) {
    unint64_t v21 = v14;
  }
  return strcmp((const char *)(v21 + v19 - v20), v17) != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)atomic_load((unint64_t *)&qword_267B92FA8);
  if (!v1)
  {
    uint64_t v1 = (char *)operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1, "primvars:", 0);
    long long v3 = v1 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 8, ":idFrom", 0);
    uint64_t v4 = v1 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 16, ":indices", 0);
    uint64_t v5 = *(void ***)v1;
    double v17 = v5;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (void **)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v6, 2u, memory_order_relaxed) & 1) == 0) {
        double v17 = v6;
      }
    }
    int v7 = (atomic_uint *)*v3;
    int v18 = v7;
    if ((v7 & 7) != 0)
    {
      size_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        int v18 = v8;
      }
    }
    size_t v9 = (atomic_uint *)*v4;
    size_t v19 = v9;
    if ((v9 & 7) != 0)
    {
      size_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
        size_t v19 = v10;
      }
    }
    *((void *)v1 + 3) = 0;
    *((void *)v1 + 4) = 0;
    *((void *)v1 + 5) = 0;
    uint64_t v11 = (char *)operator new(0x18uLL);
    uint64_t v12 = 0;
    *((void *)v1 + 3) = v11;
    *((void *)v1 + 4) = v11;
    *((void *)v1 + 5) = v11 + 24;
    do
    {
      unint64_t v13 = (unint64_t)(&v17)[v12];
      *(void *)&v11[v12 * 8] = v13;
      if ((v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v11[v12 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v12;
    }
    while (v12 != 3);
    *((void *)v1 + 4) = v11 + 24;
    for (uint64_t i = 2; i != -1; --i)
    {
      unint64_t v15 = (unint64_t)(&v17)[i];
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v16 = 0;
    atomic_compare_exchange_strong(&qword_267B92FA8, (unint64_t *)&v16, (unint64_t)v1);
    if (v16)
    {
      double v17 = (void **)(v1 + 24);
      sub_216889A04(&v17);
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v1 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v1);
      return atomic_load((unint64_t *)&qword_267B92FA8);
    }
  }
  return (unint64_t)v1;
}

void sub_216F3AE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v11);
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::StripPrimvarsName(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, atomic_uint **a2@<X8>)
{
  long long v3 = this;
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v5 = (const std::string *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    uint64_t v5 = (const std::string *)this;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(this);
  if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(v5, (uint64_t)EmptyString, &__p);
  if (v11)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  }
  else
  {
    size_t v8 = *(atomic_uint **)v3;
    *a2 = *(atomic_uint **)v3;
    if ((v8 & 7) != 0)
    {
      size_t v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v9;
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216F3AF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_IsNamespaced(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    unint64_t v2 = this;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(this);
  if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    uint64_t v5 = (const char *)EmptyString;
  }
  else {
    uint64_t v5 = (const char *)*EmptyString;
  }
  int v6 = *((char *)v2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)v2 + 23);
  }
  else {
    size_t v7 = *((void *)v2 + 1);
  }
  size_t v8 = strlen(v5);
  if (v7 < v8) {
    return 0;
  }
  size_t v10 = v8;
  if (v6 >= 0) {
    char v11 = (const char *)v2;
  }
  else {
    char v11 = *(const char **)v2;
  }
  return strncmp(v11, v5, v10) == 0;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3@<X8>)
{
  char v3 = (char)a2;
  *(void *)a3 = 0;
  BOOL IsNamespaced = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_IsNamespaced(this, a2);
  if (IsNamespaced)
  {
    sub_2168D2318(a3, this);
  }
  else
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsNamespaced);
    if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      size_t v9 = (const void **)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else
    {
      NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
      size_t v9 = (const void **)NamespacePrefix;
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v9, (const void **)EmptyString, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v19);
    uint64_t v11 = *(void *)a3;
    uint64_t v12 = *(void *)a3 & 7;
    if (&v19 == (uint64_t *)a3)
    {
      if (v12) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v12) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)a3 = v19;
      uint64_t v19 = 0;
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsValidPrimvarName(a3, v7))
  {
    if ((*(void *)a3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)a3 = 0;
    if ((v3 & 1) == 0)
    {
      __p[0] = "usdGeom/primvar.cpp";
      __p[1] = "_MakeNamespaced";
      uint64_t v16 = 126;
      double v17 = "static TfToken pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(const TfToken &, BOOL)";
      char v18 = 0;
      unint64_t v13 = *(void *)this & 0xFFFFFFFFFFFFFFF8;
      if (v13)
      {
        unint64_t v14 = (const char *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0) {
          unint64_t v14 = *(const char **)v14;
        }
      }
      else
      {
        unint64_t v14 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"%s is not a valid name for a Primvar, because it contains the reserved name \"indices\"", v14);
    }
  }
}

void sub_216F3B1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if ((*v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation@<X0>(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v4) {
    uint64_t v4 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v7 = 0;
  uint64_t result = sub_216D1D1CC((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v4 + 488), (uint64_t)a2, &v7);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((result & 1) == 0)
  {
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6) {
      int v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    return (uint64_t)sub_2168D2318(a2, (void *)v6 + 17);
  }
  return result;
}

void sub_216F3B2EC(_Unwind_Exception *a1)
{
  if ((*v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::HasAuthoredInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2) {
    unint64_t v2 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 488));
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsValidInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  char v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    char v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v3 + 17) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v4) {
    uint64_t v4 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v4 + 145) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v5) {
    uint64_t v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v5 + 153) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  int v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v6) {
    int v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 151) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7) {
    uint64_t v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  return (*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 40) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsValidInterpolation(a2, a2))
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v4) {
      uint64_t v4 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    v12[0] = 0;
    sub_216D1CF30((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v4 + 488));
  }
  v12[0] = "usdGeom/primvar.cpp";
  v12[1] = "SetInterpolation";
  v12[2] = 175;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation(const TfToken &)";
  char v13 = 0;
  unint64_t v5 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    int v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0) {
      int v6 = *(const char **)v6;
    }
  }
  else
  {
    int v6 = "";
  }
  sub_216D0162C((uint64_t)this, &v10);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  if (*((char *)String + 23) >= 0) {
    size_t v8 = (const char *)String;
  }
  else {
    size_t v8 = (const char *)*String;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to set invalid primvar interpolation \"%s\" for attribute %s", v6, v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  return 0;
}

void sub_216F3B5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  unsigned int v4 = 1;
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2) {
    unint64_t v2 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v5 = 0;
  sub_21709B0D8((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 272), (uint64_t)&v4, &v5);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetElementSize(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, int a2)
{
  int v12 = a2;
  if (a2 > 0)
  {
    char v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      char v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    v10[0] = 0;
    sub_216F3F0B4((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 272));
  }
  v10[0] = "usdGeom/primvar.cpp";
  v10[1] = "SetElementSize";
  v10[2] = 197;
  void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetElementSize(int)";
  char v11 = 0;
  sub_216D0162C((uint64_t)this, &v8);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
  if (*((char *)String + 23) >= 0) {
    int v6 = (const char *)String;
  }
  else {
    int v6 = (const char *)*String;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to set elementSize to %d for attribute %s (must be a positive, non-zero value)", a2, v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  return 0;
}

void sub_216F3B7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::HasAuthoredElementSize(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2) {
    unint64_t v2 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 272));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetDeclarationInfo(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4, int *a5)
{
  if (!a2 || !a3 || !a4 || !a5)
  {
    v15[0] = "usdGeom/primvar.cpp";
    v15[1] = "GetDeclarationInfo";
    v15[2] = 215;
    v15[3] = "void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetDeclarationInfo(TfToken *, SdfValueTypeName *, Tf"
             "Token *, int *) const";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "name && typeName && interpolation && elementSize", 0);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetPrimvarName(this, v15);
  uint64_t v10 = *(void *)a2;
  uint64_t v11 = *(void *)a2 & 7;
  if (v15 == (void *)a2)
  {
    if (v11) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (v11) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)a2 = v15[0];
  }
  *(void *)a3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation(this, v15);
  uint64_t v12 = *(void *)a4;
  uint64_t v13 = *(void *)a4 & 7;
  if (v15 == (void *)a4)
  {
    if (v13) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (v13) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)a4 = v15[0];
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize(this);
  *a5 = result;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetPrimvarName(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, void *a2@<X8>)
{
  EmptyString = sub_216D563F8(this);
  if ((*(void *)EmptyString & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unsigned int v4 = (const std::string *)((*(void *)EmptyString & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    unsigned int v4 = (const std::string *)EmptyString;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(EmptyString);
  if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v6 = (uint64_t *)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    int v6 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(v4, (uint64_t)v6, &__p);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  }
  else {
    *a2 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216F3BA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  EmptyString = sub_216D563F8(this);
  if ((*(void *)EmptyString & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v7 = (const void **)((*(void *)EmptyString & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v7 = (const void **)EmptyString;
  }
  NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(EmptyString);
  if ((*((void *)NamespacePrefix + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v9 = (uint64_t *)((*((void *)NamespacePrefix + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    int v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v7, (const void **)v9, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v18);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  uint64_t v10 = (uint64_t *)((char *)this + 8);
  uint64_t v11 = (_DWORD *)((char *)this + 16);
  if (a2)
  {
    sub_216D16CFC((uint64_t)&__p, v10, v11);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v12) {
      uint64_t v12 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)&__p, &v18, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v12 + 464), 0, 0, a3);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    sub_216D16CFC((uint64_t)&__p, v10, v11);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18, a3);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F3BBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, uint64_t a2@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::CreateIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, uint64_t a2@<X8>)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIndices(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1)
{
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(a1, 1, (uint64_t)v6);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
  }
  v6[0] = "usdGeom/primvar.cpp";
  v6[1] = "SetIndices";
  v6[2] = 262;
  v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIndices(const VtIntArray &, UsdTimeCode) const";
  char v7 = 0;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (atomic_uint **)&v5);
  unint64_t v2 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    char v3 = (const char *)(v2 + 16);
    if (*(char *)(v2 + 39) < 0) {
      char v3 = *(const char **)v3;
    }
  }
  else
  {
    char v3 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Setting indices on non-array valued primvar of type '%s'.", v3);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 0;
}

void sub_216F3BD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::BlockIndices(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::IsArray((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(this, 1, (uint64_t)&v6);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Block((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v6, v2);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
    sub_21697C414(&v8);
    if (v7) {
      sub_216D16E0C(v7);
    }
  }
  else
  {
    int v6 = "usdGeom/primvar.cpp";
    char v7 = (atomic_ullong *)"BlockIndices";
    uint64_t v8 = 277;
    unint64_t v9 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::BlockIndices() const";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (atomic_uint **)&v5);
    unint64_t v3 = v5 & 0xFFFFFFFFFFFFFFF8;
    if ((v5 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      unsigned int v4 = (const char *)(v3 + 16);
      if (*(char *)(v3 + 39) < 0) {
        unsigned int v4 = *(const char **)v4;
      }
    }
    else
    {
      unsigned int v4 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Setting indices on non-array valued primvar of type '%s'.", v4);
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_216F3BEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(a1, 0, (uint64_t)&v3);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v3, v1))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>(); {
  if ((v7 & 7) != 0)
  }
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return 0;
}

void sub_216F3BFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(this, 0, (uint64_t)&v3);
  BOOL HasAuthoredValue = pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return HasAuthoredValue;
}

void sub_216F3C030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetUnauthoredValuesIndex(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2) {
    unint64_t v2 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  sub_216F3F0B4((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 1152));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetUnauthoredValuesIndex(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  unsigned int v4 = -1;
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2) {
    unint64_t v2 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v5 = 0;
  sub_21709B0D8((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 1152), (uint64_t)&v4, &v5);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v4;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, void *a2, double a3)
{
  v27[2] = *MEMORY[0x263EF8340];
  v27[1] = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<pxrInternal__aapl__pxrReserved__::VtValue>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v27, a3))
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued((pxrInternal__aapl__pxrReserved__::VtValue *)v27)
      && pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed(a1))
    {
      uint64_t v26 = 0;
      memset(v25, 0, sizeof(v25));
      if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices(a1))
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t ElementSize = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize(a1);
        BOOL v7 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v27, (unint64_t *)v25, ElementSize, (uint64_t)&v17);
        uint64_t v8 = HIBYTE(v19);
        char v9 = HIBYTE(v19);
        if (v19 < 0) {
          uint64_t v8 = v18;
        }
        if (v8)
        {
          uint64_t v20 = "usdGeom/primvar.cpp";
          unint64_t v21 = "ComputeFlattened";
          uint64_t v22 = 365;
          long long v23 = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(VtValue *, UsdTimeCode) const";
          char v24 = 0;
          pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, a1, v6);
          if (v16 >= 0) {
            uint64_t v11 = __p;
          }
          else {
            uint64_t v11 = (void **)__p[0];
          }
          uint64_t v12 = &v17;
          if (v19 < 0) {
            uint64_t v12 = v17;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v20, (pxrInternal__aapl__pxrReserved__ *)"For primvar %s: %s", v10, v11, v12);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
          char v9 = HIBYTE(v19);
        }
        if (v9 < 0) {
          operator delete(v17);
        }
      }
      else
      {
        uint64_t v20 = "usdGeom/primvar.cpp";
        unint64_t v21 = "ComputeFlattened";
        uint64_t v22 = 357;
        long long v23 = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(VtValue *, UsdTimeCode) const";
        char v24 = 0;
        sub_216D0162C((uint64_t)a1, (int *)&v17);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"No indices authored for indexed primvar <%s>.", Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
        sub_21697C414(&v17);
        BOOL v7 = 0;
      }
      sub_2168F83DC((uint64_t)v25);
    }
    else
    {
      *((void *)&v25[0] + 1) = 0;
      sub_21697DC0C(v25, v27);
      sub_2168ED33C(a2, v25);
      sub_2168EE084((uint64_t)v25);
      BOOL v7 = 1;
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  sub_2168EE084((uint64_t)v27);
  return v7;
}

void sub_216F3C3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_2168F83DC((uint64_t)&a29);
  sub_2168EE084(v29 - 72);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<pxrInternal__aapl__pxrReserved__::VtValue>(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeIdTargetPossibility(a1, a2)) {
    goto LABEL_19;
  }
  uint64_t TypeName = (void *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  BOOL v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7) {
    BOOL v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&TypeName, (void **)v7 + 10))
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v16 = 0;
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<std::string>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p);
    if (v8)
    {
      uint64_t v20 = &off_26C750BB8;
      sub_21691B31C(&v19, (uint64_t)__p);
      sub_2168ED33C(a2, &v19);
      sub_2168EE084((uint64_t)&v19);
    }
    if (SBYTE7(v16) < 0) {
      operator delete(__p[0]);
    }
    return v8;
  }
  char v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    char v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&TypeName, (void **)v9 + 67))
  {
LABEL_19:
    v6.n128_f64[0] = a3;
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::Get((uint64_t)a1, a2, v6);
  }
  uint64_t v17 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v16 = 0u;
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p);
  if (v8)
  {
    uint64_t v20 = off_26C7558C0;
    char v10 = operator new(0x30uLL);
    long long v11 = v16;
    *(_OWORD *)char v10 = *(_OWORD *)__p;
    *((_OWORD *)v10 + 1) = v11;
    uint64_t v12 = v17;
    *((void *)v10 + 4) = v17;
    if (v12)
    {
      uint64_t v13 = (atomic_ullong *)(v12 - 16);
      if (*((void *)v10 + 3)) {
        uint64_t v13 = (atomic_ullong *)*((void *)v10 + 3);
      }
      atomic_fetch_add_explicit(v13, 1uLL, memory_order_relaxed);
    }
    atomic_store(0, (unsigned int *)v10 + 10);
    uint64_t v19 = (unsigned int *)v10;
    atomic_fetch_add_explicit((atomic_uint *volatile)v10 + 10, 1u, memory_order_relaxed);
    sub_2168ED33C(a2, &v19);
    sub_2168EE084((uint64_t)&v19);
  }
  sub_2169B1EE4(__p);
  return v8;
}

void sub_216F3C628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *this, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this))
  {
    if ((sub_216F3CAE8(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3CC08(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3CD28(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3CE48(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3CF68(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3D088(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3D1A8(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3D2C8(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3D3E8(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3D508(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3D628(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3D748(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3D868(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3D988(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3DAA8(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3DBC8(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3DCE8(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3DE08(this, a3, a4, a1, (std::string *)a5) & 1) == 0
      && (sub_216F3DF28(this, a3, a4, a1, (std::string *)a5) & 1) == 0)
    {
      char v10 = sub_216F3E048(this, a3, a4, a1, (std::string *)a5);
      if (a5)
      {
        if ((v10 & 1) == 0)
        {
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(this, v11, v12, (uint64_t)__p);
          if (v27 >= 0) {
            int v15 = __p;
          }
          else {
            int v15 = (void **)__p[0];
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported indexed primvar value type %s.", v13, v14, v15);
          if (SHIBYTE(v27) < 0) {
            operator delete(__p[0]);
          }
          if (*(char *)(a5 + 23) < 0) {
            uint64_t v16 = *(void *)(a5 + 8);
          }
          else {
            uint64_t v16 = *(unsigned __int8 *)(a5 + 23);
          }
          if (v16)
          {
            if (*(char *)(a5 + 23) >= 0) {
              size_t v18 = *(unsigned __int8 *)(a5 + 23);
            }
            else {
              size_t v18 = *(void *)(a5 + 8);
            }
            uint64_t v19 = &v25;
            sub_2167940B4((uint64_t)&v25, v18 + 1);
            if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
            }
            if (v18)
            {
              if (*(char *)(a5 + 23) >= 0) {
                uint64_t v20 = (const void *)a5;
              }
              else {
                uint64_t v20 = *(const void **)a5;
              }
              memmove(v19, v20, v18);
            }
            *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v18) = 10;
            if (v29 >= 0) {
              uint64_t v21 = v28;
            }
            else {
              uint64_t v21 = (void **)v28[0];
            }
            if (v29 >= 0) {
              std::string::size_type v22 = HIBYTE(v29);
            }
            else {
              std::string::size_type v22 = (std::string::size_type)v28[1];
            }
            long long v23 = std::string::append(&v25, (const std::string::value_type *)v21, v22);
            long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            int64_t v27 = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
          }
          else if (SHIBYTE(v29) < 0)
          {
            sub_216778F24(__p, v28[0], (unint64_t)v28[1]);
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)v28;
            int64_t v27 = v29;
          }
          if (*(char *)(a5 + 23) < 0) {
            operator delete(*(void **)a5);
          }
          *(_OWORD *)a5 = *(_OWORD *)__p;
          *(void *)(a5 + 16) = v27;
          HIBYTE(v27) = 0;
          LOBYTE(__p[0]) = 0;
          if (v16 && SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v25.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v29) < 0) {
            operator delete(v28[0]);
          }
        }
      }
    }
    return a1[1] != 0;
  }
  else
  {
    sub_2168EC6DC(a1, this);
    return 1;
  }
}

void sub_216F3CA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, unint64_t *a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ComputeFlattened(a1, a2, a3, 1, a4);
}

uint64_t sub_216F3CAE8(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2168FAEA0(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F3F154(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_2168FA9D0(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3CBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3CC08(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2168FC5B0(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F3F5A0(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_2168FC1B8(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3CCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3CD28(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_216B90610(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F3F9E8(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_216F3FE34(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3CE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3CE48(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2168FAA14(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F3FE78(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_2168FB574(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3CF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3CF68(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2168FD6AC(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F402C4(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_2168FD160(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3D058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3D088(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2168FEEE8(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F40728(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_2168FEA70(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3D178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3D1A8(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_216B91028(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F40B8C(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_216F40FF0(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3D298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3D2C8(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2168FD1A4(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F41034(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_2168FDD38(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3D3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3D3E8(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2168FFE70(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F4149C(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_2168FF9A4(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3D4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3D508(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2169015F0(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F418E4(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_2169011E4(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3D5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3D628(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_216B91B74(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F41D38(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_216F42180(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3D718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3D748(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2168FF9E8(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F421C4(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_21690058C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3D868(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_216B8F888(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F42610(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_216F42A90(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3D958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3D988(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2169026B0(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F42AD4(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_216902130(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3DA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3DAA8(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_216998044(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F42F54(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_216F433A0(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2169B1EE4(v14);
  }
  return v10;
}

void sub_216F3DB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3DBC8(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2168F9F4C(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F433E4(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_2168F9B50(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3DCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3DCE8(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_216907880(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F43844(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_2169079C8(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3DDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3DE08(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2169062C0(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F43C90(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_216906D50(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3DEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3DF28(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2168F8860(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F440DC(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_2168F82C4(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3E018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F3E048(pxrInternal__aapl__pxrReserved__::VtValue *a1, unint64_t *a2, uint64_t a3, void *a4, std::string *a5)
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_2168F8308(a1);
  if (v10)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    uint64_t v11 = *((void *)a1 + 1);
    if ((v11 & 4) != 0) {
      uint64_t v12 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a1);
    else {
      uint64_t v12 = *(void **)a1;
    }
    if (sub_216F4453C(v12, a2, a3, v14[0].n128_u64, a5))
    {
      sub_2168F8FC4(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      sub_2168ED33C(a4, v16);
      sub_2168EE084((uint64_t)v16);
    }
    sub_2168F83DC((uint64_t)v14);
  }
  return v10;
}

void sub_216F3E138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(char **this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a4)
{
  *(_DWORD *)this = 3;
  this[1] = 0;
  uint64_t v8 = (int *)(this + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 5);
  this[3] = 0;
  this[4] = 0;
  char v9 = (unint64_t *)(this + 3);
  *((_DWORD *)this + 10) = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, v10) & 1) == 0)
  {
    uint64_t v15 = "usdGeom/primvar.cpp";
    uint64_t v16 = (atomic_ullong *)"UsdGeomPrimvar";
    uint64_t v17 = 435;
    unint64_t v18 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(const UsdPrim &, const TfTo"
                            "ken &, const SdfValueTypeName &)";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v15, "prim", 0);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a3, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v14);
  if (v14)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)a2, &v14, a4, 0, 0, (uint64_t)&v15);
    *(_DWORD *)this = v15;
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    uint64_t v12 = (atomic_ullong *)this[1];
    this[1] = (char *)v11;
    if (v12) {
      sub_216D16E0C(v12);
    }
    sub_21697DE94(v8, (int *)&v17);
    sub_21697DEEC((int *)this + 5, (int *)&v17 + 1);
    if (&v15 == this)
    {
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if ((*v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t *v9 = v18;
      unint64_t v18 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_21697C414(&v17);
    if (v16) {
      sub_216D16E0C(v16);
    }
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216F3E330(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D2EDA0(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIdTargetRel(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a3@<X8>)
{
  uint64_t v5 = (uint64_t *)((char *)this + 8);
  __n128 v6 = (_DWORD *)((char *)this + 16);
  BOOL v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)this + 32);
  if (a2)
  {
    sub_216D16CFC((uint64_t)&v8, v5, v6);
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, v7, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, a3);
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    sub_216D16CFC((uint64_t)&v8, v5, v6);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, v7, (uint64_t)a3);
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
}

void sub_216F3E45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIdTarget(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeIdTargetPossibility(this, a2)
    || !*((void *)this + 4))
  {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIdTargetRel(this, 0, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v6);
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v6, v3);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  return IsDefined;
}

void sub_216F3E514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeIdTargetPossibility(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  unsigned int v3 = atomic_load((unsigned int *)this + 10);
  if (v3 || (atomic_compare_exchange_strong((atomic_uint *volatile)this + 10, &v3, 1u), v3))
  {
    while (v3 == 1)
    {
      sched_yield();
      unsigned int v3 = atomic_load((unsigned int *)this + 10);
    }
  }
  else if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2))
  {
    uint64_t TypeName = (void *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
    unsigned int v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v4) {
      unsigned int v4 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&TypeName, (void **)v4 + 10)) {
      goto LABEL_10;
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v5) {
      uint64_t v5 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(&TypeName, (void **)v5 + 67))
    {
LABEL_10:
      uint64_t v6 = sub_216D563F8(this);
      if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (char *)((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      if (EmptyString[23] < 0)
      {
        EmptyString = (char *)sub_216778F24(&__dst, *(void **)EmptyString, *((void *)EmptyString + 1));
      }
      else
      {
        long long v9 = *(_OWORD *)EmptyString;
        __dst.__r_.__value_.__r.__words[2] = *((void *)EmptyString + 2);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v9;
      }
      unint64_t v10 = *(void *)(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)EmptyString)
                      + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v10)
      {
        int v11 = (const char *)(v10 + 16);
        if (*(char *)(v10 + 39) < 0) {
          int v11 = *(const char **)v11;
        }
      }
      else
      {
        int v11 = "";
      }
      std::string::append(&__dst, v11);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13);
      uint64_t v12 = (void *)((char *)this + 32);
      if (&v13 == (uint64_t *)((char *)this + 32))
      {
        if ((v13 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if ((*v12 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *uint64_t v12 = v13;
      }
      atomic_store(3u, (unsigned int *)this + 10);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      unsigned int v3 = 3;
    }
    else
    {
      unsigned int v3 = 2;
      atomic_store(2u, (unsigned int *)this + 10);
    }
  }
  else
  {
    unsigned int v3 = 0;
    atomic_store(2u, (unsigned int *)this + 10);
  }
  return v3 == 3;
}

void sub_216F3E714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIdTarget(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t v2 = (uint64_t *)a2;
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeIdTargetPossibility(this, a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIdTargetRel(this, 1, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v12);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v12, v4))
    {
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v2)) {
        unint64_t v2 = sub_216D2F758((uint64_t)this);
      }
      uint64_t v10 = sub_216981B30((uint64_t *)&v9, v2);
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v12, (pxrInternal__aapl__pxrReserved__::SdfPath **)&v9);
      uint64_t TypeName = (void **)&v9;
      sub_216981168(&TypeName);
    }
    else
    {
      uint64_t v7 = 0;
    }
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
    sub_21697C414(&v14);
    if (v13) {
      sub_216D16E0C(v13);
    }
  }
  else
  {
    uint64_t v12 = "usdGeom/primvar.cpp";
    uint64_t v13 = (atomic_ullong *)"SetIdTarget";
    uint64_t v14 = 474;
    unint64_t v15 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIdTarget(const SdfPath &) const";
    char v16 = 0;
    uint64_t TypeName = (void **)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (atomic_uint **)&v9);
    unint64_t v5 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v6 = (const char *)(v5 + 16);
      if (*(char *)(v5 + 39) < 0) {
        uint64_t v6 = *(const char **)v6;
      }
    }
    else
    {
      uint64_t v6 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Can only set ID Target for string or string[] typed primvars (primvar type is '%s')", v6);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    return 0;
  }
  return v7;
}

void sub_216F3E8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<std::string>(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeIdTargetPossibility(a1, a2)) {
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIdTargetRel(a1, 0, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v13);
  int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v13, v5);
  char v7 = IsDefined;
  if (IsDefined)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)v13, (uint64_t *)&v10)&& v11 - (void)v10 == 8)
    {
      String = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v10);
      std::string::operator=((std::string *)a2, String);
      char v2 = 1;
    }
    else
    {
      char v2 = 0;
    }
    unint64_t v18 = &v10;
    sub_216981168((void ***)&v18);
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  if ((v7 & 1) == 0) {
LABEL_13:
  }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>();
  return v2 & 1;
}

void sub_216F3EA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216981168((void ***)va1);
  sub_216D33F64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeIdTargetPossibility(a1, a2)) {
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIdTargetRel(a1, 0, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v13);
  int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v13, v5);
  char v7 = IsDefined;
  if (IsDefined)
  {
    sub_2169B1FA0(a2);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)v13, (uint64_t *)&v10)&& (unint64_t)(v11 - (void)v10) >= 9)
    {
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v10);
      sub_216F44988((uint64_t)a2, (long long *)String);
      char v2 = 1;
    }
    else
    {
      char v2 = 0;
    }
    unint64_t v18 = &v10;
    sub_216981168((void ***)&v18);
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  if ((v7 & 1) == 0) {
LABEL_13:
  }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>();
  return v2 & 1;
}

void sub_216F3EBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_216981168((void ***)va1);
  sub_216D33F64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetTimeSamples(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = 0xFFF0000000000000;
  char v4 = 0;
  uint64_t v5 = 0x7FF0000000000000;
  char v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetTimeSamplesInInterval(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetTimeSamplesInInterval(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a1)) {
    goto LABEL_24;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a1, 0, (uint64_t)&v19);
  int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v19, v7);
  char v9 = IsDefined;
  if (IsDefined)
  {
    int v26 = *(_DWORD *)a1;
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v27 = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 48), 1uLL, memory_order_relaxed);
    }
    sub_216981010(&v28, (_DWORD *)(a1 + 16));
    sub_21698105C(&v29, (_DWORD *)(a1 + 20));
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v30 = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v31 = v19;
    float v32 = v20;
    if (v20) {
      atomic_fetch_add_explicit(v20 + 6, 1uLL, memory_order_relaxed);
    }
    sub_216981010(&v33, &v21);
    sub_21698105C(&v34, &v22);
    uint64_t v35 = v23;
    if ((v23 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v16 = 0;
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    long long v24 = &v16;
    char v25 = 0;
    int v16 = (pxrInternal__aapl__pxrReserved__::UsdObject *)operator new(0x40uLL);
    uint64_t v17 = v16;
    unint64_t v18 = (char *)v16 + 64;
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdObject *)sub_216F44B2C((uint64_t)&v18, (uint64_t)&v26, (uint64_t)&v36, (uint64_t)v16);
    char UnionedTimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetUnionedTimeSamplesInInterval(&v16, a2, a3);
    long long v24 = &v16;
    sub_216D6CFF8((void ***)&v24);
    for (uint64_t i = 0; i != -8; i -= 4)
    {
      uint64_t v13 = *(uint64_t *)((char *)&v35 + i * 8);
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((int *)((char *)&v34 + i * 8));
      sub_21697C414((int *)((char *)&v33 + i * 8));
      uint64_t v14 = (&v32)[i];
      if (v14) {
        sub_216D16E0C(v14);
      }
    }
  }
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v20) {
    sub_216D16E0C(v20);
  }
  if ((v9 & 1) == 0) {
LABEL_24:
  }
    char UnionedTimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamplesInInterval(a1, a2, a3);
  return UnionedTimeSamplesInInterval & 1;
}

void sub_216F3EE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, char a18)
{
  sub_216D6CFF8(&a16);
  for (uint64_t i = 32; i != -32; i -= 32)
    sub_216D2EDA0((uint64_t)(&a18 + i));
  sub_216D2EDA0((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::ValueMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed(this)) {
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying(this, v2);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetIndicesAttr(this, 0, (uint64_t)&v7);
  BOOL v5 = !pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v7, v3)|| !pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7, v4);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  return !v5 || pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying(this, v2);
}

void sub_216F3EFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::NameContainsNamespaces(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92FB8, memory_order_acquire) & 1) == 0)
  {
    BOOL v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)__cxa_guard_acquire(&qword_267B92FB8);
    if (v5)
    {
      NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(v5);
      if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
      }
      if (*((char *)EmptyString + 23) < 0) {
        uint64_t v8 = EmptyString[1];
      }
      else {
        uint64_t v8 = *((unsigned __int8 *)EmptyString + 23);
      }
      qword_267B92FB0 = v8;
      __cxa_guard_release(&qword_267B92FB8);
    }
  }
  char v2 = sub_216D563F8(this);
  if ((*(void *)v2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v3 = (const std::string *)((*(void *)v2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t v3 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  }
  return std::string::find(v3, 58, qword_267B92FB0) != -1;
}

void sub_216F3F09C(_Unwind_Exception *a1)
{
}

void sub_216F3F0B4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_216F3F154(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    double v62 = (void **)"usdGeom/primvar.h";
    double v63 = (uint64_t *)"_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec2f]";
    char v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  __p[0] = 0;
  double v62 = __p;
  sub_2168FAAE8(a4, v10, (uint64_t **)&v62);
  double v62 = 0;
  double v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    uint64_t v55 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v54 = v15;
    uint64_t v16 = 8 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v52 = v16;
    double v53 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          int v21 = v62;
          uint64_t v22 = ((char *)v63 - (char *)v62) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v64[0] - (void)v62;
          if ((uint64_t)(v64[0] - (void)v62) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)v64, v11);
            int v21 = v62;
            int v19 = v63;
          }
          else
          {
            char v25 = 0;
          }
          float v32 = (uint64_t *)&v25[8 * v22];
          *float v32 = v14;
          uint64_t v20 = v32 + 1;
          while (v19 != (uint64_t *)v21)
          {
            uint64_t v33 = *--v19;
            *--float v32 = v33;
          }
          double v62 = (void **)v32;
          double v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          uint64_t *v63 = v14;
          uint64_t v20 = v19 + 1;
        }
        uint64_t v17 = 0;
        double v63 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 8 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v54;
        do
        {
          uint64_t v31 = a1[4];
          sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(void *)(a4[4] + v29) = *(void *)(v31 + v28);
          v29 += 8;
          v28 += 8;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    int v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, ((char *)v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      int v34 = v62;
      unint64_t v37 = ((char *)v63 - (char *)v62) >> 3;
      if (v37 >= 5) {
        unint64_t v37 = 5;
      }
      if (v37)
      {
        unint64_t v38 = 0;
        uint64_t v39 = 8 * v37;
        while (1)
        {
          uint64_t v40 = (uint64_t)v62[v38 / 8];
          uint64_t v41 = *(unsigned int *)(a2[4] + 4 * v40);
          uint64_t v42 = (v41 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            double v45 = v58;
            BOOL v46 = v59 < 0;
            double v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            double v45 = (void **)v56;
            BOOL v46 = v57 < 0;
            double v47 = &v56;
          }
          if (v46) {
            double v47 = v45;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0) {
            double v48 = __p;
          }
          else {
            double v48 = (void **)__p[0];
          }
          if (v61 >= 0) {
            std::string::size_type v49 = HIBYTE(v61);
          }
          else {
            std::string::size_type v49 = (std::string::size_type)__p[1];
          }
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v59 < 0)
            {
              double v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            double v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            int v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      double v63 = (uint64_t *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F3F528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F3F5A0(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    double v62 = "usdGeom/primvar.h";
    double v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec2d]";
    char v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  double v62 = 0;
  double v63 = 0;
  __p[0] = &v62;
  sub_2168FC1FC(a4, v10, (_OWORD **)__p);
  double v62 = 0;
  double v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    uint64_t v55 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v54 = v15;
    uint64_t v16 = 16 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v52 = v16;
    double v53 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          int v21 = v62;
          uint64_t v22 = (v63 - v62) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v64[0] - (void)v62;
          if ((uint64_t)(v64[0] - (void)v62) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)v64, v11);
            int v21 = v62;
            int v19 = v63;
          }
          else
          {
            char v25 = 0;
          }
          float v32 = &v25[8 * v22];
          *(void *)float v32 = v14;
          uint64_t v20 = v32 + 8;
          while (v19 != v21)
          {
            uint64_t v33 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v32 - 1) = v33;
            v32 -= 8;
          }
          double v62 = v32;
          double v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)double v63 = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        double v63 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 16 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v54;
        do
        {
          uint64_t v31 = a1[4];
          sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_OWORD *)(a4[4] + v29) = *(_OWORD *)(v31 + v28);
          v29 += 16;
          v28 += 16;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    int v34 = v62;
    if (v55 && v62 != v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      int v34 = v62;
      unint64_t v37 = (v63 - v62) >> 3;
      if (v37 >= 5) {
        unint64_t v37 = 5;
      }
      if (v37)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 8 * v37;
        while (1)
        {
          uint64_t v40 = *(void *)&v62[v38];
          uint64_t v41 = *(unsigned int *)(a2[4] + 4 * v40);
          uint64_t v42 = (v41 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            double v45 = v58;
            BOOL v46 = v59 < 0;
            double v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            double v45 = (void **)v56;
            BOOL v46 = v57 < 0;
            double v47 = &v56;
          }
          if (v46) {
            double v47 = v45;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0) {
            double v48 = __p;
          }
          else {
            double v48 = (void **)__p[0];
          }
          if (v61 >= 0) {
            std::string::size_type v49 = HIBYTE(v61);
          }
          else {
            std::string::size_type v49 = (std::string::size_type)__p[1];
          }
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v59 < 0)
            {
              double v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            double v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            int v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      double v63 = v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F3F970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F3F9E8(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    double v62 = (void **)"usdGeom/primvar.h";
    double v63 = (uint64_t *)"_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec2i]";
    char v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  __p[0] = 0;
  double v62 = __p;
  sub_2169B99EC(a4, v10, (uint64_t **)&v62);
  double v62 = 0;
  double v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    uint64_t v55 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v54 = v15;
    uint64_t v16 = 8 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v52 = v16;
    double v53 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          int v21 = v62;
          uint64_t v22 = ((char *)v63 - (char *)v62) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v64[0] - (void)v62;
          if ((uint64_t)(v64[0] - (void)v62) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)v64, v11);
            int v21 = v62;
            int v19 = v63;
          }
          else
          {
            char v25 = 0;
          }
          float v32 = (uint64_t *)&v25[8 * v22];
          *float v32 = v14;
          uint64_t v20 = v32 + 1;
          while (v19 != (uint64_t *)v21)
          {
            uint64_t v33 = *--v19;
            *--float v32 = v33;
          }
          double v62 = (void **)v32;
          double v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          uint64_t *v63 = v14;
          uint64_t v20 = v19 + 1;
        }
        uint64_t v17 = 0;
        double v63 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 8 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v54;
        do
        {
          uint64_t v31 = a1[4];
          sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(void *)(a4[4] + v29) = *(void *)(v31 + v28);
          v29 += 8;
          v28 += 8;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    int v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, ((char *)v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      int v34 = v62;
      unint64_t v37 = ((char *)v63 - (char *)v62) >> 3;
      if (v37 >= 5) {
        unint64_t v37 = 5;
      }
      if (v37)
      {
        unint64_t v38 = 0;
        uint64_t v39 = 8 * v37;
        while (1)
        {
          uint64_t v40 = (uint64_t)v62[v38 / 8];
          uint64_t v41 = *(unsigned int *)(a2[4] + 4 * v40);
          uint64_t v42 = (v41 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            double v45 = v58;
            BOOL v46 = v59 < 0;
            double v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            double v45 = (void **)v56;
            BOOL v46 = v57 < 0;
            double v47 = &v56;
          }
          if (v46) {
            double v47 = v45;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0) {
            double v48 = __p;
          }
          else {
            double v48 = (void **)__p[0];
          }
          if (v61 >= 0) {
            std::string::size_type v49 = HIBYTE(v61);
          }
          else {
            std::string::size_type v49 = (std::string::size_type)__p[1];
          }
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v59 < 0)
            {
              double v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            double v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            int v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      double v63 = (uint64_t *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F3FDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

double sub_216F3FE34@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216B90404(a2, a1).n128_u64[0];
  return result;
}

void sub_216F3FE64(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216F3FE78(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    double v62 = (void **)"usdGeom/primvar.h";
    double v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec2h]";
    char v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  LODWORD(__p[0]) = 0;
  double v62 = __p;
  sub_2168FB654(a4, v10, (_DWORD **)&v62);
  double v62 = 0;
  double v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    uint64_t v55 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v54 = v15;
    uint64_t v16 = 4 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v52 = v16;
    double v53 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          int v21 = v62;
          uint64_t v22 = (v63 - (char *)v62) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v64[0] - (void)v62;
          if ((uint64_t)(v64[0] - (void)v62) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)v64, v11);
            int v21 = v62;
            int v19 = v63;
          }
          else
          {
            char v25 = 0;
          }
          float v32 = &v25[8 * v22];
          *(void *)float v32 = v14;
          uint64_t v20 = v32 + 8;
          while (v19 != (char *)v21)
          {
            uint64_t v33 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v32 - 1) = v33;
            v32 -= 8;
          }
          double v62 = (void **)v32;
          double v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)double v63 = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        double v63 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 4 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v54;
        do
        {
          uint64_t v31 = a1[4];
          sub_2168FB8BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_DWORD *)(a4[4] + v29) = *(_DWORD *)(v31 + v28);
          v29 += 4;
          v28 += 4;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    int v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      int v34 = v62;
      unint64_t v37 = (v63 - (char *)v62) >> 3;
      if (v37 >= 5) {
        unint64_t v37 = 5;
      }
      if (v37)
      {
        unint64_t v38 = 0;
        uint64_t v39 = 8 * v37;
        while (1)
        {
          uint64_t v40 = v62[v38 / 8];
          uint64_t v41 = *(unsigned int *)(a2[4] + 4 * (void)v40);
          uint64_t v42 = (v41 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            double v45 = v58;
            BOOL v46 = v59 < 0;
            double v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            double v45 = (void **)v56;
            BOOL v46 = v57 < 0;
            double v47 = &v56;
          }
          if (v46) {
            double v47 = v45;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0) {
            double v48 = __p;
          }
          else {
            double v48 = (void **)__p[0];
          }
          if (v61 >= 0) {
            std::string::size_type v49 = HIBYTE(v61);
          }
          else {
            std::string::size_type v49 = (std::string::size_type)__p[1];
          }
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v59 < 0)
            {
              double v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            double v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            int v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      double v63 = (char *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F4024C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F402C4(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    double v64 = "usdGeom/primvar.h";
    char v65 = "_ComputeFlattenedHelper";
    v66[0] = 862;
    v66[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec3f]";
    char v67 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v64, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  LODWORD(v65) = 0;
  double v64 = 0;
  __p[0] = &v64;
  sub_2168FD278(a4, v10, (uint64_t **)__p);
  double v64 = 0;
  char v65 = 0;
  v66[0] = 0;
  if (*a2)
  {
    char v57 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v56 = v15;
    uint64_t v16 = 12 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v54 = v16;
    uint64_t v55 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v65;
        if ((unint64_t)v65 >= v66[0])
        {
          int v21 = v64;
          uint64_t v22 = (v65 - v64) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v66[0] - (void)v64;
          if ((uint64_t)(v66[0] - (void)v64) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)v66, v11);
            int v21 = v64;
            int v19 = v65;
          }
          else
          {
            char v25 = 0;
          }
          int v34 = &v25[8 * v22];
          *(void *)int v34 = v14;
          uint64_t v20 = v34 + 8;
          while (v19 != v21)
          {
            uint64_t v35 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v34 - 1) = v35;
            v34 -= 8;
          }
          double v64 = v34;
          char v65 = v20;
          v66[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)char v65 = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        char v65 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 12 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v56;
        do
        {
          uint64_t v31 = a1[4];
          sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          uint64_t v32 = a4[4] + v29;
          uint64_t v33 = *(void *)(v31 + v28);
          *(_DWORD *)(v32 + 8) = *(_DWORD *)(v31 + v28 + 8);
          *(void *)uint64_t v32 = v33;
          v29 += 12;
          v28 += 12;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v54;
        a2 = v55;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    uint64_t v36 = v64;
    if (v57 && v64 != v65)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v65 - v64) >> 3, *a1, v7);
      if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v57->__r_.__value_.__r.__words[2] = v63;
      uint64_t v36 = v64;
      unint64_t v39 = (v65 - v64) >> 3;
      if (v39 >= 5) {
        unint64_t v39 = 5;
      }
      if (v39)
      {
        uint64_t v40 = 0;
        uint64_t v41 = 8 * v39;
        while (1)
        {
          uint64_t v42 = *(void *)&v64[v40];
          uint64_t v43 = *(unsigned int *)(a2[4] + 4 * v42);
          uint64_t v44 = (v43 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            double v47 = v60;
            BOOL v48 = v61 < 0;
            std::string::size_type v49 = (void **)&v60;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            double v47 = (void **)v58;
            BOOL v48 = v59 < 0;
            std::string::size_type v49 = &v58;
          }
          if (v48) {
            std::string::size_type v49 = v47;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v63 >= 0) {
            double v50 = __p;
          }
          else {
            double v50 = (void **)__p[0];
          }
          if (v63 >= 0) {
            std::string::size_type v51 = HIBYTE(v63);
          }
          else {
            std::string::size_type v51 = (std::string::size_type)__p[1];
          }
          std::string::append(v57, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v63) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v61 < 0)
            {
              uint64_t v52 = v60;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v59 < 0)
          {
            uint64_t v52 = v58;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            uint64_t v36 = v64;
            break;
          }
        }
      }
    }
    if (v36)
    {
      char v65 = v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F406B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F40728(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    double v64 = "usdGeom/primvar.h";
    char v65 = "_ComputeFlattenedHelper";
    v66[0] = 862;
    v66[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec3d]";
    char v67 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v64, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  double v64 = 0;
  char v65 = 0;
  v66[0] = 0;
  __p[0] = &v64;
  sub_2168FEAB4(a4, v10, (long long **)__p);
  double v64 = 0;
  char v65 = 0;
  v66[0] = 0;
  if (*a2)
  {
    char v57 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v56 = v15;
    uint64_t v16 = 24 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v54 = v16;
    uint64_t v55 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v65;
        if ((unint64_t)v65 >= v66[0])
        {
          int v21 = v64;
          uint64_t v22 = (v65 - v64) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v66[0] - (void)v64;
          if ((uint64_t)(v66[0] - (void)v64) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)v66, v11);
            int v21 = v64;
            int v19 = v65;
          }
          else
          {
            char v25 = 0;
          }
          int v34 = &v25[8 * v22];
          *(void *)int v34 = v14;
          uint64_t v20 = v34 + 8;
          while (v19 != v21)
          {
            uint64_t v35 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v34 - 1) = v35;
            v34 -= 8;
          }
          double v64 = v34;
          char v65 = v20;
          v66[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)char v65 = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        char v65 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 24 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v56;
        do
        {
          uint64_t v31 = a1[4];
          sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          uint64_t v32 = a4[4] + v29;
          long long v33 = *(_OWORD *)(v31 + v28);
          *(void *)(v32 + 16) = *(void *)(v31 + v28 + 16);
          *(_OWORD *)uint64_t v32 = v33;
          v29 += 24;
          v28 += 24;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v54;
        a2 = v55;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    uint64_t v36 = v64;
    if (v57 && v64 != v65)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v65 - v64) >> 3, *a1, v7);
      if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v57->__r_.__value_.__r.__words[2] = v63;
      uint64_t v36 = v64;
      unint64_t v39 = (v65 - v64) >> 3;
      if (v39 >= 5) {
        unint64_t v39 = 5;
      }
      if (v39)
      {
        uint64_t v40 = 0;
        uint64_t v41 = 8 * v39;
        while (1)
        {
          uint64_t v42 = *(void *)&v64[v40];
          uint64_t v43 = *(unsigned int *)(a2[4] + 4 * v42);
          uint64_t v44 = (v43 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            double v47 = v60;
            BOOL v48 = v61 < 0;
            std::string::size_type v49 = (void **)&v60;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            double v47 = (void **)v58;
            BOOL v48 = v59 < 0;
            std::string::size_type v49 = &v58;
          }
          if (v48) {
            std::string::size_type v49 = v47;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v63 >= 0) {
            double v50 = __p;
          }
          else {
            double v50 = (void **)__p[0];
          }
          if (v63 >= 0) {
            std::string::size_type v51 = HIBYTE(v63);
          }
          else {
            std::string::size_type v51 = (std::string::size_type)__p[1];
          }
          std::string::append(v57, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v63) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v61 < 0)
            {
              uint64_t v52 = v60;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v59 < 0)
          {
            uint64_t v52 = v58;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            uint64_t v36 = v64;
            break;
          }
        }
      }
    }
    if (v36)
    {
      char v65 = v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F40B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F40B8C(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    double v64 = "usdGeom/primvar.h";
    char v65 = "_ComputeFlattenedHelper";
    v66[0] = 862;
    v66[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec3i]";
    char v67 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v64, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  LODWORD(v65) = 0;
  double v64 = 0;
  __p[0] = &v64;
  sub_2169BB98C(a4, v10, (uint64_t **)__p);
  double v64 = 0;
  char v65 = 0;
  v66[0] = 0;
  if (*a2)
  {
    char v57 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v56 = v15;
    uint64_t v16 = 12 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v54 = v16;
    uint64_t v55 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v65;
        if ((unint64_t)v65 >= v66[0])
        {
          int v21 = v64;
          uint64_t v22 = (v65 - v64) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v66[0] - (void)v64;
          if ((uint64_t)(v66[0] - (void)v64) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)v66, v11);
            int v21 = v64;
            int v19 = v65;
          }
          else
          {
            char v25 = 0;
          }
          int v34 = &v25[8 * v22];
          *(void *)int v34 = v14;
          uint64_t v20 = v34 + 8;
          while (v19 != v21)
          {
            uint64_t v35 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v34 - 1) = v35;
            v34 -= 8;
          }
          double v64 = v34;
          char v65 = v20;
          v66[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)char v65 = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        char v65 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 12 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v56;
        do
        {
          uint64_t v31 = a1[4];
          sub_2169BBC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          uint64_t v32 = a4[4] + v29;
          uint64_t v33 = *(void *)(v31 + v28);
          *(_DWORD *)(v32 + 8) = *(_DWORD *)(v31 + v28 + 8);
          *(void *)uint64_t v32 = v33;
          v29 += 12;
          v28 += 12;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v54;
        a2 = v55;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    uint64_t v36 = v64;
    if (v57 && v64 != v65)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v65 - v64) >> 3, *a1, v7);
      if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v57->__r_.__value_.__r.__words[2] = v63;
      uint64_t v36 = v64;
      unint64_t v39 = (v65 - v64) >> 3;
      if (v39 >= 5) {
        unint64_t v39 = 5;
      }
      if (v39)
      {
        uint64_t v40 = 0;
        uint64_t v41 = 8 * v39;
        while (1)
        {
          uint64_t v42 = *(void *)&v64[v40];
          uint64_t v43 = *(unsigned int *)(a2[4] + 4 * v42);
          uint64_t v44 = (v43 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            double v47 = v60;
            BOOL v48 = v61 < 0;
            std::string::size_type v49 = (void **)&v60;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            double v47 = (void **)v58;
            BOOL v48 = v59 < 0;
            std::string::size_type v49 = &v58;
          }
          if (v48) {
            std::string::size_type v49 = v47;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v63 >= 0) {
            double v50 = __p;
          }
          else {
            double v50 = (void **)__p[0];
          }
          if (v63 >= 0) {
            std::string::size_type v51 = HIBYTE(v63);
          }
          else {
            std::string::size_type v51 = (std::string::size_type)__p[1];
          }
          std::string::append(v57, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v63) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v61 < 0)
            {
              uint64_t v52 = v60;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v59 < 0)
          {
            uint64_t v52 = v58;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            uint64_t v36 = v64;
            break;
          }
        }
      }
    }
    if (v36)
    {
      char v65 = v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F40F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

double sub_216F40FF0@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216B90D24(a2, a1).n128_u64[0];
  return result;
}

void sub_216F41020(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216F41034(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    double v64 = (void **)"usdGeom/primvar.h";
    char v65 = (int *)"_ComputeFlattenedHelper";
    v66[0] = 862;
    v66[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec3h]";
    char v67 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v64, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  WORD2(__p[0]) = 0;
  LODWORD(__p[0]) = 0;
  double v64 = __p;
  sub_2168FDE18(a4, v10, (int **)&v64);
  double v64 = 0;
  char v65 = 0;
  v66[0] = 0;
  if (*a2)
  {
    char v57 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v56 = v15;
    uint64_t v16 = 6 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v54 = v16;
    uint64_t v55 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v65;
        if ((unint64_t)v65 >= v66[0])
        {
          int v21 = v64;
          uint64_t v22 = ((char *)v65 - (char *)v64) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v66[0] - (void)v64;
          if ((uint64_t)(v66[0] - (void)v64) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)v66, v11);
            int v21 = v64;
            int v19 = v65;
          }
          else
          {
            char v25 = 0;
          }
          int v34 = (int *)&v25[8 * v22];
          *(void *)int v34 = v14;
          uint64_t v20 = v34 + 2;
          while (v19 != (int *)v21)
          {
            uint64_t v35 = *((void *)v19 - 1);
            v19 -= 2;
            *((void *)v34 - 1) = v35;
            v34 -= 2;
          }
          double v64 = (void **)v34;
          char v65 = v20;
          v66[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)char v65 = v14;
          uint64_t v20 = v19 + 2;
        }
        uint64_t v17 = 0;
        char v65 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 6 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v56;
        do
        {
          uint64_t v31 = a1[4];
          sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          uint64_t v32 = a4[4] + v29;
          int v33 = *(_DWORD *)(v31 + v28);
          *(_WORD *)(v32 + 4) = *(_WORD *)(v31 + v28 + 4);
          *(_DWORD *)uint64_t v32 = v33;
          v29 += 6;
          v28 += 6;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v54;
        a2 = v55;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    uint64_t v36 = v64;
    if (v57 && v64 != (void **)v65)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, ((char *)v65 - (char *)v64) >> 3, *a1, v7);
      if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v57->__r_.__value_.__r.__words[2] = v63;
      uint64_t v36 = v64;
      unint64_t v39 = ((char *)v65 - (char *)v64) >> 3;
      if (v39 >= 5) {
        unint64_t v39 = 5;
      }
      if (v39)
      {
        unint64_t v40 = 0;
        uint64_t v41 = 8 * v39;
        while (1)
        {
          uint64_t v42 = v64[v40 / 8];
          uint64_t v43 = *(unsigned int *)(a2[4] + 4 * (void)v42);
          uint64_t v44 = (v43 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            double v47 = v60;
            BOOL v48 = v61 < 0;
            std::string::size_type v49 = (void **)&v60;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            double v47 = (void **)v58;
            BOOL v48 = v59 < 0;
            std::string::size_type v49 = &v58;
          }
          if (v48) {
            std::string::size_type v49 = v47;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v63 >= 0) {
            double v50 = __p;
          }
          else {
            double v50 = (void **)__p[0];
          }
          if (v63 >= 0) {
            std::string::size_type v51 = HIBYTE(v63);
          }
          else {
            std::string::size_type v51 = (std::string::size_type)__p[1];
          }
          std::string::append(v57, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v63) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v61 < 0)
            {
              uint64_t v52 = v60;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v59 < 0)
          {
            uint64_t v52 = v58;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            uint64_t v36 = v64;
            break;
          }
        }
      }
    }
    if (v36)
    {
      char v65 = (int *)v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F41424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F4149C(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    double v62 = "usdGeom/primvar.h";
    int64_t v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec4f]";
    char v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  double v62 = 0;
  int64_t v63 = 0;
  __p[0] = &v62;
  sub_2168FFABC(a4, v10, (_OWORD **)__p);
  double v62 = 0;
  int64_t v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    uint64_t v55 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v54 = v15;
    uint64_t v16 = 16 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v52 = v16;
    double v53 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          int v21 = v62;
          uint64_t v22 = (v63 - v62) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v64[0] - (void)v62;
          if ((uint64_t)(v64[0] - (void)v62) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)v64, v11);
            int v21 = v62;
            int v19 = v63;
          }
          else
          {
            char v25 = 0;
          }
          uint64_t v32 = &v25[8 * v22];
          *(void *)uint64_t v32 = v14;
          uint64_t v20 = v32 + 8;
          while (v19 != v21)
          {
            uint64_t v33 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v32 - 1) = v33;
            v32 -= 8;
          }
          double v62 = v32;
          int64_t v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)int64_t v63 = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        int64_t v63 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 16 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v54;
        do
        {
          uint64_t v31 = a1[4];
          sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_OWORD *)(a4[4] + v29) = *(_OWORD *)(v31 + v28);
          v29 += 16;
          v28 += 16;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    int v34 = v62;
    if (v55 && v62 != v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      int v34 = v62;
      unint64_t v37 = (v63 - v62) >> 3;
      if (v37 >= 5) {
        unint64_t v37 = 5;
      }
      if (v37)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 8 * v37;
        while (1)
        {
          uint64_t v40 = *(void *)&v62[v38];
          uint64_t v41 = *(unsigned int *)(a2[4] + 4 * v40);
          uint64_t v42 = (v41 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            double v45 = v58;
            BOOL v46 = v59 < 0;
            double v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            double v45 = (void **)v56;
            BOOL v46 = v57 < 0;
            double v47 = &v56;
          }
          if (v46) {
            double v47 = v45;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0) {
            BOOL v48 = __p;
          }
          else {
            BOOL v48 = (void **)__p[0];
          }
          if (v61 >= 0) {
            std::string::size_type v49 = HIBYTE(v61);
          }
          else {
            std::string::size_type v49 = (std::string::size_type)__p[1];
          }
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v59 < 0)
            {
              double v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            double v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            int v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      int64_t v63 = v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F4186C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F418E4(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    *(void *)&long long v64 = "usdGeom/primvar.h";
    *((void *)&v64 + 1) = "_ComputeFlattenedHelper";
    *(void *)&long long v65 = 862;
    *((void *)&v65 + 1) = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const "
                            "VtArray<ScalarType> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [Scala"
                            "rType = pxrInternal__aapl__pxrReserved__::GfVec4d]";
    char v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v64, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  long long v64 = 0u;
  long long v65 = 0u;
  __p[0] = &v64;
  sub_216901228(a4, v10, (_OWORD **)__p);
  long long v64 = 0uLL;
  *(void *)&long long v65 = 0;
  if (*a2)
  {
    char v57 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v56 = v15;
    uint64_t v16 = 32 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v54 = v16;
    uint64_t v55 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = (char *)*((void *)&v64 + 1);
        if (*((void *)&v64 + 1) >= (unint64_t)v65)
        {
          int v21 = (char *)v64;
          uint64_t v22 = (uint64_t)(*((void *)&v64 + 1) - v64) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v65 - v64;
          if ((uint64_t)(v65 - v64) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)&v65, v11);
            int v19 = (char *)*((void *)&v64 + 1);
            int v21 = (char *)v64;
          }
          else
          {
            char v25 = 0;
          }
          int v34 = &v25[8 * v22];
          *(void *)int v34 = v14;
          uint64_t v20 = v34 + 8;
          while (v19 != v21)
          {
            uint64_t v35 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v34 - 1) = v35;
            v34 -= 8;
          }
          *(void *)&long long v64 = v34;
          *((void *)&v64 + 1) = v20;
          *(void *)&long long v65 = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          **((void **)&v64 + 1) = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        *((void *)&v64 + 1) = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 32 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v56;
        do
        {
          uint64_t v31 = a1[4];
          sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          uint64_t v32 = (_OWORD *)(a4[4] + v29);
          long long v33 = *(_OWORD *)(v31 + v28 + 16);
          *uint64_t v32 = *(_OWORD *)(v31 + v28);
          v32[1] = v33;
          v29 += 32;
          v28 += 32;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v54;
        a2 = v55;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    uint64_t v36 = (void *)v64;
    if (v57 && (void)v64 != *((void *)&v64 + 1))
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (uint64_t)(*((void *)&v64 + 1) - v64) >> 3, *a1, v7);
      if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v57->__r_.__value_.__r.__words[2] = v63;
      uint64_t v36 = (void *)v64;
      unint64_t v39 = (uint64_t)(*((void *)&v64 + 1) - v64) >> 3;
      if (v39 >= 5) {
        unint64_t v39 = 5;
      }
      if (v39)
      {
        uint64_t v40 = 0;
        uint64_t v41 = 8 * v39;
        while (1)
        {
          uint64_t v42 = *(void *)(v64 + v40);
          uint64_t v43 = *(unsigned int *)(a2[4] + 4 * v42);
          uint64_t v44 = (v43 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            double v47 = v60;
            BOOL v48 = v61 < 0;
            std::string::size_type v49 = (void **)&v60;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            double v47 = (void **)v58;
            BOOL v48 = v59 < 0;
            std::string::size_type v49 = &v58;
          }
          if (v48) {
            std::string::size_type v49 = v47;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v63 >= 0) {
            double v50 = __p;
          }
          else {
            double v50 = (void **)__p[0];
          }
          if (v63 >= 0) {
            std::string::size_type v51 = HIBYTE(v63);
          }
          else {
            std::string::size_type v51 = (std::string::size_type)__p[1];
          }
          std::string::append(v57, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v63) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v61 < 0)
            {
              uint64_t v52 = v60;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v59 < 0)
          {
            uint64_t v52 = v58;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            uint64_t v36 = (void *)v64;
            break;
          }
        }
      }
    }
    if (v36)
    {
      *((void *)&v64 + 1) = v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F41CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F41D38(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    double v62 = "usdGeom/primvar.h";
    int64_t v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec4i]";
    char v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  double v62 = 0;
  int64_t v63 = 0;
  __p[0] = &v62;
  sub_2169BDAC4(a4, v10, (_OWORD **)__p);
  double v62 = 0;
  int64_t v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    uint64_t v55 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v54 = v15;
    uint64_t v16 = 16 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v52 = v16;
    double v53 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          int v21 = v62;
          uint64_t v22 = (v63 - v62) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v64[0] - (void)v62;
          if ((uint64_t)(v64[0] - (void)v62) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)v64, v11);
            int v21 = v62;
            int v19 = v63;
          }
          else
          {
            char v25 = 0;
          }
          uint64_t v32 = &v25[8 * v22];
          *(void *)uint64_t v32 = v14;
          uint64_t v20 = v32 + 8;
          while (v19 != v21)
          {
            uint64_t v33 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v32 - 1) = v33;
            v32 -= 8;
          }
          double v62 = v32;
          int64_t v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)int64_t v63 = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        int64_t v63 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 16 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v54;
        do
        {
          uint64_t v31 = a1[4];
          sub_2169BDD28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_OWORD *)(a4[4] + v29) = *(_OWORD *)(v31 + v28);
          v29 += 16;
          v28 += 16;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    int v34 = v62;
    if (v55 && v62 != v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      int v34 = v62;
      unint64_t v37 = (v63 - v62) >> 3;
      if (v37 >= 5) {
        unint64_t v37 = 5;
      }
      if (v37)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 8 * v37;
        while (1)
        {
          uint64_t v40 = *(void *)&v62[v38];
          uint64_t v41 = *(unsigned int *)(a2[4] + 4 * v40);
          uint64_t v42 = (v41 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            double v45 = v58;
            BOOL v46 = v59 < 0;
            double v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            double v45 = (void **)v56;
            BOOL v46 = v57 < 0;
            double v47 = &v56;
          }
          if (v46) {
            double v47 = v45;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0) {
            BOOL v48 = __p;
          }
          else {
            BOOL v48 = (void **)__p[0];
          }
          if (v61 >= 0) {
            std::string::size_type v49 = HIBYTE(v61);
          }
          else {
            std::string::size_type v49 = (std::string::size_type)__p[1];
          }
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v59 < 0)
            {
              double v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            double v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            int v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      int64_t v63 = v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F42108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

double sub_216F42180@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216B91878(a2, a1).n128_u64[0];
  return result;
}

void sub_216F421B0(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216F421C4(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    double v62 = (void **)"usdGeom/primvar.h";
    int64_t v63 = (uint64_t *)"_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec4h]";
    char v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  __p[0] = 0;
  double v62 = __p;
  sub_21690066C(a4, v10, (uint64_t **)&v62);
  double v62 = 0;
  int64_t v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    uint64_t v55 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v54 = v15;
    uint64_t v16 = 8 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v52 = v16;
    double v53 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          int v21 = v62;
          uint64_t v22 = ((char *)v63 - (char *)v62) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v64[0] - (void)v62;
          if ((uint64_t)(v64[0] - (void)v62) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)v64, v11);
            int v21 = v62;
            int v19 = v63;
          }
          else
          {
            char v25 = 0;
          }
          uint64_t v32 = (uint64_t *)&v25[8 * v22];
          *uint64_t v32 = v14;
          uint64_t v20 = v32 + 1;
          while (v19 != (uint64_t *)v21)
          {
            uint64_t v33 = *--v19;
            *--uint64_t v32 = v33;
          }
          double v62 = (void **)v32;
          int64_t v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          uint64_t *v63 = v14;
          uint64_t v20 = v19 + 1;
        }
        uint64_t v17 = 0;
        int64_t v63 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 8 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v54;
        do
        {
          uint64_t v31 = a1[4];
          sub_2169008D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(void *)(a4[4] + v29) = *(void *)(v31 + v28);
          v29 += 8;
          v28 += 8;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    int v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, ((char *)v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      int v34 = v62;
      unint64_t v37 = ((char *)v63 - (char *)v62) >> 3;
      if (v37 >= 5) {
        unint64_t v37 = 5;
      }
      if (v37)
      {
        unint64_t v38 = 0;
        uint64_t v39 = 8 * v37;
        while (1)
        {
          uint64_t v40 = (uint64_t)v62[v38 / 8];
          uint64_t v41 = *(unsigned int *)(a2[4] + 4 * v40);
          uint64_t v42 = (v41 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            double v45 = v58;
            BOOL v46 = v59 < 0;
            double v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            double v45 = (void **)v56;
            BOOL v46 = v57 < 0;
            double v47 = &v56;
          }
          if (v46) {
            double v47 = v45;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0) {
            BOOL v48 = __p;
          }
          else {
            BOOL v48 = (void **)__p[0];
          }
          if (v61 >= 0) {
            std::string::size_type v49 = HIBYTE(v61);
          }
          else {
            std::string::size_type v49 = (std::string::size_type)__p[1];
          }
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v59 < 0)
            {
              double v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            double v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            int v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      int64_t v63 = (uint64_t *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F42598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F42610(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    __p[0] = "usdGeom/primvar.h";
    __p[1] = "_ComputeFlattenedHelper";
    *(void *)&long long v68 = 862;
    *((void *)&v68 + 1) = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const "
                            "VtArray<ScalarType> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [Scala"
                            "rType = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
    LOBYTE(v69) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  uint64_t v71 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v68 = 0u;
  v65[0] = __p;
  sub_2169C162C(a4, v10, (uint64_t *)v65);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v68 = 0;
  if (*a2)
  {
    double v60 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v59 = v15;
    uint64_t v16 = 72 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v57 = v16;
    double v58 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = (char *)__p[1];
        if (__p[1] >= (void *)v68)
        {
          int v21 = (char *)__p[0];
          int64_t v22 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v68 - (unint64_t)__p[0];
          if ((uint64_t)(v68 - (unint64_t)__p[0]) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)&v68, v11);
            int v21 = (char *)__p[0];
            int v19 = (char *)__p[1];
          }
          else
          {
            char v25 = 0;
          }
          unint64_t v37 = &v25[8 * v22];
          *(void *)unint64_t v37 = v14;
          uint64_t v20 = v37 + 8;
          while (v19 != v21)
          {
            uint64_t v38 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v37 - 1) = v38;
            v37 -= 8;
          }
          __p[0] = v37;
          __p[1] = v20;
          *(void *)&long long v68 = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)__p[1] = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        __p[1] = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v7;
        uint64_t v27 = v17;
        uint64_t v28 = v26;
        uint64_t v29 = 72 * v18 * (int)v26;
        uint64_t v30 = v13;
        uint64_t v31 = v59;
        do
        {
          uint64_t v32 = a1[4];
          sub_2169C195C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          uint64_t v33 = a4[4] + v30;
          *(_OWORD *)uint64_t v33 = *(_OWORD *)(v32 + v29);
          long long v34 = *(_OWORD *)(v32 + v29 + 16);
          long long v35 = *(_OWORD *)(v32 + v29 + 32);
          long long v36 = *(_OWORD *)(v32 + v29 + 48);
          *(void *)(v33 + 64) = *(void *)(v32 + v29 + 64);
          *(_OWORD *)(v33 + 32) = v35;
          *(_OWORD *)(v33 + 48) = v36;
          *(_OWORD *)(v33 + 16) = v34;
          v30 += 72;
          v29 += 72;
          --v31;
        }
        while (v31);
        uint64_t v17 = v27;
        uint64_t v7 = v28;
        uint64_t v16 = v57;
        a2 = v58;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    uint64_t v39 = __p[0];
    if (v60 && __p[0] != __p[1])
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, ((char *)__p[1] - (char *)__p[0]) >> 3, *a1, v7);
      if (SHIBYTE(v60->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v60->__r_.__value_.__l.__data_ = *(_OWORD *)v65;
      uint64_t v39 = __p[0];
      v60->__r_.__value_.__r.__words[2] = v66;
      unint64_t v42 = ((char *)__p[1] - (char *)v39) >> 3;
      if (v42 >= 5) {
        unint64_t v42 = 5;
      }
      if (v42)
      {
        uint64_t v43 = 0;
        uint64_t v44 = 8 * v42;
        while (1)
        {
          uint64_t v45 = *(void *)((char *)__p[0] + v43);
          uint64_t v46 = *(unsigned int *)(a2[4] + 4 * v45);
          uint64_t v47 = (v46 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v40, v41, v47);
            double v50 = v63;
            BOOL v51 = v64 < 0;
            uint64_t v52 = (void **)&v63;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v40, v41, (v46 * v7), (v7 - 1 + v47));
            double v50 = (void **)v61;
            BOOL v51 = v62 < 0;
            uint64_t v52 = &v61;
          }
          if (v51) {
            uint64_t v52 = v50;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v48, v49, v46, v45, v52);
          if (v66 >= 0) {
            double v53 = v65;
          }
          else {
            double v53 = (void **)v65[0];
          }
          if (v66 >= 0) {
            std::string::size_type v54 = HIBYTE(v66);
          }
          else {
            std::string::size_type v54 = (std::string::size_type)v65[1];
          }
          std::string::append(v60, (const std::string::value_type *)v53, v54);
          if (SHIBYTE(v66) < 0) {
            operator delete(v65[0]);
          }
          if (v7 == 1)
          {
            if (v64 < 0)
            {
              uint64_t v55 = v63;
LABEL_58:
              operator delete(v55);
            }
          }
          else if (v62 < 0)
          {
            uint64_t v55 = v61;
            goto LABEL_58;
          }
          v43 += 8;
          if (v44 == v43)
          {
            uint64_t v39 = __p[0];
            break;
          }
        }
      }
    }
    if (v39)
    {
      __p[1] = v39;
      operator delete(v39);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F42A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216F42A90@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216B8F6D4(a2, a1).n128_u64[0];
  return result;
}

void sub_216F42AC0(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216F42AD4(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    __p[0] = "usdGeom/primvar.h";
    __p[1] = "_ComputeFlattenedHelper";
    *(void *)&long long v71 = 862;
    *((void *)&v71 + 1) = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const "
                            "VtArray<ScalarType> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [Scala"
                            "rType = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v72) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v71 = 0u;
  v68[0] = __p;
  sub_216902248(a4, v10, (long long **)v68);
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v71 = 0;
  if (*a2)
  {
    int64_t v63 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v62 = v15;
    uint64_t v16 = (uint64_t)(int)v7 << 7;
    uint64_t v17 = 1;
    uint64_t v60 = v16;
    int64_t v61 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = (char *)__p[1];
        if (__p[1] >= (void *)v71)
        {
          int v21 = (char *)__p[0];
          int64_t v22 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v71 - (unint64_t)__p[0];
          if ((uint64_t)(v71 - (unint64_t)__p[0]) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            char v25 = (char *)sub_21677CB28((uint64_t)&v71, v11);
            int v21 = (char *)__p[0];
            int v19 = (char *)__p[1];
          }
          else
          {
            char v25 = 0;
          }
          uint64_t v40 = &v25[8 * v22];
          *(void *)uint64_t v40 = v14;
          uint64_t v20 = v40 + 8;
          while (v19 != v21)
          {
            uint64_t v41 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v40 - 1) = v41;
            v40 -= 8;
          }
          __p[0] = v40;
          __p[1] = v20;
          *(void *)&long long v71 = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)__p[1] = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        __p[1] = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v7;
        uint64_t v27 = v17;
        uint64_t v28 = v26;
        uint64_t v29 = (uint64_t)(v18 * (int)v26) << 7;
        uint64_t v30 = v13;
        uint64_t v31 = v62;
        do
        {
          uint64_t v32 = a1[4];
          sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          uint64_t v33 = (_OWORD *)(a4[4] + v30);
          long long v34 = *(_OWORD *)(v32 + v29);
          long long v35 = *(_OWORD *)(v32 + v29 + 16);
          long long v36 = *(_OWORD *)(v32 + v29 + 48);
          v33[2] = *(_OWORD *)(v32 + v29 + 32);
          v33[3] = v36;
          _OWORD *v33 = v34;
          v33[1] = v35;
          long long v37 = *(_OWORD *)(v32 + v29 + 64);
          long long v38 = *(_OWORD *)(v32 + v29 + 80);
          long long v39 = *(_OWORD *)(v32 + v29 + 112);
          v33[6] = *(_OWORD *)(v32 + v29 + 96);
          v33[7] = v39;
          v33[4] = v37;
          v33[5] = v38;
          v30 += 128;
          v29 += 128;
          --v31;
        }
        while (v31);
        uint64_t v17 = v27;
        uint64_t v7 = v28;
        uint64_t v16 = v60;
        a2 = v61;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    unint64_t v42 = __p[0];
    if (v63 && __p[0] != __p[1])
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, ((char *)__p[1] - (char *)__p[0]) >> 3, *a1, v7);
      if (SHIBYTE(v63->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v63->__r_.__value_.__l.__data_ = *(_OWORD *)v68;
      unint64_t v42 = __p[0];
      v63->__r_.__value_.__r.__words[2] = v69;
      unint64_t v45 = ((char *)__p[1] - (char *)v42) >> 3;
      if (v45 >= 5) {
        unint64_t v45 = 5;
      }
      if (v45)
      {
        uint64_t v46 = 0;
        uint64_t v47 = 8 * v45;
        while (1)
        {
          uint64_t v48 = *(void *)((char *)__p[0] + v46);
          uint64_t v49 = *(unsigned int *)(a2[4] + 4 * v48);
          uint64_t v50 = (v49 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v43, v44, v50);
            double v53 = v66;
            BOOL v54 = v67 < 0;
            uint64_t v55 = (void **)&v66;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v43, v44, (v49 * v7), (v7 - 1 + v50));
            double v53 = (void **)v64;
            BOOL v54 = v65 < 0;
            uint64_t v55 = &v64;
          }
          if (v54) {
            uint64_t v55 = v53;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v51, v52, v49, v48, v55);
          if (v69 >= 0) {
            uint64_t v56 = v68;
          }
          else {
            uint64_t v56 = (void **)v68[0];
          }
          if (v69 >= 0) {
            std::string::size_type v57 = HIBYTE(v69);
          }
          else {
            std::string::size_type v57 = (std::string::size_type)v68[1];
          }
          std::string::append(v63, (const std::string::value_type *)v56, v57);
          if (SHIBYTE(v69) < 0) {
            operator delete(v68[0]);
          }
          if (v7 == 1)
          {
            if (v67 < 0)
            {
              double v58 = v66;
LABEL_58:
              operator delete(v58);
            }
          }
          else if (v65 < 0)
          {
            double v58 = v64;
            goto LABEL_58;
          }
          v46 += 8;
          if (v47 == v46)
          {
            unint64_t v42 = __p[0];
            break;
          }
        }
      }
    }
    if (v42)
    {
      __p[1] = v42;
      operator delete(v42);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F42EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F42F54(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    uint64_t v62 = "usdGeom/primvar.h";
    int64_t v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = std::string]";
    char v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  sub_216CAB6C4(a4, *a2 * (int)v7);
  uint64_t v62 = 0;
  int64_t v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    uint64_t v55 = a5;
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = (int)v7;
    }
    uint64_t v54 = v14;
    uint64_t v15 = 24 * (int)v7;
    uint64_t v16 = 1;
    uint64_t v52 = v15;
    double v53 = a2;
    do
    {
      int v17 = *(_DWORD *)(a2[4] + 4 * v13);
      if (v17 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v17))
      {
        int v18 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          uint64_t v20 = v62;
          uint64_t v21 = (v63 - v62) >> 3;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v23 = v64[0] - (void)v62;
          if ((uint64_t)(v64[0] - (void)v62) >> 2 > v22) {
            unint64_t v22 = v23 >> 2;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v10 = v22;
          }
          if (v10)
          {
            uint64_t v24 = (char *)sub_21677CB28((uint64_t)v64, v10);
            uint64_t v20 = v62;
            int v18 = v63;
          }
          else
          {
            uint64_t v24 = 0;
          }
          uint64_t v32 = &v24[8 * v21];
          *(void *)uint64_t v32 = v13;
          int v19 = v32 + 8;
          while (v18 != v20)
          {
            uint64_t v33 = *((void *)v18 - 1);
            v18 -= 8;
            *((void *)v32 - 1) = v33;
            v32 -= 8;
          }
          uint64_t v62 = v32;
          int64_t v63 = v19;
          v64[0] = &v24[8 * v10];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *(void *)int64_t v63 = v13;
          int v19 = v18 + 8;
        }
        uint64_t v16 = 0;
        int64_t v63 = v19;
      }
      else if (v7)
      {
        uint64_t v25 = v7;
        uint64_t v26 = v16;
        uint64_t v27 = v25;
        uint64_t v28 = 24 * v17 * (int)v25;
        uint64_t v29 = v12;
        uint64_t v30 = v54;
        do
        {
          uint64_t v31 = a1[4];
          sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v10, v11);
          std::string::operator=((std::string *)(a4[4] + v29), (const std::string *)(v31 + v28));
          v29 += 24;
          v28 += 24;
          --v30;
        }
        while (v30);
        uint64_t v16 = v26;
        uint64_t v7 = v27;
        uint64_t v15 = v52;
        a2 = v53;
      }
      ++v13;
      v12 += v15;
    }
    while (v13 < *a2);
    long long v34 = v62;
    if (v55 && v62 != v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v10, v11, (v63 - v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      long long v34 = v62;
      unint64_t v37 = (v63 - v62) >> 3;
      if (v37 >= 5) {
        unint64_t v37 = 5;
      }
      if (v37)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 8 * v37;
        while (1)
        {
          uint64_t v40 = *(void *)&v62[v38];
          uint64_t v41 = *(unsigned int *)(a2[4] + 4 * v40);
          uint64_t v42 = (v41 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            unint64_t v45 = v58;
            BOOL v46 = v59 < 0;
            uint64_t v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            unint64_t v45 = (void **)v56;
            BOOL v46 = v57 < 0;
            uint64_t v47 = &v56;
          }
          if (v46) {
            uint64_t v47 = v45;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0) {
            uint64_t v48 = __p;
          }
          else {
            uint64_t v48 = (void **)__p[0];
          }
          if (v61 >= 0) {
            std::string::size_type v49 = HIBYTE(v61);
          }
          else {
            std::string::size_type v49 = (std::string::size_type)__p[1];
          }
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v59 < 0)
            {
              uint64_t v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            uint64_t v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            long long v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      int64_t v63 = v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v16) = 1;
  }
  return v16 & 1;
}

void sub_216F43328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

double sub_216F433A0@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216B8DD08(a2, a1).n128_u64[0];
  return result;
}

void sub_216F433D0(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216F433E4(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    std::string __p = "usdGeom/primvar.h";
    char v64 = "_ComputeFlattenedHelper";
    v65[0] = 862;
    v65[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = double]";
    char v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  v61[0] = 0;
  std::string __p = v61;
  sub_2168F9B94(a4, v10, (uint64_t **)&__p);
  std::string __p = 0;
  char v64 = 0;
  v65[0] = 0;
  if (*a2)
  {
    uint64_t v56 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v55 = v15;
    uint64_t v16 = 8 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v54 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v64;
        if ((unint64_t)v64 >= v65[0])
        {
          uint64_t v21 = (char *)__p;
          uint64_t v22 = (v64 - (unsigned char *)__p) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v65[0] - (void)__p;
          if ((uint64_t)(v65[0] - (void)__p) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            uint64_t v25 = (char *)sub_21677CB28((uint64_t)v65, v11);
            uint64_t v21 = (char *)__p;
            int v19 = v64;
          }
          else
          {
            uint64_t v25 = 0;
          }
          long long v34 = &v25[8 * v22];
          *(void *)long long v34 = v14;
          uint64_t v20 = v34 + 8;
          while (v19 != v21)
          {
            uint64_t v35 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v34 - 1) = v35;
            v34 -= 8;
          }
          std::string __p = v34;
          char v64 = v20;
          v65[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)char v64 = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        char v64 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v16;
        uint64_t v27 = v7;
        uint64_t v28 = v17;
        uint64_t v29 = v27;
        uint64_t v30 = 8 * v18 * (int)v27;
        uint64_t v31 = v13;
        uint64_t v32 = v55;
        do
        {
          uint64_t v33 = *(void *)(a1[4] + v30);
          sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(void *)(a4[4] + v31) = v33;
          v31 += 8;
          v30 += 8;
          --v32;
        }
        while (v32);
        uint64_t v17 = v28;
        uint64_t v7 = v29;
        uint64_t v16 = v26;
        a2 = v54;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    long long v36 = (char *)__p;
    if (v56 && __p != v64)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v64 - (unsigned char *)__p) >> 3, *a1, v7);
      if (SHIBYTE(v56->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)v61;
      long long v36 = (char *)__p;
      v56->__r_.__value_.__r.__words[2] = v62;
      unint64_t v39 = (v64 - v36) >> 3;
      if (v39 >= 5) {
        unint64_t v39 = 5;
      }
      if (v39)
      {
        uint64_t v40 = 0;
        uint64_t v41 = 8 * v39;
        while (1)
        {
          uint64_t v42 = *(void *)((char *)__p + v40);
          uint64_t v43 = *(unsigned int *)(a2[4] + 4 * v42);
          uint64_t v44 = (v43 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            uint64_t v47 = v59;
            BOOL v48 = v60 < 0;
            std::string::size_type v49 = (void **)&v59;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            uint64_t v47 = (void **)v57;
            BOOL v48 = v58 < 0;
            std::string::size_type v49 = &v57;
          }
          if (v48) {
            std::string::size_type v49 = v47;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v62 >= 0) {
            uint64_t v50 = v61;
          }
          else {
            uint64_t v50 = (void **)v61[0];
          }
          if (v62 >= 0) {
            std::string::size_type v51 = HIBYTE(v62);
          }
          else {
            std::string::size_type v51 = (std::string::size_type)v61[1];
          }
          std::string::append(v56, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v62) < 0) {
            operator delete(v61[0]);
          }
          if (v7 == 1)
          {
            if (v60 < 0)
            {
              uint64_t v52 = v59;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v58 < 0)
          {
            uint64_t v52 = v57;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            long long v36 = (char *)__p;
            break;
          }
        }
      }
    }
    if (v36)
    {
      char v64 = v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F437CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F43844(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    int64_t v62 = (void **)"usdGeom/primvar.h";
    int64_t v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = int]";
    char v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  LODWORD(__p[0]) = 0;
  int64_t v62 = __p;
  sub_216907A0C(a4, v10, (_DWORD **)&v62);
  int64_t v62 = 0;
  int64_t v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    uint64_t v55 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v54 = v15;
    uint64_t v16 = 4 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v52 = v16;
    double v53 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          uint64_t v21 = v62;
          uint64_t v22 = (v63 - (char *)v62) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v64[0] - (void)v62;
          if ((uint64_t)(v64[0] - (void)v62) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            uint64_t v25 = (char *)sub_21677CB28((uint64_t)v64, v11);
            uint64_t v21 = v62;
            int v19 = v63;
          }
          else
          {
            uint64_t v25 = 0;
          }
          uint64_t v32 = &v25[8 * v22];
          *(void *)uint64_t v32 = v14;
          uint64_t v20 = v32 + 8;
          while (v19 != (char *)v21)
          {
            uint64_t v33 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v32 - 1) = v33;
            v32 -= 8;
          }
          int64_t v62 = (void **)v32;
          int64_t v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)int64_t v63 = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        int64_t v63 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 4 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v54;
        do
        {
          int v31 = *(_DWORD *)(a1[4] + v28);
          sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_DWORD *)(a4[4] + v29) = v31;
          v29 += 4;
          v28 += 4;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    long long v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      long long v34 = v62;
      unint64_t v37 = (v63 - (char *)v62) >> 3;
      if (v37 >= 5) {
        unint64_t v37 = 5;
      }
      if (v37)
      {
        unint64_t v38 = 0;
        uint64_t v39 = 8 * v37;
        while (1)
        {
          uint64_t v40 = v62[v38 / 8];
          uint64_t v41 = *(unsigned int *)(a2[4] + 4 * (void)v40);
          uint64_t v42 = (v41 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            unint64_t v45 = v58;
            BOOL v46 = v59 < 0;
            uint64_t v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            unint64_t v45 = (void **)v56;
            BOOL v46 = v57 < 0;
            uint64_t v47 = &v56;
          }
          if (v46) {
            uint64_t v47 = v45;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0) {
            BOOL v48 = __p;
          }
          else {
            BOOL v48 = (void **)__p[0];
          }
          if (v61 >= 0) {
            std::string::size_type v49 = HIBYTE(v61);
          }
          else {
            std::string::size_type v49 = (std::string::size_type)__p[1];
          }
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v59 < 0)
            {
              uint64_t v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            uint64_t v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            long long v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      int64_t v63 = (char *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F43C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F43C90(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    int64_t v62 = (void **)"usdGeom/primvar.h";
    int64_t v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = unsigned int]";
    char v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  LODWORD(__p[0]) = 0;
  int64_t v62 = __p;
  sub_216906E30(a4, v10, (_DWORD **)&v62);
  int64_t v62 = 0;
  int64_t v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    uint64_t v55 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v54 = v15;
    uint64_t v16 = 4 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v52 = v16;
    double v53 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          uint64_t v21 = v62;
          uint64_t v22 = (v63 - (char *)v62) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v64[0] - (void)v62;
          if ((uint64_t)(v64[0] - (void)v62) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            uint64_t v25 = (char *)sub_21677CB28((uint64_t)v64, v11);
            uint64_t v21 = v62;
            int v19 = v63;
          }
          else
          {
            uint64_t v25 = 0;
          }
          uint64_t v32 = &v25[8 * v22];
          *(void *)uint64_t v32 = v14;
          uint64_t v20 = v32 + 8;
          while (v19 != (char *)v21)
          {
            uint64_t v33 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v32 - 1) = v33;
            v32 -= 8;
          }
          int64_t v62 = (void **)v32;
          int64_t v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)int64_t v63 = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        int64_t v63 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 4 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v54;
        do
        {
          int v31 = *(_DWORD *)(a1[4] + v28);
          sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_DWORD *)(a4[4] + v29) = v31;
          v29 += 4;
          v28 += 4;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    long long v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      long long v34 = v62;
      unint64_t v37 = (v63 - (char *)v62) >> 3;
      if (v37 >= 5) {
        unint64_t v37 = 5;
      }
      if (v37)
      {
        unint64_t v38 = 0;
        uint64_t v39 = 8 * v37;
        while (1)
        {
          uint64_t v40 = v62[v38 / 8];
          uint64_t v41 = *(unsigned int *)(a2[4] + 4 * (void)v40);
          uint64_t v42 = (v41 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            unint64_t v45 = v58;
            BOOL v46 = v59 < 0;
            uint64_t v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            unint64_t v45 = (void **)v56;
            BOOL v46 = v57 < 0;
            uint64_t v47 = &v56;
          }
          if (v46) {
            uint64_t v47 = v45;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0) {
            BOOL v48 = __p;
          }
          else {
            BOOL v48 = (void **)__p[0];
          }
          if (v61 >= 0) {
            std::string::size_type v49 = HIBYTE(v61);
          }
          else {
            std::string::size_type v49 = (std::string::size_type)__p[1];
          }
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v59 < 0)
            {
              uint64_t v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            uint64_t v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            long long v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      int64_t v63 = (char *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F44064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F440DC(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    std::string __p = "usdGeom/primvar.h";
    char v64 = "_ComputeFlattenedHelper";
    v65[0] = 862;
    v65[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = float]";
    char v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  LODWORD(v61[0]) = 0;
  std::string __p = v61;
  sub_2168F84A8(a4, v10, (_DWORD **)&__p);
  std::string __p = 0;
  char v64 = 0;
  v65[0] = 0;
  if (*a2)
  {
    uint64_t v56 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v55 = v15;
    uint64_t v16 = 4 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v54 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v64;
        if ((unint64_t)v64 >= v65[0])
        {
          uint64_t v21 = (char *)__p;
          uint64_t v22 = (v64 - (unsigned char *)__p) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v65[0] - (void)__p;
          if ((uint64_t)(v65[0] - (void)__p) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            uint64_t v25 = (char *)sub_21677CB28((uint64_t)v65, v11);
            uint64_t v21 = (char *)__p;
            int v19 = v64;
          }
          else
          {
            uint64_t v25 = 0;
          }
          long long v34 = &v25[8 * v22];
          *(void *)long long v34 = v14;
          uint64_t v20 = v34 + 8;
          while (v19 != v21)
          {
            uint64_t v35 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v34 - 1) = v35;
            v34 -= 8;
          }
          std::string __p = v34;
          char v64 = v20;
          v65[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)char v64 = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        char v64 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v16;
        uint64_t v27 = v7;
        uint64_t v28 = v17;
        uint64_t v29 = v27;
        uint64_t v30 = 4 * v18 * (int)v27;
        uint64_t v31 = v13;
        uint64_t v32 = v55;
        do
        {
          int v33 = *(_DWORD *)(a1[4] + v30);
          sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_DWORD *)(a4[4] + v31) = v33;
          v31 += 4;
          v30 += 4;
          --v32;
        }
        while (v32);
        uint64_t v17 = v28;
        uint64_t v7 = v29;
        uint64_t v16 = v26;
        a2 = v54;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    long long v36 = (char *)__p;
    if (v56 && __p != v64)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v64 - (unsigned char *)__p) >> 3, *a1, v7);
      if (SHIBYTE(v56->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)v61;
      long long v36 = (char *)__p;
      v56->__r_.__value_.__r.__words[2] = v62;
      unint64_t v39 = (v64 - v36) >> 3;
      if (v39 >= 5) {
        unint64_t v39 = 5;
      }
      if (v39)
      {
        uint64_t v40 = 0;
        uint64_t v41 = 8 * v39;
        while (1)
        {
          uint64_t v42 = *(void *)((char *)__p + v40);
          uint64_t v43 = *(unsigned int *)(a2[4] + 4 * v42);
          uint64_t v44 = (v43 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v37, v38, v44);
            uint64_t v47 = v59;
            BOOL v48 = v60 < 0;
            std::string::size_type v49 = (void **)&v59;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v37, v38, (v43 * v7), (v7 - 1 + v44));
            uint64_t v47 = (void **)v57;
            BOOL v48 = v58 < 0;
            std::string::size_type v49 = &v57;
          }
          if (v48) {
            std::string::size_type v49 = v47;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v45, v46, v43, v42, v49);
          if (v62 >= 0) {
            uint64_t v50 = v61;
          }
          else {
            uint64_t v50 = (void **)v61[0];
          }
          if (v62 >= 0) {
            std::string::size_type v51 = HIBYTE(v62);
          }
          else {
            std::string::size_type v51 = (std::string::size_type)v61[1];
          }
          std::string::append(v56, (const std::string::value_type *)v50, v51);
          if (SHIBYTE(v62) < 0) {
            operator delete(v61[0]);
          }
          if (v7 == 1)
          {
            if (v60 < 0)
            {
              uint64_t v52 = v59;
LABEL_58:
              operator delete(v52);
            }
          }
          else if (v58 < 0)
          {
            uint64_t v52 = v57;
            goto LABEL_58;
          }
          v40 += 8;
          if (v41 == v40)
          {
            long long v36 = (char *)__p;
            break;
          }
        }
      }
    }
    if (v36)
    {
      char v64 = v36;
      operator delete(v36);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F444C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F4453C(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    int64_t v62 = (void **)"usdGeom/primvar.h";
    int64_t v63 = "_ComputeFlattenedHelper";
    v64[0] = 862;
    v64[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::pxr_half::half]";
    char v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "elementSize >= 1", 0);
  }
  unint64_t v10 = *a2 * (int)v7;
  LOWORD(__p[0]) = 0;
  int64_t v62 = __p;
  sub_2168F90A4(a4, v10, (_WORD **)&v62);
  int64_t v62 = 0;
  int64_t v63 = 0;
  v64[0] = 0;
  if (*a2)
  {
    uint64_t v55 = a5;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = (int)v7;
    }
    uint64_t v54 = v15;
    uint64_t v16 = 2 * (int)v7;
    uint64_t v17 = 1;
    uint64_t v52 = v16;
    double v53 = a2;
    do
    {
      int v18 = *(_DWORD *)(a2[4] + 4 * v14);
      if (v18 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v18))
      {
        int v19 = v63;
        if ((unint64_t)v63 >= v64[0])
        {
          uint64_t v21 = v62;
          uint64_t v22 = (v63 - (char *)v62) >> 3;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v24 = v64[0] - (void)v62;
          if ((uint64_t)(v64[0] - (void)v62) >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v23;
          }
          if (v11)
          {
            uint64_t v25 = (char *)sub_21677CB28((uint64_t)v64, v11);
            uint64_t v21 = v62;
            int v19 = v63;
          }
          else
          {
            uint64_t v25 = 0;
          }
          uint64_t v32 = &v25[8 * v22];
          *(void *)uint64_t v32 = v14;
          uint64_t v20 = v32 + 8;
          while (v19 != (char *)v21)
          {
            uint64_t v33 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v32 - 1) = v33;
            v32 -= 8;
          }
          int64_t v62 = (void **)v32;
          int64_t v63 = v20;
          v64[0] = &v25[8 * v11];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(void *)int64_t v63 = v14;
          uint64_t v20 = v19 + 8;
        }
        uint64_t v17 = 0;
        int64_t v63 = v20;
      }
      else if (v7)
      {
        uint64_t v26 = v17;
        uint64_t v27 = v7;
        uint64_t v28 = 2 * v18 * (int)v7;
        uint64_t v29 = v13;
        uint64_t v30 = v54;
        do
        {
          uint64_t v31 = a1[4];
          sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v11, v12);
          *(_WORD *)(a4[4] + v29) = *(_WORD *)(v31 + v28);
          v29 += 2;
          v28 += 2;
          --v30;
        }
        while (v30);
        uint64_t v7 = v27;
        uint64_t v17 = v26;
        uint64_t v16 = v52;
        a2 = v53;
      }
      ++v14;
      v13 += v16;
    }
    while (v14 < *a2);
    long long v34 = v62;
    if (v55 && v62 != (void **)v63)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, v12, (v63 - (char *)v62) >> 3, *a1, v7);
      if (SHIBYTE(v55->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v55->__r_.__value_.__r.__words[2] = v61;
      long long v34 = v62;
      unint64_t v37 = (v63 - (char *)v62) >> 3;
      if (v37 >= 5) {
        unint64_t v37 = 5;
      }
      if (v37)
      {
        unint64_t v38 = 0;
        uint64_t v39 = 8 * v37;
        while (1)
        {
          uint64_t v40 = v62[v38 / 8];
          uint64_t v41 = *(unsigned int *)(a2[4] + 4 * (void)v40);
          uint64_t v42 = (v41 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"index %i", v35, v36, v42);
            unint64_t v45 = v58;
            BOOL v46 = v59 < 0;
            uint64_t v47 = (void **)&v58;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v35, v36, (v41 * v7), (v7 - 1 + v42));
            unint64_t v45 = (void **)v56;
            BOOL v46 = v57 < 0;
            uint64_t v47 = &v56;
          }
          if (v46) {
            uint64_t v47 = v45;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v44, v41, v40, v47);
          if (v61 >= 0) {
            BOOL v48 = __p;
          }
          else {
            BOOL v48 = (void **)__p[0];
          }
          if (v61 >= 0) {
            std::string::size_type v49 = HIBYTE(v61);
          }
          else {
            std::string::size_type v49 = (std::string::size_type)__p[1];
          }
          std::string::append(v55, (const std::string::value_type *)v48, v49);
          if (SHIBYTE(v61) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v59 < 0)
            {
              uint64_t v50 = v58;
LABEL_58:
              operator delete(v50);
            }
          }
          else if (v57 < 0)
          {
            uint64_t v50 = v56;
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            long long v34 = v62;
            break;
          }
        }
      }
    }
    if (v34)
    {
      int64_t v63 = (char *)v34;
      operator delete(v34);
    }
  }
  else
  {
    LOBYTE(v17) = 1;
  }
  return v17 & 1;
}

void sub_216F44910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F44988(uint64_t a1, long long *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_17;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_17;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      uint64_t v9 = v5 + 24 * v4;
      if (*((char *)a2 + 23) < 0)
      {
        sub_216778F24((unsigned char *)v9, *(void **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v10 = *a2;
        *(void *)(v9 + 16) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v9 = v10;
      }
LABEL_15:
      ++*(void *)a1;
      return;
    }
LABEL_17:
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    unint64_t v14 = sub_2169B21D0(a1, v13);
    uint64_t v15 = 3 * v4;
    sub_2169B232C(v11, v11 + 8 * v15, (uint64_t)v14);
    uint64_t v16 = &v14[v15];
    if (*((char *)a2 + 23) < 0)
    {
      sub_216778F24(v16, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v17 = *a2;
      v16[2] = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v16 = v17;
    }
    sub_2169B1EE4((void *)a1);
    *(void *)(a1 + 32) = v14;
    goto LABEL_15;
  }
  v19[0] = "vt/array.h";
  v19[1] = "emplace_back";
  v19[2] = 433;
  v19[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::emplace_back(Args &&...) [T = std::string, Args "
           "= <const std::string &>]";
  char v20 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v18 = 4;
    }
    else {
      int v18 = 3;
    }
  }
  else
  {
    int v18 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v18);
}

uint64_t sub_216F44B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216D3B3EC(a1, v4, v6);
      v6 += 32;
      uint64_t v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_216F44BD8((uint64_t)v9);
  return v4;
}

void sub_216F44BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F44BD8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216F44C10((uint64_t *)a1);
  }
  return a1;
}

void sub_216F44C10(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 32;
      sub_216D6D090(v5, v3);
    }
    while (v3 != v4);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76D128;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdGeom/primvarsAPI.cpp";
    char v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdGeomPrimvarsAPI pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76D128;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F44E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  return 4;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92FC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92FC8))
  {
    __cxa_guard_release(&qword_267B92FC8);
  }
  return &qword_267B92FC0;
}

void sub_216F44EB0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92FD8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)__cxa_guard_acquire(&qword_267B92FD8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::_GetStaticTfType(v2);
      byte_267B92FD0 = sub_216D16508((char *)&qword_267B92FC0, v3, v4);
      __cxa_guard_release(&qword_267B92FD8);
    }
  }
  return byte_267B92FD0;
}

void sub_216F44F30(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  return &qword_267B92FC0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B92FF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B92FF8))
  {
    qword_267B92FE0 = 0;
    *(void *)algn_267B92FE8 = 0;
    qword_267B92FF0 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B92FE0, &dword_216758000);
    __cxa_guard_release(&qword_267B92FF8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93018, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93018))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_267B93000 = 0;
    *(void *)algn_267B93008 = 0;
    qword_267B93010 = 0;
    sub_21698FA28(&qword_267B93000, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93000, &dword_216758000);
    __cxa_guard_release(&qword_267B93018);
  }
  if (v1) {
    return &qword_267B93000;
  }
  else {
    return &qword_267B92FE0;
  }
}

void sub_216F45078(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, const pxrInternal__aapl__pxrReserved__::TfToken *a4@<X3>, int a5@<W4>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a6@<X8>)
{
  sub_216D16CFC((uint64_t)&v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(a6, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, a2, a3);
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar(a6, v11))
  {
    if (*(void *)a4) {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetInterpolation(a6, a4);
    }
    if (a5 >= 1) {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetElementSize(a6, a5);
    }
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_216F4516C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F45190(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v4 = *(atomic_ullong **)(a1 + 8);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::RemovePrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v29);
  if (!v29) {
    return 0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)v24, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v24, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v19, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_21697C414(&v16);
    if (v15) {
      sub_216D16E0C(v15);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v19, v6))
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndicesAttr((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v19, (uint64_t)&__p);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&__p, v7))
      {
        uint64_t v8 = sub_216D563F8(&__p);
        int v9 = pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)v24, v8);
      }
      else
      {
        int v9 = 1;
      }
      int v12 = pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)v24, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      uint64_t v10 = v12 & v9;
      sub_21697C414(&v16);
      if (v15) {
        sub_216D16E0C(v15);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
    sub_21697C414(&v21);
    if (v20) {
      sub_216D16E0C(v20);
    }
  }
  else
  {
    int v19 = "usdGeom/primvarsAPI.cpp";
    char v20 = (atomic_ullong *)"RemovePrimvar";
    uint64_t v21 = 145;
    unint64_t v22 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::RemovePrimvar(const TfToken &)";
    LOBYTE(v23) = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__ *)v24, v5);
    if (v17 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"RemovePrimvar called on invalid prim: %s", p_p);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p);
    }
    uint64_t v10 = 0;
  }
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  sub_21697C414(&v26);
  if (v25) {
    sub_216D16E0C(v25);
  }
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v10;
}

void sub_216F45478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_216F45190((uint64_t)&a17);
  sub_216D16AD8(v17 - 72);
  uint64_t v19 = *(void *)(v17 - 40);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216F45504()
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::BlockPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v25);
  if (v25)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)v20, (uint64_t *)this + 1, (_DWORD *)this + 4);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v4, v5))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v20, a2, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v15, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
      sub_21697C414(&v12);
      if (v11) {
        sub_216D16E0C(v11);
      }
      if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v15, v7))
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::BlockIndices((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v15);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::Block((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v15, v8);
      }
      if ((v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
      sub_21697C414(&v17);
      if (v16) {
        sub_216D16E0C(v16);
      }
    }
    else
    {
      int v15 = "usdGeom/primvarsAPI.cpp";
      int v16 = (atomic_ullong *)"BlockPrimvar";
      uint64_t v17 = 174;
      unint64_t v18 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::BlockPrimvar(const TfToken &)";
      LOBYTE(v19) = 0;
      pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__ *)v20, v6);
      if (v13 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"RemovePrimvar called on invalid prim: %s", p_p);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p);
      }
    }
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_21697C414(&v22);
    if (v21) {
      sub_216D16E0C(v21);
    }
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_216F456EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_216D16AD8(v17 - 56);
  uint64_t v19 = *(void *)(v17 - 24);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3@<X8>)
{
  sub_216D16CFC((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5, (uint64_t)v11);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(a3, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v11);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (v12) {
    sub_216D16E0C(v12);
  }
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
}

void sub_216F45864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_216D2EDA0((uint64_t)va1);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)v14, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4);
  if (IsDefined)
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)v14, EmptyString, v12);
    sub_216F45A40(v12, (unsigned int (*)(char *))sub_216F480D0, a2);
    __p[0] = v12;
    sub_216D3BBE0((void ***)__p);
  }
  else
  {
    v12[0] = (uint64_t)"usdGeom/primvarsAPI.cpp";
    v12[1] = (uint64_t)"GetPrimvars";
    v12[2] = 229;
    v12[3] = (uint64_t)"std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars() const";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v14, v6);
    if (v11 >= 0) {
      int v9 = __p;
    }
    else {
      int v9 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Called GetPrimvars on invalid prim: %s", (const char *)v9);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
}

void sub_216F459F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_216D3BBE0((void ***)&__p);
  sub_216D16AD8(v16 - 48);
  _Unwind_Resume(a1);
}

void sub_216F45A40(uint64_t *a1@<X0>, unsigned int (*a2)(char *)@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_216F47C50(a3, (a1[1] - *a1) >> 5);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    do
    {
      sub_216D6B7B4(v6, (uint64_t)&v11);
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v16, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v11);
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
      sub_21697C414(&v13);
      if (v12) {
        sub_216D16E0C(v12);
      }
      if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v16, v8)&& a2(v16))
      {
        unint64_t v9 = a3[1];
        if (v9 >= a3[2])
        {
          uint64_t v10 = sub_216F47FC8(a3, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v16);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a3[1], (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v16);
          uint64_t v10 = v9 + 48;
          a3[1] = v9 + 48;
        }
        a3[1] = v10;
      }
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_21697C414(&v18);
      if (v17) {
        sub_216D16E0C(v17);
      }
      v6 += 32;
    }
    while (v6 != v7);
  }
}

void sub_216F45BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216F48514((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetAuthoredPrimvars(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)v14, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4);
  if (IsDefined)
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)v14, EmptyString, v12);
    sub_216F45A40(v12, (unsigned int (*)(char *))sub_216F480D8, a2);
    __p[0] = v12;
    sub_216D3BBE0((void ***)__p);
  }
  else
  {
    v12[0] = (uint64_t)"usdGeom/primvarsAPI.cpp";
    v12[1] = (uint64_t)"GetAuthoredPrimvars";
    v12[2] = 244;
    v12[3] = (uint64_t)"std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetAuthoredPrimvars() const";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v14, v6);
    if (v11 >= 0) {
      unint64_t v9 = __p;
    }
    else {
      unint64_t v9 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Called GetAuthoredPrimvars on invalid prim: %s", (const char *)v9);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
}

void sub_216F45D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_216D3BBE0((void ***)&__p);
  sub_216D16AD8(v16 - 48);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithValues(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)v14, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4);
  if (IsDefined)
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)v14, EmptyString, v12);
    sub_216F45A40(v12, (unsigned int (*)(char *))pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue, a2);
    __p[0] = v12;
    sub_216D3BBE0((void ***)__p);
  }
  else
  {
    v12[0] = (uint64_t)"usdGeom/primvarsAPI.cpp";
    v12[1] = (uint64_t)"GetPrimvarsWithValues";
    v12[2] = 260;
    v12[3] = (uint64_t)"std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithValues() const";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v14, v6);
    if (v11 >= 0) {
      unint64_t v9 = __p;
    }
    else {
      unint64_t v9 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Called GetPrimvarsWithValues on invalid prim: %s", (const char *)v9);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
}

void sub_216F45EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_216D3BBE0((void ***)&__p);
  sub_216D16AD8(v16 - 48);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithAuthoredValues(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)v14, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4);
  if (IsDefined)
  {
    NamespacePrefix = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    if ((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)NamespacePrefix & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NamespacePrefix);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)v14, EmptyString, v12);
    sub_216F45A40(v12, (unsigned int (*)(char *))pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue, a2);
    __p[0] = v12;
    sub_216D3BBE0((void ***)__p);
  }
  else
  {
    v12[0] = (uint64_t)"usdGeom/primvarsAPI.cpp";
    v12[1] = (uint64_t)"GetPrimvarsWithAuthoredValues";
    v12[2] = 276;
    v12[3] = (uint64_t)"std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvarsWithA"
                      "uthoredValues() const";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v14, v6);
    if (v11 >= 0) {
      unint64_t v9 = __p;
    }
    else {
      unint64_t v9 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Called GetPrimvarsWithAuthoredValues on invalid prim: %s", (const char *)v9);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
}

void sub_216F46084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_216D3BBE0((void ***)&__p);
  sub_216D16AD8(v16 - 48);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindInheritablePrimvars(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)v13, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4);
  if (IsDefined)
  {
    NamespacePrefix = (void *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    sub_216F46228((pxrInternal__aapl__pxrReserved__::TfToken *)v13, NamespacePrefix, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)a2, 0);
  }
  else
  {
    v11[0] = "usdGeom/primvarsAPI.cpp";
    v11[1] = "FindInheritablePrimvars";
    v11[2] = 369;
    void v11[3] = "std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindInheritablePrimvars() const";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v13, v6);
    if (v10 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"FindInheritablePrimvars called on invalid prim: %s", (const char *)v8);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
}

void sub_216F461DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_216D16AD8(v17 - 48);
  sub_216F48514((void ***)&a17);
  _Unwind_Resume(a1);
}

void sub_216F46228(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **a3, int a4)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(a1))
  {
    sub_216D6B1F8((uint64_t)a1, (uint64_t)&v8);
    sub_216F46228(&v8, a2, a3, 0);
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_21697C414(&v10);
    if (v9) {
      sub_216D16E0C(v9);
    }
    sub_216F4645C(a1, a2, a3, (uint64_t)a3, a4);
  }
}

void sub_216F462E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindIncrementallyInheritablePrimvars(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)v15, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v5, v6);
  if (IsDefined)
  {
    NamespacePrefix = (void *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    sub_216F4645C((pxrInternal__aapl__pxrReserved__::TfToken *)v15, NamespacePrefix, a2, (uint64_t)a3, 0);
  }
  else
  {
    v13[0] = "usdGeom/primvarsAPI.cpp";
    v13[1] = "FindIncrementallyInheritablePrimvars";
    v13[2] = 389;
    void v13[3] = "std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindIncrementallyInherita"
             "blePrimvars(const std::vector<UsdGeomPrimvar> &) const";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v15, v8);
    if (v12 >= 0) {
      int v10 = __p;
    }
    else {
      int v10 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"FindIncrementallyInheritablePrimvars called on invalid prim: %s", (const char *)v10);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
}

void sub_216F46410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_216D16AD8(v17 - 48);
  sub_216F48514((void ***)&a17);
  _Unwind_Resume(a1);
}

void sub_216F4645C(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **a3, uint64_t a4, int a5)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)a1, EmptyString, &v42);
  uint64_t v9 = v42;
  uint64_t v10 = v43;
  if (v42 != v43)
  {
    int v11 = &v34;
    uint64_t v29 = a4 + 16;
    do
    {
      sub_216D6B7B4(v9, (uint64_t)&v31);
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v36, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v31);
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v11);
      sub_21697C414(&v33);
      if (v32) {
        sub_216D16E0C(v32);
      }
      if (!pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v36, v12)|| !pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v36))
      {
        goto LABEL_36;
      }
      char v13 = sub_216D563F8(&v36);
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v36, &v31);
      char v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v14) {
        char v14 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      int v15 = (atomic_uint *)(v31 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v16 = *((void *)v14 + 17);
      if ((v31 & 7) != 0) {
        atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      int v18 = *a3;
      uint64_t v19 = a3[1];
      if (v19 == *a3)
      {
        int v18 = a3[1];
LABEL_22:
        if (v15 != (atomic_uint *)v17 && !a5) {
          goto LABEL_36;
        }
        if (a3 != (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)a4) {
          sub_216F481A0(a4, v18, v19, 0xAAAAAAAAAAAAAAABLL * ((v19 - v18) >> 4));
        }
        unint64_t v25 = *(void *)(a4 + 8);
        if (v25 >= *(void *)(a4 + 16))
        {
          uint64_t v26 = sub_216F47FC8((uint64_t *)a4, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v36);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(*(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)(a4 + 8), (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v36);
          uint64_t v26 = v25 + 48;
          *(void *)(a4 + 8) = v26;
        }
      }
      else
      {
        uint64_t v20 = v10;
        uint64_t v21 = v11;
        int v22 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)a4;
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        while ((*(void *)v13 & 0xFFFFFFFFFFFFFFF8) != (*(void *)sub_216D563F8((const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v18 + v23)) & 0xFFFFFFFFFFFFFFF8))
        {
          ++v24;
          int v18 = *a3;
          uint64_t v19 = a3[1];
          v23 += 48;
          if (v24 >= 0xAAAAAAAAAAAAAAABLL * ((v19 - *a3) >> 4))
          {
            a4 = (uint64_t)v22;
            int v11 = v21;
            uint64_t v10 = v20;
            goto LABEL_22;
          }
        }
        a4 = (uint64_t)v22;
        BOOL v27 = a3 == v22;
        int v11 = v21;
        uint64_t v10 = v20;
        if (!v27) {
          sub_216F481A0(a4, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
        }
        uint64_t v28 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(*(void *)a4 + v23);
        if (v15 == (atomic_uint *)v17 || a5)
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=((uint64_t)v28, (uint64_t)&v36);
          a3 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)a4;
          goto LABEL_36;
        }
        sub_216F480E8(v28, *(void *)(a4 + 8) - 48);
        uint64_t v26 = *(void *)(a4 + 8) - 48;
        sub_216F47EC4(v29, v26);
      }
      *(void *)(a4 + 8) = v26;
      a3 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)a4;
LABEL_36:
      if ((v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
      sub_21697C414(&v38);
      if (v37) {
        sub_216D16E0C(v37);
      }
      v9 += 32;
    }
    while (v9 != v10);
  }
  long long v36 = (void **)&v42;
  sub_216D3BBE0(&v36);
}

void sub_216F467A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216F45190((uint64_t)&a18);
  a18 = (void **)(v18 - 104);
  sub_216D3BBE0(&a18);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v42);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)&v37, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v6, v7))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar(this, a2, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v32);
    if (!pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v32))
    {
      sub_216D6B1F8((uint64_t)&v37, (uint64_t)&__p);
      int v37 = (int)__p;
      uint64_t v10 = v22;
      int v22 = 0;
      int v11 = v38;
      int v38 = v10;
      if (v11) {
        sub_216D16E0C(v11);
      }
      sub_21697DE94(&v39, &v23);
      sub_21697DEEC(&v40, &v24);
      if ((v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v41 = v25;
      uint64_t v25 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
      sub_21697C414(&v23);
      char v13 = v22;
      if (v22) {
LABEL_28:
      }
        sub_216D16E0C(v13);
      while (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v37, v12)&& !pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v37))
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v37, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v42, (uint64_t)v27);
        if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v27))
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&__p, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v27);
          if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&__p, v14))
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&__p, &v20);
            unint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            if (!v17) {
              unint64_t v17 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            }
            uint64_t v18 = (atomic_uint *)(v20 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v19 = *((void *)v17 + 17) & 0xFFFFFFFFFFFFFFF8;
            if ((v20 & 7) != 0) {
              atomic_fetch_add_explicit(v18, 0xFFFFFFFE, memory_order_release);
            }
            if (v18 == (atomic_uint *)v19)
            {
              pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a3, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&__p);
            }
            else
            {
              *(_DWORD *)a3 = 3;
              *(void *)(a3 + 8) = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
              *(void *)(a3 + 24) = 0;
              *(void *)(a3 + 32) = 0;
            }
            if ((v26 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v25 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
            sub_21697C414(&v23);
            if (v22) {
              sub_216D16E0C(v22);
            }
            if ((v31 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
            sub_21697C414(&v29);
            if (v28) {
              sub_216D16E0C(v28);
            }
            goto LABEL_4;
          }
          if ((v26 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v25 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
          sub_21697C414(&v23);
          if (v22) {
            sub_216D16E0C(v22);
          }
        }
        if ((v31 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
        sub_21697C414(&v29);
        if (v28) {
          sub_216D16E0C(v28);
        }
        sub_216D6B1F8((uint64_t)&v37, (uint64_t)&__p);
        int v37 = (int)__p;
        int v15 = v22;
        int v22 = 0;
        uint64_t v16 = v38;
        int v38 = v15;
        if (v16) {
          sub_216D16E0C(v16);
        }
        sub_21697DE94(&v39, &v23);
        sub_21697DEEC(&v40, &v24);
        if ((v41 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v41 = v25;
        uint64_t v25 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
        sub_21697C414(&v23);
        char v13 = v22;
        if (v22) {
          goto LABEL_28;
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a3, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v32);
LABEL_4:
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    sub_21697C414(&v34);
    if (v33) {
      sub_216D16E0C(v33);
    }
  }
  else
  {
    uint64_t v32 = "usdGeom/primvarsAPI.cpp";
    int v33 = (atomic_ullong *)"FindPrimvarWithInheritance";
    uint64_t v34 = 409;
    unint64_t v35 = (unint64_t)"UsdGeomPrimvar pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInherita"
                            "nce(const TfToken &) const";
    LOBYTE(v36) = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__ *)&v37, v8);
    if (v24 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"FindPrimvarWithInheritance called on invalid prim: %s", p_p);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
  }
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
  sub_21697C414(&v39);
  if (v38) {
    sub_216D16E0C(v38);
  }
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F46D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216F45190((uint64_t)&__p);
  sub_216D2EDA0((uint64_t)&a21);
  sub_216F45190((uint64_t)&a25);
  sub_216D16AD8(v25 - 120);
  uint64_t v27 = *(void *)(v25 - 88);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2@<X1>, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)v22, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v8, v9))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)__p);
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v15);
    if (!pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v15))
    {
      char v13 = *a3;
      char v12 = a3[1];
      while (v13 != v12)
      {
        char v14 = sub_216D563F8(v13);
        if ((*(void *)v14 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8))
        {
          pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a4, v13);
          goto LABEL_4;
        }
        char v13 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v13 + 48);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a4, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v15);
LABEL_4:
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_21697C414(&v17);
    if (v16) {
      sub_216D16E0C(v16);
    }
    if (((uint64_t)__p[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    int v15 = "usdGeom/primvarsAPI.cpp";
    uint64_t v16 = (atomic_ullong *)"FindPrimvarWithInheritance";
    uint64_t v17 = 445;
    unint64_t v18 = (unint64_t)"UsdGeomPrimvar pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInherita"
                            "nce(const TfToken &, const std::vector<UsdGeomPrimvar> &) const";
    LOBYTE(v19) = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v22, v10);
    if (v21 >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"FindPrimvarWithInheritance called on invalid prim: %s", (const char *)v11);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)a4 = 3;
    *(void *)(a4 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a4 + 20));
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
  }
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_21697C414(&v24);
  if (v23) {
    sub_216D16E0C(v23);
  }
}

void sub_216F46FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t __p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_216F45190((uint64_t)&a10);
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8(v21 - 64);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarsWithInheritance(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)v13, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4);
  if (IsDefined)
  {
    NamespacePrefix = (void *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    sub_216F46228((pxrInternal__aapl__pxrReserved__::TfToken *)v13, NamespacePrefix, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)a2, 1);
  }
  else
  {
    v11[0] = "usdGeom/primvarsAPI.cpp";
    v11[1] = "FindPrimvarsWithInheritance";
    v11[2] = 473;
    void v11[3] = "std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarsWithInheritance() const";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v13, v6);
    if (v10 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"FindPrimvarsWithINheritance called on invalid prim: %s", (const char *)v8);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
}

void sub_216F47178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_216D16AD8(v17 - 48);
  sub_216F48514((void ***)&a17);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarsWithInheritance(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3@<X8>)
{
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  sub_216D16CFC((uint64_t)v17, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v17, v5);
  if (IsDefined)
  {
    NamespacePrefix = (void *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)IsDefined);
    sub_216F4645C((pxrInternal__aapl__pxrReserved__::TfToken *)v17, NamespacePrefix, a2, (uint64_t)&v22, 1);
    long long v9 = v22;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
    if ((void)v9 == *((void *)&v9 + 1)) {
      char v10 = *a2;
    }
    else {
      char v10 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v9;
    }
    if ((void)v9 == *((void *)&v9 + 1)) {
      int v11 = a2[1];
    }
    else {
      int v11 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)*((void *)&v9 + 1);
    }
    sub_216F485AC(a3, v10, v11, 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 4));
  }
  else
  {
    v15[0] = (void **)"usdGeom/primvarsAPI.cpp";
    v15[1] = (void **)"FindPrimvarsWithInheritance";
    v15[2] = (void **)494;
    v15[3] = (void **)"std::vector<UsdGeomPrimvar> pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarsWith"
                      "Inheritance(const std::vector<UsdGeomPrimvar> &) const";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v17, v7);
    if (v14 >= 0) {
      char v12 = __p;
    }
    else {
      char v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"FindPrimvarsWithInheritance called on invalid prim: %s", (const char *)v12);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)a3 = v22;
    *((void *)a3 + 2) = v23;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
  }
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C(v18);
  }
  v15[0] = (void **)&v22;
  sub_216F48514(v15);
}

void sub_216F4733C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_216D16AD8((uint64_t)&a22);
  a17 = v22 - 48;
  sub_216F48514((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)1, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v22);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)v17, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, v4) & 1) == 0)
  {
    char v12 = "usdGeom/primvarsAPI.cpp";
    char v13 = (atomic_ullong *)"HasPrimvar";
    uint64_t v14 = 517;
    unint64_t v15 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPrimvar(const TfToken &) const";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)v17, v5);
    if (v11 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v12, 1, (pxrInternal__aapl__pxrReserved__ *)"HasPrimvar called on invalid prim: %s", (const char *)v8);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_12;
  }
  if (!v22)
  {
LABEL_12:
    uint64_t IsPrimvar = 0;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, (uint64_t)&v12);
  uint64_t IsPrimvar = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v12, v6);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
LABEL_13:
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C(v18);
  }
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return IsPrimvar;
}

void sub_216F47508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_216D2EDA0((uint64_t)&a16);
  sub_216D16AD8(v16 - 56);
  uint64_t v18 = *(void *)(v16 - 24);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPossiblyInheritedPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)&v37, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v5, v6))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvar(this, a2, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v32);
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v32))
    {
      BOOL v2 = 1;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_MakeNamespaced(a2, 0, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v31);
      if (v31)
      {
        sub_216D6B1F8((uint64_t)&v37, (uint64_t)&__p);
        int v37 = (int)__p;
        long long v9 = v20;
        int v20 = 0;
        char v10 = v38;
        int v38 = v9;
        if (v10) {
          sub_216D16E0C(v10);
        }
        sub_21697DE94(&v39, &v21);
        sub_21697DEEC(&v40, &v22);
        if ((v41 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v41 = v23;
        uint64_t v23 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
        sub_21697C414(&v21);
        char v12 = v20;
        if (v20) {
LABEL_16:
        }
          sub_216D16E0C(v12);
        while (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v37, v11)&& !pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v37))
        {
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v37, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31, (uint64_t)v26);
          if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v26)
            && pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)v26, v13))
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&__p, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v26);
            pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&__p, &v25);
            uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            if (!v14) {
              uint64_t v14 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            }
            BOOL v2 = (v25 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v14 + 17) & 0xFFFFFFFFFFFFFFF8);
            if ((v25 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v24 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v23 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
            sub_21697C414(&v21);
            if (v20) {
              sub_216D16E0C(v20);
            }
            int v15 = 0;
          }
          else
          {
            int v15 = 1;
          }
          if ((v30 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
          sub_21697C414(&v28);
          if (v27) {
            sub_216D16E0C(v27);
          }
          if (!v15) {
            goto LABEL_45;
          }
          sub_216D6B1F8((uint64_t)&v37, (uint64_t)&__p);
          int v37 = (int)__p;
          uint64_t v16 = v20;
          int v20 = 0;
          uint64_t v17 = v38;
          int v38 = v16;
          if (v17) {
            sub_216D16E0C(v17);
          }
          sub_21697DE94(&v39, &v21);
          sub_21697DEEC(&v40, &v22);
          if ((v41 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v41 = v23;
          uint64_t v23 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
          sub_21697C414(&v21);
          char v12 = v20;
          if (v20) {
            goto LABEL_16;
          }
        }
        BOOL v2 = 0;
LABEL_45:
        if ((v31 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        BOOL v2 = 0;
      }
    }
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    sub_21697C414(&v34);
    if (v33) {
      sub_216D16E0C(v33);
    }
  }
  else
  {
    uint64_t v32 = "usdGeom/primvarsAPI.cpp";
    int v33 = (atomic_ullong *)"HasPossiblyInheritedPrimvar";
    uint64_t v34 = 532;
    unint64_t v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::HasPossiblyInheritedPrimvar(const"
                            " TfToken &) const";
    LOBYTE(v36) = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__ *)&v37, v7);
    if (v22 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"HasPossiblyInheritedPrimvar called on invalid prim: %s", p_p);
    if (SHIBYTE(v22) < 0) {
      operator delete(__p);
    }
    BOOL v2 = 0;
  }
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
  sub_21697C414(&v39);
  if (v38) {
    sub_216D16E0C(v38);
  }
  return v2;
}

void sub_216F47990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if ((a19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216F45190((uint64_t)&__p);
  sub_216D2EDA0((uint64_t)&a20);
  if ((a24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216F45190((uint64_t)&a25);
  sub_216D16AD8(v25 - 120);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CanContainPropertyName(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  NamespacePrefix = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_GetNamespacePrefix(this);
  uint64_t v4 = NamespacePrefix;
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v5 = (*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    NamespacePrefix = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)NamespacePrefix);
    unint64_t v5 = (unint64_t)NamespacePrefix;
  }
  if ((*v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)NamespacePrefix);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    uint64_t v7 = (const char *)EmptyString;
  }
  else {
    uint64_t v7 = (const char *)*EmptyString;
  }
  int v8 = *(char *)(v5 + 23);
  if (v8 >= 0) {
    size_t v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    size_t v9 = *(void *)(v5 + 8);
  }
  size_t v10 = strlen(v7);
  if (v9 < v10) {
    return 0;
  }
  size_t v12 = v10;
  if (v8 >= 0) {
    char v13 = (const char *)v5;
  }
  else {
    char v13 = *(const char **)v5;
  }
  return strncmp(v13, v7, v12) == 0;
}

uint64_t *sub_216F47B20()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F47C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void **sub_216F47C50(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  double result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_2168073F4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 48 * v6;
    sub_216F47D04(a1, v7);
    return sub_216F47F4C(v7);
  }
  return result;
}

void sub_216F47CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F47F4C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F47D04(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216F47D7C((uint64_t)(a1 + 2), a1[1], (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)a1[1], *a1, (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216F47D7C(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3, uint64_t a4, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    size_t v9 = a3;
    do
    {
      size_t v9 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v9 - 48);
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)(v7 - 48), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 48;
      *((void *)&v15 + 1) -= 48;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216F47E38((uint64_t)v12);
  return v10;
}

void sub_216F47E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F47E38(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216F47E70((uint64_t *)a1);
  }
  return a1;
}

void sub_216F47E70(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216F47EC4(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void sub_216F47EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_21697C414((_DWORD *)(a2 + 16));
  uint64_t v5 = *(atomic_ullong **)(a2 + 8);
  if (v5)
  {
    sub_216D16E0C(v5);
  }
}

void **sub_216F47F4C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216F47F80(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_216F47EC4(v4, i - 48);
  }
}

uint64_t sub_216F47FC8(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_2168073F4(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  long long v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v10[48 * v4];
  uint64_t v16 = &v10[48 * v9];
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(v14, a2);
  long long v15 = (char *)v14 + 48;
  sub_216F47D04(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216F47F4C(&v13);
  return v11;
}

void sub_216F480BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F47F4C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F480D0()
{
  return 1;
}

uint64_t sub_216F480D8()
{
  return 1;
}

void sub_216F480E8(const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v4, a1);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=((uint64_t)a1, a2);
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=(a2, (uint64_t)&v4);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F4818C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216F481A0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    sub_216F48314((void **)a1);
    if (a4 > 0x555555555555555) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_2169D8290((void *)a1, v11);
    size_t v12 = sub_216F48384(v8, a2, a3, *(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    char v13 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)a2
                                                                   + 16
                                                                   * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    sub_216F484B4((uint64_t)a2, (uint64_t)v13, (uint64_t)v9);
    size_t v12 = sub_216F48384(v8, v13, a3, *(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_216F484B4((uint64_t)a2, (uint64_t)a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      sub_216F47EC4(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_216F48304(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216F4830C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216F48314(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        sub_216F47EC4((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *sub_216F48384(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3, pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar(v4, v6);
      int v6 = (const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v6 + 48);
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v11 + 48);
      unint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)((char *)v11 + 48);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216F48428((uint64_t)v8);
  return v4;
}

void sub_216F48414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F48428(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216F48460((uint64_t *)a1);
  }
  return a1;
}

void sub_216F48460(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      sub_216F47EC4(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_216F484B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::operator=(a3, v4);
      v4 += 48;
      a3 += 48;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_216F48514(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_216F47EC4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *sub_216F485AC(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *result, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a2, const pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_2169D8290(result, a4);
    uint64_t result = sub_216F48384((uint64_t)v6 + 16, a2, a3, *((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_216F48614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216F48514(&a9);
  _Unwind_Resume(a1);
}

void sub_216F48634()
{
  sub_216F48CE4();
  sub_216779094(__p, "Scope");
  sub_216F48E10((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F48684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomScope::~UsdGeomScope(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomScope::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  int v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D180;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdGeom/scope.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdGeomScope pxrInternal__aapl__pxrReserved__::UsdGeomScope::Get(const UsdStagePtr &,"
                            " const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D180;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F48850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomScope::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93028, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93028))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93020, "Scope");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93020, &dword_216758000);
    __cxa_guard_release(&qword_267B93028);
  }
  int v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93020, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D180;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdGeom/scope.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdGeomScope pxrInternal__aapl__pxrReserved__::UsdGeomScope::Define(const UsdStagePtr"
                            " &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D180;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F48A5C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomScope::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomScope::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93038, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93038))
  {
    __cxa_guard_release(&qword_267B93038);
  }
  return &qword_267B93030;
}

void sub_216F48B04(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomScope::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93048, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomScope *)__cxa_guard_acquire(&qword_267B93048);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomScope::_GetStaticTfType(v2);
      byte_267B93040 = sub_216D16508((char *)&qword_267B93030, v3, v4);
      __cxa_guard_release(&qword_267B93048);
    }
  }
  return byte_267B93040;
}

void sub_216F48B84(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomScope::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
  return &qword_267B93030;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomScope::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93068, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93068))
  {
    qword_267B93050 = 0;
    *(void *)algn_267B93058 = 0;
    qword_267B93060 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93050, &dword_216758000);
    __cxa_guard_release(&qword_267B93068);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93088, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93088))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)1);
    qword_267B93070 = 0;
    *(void *)algn_267B93078 = 0;
    qword_267B93080 = 0;
    sub_21698FA28(&qword_267B93070, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93070, &dword_216758000);
    __cxa_guard_release(&qword_267B93088);
  }
  if (v1) {
    return &qword_267B93070;
  }
  else {
    return &qword_267B93050;
  }
}

void sub_216F48CCC(_Unwind_Exception *a1)
{
}

uint64_t *sub_216F48CE4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F48EC4((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F48DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F48E10(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F48EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F48EC4(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F48F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F48F58()
{
  sub_216F49C5C();
  sub_216779094(__p, "Sphere");
  sub_216F49D88((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F48FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::~UsdGeomSphere(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D1D8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdGeom/sphere.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdGeomSphere pxrInternal__aapl__pxrReserved__::UsdGeomSphere::Get(const UsdStagePtr "
                            "&, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D1D8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F49174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93098, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93098))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93090, "Sphere");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93090, &dword_216758000);
    __cxa_guard_release(&qword_267B93098);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93090, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D1D8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdGeom/sphere.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdGeomSphere pxrInternal__aapl__pxrReserved__::UsdGeomSphere::Define(const UsdStageP"
                            "tr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D1D8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F49380(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B930A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B930A8))
  {
    __cxa_guard_release(&qword_267B930A8);
  }
  return &qword_267B930A0;
}

void sub_216F49428(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B930B8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)__cxa_guard_acquire(&qword_267B930B8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(v2);
      byte_267B930B0 = sub_216D16508((char *)&qword_267B930A0, v3, v4);
      __cxa_guard_release(&qword_267B930B8);
    }
  }
  return byte_267B930B0;
}

void sub_216F494A8(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  return &qword_267B930A0;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 920), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F49580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::CreateRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 920), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetExtentAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 296), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F496E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::CreateExtentAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 296), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 616), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B930D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B930D8))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v4 = *((void *)v3 + 115);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      char v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6) {
      int v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 37);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B930C0, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B930C0, &dword_216758000);
    __cxa_guard_release(&qword_267B930D8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B930F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B930F8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)1);
    sub_216F49A08((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B930E0, &dword_216758000);
    __cxa_guard_release(&qword_267B930F8);
  }
  if (v1) {
    return &qword_267B930E0;
  }
  else {
    return &qword_267B930C0;
  }
}

void sub_216F49990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B930D8);
  _Unwind_Resume(a1);
}

void *sub_216F49A08(uint64_t **a1)
{
  qword_267B930E8 = 0;
  unk_267B930F0 = 0;
  qword_267B930E0 = 0;
  sub_216973388((char **)&qword_267B930E0, ((unk_267B930C8 - qword_267B930C0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B930E0, (void *)qword_267B930E8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B930E0, (void *)qword_267B930E8, (uint64_t *)qword_267B930C0, unk_267B930C8, (unk_267B930C8 - qword_267B930C0) >> 3);
}

void sub_216F49AA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::ComputeExtent(unint64_t *a1, double a2)
{
  int v12 = 0;
  uint64_t v11 = 0;
  char v13 = &v11;
  sub_2168FD278(a1, 2uLL, &v13);
  *(float *)&a2 = a2;
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v4, v5);
  int v6 = (float *)a1[4];
  *int v6 = -*(float *)&a2;
  v6[1] = -*(float *)&a2;
  v6[2] = -*(float *)&a2;
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1, v7, v8);
  uint64_t v9 = (_DWORD *)a1[4];
  void v9[3] = LODWORD(a2);
  v9[4] = LODWORD(a2);
  v9[5] = LODWORD(a2);
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::ComputeExtent(const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a1, unint64_t *a2, double a3)
{
  LODWORD(v20) = 0;
  double v19 = 0.0;
  *(void *)&v15.f64[0] = &v19;
  sub_2168FD278(a2, 2uLL, (uint64_t **)&v15);
  double v19 = -a3;
  double v20 = -a3;
  double v21 = -a3;
  double v22 = a3;
  double v23 = a3;
  double v24 = a3;
  pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v19, a1);
  char v25 = 0;
  pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v19, (uint64_t)&v15);
  *(float *)&a3 = v16;
  float32x2_t v6 = vcvt_f32_f64(v15);
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v7, v8);
  uint64_t v9 = (float32x2_t *)a2[4];
  float32x2_t *v9 = v6;
  v9[1].i32[0] = LODWORD(a3);
  *(float *)&a3 = v18;
  float32x2_t v10 = vcvt_f32_f64(v17);
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2, v11, v12);
  unint64_t v13 = a2[4];
  *(float32x2_t *)(v13 + 12) = v10;
  *(_DWORD *)(v13 + 20) = LODWORD(a3);
  return 1;
}

void sub_216F49C1C(uint64_t a1, const std::type_info *a2, char *a3)
{
  var8.__vftable = (std::type_info_vtbl *)sub_216F49E40;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_216F49C5C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F0D538((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F49D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F49D88(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F49E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F49E40(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v4, a1);
  char v4 = &unk_26C76D1D8;
  if (v5
    && (*(unsigned char *)(v5 + 57) & 8) == 0
    && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v4) & 1) != 0
    || (v2[0] = "usdGeom/sphere.cpp",
        v2[1] = "_ComputeExtentForSphere",
        v2[2] = 223,
        v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtentForSphere(const UsdGeomBoundable &, const UsdTimeCo"
                "de &, const GfMatrix4d *, VtVec3fArray *)",
        char v3 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v2, "sphereSchema", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)&v4, (uint64_t)v2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)&v4);
  return 0;
}

void sub_216F49F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)va);
  _Unwind_Resume(a1);
}

void sub_216F49FC8()
{
  sub_216F507EC();
  sub_216779094(__p, "GeomSubset");
  sub_216F50918((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F4A018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D230;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdGeom/subset.cpp";
    float32x2_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdGeomSubset pxrInternal__aapl__pxrReserved__::UsdGeomSubset::Get(const UsdStagePtr "
                            "&, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    float32x2_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D230;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F4A1E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93108, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93108))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93100, "GeomSubset");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93100, &dword_216758000);
    __cxa_guard_release(&qword_267B93108);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93100, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D230;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdGeom/subset.cpp";
    float32x2_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdGeomSubset pxrInternal__aapl__pxrReserved__::UsdGeomSubset::Define(const UsdStageP"
                            "tr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    float32x2_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D230;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F4A3F0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93118, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93118))
  {
    __cxa_guard_release(&qword_267B93118);
  }
  return &qword_267B93110;
}

void sub_216F4A498(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93128, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)__cxa_guard_acquire(&qword_267B93128);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v2);
      byte_267B93120 = sub_216D16508((char *)&qword_267B93110, v3, v4);
      __cxa_guard_release(&qword_267B93128);
    }
  }
  return byte_267B93120;
}

void sub_216F4A518(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return &qword_267B93110;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  char v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    char v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 280), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F4A5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateElementTypeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 280), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  char v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    char v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 464), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F4A758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 464), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 464), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyNameAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  char v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    char v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 352), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F4A8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateFamilyNameAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 352), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93148, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93148))
  {
    char v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      char v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v4 = *((void *)v3 + 35);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5) {
      uint64_t v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v6 = *((void *)v5 + 58);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v7) {
      int v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v8 = *((void *)v7 + 44);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B93130, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93130, &dword_216758000);
    __cxa_guard_release(&qword_267B93148);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93168, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93168))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_216F4AC58((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93150, &dword_216758000);
    __cxa_guard_release(&qword_267B93168);
  }
  if (v1) {
    return &qword_267B93150;
  }
  else {
    return &qword_267B93130;
  }
}

void sub_216F4ABD4(_Unwind_Exception *a1)
{
}

void *sub_216F4AC58(uint64_t **a1)
{
  qword_267B93158 = 0;
  unk_267B93160 = 0;
  qword_267B93150 = 0;
  sub_216973388((char **)&qword_267B93150, ((unk_267B93138 - qword_267B93130) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93150, (void *)qword_267B93158, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93150, (void *)qword_267B93158, (uint64_t *)qword_267B93130, unk_267B93138, (unk_267B93138 - qword_267B93130) >> 3);
}

void sub_216F4ACF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateGeomSubset(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  sub_216D1E2AC(a1, &v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a2, &v16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  sub_216D16CFC((uint64_t)&v8, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v8, v6, &v14);
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::Define(&v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, a3);
  uint64_t v7 = v15;
  if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr(a3, (uint64_t)&v8);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_216F4AF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(v8);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216F4B02C()
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::SetFamilyType(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this, const pxrInternal__aapl__pxrReserved__::UsdGeomImageable *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  sub_216D16CFC((uint64_t)v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216F4C348(a2, (uint64_t)&v6);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v5) {
    uint64_t v5 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)v7, &v6, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v5 + 88), 0, 1, (uint64_t)v12);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_216F4B164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D2EDA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateUniqueGeomSubset(uint64_t a1@<X0>, void *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  sub_216D16CFC((uint64_t)v20, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v20, v6, &v25);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D1E2AC(a1, &v18);
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    long long v9 = *(_OWORD *)EmptyString;
    uint64_t v37 = EmptyString[2];
    long long __dst = v9;
  }
  uint64_t v10 = 0;
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v29);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29, &v34);
    if ((v29 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v25);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, (uint64_t)&v29);
    char IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v29, v12);
    if (IsDefined)
    {
      ++v10;
      if (*((char *)EmptyString + 23) >= 0) {
        int v16 = EmptyString;
      }
      else {
        int v16 = (void *)*EmptyString;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s_%zu", v13, v14, v16, v10);
      if (SHIBYTE(v37) < 0) {
        operator delete((void *)__dst);
      }
      long long __dst = v27;
      uint64_t v37 = v28;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::Define(&v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v34, a3);
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
    sub_21697C414(&v31);
    if (v30) {
      sub_216D16E0C(v30);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
    sub_21697C414(&v34);
    if ((IsDefined & 1) == 0)
    {
      if (SHIBYTE(v37) < 0) {
        operator delete((void *)__dst);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_21697C414(&v18);
      uint64_t v17 = v26;
      if (v26 && atomic_fetch_add_explicit((atomic_uint *volatile)(v26 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      if ((v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
      sub_21697C414(&v22);
      if (v21) {
        sub_216D16E0C(v21);
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr(a3, (uint64_t)&v29);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
  }
}

void sub_216F4B55C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(v1);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetAllGeomSubsets@<X0>(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_216D16CFC((uint64_t)&v21, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216F4B9A8(&v14);
  unint64_t v4 = v14.n128_u64[1];
  unint64_t v5 = v14.n128_u64[0];
  uint64_t v6 = v15;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v23)
    && ((v5 & 0x2000) != 0 || (v4 & 0x2000) == 0))
  {
    v5 |= 0x2000uLL;
    v4 &= ~0x2000uLL;
  }
  unint64_t v17 = v5;
  int v18 = (atomic_ullong *)v4;
  *(void *)&long long v19 = v6;
  sub_216D6BF84((uint64_t)&v21, (uint64_t *)&v17, (uint64_t)&v25);
  if ((BYTE8(v23) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v23 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
  sub_21697C414(&v23);
  if (v22) {
    sub_216D16E0C(v22);
  }
  uint64_t v21 = v25;
  sub_216981010(&v22, &v26);
  sub_21698105C((_DWORD *)&v22 + 1, &v27);
  long long v23 = v28;
  uint64_t v24 = v29;
  unint64_t v17 = v30;
  sub_216981010(&v18, &v31);
  sub_21698105C((_DWORD *)&v18 + 1, &v32);
  long long v19 = v33;
  uint64_t v20 = v34;
  while (v21 != v17 || v22 != v18 || !sub_216D5D158((uint64_t)&v23, (uint64_t)&v19))
  {
    sub_216D6BE74((uint64_t)&v21, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v7);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93110, v8);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v14, SchemaInfo, v10))
    {
      uint64_t v11 = *(void **)(a2 + 8);
      if ((unint64_t)v11 >= *(void *)(a2 + 16))
      {
        uint64_t v12 = sub_216F50E08((uint64_t *)a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(*(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a2 + 8), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
        *uint64_t v11 = &unk_26C76D230;
        uint64_t v12 = (uint64_t)(v11 + 3);
        *(void *)(a2 + 8) = v12;
      }
      *(void *)(a2 + 8) = v12;
    }
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
    if (v14.n128_u64[1]) {
      sub_216D16E0C((atomic_ullong *)v14.n128_u64[1]);
    }
    sub_216D6BEE8((uint64_t)&v21);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
  sub_21697C414(&v22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_21697C414(&v31);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  return sub_21697C414(&v26);
}

void sub_216F4B93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_216F50D48((void ***)va);
  _Unwind_Resume(a1);
}

__n128 sub_216F4B9A8@<Q0>(__n128 *a1@<X8>)
{
  long long v10 = 0uLL;
  char v11 = 0;
  uint64_t v2 = sub_216D805CC((uint64_t)&v10, 0);
  char v3 = *(void *)(v2 + 16);
  long long v10 = *(_OWORD *)v2;
  char v11 = v3;
  uint64_t v4 = sub_216D805CC((uint64_t)&v10, 7);
  char v5 = *(void *)(v4 + 16);
  long long v10 = *(_OWORD *)v4;
  char v11 = v5;
  uint64_t v6 = sub_216D805CC((uint64_t)&v10, 1);
  char v7 = *(void *)(v6 + 16);
  long long v10 = *(_OWORD *)v6;
  char v11 = v7;
  int v8 = (__n128 *)sub_216D805CC((uint64_t)&v10, 0x100000005);
  __n128 result = *v8;
  *a1 = *v8;
  a1[1].n128_u64[0] = v8[1].n128_u64[0];
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets@<X0>(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_216D16CFC((uint64_t)&v24, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216F4B9A8(&v17);
  unint64_t v5 = v17.n128_u64[1];
  unint64_t v6 = v17.n128_u64[0];
  uint64_t v7 = v18;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v26)
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  unint64_t v20 = v6;
  uint64_t v21 = (atomic_ullong *)v5;
  *(void *)&long long v22 = v7;
  sub_216D6BF84((uint64_t)&v24, (uint64_t *)&v20, (uint64_t)&v28);
  if ((BYTE8(v26) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v26 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v25) {
    sub_216D16E0C(v25);
  }
  uint64_t v24 = v28;
  sub_216981010(&v25, &v29);
  sub_21698105C((_DWORD *)&v25 + 1, &v30);
  long long v26 = v31;
  uint64_t v27 = v32;
  unint64_t v20 = v33;
  sub_216981010(&v21, &v34);
  sub_21698105C((_DWORD *)&v21 + 1, &v35);
  long long v22 = v36;
  uint64_t v23 = v37;
  while (v24 != v20 || v25 != v21 || !sub_216D5D158((uint64_t)&v26, (uint64_t)&v22))
  {
    sub_216D6BE74((uint64_t)&v24, (uint64_t)&v17);
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v8);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93110, v9);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v17, SchemaInfo, v11))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v16, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v17);
      uint64_t v15 = 0;
      v16[0] = &unk_26C76D230;
      uint64_t v14 = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v16, (uint64_t)v13);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
    sub_21697C414(&v18);
    if (v17.n128_u64[1]) {
      sub_216D16E0C((atomic_ullong *)v17.n128_u64[1]);
    }
    sub_216D6BEE8((uint64_t)&v24);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
  sub_21697C414(&v21);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
  sub_21697C414(&v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
  sub_21697C414(&v34);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  return sub_21697C414(&v29);
}

void sub_216F4BE90(_Unwind_Exception *a1)
{
  *(void *)(v2 - 208) = v1;
  sub_216F50D48((void ***)(v2 - 208));
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetAllGeomSubsetFamilyNames@<X0>(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  sub_216D16CFC((uint64_t)&v21, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216F4B9A8(&v14);
  unint64_t v3 = v14.n128_u64[1];
  unint64_t v4 = v14.n128_u64[0];
  uint64_t v5 = v15;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v23)
    && ((v4 & 0x2000) != 0 || (v3 & 0x2000) == 0))
  {
    v4 |= 0x2000uLL;
    v3 &= ~0x2000uLL;
  }
  unint64_t v17 = v4;
  uint64_t v18 = (atomic_ullong *)v3;
  *(void *)&long long v19 = v5;
  sub_216D6BF84((uint64_t)&v21, (uint64_t *)&v17, (uint64_t)&v25);
  if ((BYTE8(v23) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v23 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
  sub_21697C414(&v23);
  if (v22) {
    sub_216D16E0C(v22);
  }
  uint64_t v21 = v25;
  sub_216981010(&v22, &v26);
  sub_21698105C((_DWORD *)&v22 + 1, &v27);
  long long v23 = v28;
  uint64_t v24 = v29;
  unint64_t v17 = v30;
  sub_216981010(&v18, &v31);
  sub_21698105C((_DWORD *)&v18 + 1, &v32);
  long long v19 = v33;
  uint64_t v20 = v34;
  while (v21 != v17 || v22 != v18 || !sub_216D5D158((uint64_t)&v23, (uint64_t)&v19))
  {
    sub_216D6BE74((uint64_t)&v21, (uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(v6);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93110, v7);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v14, SchemaInfo, v9))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v13, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14);
      uint64_t v12 = 0;
      v13[0] = &unk_26C76D230;
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyNameAttr((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v13, (uint64_t)v11);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
    if (v14.n128_u64[1]) {
      sub_216D16E0C((atomic_ullong *)v14.n128_u64[1]);
    }
    sub_216D6BEE8((uint64_t)&v21);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
  sub_21697C414(&v22);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_21697C414(&v31);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  return sub_21697C414(&v26);
}

void sub_216F4C2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_216F4C348(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&long long v25 = *MEMORY[0x263EF8340];
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F509D0();
  if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (char *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  if (EmptyString[23] < 0)
  {
    EmptyString = (char *)sub_216778F24(&__dst, *(void **)EmptyString, *((void *)EmptyString + 1));
  }
  else
  {
    long long v6 = *(_OWORD *)EmptyString;
    uint64_t v20 = *((void *)EmptyString + 2);
    long long __dst = v6;
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v7 = (uint64_t *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
  }
  if (*((char *)v7 + 23) < 0)
  {
    sub_216778F24(&v21, (void *)*v7, v7[1]);
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    uint64_t v22 = v7[2];
    long long v21 = v8;
  }
  long long v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F509D0();
  if ((*((void *)v9 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    long long v10 = (uint64_t *)((*((void *)v9 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    long long v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  if (*((char *)v10 + 23) < 0)
  {
    sub_216778F24(&v23, (void *)*v10, v10[1]);
  }
  else
  {
    long long v11 = *(_OWORD *)v10;
    uint64_t v24 = v10[2];
    long long v23 = v11;
  }
  uint64_t v13 = 0;
  __n128 v14 = 0;
  uint64_t v15 = 0;
  unint64_t v17 = &v13;
  char v18 = 0;
  uint64_t v13 = (std::string *)operator new(0x48uLL);
  __n128 v14 = v13;
  uint64_t v15 = v13 + 3;
  __n128 v14 = (std::string *)sub_21695F6C0((uint64_t)&v15, &__dst, &v25, (char *)v13);
  pxrInternal__aapl__pxrReserved__::TfStringJoin(":", &v13, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v17 = &v13;
  sub_216782F20((void ***)&v17);
  for (uint64_t i = 0; i != -72; i -= 24)
  {
    if (*((char *)&v24 + i + 7) < 0) {
      operator delete(*(void **)((char *)&v23 + i));
    }
  }
}

void sub_216F4C530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyType(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this, const pxrInternal__aapl__pxrReserved__::UsdGeomImageable *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216F4C348(a2, (uint64_t)&v4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v4, (uint64_t)v10);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  uint64_t v5 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_216F4C734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetEdges(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v5 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(a1, (uint64_t)&v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
}

void sub_216F4C8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC(v5);
  _Unwind_Resume(a1);
}

void sub_216F4C900(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    int v7 = sub_2169B9BB4((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    long long v4 = a1;
  }
  else {
    long long v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    long long v6 = sub_2169B9BB4((uint64_t)a1, a2);
    int v7 = v6;
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        v6[i] = *(void *)(v3 + i * 8);
    }
LABEL_12:
    sub_2168F83DC((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_216F4C99C(uint64_t a1, void *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        int v7 = (uint64_t *)a1;
      }
      else {
        int v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(void *)(v5 + 8 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v9 = *(uint64_t **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    uint64_t v12 = sub_2169B9BB4(a1, v11);
    uint64_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 8 * v4;
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v9++;
        *v15++ = v16;
        v14 -= 8;
      }
      while (v14);
    }
    v12[v4] = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2i, Args = <pxrInternal__aapl__pxrReserved__::GfVec2i>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetUnassignedIndices(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdGeomImageable *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X3>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 32) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  if (sub_216F4D210((uint64_t)this, a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets(this, &v45);
    unint64_t v10 = sub_216F4D514((uint64_t)this, a2, 0, *(double *)a3);
    unint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v11) {
      unint64_t v11 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 31) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v42 = &v43;
      if (sub_216F4DDEC((uint64_t)this))
      {
        uint64_t v41 = 0;
        *(_OWORD *)std::string __p = 0u;
        long long v40 = 0u;
        if (v45 != v46) {
          pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetEdges(v45, (uint64_t)&v38);
        }
        __src = 0;
        long long v36 = 0;
        uint64_t v37 = 0;
        uint64_t v15 = v42;
        sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v13, v14);
        uint64_t v16 = v41;
        sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p, v17, v18);
        char v19 = 0;
        if (v15 == &v43)
        {
LABEL_37:
          uint64_t v15 = &v43;
        }
        else
        {
          uint64_t v20 = &v41[2 * (uint64_t)__p[0]];
          while (v16 != v20)
          {
            int v21 = *((_DWORD *)v15 + 7);
            int v22 = *((_DWORD *)v15 + 8);
            int v23 = *v16;
            int v24 = v16[1];
            BOOL v25 = v22 < v24;
            if (v21 != *v16) {
              BOOL v25 = v21 < *v16;
            }
            if (v25)
            {
              char v19 = sub_216F51774((uint64_t)&__src, v19, (char *)v15 + 28) + 8;
              int v26 = v15[1];
              if (v26)
              {
                do
                {
                  uint64_t v15 = (void **)v26;
                  int v26 = (void *)*v26;
                }
                while (v26);
              }
              else
              {
                do
                {
                  int v27 = v15;
                  uint64_t v15 = (void **)v15[2];
                }
                while (*v15 != v27);
              }
            }
            else
            {
              BOOL v28 = v24 < v22;
              if (v21 == v23) {
                BOOL v29 = v28;
              }
              else {
                BOOL v29 = v23 < v21;
              }
              if (v29)
              {
                v16 += 2;
              }
              else
              {
                uint64_t v30 = v15[1];
                if (v30)
                {
                  do
                  {
                    int v31 = v30;
                    uint64_t v30 = (void *)*v30;
                  }
                  while (v30);
                }
                else
                {
                  do
                  {
                    int v31 = v15[2];
                    BOOL v32 = *v31 == (void)v15;
                    uint64_t v15 = (void **)v31;
                  }
                  while (!v32);
                }
                v16 += 2;
                uint64_t v15 = (void **)v31;
              }
            }
            if (v15 == &v43) {
              goto LABEL_37;
            }
          }
        }
        sub_216F519B8(v19, (char *)v15, (char *)&v43, (uint64_t)&__src, &v38);
        sub_216F4DD50((unint64_t *)a4, v10);
        long long v33 = (char **)__src;
        uint64_t v34 = v36;
        if (__src != v36)
        {
          do
          {
            int v38 = *v33;
            sub_216F51A4C(a4, &v38);
            sub_216F51A4C(a4, (_DWORD *)&v38 + 1);
            ++v33;
          }
          while (v33 != v34);
          long long v33 = (char **)__src;
        }
        if (v33)
        {
          long long v36 = v33;
          operator delete(v33);
        }
        sub_2168F83DC((uint64_t)__p);
      }
      sub_216F510C4(v43);
    }
    else
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v42 = &v43;
      if (v45 != v46)
      {
        uint64_t v41 = 0;
        *(_OWORD *)std::string __p = 0u;
        long long v40 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(v45, (uint64_t)&v38);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
      }
      sub_216F4DD50((unint64_t *)a4, v10);
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          LODWORD(__p[0]) = i;
          sub_216F51340(a4, __p);
        }
      }
      sub_2167FB780((uint64_t)&v42, v43);
    }
    __p[0] = &v45;
    sub_216F50D48((void ***)__p);
  }
}

void sub_216F4D104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *__p, char *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *a25,uint64_t a26,char a27)
{
  if (__p)
  {
    a20 = __p;
    operator delete(__p);
  }
  sub_2167FB780((uint64_t)&a24, a25);
  std::string __p = &a27;
  sub_216F50D48((void ***)&__p);
  sub_2168F83DC(v27);
  _Unwind_Resume(a1);
}

uint64_t sub_216F4D210(uint64_t a1, void *a2)
{
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)sub_216D16CFC((uint64_t)v31, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v3);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v5);
  IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v31, SchemaInfo, v7);
  if (!IsA)
  {
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_GetStaticTfType(IsA);
    uint64_t v16 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v14, v15);
    if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v31, v16, v17))
    {
      int v26 = "usdGeom/subset.cpp";
      uint64_t v27 = "_ValidateGeomType";
      uint64_t v28 = 554;
      BOOL v29 = "BOOL pxrInternal__aapl__pxrReserved__::_ValidateGeomType(const UsdGeomImageable &, const TfToken &)";
      char v30 = 0;
      unint64_t v23 = *a2 & 0xFFFFFFFFFFFFFFF8;
      if (v23)
      {
        int v24 = (const char *)(v23 + 16);
        if (*(char *)(v23 + 39) < 0) {
          int v24 = *(const char **)v24;
        }
      }
      else
      {
        int v24 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported prim type '%s'.", v24);
      goto LABEL_34;
    }
    char v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v18) {
      char v18 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v18 + 39) & 0xFFFFFFFFFFFFFFF8))
    {
      char v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v19) {
        char v19 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      unint64_t v20 = *a2 & 0xFFFFFFFFFFFFFFF8;
      if (v20 != (*((void *)v19 + 132) & 0xFFFFFFFFFFFFFFF8))
      {
        int v26 = "usdGeom/subset.cpp";
        uint64_t v27 = "_ValidateGeomType";
        uint64_t v28 = 549;
        BOOL v29 = "BOOL pxrInternal__aapl__pxrReserved__::_ValidateGeomType(const UsdGeomImageable &, const TfToken &)";
        char v30 = 0;
        if (v20)
        {
          int v21 = (const char *)(v20 + 16);
          if (*(char *)(v20 + 39) < 0) {
            int v21 = *(const char **)v21;
          }
        }
        else
        {
          int v21 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported element type '%s' for prim type TetMesh.", v21);
        goto LABEL_34;
      }
    }
LABEL_24:
    uint64_t v22 = 1;
    goto LABEL_35;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9) {
    uint64_t v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v9 + 39) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_24;
  }
  unint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v10) {
    unint64_t v10 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 101) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_24;
  }
  unint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v11) {
    unint64_t v11 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v12 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (v12 == (*((void *)v11 + 31) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_24;
  }
  int v26 = "usdGeom/subset.cpp";
  uint64_t v27 = "_ValidateGeomType";
  uint64_t v28 = 543;
  BOOL v29 = "BOOL pxrInternal__aapl__pxrReserved__::_ValidateGeomType(const UsdGeomImageable &, const TfToken &)";
  char v30 = 0;
  if (v12)
  {
    uint64_t v13 = (const char *)(v12 + 16);
    if (*(char *)(v12 + 39) < 0) {
      uint64_t v13 = *(const char **)v13;
    }
  }
  else
  {
    uint64_t v13 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported element type '%s' for prim type Mesh.", v13);
LABEL_34:
  uint64_t v22 = 0;
LABEL_35:
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
  sub_21697C414(&v33);
  if (v32) {
    sub_216D16E0C(v32);
  }
  return v22;
}

void sub_216F4D4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F4D514(uint64_t a1, void *a2, BOOL *a3, double a4)
{
  double v55 = a4;
  if (a3) {
    *a3 = 0;
  }
  int v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v7) {
    int v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 39) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)sub_216D16CFC((uint64_t)v50, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    StaticTfType = pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v13);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v15);
    IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v50, SchemaInfo, v17);
    if (IsA)
    {
      char v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v19) {
        char v19 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v50, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v19 + 336), (uint64_t)v45);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v45, v20))
      {
        uint64_t v44 = 0;
        long long v42 = 0u;
        long long v43 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
      }
      if ((v49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      unint64_t v23 = pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_GetStaticTfType(IsA);
      BOOL v25 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v23, v24);
      if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v50, v25, v26))
      {
LABEL_77:
        if ((v54 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_79;
      }
      uint64_t v27 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v27) {
        uint64_t v27 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v50, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v27 + 1040), (uint64_t)v45);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v45, v28))
      {
        uint64_t v44 = 0;
        long long v42 = 0u;
        long long v43 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>();
      }
      if ((v49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
    sub_21697C414(&v47);
    if (v46) {
      sub_216D16E0C(v46);
    }
    goto LABEL_77;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 101) & 0xFFFFFFFFFFFFFFF8))
  {
    sub_216D16CFC((uint64_t)&v42, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    int v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v21) {
      int v21 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v42, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v21 + 816), (uint64_t)v50);
    if ((BYTE8(v43) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v43 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    sub_21697C414(&v43);
    if (*((void *)&v42 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v42 + 1));
    }
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v50, v22))
    {
      uint64_t v44 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
    }
    if ((v54 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
LABEL_79:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
    sub_21697C414(&v52);
    if (v51) {
      sub_216D16E0C(v51);
    }
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v9) {
    uint64_t v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v9 + 31) & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v10) {
      unint64_t v10 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    unint64_t v11 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if (v11 != (*((void *)v10 + 132) & 0xFFFFFFFFFFFFFFF8))
    {
      *(void *)&long long v42 = "usdGeom/subset.cpp";
      *((void *)&v42 + 1) = "_GetElementCountAtTime";
      *(void *)&long long v43 = 531;
      *((void *)&v43 + 1) = "size_t pxrInternal__aapl__pxrReserved__::_GetElementCountAtTime(const UsdGeomImageable &, "
                              "const TfToken &, UsdTimeCode, BOOL *)";
      LOBYTE(v44) = 0;
      if (v11)
      {
        unint64_t v12 = (const char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0) {
          unint64_t v12 = *(const char **)v12;
        }
      }
      else
      {
        unint64_t v12 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Unsupported element type '%s'.", v12);
      return 0;
    }
    sub_216D16CFC((uint64_t)&v42, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    int v39 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v39) {
      int v39 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v42, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v39 + 1064), (uint64_t)v50);
    if ((BYTE8(v43) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v43 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    sub_21697C414(&v43);
    if (*((void *)&v42 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v42 + 1));
    }
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v50, v40))
    {
      uint64_t v44 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>();
    }
    if ((v54 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_79;
  }
  if (sub_216F4DDEC(a1))
  {
    BOOL v29 = (uint64_t *)(a1 + 8);
    char v30 = (_DWORD *)(a1 + 16);
    sub_216D16CFC((uint64_t)v50, v29, v30);
    int v31 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v31) {
      int v31 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v50, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v31 + 336), (uint64_t)&v42);
    if ((v54 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
    sub_21697C414(&v52);
    if (v51) {
      sub_216D16E0C(v51);
    }
    sub_216D16CFC((uint64_t)v45, v29, v30);
    BOOL v32 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v32) {
      BOOL v32 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v45, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v32 + 344), (uint64_t)v50);
    if ((v49 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
    sub_21697C414(&v47);
    if (v46) {
      sub_216D16E0C(v46);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v42, v33))
    {
      int v36 = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v50, v34) ^ 1;
      if (!a3) {
        LOBYTE(v36) = 1;
      }
      if ((v36 & 1) == 0)
      {
        BOOL v38 = pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v42, v35)|| pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v50, v37);
        *a3 = v38;
      }
    }
    if ((v54 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
    sub_21697C414(&v52);
    if (v51) {
      sub_216D16E0C(v51);
    }
    if ((BYTE8(v43) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v43 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
    sub_21697C414(&v43);
    if (*((void *)&v42 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v42 + 1));
    }
  }
  sub_216F510C4(0);
  return 0;
}

void sub_216F4DC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_216D16AD8((uint64_t)va1);
  sub_216D2EDA0((uint64_t)va);
  sub_216F510C4(a4);
  _Unwind_Resume(a1);
}

void sub_216F4DD50(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    int v7 = sub_216907BD4((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    uint64_t v6 = sub_216907BD4((uint64_t)a1, a2);
    int v7 = v6;
    if (v5)
    {
      uint64_t v8 = 0;
      do
      {
        *(_DWORD *)((char *)v6 + v8) = *(_DWORD *)(v3 + v8);
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
LABEL_12:
    sub_2168F83DC((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

uint64_t sub_216F4DDEC(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  int v2 = (_DWORD *)(a1 + 16);
  sub_216D16CFC((uint64_t)&v8, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 336), (uint64_t)v16);
  if ((BYTE8(v9) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v9 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
  sub_21697C414(&v9);
  if (*((void *)&v8 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v8 + 1));
  }
  sub_216D16CFC((uint64_t)&v8, v1, v2);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v4) {
    uint64_t v4 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v4 + 344), (uint64_t)v11);
  if ((BYTE8(v9) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v9 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
  sub_21697C414(&v9);
  if (*((void *)&v8 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v8 + 1));
  }
  if pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v16, v5)&& (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v11, v6))
  {
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
  }
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (v12) {
    sub_216D16E0C(v12);
  }
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_21697C414(&v18);
  if (v17) {
    sub_216D16E0C(v17);
  }
  return 0;
}

void sub_216F4E100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  sub_216D2EDA0((uint64_t)va2);
  sub_216D2EDA0(v3 - 112);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetUnassignedIndices(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v11 = v12;
  uint64_t v5 = *(pxrInternal__aapl__pxrReserved__::UsdGeomSubset **)a1;
  if (*(void *)a1 != *(void *)(a1 + 8))
  {
    uint64_t v10 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v9 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(v5, (uint64_t)&v7);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
  }
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_216F4DD50((unint64_t *)a3, a2);
  if (a2)
  {
    uint64_t v6 = 0;
    do
    {
      LODWORD(__p[0]) = v6;
      sub_216F51340(a3, __p);
      ++v6;
    }
    while (a2 != v6);
  }
  sub_2167FB780((uint64_t)&v11, v12[0]);
}

void sub_216F4E4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2168F83DC(a10);
  sub_2167FB780((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::ValidateSubsets(pxrInternal__aapl__pxrReserved__::UsdGeomSubset **a1)
{
  int v2 = *a1;
  if (v2 != a1[1])
  {
    uint64_t v5 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr(v2, (uint64_t)v4);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
  return 1;
}

void sub_216F4EE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,int a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  sub_2167FB780(v41 - 184, *(void **)(v41 - 176));
  long long v43 = *(void **)(v41 - 160);
  if (v43)
  {
    *(void *)(v41 - 152) = v43;
    operator delete(v43);
  }
  sub_2167FB780(v41 - 136, *(void **)(v41 - 128));
  uint64_t v44 = *(void *)(v41 - 112);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::ValidateFamily(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *a1, void *a2, const pxrInternal__aapl__pxrReserved__::UsdGeomImageable *a3, std::string *a4)
{
  if (sub_216F4D210((uint64_t)a1, a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets(a1, &v18);
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyType(a1, a3, v10);
  }
  unint64_t v11 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (v11)
  {
    uint64_t v12 = (const char *)(v11 + 16);
    if (*(char *)(v11 + 39) < 0) {
      uint64_t v12 = *(const char **)v12;
    }
  }
  else
  {
    uint64_t v12 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid geom type for elementType %s.\n", v8, v9, v12);
  if ((v17 & 0x80u) == 0) {
    int v13 = (const std::string::value_type *)v16;
  }
  else {
    int v13 = (const std::string::value_type *)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v14 = v17;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)v16[1];
  }
  std::string::append(a4, v13, v14);
  if ((char)v17 < 0) {
    operator delete(v16[0]);
  }
  return 0;
}

void sub_216F50434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v55 = *(void *)(v53 - 136);
  if ((v55 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  a48 = (void *)(v53 - 128);
  sub_216F50D48((void ***)&a48);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F507EC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F508CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F50918(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F509AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_216F509D0()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B93170);
  if (!v0)
  {
    uint64_t v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "subsetFamily", 0);
    unint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "familyType", 0);
    unint64_t v3 = *(atomic_uint **)v0;
    uint64_t v15 = v3;
    if ((v3 & 7) != 0)
    {
      char v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v15 = v4;
      }
    }
    char v5 = (atomic_uint *)*v2;
    uint64_t v16 = v5;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v16 = v6;
      }
    }
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    int v13 = (void **)(v0 + 16);
    char v14 = 0;
    int v7 = (char *)operator new(0x10uLL);
    uint64_t v8 = 0;
    *((void *)v0 + 2) = v7;
    *((void *)v0 + 3) = v7;
    *((void *)v0 + 4) = v7 + 16;
    do
    {
      long long v9 = (&v15)[v8];
      *(void *)&v7[v8 * 8] = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v7[v8 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v8;
    }
    while (v8 != 2);
    *((void *)v0 + 3) = v7 + 16;
    for (uint64_t i = 1; i != -1; --i)
    {
      unint64_t v11 = (&v15)[i];
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v12 = 0;
    atomic_compare_exchange_strong(&qword_267B93170, (unint64_t *)&v12, (unint64_t)v0);
    if (v12)
    {
      int v13 = (void **)(v0 + 16);
      sub_216889A04(&v13);
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B93170);
    }
  }
  return (unint64_t)v0;
}

void sub_216F50BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t *sub_216F50C38(uint64_t **a1, int *a2)
{
  __n128 result = sub_216F50CC8((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    char v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v6 + 28) = *(void *)a2;
    uint64_t v7 = v8;
    return sub_21677B358(a1, v7, v5, v6);
  }
  return result;
}

uint64_t *sub_216F50CC8(uint64_t a1, void *a2, int *a3)
{
  char v5 = *(uint64_t **)(a1 + 8);
  __n128 result = (uint64_t *)(a1 + 8);
  char v4 = v5;
  if (v5)
  {
    int v6 = *a3;
    int v7 = a3[1];
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        int v9 = *((_DWORD *)v4 + 7);
        int v10 = *((_DWORD *)v8 + 8);
        BOOL v11 = v7 < v10;
        if (v6 != v9) {
          BOOL v11 = v6 < v9;
        }
        if (!v11) {
          break;
        }
        char v4 = (uint64_t *)*v8;
        __n128 result = v8;
        if (!*v8) {
          goto LABEL_15;
        }
      }
      BOOL v12 = v10 < v7;
      if (v6 == v9) {
        BOOL v13 = v12;
      }
      else {
        BOOL v13 = v9 < v6;
      }
      if (!v13) {
        break;
      }
      __n128 result = v8 + 1;
      char v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

void sub_216F50D48(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    char v4 = (char *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      int v6 = v4 - 24;
      int v7 = v4 - 24;
      uint64_t v8 = v4 - 24;
      do
      {
        int v9 = *(void (***)(char *))v8;
        v8 -= 24;
        (*v9)(v7);
        v6 -= 24;
        BOOL v10 = v7 == v2;
        int v7 = v8;
      }
      while (!v10);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216F50E08(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  BOOL v13 = v10;
  char v14 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v10[24 * v4];
  uint64_t v15 = v14;
  uint64_t v16 = &v10[24 * v9];
  *(void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v14, a2) = &unk_26C76D230;
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v15 + 24);
  sub_216F50F2C(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216F51058((uint64_t)&v13);
  return v11;
}

void sub_216F50F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F51058((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F50F2C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216F50FA4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216F50FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      BOOL v12 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a7 + v11 - 24), (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a3 + v11 - 24));
      v11 -= 24;
      *(void *)BOOL v12 = &unk_26C76D230;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_216F5103C(_Unwind_Exception *exception_object)
{
  if (v3) {
    sub_21732512C(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F51058(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 24);
    *(void *)(a1 + 16) = i - 24;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216F510C4(void *a1)
{
  if (a1)
  {
    sub_216F510C4(*a1);
    sub_216F510C4(a1[1]);
    operator delete(a1);
  }
}

uint64_t *sub_216F51110(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t v6 = sub_216F51198(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_21677B358(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_216F51198(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      unint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      BOOL v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        BOOL v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    BOOL v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      BOOL v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    int v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      int v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_216F51340(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        int v7 = (uint64_t *)a1;
      }
      else {
        int v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    unint64_t v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    BOOL v12 = sub_216907BD4(a1, v11);
    BOOL v13 = v12;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      int v15 = v12;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<int>::emplace_back(Args &&...) [T = int, Args = <int>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

_DWORD *sub_216F514A8(_DWORD **a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  unint64_t v6 = *a1;
  int v7 = (_DWORD *)*a2;
  if (*a1 == (_DWORD *)*a2) {
    return v6;
  }
  for (uint64_t i = (void *)*a3; *a3 != *a4; uint64_t i = (void *)*a3)
  {
    int v13 = *((_DWORD *)i + 7);
    if (*v6 >= v13)
    {
      if (v13 >= *v6)
      {
        *a1 = v6 + 1;
        int v17 = (void *)i[1];
        if (v17)
        {
          do
          {
            int v15 = v17;
            int v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            int v15 = (void *)i[2];
            BOOL v16 = *v15 == (void)i;
            uint64_t i = v15;
          }
          while (!v16);
        }
      }
      else
      {
        uint64_t v14 = (void *)i[1];
        if (v14)
        {
          do
          {
            int v15 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            int v15 = (void *)i[2];
            BOOL v16 = *v15 == (void)i;
            uint64_t i = v15;
          }
          while (!v16);
        }
      }
      *a3 = v15;
    }
    else
    {
      sub_216F51A4C(*a5, v6);
      ++*a1;
    }
    unint64_t v6 = *a1;
    int v7 = (_DWORD *)*a2;
    if (*a1 == (_DWORD *)*a2) {
      return v6;
    }
  }
  uint64_t v18 = *a5;
  if (v6 == v7) {
    return v6;
  }
  char v19 = v6;
  do
    sub_216F51A4C(v18, v19++);
  while (v19 != v7);
  return v7;
}

void sub_216F5160C(uint64_t a1, void *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        int v7 = (uint64_t *)a1;
      }
      else {
        int v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(void *)(v5 + 8 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    unint64_t v9 = *(uint64_t **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    BOOL v12 = sub_2169B9BB4(a1, v11);
    int v13 = v12;
    if (v4)
    {
      uint64_t v14 = 8 * v4;
      int v15 = v12;
      do
      {
        uint64_t v16 = *v9++;
        *v15++ = v16;
        v14 -= 8;
      }
      while (v14);
    }
    v12[v4] = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec2i, Args = <const pxrInternal__aapl__pxrReserved__::GfVec2i &>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

char *sub_216F51774(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      sub_21677CB10();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      char v19 = (char *)sub_21677CB28(a1 + 16, v18);
    }
    else {
      char v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    BOOL v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        unint64_t v23 = (char *)sub_21677CB28(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        BOOL v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_216891860((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    unint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    unint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_216F51980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F519B8(char *__src@<X4>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  unint64_t v6 = a2;
  if (a2 != a3)
  {
    do
    {
      unint64_t v9 = sub_216F51774(a4, __src, v6 + 28);
      uint64_t v10 = (char *)*((void *)v6 + 1);
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = (char *)*((void *)v6 + 2);
          BOOL v12 = *(void *)v11 == (void)v6;
          unint64_t v6 = v11;
        }
        while (!v12);
      }
      __src = v9 + 8;
      unint64_t v6 = v11;
    }
    while (v11 != a3);
    unint64_t v6 = a3;
  }
  *a5 = v6;
  a5[1] = (char *)a4;
  a5[2] = __src;
}

void sub_216F51A4C(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        unint64_t v7 = (uint64_t *)a1;
      }
      else {
        unint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    unint64_t v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    BOOL v12 = sub_216907BD4(a1, v11);
    int v13 = v12;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      uint64_t v15 = v12;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  v18[0] = "vt/array.h";
  v18[1] = "emplace_back";
  v18[2] = 433;
  v18[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<int>::emplace_back(Args &&...) [T = int, Args = <const int &>]";
  char v19 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v17 = 4;
    }
    else {
      int v17 = 3;
    }
  }
  else
  {
    int v17 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v17);
}

void *sub_216F51BB4(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    unint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_216F51C1C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F51C38()
{
  sub_216F52E90();
  sub_216779094(__p, "TetMesh");
  sub_216F52FBC((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F51C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::~UsdGeomTetMesh(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::~UsdGeomPointBased(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D288;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "usdGeom/tetMesh.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdGeomTetMesh pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::Get(const UsdStagePt"
                            "r &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D288;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F51E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93180, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93180))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93178, "TetMesh");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93178, &dword_216758000);
    __cxa_guard_release(&qword_267B93180);
  }
  unint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93178, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D288;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "usdGeom/tetMesh.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdGeomTetMesh pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::Define(const UsdStag"
                            "ePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D288;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F52060(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93190, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93190))
  {
    __cxa_guard_release(&qword_267B93190);
  }
  return &qword_267B93188;
}

void sub_216F52108(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B931A0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *)__cxa_guard_acquire(&qword_267B931A0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_GetStaticTfType(v2);
      byte_267B93198 = sub_216D16508((char *)&qword_267B93188, v3, v4);
      __cxa_guard_release(&qword_267B931A0);
    }
  }
  return byte_267B93198;
}

void sub_216F52188(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this)
{
  return &qword_267B93188;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::GetTetVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    uint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1064), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F52260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::CreateTetVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1064), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 576), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::GetSurfaceFaceVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    uint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1040), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F523C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::CreateSurfaceFaceVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1040), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 568), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B931C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B931C0))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      uint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v4 = *((void *)v3 + 133);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      uint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6) {
      int v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 130);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B931A8, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B931A8, &dword_216758000);
    __cxa_guard_release(&qword_267B931C0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B931E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B931E0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)1);
    sub_216F526E8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B931C8, &dword_216758000);
    __cxa_guard_release(&qword_267B931E0);
  }
  if (v1) {
    return &qword_267B931C8;
  }
  else {
    return &qword_267B931A8;
  }
}

void sub_216F52670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B931C0);
  _Unwind_Resume(a1);
}

void *sub_216F526E8(uint64_t **a1)
{
  qword_267B931D0 = 0;
  unk_267B931D8 = 0;
  qword_267B931C8 = 0;
  sub_216973388((char **)&qword_267B931C8, ((*(void *)algn_267B931B0 - qword_267B931A8) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B931C8, (void *)qword_267B931D0, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B931C8, (void *)qword_267B931D0, (uint64_t *)qword_267B931A8, *(uint64_t **)algn_267B931B0, (*(void *)algn_267B931B0 - qword_267B931A8) >> 3);
}

void sub_216F52780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::ComputeSurfaceFaces(pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh *a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomTetMesh::GetTetVertexIndicesAttr(a1, (uint64_t)v3);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>();
  }
  return 0;
}

void sub_216F52E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t *sub_216F52E90()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F12A84((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F52F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F52FBC(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F53050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F53074(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    int v7 = sub_2169BBBB8((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    char v4 = a1;
  }
  else {
    char v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    uint64_t v6 = sub_2169BBBB8((uint64_t)a1, a2);
    int v7 = v6;
    if (v5)
    {
      uint64_t v8 = 0;
      do
      {
        unint64_t v9 = (char *)v6 + v8;
        uint64_t v10 = *(void *)(v3 + v8);
        *((_DWORD *)v9 + 2) = *(_DWORD *)(v3 + v8 + 8);
        *(void *)unint64_t v9 = v10;
        v8 += 12;
      }
      while (12 * v5 != v8);
    }
LABEL_12:
    sub_2168F83DC((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_216F53124(uint64_t a1, uint64_t *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        int v7 = (uint64_t *)a1;
      }
      else {
        int v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = v5 + 12 * v4;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t v10 = v9;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v11 = *(uint64_t **)(a1 + 32);
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    uint64_t v14 = sub_2169BBBB8(a1, v13);
    uint64_t v15 = v14;
    if (v4)
    {
      uint64_t v16 = 12 * v4;
      int v17 = v14;
      do
      {
        uint64_t v18 = *v11;
        *((_DWORD *)v17 + 2) = *((_DWORD *)v11 + 2);
        void *v17 = v18;
        int v17 = (void *)((char *)v17 + 12);
        uint64_t v11 = (uint64_t *)((char *)v11 + 12);
        v16 -= 12;
      }
      while (v16);
    }
    uint64_t v19 = *a2;
    uint64_t v20 = (char *)v14 + 12 * v4;
    *((_DWORD *)v20 + 2) = *((_DWORD *)a2 + 2);
    *(void *)uint64_t v20 = v19;
    sub_2168F83DC(a1);
    *(void *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  v22[0] = "vt/array.h";
  v22[1] = "emplace_back";
  v22[2] = 433;
  v22[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::GfVec3i, Args = <const pxrInternal__aapl__pxrReserved__::GfVec3i &>]";
  char v23 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v21 = 4;
    }
    else {
      int v21 = 3;
    }
  }
  else
  {
    int v21 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v21);
}

unint64_t sub_216F532BC(unint64_t result, int *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (int *)result;
LABEL_2:
  j = v9;
  while (1)
  {
    uint64_t v9 = j;
    uint64_t v11 = (char *)a2 - (char *)j;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - j);
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          char v65 = a2 - 3;
          int v66 = *(a2 - 3);
          BOOL v67 = v66 < *j;
          if (v66 == *j)
          {
            int v68 = *(a2 - 2);
            int v69 = j[1];
            BOOL v67 = v68 < v69;
            if (v68 == v69) {
              BOOL v67 = *(a2 - 1) < j[2];
            }
          }
          if (v67)
          {
            int v153 = j[2];
            uint64_t v148 = *(void *)j;
            uint64_t v70 = *(void *)v65;
            j[2] = *(a2 - 1);
            *(void *)j = v70;
            *(a2 - 1) = v153;
            *(void *)char v65 = v148;
          }
          break;
        case 3uLL:
          uint64_t result = (unint64_t)sub_216F54054(j, j + 3, a2 - 3);
          break;
        case 4uLL:
          uint64_t result = (unint64_t)sub_216F544B8(j, j + 3, j + 6, a2 - 3);
          break;
        case 5uLL:
          uint64_t result = (unint64_t)sub_216F53E9C(j, j + 3, j + 6, j + 9, a2 - 3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 287) {
      break;
    }
    if (!a3)
    {
      if (j == a2) {
        return result;
      }
      int64_t v88 = (v12 - 2) >> 1;
      int64_t v89 = v88;
      while (1)
      {
        int64_t v90 = v89;
        if (v88 >= v89)
        {
          uint64_t v91 = (2 * v89) | 1;
          uint64_t v92 = &j[3 * v91];
          if (2 * v90 + 2 < (uint64_t)v12)
          {
            int v93 = v92[3];
            BOOL v94 = *v92 < v93;
            if (*v92 == v93)
            {
              int v95 = v92[1];
              int v96 = v92[4];
              BOOL v94 = v95 < v96;
              if (v95 == v96) {
                BOOL v94 = v92[2] < v92[5];
              }
            }
            if (v94)
            {
              v92 += 3;
              uint64_t v91 = 2 * v90 + 2;
            }
          }
          uint64_t result = (unint64_t)&j[3 * v90];
          int v97 = *(_DWORD *)result;
          if (*v92 == *(_DWORD *)result)
          {
            int v98 = v92[1];
            int v99 = *(_DWORD *)(result + 4);
            BOOL v100 = v98 < v99;
            if (v98 == v99)
            {
              if (v92[2] >= *(_DWORD *)(result + 8)) {
                goto LABEL_171;
              }
            }
            else
            {
              int v98 = *(_DWORD *)(result + 4);
              if (!v100) {
                goto LABEL_171;
              }
            }
          }
          else if (*v92 >= v97)
          {
            int v98 = *(_DWORD *)(result + 4);
LABEL_171:
            int v101 = *(_DWORD *)(result + 8);
            int v102 = v92[2];
            *(void *)uint64_t result = *(void *)v92;
            *(_DWORD *)(result + 8) = v102;
            while (1)
            {
              if (v88 < v91) {
                goto LABEL_186;
              }
              uint64_t result = (unint64_t)v92;
              uint64_t v103 = 2 * v91;
              uint64_t v91 = (2 * v91) | 1;
              uint64_t v92 = &j[3 * v91];
              uint64_t v104 = v103 + 2;
              if (v104 < (uint64_t)v12)
              {
                int v105 = v92[3];
                BOOL v106 = *v92 < v105;
                if (*v92 == v105)
                {
                  int v107 = v92[1];
                  int v108 = v92[4];
                  BOOL v106 = v107 < v108;
                  if (v107 == v108) {
                    BOOL v106 = v92[2] < v92[5];
                  }
                }
                if (v106)
                {
                  v92 += 3;
                  uint64_t v91 = v104;
                }
              }
              BOOL v109 = *v92 < v97;
              if (*v92 == v97)
              {
                int v110 = v92[1];
                BOOL v109 = v110 < v98;
                if (v110 == v98) {
                  BOOL v109 = v92[2] < v101;
                }
              }
              if (v109) {
                break;
              }
              uint64_t v111 = *(void *)v92;
              *(_DWORD *)(result + 8) = v92[2];
              *(void *)uint64_t result = v111;
            }
            uint64_t v92 = (int *)result;
LABEL_186:
            *uint64_t v92 = v97;
            v92[1] = v98;
            v92[2] = v101;
          }
        }
        int64_t v89 = v90 - 1;
        if (!v90)
        {
          int64_t v112 = v11 / 0xCuLL;
          while (1)
          {
            uint64_t v113 = 0;
            int v154 = j[2];
            uint64_t v149 = *(void *)j;
            v114 = (char *)j;
            do
            {
              v115 = v114;
              v114 += 12 * v113 + 12;
              uint64_t v116 = 2 * v113;
              uint64_t v113 = (2 * v113) | 1;
              int64_t v117 = v116 + 2;
              if (v117 < v112)
              {
                int v118 = *((_DWORD *)v114 + 3);
                uint64_t result = *(unsigned int *)v114;
                BOOL v119 = (int)result < v118;
                if (result == v118)
                {
                  int v120 = *((_DWORD *)v114 + 1);
                  uint64_t result = *((unsigned int *)v114 + 4);
                  BOOL v119 = v120 < (int)result;
                  if (v120 == result)
                  {
                    uint64_t result = *((unsigned int *)v114 + 5);
                    BOOL v119 = *((_DWORD *)v114 + 2) < (int)result;
                  }
                }
                if (v119)
                {
                  v114 += 12;
                  uint64_t v113 = v117;
                }
              }
              uint64_t v121 = *(void *)v114;
              *((_DWORD *)v115 + 2) = *((_DWORD *)v114 + 2);
              *(void *)v115 = v121;
            }
            while (v113 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
            a2 -= 3;
            if (v114 == (char *)a2)
            {
              *((_DWORD *)v114 + 2) = v154;
              *(void *)v114 = v149;
            }
            else
            {
              uint64_t v122 = *(void *)a2;
              *((_DWORD *)v114 + 2) = a2[2];
              *(void *)v114 = v122;
              a2[2] = v154;
              *(void *)a2 = v149;
              uint64_t v123 = v114 - (char *)j + 12;
              if (v123 >= 13)
              {
                unint64_t v124 = v123 / 0xCuLL - 2;
                unint64_t v125 = v124 >> 1;
                v126 = &j[3 * (v124 >> 1)];
                int v127 = *(_DWORD *)v114;
                if (*v126 == *(_DWORD *)v114)
                {
                  int v128 = v126[1];
                  int v129 = *((_DWORD *)v114 + 1);
                  BOOL v130 = v128 < v129;
                  if (v128 == v129)
                  {
                    uint64_t result = *((unsigned int *)v114 + 2);
                    if (v126[2] < (int)result) {
                      goto LABEL_209;
                    }
                  }
                  else
                  {
                    int v128 = *((_DWORD *)v114 + 1);
                    if (v130) {
                      goto LABEL_209;
                    }
                  }
                }
                else if (*v126 < v127)
                {
                  int v128 = *((_DWORD *)v114 + 1);
LABEL_209:
                  int v131 = *((_DWORD *)v114 + 2);
                  uint64_t result = v126[2];
                  *(void *)v114 = *(void *)v126;
                  *((_DWORD *)v114 + 2) = result;
                  if (v124 >= 2)
                  {
                    while (1)
                    {
                      v132 = v126;
                      unint64_t v133 = v125 - 1;
                      unint64_t v125 = (v125 - 1) >> 1;
                      v126 = &j[3 * v125];
                      uint64_t result = *v126;
                      BOOL v134 = (int)result < v127;
                      if (result == v127)
                      {
                        uint64_t result = v126[1];
                        BOOL v134 = (int)result < v128;
                        if (result == v128)
                        {
                          uint64_t result = v126[2];
                          BOOL v134 = (int)result < v131;
                        }
                      }
                      if (!v134) {
                        break;
                      }
                      uint64_t result = *(void *)v126;
                      v132[2] = v126[2];
                      *(void *)v132 = result;
                      if (v133 <= 1) {
                        goto LABEL_216;
                      }
                    }
                    v126 = v132;
                  }
LABEL_216:
                  int *v126 = v127;
                  v126[1] = v128;
                  v126[2] = v131;
                }
              }
            }
            BOOL v27 = v112-- <= 2;
            if (v27) {
              return result;
            }
          }
        }
      }
    }
    unint64_t v13 = v12 >> 1;
    uint64_t v14 = &j[3 * (v12 >> 1)];
    if ((unint64_t)v11 >= 0x601)
    {
      sub_216F54054(v9, &v9[3 * (v12 >> 1)], a2 - 3);
      uint64_t v15 = 3 * v13;
      uint64_t v16 = &v9[3 * v13 - 3];
      sub_216F54054(v9 + 3, v16, a2 - 6);
      int v17 = &v9[v15 + 3];
      sub_216F54054(v9 + 6, v17, a2 - 9);
      uint64_t result = (unint64_t)sub_216F54054(v16, v14, v17);
      int v150 = v9[2];
      uint64_t v145 = *(void *)v9;
      int v18 = v14[2];
      *(void *)uint64_t v9 = *(void *)v14;
      v9[2] = v18;
      __n128 v14[2] = v150;
      *(void *)uint64_t v14 = v145;
    }
    else
    {
      uint64_t result = (unint64_t)sub_216F54054(&v9[3 * (v12 >> 1)], v9, a2 - 3);
    }
    --a3;
    int v19 = *v9;
    if (a4) {
      goto LABEL_19;
    }
    int v20 = *(v9 - 3);
    if (v20 == v19)
    {
      int v21 = *(v9 - 2);
      int v22 = v9[1];
      if (v21 != v22)
      {
        if (v21 < v22) {
          goto LABEL_19;
        }
        int v21 = v9[1];
        goto LABEL_67;
      }
      if (*(v9 - 1) >= v9[2]) {
        goto LABEL_67;
      }
LABEL_19:
      uint64_t v23 = 0;
      int v24 = v9[1];
      int v25 = v9[2];
      while (1)
      {
        int v26 = v9[v23 + 3];
        BOOL v27 = v26 < v19;
        if (v26 == v19)
        {
          int v28 = v9[v23 + 4];
          BOOL v27 = v28 < v24;
          if (v28 == v24) {
            BOOL v27 = v9[v23 + 5] < v25;
          }
        }
        if (!v27) {
          break;
        }
        v23 += 3;
      }
      unint64_t v29 = (unint64_t)&v9[v23 + 3];
      uint64_t i = a2 - 3;
      if (v23 * 4)
      {
        while (1)
        {
          BOOL v31 = *i < v19;
          if (*i == v19)
          {
            int v32 = i[1];
            BOOL v31 = v32 < v24;
            if (v32 == v24) {
              BOOL v31 = i[2] < v25;
            }
          }
          if (v31) {
            break;
          }
          i -= 3;
        }
      }
      else
      {
        uint64_t i = a2;
        if (v29 < (unint64_t)a2)
        {
          for (uint64_t i = a2 - 3; ; i -= 3)
          {
            if (*i == v19)
            {
              int v33 = i[1];
              if (v33 == v24)
              {
                if (v29 >= (unint64_t)i || i[2] < v25) {
                  break;
                }
              }
              else if (v29 >= (unint64_t)i || v33 < v24)
              {
                break;
              }
            }
            else if (*i < v19 || v29 >= (unint64_t)i)
            {
              break;
            }
          }
        }
      }
      j = (int *)v29;
      if (v29 < (unint64_t)i)
      {
        uint64_t v35 = i;
        do
        {
          int v151 = j[2];
          uint64_t v146 = *(void *)j;
          uint64_t v36 = *(void *)v35;
          j[2] = v35[2];
          *(void *)j = v36;
          v35[2] = v151;
          *(void *)uint64_t v35 = v146;
          do
          {
            int v37 = j[3];
            j += 3;
            BOOL v38 = v37 < v19;
            if (v37 == v19)
            {
              int v39 = j[1];
              BOOL v38 = v39 < v24;
              if (v39 == v24) {
                BOOL v38 = j[2] < v25;
              }
            }
          }
          while (v38);
          do
          {
            int v40 = *(v35 - 3);
            v35 -= 3;
            BOOL v41 = v40 < v19;
            if (v40 == v19)
            {
              int v42 = v35[1];
              BOOL v41 = v42 < v24;
              if (v42 == v24) {
                BOOL v41 = v35[2] < v25;
              }
            }
          }
          while (!v41);
        }
        while (j < v35);
      }
      if (j - 3 != v9)
      {
        uint64_t v43 = *(void *)(j - 3);
        v9[2] = *(j - 1);
        *(void *)uint64_t v9 = v43;
      }
      *(j - 3) = v19;
      *(j - 2) = v24;
      *(j - 1) = v25;
      if (v29 < (unint64_t)i)
      {
LABEL_66:
        uint64_t result = sub_216F532BC(v9, j - 3, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v44 = sub_216F54224(v9, j - 3);
        uint64_t result = sub_216F54224(j, a2);
        if (result)
        {
          a2 = j - 3;
          if (v44) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v44) {
          goto LABEL_66;
        }
      }
    }
    else
    {
      if (v20 < v19) {
        goto LABEL_19;
      }
      int v21 = v9[1];
LABEL_67:
      int v45 = v9[2];
      int v46 = *(a2 - 3);
      BOOL v47 = v19 < v46;
      if (v19 == v46)
      {
        int v48 = *(a2 - 2);
        BOOL v47 = v21 < v48;
        if (v21 == v48) {
          BOOL v47 = v45 < *(a2 - 1);
        }
      }
      if (v47)
      {
        for (j = v9 + 3; ; j += 3)
        {
          BOOL v49 = v19 < *j;
          if (v19 == *j)
          {
            int v50 = j[1];
            BOOL v49 = v21 < v50;
            if (v21 == v50) {
              BOOL v49 = v45 < j[2];
            }
          }
          if (v49) {
            break;
          }
        }
      }
      else
      {
        for (j = v9 + 3; j < a2; j += 3)
        {
          BOOL v51 = v19 < *j;
          if (v19 == *j)
          {
            int v52 = j[1];
            BOOL v51 = v21 < v52;
            if (v21 == v52) {
              BOOL v51 = v45 < j[2];
            }
          }
          if (v51) {
            break;
          }
        }
      }
      k = a2;
      if (j < a2)
      {
        for (k = a2 - 3; ; k -= 3)
        {
          BOOL v54 = v19 < v46;
          if (v19 == v46)
          {
            int v55 = k[1];
            BOOL v54 = v21 < v55;
            if (v21 == v55) {
              BOOL v54 = v45 < k[2];
            }
          }
          if (!v54) {
            break;
          }
          int v56 = *(k - 3);
          int v46 = v56;
        }
      }
      while (j < k)
      {
        int v152 = j[2];
        uint64_t v147 = *(void *)j;
        uint64_t v57 = *(void *)k;
        j[2] = k[2];
        *(void *)j = v57;
        k[2] = v152;
        *(void *)k = v147;
        do
        {
          int v58 = j[3];
          j += 3;
          BOOL v59 = v19 < v58;
          if (v19 == v58)
          {
            int v60 = j[1];
            BOOL v59 = v21 < v60;
            if (v21 == v60) {
              BOOL v59 = v45 < j[2];
            }
          }
        }
        while (!v59);
        do
        {
          int v61 = *(k - 3);
          k -= 3;
          BOOL v62 = v19 < v61;
          if (v19 == v61)
          {
            int v63 = k[1];
            BOOL v62 = v21 < v63;
            if (v21 == v63) {
              BOOL v62 = v45 < k[2];
            }
          }
        }
        while (v62);
      }
      BOOL v4 = j - 3 >= v9;
      BOOL v5 = j - 3 == v9;
      if (j - 3 != v9)
      {
        uint64_t v64 = *(void *)(j - 3);
        v9[2] = *(j - 1);
        *(void *)uint64_t v9 = v64;
      }
      a4 = 0;
      *(j - 3) = v19;
      *(j - 2) = v21;
      *(j - 1) = v45;
    }
  }
  long long v71 = j + 3;
  BOOL v73 = j == a2 || v71 == a2;
  if ((a4 & 1) == 0)
  {
    if (v73) {
      return result;
    }
    while (1)
    {
      v135 = v9;
      uint64_t v9 = v71;
      int v136 = v135[3];
      if (v136 == *v135) {
        break;
      }
      if (v136 < *v135)
      {
        int v137 = v135[4];
LABEL_228:
        int v140 = v135[5];
        do
        {
          v141 = v135;
          *(void *)(v135 + 3) = *(void *)v135;
          v135[5] = v135[2];
          int v142 = *(v135 - 3);
          v135 -= 3;
          BOOL v143 = v136 < v142;
          if (v136 == v142)
          {
            int v144 = *(v141 - 2);
            BOOL v143 = v137 < v144;
            if (v137 == v144) {
              BOOL v143 = v140 < *(v141 - 1);
            }
          }
        }
        while (v143);
        int *v141 = v136;
        v141[1] = v137;
        v141[2] = v140;
      }
LABEL_234:
      long long v71 = v9 + 3;
      if (v9 + 3 == a2) {
        return result;
      }
    }
    int v137 = v135[4];
    int v138 = v135[1];
    BOOL v139 = v137 < v138;
    if (v137 == v138) {
      BOOL v139 = v135[5] < v135[2];
    }
    if (!v139) {
      goto LABEL_234;
    }
    goto LABEL_228;
  }
  if (v73) {
    return result;
  }
  uint64_t v74 = 0;
  long long v75 = j;
  while (2)
  {
    long long v76 = v75;
    long long v75 = v71;
    int v77 = v76[3];
    if (v77 == *v76)
    {
      int v78 = v76[4];
      int v79 = v76[1];
      BOOL v80 = v78 < v79;
      if (v78 == v79) {
        BOOL v80 = v76[5] < v76[2];
      }
      if (!v80) {
        goto LABEL_152;
      }
    }
    else
    {
      if (v77 >= *v76) {
        goto LABEL_152;
      }
      int v78 = v76[4];
    }
    int v81 = v76[5];
    *(void *)long long v75 = *(void *)v76;
    v75[2] = v76[2];
    uint64_t v82 = j;
    if (v76 == j) {
      goto LABEL_151;
    }
    uint64_t v83 = v74;
    while (2)
    {
      float v84 = (char *)j + v83;
      int v85 = *(int *)((char *)j + v83 - 12);
      BOOL v86 = v77 < v85;
      if (v77 == v85)
      {
        int v87 = *((_DWORD *)v84 - 2);
        if (v78 == v87)
        {
          BOOL v86 = v81 < *(int *)((char *)j + v83 - 4);
          goto LABEL_145;
        }
        if (v78 >= v87)
        {
          uint64_t v82 = (int *)((char *)j + v83);
          goto LABEL_151;
        }
      }
      else
      {
LABEL_145:
        if (!v86)
        {
          uint64_t v82 = v76;
          goto LABEL_151;
        }
      }
      v76 -= 3;
      *(void *)float v84 = *(void *)((char *)j + v83 - 12);
      *((_DWORD *)v84 + 2) = *(int *)((char *)j + v83 - 4);
      v83 -= 12;
      if (v83) {
        continue;
      }
      break;
    }
    uint64_t v82 = j;
LABEL_151:
    *uint64_t v82 = v77;
    v82[1] = v78;
    v82[2] = v81;
LABEL_152:
    long long v71 = v75 + 3;
    v74 += 12;
    if (v75 + 3 != a2) {
      continue;
    }
    return result;
  }
}

int *sub_216F53E9C(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result = sub_216F544B8(a1, a2, a3, a4);
  BOOL v11 = *a5 < *a4;
  if (*a5 == *a4)
  {
    int v12 = a5[1];
    int v13 = a4[1];
    BOOL v11 = v12 < v13;
    if (v12 == v13) {
      BOOL v11 = a5[2] < a4[2];
    }
  }
  if (v11)
  {
    int v14 = a4[2];
    uint64_t v15 = *(void *)a4;
    int v16 = a5[2];
    *(void *)a4 = *(void *)a5;
    a4[2] = v16;
    *(void *)a5 = v15;
    a5[2] = v14;
    BOOL v17 = *a4 < *a3;
    if (*a4 == *a3)
    {
      int v18 = a4[1];
      int v19 = a3[1];
      BOOL v17 = v18 < v19;
      if (v18 == v19) {
        BOOL v17 = a4[2] < a3[2];
      }
    }
    if (v17)
    {
      int v20 = a3[2];
      uint64_t v21 = *(void *)a3;
      int v22 = a4[2];
      *(void *)a3 = *(void *)a4;
      a3[2] = v22;
      *(void *)a4 = v21;
      a4[2] = v20;
      BOOL v23 = *a3 < *a2;
      if (*a3 == *a2)
      {
        int v24 = a3[1];
        int v25 = a2[1];
        BOOL v23 = v24 < v25;
        if (v24 == v25) {
          BOOL v23 = a3[2] < a2[2];
        }
      }
      if (v23)
      {
        int v26 = a2[2];
        uint64_t v27 = *(void *)a2;
        int v28 = a3[2];
        *(void *)a2 = *(void *)a3;
        a2[2] = v28;
        *(void *)a3 = v27;
        a3[2] = v26;
        BOOL v29 = *a2 < *a1;
        if (*a2 == *a1)
        {
          int v30 = a2[1];
          int v31 = a1[1];
          BOOL v29 = v30 < v31;
          if (v30 == v31) {
            BOOL v29 = a2[2] < a1[2];
          }
        }
        if (v29)
        {
          int v32 = a1[2];
          uint64_t v33 = *(void *)a1;
          int v34 = a2[2];
          *(void *)a1 = *(void *)a2;
          a1[2] = v34;
          *(void *)a2 = v33;
          a2[2] = v32;
        }
      }
    }
  }
  return result;
}

int *sub_216F54054(int *result, int *a2, _DWORD *a3)
{
  int v3 = *a2;
  BOOL v4 = *a2 < *result;
  if (*a2 == *result)
  {
    int v5 = a2[1];
    int v6 = result[1];
    BOOL v4 = v5 < v6;
    if (v5 == v6) {
      BOOL v4 = a2[2] < result[2];
    }
  }
  if (!v4)
  {
    BOOL v13 = *a3 < v3;
    if (*a3 == v3)
    {
      int v14 = a3[1];
      int v15 = a2[1];
      BOOL v13 = v14 < v15;
      if (v14 == v15) {
        BOOL v13 = a3[2] < a2[2];
      }
    }
    if (v13)
    {
      int v16 = a2[2];
      uint64_t v17 = *(void *)a2;
      int v18 = a3[2];
      *(void *)a2 = *(void *)a3;
      a2[2] = v18;
      *(void *)a3 = v17;
      a3[2] = v16;
      BOOL v19 = *a2 < *result;
      if (*a2 == *result)
      {
        int v20 = a2[1];
        int v21 = result[1];
        BOOL v19 = v20 < v21;
        if (v20 == v21) {
          BOOL v19 = a2[2] < result[2];
        }
      }
      if (v19)
      {
        int v22 = result[2];
        uint64_t v23 = *(void *)result;
        int v24 = a2[2];
        *(void *)uint64_t result = *(void *)a2;
        result[2] = v24;
        *(void *)a2 = v23;
        a2[2] = v22;
      }
    }
    return result;
  }
  BOOL v7 = *a3 < v3;
  if (*a3 == v3)
  {
    int v8 = a3[1];
    int v9 = a2[1];
    BOOL v7 = v8 < v9;
    if (v8 == v9) {
      BOOL v7 = a3[2] < a2[2];
    }
  }
  if (v7)
  {
    int v10 = result[2];
    uint64_t v11 = *(void *)result;
    int v12 = a3[2];
    *(void *)uint64_t result = *(void *)a3;
    result[2] = v12;
LABEL_29:
    *(void *)a3 = v11;
    a3[2] = v10;
    return result;
  }
  int v25 = result[2];
  uint64_t v26 = *(void *)result;
  int v27 = a2[2];
  *(void *)uint64_t result = *(void *)a2;
  result[2] = v27;
  *(void *)a2 = v26;
  a2[2] = v25;
  BOOL v28 = *a3 < (int)v26;
  if (*a3 == v26)
  {
    int v29 = a3[1];
    int v30 = a2[1];
    BOOL v28 = v29 < v30;
    if (v29 == v30) {
      BOOL v28 = a3[2] < a2[2];
    }
  }
  if (v28)
  {
    int v10 = a2[2];
    uint64_t v11 = *(void *)a2;
    int v31 = a3[2];
    *(void *)a2 = *(void *)a3;
    a2[2] = v31;
    goto LABEL_29;
  }
  return result;
}

BOOL sub_216F54224(int *a1, int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = a2 - 3;
      int v7 = *(a2 - 3);
      BOOL v8 = v7 < *a1;
      if (v7 == *a1)
      {
        int v9 = *(a2 - 2);
        int v10 = a1[1];
        BOOL v8 = v9 < v10;
        if (v9 == v10) {
          BOOL v8 = *(a2 - 1) < a1[2];
        }
      }
      if (v8)
      {
        int v11 = a1[2];
        uint64_t v12 = *(void *)a1;
        int v13 = *(a2 - 1);
        *(void *)a1 = *(void *)v6;
        a1[2] = v13;
        *(void *)int v6 = v12;
        *(a2 - 1) = v11;
      }
      return result;
    case 3uLL:
      sub_216F54054(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_216F544B8(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_216F53E9C(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      int v14 = a1 + 6;
      sub_216F54054(a1, a1 + 3, a1 + 6);
      int v15 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    int v18 = *v15;
    if (*v15 != *v14) {
      break;
    }
    int v19 = v15[1];
    int v20 = v14[1];
    BOOL v21 = v19 < v20;
    if (v19 == v20) {
      BOOL v21 = v15[2] < v14[2];
    }
    if (v21) {
      goto LABEL_17;
    }
LABEL_29:
    int v14 = v15;
    v16 += 12;
    v15 += 3;
    if (v15 == a2) {
      return 1;
    }
  }
  if (v18 >= *v14) {
    goto LABEL_29;
  }
  int v19 = v15[1];
LABEL_17:
  int v22 = v15[2];
  *(void *)int v15 = *(void *)v14;
  v15[2] = v14[2];
  uint64_t v23 = a1;
  if (v14 != a1)
  {
    uint64_t v24 = v16;
    do
    {
      int v25 = *(int *)((char *)a1 + v24 + 12);
      if (v18 == v25)
      {
        int v26 = *(int *)((char *)a1 + v24 + 16);
        BOOL v27 = v19 < v26;
        if (v19 == v26) {
          BOOL v27 = v22 < *(int *)((char *)a1 + v24 + 20);
        }
        if (!v27)
        {
          uint64_t v23 = v14;
          goto LABEL_28;
        }
      }
      else if (v18 >= v25)
      {
        uint64_t v23 = (int *)((char *)a1 + v24 + 24);
        goto LABEL_28;
      }
      v14 -= 3;
      *(void *)((char *)a1 + v24 + 24) = *(void *)((char *)a1 + v24 + 12);
      *(int *)((char *)a1 + v24 + 32) = *(int *)((char *)a1 + v24 + 20);
      v24 -= 12;
    }
    while (v24 != -24);
    uint64_t v23 = a1;
  }
LABEL_28:
  int *v23 = v18;
  v23[1] = v19;
  v23[2] = v22;
  if (++v17 != 8) {
    goto LABEL_29;
  }
  return v15 + 3 == a2;
}

int *sub_216F544B8(int *a1, int *a2, int *a3, int *a4)
{
  BOOL result = sub_216F54054(a1, a2, a3);
  BOOL v9 = *a4 < *a3;
  if (*a4 == *a3)
  {
    int v10 = a4[1];
    int v11 = a3[1];
    BOOL v9 = v10 < v11;
    if (v10 == v11) {
      BOOL v9 = a4[2] < a3[2];
    }
  }
  if (v9)
  {
    int v12 = a3[2];
    uint64_t v13 = *(void *)a3;
    int v14 = a4[2];
    *(void *)a3 = *(void *)a4;
    a3[2] = v14;
    *(void *)a4 = v13;
    a4[2] = v12;
    BOOL v15 = *a3 < *a2;
    if (*a3 == *a2)
    {
      int v16 = a3[1];
      int v17 = a2[1];
      BOOL v15 = v16 < v17;
      if (v16 == v17) {
        BOOL v15 = a3[2] < a2[2];
      }
    }
    if (v15)
    {
      int v18 = a2[2];
      uint64_t v19 = *(void *)a2;
      int v20 = a3[2];
      *(void *)a2 = *(void *)a3;
      a2[2] = v20;
      *(void *)a3 = v19;
      a3[2] = v18;
      BOOL v21 = *a2 < *a1;
      if (*a2 == *a1)
      {
        int v22 = a2[1];
        int v23 = a1[1];
        BOOL v21 = v22 < v23;
        if (v22 == v23) {
          BOOL v21 = a2[2] < a1[2];
        }
      }
      if (v21)
      {
        int v24 = a1[2];
        uint64_t v25 = *(void *)a1;
        int v26 = a2[2];
        *(void *)a1 = *(void *)a2;
        a1[2] = v26;
        *(void *)a2 = v25;
        a2[2] = v24;
      }
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::~UsdGeomVisibilityAPI(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  int v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    BOOL v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76D2E0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    BOOL v9 = "usdGeom/visibilityAPI.cpp";
    int v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdGeomVisibilityAPI pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::Get(cons"
                            "t UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    int v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76D2E0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F547D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this)
{
  return 5;
}

uint64_t sub_216F547F8(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B931E8, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdGeomVisibilityAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216F549E0(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76D2E0;
  }
  else
  {
    int v5 = 1;
    int v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76D2E0;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216F549CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F549E0(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B931E8, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdGeomVisibilityAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B931F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B931F0))
  {
    __cxa_guard_release(&qword_267B931F0);
  }
  return &qword_267B931E8;
}

void sub_216F54B14(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93200, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *)__cxa_guard_acquire(&qword_267B93200);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_GetStaticTfType(v2);
      byte_267B931F8 = sub_216D16508((char *)&qword_267B931E8, v3, v4);
      __cxa_guard_release(&qword_267B93200);
    }
  }
  return byte_267B931F8;
}

void sub_216F54B94(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this)
{
  return &qword_267B931E8;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetGuideVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  int v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    int v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 400), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F54C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::CreateGuideVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 400), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetProxyVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  int v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    int v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 904), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F54DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::CreateProxyVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 904), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetRenderVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  int v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    int v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 960), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F54F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::CreateRenderVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 960), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93220, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93220))
  {
    int v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      int v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v4 = *((void *)v3 + 50);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v5) {
      int v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v6 = *((void *)v5 + 113);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v7) {
      int v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v8 = *((void *)v7 + 120);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B93208, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93208, &dword_216758000);
    __cxa_guard_release(&qword_267B93220);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93240, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93240))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216F552D4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93228, &dword_216758000);
    __cxa_guard_release(&qword_267B93240);
  }
  if (v1) {
    return &qword_267B93228;
  }
  else {
    return &qword_267B93208;
  }
}

void sub_216F55250(_Unwind_Exception *a1)
{
}

void *sub_216F552D4(uint64_t **a1)
{
  qword_267B93230 = 0;
  unk_267B93238 = 0;
  qword_267B93228 = 0;
  sub_216973388((char **)&qword_267B93228, ((*(void *)algn_267B93210 - qword_267B93208) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93228, (void *)qword_267B93230, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93228, (void *)qword_267B93230, (uint64_t *)qword_267B93208, *(uint64_t **)algn_267B93210, (*(void *)algn_267B93210 - qword_267B93208) >> 3);
}

void sub_216F5536C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetPurposeVisibilityAttr(pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v6) {
    uint64_t v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 49) & 0xFFFFFFFFFFFFFFF8))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetGuideVisibilityAttr(this, a3);
  }
  else
  {
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v7) {
      int v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 111) & 0xFFFFFFFFFFFFFFF8))
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetProxyVisibilityAttr(this, a3);
    }
    else
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v8) {
        uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      unint64_t v9 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v9 == (*((void *)v8 + 119) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetRenderVisibilityAttr(this, a3);
      }
      else
      {
        v19[0] = "usdGeom/visibilityAPI.cpp";
        v19[1] = "GetPurposeVisibilityAttr";
        v19[2] = 219;
        v19[3] = "UsdAttribute pxrInternal__aapl__pxrReserved__::UsdGeomVisibilityAPI::GetPurposeVisibilityAttr(const TfToken &) const";
        char v20 = 0;
        if (v9)
        {
          uint64_t v10 = (const char *)(v9 + 16);
          if (*(char *)(v9 + 39) < 0) {
            uint64_t v10 = *(const char **)v10;
          }
        }
        else
        {
          uint64_t v10 = "";
        }
        sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
        sub_216D0162C((uint64_t)v12, &v17);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected purpose '%s' getting purpose visibility attribute for <%s>.", v10, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
        sub_21697C414(&v17);
        if ((v16 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
        sub_21697C414(&v14);
        if (v13) {
          sub_216D16E0C(v13);
        }
        *(_DWORD *)a3 = 3;
        *(void *)(a3 + 8) = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
        *(void *)(a3 + 24) = 0;
      }
    }
  }
}

void sub_216F555E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F55604()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F556E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F55734()
{
  sub_216F55DE4();
  sub_216779094(__p, "Xform");
  sub_216F55F10((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F55784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXform::~UsdGeomXform(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXform::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D338;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "usdGeom/xform.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdGeomXform pxrInternal__aapl__pxrReserved__::UsdGeomXform::Get(const UsdStagePtr &,"
                            " const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D338;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F55950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXform::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93250, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93250))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93248, "Xform");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93248, &dword_216758000);
    __cxa_guard_release(&qword_267B93250);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93248, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D338;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "usdGeom/xform.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdGeomXform pxrInternal__aapl__pxrReserved__::UsdGeomXform::Define(const UsdStagePtr"
                            " &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D338;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F55B5C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXform::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXform::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93260, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93260))
  {
    __cxa_guard_release(&qword_267B93260);
  }
  return &qword_267B93258;
}

void sub_216F55C04(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXform::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93270, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomXform *)__cxa_guard_acquire(&qword_267B93270);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomXform::_GetStaticTfType(v2);
      byte_267B93268 = sub_216D16508((char *)&qword_267B93258, v3, v4);
      __cxa_guard_release(&qword_267B93270);
    }
  }
  return byte_267B93268;
}

void sub_216F55C84(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXform::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
  return &qword_267B93258;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXform::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93290, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93290))
  {
    qword_267B93278 = 0;
    unk_267B93280 = 0;
    qword_267B93288 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93278, &dword_216758000);
    __cxa_guard_release(&qword_267B93290);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B932B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B932B0))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    qword_267B93298 = 0;
    unk_267B932A0 = 0;
    qword_267B932A8 = 0;
    sub_21698FA28(&qword_267B93298, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93298, &dword_216758000);
    __cxa_guard_release(&qword_267B932B0);
  }
  if (v1) {
    return &qword_267B93298;
  }
  else {
    return &qword_267B93278;
  }
}

void sub_216F55DCC(_Unwind_Exception *a1)
{
}

uint64_t *sub_216F55DE4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F06AAC((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F55EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F55F10(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F55FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D390;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "usdGeom/xformable.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdGeomXformable pxrInternal__aapl__pxrReserved__::UsdGeomXformable::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D390;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F5617C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B932C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B932C0))
  {
    __cxa_guard_release(&qword_267B932C0);
  }
  return &qword_267B932B8;
}

void sub_216F5620C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B932D0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)__cxa_guard_acquire(&qword_267B932D0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType(v2);
      byte_267B932C8 = sub_216D16508((char *)&qword_267B932B8, v3, v4);
      __cxa_guard_release(&qword_267B932D0);
    }
  }
  return byte_267B932C8;
}

void sub_216F5628C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  return &qword_267B932B8;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOpOrderAttr(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 1336), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F56364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::CreateXformOpOrderAttr(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1336), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 544), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  int v1 = (int)this;
  v7[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B932F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B932F0))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v4 = *((void *)v3 + 167);
    v7[0] = v4;
    if ((v4 & 7) != 0)
    {
      char v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = (uint64_t)v5;
      }
    }
    sub_216D30CFC(&qword_267B932D8, v7, 1uLL);
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B932D8, &dword_216758000);
    __cxa_guard_release(&qword_267B932F0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93310, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93310))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)1);
    sub_216F56604((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B932F8, &dword_216758000);
    __cxa_guard_release(&qword_267B93310);
  }
  if (v1) {
    return &qword_267B932F8;
  }
  else {
    return &qword_267B932D8;
  }
}

void sub_216F565BC(_Unwind_Exception *a1)
{
}

void *sub_216F56604(uint64_t **a1)
{
  qword_267B93300 = 0;
  unk_267B93308 = 0;
  qword_267B932F8 = 0;
  sub_216973388((char **)&qword_267B932F8, ((unk_267B932E0 - qword_267B932D8) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B932F8, (void *)qword_267B93300, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B932F8, (void *)qword_267B93300, (uint64_t *)qword_267B932D8, unk_267B932E0, (unk_267B932E0 - qword_267B932D8) >> 3);
}

void sub_216F5669C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOpOrderAttr(a1, (uint64_t)&v4);
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v4, v1);
  if (IsDefined) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return IsDefined;
}

void sub_216F56750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  char v65 = 0;
  *(_OWORD *)&v63.__r_.__value_.__r.__words[1] = 0u;
  long long v64 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)a1);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a2, a4, a5, &v63);
  sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v63.__r_.__value_.__r.__words[1], v12, v13);
  int v14 = v65;
  sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v63.__r_.__value_.__r.__words[1], v15, v16);
  uint64_t v19 = &v65[v63.__r_.__value_.__l.__size_];
  if (v14 != v19)
  {
    while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (v63.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v14 == v19)
      {
        int v14 = &v65[v63.__r_.__value_.__l.__size_];
        break;
      }
    }
  }
  sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v63.__r_.__value_.__r.__words[1], v17, v18);
  if (v14 == &v65[v63.__r_.__value_.__l.__size_])
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a2, a4, 0, (std::string *)&v62);
    LODWORD(v54) = 3;
    int v55 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v56);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v56 + 1);
    uint64_t v57 = 0;
    int v59 = 0;
    sub_216D16CFC((uint64_t)&__p, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v62, (uint64_t)&v66);
    if ((v46 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    sub_21697C414(&v45);
    if (v44) {
      sub_216D16E0C(v44);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v66, v22))
    {
      std::string __p = (void *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v66);
      if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetPrecisionFromValueTypeName((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&__p, v23) != a3)
      {
        std::string __p = "usdGeom/xformable.cpp";
        BOOL v44 = (atomic_ullong *)"AddXformOp";
        uint64_t v45 = 208;
        unint64_t v46 = (unint64_t)"UsdGeomXformOp pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(const UsdG"
                                "eomXformOp::Type, const UsdGeomXformOp::Precision, const TfToken &, BOOL) const";
        char v47 = 0;
        sub_216D0162C((uint64_t)&v66, &v52);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v52);
        uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v66);
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (atomic_uint **)&v51);
        unint64_t v25 = v51 & 0xFFFFFFFFFFFFFFF8;
        if ((v51 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          int v26 = (const char *)(v25 + 16);
          if (*(char *)(v25 + 39) < 0) {
            int v26 = *(const char **)v26;
          }
        }
        else
        {
          int v26 = "";
        }
        pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C76D428, a3, (uint64_t)&v38);
        if (v41 >= 0) {
          BOOL v28 = (const char *)&v38;
        }
        else {
          BOOL v28 = (const char *)v38;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"XformOp <%s> has typeName '%s' which does not match the requested precision '%s'. Proceeding to use existing typeName / precision.", Text, v26, v28);
        if (SHIBYTE(v41) < 0) {
          operator delete(v38);
        }
        if ((v51 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
        sub_21697C414(&v52);
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&__p, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v66, a5);
      sub_216F59DA0((uint64_t)&v54, (uint64_t)&__p);
      int v60 = v48;
      char v61 = v49;
      sub_216EF9DC0((uint64_t)&__p);
    }
    else
    {
      sub_216D16CFC((uint64_t)&v38, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(&__p, &v38, a2, a3, a4, a5);
      sub_216F59DA0((uint64_t)&v54, (uint64_t)&__p);
      int v60 = v48;
      char v61 = v49;
      sub_216EF9DC0((uint64_t)&__p);
      if ((v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
      sub_21697C414(&v40);
      if (v39) {
        sub_216D16E0C(v39);
      }
    }
    if ((v69 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v68);
    sub_21697C414(&v67);
    if (v66.__type_name) {
      sub_216D16E0C((atomic_ullong *)v66.__type_name);
    }
    int v29 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v54);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v29, v30))
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v54, (atomic_uint **)&__p);
      sub_216F5A290((uint64_t)&v63.__r_.__value_.__l.__size_, &__p);
      if ((__p & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v66.__type_name = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::CreateXformOpOrderAttr((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)a1, &v66, 0, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
    }
    std::string __p = "usdGeom/xformable.cpp";
    BOOL v44 = (atomic_ullong *)"AddXformOp";
    uint64_t v45 = 224;
    unint64_t v46 = (unint64_t)"UsdGeomXformOp pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(const UsdGeomX"
                            "formOp::Type, const UsdGeomXformOp::Precision, const TfToken &, BOOL) const";
    char v47 = 0;
    uint64_t v31 = a2;
    int v32 = (std::type_info_vtbl *)&v66;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C76D438, v31, (uint64_t)&v66);
    if (v68 < 0) {
      int v32 = v66.__vftable;
    }
    uint64_t v33 = a3;
    int v34 = (const char *)&v38;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C76D428, v33, (uint64_t)&v38);
    if (v41 < 0) {
      int v34 = (const char *)v38;
    }
    sub_216D1E2AC(a1, &v52);
    uint64_t v35 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v52);
    unint64_t v36 = *a4 & 0xFFFFFFFFFFFFFFF8;
    if (v36)
    {
      int v37 = (const char *)(v36 + 16);
      if (*(char *)(v36 + 39) < 0) {
        int v37 = *(const char **)v37;
      }
    }
    else
    {
      int v37 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to add xform op of type %s and precision %s on prim at path <%s>. opSuffix=%s, isInverseOp=%d", (const char *)v32, v34, v35, v37, a5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v53);
    sub_21697C414(&v52);
    if (SHIBYTE(v41) < 0) {
      operator delete(v38);
    }
    if (SHIBYTE(v68) < 0) {
      operator delete(v66.__vftable);
    }
    *(_DWORD *)a6 = 3;
    *(void *)(a6 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 20));
    *(void *)(a6 + 24) = 0;
    *(_DWORD *)(a6 + 120) = 0;
    sub_216EF9DC0((uint64_t)&v54);
    if ((v62 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    BOOL v54 = "usdGeom/xformable.cpp";
    int v55 = "AddXformOp";
    uint64_t v56 = 190;
    uint64_t v57 = "UsdGeomXformOp pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp(const UsdGeomXformOp::Type, cons"
          "t UsdGeomXformOp::Precision, const TfToken &, BOOL) const";
    char v58 = 0;
    std::string::size_type v20 = v63.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
    if ((v63.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      BOOL v21 = (const char *)(v20 + 16);
      if (*(char *)(v20 + 39) < 0) {
        BOOL v21 = *(const char **)v21;
      }
    }
    else
    {
      BOOL v21 = "";
    }
    sub_216F57024((uint64_t *)&v63.__r_.__value_.__l.__size_);
    if (v45 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v54, 1, (pxrInternal__aapl__pxrReserved__ *)"The xformOp '%s' already exists in xformOpOrder [%s].", v21, p_p);
    if (SHIBYTE(v45) < 0) {
      operator delete(__p);
    }
    *(_DWORD *)a6 = 3;
    *(void *)(a6 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 20));
    *(void *)(a6 + 24) = 0;
    *(_DWORD *)(a6 + 120) = 0;
  }
  if ((v63.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v63.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2169B2E0C(&v63.__r_.__value_.__l.__size_);
}

void sub_216F56E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,int a44,__int16 a45,char a46,char a47)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

uint64_t sub_216F57024(uint64_t *a1)
{
  sub_21677B834((uint64_t)v3);
  uint64_t v6 = a1[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v3, a1, (uint64_t)&v6, (void (*)(uint64_t, void *))sub_2169B2DF4);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216F57174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetXformOp(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v31 = 0;
  *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = 0u;
  long long v30 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)a1);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a2, a3, a4, &v29);
  sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v29.__r_.__value_.__r.__words[1], v10, v11);
  uint64_t v12 = v31;
  sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v29.__r_.__value_.__r.__words[1], v13, v14);
  uint64_t v17 = &v31[v29.__r_.__value_.__l.__size_];
  if (v12 != v17)
  {
    while ((*v12 & 0xFFFFFFFFFFFFFFF8) != (v29.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v12 == v17)
      {
        uint64_t v12 = &v31[v29.__r_.__value_.__l.__size_];
        break;
      }
    }
  }
  sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v29.__r_.__value_.__r.__words[1], v15, v16);
  if (v12 == &v31[v29.__r_.__value_.__l.__size_])
  {
    *(_DWORD *)a5 = 3;
    *(void *)(a5 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a5 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a5 + 20));
    *(void *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 120) = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a2, a3, 0, (std::string *)&v28);
    sub_216D16CFC((uint64_t)&v18, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, (uint64_t)v23);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_21697C414(&v20);
    if (v19) {
      sub_216D16E0C(v19);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)a5, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v23, a4);
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
    sub_21697C414(&v25);
    if (v24) {
      sub_216D16E0C(v24);
    }
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  if ((v29.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2169B2E0C(&v29.__r_.__value_.__l.__size_);
}

void sub_216F57384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_216D2EDA0((uint64_t)va);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2169B2E0C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTranslateOp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTranslateOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddScaleOp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetScaleOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateXOp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateXOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateYOp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateYOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateZOp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateZOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateXYZOp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateXYZOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateXZYOp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateXZYOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateYXZOp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateYXZOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateYZXOp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateYZXOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateZXYOp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateZXYOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddRotateZYXOp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetRotateZYXOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddOrientOp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrientOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTransformOp(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTransformOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::SetResetXformStack(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this, int a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue(this);
  if (!a2)
  {
    int v23 = 0;
    memset(v22, 0, sizeof(v22));
    if (!*(void *)&v24[0])
    {
LABEL_15:
      sub_2169B2E0C(v22);
      goto LABEL_22;
    }
    unint64_t v6 = 0;
    char v7 = 0;
    while (1)
    {
      sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v24, v4, v5);
      uint64_t v8 = v25;
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v9) {
        uint64_t v9 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      if ((*(void *)(v8 + 8 * v6) & 0xFFFFFFFFFFFFFFF8) == (*((void *)v9 + 13) & 0xFFFFFFFFFFFFFFF8)) {
        break;
      }
      if (v7)
      {
        sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v24, v4, v5);
        sub_216F5A46C((uint64_t)v22, (uint64_t *)(v25 + 8 * v6));
LABEL_12:
        ++v6;
        char v7 = 1;
        if (v6 >= *(void *)&v24[0])
        {
          v26.__type_name = 0;
          pxrInternal__aapl__pxrReserved__::UsdGeomXformable::CreateXformOpOrderAttr(this, &v26, 0, (uint64_t)&v21);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
        }
      }
      else
      {
        char v7 = 0;
        if (++v6 >= *(void *)&v24[0]) {
          goto LABEL_15;
        }
      }
    }
    sub_2169B2EC0(v22);
    goto LABEL_12;
  }
  if (!sub_216F57974((uint64_t *)v24))
  {
    sub_2169B28F8((uint64_t)v22, *(void *)&v24[0] + 1);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
    if (!v12) {
      uint64_t v12 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
    }
    sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v22, v10, v11);
    sub_2168D2318(v23, (void *)v12 + 13);
    if (*(void *)&v24[0])
    {
      unint64_t v15 = 0;
      uint64_t v16 = 1;
      do
      {
        sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v24, v13, v14);
        uint64_t v17 = v25;
        sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v22, v18, v19);
        ++v15;
        sub_2168D2318(&v23[v16], (void *)(v17 + v16 * 8 - 8));
        ++v16;
      }
      while (v15 < *(void *)&v24[0]);
    }
    v26.__type_name = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::CreateXformOpOrderAttr(this, &v26, 0, (uint64_t)&v21);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
  }
LABEL_22:
  sub_2169B2E0C(v24);
  return 1;
}

void sub_216F578C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

BOOL sub_216F57974(uint64_t *a1)
{
  unint64_t v2 = (void *)a1[4];
  uint64_t v3 = *a1;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (v4)
  {
    if (!v3) {
      return v2 != (void *)(a1[4] + 8 * *a1);
    }
  }
  else
  {
    uint64_t v4 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
    if (!v3) {
      return v2 != (void *)(a1[4] + 8 * *a1);
    }
  }
  uint64_t v5 = &v2[v3];
  uint64_t v6 = 8 * v3;
  while ((*v2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v4 + 13) & 0xFFFFFFFFFFFFFFF8))
  {
    ++v2;
    v6 -= 8;
    if (!v6)
    {
      unint64_t v2 = v5;
      return v2 != (void *)(a1[4] + 8 * *a1);
    }
  }
  return v2 != (void *)(a1[4] + 8 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetResetXformStack(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  BOOL v1 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue(this) & 1) != 0
    && sub_216F57974((uint64_t *)v3);
  sub_2169B2E0C(v3);
  return v1;
}

void sub_216F57A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::SetXformOpOrder(uint64_t a1, void *a2, unsigned int a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  memset(v28, 0, sizeof(v28));
  sub_216F57EA8((uint64_t *)v28, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a2[1] - *a2) >> 3) + a3);
  if (a3)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
    if (!v8) {
      uint64_t v8 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
    }
    sub_216F5A46C((uint64_t)v28, (uint64_t *)v8 + 13);
  }
  for (long long i = *(_OWORD *)a2; ; sub_216F57F9C(&i))
  {
    if ((void)i == *((void *)&i + 1))
    {
      v30.__type_name = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::CreateXformOpOrderAttr((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)a1, &v30, 0, (uint64_t)&v22);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
    }
    uint64_t v9 = sub_216F57F20(&i, v6, v7);
    uint64_t v10 = sub_216F0BE78(*v9);
    sub_216D16CFC((uint64_t)&v22, (uint64_t *)(v10 + 8), (_DWORD *)(v10 + 16));
    sub_216D16CFC((uint64_t)&v30, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    BOOL v11 = v22 == LODWORD(v30.__vftable)
       && v23 == (atomic_ullong *)v30.__type_name
       && v24 == v31
       && (v25 & 0xFFFFFFFFFFFFFFF8) == (v32 & 0xFFFFFFFFFFFFFFF8);
    if ((v32 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
    sub_21697C414(&v31);
    if (v30.__type_name) {
      sub_216D16E0C((atomic_ullong *)v30.__type_name);
    }
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
    sub_21697C414(&v24);
    if (v23) {
      sub_216D16E0C(v23);
    }
    if (!v11) {
      break;
    }
    int v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp **)sub_216F57F20(&i, v12, v13);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(*v14, (atomic_uint **)&v22);
    sub_216F5A290((uint64_t)v28, &v22);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  unint64_t v22 = (unint64_t)"usdGeom/xformable.cpp";
  int v23 = (atomic_ullong *)"SetXformOpOrder";
  uint64_t v24 = 512;
  unint64_t v25 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::SetXformOpOrder(const vector<UsdGeomX"
                          "formOp> &, BOOL) const";
  char v26 = 0;
  unint64_t v15 = sub_216F57F20(&i, v12, v13);
  uint64_t v16 = sub_216F0BE78(*v15);
  sub_216D0162C(v16, (int *)&v30);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
  sub_216D1E2AC(a1, &v20);
  uint64_t v18 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"XformOp attribute <%s> does not belong to schema prim <%s>.", Text, v18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_21697C414(&v20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30.__vftable + 1);
  sub_21697C414(&v30);
  sub_2169B2E0C(v28);
  return 0;
}

void sub_216F57DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

void sub_216F57EA8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t *)a1[4];
  if (!v4)
  {
    if (!a2) {
      return;
    }
    uint64_t v6 = sub_2169B3164((uint64_t)a1, a2);
    goto LABEL_9;
  }
  if (a1[3]) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = v4 - 1;
  }
  if (*v5 < a2)
  {
    uint64_t v6 = sub_2169B3204((uint64_t)a1, v4, a2, *a1);
LABEL_9:
    char v7 = v6;
    sub_2169B2E0C(a1);
    a1[4] = (uint64_t)v7;
  }
}

void *sub_216F57F20(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::U"
            "sdGeomXformOp>>::operator->() [T = const std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216F57F9C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    _OWORD v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::UsdGeomXformOp>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::UsdGeom"
            "XformOp>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 136;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::ClearXformOpOrder(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  memset(v3, 0, sizeof(v3));
  uint64_t v1 = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::SetXformOpOrder((uint64_t)this, v3, 0);
  char v4 = (void **)v3;
  sub_216EF9D3C(&v4);
  return v1;
}

void sub_216F5806C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216EF9D3C((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::MakeMatrixXform(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::ClearXformOpOrder(this);
  BOOL v20 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(this, &v20, 0, (uint64_t *)&v15);
  char v4 = v15;
  int v5 = (char *)v16;
  uint64_t v8 = &v15;
  sub_216EF9D3C((void ***)&v8);
  if (v4 == v5)
  {
    unint64_t v15 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp((uint64_t)this, 13, 0, &v15, 0, a2);
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v15 = "usdGeom/xformable.cpp";
    uint64_t v16 = "MakeMatrixXform";
    uint64_t v17 = 533;
    uint64_t v18 = "UsdGeomXformOp pxrInternal__aapl__pxrReserved__::UsdGeomXformable::MakeMatrixXform() const";
    char v19 = 0;
    sub_216D16CFC((uint64_t)&v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
    sub_216D0162C((uint64_t)&v8, &v13);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v15, (pxrInternal__aapl__pxrReserved__ *)"Could not clear xformOpOrder for <%s>", v7, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_21697C414(&v13);
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_21697C414(&v10);
    if (v9) {
      sub_216D16E0C(v9);
    }
    *(_DWORD *)a2 = 3;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
    *(void *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 120) = 0;
  }
}

void sub_216F5820C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, BOOL *a2@<X1>, uint64_t *a3@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this@<X0>, BOOL *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a2)
  {
    *a2 = 0;
  }
  else
  {
    int v48 = "usdGeom/xformable.cpp";
    char v49 = "_GetOrderedXformOps";
    uint64_t v50 = 555;
    unint64_t v51 = "vector<UsdGeomXformOp> pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(BOOL *, BOOL) const";
    char v52 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"resetsXformStack is NULL.");
  }
  std::type_info v66 = 0;
  memset(v65, 0, sizeof(v65));
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue(this) & 1) != 0 && v65[0])
  {
    sub_216F58840(a4, v65[0]);
    uint64_t v8 = (uint64_t *)((char *)this + 8);
    uint64_t v9 = (_DWORD *)((char *)this + 16);
    int v34 = v8;
    sub_216D16CFC((uint64_t)v60, v8, v9);
    sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v65, v10, v11);
    for (long long i = v66; ; long long i = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)i + 8))
    {
      sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v65, v12, v13);
      if (i == (const pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)v66 + 8 * v65[0])) {
        break;
      }
      unint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v15) {
        unint64_t v15 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      if ((*(void *)i & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 13) & 0xFFFFFFFFFFFFFFF8))
      {
        if (a2) {
          *a2 = 1;
        }
        uint64_t v23 = *a4;
        for (uint64_t j = a4[1]; j != v23; uint64_t j = sub_216EF9DC0(j - 136))
          ;
        a4[1] = v23;
      }
      else
      {
        unsigned __int8 v59 = 0;
        pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetXformOpAttr((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v60, i, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v59, (uint64_t)v54);
        if (a3)
        {
          pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v53);
          pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v48, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v54);
          unint64_t v17 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
          if (!v17) {
            pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
          }
          unint64_t v18 = v53;
          unint64_t v19 = atomic_load((unint64_t *)(v17 + 144));
          if (v18 >= v19
            || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v53, (atomic_ullong *)v17))
          {
            unint64_t v20 = a4[1];
            if (v20 >= a4[2])
            {
              uint64_t v21 = sub_216F5A700(a4, (uint64_t)&v48, &v59);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(a4[1], &v48, v59);
              uint64_t v21 = v20 + 136;
              a4[1] = v20 + 136;
            }
            a4[1] = v21;
          }
          else
          {
            uint64_t v43 = "usdGeom/xformable.cpp";
            BOOL v44 = (atomic_ullong *)"_GetOrderedXformOps";
            uint64_t v45 = 602;
            unint64_t v46 = (unint64_t)"vector<UsdGeomXformOp> pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrder"
                                    "edXformOps(BOOL *, BOOL) const";
            char v47 = 0;
            unint64_t v28 = *(void *)i & 0xFFFFFFFFFFFFFFF8;
            if (v28)
            {
              uint64_t v29 = (const char *)(v28 + 16);
              if (*(char *)(v28 + 39) < 0) {
                uint64_t v29 = *(const char **)v29;
              }
            }
            else
            {
              uint64_t v29 = "";
            }
            sub_216D16CFC((uint64_t)&v35, v34, v9);
            sub_216D0162C((uint64_t)&v35, &v41);
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v43, (pxrInternal__aapl__pxrReserved__ *)"Unable to get attribute associated with the xformOp '%s', on the prim at path <%s>. Skipping xformOp in the computation of the local transformation at prim.", v33, v29, Text);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
            sub_21697C414(&v41);
            if ((v40 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
            sub_21697C414(&v38);
            if (v37) {
              sub_216D16E0C(v37);
            }
          }
          sub_216D2FE74((uint64_t)&v48);
          pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v53);
        }
        else if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v54, v16))
        {
          unint64_t v24 = a4[1];
          if (v24 >= a4[2])
          {
            uint64_t v25 = sub_216F5A810(a4, (uint64_t)v54, &v59);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(a4[1], v54, v59);
            uint64_t v25 = v24 + 136;
            a4[1] = v24 + 136;
          }
          a4[1] = v25;
        }
        else
        {
          int v48 = "usdGeom/xformable.cpp";
          char v49 = "_GetOrderedXformOps";
          uint64_t v50 = 620;
          unint64_t v51 = "vector<UsdGeomXformOp> pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(BOOL *, BOOL) const";
          char v52 = 0;
          unint64_t v26 = *(void *)i & 0xFFFFFFFFFFFFFFF8;
          if (v26)
          {
            uint64_t v27 = (const char *)(v26 + 16);
            if (*(char *)(v26 + 39) < 0) {
              uint64_t v27 = *(const char **)v27;
            }
          }
          else
          {
            uint64_t v27 = "";
          }
          sub_216D16CFC((uint64_t)&v43, v34, v9);
          sub_216D0162C((uint64_t)&v43, &v35);
          std::type_info v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v48, (pxrInternal__aapl__pxrReserved__ *)"Unable to get attribute associated with the xformOp '%s', on the prim at path <%s>. Skipping xformOp in the computation of the local transformation at prim.", v31, v27, v30);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
          sub_21697C414(&v35);
          if ((v46 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
          sub_21697C414(&v45);
          if (v44) {
            sub_216D16E0C(v44);
          }
        }
        if ((v58 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v57);
        sub_21697C414(&v56);
        if (v55) {
          sub_216D16E0C(v55);
        }
      }
    }
    if ((v64 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
    sub_21697C414(&v62);
    if (v61) {
      sub_216D16E0C(v61);
    }
  }
  sub_2169B2E0C(v65);
}

void sub_216F5873C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  sub_216D16AD8(v28 - 176);
  sub_2169B2E0C((void *)(v28 - 144));
  sub_216EF9D3C(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_216F58840(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xF0F0F0F0F0F0F0F1 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x1E1E1E1E1E1E1E2) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_216D3D750(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 136 * v6;
    sub_216F5A5FC(a1, v7);
    return sub_216F5A6B0((uint64_t)v7);
  }
  return result;
}

void sub_216F588E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F5A6B0((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery *pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::XformQuery(pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery *this, const pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(a2, (BOOL *)this + 24, 1, (uint64_t *)&v4);
  sub_216EFAA10((void **)this);
  *(_OWORD *)this = v4;
  *((void *)this + 2) = v5;
  uint64_t v5 = 0;
  long long v4 = 0uLL;
  uint64_t v6 = (void **)&v4;
  sub_216EF9D3C(&v6);
  return this;
}

void sub_216F58974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation(uint64_t *a1, _OWORD *a2, double a3)
{
  return pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(a2, a1, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(_OWORD *a1, uint64_t *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v23, 1.0);
  uint64_t v7 = *a2;
  for (i = a2[1]; i != *a2; uint64_t v7 = *a2)
  {
    if (i - 136 != v7
      && (v9 = sub_216F0BE78(i - 136), uint64_t v10 = sub_216F0BE78(i - 272), *(_DWORD *)v9 == *(_DWORD *)v10)
      && *(void *)(v9 + 8) == *(void *)(v10 + 8)
      && *(void *)(v9 + 16) == *(void *)(v10 + 16)
      && (*(void *)(v9 + 24) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v10 + 24) & 0xFFFFFFFFFFFFFFF8)
      && (*(unsigned char *)(i - 4) != 0) != (*(unsigned char *)(i - 140) != 0))
    {
      i -= 136;
    }
    else
    {
      memset(v22, 0, sizeof(v22));
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(i - 136, v22, a3);
      int v11 = (_OWORD *)atomic_load((unint64_t *)&qword_267B93318);
      if (!v11)
      {
        int v11 = operator new(0x80uLL);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v24, 1.0);
        uint64_t v12 = 0;
        long long v13 = v29;
        void v11[4] = v28;
        v11[5] = v13;
        long long v14 = v31;
        v11[6] = v30;
        v11[7] = v14;
        long long v15 = v25;
        *int v11 = v24;
        v11[1] = v15;
        long long v16 = v27;
        v11[2] = v26;
        void v11[3] = v16;
        atomic_compare_exchange_strong(&qword_267B93318, (unint64_t *)&v12, (unint64_t)v11);
        if (v12)
        {
          operator delete(v11);
          int v11 = (_OWORD *)atomic_load((unint64_t *)&qword_267B93318);
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==((double *)v22, (double *)v11)) {
        double v6 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v23, (double *)v22);
      }
    }
    i -= 136;
  }
  if (a1)
  {
    long long v17 = v23[5];
    a1[4] = v23[4];
    a1[5] = v17;
    long long v18 = v23[7];
    a1[6] = v23[6];
    a1[7] = v18;
    long long v19 = v23[1];
    *a1 = v23[0];
    a1[1] = v19;
    long long v20 = v23[3];
    a1[2] = v23[2];
    a1[3] = v20;
  }
  else
  {
    *(void *)&long long v24 = "usdGeom/xformable.cpp";
    *((void *)&v24 + 1) = "GetLocalTransformation";
    *(void *)&long long v25 = 965;
    *((void *)&v25 + 1) = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(GfMat"
                            "rix4d *, const vector<UsdGeomXformOp> &, const UsdTimeCode)";
    LOBYTE(v26) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"'transform' pointer is NULL.", v6);
  }
  return a1 != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::HasNonEmptyXformOpOrder(pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery *this)
{
  return *(void *)this != *((void *)this + 1);
}

uint64_t sub_216F58BD8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3 = a1[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v3;
  if (v7 == v3) {
    return 0;
  }
  do
  {
    long long v4 = (unsigned int **)sub_216F57F20(&v7, a2, a3);
    uint64_t v5 = sub_216F58EA0(*v4);
    if (v5) {
      break;
    }
    sub_216F57F9C(&v7);
  }
  while (v7 != v8);
  return v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue(this);
  sub_2169B2E0C(v2);
  return 0;
}

void sub_216F58E38(_Unwind_Exception *a1)
{
  sub_2169B2E0C((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_216F58EA0(unsigned int *a1)
{
  uint64_t v1 = a1[30];
  if (v1 == -1) {
    sub_2168BBB60();
  }
  long long v4 = &v3;
  return off_26C76D408[v1]((int)&v4, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::TransformMightBeTimeVarying(uint64_t a1, uint64_t *a2, char *a3)
{
  if (*a2 == a2[1]) {
    return 0;
  }
  else {
    return sub_216F58BD8(a2, (uint64_t)a2, a3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamples(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xFFF0000000000000;
  char v4 = 0;
  uint64_t v5 = 0x7FF0000000000000;
  char v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamplesInInterval(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamplesInInterval(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v8 = a1[1] - v6;
  if (v8 == 136)
  {
    return sub_216F59098(v6, (uint64_t)a2, a3);
  }
  else
  {
    long long v16 = 0;
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    sub_216D68A48((uint64_t *)&v16, 0xF0F0F0F0F0F0F0F1 * (v8 >> 3));
    uint64_t v10 = *a1;
    uint64_t v11 = a1[1];
    if (*a1 != v11)
    {
      do
      {
        uint64_t v12 = sub_216F0BE78(v10);
        unint64_t v13 = v17;
        if (v17 >= v18)
        {
          uint64_t v14 = sub_216D6D338((uint64_t *)&v16, v12);
        }
        else
        {
          sub_216D3B3EC((uint64_t)&v18, v17, v12);
          uint64_t v14 = v13 + 32;
        }
        unint64_t v17 = v14;
        v10 += 136;
      }
      while (v10 != v11);
    }
    uint64_t UnionedTimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetUnionedTimeSamplesInInterval(&v16, a2, a3);
    long long v19 = &v16;
    sub_216D6CFF8((void ***)&v19);
    return UnionedTimeSamplesInInterval;
  }
}

void sub_216F5906C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216D6CFF8(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_216F59098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v3 = *(unsigned int *)(a1 + 120);
  if (v3 == -1) {
    sub_2168BBB60();
  }
  uint64_t v6 = v5;
  return ((uint64_t (*)(void **, uint64_t))off_26C76D418[v3])(&v6, a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamplesInInterval(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  BOOL v8 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(a1, &v8, 0, v7);
  uint64_t TimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamplesInInterval(v7, a2, a3);
  uint64_t v9 = (void **)v7;
  sub_216EF9D3C(&v9);
  return TimeSamplesInInterval;
}

void sub_216F5915C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216EF9D3C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetTimeSamples(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xFFF0000000000000;
  char v4 = 0;
  uint64_t v5 = 0x7FF0000000000000;
  char v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetTimeSamplesInInterval(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetTimeSamplesInInterval(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v8 = a1[1] - v6;
  if (v8 == 136)
  {
    sub_216F59098(v6, (uint64_t)a2, a3);
    uint64_t v8 = a1[1] - *a1;
  }
  long long v15 = 0;
  long long v16 = 0;
  unint64_t v17 = 0;
  sub_216D2F24C((uint64_t *)&v15, 0xF0F0F0F0F0F0F0F1 * (v8 >> 3));
  uint64_t v9 = (const pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)*a1;
  uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)a1[1];
  while (v9 != v10)
  {
    if (*((_DWORD *)v9 + 30) != 1) {
      sub_2168BBB60();
    }
    uint64_t v11 = v16;
    if ((unint64_t)v16 >= v17)
    {
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)sub_216F5A920((uint64_t *)&v15, v9);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(v16, v9);
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)((char *)v11 + 120);
    }
    long long v16 = v12;
    uint64_t v9 = (const pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)((char *)v9 + 136);
  }
  uint64_t UnionedTimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetUnionedTimeSamplesInInterval(&v15, a2, a3);
  unint64_t v18 = &v15;
  sub_216D2FF70((void ***)&v18);
  return UnionedTimeSamplesInInterval;
}

void sub_216F592B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216D2FF70(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamples(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1, uint64_t a2)
{
  BOOL v6 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetOrderedXformOps(a1, &v6, 0, v5);
  uint64_t v7 = (void **)0xFFF0000000000000;
  char v8 = 0;
  uint64_t v9 = 0x7FF0000000000000;
  char v10 = 0;
  uint64_t TimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamplesInInterval(v5, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v7, a2);
  uint64_t v7 = (void **)v5;
  sub_216EF9D3C(&v7);
  return TimeSamplesInInterval;
}

void sub_216F59364(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  sub_216EF9D3C((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::IsAttributeIncludedInLocalTransform(pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, char *a3)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v11 = *(void *)this;
  uint64_t v12 = v3;
  if (v11 == v3) {
    return 0;
  }
  do
  {
    uint64_t v5 = sub_216F57F20(&v11, (uint64_t)a2, a3);
    BOOL v6 = (_DWORD *)sub_216F0BE78(*v5);
    unint64_t v7 = *(void *)sub_216D563F8(v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    BOOL v9 = v7 == v8;
    if (v7 == v8) {
      break;
    }
    sub_216F57F9C(&v11);
  }
  while (v11 != v12);
  return v9;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1, uint64_t a2, unsigned char *a3, double a4)
{
  if (!a2)
  {
    __s1[0] = "usdGeom/xformable.cpp";
    __s1[1] = "GetLocalTransformation";
    *(void *)&long long v71 = 846;
    *((void *)&v71 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(GfMatrix4d *"
                            ", BOOL *, const UsdTimeCode) const";
    LOBYTE(v72) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__s1, 1, (pxrInternal__aapl__pxrReserved__ *)"transform is NULL.");
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)__s1, 1.0);
  long long v7 = v75;
  *(_OWORD *)(a2 + 64) = v74;
  *(_OWORD *)(a2 + 80) = v7;
  long long v8 = v77;
  *(_OWORD *)(a2 + 96) = v76;
  *(_OWORD *)(a2 + 112) = v8;
  long long v9 = v71;
  *(_OWORD *)a2 = *(_OWORD *)__s1;
  *(_OWORD *)(a2 + 16) = v9;
  long long v10 = v73;
  *(_OWORD *)(a2 + 32) = v72;
  *(_OWORD *)(a2 + 48) = v10;
  if (!a3)
  {
    __s1[0] = "usdGeom/xformable.cpp";
    __s1[1] = "GetLocalTransformation";
    *(void *)&long long v71 = 853;
    *((void *)&v71 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(GfMatrix4d *"
                            ", BOOL *, const UsdTimeCode) const";
    LOBYTE(v72) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__s1, 1, (pxrInternal__aapl__pxrReserved__ *)"resetsXformStack is NULL.");
    return 0;
  }
  *a3 = 0;
  uint64_t v85 = 0;
  memset(v84, 0, sizeof(v84));
  unsigned int XformOpOrderValue = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetXformOpOrderValue(a1);
  unsigned int v67 = XformOpOrderValue;
  if (*(void *)&v84[0]) {
    char v14 = XformOpOrderValue;
  }
  else {
    char v14 = 0;
  }
  if (v14)
  {
    sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v84, v12, v13);
    uint64_t v17 = v85 + 8 * *(void *)&v84[0];
    unint64_t v18 = (uint64_t *)((char *)a1 + 8);
    long long v19 = (_DWORD *)((char *)a1 + 16);
    while (1)
    {
      sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v84, (uint64_t)v15, v16);
      if (v17 == v85) {
        goto LABEL_106;
      }
      sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v84, v20, v21);
      unint64_t v22 = (void *)(v17 - 8);
      if (v17 - 8 == v85) {
        goto LABEL_72;
      }
      EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F5A028();
      if ((*((void *)EmptyString + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        long long v24 = (const void **)((*((void *)EmptyString + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else
      {
        EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        long long v24 = (const void **)EmptyString;
      }
      if ((*v22 & 0xFFFFFFFFFFFFFFF8) != 0) {
        long long v25 = (uint64_t *)((*v22 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        long long v25 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      }
      Identifier = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v24, (const void **)v25, (uint64_t)__s1);
      if ((*(void *)(v17 - 16) & 0xFFFFFFFFFFFFFFF8) != 0) {
        long long v27 = (uint64_t *)((*(void *)(v17 - 16) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        long long v27 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Identifier);
      }
      long long v16 = (char *)__s1[1];
      if ((SBYTE7(v71) & 0x80u) == 0) {
        long long v28 = (void *)BYTE7(v71);
      }
      else {
        long long v28 = __s1[1];
      }
      uint64_t v29 = *((unsigned __int8 *)v27 + 23);
      int v30 = (char)v29;
      if ((v29 & 0x80u) != 0) {
        uint64_t v29 = v27[1];
      }
      if (v28 == (void *)v29)
      {
        if (v30 >= 0) {
          long long v15 = (unsigned __int8 *)v27;
        }
        else {
          long long v15 = (unsigned __int8 *)*v27;
        }
        if ((BYTE7(v71) & 0x80) != 0)
        {
          uint64_t v32 = __s1[0];
          if (!memcmp(__s1[0], v15, (size_t)__s1[1]))
          {
            operator delete(v32);
LABEL_98:
            v17 -= 8;
            goto LABEL_99;
          }
        }
        else
        {
          if (!BYTE7(v71)) {
            goto LABEL_98;
          }
          uint64_t v31 = 0;
          while (*((unsigned __int8 *)__s1 + v31) == v15[v31])
          {
            if (BYTE7(v71) == ++v31) {
              goto LABEL_98;
            }
          }
        }
      }
      uint64_t v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F5A028();
      if ((*((void *)v33 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        int v34 = (const void **)((*((void *)v33 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else
      {
        uint64_t v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
        int v34 = (const void **)v33;
      }
      if ((*(void *)(v17 - 16) & 0xFFFFFFFFFFFFFFF8) != 0) {
        int v35 = (uint64_t *)((*(void *)(v17 - 16) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        int v35 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
      }
      int v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v34, (const void **)v35, (uint64_t)&v86);
      if ((*v22 & 0xFFFFFFFFFFFFFFF8) != 0) {
        int v37 = (uint64_t *)((*v22 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        int v37 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
      }
      long long v16 = (char *)*((void *)&v86 + 1);
      if ((SBYTE7(v87[0]) & 0x80u) == 0) {
        uint64_t v38 = BYTE7(v87[0]);
      }
      else {
        uint64_t v38 = *((void *)&v86 + 1);
      }
      uint64_t v39 = *((unsigned __int8 *)v37 + 23);
      int v40 = (char)v39;
      if ((v39 & 0x80u) != 0) {
        uint64_t v39 = v37[1];
      }
      if (v38 != v39) {
        break;
      }
      if (v40 >= 0) {
        long long v15 = (unsigned __int8 *)v37;
      }
      else {
        long long v15 = (unsigned __int8 *)*v37;
      }
      if ((BYTE7(v87[0]) & 0x80) != 0)
      {
        uint64_t v50 = (void *)v86;
        BOOL v49 = memcmp((const void *)v86, v15, *((size_t *)&v86 + 1)) == 0;
        goto LABEL_66;
      }
      if (BYTE7(v87[0]))
      {
        uint64_t v41 = BYTE7(v87[0]) - 1;
        int v42 = (unsigned __int8 *)&v86;
        do
        {
          int v44 = *v42++;
          int v43 = v44;
          int v46 = *v15++;
          int v45 = v46;
          BOOL v48 = v41-- != 0;
          BOOL v49 = v43 == v45;
        }
        while (v43 == v45 && v48);
        if ((BYTE7(v87[0]) & 0x80) != 0) {
          goto LABEL_64;
        }
      }
      else
      {
        BOOL v49 = 1;
      }
LABEL_68:
      if (SBYTE7(v71) < 0)
      {
        operator delete(__s1[0]);
        if (v49) {
          goto LABEL_98;
        }
      }
      else if (v49)
      {
        goto LABEL_98;
      }
LABEL_72:
      unint64_t v51 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v51) {
        unint64_t v51 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      if ((*v22 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v51 + 13) & 0xFFFFFFFFFFFFFFF8))
      {
        *a3 = 1;
        goto LABEL_106;
      }
      BOOL v83 = 0;
      sub_216D16CFC((uint64_t)__s1, v18, v19);
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetXformOpAttr((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)__s1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(v17 - 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v83, (uint64_t)v78);
      if ((BYTE8(v71) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v71 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v71 + 1);
      sub_21697C414(&v71);
      if (__s1[1]) {
        sub_216D16E0C((atomic_ullong *)__s1[1]);
      }
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v78, v52))
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)__s1, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)v78, v83);
        unint64_t v53 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)__s1);
        if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v53, v54))
        {
          memset(v69, 0, sizeof(v69));
          pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform((uint64_t)__s1, v69, a4);
          int v55 = (_OWORD *)atomic_load((unint64_t *)&qword_267B93318);
          if (!v55)
          {
            int v55 = operator new(0x80uLL);
            pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v86, 1.0);
            uint64_t v61 = 0;
            long long v62 = v87[4];
            v55[4] = v87[3];
            v55[5] = v62;
            long long v63 = v87[6];
            v55[6] = v87[5];
            v55[7] = v63;
            long long v64 = v87[0];
            *int v55 = v86;
            v55[1] = v64;
            long long v65 = v87[2];
            v55[2] = v87[1];
            v55[3] = v65;
            atomic_compare_exchange_strong(&qword_267B93318, (unint64_t *)&v61, (unint64_t)v55);
            if (v61)
            {
              operator delete(v55);
              int v55 = (_OWORD *)atomic_load((unint64_t *)&qword_267B93318);
            }
          }
          if (!pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==((double *)v69, (double *)v55)) {
            pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)a2, (double *)v69);
          }
        }
        sub_216EF9DC0((uint64_t)__s1);
      }
      else
      {
        __s1[0] = "usdGeom/xformable.cpp";
        __s1[1] = "GetLocalTransformation";
        *(void *)&long long v71 = 904;
        *((void *)&v71 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(GfMatrix"
                                "4d *, BOOL *, const UsdTimeCode) const";
        LOBYTE(v72) = 0;
        unint64_t v56 = *v22 & 0xFFFFFFFFFFFFFFF8;
        if (v56)
        {
          int v57 = (const char *)(v56 + 16);
          if (*(char *)(v56 + 39) < 0) {
            int v57 = *(const char **)v57;
          }
        }
        else
        {
          int v57 = "";
        }
        uint64_t v58 = sub_216D16CFC((uint64_t)&v86, v18, v19);
        sub_216D0162C(v58, (int *)v69);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v69);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__s1, (pxrInternal__aapl__pxrReserved__ *)"Unable to get attribute associated with the xformOp '%s', on the prim at path <%s>. Skipping xformOp in the computation of the local transformation at prim.", v60, v57, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v69 + 1);
        sub_21697C414(v69);
        if ((BYTE8(v87[0]) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v87[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v87 + 1);
        sub_21697C414(v87);
        if (*((void *)&v86 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v86 + 1));
        }
      }
      if ((v82 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v81);
      sub_21697C414(&v80);
      if (v79) {
        sub_216D16E0C(v79);
      }
LABEL_99:
      v17 -= 8;
    }
    BOOL v49 = 0;
    if ((BYTE7(v87[0]) & 0x80) == 0) {
      goto LABEL_68;
    }
LABEL_64:
    uint64_t v50 = (void *)v86;
LABEL_66:
    operator delete(v50);
    goto LABEL_68;
  }
LABEL_106:
  sub_2169B2E0C(v84);
  return v67;
}

void sub_216F59A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1, _OWORD *a2, BOOL *a3, uint64_t *a4, double a5)
{
  if (a3)
  {
    *a3 = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetResetXformStack(a1);
  }
  else
  {
    v9[0] = "usdGeom/xformable.cpp";
    v9[1] = "GetLocalTransformation";
    v9[2] = 924;
    void v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(GfMatrix4d *, BOOL *, const "
            "vector<UsdGeomXformOp> &, const UsdTimeCode) const";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"resetsXformStack is NULL.");
  }
  return pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation(a2, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::IsTransformationAffectedByAttrNamed(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    uint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v3 + 167) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }

  return pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(this, a2);
}

uint64_t *sub_216F59C70()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F48EC4((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F59D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216F59DA0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 120);
  uint64_t v4 = *(unsigned int *)(a2 + 120);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26C76D3D8[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 120) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26C76D3E8[v4])(&v5, result, a2);
}

int *sub_216F59E30(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_216F59E40(*a1, a2, a3);
}

uint64_t sub_216F59E38(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_216F59EF0(*a1, a2, a3);
}

int *sub_216F59E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 120))
  {
    return (int *)sub_216EFAD28(a1, a3);
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)a3;
    uint64_t v6 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    int v7 = *(atomic_ullong **)(a2 + 8);
    *(void *)(a2 + 8) = v6;
    if (v7) {
      sub_216D16E0C(v7);
    }
    sub_21697DE94((int *)(a2 + 16), (int *)(a3 + 16));
    uint64_t result = sub_21697DEEC((int *)(a2 + 20), (int *)(a3 + 20));
    if (a3 != a2)
    {
      uint64_t v8 = *(void *)(a2 + 24);
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)(a2 + 24) = *(void *)(a3 + 24);
      *(void *)(a3 + 24) = 0;
    }
  }
  return result;
}

uint64_t sub_216F59EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 120) == 1) {
    return sub_216EFE730(a2, a3);
  }
  else {
    return sub_216EFAE44(a1, a3);
  }
}

uint64_t sub_216F59F10(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 120) = -1;
  sub_216F59F48(a1, a2);
  return a1;
}

uint64_t sub_216F59F48(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 120);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26C76D3D8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 120) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 120);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26C76D3F8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 120) = v5;
  }
  return result;
}

uint64_t sub_216F59FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216D41CB0(a2, a3);
}

uint64_t sub_216F59FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_216D300C4(a2, a3);
}

BOOL sub_216F59FF0(int a1, pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying(this, this);
}

BOOL sub_216F59FF8(int a1, pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(this, this);
}

uint64_t sub_216F5A000(const pxrInternal__aapl__pxrReserved__::Usd_PrimData ***a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamplesInInterval(a2, **a1, (uint64_t)(*a1)[1]);
}

uint64_t sub_216F5A014(const pxrInternal__aapl__pxrReserved__::Usd_PrimData ***a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(a2, **a1, (uint64_t)(*a1)[1]);
}

unint64_t sub_216F5A028()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B93320);
  if (!v0)
  {
    uint64_t v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "transform", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "!invert!", 0);
    uint64_t v3 = *(atomic_uint **)v0;
    long long v15 = v3;
    if ((v3 & 7) != 0)
    {
      uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        long long v15 = v4;
      }
    }
    uint64_t v5 = (atomic_uint *)*v2;
    uint64_t v16 = v5;
    if ((v5 & 7) != 0)
    {
      char v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v16 = v6;
      }
    }
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    unint64_t v13 = (void **)(v0 + 16);
    char v14 = 0;
    char v7 = (char *)operator new(0x10uLL);
    uint64_t v8 = 0;
    *((void *)v0 + 2) = v7;
    *((void *)v0 + 3) = v7;
    *((void *)v0 + 4) = v7 + 16;
    do
    {
      long long v9 = (&v15)[v8];
      *(void *)&v7[v8 * 8] = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v7[v8 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v8;
    }
    while (v8 != 2);
    *((void *)v0 + 3) = v7 + 16;
    for (uint64_t i = 1; i != -1; --i)
    {
      uint64_t v11 = (&v15)[i];
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v12 = 0;
    atomic_compare_exchange_strong(&qword_267B93320, (unint64_t *)&v12, (unint64_t)v0);
    if (v12)
    {
      unint64_t v13 = (void **)(v0 + 16);
      sub_216889A04(&v13);
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B93320);
    }
  }
  return (unint64_t)v0;
}

void sub_216F5A208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

void sub_216F5A290(uint64_t a1, void *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_15;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_15;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        char v7 = (uint64_t *)a1;
      }
      else {
        char v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(void *)(v5 + 8 * v4) = *a2;
      *a2 = 0;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_15:
    uint64_t v9 = 1;
    do
    {
      unint64_t v10 = v9;
      v9 *= 2;
    }
    while (v10 < v4 + 1);
    uint64_t v11 = sub_2169B3204(a1, *(uint64_t **)(a1 + 32), v10, *(void *)a1);
    v11[v4] = *a2;
    *a2 = 0;
    sub_2169B2E0C((void *)a1);
    *(void *)(a1 + 32) = v11;
    goto LABEL_13;
  }
  v13[0] = "vt/array.h";
  v13[1] = "emplace_back";
  v13[2] = 433;
  void v13[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::TfToken, Args = <pxrInternal__aapl__pxrReserved__::TfToken>]";
  char v14 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v12 = 4;
    }
    else {
      int v12 = 3;
    }
  }
  else
  {
    int v12 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v12);
}

pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *sub_216F5A3E0(atomic_ullong *a1)
{
  uint64_t result = sub_216F5A428();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType::~UsdGeomXformOpTypes_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *sub_216F5A428()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)operator new(0x88uLL);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType::UsdGeomXformOpTypes_StaticTokenType(v0);
  return v0;
}

void sub_216F5A458(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216F5A46C(uint64_t a1, uint64_t *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_17;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_17;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        char v7 = (uint64_t *)a1;
      }
      else {
        char v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      uint64_t v9 = *a2;
      *(void *)(v5 + 8 * v4) = *a2;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)(v5 + 8 * v4) &= 0xFFFFFFFFFFFFFFF8;
      }
LABEL_15:
      ++*(void *)a1;
      return;
    }
LABEL_17:
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    int v12 = sub_2169B3204(a1, *(uint64_t **)(a1 + 32), v11, *(void *)a1);
    unint64_t v13 = v12;
    uint64_t v14 = *a2;
    v12[v4] = *a2;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12[v4] &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_2169B2E0C((void *)a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_15;
  }
  v16[0] = "vt/array.h";
  v16[1] = "emplace_back";
  v16[2] = 433;
  void v16[3] = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::emplace_back(Args "
           "&&...) [T = pxrInternal__aapl__pxrReserved__::TfToken, Args = <const pxrInternal__aapl__pxrReserved__::TfToken &>]";
  char v17 = 0;
  if (*(_DWORD *)(a1 + 12))
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v15 = 4;
    }
    else {
      int v15 = 3;
    }
  }
  else
  {
    int v15 = 2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Array rank %u != 1", v15);
}

uint64_t sub_216F5A5FC(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v5 == *a1)
  {
    uint64_t result = a2[1];
  }
  else
  {
    do
    {
      uint64_t result = sub_216F59F10(v6 - 136, v5 - 136);
      int v8 = *(_DWORD *)(v5 - 8);
      *(unsigned char *)(v6 - 4) = *(unsigned char *)(v5 - 4);
      *(_DWORD *)(v6 - 8) = v8;
      v5 -= 136;
      uint64_t v6 = result;
    }
    while (v5 != v4);
  }
  a2[1] = result;
  uint64_t v9 = *a1;
  *a1 = result;
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216F5A6B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    sub_216EF9DC0(i - 136);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216F5A700(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x1E1E1E1E1E1E1E1) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0xF0F0F0F0F0F0F0) {
    unint64_t v11 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v11 = v6;
  }
  long long v19 = a1 + 2;
  if (v11) {
    int v12 = (char *)sub_216D3D750(v9, v11);
  }
  else {
    int v12 = 0;
  }
  int v15 = v12;
  uint64_t v16 = &v12[136 * v5];
  char v17 = v16;
  unint64_t v18 = &v12[136 * v11];
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(v16, a2, *a3);
  char v17 = v16 + 136;
  sub_216F5A5FC(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216F5A6B0((uint64_t)&v15);
  return v13;
}

void sub_216F5A7FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F5A6B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F5A810(uint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x1E1E1E1E1E1E1E1) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0xF0F0F0F0F0F0F0) {
    unint64_t v11 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v11 = v6;
  }
  long long v19 = a1 + 2;
  if (v11) {
    int v12 = (char *)sub_216D3D750(v9, v11);
  }
  else {
    int v12 = 0;
  }
  int v15 = v12;
  uint64_t v16 = &v12[136 * v5];
  char v17 = v16;
  unint64_t v18 = &v12[136 * v11];
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(v16, a2, *a3);
  char v17 = v16 + 136;
  sub_216F5A5FC(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216F5A6B0((uint64_t)&v15);
  return v13;
}

void sub_216F5A90C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F5A6B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F5A920(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x111111111111111) {
    unint64_t v9 = 0x222222222222222;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_216D3007C(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)&v10[120 * v4];
  uint64_t v16 = &v10[120 * v9];
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(v14, a2);
  int v15 = (char *)v14 + 120;
  sub_216D2FFF4(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216D30178((uint64_t)&v13);
  return v11;
}

void sub_216F5AA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D30178((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType::~UsdGeomXformOpTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *this)
{
  int v15 = (void **)((char *)this + 112);
  sub_216889A04(&v15);
  uint64_t v2 = *((void *)this + 13);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 12);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 11);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 10);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 9);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 8);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 7);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 6);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 5);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 4);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 3);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 2);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 1);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType::UsdGeomXformOpTypes_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *this)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  unint64_t v22 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "translate", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v22, "scale", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "rotateX", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "rotateY", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "rotateZ", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "rotateXYZ", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "rotateXZY", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "rotateYXZ", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "rotateYZX", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "rotateZXY", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "rotateZYX", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "orient", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "transform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "!resetXformStack!", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v23 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v22;
  uint64_t v24 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v25 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v26 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v27 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v28 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v29 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v30 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v31 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v32 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v33 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v34 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v35 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v36 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  uint64_t v16 = (char *)operator new(0x70uLL);
  uint64_t v17 = 0;
  *((void *)this + 14) = v16;
  *((void *)this + 15) = v16;
  *((void *)this + 16) = v16 + 112;
  do
  {
    uint64_t v18 = *(uint64_t *)((char *)&v23 + v17);
    *(void *)&v16[v17] = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v16[v17] &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 += 8;
  }
  while (v17 != 112);
  *((void *)this + 15) = v16 + 112;
  for (uint64_t i = 104; i != -8; i -= 8)
  {
    uint64_t v20 = *(uint64_t *)((char *)&v23 + i);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216F5B08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void **a15, uint64_t a16, char a17)
{
  sub_216889A04(&a15);
  uint64_t v27 = 104;
  while (1)
  {
    uint64_t v28 = *(void *)(&a17 + v27);
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v27 -= 8;
    if (v27 == -8)
    {
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216F5B26C()
{
}

void sub_216F5B274()
{
}

void sub_216F5B27C()
{
}

void sub_216F5B284()
{
}

void sub_216F5B28C()
{
}

void sub_216F5B298()
{
  sub_216779094(v2, "UsdGeomXformOp::TypeInvalid");
  sub_216779094(__p, "");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::TypeTranslate");
  sub_216779094(__p, "translate");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::TypeScale");
  sub_216779094(__p, "scale");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::TypeRotateX");
  sub_216779094(__p, "rotateX");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::TypeRotateY");
  sub_216779094(__p, "rotateY");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::TypeRotateZ");
  sub_216779094(__p, "rotateZ");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 5, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::TypeRotateXYZ");
  sub_216779094(__p, "rotateXYZ");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::TypeRotateXZY");
  sub_216779094(__p, "rotateXZY");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 7, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::TypeRotateYXZ");
  sub_216779094(__p, "rotateYXZ");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 8, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::TypeRotateYZX");
  sub_216779094(__p, "rotateYZX");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 9, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::TypeRotateZXY");
  sub_216779094(__p, "rotateZXY");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 10, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::TypeRotateZYX");
  sub_216779094(__p, "rotateZYX");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 11, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::TypeOrient");
  sub_216779094(__p, "orient");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 12, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::TypeTransform");
  sub_216779094(__p, "transform");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D438, 13, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::PrecisionDouble");
  sub_216779094(__p, "Double");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D428, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::PrecisionFloat");
  sub_216779094(__p, "Float");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D428, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdGeomXformOp::PrecisionHalf");
  sub_216779094(__p, "Half");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D428, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216F5B894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, char a3)
{
  uint64_t v6 = sub_216D3C05C((uint64_t)this, (uint64_t)a2);
  *(_DWORD *)(v6 + 120) = 0;
  *(_DWORD *)(v6 + 128) = 0;
  *(unsigned char *)(v6 + 132) = a3;
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, v7))
  {
    uint64_t v8 = (_DWORD *)sub_216F0BE78((uint64_t)this);
    uint64_t v9 = sub_216D563F8(v8);
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216F0BE78((uint64_t)this);
    pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName(v10, v19);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v9, v11))
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v17);
      *((_DWORD *)this + 32) = pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTypeEnum((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v17, v12);
      if (((uint64_t)v17[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      v17[0] = (void **)"usdGeom/xformOp.cpp";
      v17[1] = (void **)"UsdGeomXformOp";
      v17[2] = (void **)133;
      v17[3] = (void **)"pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(const UsdAttribute &, BOOL)";
      char v18 = 0;
      sub_216D0162C((uint64_t)a2, &v15);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid xform op: <%s>.", Text);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
      sub_21697C414(&v15);
    }
    v17[0] = (void **)v19;
    sub_216782F20(v17);
  }
  return this;
}

void sub_216F5BA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a11 = (void **)&a16;
  sub_216782F20(&a11);
  sub_216EF9DC0(v16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  char v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F5C4B8();
  if ((*(void *)v3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v4 = (uint64_t *)((*(void *)v3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  if (*((char *)v4 + 23) >= 0) {
    uint64_t v5 = (const char *)v4;
  }
  else {
    uint64_t v5 = (const char *)*v4;
  }
  int v6 = *((char *)EmptyString + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v7 = EmptyString[1];
  }
  size_t v8 = strlen(v5);
  if (v7 < v8) {
    return 0;
  }
  size_t v10 = v8;
  if (v6 >= 0) {
    uint64_t v11 = (const char *)EmptyString;
  }
  else {
    uint64_t v11 = (const char *)*EmptyString;
  }
  return strncmp(v11, v5, v10) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTypeEnum(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  char v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v3) {
    char v3 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v3 + 12) & 0xFFFFFFFFFFFFFFF8)) {
    return 13;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v4) {
    uint64_t v4 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*(void *)v4 & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v5) {
    uint64_t v5 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v5 + 5) & 0xFFFFFFFFFFFFFFF8)) {
    return 6;
  }
  int v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v6) {
    int v6 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8)) {
    return 2;
  }
  size_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v7) {
    size_t v7 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 2) & 0xFFFFFFFFFFFFFFF8)) {
    return 3;
  }
  size_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v8) {
    size_t v8 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 3) & 0xFFFFFFFFFFFFFFF8)) {
    return 4;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v9) {
    uint64_t v9 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v9 + 4) & 0xFFFFFFFFFFFFFFF8)) {
    return 5;
  }
  size_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v10) {
    size_t v10 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 6) & 0xFFFFFFFFFFFFFFF8)) {
    return 7;
  }
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v11) {
    uint64_t v11 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 7) & 0xFFFFFFFFFFFFFFF8)) {
    return 8;
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v12) {
    uint64_t v12 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v12 + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 9;
  }
  uint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v13) {
    uint64_t v13 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 9) & 0xFFFFFFFFFFFFFFF8)) {
    return 10;
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v14) {
    uint64_t v14 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v14 + 10) & 0xFFFFFFFFFFFFFFF8)) {
    return 11;
  }
  int v15 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  if (!v15) {
    int v15 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 11) & 0xFFFFFFFFFFFFFFF8)) {
    return 12;
  }
  if (!pxrInternal__aapl__pxrReserved__::TfToken::operator==(this, ""))
  {
    v19[0] = "usdGeom/xformOp.cpp";
    v19[1] = "GetOpTypeEnum";
    v19[2] = 311;
    uint64_t v19[3] = "static UsdGeomXformOp::Type pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTypeEnum(const TfToken &)";
    char v20 = 0;
    unint64_t v16 = *(void *)this & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      uint64_t v17 = (const char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0) {
        uint64_t v17 = *(const char **)v17;
      }
    }
    else
    {
      uint64_t v17 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid xform opType token '%s'.", v17);
  }
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_Init(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this)
{
  uint64_t v2 = (_DWORD *)sub_216F0BE78((uint64_t)this);
  char v3 = sub_216D563F8(v2);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93330, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93330))
  {
    byte_267B93328 = sub_216D33724();
    __cxa_guard_release(&qword_267B93330);
  }
  unint64_t v4 = *(void *)v3 & 0xFFFFFFFFFFFFFFF8;
  if (v4)
  {
    uint64_t v5 = (char *)(v4 + 16);
    if (*(char *)(v4 + 39) < 0) {
      uint64_t v5 = *(char **)v5;
    }
  }
  else
  {
    uint64_t v5 = "";
  }
  int v6 = byte_267B93328;
  size_t v7 = strchr(v5, byte_267B93328);
  if (v7)
  {
    size_t v8 = v7 + 1;
    uint64_t v9 = strchr(v7 + 1, v6);
    if (!v9) {
      uint64_t v9 = &v8[strlen(v8)];
    }
    int OpTypeEnumFromCString = pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetOpTypeEnumFromCString((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v8, (const char *)(v9 - v8));
    *((_DWORD *)this + 32) = OpTypeEnumFromCString;
    if (!OpTypeEnumFromCString)
    {
      unint64_t v16 = "usdGeom/xformOp.cpp";
      uint64_t v17 = "_Init";
      uint64_t v18 = 159;
      long long v19 = "void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_Init()";
      char v20 = 0;
      sub_21682E90C(__p, v8, v9, v9 - v8);
      if (v15 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid xform opType token '%s'.", (const char *)v11);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    unint64_t v16 = "usdGeom/xformOp.cpp";
    uint64_t v17 = "_Init";
    uint64_t v18 = 148;
    long long v19 = "void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_Init()";
    char v20 = 0;
    uint64_t v12 = sub_216F0BE78((uint64_t)this);
    sub_216D0162C(v12, (int *)__p);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid xform op: <%s>.", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
  }
}

void sub_216F5C104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetOpTypeEnumFromCString(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const char *a2)
{
  v4[0] = this;
  v4[1] = a2;
  if (a2 == (const char *)5)
  {
    if (!strncmp("scale", (const char *)this, 5uLL)) {
      return 2;
    }
  }
  else if (a2 == (const char *)7)
  {
    if (!strncmp("rotateX", (const char *)this, 7uLL)) {
      return 3;
    }
    if (!strncmp("rotateY", (const char *)this, 7uLL)) {
      return 4;
    }
  }
  else if (a2 == (const char *)9)
  {
    if (!strncmp("transform", (const char *)this, 9uLL)) {
      return 13;
    }
    if (!strncmp("translate", (const char *)this, 9uLL)) {
      return 1;
    }
    if (!strncmp("rotateXYZ", (const char *)this, 9uLL)) {
      return 6;
    }
  }
  if (sub_216F5D27C((uint64_t)v4, "rotateZ")) {
    return 5;
  }
  if (sub_216F5D27C((uint64_t)v4, "rotateXZY")) {
    return 7;
  }
  if (sub_216F5D27C((uint64_t)v4, "rotateYXZ")) {
    return 8;
  }
  if (sub_216F5D27C((uint64_t)v4, "rotateYZX")) {
    return 9;
  }
  if (sub_216F5D27C((uint64_t)v4, "rotateZXY")) {
    return 10;
  }
  if (sub_216F5D27C((uint64_t)v4, "rotateZYX")) {
    return 11;
  }
  if (sub_216F5D27C((uint64_t)v4, "orient")) {
    return 12;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = sub_216D3C05C(a1, a2);
  *(_DWORD *)(v5 + 120) = 0;
  *(_DWORD *)(v5 + 128) = 0;
  *(unsigned char *)(v5 + 132) = a3;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_Init((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v5);
  return a1;
}

{
  uint64_t v5;

  uint64_t v5 = sub_216D300C4(a1, a2);
  *(_DWORD *)(v5 + 120) = 1;
  *(_DWORD *)(v5 + 128) = 0;
  *(unsigned char *)(v5 + 132) = a3;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_Init((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v5);
  return a1;
}

void sub_216F5C34C(_Unwind_Exception *a1)
{
  sub_216EF9DC0(v1);
  _Unwind_Resume(a1);
}

void sub_216F5C3A4(_Unwind_Exception *a1)
{
  sub_216EF9DC0(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this@<X0>, atomic_uint **a2@<X8>)
{
  if (*((unsigned char *)this + 132))
  {
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F5C4B8();
    if ((*((void *)v4 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*((void *)v4 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    }
    size_t v10 = (_DWORD *)sub_216F0BE78((uint64_t)this);
    uint64_t v11 = sub_216D563F8(v10);
    if ((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v12 = (uint64_t *)((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)EmptyString, (const void **)v12, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (v14 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    int v6 = (_DWORD *)sub_216F0BE78((uint64_t)this);
    size_t v7 = sub_216D563F8(v6);
    size_t v8 = *(atomic_uint **)v7;
    *a2 = *(atomic_uint **)v7;
    if ((v8 & 7) != 0)
    {
      uint64_t v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v9;
      }
    }
  }
}

void sub_216F5C49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_216F5C4B8()
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v0 = (unint64_t *)atomic_load((unint64_t *)&qword_267B93338);
  if (!v0)
  {
    uint64_t v0 = (unint64_t *)operator new(0x60uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "xformOp:", 0);
    uint64_t v24 = (uint64_t *)(v0 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 1, "!invert!xformOp:", 0);
    uint64_t v2 = (uint64_t *)(v0 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 2, "!invert!", 0);
    char v3 = (uint64_t *)(v0 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 3, "xformOp:transform", 0);
    unint64_t v4 = (uint64_t *)(v0 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 4, "xformOp:rotateX", 0);
    uint64_t v5 = (uint64_t *)(v0 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 5, "xformOp:rotateY", 0);
    int v6 = (uint64_t *)(v0 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 6, "xformOp:rotateZ", 0);
    size_t v7 = (uint64_t *)(v0 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 7, "xformOp:orient", 0);
    size_t v8 = (uint64_t *)(v0 + 8);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "transform", 0);
    unint64_t v9 = *v0;
    unint64_t v25 = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v10 = *v24;
    uint64_t v26 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = *v2;
    uint64_t v27 = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v12 = *v3;
    uint64_t v28 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v13 = *v4;
    uint64_t v29 = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v14 = *v5;
    uint64_t v30 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = *v6;
    uint64_t v31 = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v16 = *v7;
    uint64_t v32 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v17 = *v8;
    uint64_t v33 = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    v0[9] = 0;
    v0[10] = 0;
    v0[11] = 0;
    uint64_t v18 = (char *)operator new(0x48uLL);
    uint64_t v19 = 0;
    v0[9] = (unint64_t)v18;
    v0[10] = (unint64_t)v18;
    v0[11] = (unint64_t)(v18 + 72);
    do
    {
      unint64_t v20 = *(unint64_t *)((char *)&v25 + v19);
      *(void *)&v18[v19] = v20;
      if ((v20 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v18[v19] &= 0xFFFFFFFFFFFFFFF8;
      }
      v19 += 8;
    }
    while (v19 != 72);
    v0[10] = (unint64_t)(v18 + 72);
    for (uint64_t i = 64; i != -8; i -= 8)
    {
      unint64_t v22 = *(unint64_t *)((char *)&v25 + i);
      if ((v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v23 = 0;
    atomic_compare_exchange_strong(&qword_267B93338, (unint64_t *)&v23, (unint64_t)v0);
    if (v23)
    {
      unint64_t v25 = (unint64_t)(v0 + 9);
      sub_216889A04((void ***)&v25);
      if ((*v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B93338);
    }
  }
  return (unint64_t)v0;
}

void sub_216F5C94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void **a11, uint64_t a12, char a13)
{
  sub_216889A04(&a11);
  uint64_t v22 = 64;
  while (1)
  {
    uint64_t v23 = *(void *)(&a13 + v22);
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v22 -= 8;
    if (v22 == -8)
    {
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v13);
      _Unwind_Resume(a1);
    }
  }
}

void sub_216F5CAB0()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2);
  if (result)
  {
    unint64_t v4 = sub_216D563F8(this);
    return pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v4, v5);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::_GetXformOpAttr(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, uint64_t a4@<X8>)
{
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F5C4B8();
  if ((*((void *)v10 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v11 = (uint64_t *)((*((void *)v10 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v11 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
  }
  if (*((char *)v11 + 23) >= 0) {
    uint64_t v12 = (const char *)v11;
  }
  else {
    uint64_t v12 = (const char *)*v11;
  }
  int v13 = *((char *)EmptyString + 23);
  if (v13 >= 0) {
    size_t v14 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v14 = EmptyString[1];
  }
  size_t v15 = strlen(v12);
  if (v14 < v15)
  {
    *(unsigned char *)a3 = 0;
LABEL_19:
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, a2, a4);
    return;
  }
  size_t v16 = v15;
  if (v13 >= 0) {
    uint64_t v17 = (const char *)EmptyString;
  }
  else {
    uint64_t v17 = (const char *)*EmptyString;
  }
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)strncmp(v17, v12, v16);
  *(unsigned char *)a3 = v18 == 0;
  if (v18) {
    goto LABEL_19;
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v19 = (const std::string *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v19 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
  }
  unint64_t v20 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F5C4B8();
  if ((*((void *)v20 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v21 = (uint64_t *)((*((void *)v20 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v21 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v20);
  }
  if (*((char *)v21 + 23) < 0) {
    std::string::size_type v22 = v21[1];
  }
  else {
    std::string::size_type v22 = *((unsigned __int8 *)v21 + 23);
  }
  std::string::basic_string(&v23, v19, v22, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v25);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v24);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, a4);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_216F5CCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetPrecisionFromValueTypeName(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  char v3 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v3) {
    char v3 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)this, (void **)v3 + 45)) {
    return 0;
  }
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v4) {
    unint64_t v4 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)this, (void **)v4 + 23)) {
    return 0;
  }
  int v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v6) {
    int v6 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)this, (void **)v6 + 20)) {
    return 1;
  }
  size_t v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7) {
    size_t v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)this, (void **)v7 + 17))
  {
    size_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v8) {
      size_t v8 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)this, (void **)v8 + 8)) {
      return 0;
    }
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v9) {
      unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)this, (void **)v9 + 7))
    {
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v10) {
        uint64_t v10 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)this, (void **)v10 + 6)) {
        return 2;
      }
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v11) {
        uint64_t v11 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)this, (void **)v11 + 42)) {
        return 0;
      }
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v12) {
        uint64_t v12 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)this, (void **)v12 + 41))
      {
        int v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v13) {
          int v13 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)this, (void **)v13 + 40)) {
          return 2;
        }
        v17[0] = "usdGeom/xformOp.cpp";
        v17[1] = "GetPrecisionFromValueTypeName";
        v17[2] = 247;
        v17[3] = "static UsdGeomXformOp::Precision pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetPrecisionFromValu"
                 "eTypeName(const SdfValueTypeName &)";
        char v18 = 0;
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v16);
        unint64_t v14 = v16 & 0xFFFFFFFFFFFFFFF8;
        if ((v16 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          size_t v15 = (const char *)(v14 + 16);
          if (*(char *)(v14 + 39) < 0) {
            size_t v15 = *(const char **)v15;
          }
        }
        else
        {
          size_t v15 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid typeName '%s' specified.", v15);
        if ((v16 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        return 0;
      }
    }
    return 1;
  }
  return 2;
}

pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTypeToken(int a1)
{
  switch(a1)
  {
    case 1:
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!result)
      {
        uint64_t result = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      break;
    case 2:
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v2) {
        uint64_t v2 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v2 + 8);
      break;
    case 3:
      char v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v3) {
        char v3 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v3 + 16);
      break;
    case 4:
      unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v4) {
        unint64_t v4 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v4 + 24);
      break;
    case 5:
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v5) {
        uint64_t v5 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v5 + 32);
      break;
    case 6:
      int v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v6) {
        int v6 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v6 + 40);
      break;
    case 7:
      size_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v7) {
        size_t v7 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v7 + 48);
      break;
    case 8:
      size_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v8) {
        size_t v8 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v8 + 56);
      break;
    case 9:
      unint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v9) {
        unint64_t v9 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v9 + 64);
      break;
    case 10:
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v10) {
        uint64_t v10 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v10 + 72);
      break;
    case 11:
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v11) {
        uint64_t v11 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v11 + 80);
      break;
    case 12:
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v12) {
        uint64_t v12 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v12 + 88);
      break;
    case 13:
      int v13 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      if (!v13) {
        int v13 = sub_216F5A3E0(&pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes);
      }
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)((char *)v13 + 96);
      break;
    default:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93348, memory_order_acquire) & 1) != 0
        || !__cxa_guard_acquire(&qword_267B93348))
      {
        uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)&unk_267B93340;
      }
      else
      {
        __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B93340, &dword_216758000);
        __cxa_guard_release(&qword_267B93348);
        uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType *)&unk_267B93340;
      }
      break;
  }
  return result;
}

BOOL sub_216F5D27C(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s);
  return v4 == *(void *)(a1 + 8) && strncmp(__s, *(const char **)a1, v4) == 0;
}

void *pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetValueTypeName(int a1, int a2)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      if (a2 == 2)
      {
        uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v5) {
          uint64_t v5 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        uint64_t result = (char *)v5 + 136;
      }
      else if (a2 == 1)
      {
        uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v2) {
          uint64_t v2 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        uint64_t result = (char *)v2 + 160;
      }
      else
      {
        int v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v6) {
          int v6 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        uint64_t result = (char *)v6 + 184;
      }
      break;
    case 3:
    case 4:
    case 5:
      if (a2 == 2)
      {
        size_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v8) {
          size_t v8 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        uint64_t result = (char *)v8 + 48;
      }
      else if (a2 == 1)
      {
        size_t v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v4) {
          size_t v4 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        uint64_t result = (char *)v4 + 56;
      }
      else
      {
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v10) {
          uint64_t v10 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        uint64_t result = (char *)v10 + 64;
      }
      break;
    case 12:
      if (a2 == 2)
      {
        uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v11) {
          uint64_t v11 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        uint64_t result = (char *)v11 + 320;
      }
      else if (a2 == 1)
      {
        size_t v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v7) {
          size_t v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        uint64_t result = (char *)v7 + 328;
      }
      else
      {
        uint64_t v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v12) {
          uint64_t v12 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        uint64_t result = (char *)v12 + 336;
      }
      break;
    case 13:
      if (a2)
      {
        v13[0] = "usdGeom/xformOp.cpp";
        v13[1] = "GetValueTypeName";
        v13[2] = 367;
        void v13[3] = "static const SdfValueTypeName &pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetValueTypeName(const"
                 " UsdGeomXformOp::Type, const UsdGeomXformOp::Precision)";
        char v14 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Matrix transformations can only be encoded in double precision. Overriding precision to double.");
      }
      unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v9) {
        unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      uint64_t result = (char *)v9 + 360;
      break;
    default:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93358, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B93358))
      {
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&unk_267B93350);
        __cxa_guard_release(&qword_267B93358);
      }
      uint64_t result = &unk_267B93350;
      break;
  }
  return result;
}

void sub_216F5D538(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, void *a5, char a6)
{
  *(_DWORD *)a1 = 3;
  *(void *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = a3;
  *(unsigned char *)(a1 + 132) = a6;
  Valueuint64_t TypeName = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetValueTypeName(a3, a4);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty(ValueTypeName))
  {
    uint64_t v21 = "usdGeom/xformOp.cpp";
    std::string::size_type v22 = (atomic_ullong *)"UsdGeomXformOp";
    uint64_t v23 = 432;
    unint64_t v24 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(const UsdPrim &, const UsdG"
                            "eomXformOp::Type, const UsdGeomXformOp::Precision, const TfToken &, BOOL)";
    char v25 = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C76D438, a3, (uint64_t)&v20);
    int v13 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
    std::string::size_type v14 = v20.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C76D428, a4, (uint64_t)__p);
    size_t v15 = &v20;
    if (v13 < 0) {
      size_t v15 = (std::string *)v14;
    }
    if (v19 >= 0) {
      unint64_t v16 = __p;
    }
    else {
      unint64_t v16 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid xform-op: incompatible combination of opType (%s) and precision (%s).", (const char *)v15, (const char *)v16);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a3, a5, 0, &v20);
    if (!v20.__r_.__value_.__r.__words[0])
    {
      uint64_t v21 = "usdGeom/xformOp.cpp";
      std::string::size_type v22 = (atomic_ullong *)"UsdGeomXformOp";
      uint64_t v23 = 441;
      unint64_t v24 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::UsdGeomXformOp(const UsdPrim &, const Us"
                              "dGeomXformOp::Type, const UsdGeomXformOp::Precision, const TfToken &, BOOL)";
      char v25 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v21, "!attrName.IsEmpty()", 0);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute(a2, (uint64_t *)&v20, ValueTypeName, 0, 0, (uint64_t)&v21);
    sub_216F59E40(a1, a1, (uint64_t)&v21);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
    sub_21697C414(&v23);
    if (v22) {
      sub_216D16E0C(v22);
    }
    if ((v20.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return a1;
}

void sub_216F5D7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, unint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216EF9DC0(v23);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(int a1@<W0>, void *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  OpTypeToken = pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTypeToken(a1);
  IsXformOp = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(OpTypeToken, v8);
  if (IsXformOp)
  {
    std::string::size_type v10 = *(void *)OpTypeToken;
    a4->__r_.__value_.__r.__words[0] = *(void *)OpTypeToken;
    if ((v10 & 7) != 0)
    {
      uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v11, 2u, memory_order_relaxed) & 1) == 0) {
        a4->__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      }
    }
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F5C4B8();
    if ((*(void *)EmptyString & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      int v13 = (const void **)((*(void *)EmptyString & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else
    {
      EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      int v13 = (const void **)EmptyString;
    }
    if ((*(void *)OpTypeToken & 0xFFFFFFFFFFFFFFF8) != 0) {
      std::string::size_type v14 = (uint64_t *)((*(void *)OpTypeToken & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      std::string::size_type v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v13, (const void **)v14, (uint64_t)__p);
    IsXformOp = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a4);
    if (SHIBYTE(v35) < 0) {
      operator delete(__p[0]);
    }
  }
  if (!*a2) {
    goto LABEL_45;
  }
  if ((a4->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
    size_t v15 = (uint64_t *)((a4->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    size_t v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(IsXformOp);
  }
  if (*((char *)v15 + 23) >= 0) {
    size_t v16 = *((unsigned __int8 *)v15 + 23);
  }
  else {
    size_t v16 = v15[1];
  }
  uint64_t v17 = &v32;
  char v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2167940B4((uint64_t)&v32, v16 + 1);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v17 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if (v16)
  {
    if (*((char *)v15 + 23) >= 0) {
      char v19 = v15;
    }
    else {
      char v19 = (const void *)*v15;
    }
    char v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v17, v19, v16);
  }
  *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 58;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    std::string v20 = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    std::string v20 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
  }
  int v21 = *((char *)v20 + 23);
  if (v21 >= 0) {
    std::string::size_type v22 = (const std::string::value_type *)v20;
  }
  else {
    std::string::size_type v22 = (const std::string::value_type *)*v20;
  }
  if (v21 >= 0) {
    std::string::size_type v23 = *((unsigned __int8 *)v20 + 23);
  }
  else {
    std::string::size_type v23 = v20[1];
  }
  unint64_t v24 = std::string::append(&v32, v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  std::string::size_type v35 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v33);
  std::string::size_type v26 = a4->__r_.__value_.__r.__words[0];
  if (&v33 != (std::string::size_type *)a4)
  {
    if ((v26 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::string::size_type v26 = 0;
    a4->__r_.__value_.__r.__words[0] = v33;
    std::string::size_type v33 = 0;
  }
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    if (!a3) {
      return;
    }
  }
  else
  {
LABEL_45:
    if (!a3) {
      return;
    }
  }
  uint64_t v27 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F5C4B8();
  if ((*((void *)v27 + 2) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v28 = (const void **)((*((void *)v27 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    uint64_t v27 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v27);
    uint64_t v28 = (const void **)v27;
  }
  if ((a4->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v29 = (uint64_t *)((a4->__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v29 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v27);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v28, (const void **)v29, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v32);
  std::string::size_type v30 = a4->__r_.__value_.__r.__words[0];
  uint64_t v31 = a4->__r_.__value_.__r.__words[0] & 7;
  if (&v32 == a4)
  {
    if (v31) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (v31) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    a4->__r_.__value_.__r.__words[0] = v32.__r_.__value_.__r.__words[0];
    v32.__r_.__value_.__r.__words[0] = 0;
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F5DAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if ((*v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetPrecision(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)sub_216F0BE78((uint64_t)this);
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(v1);
  return pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetPrecisionFromValueTypeName((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&TypeName, v2);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::HasSuffix(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  char v3 = (_DWORD *)sub_216F0BE78((uint64_t)this);
  EmptyString = sub_216D563F8(v3);
  if ((*(void *)EmptyString & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v5 = (*(void *)EmptyString & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    unint64_t v5 = (unint64_t)EmptyString;
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v6 = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    int v6 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  if (*((char *)v6 + 23) >= 0) {
    size_t v7 = (const char *)v6;
  }
  else {
    size_t v7 = (const char *)*v6;
  }
  int v8 = *(char *)(v5 + 23);
  if (v8 >= 0) {
    size_t v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    size_t v9 = *(void *)(v5 + 8);
  }
  size_t v10 = strlen(v7);
  if (v9 < v10) {
    return 0;
  }
  unint64_t v12 = *(void *)v5;
  if (v8 >= 0) {
    unint64_t v12 = v5;
  }
  return strcmp((const char *)(v12 + v9 - v10), v7) == 0;
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(unsigned int a1@<W0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, int a3@<W2>, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a4@<X8>)
{
  unint64_t v5 = (unsigned __int16 *)a2;
  if (a1 == 13)
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
    if (sub_21695529C((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
    {
      uint64_t v7 = *((void *)v5 + 1);
      if ((v7 & 4) != 0) {
        int v8 = (float64x2_t *)(*(uint64_t (**)(unsigned __int16 *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      else {
        int v8 = *(float64x2_t **)v5;
      }
      float64x2_t v9 = *v8;
      float64x2_t v10 = v8[1];
      float64x2_t v11 = v8[3];
      float64x2_t v113 = v8[2];
      float64x2_t v114 = v11;
      long long v111 = (__int128)v9;
      float64x2_t v112 = v10;
      float64x2_t v12 = v8[4];
      float64x2_t v13 = v8[5];
      float64x2_t v14 = v8[7];
      float64x2_t v117 = v8[6];
      float64x2_t v118 = v14;
      float64x2_t v115 = v12;
      float64x2_t v116 = v13;
      if (!a3)
      {
LABEL_21:
        float64x2_t v22 = v116;
        *((float64x2_t *)a4 + 4) = v115;
        *((float64x2_t *)a4 + 5) = v22;
        float64x2_t v23 = v118;
        *((float64x2_t *)a4 + 6) = v117;
        *((float64x2_t *)a4 + 7) = v23;
        float64x2_t v24 = v112;
        *(_OWORD *)a4 = v111;
        *((float64x2_t *)a4 + 1) = v24;
        float64x2_t v25 = v114;
        *((float64x2_t *)a4 + 2) = v113;
        *((float64x2_t *)a4 + 3) = v25;
        return;
      }
LABEL_15:
      v92.f64[0] = 0.0;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)&v111, v92.f64, 0.0, (uint64_t)&v103);
      float64x2_t v115 = v107;
      float64x2_t v116 = v108;
      float64x2_t v117 = v109;
      float64x2_t v118 = v110;
      long long v111 = v103;
      float64x2_t v112 = v104;
      float64x2_t v113 = v105;
      float64x2_t v114 = v106;
      if (fabs(v92.f64[0]) < 0.000000001)
      {
        *(void *)&long long v103 = "usdGeom/xformOp.cpp";
        *((void *)&v103 + 1) = "GetOpTransform";
        *(void *)&v104.f64[0] = 510;
        *(void *)&v104.f64[1] = "static GfMatrix4d pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(con"
                                  "st UsdGeomXformOp::Type, const VtValue &, BOOL)";
        LOBYTE(v105.f64[0]) = 0;
        sub_216928738((uint64_t)v5);
        if (v98.f64[0] >= 0.0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = *(const char **)&__p.f64[0];
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v103, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot invert singular transform op with value %s.", p_p);
        if (SHIBYTE(v98.f64[0]) < 0) {
          operator delete(*(void **)&__p.f64[0]);
        }
      }
      goto LABEL_21;
    }
    if (sub_216F5E744((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
    {
      uint64_t v19 = *((void *)v5 + 1);
      if ((v19 & 4) != 0) {
        std::string v20 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)(*(uint64_t (**)(unsigned __int16 *))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      else {
        std::string v20 = *(const pxrInternal__aapl__pxrReserved__::GfMatrix4f **)v5;
      }
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v103, v20);
      float64x2_t v115 = v107;
      float64x2_t v116 = v108;
      float64x2_t v117 = v109;
      float64x2_t v118 = v110;
      long long v111 = v103;
      float64x2_t v112 = v104;
      float64x2_t v113 = v105;
      float64x2_t v114 = v106;
      if (!a3) {
        goto LABEL_21;
      }
      goto LABEL_15;
    }
    *(void *)&long long v103 = "usdGeom/xformOp.cpp";
    *((void *)&v103 + 1) = "GetOpTransform";
    *(void *)&v104.f64[0] = 500;
    *(void *)&v104.f64[1] = "static GfMatrix4d pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(const U"
                              "sdGeomXformOp::Type, const VtValue &, BOOL)";
    LOBYTE(v105.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C76D438, 13, (uint64_t)&__p);
    int v29 = SHIBYTE(v98.f64[0]);
    std::string::size_type v30 = *(const char **)&__p.f64[0];
    sub_216928738((uint64_t)v5);
    if (v29 >= 0) {
      uint64_t v31 = (const char *)&__p;
    }
    else {
      uint64_t v31 = v30;
    }
    if (v93.f64[0] >= 0.0) {
      std::string v32 = (const char *)&v92;
    }
    else {
      std::string v32 = *(const char **)&v92.f64[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v103, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid combination of opType (%s) and opVal (%s). Returning identity matrix.", v31, v32);
    if (SHIBYTE(v93.f64[0]) < 0) {
      operator delete(*(void **)&v92.f64[0]);
    }
    if ((SHIBYTE(v98.f64[0]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    float64_t v33 = __p.f64[0];
    goto LABEL_36;
  }
  if (sub_21691CE68(a2))
  {
    uint64_t v16 = *((void *)v5 + 1);
    uint64_t v17 = (double *)v5;
    if ((v16 & 4) != 0) {
      uint64_t v17 = (double *)(*(uint64_t (**)(unsigned __int16 *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    double v18 = *v17;
  }
  else
  {
    if (sub_21691FA2C((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
    {
      uint64_t v26 = *((void *)v5 + 1);
      uint64_t v27 = (float *)v5;
      if ((v26 & 4) != 0) {
        uint64_t v27 = (float *)(*(uint64_t (**)(unsigned __int16 *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      float v28 = *v27;
    }
    else
    {
      if (!sub_216B8D444((pxrInternal__aapl__pxrReserved__::VtValue *)v5)) {
        goto LABEL_50;
      }
      uint64_t v34 = *((void *)v5 + 1);
      std::string::size_type v35 = v5;
      if ((v34 & 4) != 0) {
        std::string::size_type v35 = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      float v28 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v35];
    }
    double v18 = v28;
  }
  if (a3) {
    double v36 = -v18;
  }
  else {
    double v36 = v18;
  }
  switch(a1)
  {
    case 5u:
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
      long long v103 = 0uLL;
      v104.f64[0] = 1.0;
      goto LABEL_56;
    case 4u:
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
      long long v103 = xmmword_217409FD0;
      v104.f64[0] = 0.0;
      goto LABEL_56;
    case 3u:
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
      v104.f64[0] = 0.0;
      long long v103 = 0x3FF0000000000000uLL;
LABEL_56:
      v104.f64[1] = v36;
      int v40 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v111, (float64x2_t *)&v103);
LABEL_57:
      long long v41 = *((_OWORD *)v40 + 3);
      long long v43 = *(_OWORD *)v40;
      long long v42 = *((_OWORD *)v40 + 1);
      *((_OWORD *)a4 + 2) = *((_OWORD *)v40 + 2);
      *((_OWORD *)a4 + 3) = v41;
      *(_OWORD *)a4 = v43;
      *((_OWORD *)a4 + 1) = v42;
      long long v44 = *((_OWORD *)v40 + 7);
      long long v46 = *((_OWORD *)v40 + 4);
      long long v45 = *((_OWORD *)v40 + 5);
      *((_OWORD *)a4 + 6) = *((_OWORD *)v40 + 6);
      *((_OWORD *)a4 + 7) = v44;
      *((_OWORD *)a4 + 4) = v46;
      *((_OWORD *)a4 + 5) = v45;
      return;
  }
LABEL_50:
  memset(v102, 0, 24);
  if (sub_216949788((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
  {
    uint64_t v37 = *((void *)v5 + 1);
    if ((v37 & 4) != 0) {
      uint64_t v38 = (float32x2_t *)(*(uint64_t (**)(unsigned __int16 *))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    else {
      uint64_t v38 = *(float32x2_t **)v5;
    }
    float64_t v39 = v38[1].f32[0];
    v102[0] = vcvtq_f64_f32(*v38);
    v102[1].f64[0] = v39;
    goto LABEL_66;
  }
  if (sub_216947714((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
  {
    uint64_t v47 = *((void *)v5 + 1);
    if ((v47 & 4) != 0) {
      uint64_t v48 = (*(uint64_t (**)(unsigned __int16 *))((v47 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    else {
      uint64_t v48 = *(void *)v5;
    }
    float64x2_t v49 = *(float64x2_t *)v48;
    v102[1].f64[0] = *(float64_t *)(v48 + 16);
    v102[0] = v49;
LABEL_66:
    if (a1 == 2)
    {
      if (a3)
      {
        __asm { FMOV            V2.2D, #1.0 }
        v102[0] = vdivq_f64(_Q2, v102[0]);
        v102[1].f64[0] = 1.0 / v102[1].f64[0];
      }
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale((uint64_t)&v111, v102);
    }
    else if (a1 == 1)
    {
      if (a3)
      {
        v102[0] = vnegq_f64(v102[0]);
        v102[1].f64[0] = -v102[1].f64[0];
      }
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)&v111, (uint64_t)v102);
    }
    else
    {
      double v59 = v102[0].f64[0];
      if (a3)
      {
        double v59 = -v102[0].f64[0];
        v102[0].f64[0] = -v102[0].f64[0];
        *(float64x2_t *)((char *)v102 + 8) = vnegq_f64(*(float64x2_t *)((char *)v102 + 8));
      }
      v107.f64[0] = 0.0;
      float64x2_t v105 = 0u;
      float64x2_t v106 = 0u;
      long long v103 = 0u;
      float64x2_t v104 = 0u;
      v112.f64[0] = 0.0;
      long long v111 = 0x3FF0000000000000uLL;
      v112.f64[1] = v59;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v103, (float64x2_t *)&v111);
      float64_t v101 = 0.0;
      float64x2_t v99 = 0u;
      float64x2_t v100 = 0u;
      float64x2_t __p = 0u;
      float64x2_t v98 = 0u;
      long long v111 = xmmword_217409FD0;
      v112.f64[0] = 0.0;
      v112.f64[1] = v102[0].f64[1];
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&__p, (float64x2_t *)&v111);
      float64_t v96 = 0.0;
      float64x2_t v94 = 0u;
      float64x2_t v95 = 0u;
      float64x2_t v92 = 0u;
      float64x2_t v93 = 0u;
      long long v111 = 0uLL;
      v112.f64[0] = 1.0;
      v112.f64[1] = v102[1].f64[0];
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v92, (float64x2_t *)&v111);
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((uint64_t)v90, 1.0);
      switch(a1)
      {
        case 6u:
          if (a3) {
            goto LABEL_78;
          }
          goto LABEL_105;
        case 7u:
          if (a3) {
            goto LABEL_95;
          }
          goto LABEL_99;
        case 8u:
          if (a3) {
            goto LABEL_97;
          }
          goto LABEL_102;
        case 9u:
          if (a3)
          {
LABEL_99:
            float64x2_t v87 = v105;
            float64x2_t v88 = v106;
            float64_t v89 = v107.f64[0];
            float64x2_t v85 = (float64x2_t)v103;
            float64x2_t v86 = v104;
            int v60 = (double *)&__p;
          }
          else
          {
LABEL_95:
            float64x2_t v87 = v99;
            float64x2_t v88 = v100;
            float64_t v89 = v101;
            float64x2_t v85 = __p;
            float64x2_t v86 = v98;
            int v60 = (double *)&v103;
          }
          uint64_t v69 = (double *)&v92;
          break;
        case 0xAu:
          if (a3)
          {
LABEL_102:
            float64x2_t v87 = v99;
            float64x2_t v88 = v100;
            float64_t v89 = v101;
            float64x2_t v85 = __p;
            float64x2_t v86 = v98;
            int v60 = (double *)&v92;
          }
          else
          {
LABEL_97:
            float64x2_t v87 = v94;
            float64x2_t v88 = v95;
            float64_t v89 = v96;
            float64x2_t v85 = v92;
            float64x2_t v86 = v93;
            int v60 = (double *)&__p;
          }
          uint64_t v69 = (double *)&v103;
          break;
        case 0xBu:
          if (a3)
          {
LABEL_105:
            float64x2_t v87 = v105;
            float64x2_t v88 = v106;
            float64_t v89 = v107.f64[0];
            float64x2_t v85 = (float64x2_t)v103;
            float64x2_t v86 = v104;
            int v60 = (double *)&v92;
          }
          else
          {
LABEL_78:
            float64x2_t v87 = v94;
            float64x2_t v88 = v95;
            float64_t v89 = v96;
            float64x2_t v85 = v92;
            float64x2_t v86 = v93;
            int v60 = (double *)&v103;
          }
          uint64_t v69 = (double *)&__p;
          break;
        default:
          *(void *)&long long v111 = "usdGeom/xformOp.cpp";
          *((void *)&v111 + 1) = "GetOpTransform";
          *(void *)&v112.f64[0] = 605;
          *(void *)&v112.f64[1] = "static GfMatrix4d pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(c"
                                    "onst UsdGeomXformOp::Type, const VtValue &, BOOL)";
          LOBYTE(v113.f64[0]) = 0;
          pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C76D438, a1, (uint64_t)&v85);
          int v70 = SHIBYTE(v86.f64[0]);
          float64_t v71 = v85.f64[0];
          sub_216928738((uint64_t)v5);
          if (v70 >= 0) {
            long long v72 = (const char *)&v85;
          }
          else {
            long long v72 = *(const char **)&v71;
          }
          if (v84 >= 0) {
            long long v73 = (const char *)&v83;
          }
          else {
            long long v73 = (const char *)v83;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v111, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid combination of opType (%s) and opVal (%s). Returning identity matrix.", v72, v73);
          if (v84 < 0) {
            operator delete(v83);
          }
          if ((SHIBYTE(v86.f64[0]) & 0x80000000) == 0) {
            goto LABEL_37;
          }
          float64_t v33 = v85.f64[0];
          goto LABEL_36;
      }
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(v85.f64, v69);
      float64x2_t v113 = v87;
      float64x2_t v114 = v88;
      v115.f64[0] = v89;
      long long v111 = (__int128)v85;
      float64x2_t v112 = v86;
      pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=((double *)&v111, v60);
      v90[2] = v113;
      v90[3] = v114;
      float64_t v91 = v115.f64[0];
      v90[0] = v111;
      v90[1] = v112;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v111, 1.0);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v111, (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v90);
    }
    goto LABEL_57;
  }
  if (sub_216B91330((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
  {
    uint64_t v50 = *((void *)v5 + 1);
    unint64_t v51 = v5;
    if ((v50 & 4) != 0) {
      unint64_t v51 = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    float64_t v52 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v51[1]];
    float64_t v53 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v51[2]];
    v102[0].f64[0] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v51];
    v102[0].f64[1] = v52;
    v102[1].f64[0] = v53;
    goto LABEL_66;
  }
  if (a1 != 12)
  {
    *(void *)&long long v111 = "usdGeom/xformOp.cpp";
    *((void *)&v111 + 1) = "GetOpTransform";
    *(void *)&v112.f64[0] = 634;
    *(void *)&v112.f64[1] = "static GfMatrix4d pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(const U"
                              "sdGeomXformOp::Type, const VtValue &, BOOL)";
    LOBYTE(v113.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C76D438, a1, (uint64_t)&v103);
    int v65 = SHIBYTE(v104.f64[0]);
    float64_t v66 = *(double *)&v103;
    sub_216928738((uint64_t)v5);
    if (v65 >= 0) {
      unsigned int v67 = (const char *)&v103;
    }
    else {
      unsigned int v67 = *(const char **)&v66;
    }
    if (v98.f64[0] >= 0.0) {
      int v68 = (const char *)&__p;
    }
    else {
      int v68 = *(const char **)&__p.f64[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v111, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid combination of opType (%s) and opVal (%s). Returning identity matrix.", v67, v68);
    if (SHIBYTE(v98.f64[0]) < 0) {
      operator delete(*(void **)&__p.f64[0]);
    }
    if ((SHIBYTE(v104.f64[0]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    float64_t v33 = *(double *)&v103;
LABEL_36:
    operator delete(*(void **)&v33);
LABEL_37:
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)a4, 1.0);
    return;
  }
  long long v111 = 0u;
  float64x2_t v112 = 0u;
  if (sub_216956AEC((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
  {
    uint64_t v61 = *((void *)v5 + 1);
    if ((v61 & 4) != 0) {
      long long v62 = (float64x2_t *)(*(uint64_t (**)(unsigned __int16 *))((v61 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    else {
      long long v62 = *(float64x2_t **)v5;
    }
    float64x2_t v63 = *v62;
    float64x2_t v64 = v62[1];
  }
  else
  {
    if (!sub_21695810C((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
    {
      if (sub_216B8FDA4((pxrInternal__aapl__pxrReserved__::VtValue *)v5))
      {
        uint64_t v79 = *((void *)v5 + 1);
        if ((v79 & 4) != 0) {
          unint64_t v5 = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))((v79 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
        }
        float64_t v80 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5[3]];
        float64_t v81 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5[1]];
        float64_t v82 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5[2]];
        *(double *)&long long v111 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v5];
        *((float64_t *)&v111 + 1) = v81;
        v112.f64[0] = v82;
        v112.f64[1] = v80;
      }
      goto LABEL_123;
    }
    uint64_t v74 = *((void *)v5 + 1);
    if ((v74 & 4) != 0) {
      long long v75 = (float32x2_t *)(*(uint64_t (**)(unsigned __int16 *))((v74 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    else {
      long long v75 = *(float32x2_t **)v5;
    }
    float64x2_t v63 = vcvtq_f64_f32(*v75);
    float64x2_t v64 = vcvtq_f64_f32(v75[1]);
  }
  long long v111 = (__int128)v63;
  float64x2_t v112 = v64;
LABEL_123:
  pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat((pxrInternal__aapl__pxrReserved__::GfRotation *)&v103, (const pxrInternal__aapl__pxrReserved__::GfQuatd *)&v111);
  if (a3)
  {
    *(void *)&long long v103 = sub_216896F28((double *)&v103);
    *((float64_t *)&v103 + 1) = v76;
    v104.f64[0] = v77;
    v104.f64[1] = v78;
  }
  float64x2_t __p = 0uLL;
  v98.f64[0] = 0.0;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d(a4, (float64x2_t *)&v103, (uint64_t)&__p);
}

void sub_216F5E69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216F5E744(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 73) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C5B0);
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)a2, 1.0);
  uint64_t v13 = 0;
  if (sub_216F5E868(a1, (uint64_t)v12, a3))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(*(_DWORD *)(a1 + 128), (pxrInternal__aapl__pxrReserved__::VtValue *)v12, *(unsigned __int8 *)(a1 + 132), (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v11);
    long long v6 = v11[5];
    a2[4] = v11[4];
    a2[5] = v6;
    long long v7 = v11[7];
    a2[6] = v11[6];
    a2[7] = v7;
    long long v8 = v11[1];
    *a2 = v11[0];
    a2[1] = v8;
    long long v9 = v11[3];
    a2[2] = v11[2];
    a2[3] = v9;
  }
  return sub_2168EE084((uint64_t)v12);
}

void sub_216F5E850(_Unwind_Exception *a1)
{
  sub_2168EE084(v1 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_216F5E868(uint64_t a1, uint64_t a2, double a3)
{
  v5[0] = a2;
  *(double *)&v5[1] = a3;
  uint64_t v3 = *(unsigned int *)(a1 + 120);
  if (v3 == -1) {
    sub_2168BBB60();
  }
  long long v6 = v5;
  return ((uint64_t (*)(void **, uint64_t))off_26C76D448[v3])(&v6, a1);
}

uint64_t sub_216F5E8C0(const pxrInternal__aapl__pxrReserved__::Usd_PrimData ***a1, uint64_t a2, __n128 a3)
{
  a3.n128_u64[0] = (unint64_t)(*a1)[1];
  return pxrInternal__aapl__pxrReserved__::UsdAttribute::Get(a2, **a1, a3);
}

uint64_t sub_216F5E8D8(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::Get(a2, **a1, *((double *)*a1 + 1));
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::~UsdGeomXformCommonAPI(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  long long v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    long long v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76D468;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    long long v9 = "usdGeom/xformCommonAPI.cpp";
    float64x2_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdGeomXformCommonAPI pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::Get(co"
                            "nst UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    float64x2_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76D468;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F5EAAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  return 4;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93368, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93368))
  {
    __cxa_guard_release(&qword_267B93368);
  }
  return &qword_267B93360;
}

void sub_216F5EB3C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93378, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *)__cxa_guard_acquire(&qword_267B93378);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::_GetStaticTfType(v2);
      byte_267B93370 = sub_216D16508((char *)&qword_267B93360, v3, v4);
      __cxa_guard_release(&qword_267B93378);
    }
  }
  return byte_267B93370;
}

void sub_216F5EBBC(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  return &qword_267B93360;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93398, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93398))
  {
    qword_267B93380 = 0;
    *(void *)algn_267B93388 = 0;
    qword_267B93390 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93380, &dword_216758000);
    __cxa_guard_release(&qword_267B93398);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B933B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B933B8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_267B933A0 = 0;
    *(void *)algn_267B933A8 = 0;
    qword_267B933B0 = 0;
    sub_21698FA28(&qword_267B933A0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B933A0, &dword_216758000);
    __cxa_guard_release(&qword_267B933B8);
  }
  if (v1) {
    return &qword_267B933A0;
  }
  else {
    return &qword_267B93380;
  }
}

void sub_216F5ED04(_Unwind_Exception *a1)
{
}

void sub_216F5ED1C()
{
  sub_216779094(v3, "UsdGeomXformCommonAPI::RotationOrderXYZ");
  sub_216779094(&__p, "XYZ");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D4C0, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "UsdGeomXformCommonAPI::RotationOrderXZY");
  sub_216779094(&__p, "XZY");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D4C0, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "UsdGeomXformCommonAPI::RotationOrderYXZ");
  sub_216779094(&__p, "YXZ");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D4C0, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "UsdGeomXformCommonAPI::RotationOrderYZX");
  sub_216779094(&__p, "YZX");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D4C0, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "UsdGeomXformCommonAPI::RotationOrderZXY");
  sub_216779094(&__p, "ZXY");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D4C0, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "UsdGeomXformCommonAPI::RotationOrderZYX");
  sub_216779094(&__p, "ZYX");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D4C0, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "UsdGeomXformCommonAPI::OpTranslate");
  float64x2_t __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D4B0, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "UsdGeomXformCommonAPI::OpRotate");
  float64x2_t __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D4B0, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "UsdGeomXformCommonAPI::OpScale");
  float64x2_t __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D4B0, 8, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "UsdGeomXformCommonAPI::OpPivot");
  float64x2_t __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C76D4B0, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216F5F090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::_IsCompatible(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_IsCompatible(this)) {
    return 0;
  }
  sub_216D16CFC((uint64_t)v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v9, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v4);
  long long v9 = (uint64_t (**)(void **))&unk_26C76D390;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  if (v10 && (*(unsigned char *)(v10 + 57) & 8) == 0 && (v9[4]((void **)&v9) & 1) != 0) {
    uint64_t v2 = sub_216F5F248((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v9, 0, 0, 0, 0, 0, 0);
  }
  else {
    uint64_t v2 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v9);
  return v2;
}

void sub_216F5F220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F5F248(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, BOOL *a7)
{
  BOOL v71 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps(a1, &v71, &v69);
  uint64_t v13 = 0;
  uint64_t v14 = v69;
  if (0xF0F0F0F0F0F0F0F1 * ((v70 - v69) >> 3) <= 5)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B933D8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B933D8))
    {
      sub_216F62584();
      __cxa_atexit((void (*)(void *))sub_216F626A0, &qword_267B933C0, &dword_216758000);
      __cxa_guard_release(&qword_267B933D8);
    }
    LODWORD(v62[0]) = 3;
    v62[1] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v63);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v64);
    uint64_t v65 = 0;
    int v66 = 0;
    if (v14 != v70)
    {
      size_t v15 = (_DWORD *)sub_216F0BE78(v14);
      if ((*(void *)sub_216D563F8(v15) & 0xFFFFFFFFFFFFFFF8) == (qword_267B933C0 & 0xFFFFFFFFFFFFFFF8)
        && !*(unsigned char *)(v14 + 132))
      {
        sub_216F59DA0((uint64_t)v62, v14);
        int v16 = *(_DWORD *)(v14 + 128);
        char v68 = *(unsigned char *)(v14 + 132);
        int v67 = v16;
        v14 += 136;
      }
    }
    int v54 = 3;
    uint64_t v55 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v56);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v57);
    uint64_t v58 = 0;
    int v59 = 0;
    if (v14 != v70)
    {
      uint64_t v17 = (_DWORD *)sub_216F0BE78(v14);
      if ((*(void *)sub_216D563F8(v17) & 0xFFFFFFFFFFFFFFF8) == (qword_267B933C8 & 0xFFFFFFFFFFFFFFF8)
        && !*(unsigned char *)(v14 + 132))
      {
        sub_216F59DA0((uint64_t)&v54, v14);
        int v18 = *(_DWORD *)(v14 + 128);
        char v61 = *(unsigned char *)(v14 + 132);
        int v60 = v18;
        v14 += 136;
      }
    }
    int v46 = 3;
    uint64_t v47 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v48);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v49);
    uint64_t v50 = 0;
    int v51 = 0;
    if (v14 != v70 && (*(_DWORD *)(v14 + 128) - 6) <= 5 && !*(unsigned char *)(v14 + 132))
    {
      sub_216F59DA0((uint64_t)&v46, v14);
      int v19 = *(_DWORD *)(v14 + 128);
      char v53 = *(unsigned char *)(v14 + 132);
      int v52 = v19;
      v14 += 136;
    }
    int v38 = 3;
    uint64_t v39 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v40);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v41);
    uint64_t v42 = 0;
    int v43 = 0;
    if (v14 != v70)
    {
      std::string v20 = (_DWORD *)sub_216F0BE78(v14);
      if ((*(void *)sub_216D563F8(v20) & 0xFFFFFFFFFFFFFFF8) == (qword_267B933D0 & 0xFFFFFFFFFFFFFFF8)
        && !*(unsigned char *)(v14 + 132))
      {
        sub_216F59DA0((uint64_t)&v38, v14);
        int v21 = *(_DWORD *)(v14 + 128);
        char v45 = *(unsigned char *)(v14 + 132);
        int v44 = v21;
        v14 += 136;
      }
    }
    int v30 = 3;
    uint64_t v31 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v32);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v33);
    uint64_t v34 = 0;
    int v35 = 0;
    if (v14 != v70)
    {
      float64x2_t v22 = (_DWORD *)sub_216F0BE78(v14);
      if ((*(void *)sub_216D563F8(v22) & 0xFFFFFFFFFFFFFFF8) == (qword_267B933C8 & 0xFFFFFFFFFFFFFFF8))
      {
        if (*(unsigned char *)(v14 + 132))
        {
          sub_216F59DA0((uint64_t)&v30, v14);
          int v23 = *(_DWORD *)(v14 + 128);
          char v37 = *(unsigned char *)(v14 + 132);
          int v36 = v23;
          v14 += 136;
        }
      }
    }
    if (v14 == v70
      && (float64x2_t v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v54),
          int IsXformOp = pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v24, v25),
          uint64_t v27 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v30),
          IsXformOp == pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v27, v28)))
    {
      if (a2)
      {
        sub_216F59DA0(a2, (uint64_t)v62);
        *(_DWORD *)(a2 + 128) = v67;
        *(unsigned char *)(a2 + 132) = v68;
      }
      if (a3)
      {
        sub_216F59DA0(a3, (uint64_t)&v54);
        *(_DWORD *)(a3 + 128) = v60;
        *(unsigned char *)(a3 + 132) = v61;
      }
      if (a4)
      {
        sub_216F59DA0(a4, (uint64_t)&v46);
        *(_DWORD *)(a4 + 128) = v52;
        *(unsigned char *)(a4 + 132) = v53;
      }
      if (a5)
      {
        sub_216F59DA0(a5, (uint64_t)&v38);
        *(_DWORD *)(a5 + 128) = v44;
        *(unsigned char *)(a5 + 132) = v45;
      }
      if (a6)
      {
        sub_216F59DA0(a6, (uint64_t)&v30);
        *(_DWORD *)(a6 + 128) = v36;
        *(unsigned char *)(a6 + 132) = v37;
      }
      if (a7) {
        *a7 = v71;
      }
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v13 = 0;
    }
    sub_216EF9DC0((uint64_t)&v30);
    sub_216EF9DC0((uint64_t)&v38);
    sub_216EF9DC0((uint64_t)&v46);
    sub_216EF9DC0((uint64_t)&v54);
    sub_216EF9DC0((uint64_t)v62);
  }
  v62[0] = (void **)&v69;
  sub_216EF9D3C(v62);
  return v13;
}

void sub_216F5F6FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_267B933D8);
  *(void *)(v1 - 256) = v1 - 120;
  sub_216EF9D3C((void ***)(v1 - 256));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::SetXformVectors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(a1, a6, 1, 4, 8, 2u, (uint64_t)v16);
  int v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)v16);
  if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v6, v7)
    && (uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)v18),
        pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v8, v9))
    && (uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)v19),
        pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v10, v11))
    && (unint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)v17),
        (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v12, v13) & 1) != 0)
    && sub_216F5FB38((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v16)
    && sub_216F5FC4C((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v18)
    && sub_216F5FC4C((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v19))
  {
    uint64_t v14 = sub_216F5FC4C((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v17);
  }
  else
  {
    uint64_t v14 = 0;
  }
  sub_216EF9DC0((uint64_t)&v20);
  sub_216EF9DC0((uint64_t)v19);
  sub_216EF9DC0((uint64_t)v18);
  sub_216EF9DC0((uint64_t)v17);
  sub_216EF9DC0((uint64_t)v16);
  return v14;
}

void sub_216F5F8EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F5FD60((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, unsigned int a6@<W5>, uint64_t a7@<X8>)
{
  unsigned int v19 = a2;
  sub_216D16CFC((uint64_t)&v12, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v17, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12);
  uint64_t v17 = (uint64_t (**)(void **))&unk_26C76D390;
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
  if (v18 && (*(unsigned char *)(v18 + 57) & 8) == 0 && (v17[4]((void **)&v17) & 1) != 0)
  {
    sub_216F61880((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v17, &v19, (a4 | a3 | a5 | a6) & 1, ((a4 | a3 | a5 | a6) >> 1) & 1, ((a4 | a3 | a5 | a6) >> 2) & 1, ((a4 | a3 | a5 | a6) >> 3) & 1, (_DWORD *)a7);
  }
  else
  {
    bzero((void *)a7, 0x2A8uLL);
    *(_DWORD *)a7 = 3;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 20));
    *(void *)(a7 + 24) = 0;
    *(_DWORD *)(a7 + 120) = 0;
    *(_DWORD *)(a7 + 136) = 3;
    *(void *)(a7 + 144) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 152));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 156));
    *(void *)(a7 + 160) = 0;
    *(_DWORD *)(a7 + 256) = 0;
    *(_DWORD *)(a7 + 272) = 3;
    *(void *)(a7 + 280) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 288));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 292));
    *(void *)(a7 + 296) = 0;
    *(_DWORD *)(a7 + 392) = 0;
    *(_DWORD *)(a7 + 408) = 3;
    *(void *)(a7 + 416) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 424));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 428));
    *(void *)(a7 + 432) = 0;
    *(_DWORD *)(a7 + 528) = 0;
    *(_DWORD *)(a7 + 544) = 3;
    *(void *)(a7 + 552) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 560));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a7 + 564));
    *(void *)(a7 + 568) = 0;
    *(_DWORD *)(a7 + 664) = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v17);
}

void sub_216F5FB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F5FB38(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *a1)
{
  if (!*((unsigned char *)a1 + 132))
  {
    sub_216F0BE78((uint64_t)a1);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3d>();
  }
  v5[0] = "usdGeom/xformOp.h";
  v5[1] = "Set";
  void v5[2] = 399;
  uint64_t v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::Set(const T &, UsdTimeCode) const [T = pxrInternal__aap"
          "l__pxrReserved__::GfVec3d]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a1, (atomic_uint **)&v4);
  unint64_t v1 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0) {
      uint64_t v2 = *(const char **)v2;
    }
  }
  else
  {
    uint64_t v2 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set a value on the inverse xformOp '%s'. Please set value on the paired non-inverse xformOp instead.", v2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 0;
}

uint64_t sub_216F5FC4C(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *a1)
{
  if (!*((unsigned char *)a1 + 132))
  {
    sub_216F0BE78((uint64_t)a1);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3f>();
  }
  v5[0] = "usdGeom/xformOp.h";
  v5[1] = "Set";
  void v5[2] = 399;
  uint64_t v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::Set(const T &, UsdTimeCode) const [T = pxrInternal__aap"
          "l__pxrReserved__::GfVec3f]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a1, (atomic_uint **)&v4);
  unint64_t v1 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0) {
      uint64_t v2 = *(const char **)v2;
    }
  }
  else
  {
    uint64_t v2 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set a value on the inverse xformOp '%s'. Please set value on the paired non-inverse xformOp instead.", v2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 0;
}

uint64_t sub_216F5FD60(uint64_t a1)
{
  sub_216EF9DC0(a1 + 544);
  sub_216EF9DC0(a1 + 408);
  sub_216EF9DC0(a1 + 272);
  sub_216EF9DC0(a1 + 136);

  return sub_216EF9DC0(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertRotationOrderToOpType(unsigned int a1)
{
  if (a1 < 6) {
    return a1 + 6;
  }
  v5[0] = "usdGeom/xformCommonAPI.cpp";
  v5[1] = "ConvertRotationOrderToOpType";
  void v5[2] = 334;
  uint64_t v5[3] = "static UsdGeomXformOp::Type pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertRotationOrderToOpT"
          "ype(RotationOrder)";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C76D4C0, a1, (uint64_t)__p);
  if (v4 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid rotation order <%s>.", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return 6;
}

void sub_216F5FE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertOpTypeToRotationOrder(unsigned int a1)
{
  uint64_t v1 = a1 - 6;
  if (v1 >= 6)
  {
    v6[0] = "usdGeom/xformCommonAPI.cpp";
    v6[1] = "ConvertOpTypeToRotationOrder";
    v6[2] = 360;
    v6[3] = "static UsdGeomXformCommonAPI::RotationOrder pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::Convert"
            "OpTypeToRotationOrder(UsdGeomXformOp::Type)";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C76D438, a1, (uint64_t)__p);
    if (v5 >= 0) {
      uint64_t v2 = __p;
    }
    else {
      uint64_t v2 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"'%s' is not a three-axis rotate op type", (const char *)v2);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v1;
}

void sub_216F5FF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CanConvertOpTypeToRotationOrder(int a1)
{
  return (a1 - 6) < 6;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetXformVectors(uint64_t a1, void *a2, _DWORD *a3, float32x2_t *a4, uint64_t a5, _DWORD *a6, double a7)
{
  if (a2 && a3 && a4 && a5 && a6
    || (long long v62 = "usdGeom/xformCommonAPI.cpp",
        int v63 = (atomic_ullong *)"GetXformVectors",
        uint64_t v64 = 478,
        unint64_t v65 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetXformVectors(GfVec3d *,"
                                " GfVec3f *, GfVec3f *, GfVec3f *, RotationOrder *, const UsdTimeCode) const",
        char v66 = 0,
        int v40 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v62, "translation && rotation && scale && pivot && rotOrder", 0), result = 0, v40))
  {
    sub_216D16CFC((uint64_t)&v62, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v68, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v62);
    v68[0] = &unk_26C76D390;
    if ((v65 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
    sub_21697C414(&v64);
    if (v63) {
      sub_216D16E0C(v63);
    }
    LODWORD(v62) = 3;
    int v63 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v64);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v64 + 1);
    unint64_t v65 = 0;
    int v67 = 0;
    int v56 = 3;
    uint64_t v57 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v58);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v59);
    uint64_t v60 = 0;
    int v61 = 0;
    int v49 = 3;
    uint64_t v50 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v51);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v52);
    uint64_t v53 = 0;
    int v54 = 0;
    int v43 = 3;
    uint64_t v44 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v45);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v46);
    uint64_t v47 = 0;
    int v48 = 0;
    if ((sub_216F5F248((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v68, (uint64_t)&v62, (uint64_t)&v56, (uint64_t)&v49, (uint64_t)&v43, 0, 0) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v42, 1.0);
      char v41 = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetLocalTransformation((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v68, (uint64_t)v42, &v41, a7);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v77, 1.0);
      double v76 = 1.0;
      float64x2_t v75 = (float64x2_t)xmmword_2174A5490;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor((uint64_t)v42, v74, (uint64_t)&v75, &v77, (uint64_t)a2, (uint64_t)v73, 1.0e-10);
      float32_t v28 = v76;
      *a4 = vcvt_f32_f64(v75);
      a4[1].f32[0] = v28;
      if ((pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v77, 0) & 1) == 0)
      {
        *(void *)&v69.f64[0] = "usdGeom/xformCommonAPI.cpp";
        *(void *)&v69.f64[1] = "_ConvertMatrixToComponents";
        uint64_t v70 = 201;
        BOOL v71 = "void pxrInternal__aapl__pxrReserved__::_ConvertMatrixToComponents(const GfMatrix4d &, GfVec3d *, GfVec3f *, GfVec3f *)";
        char v72 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v69, (pxrInternal__aapl__pxrReserved__ *)"Failed to orthonormalize rotation matrix.", v29);
      }
      v69.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v77);
      v69.f64[1] = v30;
      uint64_t v70 = v31;
      BOOL v71 = v32;
      v82[1] = 0.0;
      v82[0] = 0.0;
      v82[2] = 1.0;
      long long v80 = xmmword_217409FD0;
      uint64_t v81 = 0;
      v79[0] = 1.0;
      v79[2] = 0.0;
      v79[1] = 0.0;
      double v33 = pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(&v69, v82, (double *)&v80, v79);
      *(float *)&double v34 = v34;
      *(float *)&double v35 = v35;
      *(float *)&double v33 = v33;
      *a3 = LODWORD(v34);
      a3[1] = LODWORD(v35);
      a3[2] = LODWORD(v33);
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
      *a6 = 0;
      goto LABEL_32;
    }
    int v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v62);
    if (!pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v14, v15)
      || (sub_216F60448((uint64_t)&v62, (uint64_t)a2, a7) & 1) == 0)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v49);
    if (!pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v16, v17)
      || (sub_216F604A0((uint64_t)&v49, (uint64_t)a3, a7) & 1) == 0)
    {
      *(void *)a3 = 0;
      a3[2] = 0;
    }
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v43);
    if (!pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v18, v19)
      || (sub_216F604A0((uint64_t)&v43, (uint64_t)a4, a7) & 1) == 0)
    {
      __asm { FMOV            V0.2S, #1.0 }
      *a4 = _D0;
      a4[1].i32[0] = 1065353216;
    }
    float64x2_t v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v56);
    if (!pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v25, v26)) {
      goto LABEL_28;
    }
    if (sub_216F60448((uint64_t)&v56, (uint64_t)&v77, a7))
    {
      if (a5)
      {
        float v27 = v78;
        *(float32x2_t *)a5 = vcvt_f32_f64(v77);
        *(float *)(a5 + 8) = v27;
      }
      goto LABEL_29;
    }
    if ((sub_216F604A0((uint64_t)&v56, a5, a7) & 1) == 0)
    {
LABEL_28:
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + 8) = 0;
    }
LABEL_29:
    int v36 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v49);
    int IsXformOp = pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v36, v37);
    if (IsXformOp) {
      int IsXformOp = pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertOpTypeToRotationOrder(v55);
    }
    *a6 = IsXformOp;
LABEL_32:
    sub_216EF9DC0((uint64_t)&v43);
    sub_216EF9DC0((uint64_t)&v49);
    sub_216EF9DC0((uint64_t)&v56);
    sub_216EF9DC0((uint64_t)&v62);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v68);
    return 1;
  }
  return result;
}

void sub_216F603F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t sub_216F60448(uint64_t a1, uint64_t a2, double a3)
{
  v5[0] = a2;
  *(double *)&v5[1] = a3;
  uint64_t v3 = *(unsigned int *)(a1 + 120);
  if (v3 == -1) {
    sub_2168BBB60();
  }
  char v6 = v5;
  return ((uint64_t (*)(void **, uint64_t))off_26C76D4D0[v3])(&v6, a1);
}

uint64_t sub_216F604A0(uint64_t a1, uint64_t a2, double a3)
{
  v5[0] = a2;
  *(double *)&v5[1] = a3;
  uint64_t v3 = *(unsigned int *)(a1 + 120);
  if (v3 == -1) {
    sub_2168BBB60();
  }
  char v6 = v5;
  return ((uint64_t (*)(void **, uint64_t))off_26C76D4E0[v3])(&v6, a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetXformVectorsByAccumulation(uint64_t a1, void *a2, _DWORD *a3, float32x2_t *a4, uint64_t a5, _DWORD *a6, double a7)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    return pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetXformVectors(a1, a2, a3, a4, a5, a6, a7);
  }
  sub_216D16CFC((uint64_t)&v142, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v158, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v142);
  v158[0] = &unk_26C76D390;
  if ((LOBYTE(v143.f64[1]) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v143.f64[1] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v143.f64 + 1);
  sub_21697C414(&v143);
  if (*(void *)&v142.f64[1]) {
    sub_216D16E0C(*(atomic_ullong **)&v142.f64[1]);
  }
  BOOL v157 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v158, &v157, (uint64_t *)&v156);
  int v137 = a2;
  int v138 = (float32x2_t *)a5;
  if (*(void *)&v156.f64[0] == *(void *)&v156.f64[1])
  {
    char v21 = 0;
    char v20 = 0;
    unint64_t v19 = 0;
    unsigned int v18 = 6;
    int v22 = 6;
  }
  else
  {
    float64_t v17 = v156.f64[0];
    while (1)
    {
      unsigned int v18 = *(_DWORD *)(*(void *)&v17 + 128);
      if (v18 - 3 <= 8) {
        break;
      }
      *(void *)&v17 += 136;
      if (*(void *)&v17 == *(void *)&v156.f64[1])
      {
        unsigned int v18 = 6;
        break;
      }
    }
    unint64_t v19 = 0;
    char v20 = 0;
    char v21 = 0;
    float64x2_t v142 = v156;
    int v22 = 6;
    do
    {
      int v23 = *(_DWORD *)(*sub_216F57F20(&v142, v15, v16) + 128);
      uint64_t v26 = sub_216F57F20(&v142, v24, v25);
      if ((v23 - 3) >= 9)
      {
        if (*(_DWORD *)(*v26 + 128) == 2)
        {
          char v20 = 1;
        }
        else if (*(_DWORD *)(*sub_216F57F20(&v142, v27, v28) + 128) == 1)
        {
          v19 += *(unsigned __int8 *)(*sub_216F57F20(&v142, v29, v30) + 132);
        }
      }
      else
      {
        char v21 = 1;
        int v22 = *(_DWORD *)(*v26 + 128);
      }
      sub_216F57F9C(&v142);
    }
    while (*(void *)&v142.f64[0] != *(void *)&v142.f64[1]);
  }
  BOOL v134 = a3;
  int v136 = a6;
  uint64_t v31 = (char *)operator new(4uLL);
  *(_DWORD *)uint64_t v31 = 1;
  int v154 = v31 + 4;
  v155 = v31 + 4;
  float64x2_t __p = v31;
  double v33 = (char *)sub_21677EA28((uint64_t)&v155, 2uLL);
  double v34 = (char *)__p;
  double v35 = v154;
  *((_DWORD *)v33 + 1) = 1;
  int v36 = v33 + 4;
  char v37 = &v33[4 * v32];
  int v38 = v33 + 8;
  while (v35 != v34)
  {
    int v39 = *((_DWORD *)v35 - 1);
    v35 -= 4;
    *((_DWORD *)v36 - 1) = v39;
    v36 -= 4;
  }
  float64x2_t __p = v36;
  int v154 = v33 + 8;
  v155 = &v33[4 * v32];
  if (v34)
  {
    operator delete(v34);
    char v37 = v155;
  }
  int v154 = v33 + 8;
  if (v21)
  {
    if (v38 >= v37)
    {
      uint64_t v42 = (char *)__p;
      uint64_t v43 = (v38 - (unsigned char *)__p) >> 2;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 62) {
        sub_21677CB10();
      }
      uint64_t v45 = v37 - (unsigned char *)__p;
      if (v45 >> 1 > v44) {
        unint64_t v44 = v45 >> 1;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46)
      {
        uint64_t v47 = (char *)sub_21677EA28((uint64_t)&v155, v46);
        uint64_t v42 = (char *)__p;
        int v38 = v154;
      }
      else
      {
        uint64_t v47 = 0;
      }
      int v48 = (int *)&v47[4 * v43];
      char v37 = &v47[4 * v46];
      *int v48 = v22;
      int v40 = (char *)(v48 + 1);
      while (v38 != v42)
      {
        int v49 = *((_DWORD *)v38 - 1);
        v38 -= 4;
        *--int v48 = v49;
      }
      float64x2_t __p = v48;
      int v154 = v40;
      v155 = v37;
      if (v42)
      {
        operator delete(v42);
        char v37 = v155;
      }
    }
    else
    {
      *((_DWORD *)v33 + 2) = v22;
      int v40 = v33 + 12;
    }
    int v154 = v40;
    uint64_t v41 = 3;
    uint64_t v132 = 2;
    int v38 = v40;
  }
  else
  {
    uint64_t v41 = 2;
    uint64_t v132 = 0xFFFFFFFFLL;
  }
  if (v19 < 2)
  {
    unsigned int v135 = -1;
    if ((v20 & 1) == 0)
    {
LABEL_77:
      int v66 = -1;
      goto LABEL_85;
    }
  }
  else
  {
    if (v38 >= v37)
    {
      int v52 = (char *)__p;
      uint64_t v53 = (v38 - (unsigned char *)__p) >> 2;
      unint64_t v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 62) {
        sub_21677CB10();
      }
      uint64_t v55 = v37 - (unsigned char *)__p;
      if (v55 >> 1 > v54) {
        unint64_t v54 = v55 >> 1;
      }
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v54;
      }
      if (v56)
      {
        uint64_t v57 = (char *)sub_21677EA28((uint64_t)&v155, v56);
        int v52 = (char *)__p;
        int v38 = v154;
      }
      else
      {
        uint64_t v57 = 0;
      }
      uint64_t v64 = &v57[4 * v53];
      char v37 = &v57[4 * v56];
      *(_DWORD *)uint64_t v64 = 1;
      uint64_t v50 = v64 + 4;
      while (v38 != v52)
      {
        int v65 = *((_DWORD *)v38 - 1);
        v38 -= 4;
        *((_DWORD *)v64 - 1) = v65;
        v64 -= 4;
      }
      float64x2_t __p = v64;
      int v154 = v50;
      v155 = v37;
      if (v52)
      {
        operator delete(v52);
        char v37 = v155;
      }
    }
    else
    {
      *(_DWORD *)int v38 = 1;
      uint64_t v50 = v38 + 4;
    }
    int v154 = v50;
    unsigned int v135 = v41++;
    int v38 = v50;
    if ((v20 & 1) == 0) {
      goto LABEL_77;
    }
  }
  if (v38 >= v37)
  {
    int v58 = (char *)__p;
    uint64_t v59 = (v38 - (unsigned char *)__p) >> 2;
    unint64_t v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v61 = v37 - (unsigned char *)__p;
    if (v61 >> 1 > v60) {
      unint64_t v60 = v61 >> 1;
    }
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v62 = v60;
    }
    if (v62)
    {
      int v63 = (char *)sub_21677EA28((uint64_t)&v155, v62);
      int v58 = (char *)__p;
      int v38 = v154;
    }
    else
    {
      int v63 = 0;
    }
    int v67 = &v63[4 * v59];
    char v37 = &v63[4 * v62];
    *(_DWORD *)int v67 = 2;
    int v51 = v67 + 4;
    while (v38 != v58)
    {
      int v68 = *((_DWORD *)v38 - 1);
      v38 -= 4;
      *((_DWORD *)v67 - 1) = v68;
      v67 -= 4;
    }
    float64x2_t __p = v67;
    int v154 = v51;
    v155 = v37;
    if (v58)
    {
      operator delete(v58);
      char v37 = v155;
    }
  }
  else
  {
    *(_DWORD *)int v38 = 2;
    int v51 = v38 + 4;
  }
  int v154 = v51;
  int v66 = v41++;
  int v38 = v51;
LABEL_85:
  unsigned int v133 = v66;
  if (v38 >= v37)
  {
    uint64_t v70 = (char *)__p;
    uint64_t v71 = (v38 - (unsigned char *)__p) >> 2;
    unint64_t v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v73 = v37 - (unsigned char *)__p;
    if (v73 >> 1 > v72) {
      unint64_t v72 = v73 >> 1;
    }
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v74 = v72;
    }
    if (v74)
    {
      float64x2_t v75 = (char *)sub_21677EA28((uint64_t)&v155, v74);
      uint64_t v70 = (char *)__p;
      int v38 = v154;
    }
    else
    {
      float64x2_t v75 = 0;
    }
    double v76 = &v75[4 * v71];
    float64x2_t v77 = &v75[4 * v74];
    *(_DWORD *)double v76 = 1;
    float64x2_t v69 = v76 + 4;
    while (v38 != v70)
    {
      int v78 = *((_DWORD *)v38 - 1);
      v38 -= 4;
      *((_DWORD *)v76 - 1) = v78;
      v76 -= 4;
    }
    float64x2_t __p = v76;
    int v154 = v69;
    v155 = v77;
    if (v70) {
      operator delete(v70);
    }
  }
  else
  {
    *(_DWORD *)int v38 = 1;
    float64x2_t v69 = v38 + 4;
  }
  int v154 = v69;
  uint64_t v79 = __p;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v142, 1.0);
  sub_216F369CC(v152, (v69 - v79) >> 2, (long long *)&v142);
  unsigned int v80 = -252645135 * ((*(void *)&v156.f64[1] - *(void *)&v156.f64[0]) >> 3) - 1;
  unsigned int v81 = ((unint64_t)(v154 - (unsigned char *)__p) >> 2) - 1;
  while ((v80 & 0x80000000) == 0 && (v81 & 0x80000000) == 0)
  {
    float64_t v82 = v156.f64[0];
    sub_216EFA4C8((uint64_t)&v142, *(void *)&v156.f64[0] + 136 * v80);
    uint64_t v83 = *(void *)&v82 + 136 * v80;
    int v84 = *(_DWORD *)(v83 + 128);
    char v151 = *(unsigned char *)(v83 + 132);
    int v150 = v84;
    int v85 = *((_DWORD *)__p + v81);
    if (v84 == v85)
    {
      pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform((uint64_t)&v142, &v159, a7);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v152[0] + 16 * (unint64_t)v81, v159.f64);
      --v80;
      if (v85 != v18)
      {
        if (v85 != 1) {
          goto LABEL_108;
        }
        if (!v151)
        {
          if (v81 == 1)
          {
            long long v86 = *((_OWORD *)v152[0] + 13);
            long long v163 = *((_OWORD *)v152[0] + 12);
            long long v164 = v86;
            long long v87 = *((_OWORD *)v152[0] + 15);
            long long v165 = *((_OWORD *)v152[0] + 14);
            long long v166 = v87;
            long long v88 = *((_OWORD *)v152[0] + 9);
            float64x2_t v159 = *((float64x2_t *)v152[0] + 8);
            long long v160 = v88;
            long long v89 = *((_OWORD *)v152[0] + 11);
            long long v161 = *((_OWORD *)v152[0] + 10);
            long long v162 = v89;
            pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v159.f64, (double *)v152[0] + 16 * v41);
            unsigned int v81 = !sub_216F60F60(&v159);
          }
          goto LABEL_108;
        }
      }
    }
    --v81;
LABEL_108:
    sub_216EF9DC0((uint64_t)&v142);
  }
  if ((v135 & 0x80000000) != 0)
  {
    unsigned int v92 = v80 >> 31;
    float64_t v91 = v136;
  }
  else
  {
    BOOL v90 = sub_216F60F60((float64x2_t *)v152[0] + 8 * (unint64_t)v135);
    float64_t v91 = v136;
    unsigned int v92 = (v80 & 0x80000000) != 0 && v90;
  }
  float64x2_t v93 = (float64x2_t *)v152[0];
  if (v81 == v41)
  {
    float64x2_t v94 = (float64x2_t *)((char *)v152[0] + 128 * v41);
    float64x2_t v95 = *v94;
    float64x2_t v96 = v94[1];
    float64x2_t v97 = v94[3];
    *((float64x2_t *)v152[0] + 2) = v94[2];
    v93[3] = v97;
    *float64x2_t v93 = v95;
    v93[1] = v96;
    float64x2_t v98 = v94[4];
    float64x2_t v99 = v94[5];
    float64x2_t v100 = v94[7];
    v93[6] = v94[6];
    v93[7] = v100;
    v93[4] = v98;
    v93[5] = v99;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v142, 1.0);
    float64x2_t v93 = (float64x2_t *)v152[0];
    float64_t v101 = (float64x2_t *)((char *)v152[0] + 128 * v41);
    float64x2_t v102 = v142;
    float64x2_t v103 = v143;
    float64x2_t v104 = v145;
    v101[2] = v144;
    v101[3] = v104;
    v101[1] = v103;
    float64x2_t v105 = v147;
    float64x2_t v106 = v149;
    float64x2_t v107 = v146;
    v101[6] = v148;
    v101[7] = v106;
    v101[4] = v107;
    v101[5] = v105;
    float64x2_t *v101 = v102;
  }
  float64x2_t v108 = v93[12];
  float64x2_t v109 = v93[14];
  float64x2_t v110 = v93[15];
  float64x2_t v147 = v93[13];
  float64x2_t v148 = v109;
  float64x2_t v149 = v110;
  float64x2_t v111 = v93[9];
  float64x2_t v142 = v93[8];
  float64x2_t v143 = v111;
  float64x2_t v112 = v93[11];
  float64x2_t v144 = v93[10];
  float64x2_t v145 = v112;
  float64x2_t v146 = v108;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v142.f64, v93[8 * v41].f64);
  if (sub_216F60F60(&v142) & v92)
  {
    if (v137)
    {
      uint64_t v113 = *((void *)v152[0] + 14);
      *(_OWORD *)int v137 = *((_OWORD *)v152[0] + 6);
      v137[2] = v113;
    }
    if (v138)
    {
      float32_t v114 = *((double *)v152[0] + 30);
      *int v138 = vcvt_f32_f64(*((float64x2_t *)v152[0] + 14));
      v138[1].f32[0] = v114;
    }
    if (v134)
    {
      if ((v21 & 1) == 0)
      {
        *(void *)BOOL v134 = 0;
        v134[2] = 0;
        if (!a4)
        {
LABEL_129:
          if (!v91) {
            goto LABEL_141;
          }
          goto LABEL_137;
        }
LABEL_133:
        if ((v133 & 0x80000000) != 0)
        {
          __asm { FMOV            V0.2S, #1.0 }
          *a4 = _D0;
          a4[1].i32[0] = 1065353216;
          if (!v91)
          {
LABEL_141:
            uint64_t XformVectors = 1;
            goto LABEL_142;
          }
        }
        else
        {
          uint64_t v122 = (double *)((char *)v152[0] + 128 * (unint64_t)v133);
          float32_t v123 = *v122;
          a4->f32[0] = v123;
          float32_t v124 = v122[5];
          a4->f32[1] = v124;
          float32_t v125 = v122[10];
          a4[1].f32[0] = v125;
          if (!v91) {
            goto LABEL_141;
          }
        }
LABEL_137:
        if (v18 - 6 > 5) {
          int v131 = 0;
        }
        else {
          int v131 = pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertOpTypeToRotationOrder(v18);
        }
        *float64_t v91 = v131;
        goto LABEL_141;
      }
      v142.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)((char *)v152[0] + 128 * v132));
      v142.f64[1] = v115;
      v143.f64[0] = v116;
      v143.f64[1] = v117;
      *(void *)&long long v160 = 0;
      float64x2_t v159 = (float64x2_t)0x3FF0000000000000uLL;
      long long v140 = xmmword_217409FD0;
      uint64_t v141 = 0;
      v139[0] = 0.0;
      v139[1] = 0.0;
      v139[2] = 1.0;
      float v118 = pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(&v142, v159.f64, (double *)&v140, v139);
      *(float *)&double v119 = v119;
      *(float *)&double v120 = v120;
      *(float *)BOOL v134 = v118;
      v134[1] = LODWORD(v119);
      v134[2] = LODWORD(v120);
    }
    if (!a4) {
      goto LABEL_129;
    }
    goto LABEL_133;
  }
  uint64_t XformVectors = pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetXformVectors(a1, v137, v134, a4, (uint64_t)v138, v91, a7);
LABEL_142:
  if (v152[0])
  {
    v152[1] = v152[0];
    operator delete(v152[0]);
  }
  if (__p)
  {
    int v154 = (char *)__p;
    operator delete(__p);
  }
  *(void *)&v142.f64[0] = &v156;
  sub_216EF9D3C((void ***)&v142);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v158);
  return XformVectors;
}

void sub_216F60EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,char *a45,char *a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (__p) {
    operator delete(__p);
  }
  if (a45)
  {
    a46 = a45;
    operator delete(a45);
  }
  a45 = &a48;
  sub_216EF9D3C((void ***)&a45);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&a52);
  _Unwind_Resume(a1);
}

BOOL sub_216F60F60(float64x2_t *a1)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v19, 1.0);
  float64x2_t v2 = vsubq_f64(*a1, v19[0]);
  float64x2_t v3 = vmulq_f64(v2, v2);
  float64x2_t v4 = vsubq_f64(a1[1], v19[1]);
  float64x2_t v5 = vmulq_f64(v4, v4);
  if (vaddq_f64(vaddq_f64(vaddq_f64(v3, (float64x2_t)vdupq_laneq_s64((int64x2_t)v3, 1)), v5), (float64x2_t)vdupq_laneq_s64((int64x2_t)v5, 1)).f64[0] > 1.0e-12)return 0; {
  float64x2_t v6 = vsubq_f64(a1[2], v19[2]);
  }
  float64x2_t v7 = vmulq_f64(v6, v6);
  float64x2_t v8 = vsubq_f64(a1[3], v19[3]);
  float64x2_t v9 = vmulq_f64(v8, v8);
  if (vaddq_f64(vaddq_f64(vaddq_f64(v7, (float64x2_t)vdupq_laneq_s64((int64x2_t)v7, 1)), v9), (float64x2_t)vdupq_laneq_s64((int64x2_t)v9, 1)).f64[0] > 1.0e-12)return 0; {
  float64x2_t v10 = vsubq_f64(a1[4], v19[4]);
  }
  float64x2_t v11 = vmulq_f64(v10, v10);
  float64x2_t v12 = vsubq_f64(a1[5], v19[5]);
  float64x2_t v13 = vmulq_f64(v12, v12);
  if (vaddq_f64(vaddq_f64(vaddq_f64(v11, (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1)), v13), (float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1)).f64[0] > 1.0e-12)return 0; {
  float64x2_t v14 = vsubq_f64(a1[6], v19[6]);
  }
  float64x2_t v15 = vmulq_f64(v14, v14);
  float64x2_t v16 = vsubq_f64(a1[7], v19[7]);
  float64x2_t v17 = vmulq_f64(v16, v16);
  return vaddq_f64(vaddq_f64(vaddq_f64(v15, (float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1)), v17), (float64x2_t)vdupq_laneq_s64((int64x2_t)v17, 1)).f64[0] <= 1.0e-12;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetResetXformStack(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this)
{
  sub_216D16CFC((uint64_t)v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v8, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v3);
  v8[0] = &unk_26C76D390;
  BOOL ResetXformStack = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetResetXformStack((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v8);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v8);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return ResetXformStack;
}

void sub_216F6112C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)va1);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::SetResetXformStack(pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI *this, int a2)
{
  sub_216D16CFC((uint64_t)v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v5);
  v10[0] = &unk_26C76D390;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::SetResetXformStack((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v10, a2);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return v3;
}

void sub_216F6120C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)va1);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::SetTranslate(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(a1, 1, 0, 0, 0, (uint64_t)v5);
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)v5);
  if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v1, v2)) {
    uint64_t v3 = sub_216F5FB38((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v5);
  }
  else {
    uint64_t v3 = 0;
  }
  sub_216EF9DC0((uint64_t)&v9);
  sub_216EF9DC0((uint64_t)&v8);
  sub_216EF9DC0((uint64_t)&v7);
  sub_216EF9DC0((uint64_t)&v6);
  sub_216EF9DC0((uint64_t)v5);
  return v3;
}

void sub_216F612E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F5FD60((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  sub_216D16CFC((uint64_t)v11, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v16, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v11);
  float64x2_t v16 = (uint64_t (**)(void **))&unk_26C76D390;
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (v12) {
    sub_216D16E0C(v12);
  }
  if (v17 && (*(unsigned char *)(v17 + 57) & 8) == 0 && (v16[4]((void **)&v16) & 1) != 0)
  {
    sub_216F61880((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v16, 0, (a3 | a2 | a4 | a5) & 1, ((a3 | a2 | a4 | a5) >> 1) & 1, ((a3 | a2 | a4 | a5) >> 2) & 1, ((a3 | a2 | a4 | a5) >> 3) & 1, (_DWORD *)a6);
  }
  else
  {
    bzero((void *)a6, 0x2A8uLL);
    *(_DWORD *)a6 = 3;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 20));
    *(void *)(a6 + 24) = 0;
    *(_DWORD *)(a6 + 120) = 0;
    *(_DWORD *)(a6 + 136) = 3;
    *(void *)(a6 + 144) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 152));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 156));
    *(void *)(a6 + 160) = 0;
    *(_DWORD *)(a6 + 256) = 0;
    *(_DWORD *)(a6 + 272) = 3;
    *(void *)(a6 + 280) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 288));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 292));
    *(void *)(a6 + 296) = 0;
    *(_DWORD *)(a6 + 392) = 0;
    *(_DWORD *)(a6 + 408) = 3;
    *(void *)(a6 + 416) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 424));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 428));
    *(void *)(a6 + 432) = 0;
    *(_DWORD *)(a6 + 528) = 0;
    *(_DWORD *)(a6 + 544) = 3;
    *(void *)(a6 + 552) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 560));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a6 + 564));
    *(void *)(a6 + 568) = 0;
    *(_DWORD *)(a6 + 664) = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)&v16);
}

void sub_216F614FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::SetPivot(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(a1, 2, 0, 0, 0, (uint64_t)v5);
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)v6);
  if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v1, v2)) {
    uint64_t v3 = sub_216F5FC4C((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v6);
  }
  else {
    uint64_t v3 = 0;
  }
  sub_216EF9DC0((uint64_t)&v9);
  sub_216EF9DC0((uint64_t)&v8);
  sub_216EF9DC0((uint64_t)&v7);
  sub_216EF9DC0((uint64_t)v6);
  sub_216EF9DC0((uint64_t)v5);
  return v3;
}

void sub_216F615E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F5FD60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::SetRotate(uint64_t a1, uint64_t a2, unsigned int a3)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(a1, a3, 4, 0, 0, 0, (uint64_t)v7);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)v9);
  if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v3, v4)) {
    uint64_t v5 = sub_216F5FC4C((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v9);
  }
  else {
    uint64_t v5 = 0;
  }
  sub_216EF9DC0((uint64_t)&v11);
  sub_216EF9DC0((uint64_t)&v10);
  sub_216EF9DC0((uint64_t)v9);
  sub_216EF9DC0((uint64_t)&v8);
  sub_216EF9DC0((uint64_t)v7);
  return v5;
}

void sub_216F616B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F5FD60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::SetScale(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::CreateXformOps(a1, 8, 0, 0, 0, (uint64_t)v5);
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)v8);
  if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v1, v2)) {
    uint64_t v3 = sub_216F5FC4C((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)v8);
  }
  else {
    uint64_t v3 = 0;
  }
  sub_216EF9DC0((uint64_t)&v9);
  sub_216EF9DC0((uint64_t)v8);
  sub_216EF9DC0((uint64_t)&v7);
  sub_216EF9DC0((uint64_t)&v6);
  sub_216EF9DC0((uint64_t)v5);
  return v3;
}

void sub_216F6177C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F5FD60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F61790(uint64_t a1)
{
  *(_DWORD *)a1 = 3;
  *(void *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 136) = 3;
  *(void *)(a1 + 144) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 152));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 156));
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 272) = 3;
  *(void *)(a1 + 280) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 288));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 292));
  *(void *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 408) = 3;
  *(void *)(a1 + 416) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 424));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 428));
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 544) = 3;
  *(void *)(a1 + 552) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 560));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 564));
  *(void *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  return a1;
}

uint64_t sub_216F61880@<X0>(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *a1@<X0>, unsigned int *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, _DWORD *a7@<X8>)
{
  int v118 = 3;
  uint64_t v119 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v120);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v121);
  uint64_t v122 = 0;
  int v123 = 0;
  int v110 = 3;
  uint64_t v111 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v112);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v113);
  uint64_t v114 = 0;
  int v115 = 0;
  int v102 = 3;
  uint64_t v103 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v104);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v105);
  uint64_t v106 = 0;
  int v107 = 0;
  int v94 = 3;
  uint64_t v95 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v96);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v97);
  uint64_t v98 = 0;
  int v99 = 0;
  int v86 = 3;
  uint64_t v87 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v88);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v89);
  uint64_t v90 = 0;
  int v91 = 0;
  BOOL v85 = 0;
  if ((sub_216F5F248(a1, (uint64_t)&v118, (uint64_t)&v110, (uint64_t)&v102, (uint64_t)&v94, (uint64_t)&v86, &v85) & 1) == 0)
  {
    unint64_t v72 = "usdGeom/xformCommonAPI.cpp";
    uint64_t v73 = "_GetOrAddCommonXformOps";
    unint64_t v74 = 860;
    float64x2_t v75 = "UsdGeomXformCommonAPI::Ops pxrInternal__aapl__pxrReserved__::_GetOrAddCommonXformOps(const UsdGeomXformable &,"
          " const UsdGeomXformCommonAPI::RotationOrder *, BOOL, BOOL, BOOL, BOOL)";
    char v76 = 0;
    sub_216D1E2AC((uint64_t)a1, v81);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v81);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v72, (pxrInternal__aapl__pxrReserved__ *)"Could not determine xform ops for incompatible xformable <%s>", v28, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v81 + 1);
    uint64_t v29 = v81;
LABEL_19:
    sub_21697C414(v29);
    goto LABEL_20;
  }
  if (a2)
  {
    if (a5)
    {
      int v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v102);
      if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v14, v15))
      {
        unsigned int v16 = pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertOpTypeToRotationOrder(v108);
        if (v16 != *a2)
        {
          unint64_t v72 = "usdGeom/xformCommonAPI.cpp";
          uint64_t v73 = "_GetOrAddCommonXformOps";
          unint64_t v74 = 875;
          float64x2_t v75 = "UsdGeomXformCommonAPI::Ops pxrInternal__aapl__pxrReserved__::_GetOrAddCommonXformOps(const UsdGeomXforma"
                "ble &, const UsdGeomXformCommonAPI::RotationOrder *, BOOL, BOOL, BOOL, BOOL)";
          char v76 = 0;
          sub_216D1E2AC((uint64_t)a1, &v83);
          double v35 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v83);
          pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C76D4C0, *a2, (uint64_t)v81);
          int v36 = v82;
          char v37 = (void **)v81[0];
          pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C76D4C0, v16, (uint64_t)__p);
          int v38 = v81;
          if (v36 < 0) {
            int v38 = v37;
          }
          if (v80 >= 0) {
            int v39 = __p;
          }
          else {
            int v39 = (void **)__p[0];
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v72, 1, (pxrInternal__aapl__pxrReserved__ *)"Rotation order mismatch on prim <%s> (%s != %s)", v35, (const char *)v38, (const char *)v39);
          if (v80 < 0) {
            operator delete(__p[0]);
          }
          if (v82 < 0) {
            operator delete(v81[0]);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v84);
          uint64_t v29 = (void **)&v83;
          goto LABEL_19;
        }
      }
    }
  }
  if (!a3) {
    goto LABEL_9;
  }
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v118);
  if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v17, v18))
  {
    a3 = 0;
LABEL_9:
    if (a4) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
  v81[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTranslateOp((uint64_t)a1, 0, v81, 0, (uint64_t)&v72);
  sub_216F59DA0((uint64_t)&v118, (uint64_t)&v72);
  unsigned int v124 = v77;
  char v125 = v78;
  sub_216EF9DC0((uint64_t)&v72);
  if (((uint64_t)v81[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v81[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  float64_t v30 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v118);
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v30, v31) & 1) == 0)
  {
    unint64_t v72 = "usdGeom/xformCommonAPI.cpp";
    uint64_t v73 = "_GetOrAddCommonXformOps";
    unint64_t v74 = 885;
    float64x2_t v75 = "UsdGeomXformCommonAPI::Ops pxrInternal__aapl__pxrReserved__::_GetOrAddCommonXformOps(const UsdGeomXformable &,"
          " const UsdGeomXformCommonAPI::RotationOrder *, BOOL, BOOL, BOOL, BOOL)";
    char v76 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v72, "t", 0) & 1) == 0) {
      goto LABEL_86;
    }
  }
  a3 = 1;
  if (a4)
  {
LABEL_10:
    unint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v110);
    if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v19, v20) & 1) == 0)
    {
      char v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v21) {
        char v21 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTranslateOp((uint64_t)a1, 1, (void *)v21 + 100, 0, (uint64_t)&v72);
      sub_216F59DA0((uint64_t)&v110, (uint64_t)&v72);
      unsigned int v116 = v77;
      char v117 = v78;
      sub_216EF9DC0((uint64_t)&v72);
      int v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v22) {
        int v22 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTranslateOp((uint64_t)a1, 1, (void *)v22 + 100, 1, (uint64_t)&v72);
      sub_216F59DA0((uint64_t)&v86, (uint64_t)&v72);
      unsigned int v92 = v77;
      char v93 = v78;
      sub_216EF9DC0((uint64_t)&v72);
      int v23 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v110);
      if (!pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v23, v24)
        || (float64x2_t v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v86),
            (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v25, v26) & 1) == 0))
      {
        unint64_t v72 = "usdGeom/xformCommonAPI.cpp";
        uint64_t v73 = "_GetOrAddCommonXformOps";
        unint64_t v74 = 896;
        float64x2_t v75 = "UsdGeomXformCommonAPI::Ops pxrInternal__aapl__pxrReserved__::_GetOrAddCommonXformOps(const UsdGeomXformabl"
              "e &, const UsdGeomXformCommonAPI::RotationOrder *, BOOL, BOOL, BOOL, BOOL)";
        char v76 = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v72, "p && pInv", 0) & 1) == 0) {
          goto LABEL_86;
        }
      }
      a3 = 1;
    }
  }
LABEL_25:
  if (!a5
    || (uint64_t v32 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v102),
        (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v32, v33) & 1) != 0))
  {
LABEL_44:
    if (a6
      && (uint64_t v42 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v94),
          (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v42, v43) & 1) == 0))
    {
      v81[0] = 0;
      pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddScaleOp((uint64_t)a1, 1, v81, 0, (uint64_t)&v72);
      sub_216F59DA0((uint64_t)&v94, (uint64_t)&v72);
      unsigned int v100 = v77;
      char v101 = v78;
      sub_216EF9DC0((uint64_t)&v72);
      if (((uint64_t)v81[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v81[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v44 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v94);
      if ((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v44, v45) & 1) == 0)
      {
        unint64_t v72 = "usdGeom/xformCommonAPI.cpp";
        uint64_t v73 = "_GetOrAddCommonXformOps";
        unint64_t v74 = 915;
        float64x2_t v75 = "UsdGeomXformCommonAPI::Ops pxrInternal__aapl__pxrReserved__::_GetOrAddCommonXformOps(const UsdGeomXformabl"
              "e &, const UsdGeomXformCommonAPI::RotationOrder *, BOOL, BOOL, BOOL, BOOL)";
        char v76 = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v72, "s", 0) & 1) == 0)
        {
LABEL_86:
          bzero(a7, 0x2A8uLL);
          sub_216F61790((uint64_t)a7);
          goto LABEL_78;
        }
      }
    }
    else if (!a3)
    {
LABEL_77:
      sub_216F59F10((uint64_t)a7, (uint64_t)&v118);
      a7[32] = v124;
      *((unsigned char *)a7 + 132) = v125;
      sub_216F59F10((uint64_t)(a7 + 34), (uint64_t)&v110);
      a7[66] = v116;
      *((unsigned char *)a7 + 268) = v117;
      sub_216F59F10((uint64_t)(a7 + 68), (uint64_t)&v102);
      a7[100] = v108;
      *((unsigned char *)a7 + 404) = v109;
      sub_216F59F10((uint64_t)(a7 + 102), (uint64_t)&v94);
      a7[134] = v100;
      *((unsigned char *)a7 + 540) = v101;
      sub_216F59F10((uint64_t)(a7 + 136), (uint64_t)&v86);
      a7[168] = v92;
      *((unsigned char *)a7 + 676) = v93;
      goto LABEL_78;
    }
    unint64_t v72 = 0;
    uint64_t v73 = 0;
    unint64_t v74 = 0;
    unint64_t v46 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v118);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v46, v47))
    {
      int v48 = v73;
      if ((unint64_t)v73 >= v74)
      {
        uint64_t v50 = (const char *)sub_216F626EC((uint64_t *)&v72, (uint64_t)&v118);
      }
      else
      {
        sub_216EFA4C8((uint64_t)v73, (uint64_t)&v118);
        unsigned int v49 = v124;
        *((unsigned char *)v48 + 132) = v125;
        *((_DWORD *)v48 + 32) = v49;
        uint64_t v50 = v48 + 136;
      }
      uint64_t v73 = v50;
    }
    int v51 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v110);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v51, v52))
    {
      uint64_t v53 = v73;
      if ((unint64_t)v73 >= v74)
      {
        uint64_t v55 = (const char *)sub_216F626EC((uint64_t *)&v72, (uint64_t)&v110);
      }
      else
      {
        sub_216EFA4C8((uint64_t)v73, (uint64_t)&v110);
        unsigned int v54 = v116;
        *((unsigned char *)v53 + 132) = v117;
        *((_DWORD *)v53 + 32) = v54;
        uint64_t v55 = v53 + 136;
      }
      uint64_t v73 = v55;
    }
    unint64_t v56 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v102);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v56, v57))
    {
      int v58 = v73;
      if ((unint64_t)v73 >= v74)
      {
        unint64_t v60 = (const char *)sub_216F626EC((uint64_t *)&v72, (uint64_t)&v102);
      }
      else
      {
        sub_216EFA4C8((uint64_t)v73, (uint64_t)&v102);
        unsigned int v59 = v108;
        *((unsigned char *)v58 + 132) = v109;
        *((_DWORD *)v58 + 32) = v59;
        unint64_t v60 = v58 + 136;
      }
      uint64_t v73 = v60;
    }
    uint64_t v61 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v94);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v61, v62))
    {
      int v63 = v73;
      if ((unint64_t)v73 >= v74)
      {
        int v65 = (const char *)sub_216F626EC((uint64_t *)&v72, (uint64_t)&v94);
      }
      else
      {
        sub_216EFA4C8((uint64_t)v73, (uint64_t)&v94);
        unsigned int v64 = v100;
        *((unsigned char *)v63 + 132) = v101;
        *((_DWORD *)v63 + 32) = v64;
        int v65 = v63 + 136;
      }
      uint64_t v73 = v65;
    }
    int v66 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v86);
    if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v66, v67))
    {
      int v68 = v73;
      if ((unint64_t)v73 >= v74)
      {
        uint64_t v70 = (const char *)sub_216F626EC((uint64_t *)&v72, (uint64_t)&v86);
      }
      else
      {
        sub_216EFA4C8((uint64_t)v73, (uint64_t)&v86);
        unsigned int v69 = v92;
        *((unsigned char *)v68 + 132) = v93;
        *((_DWORD *)v68 + 32) = v69;
        uint64_t v70 = v68 + 136;
      }
      uint64_t v73 = v70;
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::SetXformOpOrder((uint64_t)a1, &v72, v85);
    v81[0] = &v72;
    sub_216EF9D3C((void ***)v81);
    goto LABEL_77;
  }
  if (a2) {
    uint64_t v34 = pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertRotationOrderToOpType(*a2);
  }
  else {
    uint64_t v34 = 6;
  }
  v81[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp((uint64_t)a1, v34, 1, v81, 0, (uint64_t)&v72);
  sub_216F59DA0((uint64_t)&v102, (uint64_t)&v72);
  unsigned int v108 = v77;
  char v109 = v78;
  sub_216EF9DC0((uint64_t)&v72);
  if (((uint64_t)v81[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v81[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v40 = (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)sub_216F0BE78((uint64_t)&v102);
  if (pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::IsXformOp(v40, v41)
    || (unint64_t v72 = "usdGeom/xformCommonAPI.cpp",
        uint64_t v73 = "_GetOrAddCommonXformOps",
        unint64_t v74 = 908,
        float64x2_t v75 = "UsdGeomXformCommonAPI::Ops pxrInternal__aapl__pxrReserved__::_GetOrAddCommonXformOps(const UsdGeomXformabl"
              "e &, const UsdGeomXformCommonAPI::RotationOrder *, BOOL, BOOL, BOOL, BOOL)",
        char v76 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v72, "r", 0) & 1) != 0))
  {
    a3 = 1;
    goto LABEL_44;
  }
LABEL_20:
  bzero(a7, 0x2A8uLL);
  *a7 = 3;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a7 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a7 + 5);
  *((void *)a7 + 3) = 0;
  a7[30] = 0;
  a7[34] = 3;
  *((void *)a7 + 18) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a7 + 38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a7 + 39);
  *((void *)a7 + 20) = 0;
  a7[64] = 0;
  a7[68] = 3;
  *((void *)a7 + 35) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a7 + 72);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a7 + 73);
  *((void *)a7 + 37) = 0;
  a7[98] = 0;
  a7[102] = 3;
  *((void *)a7 + 52) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a7 + 106);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a7 + 107);
  *((void *)a7 + 54) = 0;
  a7[132] = 0;
  a7[136] = 3;
  *((void *)a7 + 69) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a7 + 140);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a7 + 141);
  *((void *)a7 + 71) = 0;
  a7[166] = 0;
LABEL_78:
  sub_216EF9DC0((uint64_t)&v86);
  sub_216EF9DC0((uint64_t)&v94);
  sub_216EF9DC0((uint64_t)&v102);
  sub_216EF9DC0((uint64_t)&v110);
  return sub_216EF9DC0((uint64_t)&v118);
}

void sub_216F62254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_216EF9DC0((uint64_t)&a38);
  sub_216EF9DC0((uint64_t)&a55);
  sub_216EF9DC0((uint64_t)&a72);
  sub_216EF9DC0((uint64_t)&STACK[0x280]);
  sub_216EF9DC0(v72 - 216);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::GetRotationTransform@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3@<X8>)
{
  v8[2] = *MEMORY[0x263EF8340];
  unsigned int v5 = pxrInternal__aapl__pxrReserved__::UsdGeomXformCommonAPI::ConvertRotationOrderToOpType(a2);
  v8[1] = (char *)&off_26C74E590 + 2;
  uint64_t v6 = operator new(0x10uLL);
  *(void *)uint64_t v6 = *(void *)a1;
  v6[2] = *(_DWORD *)(a1 + 8);
  atomic_store(0, v6 + 3);
  v8[0] = v6;
  atomic_fetch_add_explicit(v6 + 3, 1u, memory_order_relaxed);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpTransform(v5, (pxrInternal__aapl__pxrReserved__::VtValue *)v8, 0, a3);
  return sub_2168EE084((uint64_t)v8);
}

void sub_216F62440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F62454()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F62534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F62584()
{
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(1, &v1, 0, (std::string *)&qword_267B933C0);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v0) {
    uint64_t v0 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(1, (void *)v0 + 100, 0, (std::string *)&qword_267B933C8);
  uint64_t v1 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(2, &v1, 0, (std::string *)&qword_267B933D0);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F62640(_Unwind_Exception *a1)
{
  if ((qword_267B933C0 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B933C0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void *sub_216F626A0(void *result)
{
  uint64_t v1 = result[2];
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v2 = result[1];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*result & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_216F626EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1E1E1E1E1E1E1E1) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xF0F0F0F0F0F0F0) {
    unint64_t v9 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v19 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216D3D750(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v15 = v10;
  uint64_t v16 = &v10[136 * v4];
  uint64_t v17 = (uint64_t)v16;
  unsigned int v18 = &v10[136 * v9];
  sub_216EFA4C8((uint64_t)v16, a2);
  uint64_t v11 = (uint64_t)v16;
  int v12 = *(_DWORD *)(a2 + 128);
  v16[132] = *(unsigned char *)(a2 + 132);
  *(_DWORD *)(v11 + 128) = v12;
  v17 += 136;
  sub_216F5A5FC(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216F5A6B0((uint64_t)&v15);
  return v13;
}

void sub_216F627F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F5A6B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216F6280C()
{
}

void sub_216F62824()
{
}

void sub_216F6283C()
{
}

void sub_216F62854()
{
}

void sub_216F6286C()
{
  sub_216F633D4();
  sub_216779094(__p, "AAPLBlendShape");
  sub_216F63500((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F628BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::~UsdDeformersBlendShape(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D500;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "usdDeformers/blendShape.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdDeformersBlendShape pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::Get("
                            "const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D500;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F62A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B933E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B933E8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B933E0, "BlendShape");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B933E0, &dword_216758000);
    __cxa_guard_release(&qword_267B933E8);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B933E0, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D500;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "usdDeformers/blendShape.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdDeformersBlendShape pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::Defi"
                            "ne(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D500;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F62C94(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B933F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B933F8))
  {
    __cxa_guard_release(&qword_267B933F8);
  }
  return &qword_267B933F0;
}

void sub_216F62D3C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93408, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *)__cxa_guard_acquire(&qword_267B93408);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_GetStaticTfType(v2);
      byte_267B93400 = sub_216D16508((char *)&qword_267B933F0, v3, v4);
      __cxa_guard_release(&qword_267B93408);
    }
  }
  return byte_267B93400;
}

void sub_216F62DBC(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  return &qword_267B933F0;
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::GetPointsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 72), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F62E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::CreatePointsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 664), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::GetPointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 64), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F62FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::CreatePointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93428, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93428))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v3) {
      uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v4 = *((void *)v3 + 9);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      unint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v6) {
      int v6 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 8);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B93410, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93410, &dword_216758000);
    __cxa_guard_release(&qword_267B93428);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93448, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93448))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_216F6331C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93430, &dword_216758000);
    __cxa_guard_release(&qword_267B93448);
  }
  if (v1) {
    return &qword_267B93430;
  }
  else {
    return &qword_267B93410;
  }
}

void sub_216F632A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B93428);
  _Unwind_Resume(a1);
}

void *sub_216F6331C(uint64_t **a1)
{
  qword_267B93438 = 0;
  unk_267B93440 = 0;
  qword_267B93430 = 0;
  sub_216973388((char **)&qword_267B93430, ((unk_267B93418 - qword_267B93410) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93430, (void *)qword_267B93438, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93430, (void *)qword_267B93438, (uint64_t *)qword_267B93410, unk_267B93418, (unk_267B93418 - qword_267B93410) >> 3);
}

void sub_216F633B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F633D4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F634B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F63500(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F63594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *sub_216F635B8(atomic_ullong *a1)
{
  uint64_t result = sub_216F63600();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_216F63644((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *sub_216F63600()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)operator new(0xC8uLL);
  pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType::UsdDeformersTokensType(v0);
  return v0;
}

void sub_216F63630(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216F63644(uint64_t a1)
{
  uint64_t v24 = (void **)(a1 + 176);
  sub_216889A04(&v24);
  uint64_t v2 = *(void *)(a1 + 168);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 160);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 152);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 144);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 136);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 128);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 120);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 112);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 104);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 96);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 88);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 80);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 72);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 64);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 56);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 48);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 40);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 32);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 24);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *(void *)(a1 + 16);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *(void *)(a1 + 8);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::~UsdDeformersMorphDeformerAPI(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76D558;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdDeformers/morphDeformerAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdDeformersMorphDeformerAPI pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDefor"
                            "merAPI::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76D558;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F63A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this)
{
  return 5;
}

uint64_t sub_216F63A74(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93450, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdDeformersMorphDeformerAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216F63C5C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76D558;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76D558;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216F63C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F63C5C(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93450, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdDeformersMorphDeformerAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93458, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93458))
  {
    __cxa_guard_release(&qword_267B93458);
  }
  return &qword_267B93450;
}

void sub_216F63D90(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93468, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *)__cxa_guard_acquire(&qword_267B93468);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_GetStaticTfType(v2);
      byte_267B93460 = sub_216D16508((char *)&qword_267B93450, v3, v4);
      __cxa_guard_release(&qword_267B93468);
    }
  }
  return byte_267B93460;
}

void sub_216F63E10(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this)
{
  return &qword_267B93450;
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::GetMorphWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 40), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F63EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::CreateMorphWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 40), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::GetMorphChannelTargetCountsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 16), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F64050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::CreateMorphChannelTargetCountsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 16), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::GetMorphChannelTargetWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 24), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F641B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::CreateMorphChannelTargetWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 24), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::GetMorphTargetBlendShapesRel(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 32), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F64320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::CreateMorphTargetBlendShapesRel(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 32), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F643DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdDeformersMorphDeformerAPI *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93488, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93488))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v3) {
      uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v4 = *((void *)v3 + 5);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v5) {
      int v5 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v6 = *((void *)v5 + 2);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v7) {
      int v7 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v8 = *((void *)v7 + 3);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B93470, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93470, &dword_216758000);
    __cxa_guard_release(&qword_267B93488);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B934A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B934A8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216F646C4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93490, &dword_216758000);
    __cxa_guard_release(&qword_267B934A8);
  }
  if (v1) {
    return &qword_267B93490;
  }
  else {
    return &qword_267B93470;
  }
}

void sub_216F64640(_Unwind_Exception *a1)
{
}

void *sub_216F646C4(uint64_t **a1)
{
  qword_267B93498 = 0;
  unk_267B934A0 = 0;
  qword_267B93490 = 0;
  sub_216973388((char **)&qword_267B93490, ((unk_267B93478 - qword_267B93470) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93490, (void *)qword_267B93498, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93490, (void *)qword_267B93498, (uint64_t *)qword_267B93470, unk_267B93478, (unk_267B93478 - qword_267B93470) >> 3);
}

void sub_216F6475C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F6477C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F6485C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::~UsdDeformersSkinDeformerAPI(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76D5B0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdDeformers/skinDeformerAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdDeformersSkinDeformerAPI pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeforme"
                            "rAPI::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76D5B0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F64A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  return 5;
}

uint64_t sub_216F64A90(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B934B0, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdDeformersSkinDeformerAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216F64C78(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76D5B0;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76D5B0;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216F64C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F64C78(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B934B0, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdDeformersSkinDeformerAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B934B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B934B8))
  {
    __cxa_guard_release(&qword_267B934B8);
  }
  return &qword_267B934B0;
}

void sub_216F64DAC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B934C8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *)__cxa_guard_acquire(&qword_267B934C8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_GetStaticTfType(v2);
      byte_267B934C0 = sub_216D16508((char *)&qword_267B934B0, v3, v4);
      __cxa_guard_release(&qword_267B934C8);
    }
  }
  return byte_267B934C0;
}

void sub_216F64E2C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  return &qword_267B934B0;
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinComponentsPerVertexAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 104), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F64F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::CreateSkinComponentsPerVertexAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 104), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 112), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6506C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::CreateSkinJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 112), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 120), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F651D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::CreateSkinJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 120), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 96), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6533C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::CreateSkinBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 96), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 816), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinMeshBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 128), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F654A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::CreateSkinMeshBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 128), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 360), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinTargetJointsRel(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 136), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6560C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::CreateSkinTargetJointsRel(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 136), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F656C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  int v1 = (int)this;
  uint64_t v21 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B934E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B934E8))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v3) {
      uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v4 = *((void *)v3 + 13);
    uint64_t v16 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v5) {
      int v5 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v6 = *((void *)v5 + 14);
    uint64_t v17 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v7) {
      int v7 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v8 = *((void *)v7 + 15);
    uint64_t v18 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v9) {
      uint64_t v9 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v10 = *((void *)v9 + 12);
    uint64_t v19 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v11 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v11) {
      char v11 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v12 = *((void *)v11 + 16);
    uint64_t v20 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B934D0, &v16, 5uLL);
    for (uint64_t i = 32; i != -8; i -= 8)
    {
      uint64_t v14 = *(uint64_t *)((char *)&v16 + i);
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B934D0, &dword_216758000);
    __cxa_guard_release(&qword_267B934E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93508, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93508))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216F65A48((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B934F0, &dword_216758000);
    __cxa_guard_release(&qword_267B93508);
  }
  if (v1) {
    return &qword_267B934F0;
  }
  else {
    return &qword_267B934D0;
  }
}

void sub_216F659C4(_Unwind_Exception *a1)
{
}

void *sub_216F65A48(uint64_t **a1)
{
  qword_267B934F8 = 0;
  unk_267B93500 = 0;
  qword_267B934F0 = 0;
  sub_216973388((char **)&qword_267B934F0, ((unk_267B934D8 - qword_267B934D0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B934F0, (void *)qword_267B934F8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B934F0, (void *)qword_267B934F8, (uint64_t *)qword_267B934D0, unk_267B934D8, (unk_267B934D8 - qword_267B934D0) >> 3);
}

void sub_216F65AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F65B00()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F65BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F65C30()
{
  sub_216F674E4();
  sub_216779094(__p, "DeformableMesh");
  sub_216F67610((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F65C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::~UsdDeformersDeformableMesh(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D608;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdDeformers/deformableMesh.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdDeformersDeformableMesh pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMe"
                            "sh::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D608;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F65E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93518, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93518))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93510, "DeformableMesh");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93510, &dword_216758000);
    __cxa_guard_release(&qword_267B93518);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93510, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D608;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdDeformers/deformableMesh.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdDeformersDeformableMesh pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMe"
                            "sh::Define(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D608;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F66058(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93528, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93528))
  {
    __cxa_guard_release(&qword_267B93528);
  }
  return &qword_267B93520;
}

void sub_216F66100(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93538, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *)__cxa_guard_acquire(&qword_267B93538);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::_GetStaticTfType(v2);
      byte_267B93530 = sub_216D16508((char *)&qword_267B93520, v3, v4);
      __cxa_guard_release(&qword_267B93538);
    }
  }
  return byte_267B93530;
}

void sub_216F66180(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  return &qword_267B93520;
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinComponentsPerVertexAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 88), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F66258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateSkinComponentsPerVertexAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 88), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 144), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F663C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateSkinJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 152), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F66528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateSkinJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 152), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 80), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F66690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateSkinBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 816), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinMeshBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 160), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F667F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateSkinMeshBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 160), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 360), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 56), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F66960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateMorphWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphChannelTargetCountsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, v3, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F66AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateMorphChannelTargetCountsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 480), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphChannelTargetWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 8), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F66C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateMorphChannelTargetWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v8) {
    uint64_t v8 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v8 + 8), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 512), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinTargetJointsRel(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 168), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F66D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateSkinTargetJointsRel(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 168), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F66E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphTargetBlendShapesRel(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 48), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F66F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::CreateMorphTargetBlendShapesRel(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  if (!v3) {
    uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)((char *)v3 + 48), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F66FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  int v1 = (int)this;
  uint64_t v30 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93558, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93558))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v3) {
      uint64_t v3 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v4 = *((void *)v3 + 11);
    uint64_t v22 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v22 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v5) {
      int v5 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v6 = *((void *)v5 + 18);
    uint64_t v23 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v7) {
      int v7 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v8 = *((void *)v7 + 19);
    uint64_t v24 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v9) {
      uint64_t v9 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v10 = *((void *)v9 + 10);
    uint64_t v25 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v11) {
      uint64_t v11 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v12 = *((void *)v11 + 20);
    uint64_t v26 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v13) {
      char v13 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v14 = *((void *)v13 + 7);
    uint64_t v27 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v15) {
      uint64_t v15 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v16 = *(void *)v15;
    uint64_t v28 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    if (!v17) {
      uint64_t v17 = sub_216F635B8(&pxrInternal__aapl__pxrReserved__::UsdDeformersTokens);
    }
    uint64_t v18 = *((void *)v17 + 1);
    uint64_t v29 = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B93540, &v22, 8uLL);
    for (uint64_t i = 56; i != -8; i -= 8)
    {
      uint64_t v20 = *(uint64_t *)((char *)&v22 + i);
      if ((v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93540, &dword_216758000);
    __cxa_guard_release(&qword_267B93558);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93578, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93578))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)1);
    sub_216F6742C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93560, &dword_216758000);
    __cxa_guard_release(&qword_267B93578);
  }
  if (v1) {
    return &qword_267B93560;
  }
  else {
    return &qword_267B93540;
  }
}

void sub_216F673A8(_Unwind_Exception *a1)
{
}

void *sub_216F6742C(uint64_t **a1)
{
  qword_267B93568 = 0;
  unk_267B93570 = 0;
  qword_267B93560 = 0;
  sub_216973388((char **)&qword_267B93560, ((unk_267B93548 - qword_267B93540) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93560, (void *)qword_267B93568, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93560, (void *)qword_267B93568, (uint64_t *)qword_267B93540, unk_267B93548, (unk_267B93548 - qword_267B93540) >> 3);
}

void sub_216F674C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F674E4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F676C4((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F675C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F67610(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F676A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F676C4(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F67734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType::UsdDeformersTokensType(pxrInternal__aapl__pxrReserved__::UsdDeformersTokensType *this)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v30 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "morphChannelTargetCounts", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v30, "morphChannelTargetWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "morphDeformer:channelTargetCounts", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "morphDeformer:channelTargetWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "morphDeformer:targetBlendShapes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "morphDeformer:weights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "morphTargetBlendShapes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "morphWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "pointIndices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "points", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "skinBindTransforms", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "skinComponentsPerVertex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "skinDeformer:bindTransforms", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "skinDeformer:componentsPerVertex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "skinDeformer:jointIndices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "skinDeformer:jointWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "skinDeformer:meshBindTransform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "skinDeformer:targetJoints", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "skinJointIndices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "skinJointWeights", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "skinMeshBindTransform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "skinTargetJoints", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v31 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v30;
  uint64_t v32 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v33 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v34 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v35 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v36 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v37 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v37 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v38 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v39 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v40 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v41 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v42 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v43 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v44 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v45 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v46 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v47 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v48 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v49 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v50 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v51 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v52 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  uint64_t v24 = (char *)operator new(0xB0uLL);
  uint64_t v25 = 0;
  *((void *)this + 22) = v24;
  *((void *)this + 23) = v24;
  *((void *)this + 24) = v24 + 176;
  do
  {
    uint64_t v26 = *(uint64_t *)((char *)&v31 + v25);
    *(void *)&v24[v25] = v26;
    if ((v26 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v24[v25] &= 0xFFFFFFFFFFFFFFF8;
    }
    v25 += 8;
  }
  while (v25 != 176);
  *((void *)this + 23) = v24 + 176;
  for (uint64_t i = 168; i != -8; i -= 8)
  {
    uint64_t v28 = *(uint64_t *)((char *)&v31 + i);
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216F67E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void **a23,uint64_t a24,char a25)
{
  sub_216889A04(&a23);
  uint64_t v35 = 168;
  while (1)
  {
    uint64_t v36 = *(void *)(&a25 + v35);
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v35 -= 8;
    if (v35 == -8)
    {
      if ((*v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216F6812C()
{
}

void sub_216F68134()
{
}

void sub_216F6813C()
{
}

void sub_216F68144()
{
}

void sub_216F6814C()
{
}

void sub_216F68154()
{
}

void sub_216F6815C()
{
}

void sub_216F68164()
{
}

void sub_216F6816C()
{
}

void sub_216F68174()
{
}

void sub_216F6817C()
{
}

void sub_216F68184()
{
}

void sub_216F6818C()
{
}

void sub_216F68198()
{
  sub_216F6946C();
  sub_216779094(__p, "Volume");
  sub_216F69598((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F681E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdVolVolume::~UsdVolVolume(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolVolume::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D660;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdVol/volume.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdVolVolume pxrInternal__aapl__pxrReserved__::UsdVolVolume::Get(const UsdStagePtr &,"
                            " const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D660;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F683B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolVolume::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93588))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93580, "Volume");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93580, &dword_216758000);
    __cxa_guard_release(&qword_267B93588);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93580, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D660;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdVol/volume.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdVolVolume pxrInternal__aapl__pxrReserved__::UsdVolVolume::Define(const UsdStagePtr"
                            " &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D660;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F685C0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolVolume::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolVolume::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93598, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93598))
  {
    __cxa_guard_release(&qword_267B93598);
  }
  return &qword_267B93590;
}

void sub_216F68668(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolVolume::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B935A8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdVolVolume *)__cxa_guard_acquire(&qword_267B935A8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdVolVolume::_GetStaticTfType(v2);
      byte_267B935A0 = sub_216D16508((char *)&qword_267B93590, v3, v4);
      __cxa_guard_release(&qword_267B935A8);
    }
  }
  return byte_267B935A0;
}

void sub_216F686E8(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolVolume::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this)
{
  return &qword_267B93590;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolVolume::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B935C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B935C8))
  {
    qword_267B935B0 = 0;
    *(void *)algn_267B935B8 = 0;
    qword_267B935C0 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B935B0, &dword_216758000);
    __cxa_guard_release(&qword_267B935C8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B935E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B935E8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)1);
    qword_267B935D0 = 0;
    *(void *)algn_267B935D8 = 0;
    qword_267B935E0 = 0;
    sub_21698FA28(&qword_267B935D0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B935D0, &dword_216758000);
    __cxa_guard_release(&qword_267B935E8);
  }
  if (v1) {
    return &qword_267B935D0;
  }
  else {
    return &qword_267B935B0;
  }
}

void sub_216F68830(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdVolVolume::_MakeNamespaced(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F68A24();
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
    char v7 = (uint64_t *)((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    char v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  if (*((char *)v7 + 23) >= 0) {
    uint64_t v8 = (const char *)v7;
  }
  else {
    uint64_t v8 = (const char *)*v7;
  }
  int v9 = *((char *)EmptyString + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v10 = EmptyString[1];
  }
  size_t v11 = strlen(v8);
  if (v10 >= v11
    && ((size_t v12 = v11, v9 >= 0) ? (v13 = (const char *)EmptyString) : (v13 = (const char *)*EmptyString),
        !strncmp(v13, v8, v12)))
  {
    sub_2168D2318(a2, this);
  }
  else
  {
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F68A24();
    if ((*(void *)v14 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v15 = (const void **)((*(void *)v14 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else
    {
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      uint64_t v15 = (const void **)v14;
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v16 = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v15, (const void **)v16, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v21);
    uint64_t v17 = *a2;
    uint64_t v18 = *a2 & 7;
    if (&v21 == a2)
    {
      if (v18) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v18) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *a2 = v21;
      uint64_t v21 = 0;
    }
    if (v20 < 0) {
      operator delete(__p);
    }
  }
}

void sub_216F689E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((*v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_216F68A24()
{
  uint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B935F0);
  if (!v0)
  {
    uint64_t v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "field:", 0);
    uint64_t v2 = *(void *)v0;
    if ((*(void *)v0 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)v0 + 1) = 0;
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    uint64_t v6 = (void **)(v0 + 8);
    char v7 = 0;
    uint64_t v3 = operator new(8uLL);
    *((void *)v0 + 1) = v3;
    *((void *)v0 + 2) = v3;
    *uint64_t v3 = v2;
    uint64_t v4 = v3 + 1;
    *((void *)v0 + 3) = v3 + 1;
    if ((v2 & 7) != 0)
    {
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        *v3 &= 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)v0 + 2) = v4;
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    else
    {
      *((void *)v0 + 2) = v4;
    }
    uint64_t v5 = 0;
    atomic_compare_exchange_strong(&qword_267B935F0, (unint64_t *)&v5, (unint64_t)v0);
    if (v5)
    {
      uint64_t v6 = (void **)(v0 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B935F0);
    }
  }
  return (unint64_t)v0;
}

void sub_216F68B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_216889A04(&a9);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolVolume::GetFieldPaths(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  sub_216D16CFC((uint64_t)v19, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v19, v3))
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F68A24();
    if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)v19, EmptyString, &v17);
    uint64_t v6 = v17;
    for (uint64_t i = v18; v6 != i; v6 += 32)
    {
      sub_216D6B8C4(v6, (uint64_t)&v12);
      int v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v12, v8))
      {
        if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v12, (uint64_t *)&v9))
        {
          if (v10 - (void)v9 == 8 && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v9))
          {
            pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v12, (pxrInternal__aapl__pxrReserved__::TfToken *)&v24);
            sub_216F69650((uint64_t **)a2, (uint64_t *)&v24, &v24, v9);
            if ((v24 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
        }
      }
      unint64_t v24 = (unint64_t)&v9;
      sub_216981168((void ***)&v24);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
      sub_21697C414(&v14);
      if (v13) {
        sub_216D16E0C(v13);
      }
    }
    size_t v12 = (void **)&v17;
    sub_216D3BBE0(&v12);
  }
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v20) {
    sub_216D16E0C(v20);
  }
}

void sub_216F68D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void **);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v5 = *(void *)(v3 - 72);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)(v3 - 72) = va;
  sub_216981168((void ***)(v3 - 72));
  sub_216D33F64((uint64_t)va1);
  va_copy((va_list)v10, va2);
  sub_216D3BBE0((void ***)va1);
  sub_216D16AD8((uint64_t)va3);
  sub_216ABB40C(v2, *(void **)(v2 + 8));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolVolume::HasFieldRelationship(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D16CFC((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdVolVolume::_MakeNamespaced(a2, &v5);
  uint64_t HasRelationship = pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  return HasRelationship;
}

void sub_216F68E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolVolume::GetFieldPath(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdVolVolume::_MakeNamespaced(a2, (uint64_t *)&v17);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v17, (uint64_t)v12);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
  int v8 = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v12, v5);
  if (IsDefined
    && (uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)v12, (uint64_t *)&v8), IsDefined)&& (uint64_t IsDefined = (uint64_t)v8, (char *)v9 - (char *)v8 == 8)&& (uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v8), IsDefined))
  {
    char v7 = (uint64_t *)v8;
  }
  else
  {
    char v7 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsDefined);
  }
  sub_216981010(a3, v7);
  sub_21698105C(a3 + 1, (_DWORD *)v7 + 1);
  unint64_t v17 = (unint64_t)&v8;
  sub_216981168((void ***)&v17);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_216F69024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void *)(v2 - 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolVolume::CreateFieldRelationship(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3)
    && !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(a3))
  {
    return 0;
  }
  sub_216D16CFC((uint64_t)&v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdVolVolume::_MakeNamespaced(a2, (uint64_t *)&v18);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v13);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v13, v6))
  {
    sub_216981010(&v20, a3);
    sub_21698105C(&v21, (_DWORD *)a3 + 1);
    int v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v18 = (unint64_t)&v9;
    char v19 = 0;
    int v9 = (atomic_ullong *)operator new(8uLL);
    uint64_t v10 = v9;
    uint64_t v11 = (char *)(v9 + 1);
    uint64_t v10 = (atomic_ullong *)sub_216980F74((uint64_t)&v11, &v20, &v22, v9);
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v13, (pxrInternal__aapl__pxrReserved__::SdfPath **)&v9);
    unint64_t v18 = (unint64_t)&v9;
    sub_216981168((void ***)&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_21697C414(&v20);
  }
  else
  {
    uint64_t v7 = 0;
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  return v7;
}

void sub_216F69260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolVolume::BlockFieldRelationship(pxrInternal__aapl__pxrReserved__::UsdVolVolume *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D16CFC((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdVolVolume::_MakeNamespaced(a2, (uint64_t *)&v15);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v15, (uint64_t)v10);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v10, v3);
  if (IsDefined)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v10, &v6);
    unint64_t v15 = (unint64_t)&v6;
    sub_216981168((void ***)&v15);
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  return IsDefined;
}

void sub_216F6940C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *(void *)(v7 - 24) = v6;
  sub_216981168((void ***)(v7 - 24));
  sub_216D33F64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F6946C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F0D538((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F6954C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F69598(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F6962C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216F69650(uint64_t **a1, uint64_t *a2, void *a3, _DWORD *a4)
{
  int v7 = (uint64_t **)sub_2168BE158((uint64_t)a1, &v12, a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    sub_216F696F4((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_21677B358(a1, v12, v9, v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0;
    sub_216ABB368((uint64_t)v11, 0);
  }
  return v8;
}

_DWORD *sub_216F696F4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  v8[4] = *a2;
  *a2 = 0;
  sub_216981010((_DWORD *)v8 + 10, a3);
  uint64_t result = sub_21698105C((_DWORD *)v8 + 11, a3 + 1);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::~UsdVolFieldBase(pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D6B8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdVol/fieldBase.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdVolFieldBase pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D6B8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F69920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93600, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93600))
  {
    __cxa_guard_release(&qword_267B93600);
  }
  return &qword_267B935F8;
}

void sub_216F699B0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93610, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *)__cxa_guard_acquire(&qword_267B93610);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::_GetStaticTfType(v2);
      byte_267B93608 = sub_216D16508((char *)&qword_267B935F8, v3, v4);
      __cxa_guard_release(&qword_267B93610);
    }
  }
  return byte_267B93608;
}

void sub_216F69A30(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *this)
{
  return &qword_267B935F8;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93630, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93630))
  {
    qword_267B93618 = 0;
    unk_267B93620 = 0;
    qword_267B93628 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93618, &dword_216758000);
    __cxa_guard_release(&qword_267B93630);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93650, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93650))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    qword_267B93638 = 0;
    unk_267B93640 = 0;
    qword_267B93648 = 0;
    sub_21698FA28(&qword_267B93638, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93638, &dword_216758000);
    __cxa_guard_release(&qword_267B93650);
  }
  if (v1) {
    return &qword_267B93638;
  }
  else {
    return &qword_267B93618;
  }
}

void sub_216F69B78(_Unwind_Exception *a1)
{
}

uint64_t *sub_216F69B90()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F06AAC((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F69C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::~UsdVolFieldAsset(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this)
{
  pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::~UsdVolFieldBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D710;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdVol/fieldAsset.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdVolFieldAsset pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D710;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F69E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93660, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93660))
  {
    __cxa_guard_release(&qword_267B93660);
  }
  return &qword_267B93658;
}

void sub_216F69F04(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93670, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *)__cxa_guard_acquire(&qword_267B93670);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::_GetStaticTfType(v2);
      byte_267B93668 = sub_216D16508((char *)&qword_267B93658, v3, v4);
      __cxa_guard_release(&qword_267B93670);
    }
  }
  return byte_267B93668;
}

void sub_216F69F84(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this)
{
  return &qword_267B93658;
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetFilePathAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3) {
    unint64_t v3 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 88), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6A05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::CreateFilePathAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 88), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetFieldNameAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3) {
    unint64_t v3 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 72), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6A1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::CreateFieldNameAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetFieldIndexAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3) {
    unint64_t v3 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 64), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6A32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::CreateFieldIndexAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 16), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetFieldDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3) {
    unint64_t v3 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 56), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6A494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::CreateFieldDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetVectorDataRoleHintAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3) {
    unint64_t v3 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 288), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6A5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::CreateVectorDataRoleHintAttr(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 288), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *this)
{
  int v1 = (int)this;
  uint64_t v21 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93690, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93690))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v3) {
      unint64_t v3 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    }
    uint64_t v4 = *((void *)v3 + 11);
    uint64_t v16 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v5) {
      char v5 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    }
    uint64_t v6 = *((void *)v5 + 9);
    uint64_t v17 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v7) {
      int v7 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    }
    uint64_t v8 = *((void *)v7 + 8);
    uint64_t v18 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v9) {
      uint64_t v9 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    }
    uint64_t v10 = *((void *)v9 + 7);
    uint64_t v19 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v11) {
      uint64_t v11 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    }
    uint64_t v12 = *((void *)v11 + 36);
    uint64_t v20 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B93678, &v16, 5uLL);
    for (uint64_t i = 32; i != -8; i -= 8)
    {
      uint64_t v14 = *(uint64_t *)((char *)&v16 + i);
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93678, &dword_216758000);
    __cxa_guard_release(&qword_267B93690);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B936B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B936B0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdVolFieldBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdVolFieldBase *)1);
    sub_216F6AA2C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93698, &dword_216758000);
    __cxa_guard_release(&qword_267B936B0);
  }
  if (v1) {
    return &qword_267B93698;
  }
  else {
    return &qword_267B93678;
  }
}

void sub_216F6A9A8(_Unwind_Exception *a1)
{
}

void *sub_216F6AA2C(uint64_t **a1)
{
  qword_267B936A0 = 0;
  unk_267B936A8 = 0;
  qword_267B93698 = 0;
  sub_216973388((char **)&qword_267B93698, ((unk_267B93680 - qword_267B93678) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93698, (void *)qword_267B936A0, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93698, (void *)qword_267B936A0, (uint64_t *)qword_267B93678, unk_267B93680, (unk_267B93680 - qword_267B93678) >> 3);
}

void sub_216F6AAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F6AAE4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F6AC10((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F6ABC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F6AC10(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F6AC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdVolTokensType *sub_216F6ACA4(atomic_ullong *a1)
{
  uint64_t result = sub_216F6ACEC();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_216F6AD30((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdVolTokensType *sub_216F6ACEC()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)operator new(0x168uLL);
  pxrInternal__aapl__pxrReserved__::UsdVolTokensType::UsdVolTokensType(v0);
  return v0;
}

void sub_216F6AD1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216F6AD30(uint64_t a1)
{
  uint64_t v44 = (void **)(a1 + 336);
  sub_216889A04(&v44);
  uint64_t v2 = *(void *)(a1 + 328);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 320);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 312);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 304);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 296);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 288);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 280);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 272);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 264);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 256);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 248);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 240);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 232);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 224);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 216);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 208);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 200);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 192);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 184);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *(void *)(a1 + 176);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *(void *)(a1 + 168);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *(void *)(a1 + 160);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *(void *)(a1 + 152);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *(void *)(a1 + 144);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *(void *)(a1 + 136);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *(void *)(a1 + 128);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *(void *)(a1 + 120);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *(void *)(a1 + 112);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *(void *)(a1 + 104);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *(void *)(a1 + 96);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *(void *)(a1 + 88);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *(void *)(a1 + 80);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *(void *)(a1 + 72);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *(void *)(a1 + 64);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *(void *)(a1 + 56);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *(void *)(a1 + 48);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *(void *)(a1 + 40);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v39 = *(void *)(a1 + 32);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = *(void *)(a1 + 24);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v41 = *(void *)(a1 + 16);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v42 = *(void *)(a1 + 8);
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216F6B15C()
{
  sub_216F6BCC4();
  sub_216779094(__p, "Field3DAsset");
  sub_216F6BDF0((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F6B1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::~UsdVolField3DAsset(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this)
{
  pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::~UsdVolFieldAsset(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D768;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdVol/field3DAsset.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdVolField3DAsset pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D768;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F6B378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B936C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B936C0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B936B8, "Field3DAsset");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B936B8, &dword_216758000);
    __cxa_guard_release(&qword_267B936C0);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B936B8, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D768;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdVol/field3DAsset.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdVolField3DAsset pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::Define(const"
                            " UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D768;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F6B584(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B936D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B936D0))
  {
    __cxa_guard_release(&qword_267B936D0);
  }
  return &qword_267B936C8;
}

void sub_216F6B62C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B936E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *)__cxa_guard_acquire(&qword_267B936E0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::_GetStaticTfType(v2);
      byte_267B936D8 = sub_216D16508((char *)&qword_267B936C8, v3, v4);
      __cxa_guard_release(&qword_267B936E0);
    }
  }
  return byte_267B936D8;
}

void sub_216F6B6AC(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this)
{
  return &qword_267B936C8;
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::GetFieldDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3) {
    uint64_t v3 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 56), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6B784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::CreateFieldDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::GetFieldPurposeAttr(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3) {
    uint64_t v3 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 80), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6B8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::CreateFieldPurposeAttr(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdVolField3DAsset *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93700, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93700))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v3) {
      uint64_t v3 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    }
    uint64_t v4 = *((void *)v3 + 7);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      uint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v6) {
      int v6 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 10);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B936E8, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B936E8, &dword_216758000);
    __cxa_guard_release(&qword_267B93700);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93720, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93720))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *)1);
    sub_216F6BC0C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93708, &dword_216758000);
    __cxa_guard_release(&qword_267B93720);
  }
  if (v1) {
    return &qword_267B93708;
  }
  else {
    return &qword_267B936E8;
  }
}

void sub_216F6BB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B93700);
  _Unwind_Resume(a1);
}

void *sub_216F6BC0C(uint64_t **a1)
{
  qword_267B93710 = 0;
  unk_267B93718 = 0;
  qword_267B93708 = 0;
  sub_216973388((char **)&qword_267B93708, ((*(void *)algn_267B936F0 - qword_267B936E8) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93708, (void *)qword_267B93710, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93708, (void *)qword_267B93710, (uint64_t *)qword_267B936E8, *(uint64_t **)algn_267B936F0, (*(void *)algn_267B936F0 - qword_267B936E8) >> 3);
}

void sub_216F6BCA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F6BCC4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F6BEA4((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F6BDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F6BDF0(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F6BE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F6BEA4(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F6BF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F6BF38()
{
  sub_216F6CAA0();
  sub_216779094(__p, "OpenVDBAsset");
  sub_216F6CBCC((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F6BF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::~UsdVolOpenVDBAsset(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this)
{
  pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::~UsdVolFieldAsset(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D7C0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdVol/openVDBAsset.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdVolOpenVDBAsset pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D7C0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F6C154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93730, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93730))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93728, "OpenVDBAsset");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93728, &dword_216758000);
    __cxa_guard_release(&qword_267B93730);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93728, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D7C0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdVol/openVDBAsset.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdVolOpenVDBAsset pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::Define(const"
                            " UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D7C0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F6C360(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93740, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93740))
  {
    __cxa_guard_release(&qword_267B93740);
  }
  return &qword_267B93738;
}

void sub_216F6C408(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93750, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *)__cxa_guard_acquire(&qword_267B93750);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::_GetStaticTfType(v2);
      byte_267B93748 = sub_216D16508((char *)&qword_267B93738, v3, v4);
      __cxa_guard_release(&qword_267B93750);
    }
  }
  return byte_267B93748;
}

void sub_216F6C488(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this)
{
  return &qword_267B93738;
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::GetFieldDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3) {
    unint64_t v3 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 56), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6C560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::CreateFieldDataTypeAttr(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::GetFieldClassAttr(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v3) {
    unint64_t v3 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v3 + 48), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6C6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::CreateFieldClassAttr(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)((char *)v8 + 48), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdVolOpenVDBAsset *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93770, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93770))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v3) {
      unint64_t v3 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    }
    uint64_t v4 = *((void *)v3 + 7);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      char v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdVolTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    if (!v6) {
      int v6 = sub_216F6ACA4(&pxrInternal__aapl__pxrReserved__::UsdVolTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 6);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B93758, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93758, &dword_216758000);
    __cxa_guard_release(&qword_267B93770);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93790, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93790))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdVolFieldAsset *)1);
    sub_216F6C9E8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93778, &dword_216758000);
    __cxa_guard_release(&qword_267B93790);
  }
  if (v1) {
    return &qword_267B93778;
  }
  else {
    return &qword_267B93758;
  }
}

void sub_216F6C970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B93770);
  _Unwind_Resume(a1);
}

void *sub_216F6C9E8(uint64_t **a1)
{
  qword_267B93780 = 0;
  unk_267B93788 = 0;
  qword_267B93778 = 0;
  sub_216973388((char **)&qword_267B93778, ((unk_267B93760 - qword_267B93758) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93778, (void *)qword_267B93780, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93778, (void *)qword_267B93780, (uint64_t *)qword_267B93758, unk_267B93760, (unk_267B93760 - qword_267B93758) >> 3);
}

void sub_216F6CA80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F6CAA0()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F6BEA4((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F6CB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F6CBCC(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F6CC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdVolTokensType *pxrInternal__aapl__pxrReserved__::UsdVolTokensType::UsdVolTokensType(pxrInternal__aapl__pxrReserved__::UsdVolTokensType *this)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  uint64_t v50 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "BOOL", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v50, "Color", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "double2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "double3", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "double", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "field", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "fieldClass", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "fieldDataType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "fieldIndex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "fieldName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "fieldPurpose", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "filePath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "float2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "float3", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "float", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "fogVolume", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "half", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "half2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "half3", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "int2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "int3", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "int64", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "int", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "levelSet", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "mask", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "matrix3d", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "matrix4d", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "None", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "Normal", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "Point", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "quatd", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "staggered", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "string", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "uint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "unknown", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "Vector", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "vectorDataRoleHint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "Field3DAsset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 304, "FieldAsset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 312, "FieldBase", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 320, "OpenVDBAsset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 328, "Volume", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v51 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v50;
  uint64_t v52 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v53 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v54 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v55 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v56 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v57 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v58 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v59 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v60 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v61 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v62 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v63 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v64 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v65 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v66 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v67 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v68 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v69 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v70 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v71 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v72 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v73 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v74 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v75 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v76 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v77 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v78 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v79 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v80 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v32 = *((void *)this + 30);
  uint64_t v81 = v32;
  if ((v32 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *((void *)this + 31);
  uint64_t v82 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v83 = v34;
  if ((v34 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v35 = *((void *)this + 33);
  uint64_t v84 = v35;
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v36 = *((void *)this + 34);
  uint64_t v85 = v36;
  if ((v36 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v37 = *((void *)this + 35);
  uint64_t v86 = v37;
  if ((v37 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v38 = *((void *)this + 36);
  uint64_t v87 = v38;
  if ((v38 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v39 = *((void *)this + 37);
  uint64_t v88 = v39;
  if ((v39 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v40 = *((void *)this + 38);
  uint64_t v89 = v40;
  if ((v40 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v41 = *((void *)this + 39);
  uint64_t v90 = v41;
  if ((v41 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v90 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v42 = *((void *)this + 40);
  uint64_t v91 = v42;
  if ((v42 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v91 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v43 = *((void *)this + 41);
  uint64_t v92 = v43;
  if ((v43 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v92 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  uint64_t v44 = (char *)operator new(0x150uLL);
  uint64_t v45 = 0;
  *((void *)this + 42) = v44;
  *((void *)this + 43) = v44;
  *((void *)this + 44) = v44 + 336;
  do
  {
    uint64_t v46 = *(uint64_t *)((char *)&v51 + v45);
    *(void *)&v44[v45] = v46;
    if ((v46 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v44[v45] &= 0xFFFFFFFFFFFFFFF8;
    }
    v45 += 8;
  }
  while (v45 != 336);
  *((void *)this + 43) = v44 + 336;
  for (uint64_t i = 328; i != -8; i -= 8)
  {
    uint64_t v48 = *(uint64_t *)((char *)&v51 + i);
    if ((v48 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216F6D938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void **a43,uint64_t a44,char a45)
{
  sub_216889A04(&a43);
  uint64_t v55 = 328;
  while (1)
  {
    uint64_t v56 = *(void *)(&a45 + v55);
    if ((v56 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v55 -= 8;
    if (v55 == -8)
    {
      if ((*v50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v54 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216F6DE28()
{
}

void sub_216F6DE30()
{
}

void sub_216F6DE38()
{
}

void sub_216F6DE40()
{
}

void sub_216F6DE48()
{
}

void sub_216F6DE50()
{
}

void sub_216F6DE58()
{
}

void sub_216F6DE60()
{
}

void sub_216F6DE68()
{
}

void sub_216F6DE70()
{
}

void sub_216F6DE78()
{
}

void sub_216F6DE80()
{
}

void sub_216F6DE88()
{
}

void sub_216F6DE90()
{
}

void sub_216F6DE98()
{
}

void sub_216F6DEA0()
{
}

void sub_216F6DEA8()
{
}

void sub_216F6DEB0()
{
}

void sub_216F6DEB8()
{
}

void sub_216F6DEC0()
{
}

void sub_216F6DEC8()
{
}

void sub_216F6DED0()
{
}

void sub_216F6DED8()
{
}

void sub_216F6DEE0()
{
}

void sub_216F6DEE8()
{
}

void sub_216F6DEF0()
{
}

void sub_216F6DEF8()
{
}

void sub_216F6DF00()
{
}

void sub_216F6DF08()
{
}

void sub_216F6DF10()
{
}

void sub_216F6DF18()
{
}

void sub_216F6DF20()
{
}

void sub_216F6DF28()
{
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::~UsdMediaAssetPreviewsAPI(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **this)
{
  *this = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C76D818;
  sub_216E10FB8(this + 4);

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)this);
}

{
  uint64_t vars8;

  *this = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C76D818;
  sub_216E10FB8(this + 4);

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)this);
}

{
  void *v2;
  uint64_t vars8;

  *this = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C76D818;
  sub_216E10FB8(this + 4);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)this);

  operator delete(v2);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D818;
    *((void *)a3 + 3) = 0;
    *((void *)a3 + 4) = 0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdMedia/assetPreviewsAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdMediaAssetPreviewsAPI pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::"
                            "Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D818;
    *((void *)a3 + 3) = 0;
    *((void *)a3 + 4) = 0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F6E1C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this)
{
  return 5;
}

uint64_t sub_216F6E1E8(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93798, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdMediaAssetPreviewsAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216F6E3D0(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *(void *)a2 = &unk_26C76D818;
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *(void *)a2 = &unk_26C76D818;
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216F6E3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F6E3D0(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93798, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdMediaAssetPreviewsAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B937A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B937A0))
  {
    __cxa_guard_release(&qword_267B937A0);
  }
  return &qword_267B93798;
}

void sub_216F6E504(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B937B0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *)__cxa_guard_acquire(&qword_267B937B0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetStaticTfType(v2);
      byte_267B937A8 = sub_216D16508((char *)&qword_267B93798, v3, v4);
      __cxa_guard_release(&qword_267B937B0);
    }
  }
  return byte_267B937A8;
}

void sub_216F6E584(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this)
{
  return &qword_267B93798;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B937D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B937D0))
  {
    qword_267B937B8 = 0;
    unk_267B937C0 = 0;
    qword_267B937C8 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B937B8, &dword_216758000);
    __cxa_guard_release(&qword_267B937D0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B937F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B937F0))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_267B937D8 = 0;
    unk_267B937E0 = 0;
    qword_267B937E8 = 0;
    sub_21698FA28(&qword_267B937D8, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B937D8, &dword_216758000);
    __cxa_guard_release(&qword_267B937F0);
  }
  if (v1) {
    return &qword_267B937D8;
  }
  else {
    return &qword_267B937B8;
  }
}

void sub_216F6E6CC(_Unwind_Exception *a1)
{
}

pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::Thumbnails *pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::Thumbnails::Thumbnails(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::Thumbnails *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(this, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    *((void *)this + 2) = *((void *)a2 + 2);
    *(_OWORD *)this = v4;
  }
  int v5 = (char *)this + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 24);
    *((void *)this + 5) = *((void *)a2 + 5);
    *(_OWORD *)int v5 = v6;
  }
  return this;
}

void sub_216F6E760(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::GetDefaultThumbnails(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this, std::string *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *)sub_216D16CFC((uint64_t)&v17, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::_GetStaticTfType(v3);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93798, v4);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)&v17, SchemaInfo))
    {
      long long v6 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
      if (!v6) {
        long long v6 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v17, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v6 + 120), (pxrInternal__aapl__pxrReserved__::VtValue *)&v22);
      if (!sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&v22)) {
        goto LABEL_20;
      }
      if ((v23 & 4) != 0) {
        int v7 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(&v22);
      }
      else {
        int v7 = v22;
      }
      int v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
      if (!v8) {
        int v8 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
      }
      uint64_t v9 = (*((void *)v8 + 1) & 0xFFFFFFFFFFFFFFF8) != 0
         ? (const void **)((*((void *)v8 + 1) & 0xFFFFFFFFFFFFFFF8) + 16)
         : (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      if (sub_216F6EA0C(v7, v9))
      {
        char v11 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
        if (!v11) {
          char v11 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
        }
        if ((*((void *)v11 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
          EmptyString = (std::string *)((*((void *)v11 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
        }
        uint64_t ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(v7, EmptyString, ":");
        uint64_t v14 = *(void *)(ValueAtPath + 8);
        if ((v14 & 4) != 0) {
          uint64_t v15 = (const std::string *)(*(uint64_t (**)(void))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))();
        }
        else {
          uint64_t v15 = *(const std::string **)ValueAtPath;
        }
        std::string::operator=(a2, v15);
        std::string::operator=(a2 + 1, v15 + 1);
        uint64_t v10 = 1;
      }
      else
      {
LABEL_20:
        uint64_t v10 = 0;
      }
      sub_2168EE084((uint64_t)&v22);
    }
    else
    {
      uint64_t v10 = 0;
    }
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
    sub_21697C414(&v19);
    if (v18) {
      sub_216D16E0C(v18);
    }
  }
  else
  {
    uint64_t v17 = "usdMedia/assetPreviewsAPI.cpp";
    uint64_t v18 = (atomic_ullong *)"GetDefaultThumbnails";
    uint64_t v19 = 147;
    unint64_t v20 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::GetDefaultThumbnails(Thumbnails *) const";
    char v21 = 0;
    return 0;
  }
  return v10;
}

void sub_216F6E9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F6EA0C(uint64_t *a1, const void **a2)
{
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::VtDictionary::find(a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)a1);
  if (v5 == v7 && (!v5 || v3 == v6)) {
    return 0;
  }

  return sub_2169980B4((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 56));
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::SetDefaultThumbnails(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this, const pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::Thumbnails *a2)
{
  v9[2] = *(unsigned int **)MEMORY[0x263EF8340];
  sub_216D16CFC((uint64_t)v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v7 = 0;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3) {
    uint64_t v3 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  if ((*((void *)v3 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)v3 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v7, (long long *)EmptyString);
  sub_216B8E52C(v5, (long long *)a2);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v6) {
    uint64_t v6 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  v9[1] = (unsigned int *)&off_26C74DD80;
  sub_2168EEEA8(v9, &v7);
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v6 + 120), (const pxrInternal__aapl__pxrReserved__::VtValue *)v9);
}

void sub_216F6EBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::ClearDefaultThumbnails(pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI *this)
{
  sub_216D16CFC((uint64_t)&v2, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v1) {
    uint64_t v1 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::ClearAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v2, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v1 + 120));
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
  sub_21697C414(&v4);
  if (v3) {
    sub_216D16E0C(v3);
  }
}

void sub_216F6ECAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::GetAssetDefaultPreviews(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  int v4 = v5;
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(a1, &v4, &v6);
  sub_216ABBA60(&v7, (uint64_t *)&v6);
  pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::GetAssetDefaultPreviews(&v7, a2);
  uint64_t v3 = v8;
  if (v8 && atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_216ABB798(&v6);
  sub_2167877AC((uint64_t)&v4, v5[0]);
}

void sub_216F6ED78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = a14;
  if (a14)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  sub_216ABB798(&a12);
  sub_2167877AC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaAssetPreviewsAPI::GetAssetDefaultPreviews(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = sub_21697CF14(a1);
  if (v5 & 1 | (unint64_t)v4)
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_2169791E0(a1);
    uint64_t DefaultPrim = pxrInternal__aapl__pxrReserved__::SdfLayer::GetDefaultPrim(v6, (atomic_uint **)&v15);
    if (v15)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93800, memory_order_acquire) & 1) == 0)
      {
        uint64_t DefaultPrim = __cxa_guard_acquire(&qword_267B93800);
        if (DefaultPrim)
        {
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&unk_267B937F8, "__No_Such_Prim__");
          __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B937F8, &dword_216758000);
          __cxa_guard_release(&qword_267B93800);
        }
      }
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)DefaultPrim);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v15, &v13);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&unk_267B937F8, &v11);
      sub_216981010(&v22, &v11);
      sub_21698105C(&v23, &v12);
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      unint64_t v20 = (void ***)&v16;
      char v21 = 0;
      uint64_t v16 = (atomic_ullong *)operator new(8uLL);
      uint64_t v17 = v16;
      uint64_t v18 = (void **)(v16 + 1);
      uint64_t v17 = (atomic_ullong *)sub_216980F74((uint64_t)&v18, &v22, &v24, v16);
      pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::UsdStagePopulationMask(v10, &v16);
      unint64_t v20 = (void ***)&v16;
      sub_216981168((void ***)&v20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
      sub_21697C414(&v22);
      pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked(a1, v10, 0, (uint64_t *)&v20);
      if (v20)
      {
        uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70((uint64_t *)&v20);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetDefaultPrim(v9, (uint64_t)&v16);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v16);
        *((void *)a2 + 3) = 0;
        *(void *)a2 = &unk_26C76D818;
        *((void *)a2 + 4) = v20;
        unint64_t v20 = 0;
        sub_2168BD378(a2 + 32, 0);
        if ((v19 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
        sub_21697C414(&v18);
        if (v17) {
          sub_216D16E0C(v17);
        }
        sub_216E10FB8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v20);
      }
      else
      {
        sub_216E10FB8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v20);
        LODWORD(v16) = 1;
        uint64_t v17 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v18);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v18 + 1);
        uint64_t v19 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v16);
        *(void *)a2 = &unk_26C76D818;
        *((void *)a2 + 3) = 0;
        *((void *)a2 + 4) = 0;
        if ((v19 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
        sub_21697C414(&v18);
        if (v17) {
          sub_216D16E0C(v17);
        }
      }
      uint64_t v16 = (atomic_ullong *)v10;
      sub_216981168((void ***)&v16);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
      sub_21697C414(&v11);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
      sub_21697C414(&v13);
    }
    else
    {
      LODWORD(v16) = 1;
      uint64_t v17 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v18);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v18 + 1);
      uint64_t v19 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v16);
      *(void *)a2 = &unk_26C76D818;
      *((void *)a2 + 3) = 0;
      *((void *)a2 + 4) = 0;
      if ((v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
      sub_21697C414(&v18);
      if (v17) {
        sub_216D16E0C(v17);
      }
    }
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    LODWORD(v16) = 1;
    uint64_t v17 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v18 + 1);
    uint64_t v19 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v16);
    *(void *)a2 = &unk_26C76D818;
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
    sub_21697C414(&v18);
    if (v17) {
      sub_216D16E0C(v17);
    }
  }
}

void sub_216F6F270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216F6F398()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F6F478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *sub_216F6F4C8(atomic_ullong *a1)
{
  uint64_t result = sub_216F6F510();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_216F6F554((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *sub_216F6F510()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)operator new(0xC0uLL);
  pxrInternal__aapl__pxrReserved__::UsdMediaTokensType::UsdMediaTokensType(v0);
  return v0;
}

void sub_216F6F540(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216F6F554(uint64_t a1)
{
  int v23 = (void **)(a1 + 168);
  sub_216889A04(&v23);
  uint64_t v2 = *(void *)(a1 + 160);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 152);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 144);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 136);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 128);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 120);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 112);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 104);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 96);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 88);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 80);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 72);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 64);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 56);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 48);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 40);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 32);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 24);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 16);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *(void *)(a1 + 8);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216F6F788()
{
  sub_216F70BA0();
  sub_216779094(__p, "SpatialAudio");
  sub_216F70CCC((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F6F7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::~UsdMediaSpatialAudio(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D870;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdMedia/spatialAudio.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdMediaSpatialAudio pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::Get(cons"
                            "t UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D870;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F6F9A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93810, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93810))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93808, "SpatialAudio");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93808, &dword_216758000);
    __cxa_guard_release(&qword_267B93810);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93808, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D870;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdMedia/spatialAudio.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdMediaSpatialAudio pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::Define(c"
                            "onst UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76D870;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F6FBB0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93820, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93820))
  {
    __cxa_guard_release(&qword_267B93820);
  }
  return &qword_267B93818;
}

void sub_216F6FC58(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93830, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *)__cxa_guard_acquire(&qword_267B93830);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::_GetStaticTfType(v2);
      byte_267B93828 = sub_216D16508((char *)&qword_267B93818, v3, v4);
      __cxa_guard_release(&qword_267B93830);
    }
  }
  return byte_267B93828;
}

void sub_216F6FCD8(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this)
{
  return &qword_267B93818;
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetFilePathAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3) {
    uint64_t v3 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v3 + 24), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6FDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreateFilePathAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v8 + 24), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetAuralModeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3) {
    uint64_t v3 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, v3, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F6FF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreateAuralModeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetPlaybackModeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3) {
    uint64_t v3 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v3 + 96), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F70080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreatePlaybackModeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v8 + 96), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetStartTimeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3) {
    uint64_t v3 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v3 + 136), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F701E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreateStartTimeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v8 + 136), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 72), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetEndTimeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3) {
    uint64_t v3 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v3 + 16), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F70350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreateEndTimeAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v8 + 16), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 72), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetMediaOffsetAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3) {
    uint64_t v3 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v3 + 64), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F704B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreateMediaOffsetAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetGainAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v3) {
    uint64_t v3 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v3 + 32), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F70620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::CreateGainAttr(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  if (!v8) {
    uint64_t v8 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)((char *)v8 + 32), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdMediaSpatialAudio *this)
{
  int v1 = (int)this;
  uint64_t v27 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93850, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93850))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v3) {
      uint64_t v3 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    }
    uint64_t v4 = *((void *)v3 + 3);
    uint64_t v20 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v5) {
      uint64_t v5 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    }
    uint64_t v6 = *(void *)v5;
    uint64_t v21 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v21 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v7) {
      int v7 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    }
    uint64_t v8 = *((void *)v7 + 12);
    uint64_t v22 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v22 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v9) {
      uint64_t v9 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    }
    uint64_t v10 = *((void *)v9 + 17);
    uint64_t v23 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v11) {
      uint64_t v11 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    }
    uint64_t v12 = *((void *)v11 + 2);
    uint64_t v24 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v13) {
      char v13 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    }
    uint64_t v14 = *((void *)v13 + 8);
    uint64_t v25 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    if (!v15) {
      uint64_t v15 = sub_216F6F4C8(&pxrInternal__aapl__pxrReserved__::UsdMediaTokens);
    }
    uint64_t v16 = *((void *)v15 + 4);
    uint64_t v26 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B93838, &v20, 7uLL);
    for (uint64_t i = 48; i != -8; i -= 8)
    {
      uint64_t v18 = *(uint64_t *)((char *)&v20 + i);
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93838, &dword_216758000);
    __cxa_guard_release(&qword_267B93850);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93870, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93870))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    sub_216F70AE8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93858, &dword_216758000);
    __cxa_guard_release(&qword_267B93870);
  }
  if (v1) {
    return &qword_267B93858;
  }
  else {
    return &qword_267B93838;
  }
}

void sub_216F70A64(_Unwind_Exception *a1)
{
}

void *sub_216F70AE8(uint64_t **a1)
{
  qword_267B93860 = 0;
  unk_267B93868 = 0;
  qword_267B93858 = 0;
  sub_216973388((char **)&qword_267B93858, ((unk_267B93840 - qword_267B93838) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93858, (void *)qword_267B93860, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93858, (void *)qword_267B93860, (uint64_t *)qword_267B93838, unk_267B93840, (unk_267B93840 - qword_267B93838) >> 3);
}

void sub_216F70B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F70BA0()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F06AAC((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F70C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F70CCC(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F70D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *pxrInternal__aapl__pxrReserved__::UsdMediaTokensType::UsdMediaTokensType(pxrInternal__aapl__pxrReserved__::UsdMediaTokensType *this)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v29 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "auralMode", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v29, "defaultImage", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "endTime", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "filePath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "gain", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "loopFromStage", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "loopFromStart", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "loopFromStartToEnd", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "mediaOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "nonSpatial", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "onceFromStart", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "onceFromStartToEnd", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "playbackMode", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "previews", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "previews:thumbnails", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "previews:thumbnails:default", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "spatial", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "startTime", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "thumbnails", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "AssetPreviewsAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "SpatialAudio", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v30 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v29;
  uint64_t v31 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v32 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v33 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v34 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v35 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v36 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v37 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v37 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v38 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v39 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v40 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v41 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v42 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v43 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v44 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v45 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v46 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v47 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v48 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v49 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v50 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  uint64_t v23 = (char *)operator new(0xA8uLL);
  uint64_t v24 = 0;
  *((void *)this + 21) = v23;
  *((void *)this + 22) = v23;
  *((void *)this + 23) = v23 + 168;
  do
  {
    uint64_t v25 = *(uint64_t *)((char *)&v30 + v24);
    *(void *)&v23[v24] = v25;
    if ((v25 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v23[v24] &= 0xFFFFFFFFFFFFFFF8;
    }
    v24 += 8;
  }
  while (v24 != 168);
  *((void *)this + 22) = v23 + 168;
  for (uint64_t i = 160; i != -8; i -= 8)
  {
    uint64_t v27 = *(uint64_t *)((char *)&v30 + i);
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216F71450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void **a22,uint64_t a23,char a24)
{
  sub_216889A04(&a22);
  uint64_t v34 = 160;
  while (1)
  {
    uint64_t v35 = *(void *)(&a24 + v34);
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v34 -= 8;
    if (v34 == -8)
    {
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216F716F4()
{
}

void sub_216F716FC()
{
}

void sub_216F71704()
{
}

void sub_216F7170C()
{
}

void sub_216F71714()
{
}

void sub_216F7171C()
{
}

void sub_216F71724()
{
}

void sub_216F7172C()
{
}

void sub_216F71734()
{
}

void sub_216F7173C()
{
}

void sub_216F71744()
{
}

void sub_216F7174C()
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = off_26C76D8C8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdShade/connectableAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdShadeConnectableAPI pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::Get("
                            "const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = off_26C76D8C8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F71914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  return 4;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93880, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93880))
  {
    __cxa_guard_release(&qword_267B93880);
  }
  return &qword_267B93878;
}

void sub_216F719A4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93890, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)__cxa_guard_acquire(&qword_267B93890);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_GetStaticTfType(v2);
      byte_267B93888 = sub_216D16508((char *)&qword_267B93878, v3, v4);
      __cxa_guard_release(&qword_267B93890);
    }
  }
  return byte_267B93888;
}

void sub_216F71A24(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  return &qword_267B93878;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B938B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B938B0))
  {
    qword_267B93898 = 0;
    unk_267B938A0 = 0;
    qword_267B938A8 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93898, &dword_216758000);
    __cxa_guard_release(&qword_267B938B0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B938D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B938D0))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_267B938B8 = 0;
    unk_267B938C0 = 0;
    qword_267B938C8 = 0;
    sub_21698FA28(&qword_267B938B8, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B938B8, &dword_216758000);
    __cxa_guard_release(&qword_267B938D0);
  }
  if (v1) {
    return &qword_267B938B8;
  }
  else {
    return &qword_267B93898;
  }
}

void sub_216F71B6C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, uint64_t a2, int a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (sub_216F749E4(a2))
  {
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
    sub_216F71F1C(a2, TypeName, (uint64_t)&v19);
    if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v19, v7) & 1) == 0)goto LABEL_12; {
    switch(a3)
    }
    {
      case 2:
        sub_216D0162C((uint64_t)&v19, (int *)&__p);
        uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdAttribute::AddConnection(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, 3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        break;
      case 1:
        sub_216D0162C((uint64_t)&v19, (int *)&__p);
        uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdAttribute::AddConnection(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, 0);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        break;
      case 0:
        sub_216D0162C((uint64_t)&v19, &v26);
        float64x2_t __p = 0;
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        p_p = &__p;
        char v25 = 0;
        float64x2_t __p = operator new(8uLL);
        uint64_t v17 = __p;
        uint64_t v18 = (char *)__p + 8;
        uint64_t v17 = sub_216980F74((uint64_t)&v18, &v26, &v28, __p);
        uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections(a1, (pxrInternal__aapl__pxrReserved__::SdfPath **)&__p);
        p_p = &__p;
        sub_216981168(&p_p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
        uint64_t v9 = (void **)&v26;
LABEL_20:
        sub_21697C414(v9);
        goto LABEL_21;
      default:
LABEL_12:
        uint64_t v8 = 0;
LABEL_21:
        if ((v22 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
        sub_21697C414(&v21);
        if (v20) {
          sub_216D16E0C(v20);
        }
        return v8;
    }
    uint64_t v9 = &__p;
    goto LABEL_20;
  }
  uint64_t v19 = "usdShade/connectableAPI.cpp";
  uint64_t v20 = (atomic_ullong *)"ConnectToSource";
  uint64_t v21 = 170;
  unint64_t v22 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(const Us"
                          "dAttribute &, const UsdShadeConnectionSourceInfo &, const ConnectionModification)";
  char v23 = 0;
  sub_216D0162C((uint64_t)a1, (int *)&p_p);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&p_p);
  uint64_t v11 = (const char *)&__p;
  pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetPrefixForAttributeType((uint64_t *)*(unsigned int *)(a2 + 40), (uint64_t)&__p);
  if (SHIBYTE(v18) < 0) {
    uint64_t v11 = (const char *)__p;
  }
  unint64_t v12 = *(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFF8;
  if (v12)
  {
    char v13 = (const char *)(v12 + 16);
    if (*(char *)(v12 + 39) < 0) {
      char v13 = *(const char **)v13;
    }
  }
  else
  {
    char v13 = "";
  }
  sub_216D1E2AC(a2, &v26);
  uint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed connecting shading attribute <%s> to attribute %s%s on prim %s. The given source information is not valid", Text, v11, v13, v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  sub_21697C414(&v26);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&p_p + 1);
  sub_21697C414(&p_p);
  return 0;
}

void sub_216F71E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F71F1C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a2;
  sub_216D16CFC((uint64_t)v21, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  PrefixForAttributeType = pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetPrefixForAttributeType((uint64_t *)*(unsigned int *)(a1 + 40), (uint64_t)v19);
  if ((*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)PrefixForAttributeType);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)v19, (const void **)EmptyString, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v18);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18, a3);
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v7) & 1) == 0)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 48);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty(v8)) {
      uint64_t v9 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v26;
    }
    else {
      uint64_t v9 = v8;
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)v21, &v18, v9, 0, 0, (uint64_t)&__p);
    *(_DWORD *)a3 = __p;
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    uint64_t v11 = *(atomic_ullong **)(a3 + 8);
    *(void *)(a3 + 8) = v10;
    if (v11) {
      sub_216D16E0C(v11);
    }
    sub_21697DE94((int *)(a3 + 16), &v15);
    sub_21697DEEC((int *)(a3 + 20), &v16);
    if (&__p == (void **)a3)
    {
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      uint64_t v12 = *(void *)(a3 + 24);
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)(a3 + 24) = v17;
      uint64_t v17 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_21697C414(&v15);
    if (v14) {
      sub_216D16E0C(v14);
    }
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_21697C414(&v23);
  if (v22) {
    sub_216D16E0C(v22);
  }
}

void sub_216F72110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  sub_216D2EDA0(v24);
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_216D16AD8((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, uint64_t *a3, int a4, uint64_t a5)
{
  sub_216F74A90((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v8, a2, a3, a4, a5);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(a1, (uint64_t)v8, 0);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v8);
  return v6;
}

void sub_216F721F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(this, a2, &v8);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectionSourceInfo::UsdShadeConnectionSourceInfo((uint64_t)v10, &v8, a2);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(this, (uint64_t)v10, 0);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v10);
  uint64_t v6 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return v5;
}

void sub_216F722D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_uint *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&a12);
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, uint64_t a2)
{
  sub_216D16CFC((uint64_t)v8, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v13, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v8);
  void v13[3] = 0;
  v13[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a2, (atomic_uint **)&v7);
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a2);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(a1, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v13, (uint64_t *)&v7, 1, TypeName);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v13);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
  return v5;
}

{
  uint64_t TypeName;
  uint64_t v5;
  uint64_t v7;
  unsigned char v8[8];
  atomic_ullong *v9;
  int v10;
  int v11;
  uint64_t v12;
  void v13[4];

  sub_216D16CFC((uint64_t)v8, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v13, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v8);
  void v13[3] = 0;
  v13[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a2, (uint64_t)&v7);
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a2);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::ConnectToSource(a1, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v13, &v7, 2, TypeName);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v13);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
  return v5;
}

void sub_216F72454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)va1);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216F7259C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)va1);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::SetConnectedSources(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, uint64_t *a2)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  sub_216A6E72C((uint64_t *)&v29, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
LABEL_14:
    uint64_t v11 = pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections(a1, &v29);
  }
  else
  {
    while ((sub_216F749E4(v4) & 1) != 0)
    {
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
      sub_216F71F1C(v4, TypeName, (uint64_t)&v24);
      int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v24, v7);
      if (IsDefined)
      {
        sub_216D0162C((uint64_t)&v24, (int *)__p);
        uint64_t v9 = v30;
        if ((unint64_t)v30 >= v31)
        {
          int v10 = (_DWORD *)sub_216AE5CE4((uint64_t *)&v29, __p);
        }
        else
        {
          sub_21697D878(v30, __p);
          sub_21697D8B4(v9 + 1, (_DWORD *)__p + 1);
          int v10 = v9 + 2;
        }
        uint64_t v30 = v10;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_21697C414(__p);
      }
      if ((v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
      sub_21697C414(&v26);
      if (v25) {
        sub_216D16E0C(v25);
      }
      if (!IsDefined) {
        goto LABEL_24;
      }
      v4 += 56;
      if (v4 == v5) {
        goto LABEL_14;
      }
    }
    uint64_t v24 = (void **)"usdShade/connectableAPI.cpp";
    uint64_t v25 = (atomic_ullong *)"SetConnectedSources";
    uint64_t v26 = 265;
    unint64_t v27 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::SetConnectedSources(co"
                            "nst UsdAttribute &, const std::vector<UsdShadeConnectionSourceInfo> &)";
    char v28 = 0;
    sub_216D0162C((uint64_t)a1, &v22);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v22);
    char v13 = __p;
    pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetPrefixForAttributeType((uint64_t *)*(unsigned int *)(v4 + 40), (uint64_t)__p);
    if (v21 < 0) {
      char v13 = (void **)__p[0];
    }
    unint64_t v14 = *(void *)(v4 + 32) & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      int v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        int v15 = *(const char **)v15;
      }
    }
    else
    {
      int v15 = "";
    }
    sub_216D1E2AC(v4, &v18);
    int v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_21697C414(&v18);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_21697C414(&v22);
LABEL_24:
    uint64_t v11 = 0;
  }
  uint64_t v24 = (void **)&v29;
  sub_216981168(&v24);
  return v11;
}

void sub_216F72870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,uint64_t a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_21697B754(&a21);
  a22 = v22 - 104;
  sub_216981168((void ***)&a22);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, void *a3, _DWORD *a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a2 && a3 && a4)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSources(a1, 0, (uint64_t)v25);
    BOOL v8 = v29 != 0;
    if (v29)
    {
      if (v29 != 1)
      {
        v23[0] = "usdShade/connectableAPI.cpp";
        v23[1] = "GetConnectedSource";
        v23[2] = 308;
        v23[3] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource(const UsdAttri"
                 "bute &, UsdShadeConnectableAPI *, TfToken *, UsdShadeAttributeType *)";
        char v24 = 0;
        sub_216D0162C((uint64_t)a1, &v21);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v23, (pxrInternal__aapl__pxrReserved__ *)"More than one connection for shading attribute %s. GetConnectedSource will only report the first one. Please use GetConnectedSources to retrieve all.", v10, Text);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
        sub_21697C414(&v21);
      }
      unsigned int v11 = v30;
      uint64_t v12 = (void *)v25[0];
      char v13 = v25;
      if (v30 >= 2) {
        char v13 = (void *)v25[0];
      }
      uint64_t v14 = v13[1];
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 48), 1uLL, memory_order_relaxed);
      }
      int v15 = *(atomic_ullong **)(a2 + 8);
      *(void *)(a2 + 8) = v14;
      if (v15) {
        sub_216D16E0C(v15);
      }
      if (v11 >= 2) {
        int v16 = v12 + 2;
      }
      else {
        int v16 = &v26;
      }
      if (v11 >= 2) {
        uint64_t v17 = (_DWORD *)v12 + 5;
      }
      else {
        uint64_t v17 = (_DWORD *)&v26 + 1;
      }
      if (v11 >= 2) {
        int v18 = (const char **)(v12 + 3);
      }
      else {
        int v18 = &v27;
      }
      if (v11 >= 2) {
        int v19 = (char *)(v12 + 4);
      }
      else {
        int v19 = &v28;
      }
      if (v11 < 2) {
        uint64_t v12 = v25;
      }
      sub_2169C487C((int *)(a2 + 16), v16);
      sub_2169C48D4((int *)(a2 + 20), v17);
      sub_2168D2318((void *)(a2 + 24), v18);
      sub_2168D2318(a3, v19);
      *a4 = *((_DWORD *)v12 + 10);
    }
    sub_216F74B60((uint64_t)v25);
  }
  else
  {
    v25[0] = "usdShade/connectableAPI.cpp";
    v25[1] = "GetConnectedSource";
    uint64_t v26 = 295;
    unint64_t v27 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource(const UsdAttribute &,"
          " UsdShadeConnectableAPI *, TfToken *, UsdShadeAttributeType *)";
    char v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v25, 1, (pxrInternal__aapl__pxrReserved__ *)"GetConnectedSource() requires non-NULL output-parameters.");
    return 0;
  }
  return v8;
}

void sub_216F72B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSources(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections((uint64_t)a1, (uint64_t *)&v35);
  *(void *)(a3 + 56) = 0x100000000;
  if (v35 != v36)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v33);
    uint64_t v7 = v35;
    BOOL v8 = v36;
    unint64_t v9 = (unint64_t)(v36 - v35) >> 3;
    if (*(_DWORD *)(a3 + 60) < v9)
    {
      sub_216F74C08(a3, v9);
      uint64_t v7 = v35;
      BOOL v8 = v36;
    }
    for (; v7 != v8; uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8))
    {
      int v10 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v33);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetAttributeAtPath(v10, v7, (uint64_t)&v28);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v28, v11))
      {
        unint64_t v27 = 0;
        int v26 = 0;
        NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v7);
        pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetBaseNameAndType(NameToken, (uint64_t)&v23);
        if ((v27 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v27 = v23;
        int v26 = v24;
        if (v24)
        {
          sub_216D16CFC((uint64_t)&TypeName, (uint64_t *)&v29, &v30);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v23, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&TypeName);
          uint64_t v25 = 0;
          int v23 = off_26C76D8C8;
          if ((v22 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
          sub_21697C414(&v20);
          if (v19) {
            sub_216D16E0C(v19);
          }
          uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v28);
          sub_216F72F20(a3, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v23, (uint64_t *)&v27, &v26, &TypeName);
          pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v23);
        }
        else if (a2)
        {
          unint64_t v15 = a2[1];
          if (v15 >= a2[2])
          {
            uint64_t v16 = sub_216981B30(a2, v7);
          }
          else
          {
            sub_216981010((_DWORD *)a2[1], v7);
            sub_21698105C((_DWORD *)(v15 + 4), (_DWORD *)v7 + 1);
            uint64_t v16 = v15 + 8;
          }
          a2[1] = v16;
        }
        if ((v27 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else if (a2)
      {
        unint64_t v13 = a2[1];
        if (v13 >= a2[2])
        {
          uint64_t v14 = sub_216981B30(a2, v7);
        }
        else
        {
          sub_216981010((_DWORD *)a2[1], v7);
          sub_21698105C((_DWORD *)(v13 + 4), (_DWORD *)v7 + 1);
          uint64_t v14 = v13 + 8;
        }
        a2[1] = v14;
      }
      if ((v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
      sub_21697C414(&v30);
      if (v29) {
        sub_216D16E0C(v29);
      }
    }
    uint64_t v17 = v34;
    if (v34 && atomic_fetch_add_explicit((atomic_uint *volatile)(v34 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  char v28 = &v35;
  sub_216981168((void ***)&v28);
}

void sub_216F72E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v29 = a26;
  if (a26)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a26 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
  }
  sub_216F74B60(v26);
  a21 = (void **)(v27 - 112);
  sub_216981168(&a21);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_216F72F20(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, uint64_t *a3, int *a4, uint64_t *a5)
{
  unsigned int v10 = *(_DWORD *)(a1 + 56);
  unsigned int v11 = *(_DWORD *)(a1 + 60);
  if (v10 == v11)
  {
    sub_216F74C08(a1, v10 + (v10 >> 1) + 1);
    unsigned int v11 = *(_DWORD *)(a1 + 60);
  }
  uint64_t v12 = a1;
  if (v11 >= 2) {
    uint64_t v12 = *(void *)a1;
  }
  uint64_t result = sub_216F74A90((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v12 + 56 * *(unsigned int *)(a1 + 56)), a2, a3, *a4, *a5);
  ++*(_DWORD *)(a1 + 56);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSources(this, 0, (uint64_t)v4);
  BOOL v2 = v5 != 0;
  sub_216F74B60((uint64_t)v4);
  return v2;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsSourceConnectionFromBaseMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  uint64_t v42 = 0;
  pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStack((pxrInternal__aapl__pxrReserved__ **)this, a2, (uint64_t)&v40, NAN);
  uint64_t v4 = v40;
  int v5 = v41;
  if (v40 != v41)
  {
    while (1)
    {
      if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(v4, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_26C757F70, v3))
      {
        add = (atomic_uint *)*v4;
        uint64_t v36 = add;
        if (add)
        {
          atomic_fetch_add(add, 1u);
          add = v36;
          *(void *)&long long v32 = v36;
          if (v36) {
            add = (atomic_uint *)atomic_fetch_add(v36, 1u);
          }
        }
        else
        {
          *(void *)&long long v32 = 0;
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(add, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v36);
      }
      else
      {
        *(void *)&long long v32 = 0;
      }
      if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v32) & 1) == 0)
      {
        BOOL v8 = (atomic_uint **)sub_216A64148((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v32);
        if (pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::HasConnectionPaths(v8)) {
          break;
        }
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v7, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v32);
      if (++v4 == v5) {
        goto LABEL_14;
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v42, (atomic_uint **)&v32);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v32);
  }
LABEL_14:
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v42)) {
    goto LABEL_37;
  }
  sub_216D16CFC((uint64_t)&v32, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unsigned int v11 = (uint64_t *)sub_216D240F8((uint64_t)&v32, v10);
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(v11, 6u, (uint64_t *)&v36);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
  sub_21697C414(&v33);
  if (*((void *)&v32 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v32 + 1));
  }
  unint64_t v13 = (void **)v36;
  uint64_t v12 = v37;
  uint64_t v14 = v38;
  if (v36 == (atomic_uint *)v38 && v37 == v39) {
    goto LABEL_37;
  }
  uint64_t v15 = v39 - 1;
  while (1)
  {
    uint64_t v16 = v12;
    *(void *)&long long v31 = v13;
    *((void *)&v31 + 1) = v12;
    Path = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v31);
    int v18 = sub_216A64148((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v42);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v18, &v28);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, &v30);
    if (*Path == v30)
    {
      LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v31);
      uint64_t v20 = sub_216BBBFA8(LayerStack);
      int v21 = (uint64_t **)sub_216A64148((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v42);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v21, (uint64_t *)&v32);
      BOOL HasLayer = pxrInternal__aapl__pxrReserved__::PcpLayerStack::HasLayer(v20, (uint64_t *)&v32);
      uint64_t v23 = *((void *)&v32 + 1);
      if (*((void *)&v32 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v32 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
    }
    else
    {
      BOOL HasLayer = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
    sub_21697C414(&v30);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_21697C414(&v28);
    if (HasLayer) {
      break;
    }
    uint64_t v12 = v16 + 1;
    if (v13 == v14 && v15 == v16) {
      goto LABEL_37;
    }
  }
  long long v32 = v31;
  if (!(void)v31 || *((void *)&v32 + 1) == -1)
  {
LABEL_37:
    char v24 = 0;
  }
  else
  {
    char v24 = 0;
    do
    {
      v24 |= pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32) == 6;
      *(void *)&long long v32 = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v32);
      *((void *)&v32 + 1) = v25;
    }
    while ((void)v32 && v25 != -1);
  }
  uint64_t v36 = (atomic_uint *)&v40;
  sub_216991094((void ***)&v36);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v26, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v42);
  return v24 & 1;
}

void sub_216F73338(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a7);
  a5 = (void **)&a15;
  sub_216991094(&a5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v17, (pxrInternal__aapl__pxrReserved__::SdfSpec *)(v15 - 72));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::DisconnectSource(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a3)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a2, a2))
  {
    sub_216D0162C((uint64_t)a2, (int *)v7);
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdAttribute::RemoveConnection(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v7 + 1);
    sub_21697C414(v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections(this, v7);
    BOOL v8 = v7;
    sub_216981168((void ***)&v8);
  }
  return v5;
}

void sub_216F734B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput(a4, &v7, a2, a3);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216F7357C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString) {
    EmptyString = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)EmptyString + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v7 = (const void **)((*((void *)EmptyString + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v7 = (const void **)EmptyString;
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    BOOL v8 = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    BOOL v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v7, (const void **)v8, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v22);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  int v9 = (uint64_t *)((char *)this + 8);
  int v10 = (_DWORD *)((char *)this + 16);
  sub_216D16CFC((uint64_t)&__p, v9, v10);
  int HasAttribute = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C(v18);
  }
  if (HasAttribute)
  {
    sub_216D16CFC((uint64_t)v12, v9, v10);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a3, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_21697C414(&v19);
    if (v18) {
      sub_216D16E0C(v18);
    }
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    if (v13) {
      sub_216D16E0C(v13);
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
  }
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F7379C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_216D2EDA0((uint64_t)&__p);
  sub_216D16AD8((uint64_t)&a10);
  uint64_t v21 = *(void *)(v19 - 56);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  uint64_t v5 = (uint64_t *)((char *)this + 8);
  uint64_t v6 = (_DWORD *)((char *)this + 16);
  if (a2)
  {
    sub_216D16CFC((uint64_t)&v17, v5, v6);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v7) {
      uint64_t v7 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    if ((*((void *)v7 + 16) & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*((void *)v7 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)&v17, EmptyString, (uint64_t *)&v14);
    sub_216F75270((void **)&v22);
    long long v22 = v14;
    uint64_t v23 = v15;
    uint64_t v15 = 0;
    long long v14 = 0uLL;
    char v24 = (void **)&v14;
    sub_216D3BBE0(&v24);
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    sub_216D16CFC((uint64_t)&v17, v5, v6);
    int v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v9) {
      int v9 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    if ((*((void *)v9 + 16) & 0xFFFFFFFFFFFFFFF8) != 0) {
      int v10 = (uint64_t *)((*((void *)v9 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      int v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)&v17, v10, (uint64_t *)&v14);
    sub_216F75270((void **)&v22);
    long long v22 = v14;
    uint64_t v23 = v15;
    uint64_t v15 = 0;
    long long v14 = 0uLL;
    char v24 = (void **)&v14;
    sub_216D3BBE0(&v24);
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C(v18);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_216F73B34(a3, (uint64_t)(*((void *)&v22 + 1) - v22) >> 5);
  uint64_t v12 = *((void *)&v22 + 1);
  for (uint64_t i = v22; i != v12; i += 32)
  {
    sub_216D6B7B4(i, (uint64_t)&v17);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v17, v13))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)&v14, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v17);
      sub_216F73BC8(a3, (uint64_t)&v14);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
      sub_21697C414(&v15);
      if (*((void *)&v14 + 1)) {
        sub_216D16E0C(*((atomic_ullong **)&v14 + 1));
      }
    }
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_21697C414(&v19);
    if (v18) {
      sub_216D16E0C(v18);
    }
  }
  uint64_t v17 = (void **)&v22;
  sub_216D3BBE0(&v17);
}

void sub_216F73ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a17;
  sub_216D3BBE0(&a13);
  _Unwind_Resume(a1);
}

void **sub_216F73B34(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_2168707F4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    uint64_t v7[2] = (char *)v7[0] + v5;
    uint64_t v7[3] = (char *)v7[0] + 32 * v6;
    sub_216F753E8(a1, v7);
    return sub_216F755A4(v7);
  }
  return result;
}

void sub_216F73BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F755A4((void **)va);
  _Unwind_Resume(a1);
}

void *sub_216F73BC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    uint64_t v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v10 = v4 - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    int v18 = a1 + 2;
    if (v12) {
      unint64_t v13 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = v13;
    uint64_t v15 = &v13[32 * v9];
    uint64_t v17 = &v13[32 * v12];
    sub_216D6C860(v5, (uint64_t)v15, a2);
    uint64_t v16 = v15 + 32;
    sub_216F753E8(a1, &v14);
    unint64_t v8 = a1[1];
    uint64_t result = sub_216F755A4(&v14);
  }
  else
  {
    uint64_t result = sub_216D6C860((uint64_t)(a1 + 2), v6, a2);
    unint64_t v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_216F73CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F755A4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F73CDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput(a4, &v7, a2, a3);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216F73DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString) {
    EmptyString = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)EmptyString + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v7 = (const void **)((*((void *)EmptyString + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v7 = (const void **)EmptyString;
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v8 = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v7, (const void **)v8, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v22);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  int v9 = (uint64_t *)((char *)this + 8);
  int v10 = (_DWORD *)((char *)this + 16);
  sub_216D16CFC((uint64_t)&__p, v9, v10);
  int HasAttribute = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C(v18);
  }
  if (HasAttribute)
  {
    sub_216D16CFC((uint64_t)v12, v9, v10);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a3, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p);
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_21697C414(&v19);
    if (v18) {
      sub_216D16E0C(v18);
    }
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    if (v13) {
      sub_216D16E0C(v13);
    }
  }
  else
  {
    *(_DWORD *)a3 = 3;
    *(void *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
  }
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F73FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_216D2EDA0((uint64_t)&__p);
  sub_216D16AD8((uint64_t)&a10);
  uint64_t v21 = *(void *)(v19 - 56);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  uint64_t v5 = (uint64_t *)((char *)this + 8);
  unint64_t v6 = (_DWORD *)((char *)this + 16);
  if (a2)
  {
    sub_216D16CFC((uint64_t)&v17, v5, v6);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v7) {
      uint64_t v7 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    if ((*((void *)v7 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*((void *)v7 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)&v17, EmptyString, (uint64_t *)&v14);
    sub_216F75270((void **)&v22);
    long long v22 = v14;
    uint64_t v23 = v15;
    uint64_t v15 = 0;
    long long v14 = 0uLL;
    char v24 = (void **)&v14;
    sub_216D3BBE0(&v24);
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    sub_216D16CFC((uint64_t)&v17, v5, v6);
    int v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v9) {
      int v9 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    if ((*((void *)v9 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
      int v10 = (uint64_t *)((*((void *)v9 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      int v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)&v17, v10, (uint64_t *)&v14);
    sub_216F75270((void **)&v22);
    long long v22 = v14;
    uint64_t v23 = v15;
    uint64_t v15 = 0;
    long long v14 = 0uLL;
    char v24 = (void **)&v14;
    sub_216D3BBE0(&v24);
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C(v18);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_216F74388(a3, (uint64_t)(*((void *)&v22 + 1) - v22) >> 5);
  uint64_t v12 = *((void *)&v22 + 1);
  for (uint64_t i = v22; i != v12; i += 32)
  {
    sub_216D6B7B4(i, (uint64_t)&v17);
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v17, v13))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v14, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v17);
      sub_216F7441C(a3, (uint64_t)&v14);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
      sub_21697C414(&v15);
      if (*((void *)&v14 + 1)) {
        sub_216D16E0C(*((atomic_ullong **)&v14 + 1));
      }
    }
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_21697C414(&v19);
    if (v18) {
      sub_216D16E0C(v18);
    }
  }
  uint64_t v17 = (void **)&v22;
  sub_216D3BBE0(&v17);
}

void sub_216F74310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a17;
  sub_216D3BBE0(&a13);
  _Unwind_Resume(a1);
}

void **sub_216F74388(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_2168707F4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    uint64_t v7[2] = (char *)v7[0] + v5;
    uint64_t v7[3] = (char *)v7[0] + 32 * v6;
    sub_216F75728(a1, v7);
    return sub_216F758E4(v7);
  }
  return result;
}

void sub_216F74408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F758E4((void **)va);
  _Unwind_Resume(a1);
}

void *sub_216F7441C(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    uint64_t v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v10 = v4 - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    int v18 = a1 + 2;
    if (v12) {
      unint64_t v13 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = v13;
    uint64_t v15 = &v13[32 * v9];
    uint64_t v17 = &v13[32 * v12];
    sub_216D6C860(v5, (uint64_t)v15, a2);
    uint64_t v16 = v15 + 32;
    sub_216F75728(a1, &v14);
    unint64_t v8 = a1[1];
    uint64_t result = sub_216F758E4(&v14);
  }
  else
  {
    uint64_t result = sub_216D6C860((uint64_t)(a1 + 2), v6, a2);
    unint64_t v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_216F7451C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F758E4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F74530(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectionSourceInfo::UsdShadeConnectionSourceInfo(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  LODWORD(v18) = 1;
  int v19 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v20 + 1);
  unint64_t v21 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18);
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = off_26C76D8C8;
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
  sub_21697C414(&v20);
  if (v19) {
    sub_216D16E0C(v19);
  }
  *(void *)(a1 + 32) = 0;
  unint64_t v6 = (void *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = 0;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 48));
  uint64_t v7 = sub_216D24140(a2);
  if (v8 & 1 | (unint64_t)v7)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3))
    {
      NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a3);
      pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetBaseNameAndType(NameToken, (uint64_t)&v18);
      if (v6 == &v18)
      {
        uint64_t v10 = v18;
      }
      else
      {
        if ((*v6 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v10 = 0;
        *unint64_t v6 = v18;
        int v18 = 0;
      }
      *(_DWORD *)(a1 + 40) = v19;
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3, &v16);
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::Get(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v18);
      uint64_t v11 = v19;
      if (v19) {
        atomic_fetch_add_explicit(v19 + 6, 1uLL, memory_order_relaxed);
      }
      unint64_t v12 = *(atomic_ullong **)(a1 + 8);
      *(void *)(a1 + 8) = v11;
      if (v12) {
        sub_216D16E0C(v12);
      }
      sub_2169C487C((int *)(a1 + 16), &v20);
      sub_2169C48D4((int *)(a1 + 20), (_DWORD *)&v20 + 1);
      sub_2168D2318((void *)(a1 + 24), &v21);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v18);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      sub_21697C414(&v16);
      unint64_t v13 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a2);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetAttributeAtPath(v13, a3, (uint64_t)&v18);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v18, v14))*(void *)(a1 + 48) = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v18); {
      if ((v21 & 7) != 0)
      }
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
      sub_21697C414(&v20);
      if (v19) {
        sub_216D16E0C(v19);
      }
    }
  }
  else
  {
    int v18 = "usdShade/connectableAPI.cpp";
    int v19 = (atomic_ullong *)"UsdShadeConnectionSourceInfo";
    uint64_t v20 = 593;
    unint64_t v21 = (unint64_t)"pxrInternal__aapl__pxrReserved__::UsdShadeConnectionSourceInfo::UsdShadeConnectionSourceInfo"
                            "(const UsdStagePtr &, const SdfPath &)";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
  }
  return a1;
}

void sub_216F74838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D2EDA0((uint64_t)va);
  if ((*v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F748B4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F74994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216F749E4(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 40) || !*(void *)(a1 + 32)) {
    return 0;
  }
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v4, v1);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return IsDefined;
}

void sub_216F74A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_216F74A90(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2, uint64_t *a3, int a4, uint64_t a5)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a1, a2);
  *(void *)uint64_t result = &unk_26C767760;
  uint64_t v10 = *((void *)a2 + 3);
  *((void *)result + 3) = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)result + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)uint64_t result = off_26C76D8C8;
  uint64_t v11 = *a3;
  *((void *)result + 4) = *a3;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)result + 4) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 10) = a4;
  *((void *)result + 6) = a5;
  return result;
}

uint64_t sub_216F74B60(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 60) >= 2u) {
    free(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_216F74BA0(uint64_t *result)
{
  int v1 = result;
  if (*((_DWORD *)result + 15) >= 2u) {
    uint64_t result = (uint64_t *)*result;
  }
  uint64_t v2 = *((unsigned int *)v1 + 14);
  if (v2)
  {
    uint64_t v3 = 56 * v2;
    do
    {
      uint64_t v4 = result[4];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)result);
      uint64_t result = (uint64_t *)(v5 + 56);
      v3 -= 56;
    }
    while (v3);
  }
  return result;
}

void sub_216F74C08(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = malloc(56 * a2);
  uint64_t v5 = a1;
  if (*(_DWORD *)(a1 + 60) >= 2u) {
    uint64_t v5 = *(void *)a1;
  }
  sub_216F74C90(v5, v5 + 56 * *(unsigned int *)(a1 + 56), (uint64_t)v4);
  sub_216F74BA0((uint64_t *)a1);
  if (*(_DWORD *)(a1 + 60) >= 2u) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 60) = a2;
}

uint64_t sub_216F74C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  do
  {
    int v7 = (void *)(a3 + v6);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a3 + v6), (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a1 + v6));
    *int v7 = &unk_26C767760;
    uint64_t v8 = *(void *)(a1 + v6 + 24);
    uint64_t v7[3] = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v7[3] &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = a3 + v6;
    *(void *)uint64_t v9 = off_26C76D8C8;
    *(void *)(v9 + 32) = *(void *)(a1 + v6 + 32);
    *(void *)(a1 + v6 + 32) = 0;
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(a1 + v6 + 40);
    v6 += 56;
  }
  while (a1 + v6 != v5);
  return v5;
}

void sub_216F74D94(void *a1)
{
  __cxa_begin_catch(a1);
  sub_216F74DC0(v1, v2);
  __cxa_rethrow();
}

void sub_216F74DAC(_Unwind_Exception *a1)
{
}

pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *sub_216F74DC0(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *result, pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *a2)
{
  if (result != a2)
  {
    do
    {
      uint64_t v3 = *((void *)result + 4);
      if ((v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(result);
      uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)(v4 + 56);
    }
    while (result != a2);
    return a2;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *sub_216F74E18(atomic_ullong *a1)
{
  uint64_t result = sub_216F74E60();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      uint64_t v4 = (void *)sub_216F74EA4((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *sub_216F74E60()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)operator new(0x148uLL);
  pxrInternal__aapl__pxrReserved__::UsdShadeTokensType::UsdShadeTokensType(v0);
  return v0;
}

void sub_216F74E90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216F74EA4(uint64_t a1)
{
  uint64_t v40 = (void **)(a1 + 304);
  sub_216889A04(&v40);
  uint64_t v2 = *(void *)(a1 + 296);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 288);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 280);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 272);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 264);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 256);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 248);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 240);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 232);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 224);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 216);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 208);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 200);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 192);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 184);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 176);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 168);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 160);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 152);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *(void *)(a1 + 144);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *(void *)(a1 + 136);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *(void *)(a1 + 128);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *(void *)(a1 + 120);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *(void *)(a1 + 112);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *(void *)(a1 + 104);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *(void *)(a1 + 96);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *(void *)(a1 + 88);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *(void *)(a1 + 80);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *(void *)(a1 + 72);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *(void *)(a1 + 64);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *(void *)(a1 + 56);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *(void *)(a1 + 48);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *(void *)(a1 + 40);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *(void *)(a1 + 32);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *(void *)(a1 + 24);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *(void *)(a1 + 16);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *(void *)(a1 + 8);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216F75270(void **a1)
{
  int v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 32;
        sub_216D3BC78((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_216F752E0(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_216F75378((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216F75378(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_21697C414((_DWORD *)(a2 + 16));
  uint64_t v4 = *(atomic_ullong **)(a2 + 8);
  if (v4)
  {
    sub_216D16E0C(v4);
  }
}

uint64_t sub_216F753E8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216F75460((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216F75460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      sub_216D6C860(a1, v7 - 32, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 32;
      *((void *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216F75518((uint64_t)v13);
  return v11;
}

uint64_t sub_216F75518(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216F75550((uint64_t *)a1);
  }
  return a1;
}

void sub_216F75550(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216F75378(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_216F755A4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216F755D8(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 32;
    sub_216F75378(v4, i - 32);
  }
}

void sub_216F75620(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_216F756B8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216F756B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_21697C414((_DWORD *)(a2 + 16));
  uint64_t v4 = *(atomic_ullong **)(a2 + 8);
  if (v4)
  {
    sub_216D16E0C(v4);
  }
}

uint64_t sub_216F75728(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216F757A0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216F757A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 32;
      sub_216D6C860(a1, v7 - 32, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 32;
      *((void *)&v16 + 1) -= 32;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216F75858((uint64_t)v13);
  return v11;
}

uint64_t sub_216F75858(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216F75890((uint64_t *)a1);
  }
  return a1;
}

void sub_216F75890(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216F756B8(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_216F758E4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216F75918(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 32;
    sub_216F756B8(v4, i - 32);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::CanConnectInputToSource(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdProperty *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectInputToSource(a1, a2, a3, a4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectInputToSource(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdProperty *this, uint64_t a3, uint64_t a4, int a5)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, this)
    || (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput(this, v10) & 1) == 0)
  {
    if (!a4) {
      return a4;
    }
    sub_216D0162C((uint64_t)this, (int *)&v81);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v81);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid input: %s", v18, v19, Text);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
LABEL_15:
    *(_OWORD *)a4 = v86;
    *(void *)(a4 + 16) = v87;
    HIBYTE(v87) = 0;
    LOBYTE(v86) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v81 + 1);
    sub_21697C414(&v81);
    return 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v11) & 1) == 0)
  {
    if (!a4) {
      return a4;
    }
    sub_216D0162C(a3, (int *)&v81);
    uint64_t v21 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v81);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid source: %s", v22, v23, v21);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    goto LABEL_15;
  }
  v72[0] = this;
  v72[1] = (_DWORD *)a3;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetConnectability(this, (atomic_uint **)&v71);
  int v13 = *(unsigned __int8 *)(a1 + 9);
  char v14 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v14) {
    char v14 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((v71 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v14 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a3, v12))
    {
      if (v13)
      {
        a4 = sub_216F764B4(v72, a4);
        goto LABEL_125;
      }
      goto LABEL_57;
    }
    if (!v13)
    {
LABEL_57:
      a4 = 1;
      goto LABEL_125;
    }
    uint64_t v26 = (uint64_t *)((char *)this + 8);
    uint64_t v27 = (_DWORD *)((char *)this + 16);
    uint64_t v28 = sub_216D16CFC((uint64_t)&v86, (uint64_t *)this + 1, (_DWORD *)this + 4);
    sub_216D0162C(v28, (int *)&v89);
    if ((v88 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v87 + 1);
    sub_21697C414(&v87);
    if (*((void *)&v86 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v86 + 1));
    }
    uint64_t v29 = sub_216D16CFC((uint64_t)&v86, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
    sub_216D0162C(v29, &v84);
    if ((v88 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v87 + 1);
    sub_21697C414(&v87);
    if (*((void *)&v86 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v86 + 1));
    }
    if (a5 == 1)
    {
      sub_216D16CFC((uint64_t)&v81, (uint64_t *)this + 1, (_DWORD *)this + 4);
      uint64_t v30 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v86, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v81);
      uint64_t v88 = 0;
      *(void *)&long long v86 = off_26C76D8C8;
      char IsContainer = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer(v30);
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v86);
      if ((v83 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v82 + 1);
      sub_21697C414(&v82);
      if (*((void *)&v81 + 1)) {
        sub_216D16E0C(*((atomic_ullong **)&v81 + 1));
      }
      if ((IsContainer & 1) == 0)
      {
        if (a4)
        {
          sub_216D16CFC((uint64_t)&v86, (uint64_t *)this + 1, (_DWORD *)this + 4);
          uint64_t v45 = *((void *)&v86 + 1);
          if (!*((void *)&v86 + 1) || (*(unsigned char *)(*((void *)&v86 + 1) + 57) & 8) != 0) {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v86 + 1), v44);
          }
          unint64_t v46 = **(void **)(v45 + 24) & 0xFFFFFFFFFFFFFFF8;
          if (v46)
          {
            uint64_t v47 = (const char *)(v46 + 16);
            if (*(char *)(v46 + 39) < 0) {
              uint64_t v47 = *(const char **)v47;
            }
          }
          else
          {
            uint64_t v47 = "";
          }
          sub_216D0162C((uint64_t)this, &v75);
          uint64_t v56 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v75);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - For input's prim type '%s', prim owning the input '%s' is not a container.", v57, v58, v47, v56);
          if (*(char *)(a4 + 23) < 0) {
            operator delete(*(void **)a4);
          }
          *(_OWORD *)a4 = v81;
          *(void *)(a4 + 16) = v82;
          HIBYTE(v82) = 0;
          LOBYTE(v81) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v76);
          sub_21697C414(&v75);
          if ((v88 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          goto LABEL_121;
        }
LABEL_124:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v85);
        sub_21697C414(&v84);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v89 + 1);
        sub_21697C414(&v89);
        goto LABEL_125;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v84, &v86);
      uint64_t v32 = v86;
      uint64_t v33 = v89;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
      uint64_t v34 = sub_21697C414(&v86);
      if (v32 != v33)
      {
        if (a4)
        {
          sub_216D16CFC((uint64_t)v34, v26, v27);
          uint64_t v36 = *((void *)&v86 + 1);
          if (!*((void *)&v86 + 1) || (*(unsigned char *)(*((void *)&v86 + 1) + 57) & 8) != 0) {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v86 + 1), v35);
          }
          unint64_t v37 = **(void **)(v36 + 24) & 0xFFFFFFFFFFFFFFF8;
          if (v37)
          {
            uint64_t v38 = (const char *)(v37 + 16);
            if (*(char *)(v37 + 39) < 0) {
              uint64_t v38 = *(const char **)v38;
            }
          }
          else
          {
            uint64_t v38 = "";
          }
          uint64_t v63 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v84);
          uint64_t v64 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v89);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - For input's prim type '%s', Output source's prim '%s' is not an immediate descendent of the input's prim '%s'.", v65, v66, v38, v63, v64);
          if (*(char *)(a4 + 23) < 0) {
            operator delete(*(void **)a4);
          }
          *(_OWORD *)a4 = v81;
          *(void *)(a4 + 16) = v82;
          HIBYTE(v82) = 0;
          LOBYTE(v81) = 0;
          if ((v88 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
LABEL_121:
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v87 + 1);
          sub_21697C414(&v87);
          if (*((void *)&v86 + 1)) {
            sub_216D16E0C(*((atomic_ullong **)&v86 + 1));
          }
          a4 = 0;
          goto LABEL_124;
        }
        goto LABEL_124;
      }
    }
    else
    {
      sub_216D16CFC((uint64_t)&v75, (uint64_t *)this + 1, (_DWORD *)this + 4);
      sub_216D6B1F8((uint64_t)&v75, (uint64_t)&v81);
      uint64_t v39 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v86, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v81);
      uint64_t v88 = 0;
      *(void *)&long long v86 = off_26C76D8C8;
      char v40 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer(v39);
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v86);
      if ((v83 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v82 + 1);
      sub_21697C414(&v82);
      if (*((void *)&v81 + 1)) {
        sub_216D16E0C(*((atomic_ullong **)&v81 + 1));
      }
      if ((v80 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v79);
      sub_21697C414(&v78);
      if (v77) {
        sub_216D16E0C(v77);
      }
      if ((v40 & 1) == 0)
      {
        if (a4)
        {
          sub_216D16CFC((uint64_t)&v86, v26, v27);
          uint64_t v49 = *((void *)&v86 + 1);
          if (!*((void *)&v86 + 1) || (*(unsigned char *)(*((void *)&v86 + 1) + 57) & 8) != 0) {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v86 + 1), v48);
          }
          unint64_t v50 = **(void **)(v49 + 24) & 0xFFFFFFFFFFFFFFF8;
          if (v50)
          {
            uint64_t v51 = (const char *)(v50 + 16);
            if (*(char *)(v50 + 39) < 0) {
              uint64_t v51 = *(const char **)v51;
            }
          }
          else
          {
            uint64_t v51 = "";
          }
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v84, &v75);
          uint64_t v59 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v75);
          sub_216D0162C(a3, &v73);
          uint64_t v60 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v73);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - For input's prim type '%s', Immediate ancestor '%s' for the prim owning the output source '%s' is not a container.", v61, v62, v51, v59, v60);
          if (*(char *)(a4 + 23) < 0) {
            operator delete(*(void **)a4);
          }
          *(_OWORD *)a4 = v81;
          *(void *)(a4 + 16) = v82;
          HIBYTE(v82) = 0;
          LOBYTE(v81) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v74);
          sub_21697C414(&v73);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v76);
          sub_21697C414(&v75);
          if ((v88 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          goto LABEL_121;
        }
        goto LABEL_124;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v89, &v86);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v84, &v81);
      uint64_t v41 = v86;
      uint64_t v42 = v81;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v81 + 1);
      sub_21697C414(&v81);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
      uint64_t v43 = sub_21697C414(&v86);
      if (v41 != v42)
      {
        if (a4)
        {
          sub_216D16CFC((uint64_t)v43, v26, v27);
          uint64_t v53 = *((void *)&v86 + 1);
          if (!*((void *)&v86 + 1) || (*(unsigned char *)(*((void *)&v86 + 1) + 57) & 8) != 0) {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)&v86 + 1), v52);
          }
          unint64_t v54 = **(void **)(v53 + 24) & 0xFFFFFFFFFFFFFFF8;
          if (v54)
          {
            uint64_t v55 = (const char *)(v54 + 16);
            if (*(char *)(v54 + 39) < 0) {
              uint64_t v55 = *(const char **)v55;
            }
          }
          else
          {
            uint64_t v55 = "";
          }
          uint64_t v67 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v89);
          uint64_t v68 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v84);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - For input's prim type '%s', Input's prim '%s' and source's prim '%s' are not contained by the same container prim.", v69, v70, v55, v67, v68);
          if (*(char *)(a4 + 23) < 0) {
            operator delete(*(void **)a4);
          }
          *(_OWORD *)a4 = v81;
          *(void *)(a4 + 16) = v82;
          HIBYTE(v82) = 0;
          LOBYTE(v81) = 0;
          if ((v88 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          goto LABEL_121;
        }
        goto LABEL_124;
      }
    }
    a4 = 1;
    goto LABEL_124;
  }
  long long v15 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v15) {
    long long v15 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((v71 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v15 + 11) & 0xFFFFFFFFFFFFFFF8))
  {
    if (!a4) {
      goto LABEL_125;
    }
    long long v16 = "Input connectability is unspecified";
    goto LABEL_60;
  }
  if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a3, v12))
  {
    uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v86, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)a3);
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetConnectability(v24, (atomic_uint **)&v81);
    if ((v88 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v87 + 1);
    sub_21697C414(&v87);
    if (*((void *)&v86 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v86 + 1));
    }
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v25) {
      uint64_t v25 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    if ((v81 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v25 + 11) & 0xFFFFFFFFFFFFFFF8))
    {
      if (v13) {
        a4 = sub_216F764B4(v72, a4);
      }
      else {
        a4 = 1;
      }
    }
    else if (a4)
    {
      MEMORY[0x21D4477E0](a4, "Input connectability is 'interfaceOnly' and source does not have 'interfaceOnly' connectability.");
      a4 = 0;
    }
    if ((v81 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_125;
  }
  if (a4)
  {
    long long v16 = "Input connectability is 'interfaceOnly' but source is not an input";
LABEL_60:
    MEMORY[0x21D4477E0](a4, v16);
    a4 = 0;
  }
LABEL_125:
  if ((v71 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a4;
}

void sub_216F762F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_21697B754((_DWORD *)(v13 - 112));
  sub_21697B754((_DWORD *)(v13 - 72));
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::RequiresEncapsulation(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *this)
{
  return *((unsigned __int8 *)this + 9);
}

uint64_t sub_216F764B4(_DWORD **a1, uint64_t a2)
{
  sub_216D16CFC((uint64_t)&v26, (uint64_t *)*a1 + 1, *a1 + 4);
  sub_216D0162C((uint64_t)&v26, &v29);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
  sub_21697C414(&v27);
  if (*((void *)&v26 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v26 + 1));
  }
  sub_216D16CFC((uint64_t)&v26, (uint64_t *)a1[1] + 1, a1[1] + 4);
  sub_216D0162C((uint64_t)&v26, (int *)&v25);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
  sub_21697C414(&v27);
  if (*((void *)&v26 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v26 + 1));
  }
  sub_216D16CFC((uint64_t)v20, (uint64_t *)a1[1] + 1, a1[1] + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v26, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v20);
  uint64_t v28 = 0;
  *(void *)&long long v26 = off_26C76D8C8;
  char IsContainer = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v26);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v26);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_21697C414(&v22);
  if (v21) {
    sub_216D16E0C(v21);
  }
  if ((IsContainer & 1) == 0)
  {
    if (a2)
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
      unint64_t v11 = *(void *)sub_216D563F8(a1[1]) & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        uint64_t v12 = (const char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0) {
          uint64_t v12 = *(const char **)v12;
        }
      }
      else
      {
        uint64_t v12 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - prim '%s' owning the input source '%s' is not a container.", v9, v10, Text, v12);
      goto LABEL_29;
    }
LABEL_24:
    uint64_t v7 = 0;
    goto LABEL_32;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, &v26);
  uint64_t v6 = v25;
  uint64_t v5 = v26;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v5 == v6)
  {
    uint64_t v7 = 1;
    goto LABEL_32;
  }
  if (!a2) {
    goto LABEL_24;
  }
  uint64_t v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
  char v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
  unint64_t v17 = *(void *)sub_216D563F8(*a1) & 0xFFFFFFFFFFFFFFF8;
  if (v17)
  {
    uint64_t v18 = (const char *)(v17 + 16);
    if (*(char *)(v17 + 39) < 0) {
      uint64_t v18 = *(const char **)v18;
    }
  }
  else
  {
    uint64_t v18 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - input source prim '%s' is not the closest ancestor container of the NodeGraph '%s' owning the input attribute '%s'.", v15, v16, v13, v14, v18);
LABEL_29:
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v7 = 0;
  *(_OWORD *)a2 = v26;
  *(void *)(a2 + 16) = v27;
LABEL_32:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
  sub_21697C414(&v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
  sub_21697C414(&v29);
  return v7;
}

void sub_216F76780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_21697B754((int *)va);
  sub_21697B754((_DWORD *)(v9 - 56));
  _Unwind_Resume(a1);
}

void sub_216F767D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_216D16AD8((uint64_t)va);
  JUMPOUT(0x216F767C4);
}

void sub_216F767E8()
{
}

void sub_216F767F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_216D16AD8((uint64_t)va);
  JUMPOUT(0x216F767CCLL);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectOutputToSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)a2, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)a2))
  {
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a3, v10))
    {
      sub_216D16CFC((uint64_t)v38, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
      sub_216D0162C((uint64_t)v38, (int *)&v41);
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
      sub_21697C414(&v39);
      if (v38[1]) {
        sub_216D16E0C((atomic_ullong *)v38[1]);
      }
      sub_216D16CFC((uint64_t)v38, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
      sub_216D0162C((uint64_t)v38, (int *)&v37);
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
      sub_21697C414(&v39);
      if (v38[1]) {
        sub_216D16E0C((atomic_ullong *)v38[1]);
      }
      int v13 = *(unsigned __int8 *)(a1 + 9);
      if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)a3, v12))
      {
        if (a5 == 1)
        {
          if (a4)
          {
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
            sub_216D16CFC((uint64_t)v38, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
            unint64_t v17 = v38[1];
            if (!v38[1] || (*((unsigned char *)v38[1] + 57) & 8) != 0) {
              pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v38[1], v15);
            }
            unint64_t v18 = **((void **)v17 + 3) & 0xFFFFFFFFFFFFFFF8;
            if (v18)
            {
              uint64_t v19 = (const char *)(v18 + 16);
              if (*(char *)(v18 + 39) < 0) {
                uint64_t v19 = *(const char **)v19;
              }
            }
            else
            {
              uint64_t v19 = "";
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - passthrough usage is not allowed for output prim '%s' of type '%s'.", (const char *)v15, v16, Text, v19);
            if (*(char *)(a4 + 23) < 0) {
              operator delete(*(void **)a4);
            }
            *(_OWORD *)a4 = v35;
            *(void *)(a4 + 16) = v36;
            HIBYTE(v36) = 0;
            LOBYTE(v35) = 0;
            if ((v40 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_21697C414(&v39);
            if (v38[1]) {
              sub_216D16E0C((atomic_ullong *)v38[1]);
            }
          }
LABEL_47:
          uint64_t v21 = 0;
          goto LABEL_48;
        }
        if (v41 != v37)
        {
          if (a4)
          {
            sub_216D0162C(a2, (int *)&v35);
            uint64_t v28 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
            sub_216D0162C(a3, &v33);
            int v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33);
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - output '%s' and input source '%s' must be encapsulated by the same container prim", v30, v31, v28, v29);
            if (*(char *)(a4 + 23) < 0) {
              operator delete(*(void **)a4);
            }
            *(_OWORD *)a4 = *(_OWORD *)v38;
            *(void *)(a4 + 16) = v39;
            HIBYTE(v39) = 0;
            LOBYTE(v38[0]) = 0;
            sub_21697B754(&v33);
            sub_21697B754(&v35);
          }
          goto LABEL_47;
        }
      }
      else if (v13)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, v38);
        int v23 = v37;
        int v22 = v38[0];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v38 + 1);
        sub_21697C414(v38);
        if (v22 != v23)
        {
          if (a4)
          {
            sub_216D0162C(a2, (int *)&v35);
            uint64_t v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
            sub_216D0162C(a3, &v33);
            uint64_t v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33);
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Encapsulation check failed - prim owning the output '%s' is not an immediate descendent  of the prim owning the output source '%s'.", v26, v27, v24, v25);
            if (*(char *)(a4 + 23) < 0) {
              operator delete(*(void **)a4);
            }
            *(_OWORD *)a4 = *(_OWORD *)v38;
            *(void *)(a4 + 16) = v39;
            HIBYTE(v39) = 0;
            LOBYTE(v38[0]) = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
            sub_21697C414(&v33);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
            sub_21697C414(&v35);
          }
          goto LABEL_47;
        }
      }
      uint64_t v21 = 1;
LABEL_48:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
      sub_21697C414(&v37);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
      sub_21697C414(&v41);
      return v21;
    }
    if (a4)
    {
      uint64_t v20 = "Invalid source";
      goto LABEL_24;
    }
    return 0;
  }
  if (!a4) {
    return 0;
  }
  uint64_t v20 = "Invalid output";
LABEL_24:
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v20, (const char *)v10, v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  uint64_t v21 = 0;
  *(_OWORD *)a4 = *(_OWORD *)v38;
  *(void *)(a4 + 16) = v39;
  return v21;
}

void sub_216F76BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  sub_21697B754(va1);
  sub_21697B754((_DWORD *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_216F76C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D16AD8((uint64_t)va);
  JUMPOUT(0x216F76C8CLL);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::CanConnectOutputToSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectOutputToSource(a1, a2, a3, a4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::IsContainer(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *this)
{
  return *((unsigned __int8 *)this + 8);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(pxrInternal__aapl__pxrReserved__::TfType *this, void *a2)
{
  if (!*a2
    || (pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v7),
        *(void *)this == v7[0]))
  {
    v7[0] = "usdShade/connectableAPIBehavior.cpp";
    v7[1] = "UsdShadeRegisterConnectableAPIBehavior";
    uint64_t v7[2] = 835;
    uint64_t v7[3] = "void pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(const TfType &, const SharedCo"
            "nnectableAPIBehaviorPtr &)";
    char v8 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(this);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v6 = (const char *)TypeName;
    }
    else {
      uint64_t v6 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid behavior registration for prim type '%s'", v6);
  }
  else
  {
    unint64_t v4 = sub_216F76D70();
    sub_216F7722C(v4, this, a2);
  }
}

unint64_t sub_216F76D70()
{
  unint64_t v0 = atomic_load((unint64_t *)&qword_267B938D8);
  if (!v0)
  {
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_117_BehaviorRegistryE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v16);
    uint64_t v2 = std::string::insert(&v16, 0, "Create Singleton ");
    long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    uint64_t v23 = v2->__r_.__value_.__r.__words[2];
    *(_OWORD *)float64x2_t __p = v3;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    v2->__r_.__value_.__r.__words[0] = 0;
    sub_216851098((uint64_t)&v17, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (atomic_exchange(byte_267B938E0, 1u))
    {
      while (!atomic_load((unint64_t *)&qword_267B938D8))
        sched_yield();
    }
    else
    {
      if (!atomic_load((unint64_t *)&qword_267B938D8))
      {
        uint64_t v7 = operator new(0x40uLL);
        unint64_t v9 = (unint64_t)v7;
        *uint64_t v7 = 0;
        __dmb(0xBu);
        v7[1] = 0;
        *((_OWORD *)v7 + 1) = 0u;
        *((_OWORD *)v7 + 2) = 0u;
        *((_DWORD *)v7 + 12) = 1065353216;
        *((unsigned char *)v7 + 56) = 0;
        if (atomic_exchange(&qword_267B938D8, (unint64_t)v7))
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "SetInstanceConstructed";
          uint64_t v23 = 56;
          uint64_t v24 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::(anonymous n"
                "amespace)::_BehaviorRegistry>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::(anony"
                "mous namespace)::_BehaviorRegistry]";
          char v25 = 0;
          int v26 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v8);
        }
        Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance((pxrInternal__aapl__pxrReserved__::TfRegistryManager *)v7);
        atomic_store(1u, (unsigned __int8 *)(v9 + 56));
        unint64_t v19 = v9;
        sub_21685203C((unint64_t *)v9, __p);
        uint64_t v20 = (atomic_uint *)__p[0];
        v16.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_216F77A78;
        v16.__r_.__value_.__l.__size_ = 0;
        unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfNotice *)operator new(0x68uLL);
        __p[0] = &unk_26C74B5E8;
        pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v21);
        sub_216F77C2C((uint64_t)v11, &v19, &v16, (uint64_t)__p);
        (*(void (**)(void **))__p[0])(__p);
        pxrInternal__aapl__pxrReserved__::TfNotice::_Register(v11, (char **)__p);
        int v13 = __p[1];
        if (__p[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v13 + 8))(v13);
        }
        char v14 = v20;
        if (v20 && atomic_fetch_add_explicit(v20 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v14 + 8))(v14);
        }
        unint64_t v15 = atomic_load((unint64_t *)&qword_267B938D8);
        if (v15)
        {
          if (v9 != v15)
          {
            __p[0] = "tf/instantiateSingleton.h";
            __p[1] = "_CreateInstance";
            uint64_t v23 = 84;
            uint64_t v24 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::(anonymous n"
                  "amespace)::_BehaviorRegistry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved"
                  "__::(anonymous namespace)::_BehaviorRegistry]";
            char v25 = 0;
            int v26 = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v12);
          }
        }
        else if (atomic_exchange(&qword_267B938D8, v9))
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v23 = 88;
          uint64_t v24 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::(anonymous nam"
                "espace)::_BehaviorRegistry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::"
                "(anonymous namespace)::_BehaviorRegistry]";
          char v25 = 0;
          int v26 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v12, "instance.exchange(newInst) == nullptr");
        }
      }
      atomic_store(0, (unsigned __int8 *)byte_267B938E0);
    }
    unint64_t v0 = atomic_load((unint64_t *)&qword_267B938D8);
    while (v18--)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v17);
  }
  return v0;
}

void sub_216F770F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  while (a18--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(a17);
  _Unwind_Resume(exception_object);
}

void sub_216F7722C(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, void *a3)
{
  sub_216F783A4((uint64_t)&v5, a2);
  sub_216F78458(a1, &v5, a3);
  uint64_t v7 = (void **)&v6;
  sub_216889A04(&v7);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F772A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)(v14 + 8);
  sub_216889A04(&a14);
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_IsCompatible(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_IsCompatible(this)) {
    return 0;
  }
  unint64_t v2 = sub_216F76D70();
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  BOOL v3 = sub_216F77390(v2, &v5) != 0;
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return v3;
}

void sub_216F7737C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *sub_216F77390(uint64_t a1, pxrInternal__aapl__pxrReserved__ **a2)
{
  sub_216F78BE0(a1);
  uint64_t v5 = a2[1];
  if (v5 && (*((unsigned char *)v5 + 57) & 8) == 0)
  {
    uint64_t v6 = (void ***)(*((void *)v5 + 3) + 40);
    goto LABEL_6;
  }
  pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], v4);
  uint64_t v6 = (void ***)(*((void *)v5 + 3) + 40);
  if (a2[1])
  {
    uint64_t v5 = a2[1];
LABEL_6:
    if ((*((unsigned char *)v5 + 57) & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0;
LABEL_9:
  pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v5, v4);
LABEL_10:
  uint64_t v7 = *((void *)v5 + 3);
  uint64_t v8 = *(void *)v7;
  uint64_t v12 = v8;
  if ((v8 & 7) != 0)
  {
    uint64_t v9 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v12 = (uint64_t)v9;
    }
  }
  memset(v13, 0, 24);
  sub_21698FA28(v13, *(uint64_t **)(v7 + 16), *(uint64_t **)(v7 + 24), (uint64_t)(*(void *)(v7 + 24) - *(void *)(v7 + 16)) >> 3);
  uint64_t v14 = 0;
  char v15 = 0;
  sub_216D12698((uint64_t)&v14, &v12, (uint64_t)v13);
  void v13[3] = bswap64(0x9E3779B97F4A7C55 * (void)v14);
  uint64_t v10 = sub_216F78C14(a1, &v12, *v6, (pxrInternal__aapl__pxrReserved__::UsdPrim *)a2);
  uint64_t v14 = (void **)v13;
  sub_216889A04(&v14);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v10;
}

void sub_216F774DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216889A04((void ***)va);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CanConnect(uint64_t a1, uint64_t a2)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = 0;
  unint64_t v4 = sub_216F76D70();
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t v5 = sub_216F77390(v4, &v7);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  if (v5) {
    LOBYTE(a2) = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *, uint64_t, uint64_t, void **))(*(void *)v5 + 16))(v5, a1, a2, __p);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  return (v5 != 0) & a2;
}

{
  unint64_t v4;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *v5;
  pxrInternal__aapl__pxrReserved__ *v7;
  atomic_ullong *v8;
  int v9;
  int v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;

  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = 0;
  unint64_t v4 = sub_216F76D70();
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t v5 = sub_216F77390(v4, &v7);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  if (v5) {
    LOBYTE(a2) = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *, uint64_t, uint64_t, void **))(*(void *)v5 + 24))(v5, a1, a2, __p);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  return (v5 != 0) & a2;
}

void sub_216F77620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void sub_216F77750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  unint64_t v3 = sub_216F76D70();
  sub_216F78BE0(v3);
  sub_216F783A4((uint64_t)&v12, this);
  unint64_t v4 = *(void ***)this;
  LODWORD(v7) = 1;
  uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v10);
  uint64_t v11 = 0;
  uint64_t v5 = sub_216F78C14(v3, &v12, v4, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  uint64_t v7 = (void **)&v13;
  sub_216889A04(&v7);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v5 != 0;
}

void sub_216F77888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, atomic_ullong *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v16);
  sub_21697C414(v15);
  if (a11) {
    sub_216D16E0C(a11);
  }
  a10 = (void **)&a15;
  sub_216889A04(&a10);
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  unint64_t v2 = sub_216F76D70();
  sub_216D16CFC((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = sub_216F77390(v2, &v6);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  if (v3) {
    BOOL v4 = *((unsigned char *)v3 + 8) != 0;
  }
  return (v3 != 0) & v4;
}

void sub_216F779A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::RequiresEncapsulation(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  unint64_t v2 = sub_216F76D70();
  sub_216D16CFC((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = sub_216F77390(v2, &v6);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  if (v3) {
    BOOL v4 = *((unsigned char *)v3 + 9) != 0;
  }
  return (v3 != 0) & v4;
}

void sub_216F77A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

tbb::queuing_rw_mutex::scoped_lock *sub_216F77A78(atomic_ullong *a1)
{
  v15[0] = 0;
  __int16 v16 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v15, a1 + 1, 1);
  unint64_t v2 = (atomic_ullong *)a1[4];
  if (v2)
  {
    while (v2[7])
    {
      unint64_t v3 = (atomic_ullong *)*v2;
LABEL_32:
      unint64_t v2 = v3;
      if (!v3) {
        return sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v15);
      }
    }
    int8x8_t v4 = (int8x8_t)a1[3];
    unint64_t v5 = v2[1];
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(void *)&v4) {
        v5 %= *(void *)&v4;
      }
    }
    else
    {
      v5 &= *(void *)&v4 - 1;
    }
    unint64_t v3 = (atomic_ullong *)*v2;
    atomic_ullong v7 = a1[2];
    int v8 = *(atomic_ullong **)(v7 + 8 * v5);
    do
    {
      int v9 = v8;
      int v8 = (atomic_ullong *)*v8;
    }
    while (v8 != v2);
    if (v9 == a1 + 4) {
      goto LABEL_36;
    }
    unint64_t v10 = v9[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v4) {
        v10 %= *(void *)&v4;
      }
    }
    else
    {
      v10 &= *(void *)&v4 - 1;
    }
    uint64_t v11 = (void *)*v2;
    if (v10 != v5)
    {
LABEL_36:
      if (v3)
      {
        unint64_t v12 = v3[1];
        if (v6.u32[0] > 1uLL)
        {
          unint64_t v13 = v3[1];
          if (v12 >= *(void *)&v4) {
            unint64_t v13 = v12 % *(void *)&v4;
          }
        }
        else
        {
          unint64_t v13 = v12 & (*(void *)&v4 - 1);
        }
        uint64_t v11 = (void *)*v2;
        if (v13 == v5) {
          goto LABEL_25;
        }
      }
      *(void *)(v7 + 8 * v5) = 0;
      uint64_t v11 = (void *)*v2;
    }
    if (!v11)
    {
LABEL_31:
      atomic_ullong *v9 = (atomic_ullong)v11;
      *unint64_t v2 = 0;
      --a1[5];
      v17[0] = v2;
      v17[1] = a1 + 4;
      char v18 = 1;
      sub_216F78300((uint64_t)v17);
      goto LABEL_32;
    }
    unint64_t v12 = v11[1];
LABEL_25:
    if (v6.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v4) {
        v12 %= *(void *)&v4;
      }
    }
    else
    {
      v12 &= *(void *)&v4 - 1;
    }
    if (v12 != v5)
    {
      *(void *)(a1[2] + 8 * v12) = v9;
      uint64_t v11 = (void *)*v2;
    }
    goto LABEL_31;
  }
  return sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v15);
}

uint64_t sub_216F77C2C(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  *(void *)a1 = &unk_26C76D988;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 40) = *a2;
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 16))(a4, a1 + 56);
  *(_OWORD *)(a1 + 88) = *a3;
  return a1;
}

void sub_216F77CC8(_Unwind_Exception *a1, const void *a2)
{
  int8x8_t v4 = (atomic_uint *)*((void *)v2 + 6);
  if (v4) {
    sub_217324328(v4);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(v2, a2);
  _Unwind_Resume(a1);
}

void sub_216F77CE8(uint64_t a1)
{
  *(void *)a1 = &unk_26C76D988;
  (**(void (***)(void))(a1 + 56))();
  unint64_t v3 = *(atomic_uint **)(a1 + 48);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }

  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *)a1, v2);
}

void sub_216F77D9C(uint64_t a1)
{
  *(void *)a1 = &unk_26C76D988;
  (**(void (***)(void))(a1 + 56))();
  unint64_t v3 = *(atomic_uint **)(a1 + 48);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *)a1, v2);

  operator delete(v4);
}

uint64_t sub_216F77E54(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v9 = a1[6];
  int v8 = a1 + 6;
  if (!v9) {
    return 0;
  }
  unint64_t v13 = v8 - 1;
  uint64_t v14 = sub_216850B68(v8);
  uint64_t v15 = *v13;
  BOOL v16 = !*(unsigned char *)(v14 + 14) || v15 == 0;
  if (v16
    || (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 7)) & 1) != 0)
  {
    return 0;
  }
  if (*a7 != a7[1])
  {
    uint64_t v26 = v15;
    uint64_t v22 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
    uint64_t v23 = sub_216F78260(v13);
    if (v22) {
      uint64_t v24 = a6;
    }
    else {
      uint64_t v24 = MEMORY[0x263F8C288];
    }
    char v25 = (char *)v22;
    uint64_t v15 = v26;
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_BeginDelivery((uint64_t)a1, a2, v25, v24, v23, (uint64_t)&unk_26C76D960, a7);
  }
  char v18 = (void (*)(void *, uint64_t))a1[11];
  uint64_t v19 = a1[12];
  uint64_t v20 = (void *)(v15 + (v19 >> 1));
  if (v19) {
    char v18 = *(void (**)(void *, uint64_t))(*v20 + v18);
  }
  v18(v20, a2);
  if (*a7 != a7[1]) {
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery((uint64_t)a1, a7, v21);
  }
  return 1;
}

uint64_t sub_216F77F94(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v13);
  if (v13[0] == v3)
  {
    v13[0] = "tf/notice.h";
    v13[1] = "GetNoticeType";
    v13[2] = 563;
    void v13[3] = "virtual TfType pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserve"
             "d__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::(an"
             "onymous namespace)::_BehaviorRegistry>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr, void (pxrInternal__"
             "aapl__pxrReserved__::(anonymous namespace)::_BehaviorRegistry::*)(const pxrInternal__aapl__pxrReserved__::P"
             "lugNotice::DidRegisterPlugins &), pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins>>::GetNo"
             "ticeType() const [Derived = pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrRe"
             "served__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_BehaviorRegistry>, pxrInterna"
             "l__aapl__pxrReserved__::TfAnyWeakPtr, void (pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Behav"
             "iorRegistry::*)(const pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins &), pxrInternal__aap"
             "l__pxrReserved__::PlugNotice::DidRegisterPlugins>]";
    char v14 = 0;
    int v15 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)off_26C74DAF0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v9);
    int8x8_t v4 = std::string::insert(&v9, 0, "notice type ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    uint64_t v6 = std::string::append(&v10, " undefined in the TfType system");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)float64x2_t __p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((uint64_t)v13, (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
  return v3;
}

void sub_216F780B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F78100(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfType::IsA(a2, v6, v7);
  if (result)
  {
    std::string v9 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
    char IsInvalid = pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid(v9);
    uint64_t result = 0;
    if (a3)
    {
      if ((IsInvalid & 1) == 0) {
        return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v9) == a3;
      }
    }
  }
  return result;
}

uint64_t sub_216F78190(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
  if (!pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator BOOL(a1 + 56)) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v1);
}

void *sub_216F781E0(uint64_t a1)
{
  unint64_t v2 = operator new(0x68uLL);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  sub_216F77C2C((uint64_t)v2, (void *)(a1 + 40), (_OWORD *)(a1 + 88), a1 + 56);
  return v2;
}

void sub_216F7824C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216F78260(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    long long v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    void v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::(anonymous namespace)::_BehaviorRegistry>::operator->() const [PtrTemplate = "
            "pxrInternal__aapl__pxrReserved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
            ":_BehaviorRegistry]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9TfWeakPtrINS_12_GLOBAL__N_117_BehaviorRegistryEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_216F78300(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216F78348((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_216F78348(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = (void **)(a1 + 8);
  sub_216889A04(&v3);
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t sub_216F783A4(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaTypeName(this, (atomic_uint **)a1);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = 0;
  char v5 = 0;
  sub_216D12698((uint64_t)&v4, (void *)a1, a1 + 8);
  *(void *)(a1 + 32) = bswap64(0x9E3779B97F4A7C55 * v4);
  return a1;
}

void sub_216F78428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216889A04((void ***)va);
  if ((*v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216F78458(uint64_t a1, uint64_t *a2, void *a3)
{
  v39[0] = 0;
  *(_WORD *)((char *)&v40 + 1) = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v39, (atomic_ullong *)(a1 + 8), 1);
  long long v7 = (void *)(a1 + 16);
  unint64_t v8 = a2[4];
  unint64_t v9 = *(void *)(a1 + 24);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = a2[4];
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    std::string::size_type v12 = *(void **)(*v7 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_216F788DC(v13 + 2, a2))
            {
              uint64_t v26 = sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v39);
              v39[0] = "usdShade/connectableAPIBehavior.cpp";
              v39[1] = "RegisterBehaviorForPrimTypeId";
              v39[2] = 469;
              uint64_t v40 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_BehaviorRegistry::RegisterBehaviorFor"
                    "PrimTypeId(const _PrimTypeId &, const SharedConnectableAPIBehaviorPtr &)";
              char v41 = 0;
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B938F0, memory_order_acquire) & 1) == 0)
              {
                uint64_t v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)__cxa_guard_acquire(&qword_267B938F0);
                if (v26)
                {
                  sub_216779094(&qword_267B938F8, ";");
                  __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267B938F8, &dword_216758000);
                  qword_267B938E8 = (uint64_t)&qword_267B938F8;
                  __cxa_guard_release(&qword_267B938F0);
                }
              }
              if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
                EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
              }
              else {
                EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
              }
              if (*((char *)EmptyString + 23) < 0)
              {
                sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
              }
              else
              {
                long long v28 = *(_OWORD *)EmptyString;
                __dst.__r_.__value_.__r.__words[2] = EmptyString[2];
                *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v28;
              }
              int v29 = (void *)a2[1];
              for (uint64_t i = (void *)a2[2]; v29 != i; ++v29)
              {
                if (byte_267B9390F >= 0) {
                  uint64_t v31 = (const std::string::value_type **)&qword_267B938E8;
                }
                else {
                  uint64_t v31 = (const std::string::value_type **)&qword_267B938F8;
                }
                if (byte_267B9390F >= 0) {
                  std::string::size_type v32 = byte_267B9390F;
                }
                else {
                  std::string::size_type v32 = qword_267B93900;
                }
                int v33 = std::string::append(&__dst, *v31, v32);
                if ((*v29 & 0xFFFFFFFFFFFFFFF8) != 0) {
                  int v34 = (uint64_t *)((*v29 & 0xFFFFFFFFFFFFFFF8) + 16);
                }
                else {
                  int v34 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v33);
                }
                int v35 = *((char *)v34 + 23);
                if (v35 >= 0) {
                  uint64_t v36 = (const std::string::value_type *)v34;
                }
                else {
                  uint64_t v36 = (const std::string::value_type *)*v34;
                }
                if (v35 >= 0) {
                  std::string::size_type v37 = *((unsigned __int8 *)v34 + 23);
                }
                else {
                  std::string::size_type v37 = v34[1];
                }
                std::string::append(&__dst, v36, v37);
              }
              p_dst = &__dst;
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v39, 1, (pxrInternal__aapl__pxrReserved__ *)"UsdShade Connectable behavior already registered for primTypeId comprised of '%s' type and apischemas.", (const char *)p_dst);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__dst.__r_.__value_.__l.__data_);
              }
              return;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  int v15 = operator new(0x48uLL);
  BOOL v16 = (void *)(a1 + 32);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  __dst.__r_.__value_.__l.__size_ = a1 + 32;
  __dst.__r_.__value_.__s.__data_[16] = 0;
  void *v15 = 0;
  v15[1] = v8;
  sub_216F78B4C(v15 + 2, a2);
  uint64_t v17 = a3[1];
  v15[7] = *a3;
  unsigned char v15[8] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  __dst.__r_.__value_.__s.__data_[16] = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v19 = *(float *)(a1 + 48);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_216F78950(a1 + 16, v23);
    unint64_t v9 = *(void *)(a1 + 24);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void **)(*v7 + 8 * v3);
  if (v24)
  {
    *(void *)__dst.__r_.__value_.__l.__data_ = *v24;
    *uint64_t v24 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    *(void *)__dst.__r_.__value_.__l.__data_ = *v16;
    *BOOL v16 = __dst.__r_.__value_.__r.__words[0];
    *(void *)(*v7 + 8 * v3) = v16;
    if (*(void *)__dst.__r_.__value_.__l.__data_)
    {
      unint64_t v25 = *(void *)(*(void *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v25 >= v9) {
          v25 %= v9;
        }
      }
      else
      {
        v25 &= v9 - 1;
      }
      *(void *)(*v7 + 8 * v25) = __dst.__r_.__value_.__r.__words[0];
    }
  }
  __dst.__r_.__value_.__r.__words[0] = 0;
  ++*(void *)(a1 + 40);
  sub_216F78300((uint64_t)&__dst);
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v39);
}

void sub_216F78884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

BOOL sub_216F788DC(void *a1, void *a2)
{
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = (uint64_t *)a2[1];
  if (v2 - v3 != a2[2] - (void)v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = (*(void *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) == (v6 & 0xFFFFFFFFFFFFFFF8);
    BOOL v8 = (*(void *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) != (v6 & 0xFFFFFFFFFFFFFFF8) || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

void sub_216F78950(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      BOOL v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    sub_21677CA1C();
  }
  uint64_t v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  BOOL v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    unint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *BOOL v8 = *v14;
          *unint64_t v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          unint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        BOOL v8 = v14;
        unint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t *sub_216F78B4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_21698FA28(a1 + 1, (uint64_t *)a2[1], (uint64_t *)a2[2], (a2[2] - a2[1]) >> 3);
  a1[4] = a2[4];
  return a1;
}

uint64_t sub_216F78BE0(uint64_t result)
{
  uint64_t v1 = (atomic_uchar *)(result + 56);
  while ((atomic_load_explicit(v1, memory_order_acquire) & 1) == 0)
    BOOL result = sched_yield();
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *sub_216F78C14(uint64_t a1, uint64_t *a2, void **a3, pxrInternal__aapl__pxrReserved__::UsdPrim *a4)
{
  uint64_t v67 = a3;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  if (sub_216F7934C((atomic_ullong *)a1, a2, &v65))
  {
    BOOL v8 = v65;
    goto LABEL_101;
  }
  size_t v9 = pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v55);
  if (v67 == (void **)v55)
  {
    uint8x8_t v12 = (*a2 & 0xFFFFFFFFFFFFFFF8) != 0
        ? (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16)
        : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    uint64_t v67 = *(void ***)pxrInternal__aapl__pxrReserved__::TfType::FindByName((uint64_t)v12, v10, v11);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v55);
    if (v67 == (void **)v55 && a2[1] == a2[2])
    {
      BOOL v8 = 0;
      goto LABEL_101;
    }
  }
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v55);
  uint64_t v52 = a4;
  uint64_t v53 = a2;
  if (v67 == (void **)v55)
  {
    char v18 = 0;
LABEL_81:
    if (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsAbstract((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v67, v13))
    {
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
    }
    else if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v52, v43))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(v52, v44, &v58);
    }
    else
    {
      unint64_t v45 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_instance);
      if (!v45) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance();
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v67, (atomic_uint **)&v55);
      if (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::IsConcrete((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v67, v46))
      {
        uint64_t v47 = sub_2168CB120((void *)(v45 + 32), &v55);
      }
      else
      {
        uint64_t v47 = sub_2168CB120((void *)(v45 + 72), &v55);
      }
      uint64_t v48 = v47[3];
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      uint64_t v58 = 0;
      sub_21698FA28(&v58, *(uint64_t **)(v48 + 56), *(uint64_t **)(v48 + 64), (uint64_t)(*(void *)(v48 + 64) - *(void *)(v48 + 56)) >> 3);
      if ((v55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    unint64_t v50 = v58;
    uint64_t v49 = v59;
    while (v50 != v49)
    {
      if (sub_216F79920((atomic_ullong *)a1, v50, &v65))
      {
        sub_216F78458(a1, v53, &v65);
        BOOL v8 = v65;
        goto LABEL_100;
      }
      unint64_t v50 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)v50 + 8);
    }
    BOOL v8 = v65;
    if (!v65
      || (unint64_t v55 = (unint64_t)"usdShade/connectableAPIBehavior.cpp",
          v56[0] = (std::__shared_weak_count *)"_GetBehaviorForPrimTypeId",
          v56[1] = (std::__shared_weak_count *)702,
          v56[2] = (std::__shared_weak_count *)"const UsdShadeConnectableAPIBehavior *pxrInternal__aapl__pxrReserved__::("
                                               "anonymous namespace)::_BehaviorRegistry::_GetBehaviorForPrimTypeId(const "
                                               "_PrimTypeId &, TfType, const UsdPrim &)",
          LOBYTE(v57) = 0,
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v55, "!behavior", 0)))
    {
      if ((v18 & 1) == 0) {
        sub_216F78458(a1, v53, &v65);
      }
    }
LABEL_100:
    unint64_t v55 = (unint64_t)&v58;
    sub_216889A04((void ***)&v55);
    goto LABEL_101;
  }
  float64x2_t __p = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes((pxrInternal__aapl__pxrReserved__::TfType *)&v67, &__p, v14);
  BOOL v8 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)__p;
  size_t v15 = v63;
  while (1)
  {
    if (v8 == v15)
    {
      char v18 = 0;
      goto LABEL_64;
    }
    if (sub_216F79494((atomic_ullong *)a1, v8, &v65)) {
      break;
    }
    if (sub_216F79548((char *)v8, v16, v17))
    {
      if ((sub_216F79494((atomic_ullong *)a1, v8, &v65) & 1) == 0) {
        sub_216F7977C(a1, (uint64_t *)v8, &v65);
      }
      break;
    }
    BOOL v8 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)v8 + 8);
  }
  uint64_t v58 = 0;
  __int16 v61 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)&v58, (atomic_ullong *)(a1 + 8), 1);
  float v19 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)__p;
  if (v8 != __p)
  {
    BOOL v20 = (void *)(a1 + 16);
    unint64_t v54 = (void **)(a1 + 32);
    do
    {
      sub_216F783A4((uint64_t)&v55, v19);
      unint64_t v21 = v57;
      unint64_t v22 = *(void *)(a1 + 24);
      if (v22)
      {
        uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
        v23.i16[0] = vaddlv_u8(v23);
        unint64_t v24 = v23.u32[0];
        if (v23.u32[0] > 1uLL)
        {
          unint64_t v4 = v57;
          if (v57 >= v22) {
            unint64_t v4 = v57 % v22;
          }
        }
        else
        {
          unint64_t v4 = (v22 - 1) & v57;
        }
        unint64_t v25 = *(void **)(*v20 + 8 * v4);
        if (v25)
        {
          uint64_t v26 = (void *)*v25;
          if (*v25)
          {
            do
            {
              unint64_t v27 = v26[1];
              if (v27 == v21)
              {
                if (sub_216F788DC(v26 + 2, &v55)) {
                  goto LABEL_60;
                }
              }
              else
              {
                if (v24 > 1)
                {
                  if (v27 >= v22) {
                    v27 %= v22;
                  }
                }
                else
                {
                  v27 &= v22 - 1;
                }
                if (v27 != v4) {
                  break;
                }
              }
              uint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
        }
      }
      long long v28 = operator new(0x48uLL);
      v68[0] = (void **)v28;
      v68[1] = (void **)(a1 + 32);
      char v69 = 0;
      *(void *)long long v28 = 0;
      *((void *)v28 + 1) = v21;
      sub_216F78B4C((uint64_t *)v28 + 2, (uint64_t *)&v55);
      int v29 = v66;
      *((void *)v28 + 7) = v65;
      *((void *)v28 + 8) = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v69 = 1;
      float v30 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
      float v31 = *(float *)(a1 + 48);
      if (!v22 || (float)(v31 * (float)v22) < v30)
      {
        BOOL v32 = (v22 & (v22 - 1)) != 0;
        if (v22 < 3) {
          BOOL v32 = 1;
        }
        unint64_t v33 = v32 | (2 * v22);
        unint64_t v34 = vcvtps_u32_f32(v30 / v31);
        if (v33 <= v34) {
          size_t v35 = v34;
        }
        else {
          size_t v35 = v33;
        }
        sub_216F78950(a1 + 16, v35);
        unint64_t v22 = *(void *)(a1 + 24);
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v21 >= v22) {
            unint64_t v4 = v21 % v22;
          }
          else {
            unint64_t v4 = v21;
          }
        }
        else
        {
          unint64_t v4 = (v22 - 1) & v21;
        }
      }
      uint64_t v36 = *(void ***)(*v20 + 8 * v4);
      if (v36)
      {
        *v68[0] = *v36;
        *uint64_t v36 = v68[0];
      }
      else
      {
        *v68[0] = *v54;
        *unint64_t v54 = v68[0];
        *(void *)(*v20 + 8 * v4) = v54;
        if (*v68[0])
        {
          unint64_t v37 = *((void *)*v68[0] + 1);
          if ((v22 & (v22 - 1)) != 0)
          {
            if (v37 >= v22) {
              v37 %= v22;
            }
          }
          else
          {
            v37 &= v22 - 1;
          }
          *(void ***)(*v20 + 8 * v37) = v68[0];
        }
      }
      v68[0] = 0;
      ++*(void *)(a1 + 40);
      sub_216F78300((uint64_t)v68);
LABEL_60:
      v68[0] = (void **)v56;
      sub_216889A04(v68);
      if ((v55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      float v19 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)v19 + 8);
    }
    while (v8 != v19);
  }
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)&v58);
  char v18 = 1;
LABEL_64:
  uint64_t v38 = v65;
  if (v65)
  {
    uint64_t v40 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v53[1];
    uint64_t v39 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v53[2];
    BOOL v8 = v65;
    if (v40 != v39)
    {
      while (1)
      {
        unint64_t v55 = 0;
        v56[0] = 0;
        if (sub_216F79920((atomic_ullong *)a1, v40, &v55)) {
          break;
        }
        if (v56[0]) {
          sub_216784EC4(v56[0]);
        }
        uint64_t v40 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)((char *)v40 + 8);
        if (v40 == v39)
        {
          BOOL v8 = v38;
          goto LABEL_78;
        }
      }
      BOOL v8 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v55;
      char v41 = v56[0];
      if (v56[0]) {
        atomic_fetch_add_explicit(&v56[0]->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v42 = v66;
      uint64_t v65 = v8;
      uint64_t v66 = v41;
      if (v42) {
        sub_216784EC4(v42);
      }
      sub_216F78458(a1, v53, &v65);
      if (v41) {
        sub_216784EC4(v41);
      }
    }
  }
LABEL_78:
  if (__p)
  {
    uint64_t v63 = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)__p;
    operator delete(__p);
  }
  if (!v38) {
    goto LABEL_81;
  }
LABEL_101:
  if (v66) {
    sub_216784EC4(v66);
  }
  return v8;
}

void sub_216F79250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  a13 = &a18;
  sub_216889A04((void ***)&a13);
  if (a26) {
    sub_216784EC4(a26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216F7934C(atomic_ullong *a1, void *a2, void *a3)
{
  v19[0] = 0;
  __int16 v20 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v19, a1 + 1, 0);
  int8x8_t v6 = (int8x8_t)a1[3];
  if (!*(void *)&v6) {
    goto LABEL_17;
  }
  unint64_t v7 = a2[4];
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = a2[4];
    if (v7 >= *(void *)&v6) {
      unint64_t v10 = v7 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v6 - 1) & v7;
  }
  unint64_t v11 = *(void **)(a1[2] + 8 * v10);
  if (!v11 || (uint8x8_t v12 = (void *)*v11) == 0)
  {
LABEL_17:
    uint64_t v14 = 0;
    goto LABEL_18;
  }
  while (1)
  {
    unint64_t v13 = v12[1];
    if (v7 == v13) {
      break;
    }
    if (v9 > 1)
    {
      if (v13 >= *(void *)&v6) {
        v13 %= *(void *)&v6;
      }
    }
    else
    {
      v13 &= *(void *)&v6 - 1;
    }
    if (v13 != v10) {
      goto LABEL_17;
    }
LABEL_16:
    uint8x8_t v12 = (void *)*v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  if (!sub_216F788DC(v12 + 2, a2)) {
    goto LABEL_16;
  }
  uint64_t v17 = v12[7];
  uint64_t v16 = v12[8];
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  char v18 = (std::__shared_weak_count *)a3[1];
  *a3 = v17;
  a3[1] = v16;
  if (v18) {
    sub_216784EC4(v18);
  }
  uint64_t v14 = 1;
LABEL_18:
  sub_216AB9BA0((tbb::queuing_rw_mutex::scoped_lock *)v19);
  return v14;
}

uint64_t sub_216F79494(atomic_ullong *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *a2, void *a3)
{
  sub_216F783A4((uint64_t)&v7, a2);
  uint64_t v5 = sub_216F7934C(a1, &v7, a3);
  unint64_t v9 = (void **)&v8;
  sub_216889A04(&v9);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v5;
}

void sub_216F79514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)(v14 + 8);
  sub_216889A04(&a14);
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216F79548(char *a1, const std::type_info *a2, char *a3)
{
  uint64_t IsA = pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v4, v5);
  if ((IsA & 1) == 0)
  {
    uint64_t IsA = pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v9, v10);
    if (!IsA) {
      return 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance((pxrInternal__aapl__pxrReserved__::PlugRegistry *)IsA);
  uint64_t v11 = *(void *)a1;
  sub_216779094(__p, "providesUsdShadeConnectableAPIBehavior");
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(v11, (const void **)__p, (pxrInternal__aapl__pxrReserved__::JsValue *)v26);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)v26)
    && pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)v26))
  {
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*(void *)a1, &v24);
    uint8x8_t v12 = sub_2168E79D8(&v24);
    if (v13 & 1 | (unint64_t)v12)
    {
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78(&v24);
      uint64_t v15 = pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v14);
    }
    else
    {
      __p[0] = "usdShade/connectableAPIBehavior.cpp";
      __p[1] = "_LoadPluginDefiningBehaviorForType";
      uint64_t v21 = 738;
      unint64_t v22 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_BehaviorRegistry::_LoadPluginDefiningBehavior"
            "ForType(const TfType &) const";
      char v23 = 0;
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)a1);
      if (*(char *)(TypeName + 23) >= 0) {
        char v18 = (const char *)TypeName;
      }
      else {
        char v18 = *(const char **)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not find plugin for '%s'", v18);
      uint64_t v15 = 0;
    }
    uint64_t v19 = v25;
    if (v25 && atomic_fetch_add_explicit((atomic_uint *volatile)(v25 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  if (v27) {
    sub_216784EC4(v27);
  }
  return v15;
}

void sub_216F796FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, atomic_uint *a19)
{
  if (a19 && atomic_fetch_add_explicit(a19 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a19 + 8))(a19);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 40);
  if (v21) {
    sub_216784EC4(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F7977C(uint64_t a1, uint64_t *a2, void *a3)
{
  int8x8_t v6 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_216779094(__p, "isUsdShadeContainer");
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v6);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(*a2, (const void **)__p, (pxrInternal__aapl__pxrReserved__::JsValue *)v15);
  BOOL v7 = pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)v15)
    && pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)v15);
  if (v16) {
    sub_216784EC4(v16);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_216779094(__p, "requiresUsdShadeEncapsulation");
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v8);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(*a2, (const void **)__p, (pxrInternal__aapl__pxrReserved__::JsValue *)v15);
  BOOL v9 = !pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)v15)
    || pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)v15);
  if (v16) {
    sub_216784EC4(v16);
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v10 = operator new(0x10uLL);
  *(void *)unint64_t v10 = &unk_26C76D920;
  unsigned char v10[8] = v7;
  v10[9] = v9;
  sub_216F799A4(__p, (uint64_t)v10);
  long long v11 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint8x8_t v12 = (std::__shared_weak_count *)a3[1];
  *(_OWORD *)a3 = v11;
  if (v12)
  {
    sub_216784EC4(v12);
    if (__p[1]) {
      sub_216784EC4((std::__shared_weak_count *)__p[1]);
    }
  }
  sub_216F7722C(a1, (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)a2, a3);
}

void sub_216F798E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_216784EC4(a17);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F79920(atomic_ullong *a1, pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, void *a3)
{
  APITypeFromSchemauint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAPITypeFromSchemaTypeName(this, this);
  if (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetSchemaKind((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&APITypeFromSchemaTypeName, v5) != 5)return 0; {
  uint64_t result = sub_216F79548((char *)&APITypeFromSchemaTypeName, v6, v7);
  }
  if (result)
  {
    if ((sub_216F79494(a1, (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&APITypeFromSchemaTypeName, a3) & 1) == 0) {
      sub_216F7977C((uint64_t)a1, &APITypeFromSchemaTypeName, a3);
    }
    return 1;
  }
  return result;
}

void *sub_216F799A4(void *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  *unint64_t v4 = &unk_26C76DA00;
  v4[1] = 0;
  void v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216F799FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325190(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F79A18(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216F79A40(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216F79A70(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C76DA50)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::~UsdShadeCoordSysAPI(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Get(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  int8x8_t v6 = sub_216D24140(a1);
  if (v8 & 1 | (unint64_t)v6)
  {
    uint64_t v12 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::IsCoordSysAPIPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, v7))
    {
      BOOL v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v11);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (uint64_t)&v13);
      sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13, &v12);
      *(void *)a3 = &unk_26C76DA78;
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
      sub_21697C414(&v15);
      if (v14) {
        sub_216D16E0C(v14);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
      sub_21697C414(&v11);
    }
    else
    {
      char v13 = "usdShade/coordSysAPI.cpp";
      char v14 = (atomic_ullong *)"Get";
      uint64_t v15 = 63;
      unint64_t v16 = (unint64_t)"static UsdShadeCoordSysAPI pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Get(cons"
                              "t UsdStagePtr &, const SdfPath &)";
      char v17 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid coordSys path <%s>.", Text);
      LODWORD(v13) = 1;
      char v14 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
      unint64_t v16 = 0;
      uint64_t v11 = 0;
      sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13, &v11);
      *(void *)a3 = &unk_26C76DA78;
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
      sub_21697C414(&v15);
      if (v14) {
        sub_216D16E0C(v14);
      }
    }
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    char v13 = "usdShade/coordSysAPI.cpp";
    char v14 = (atomic_ullong *)"Get";
    uint64_t v15 = 58;
    unint64_t v16 = (unint64_t)"static UsdShadeCoordSysAPI pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Get(const "
                            "UsdStagePtr &, const SdfPath &)";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    unint64_t v16 = 0;
    uint64_t v12 = 0;
    sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13, &v12);
    *(void *)a3 = &unk_26C76DA78;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
    if (v14) {
      sub_216D16E0C(v14);
    }
  }
}

void sub_216F79DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  if ((a4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::IsCoordSysAPIPath(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this)) {
    return 0;
  }
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  if (*((char *)Name + 23) < 0)
  {
    sub_216778F24(&__p, (void *)*Name, Name[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)Name;
    __p.__r_.__value_.__r.__words[2] = Name[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens((unsigned __int8 *)&__p, (uint64_t *)&v20);
  unint64_t v9 = *(void *)(v21 - 8);
  unint64_t v19 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v19 = v9 & 0xFFFFFFFFFFFFFFF8;
    v9 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::IsSchemaPropertyBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v19, v8)&& (unint64_t v10 = v20, (unint64_t)(v21 - (void)v20) >= 9)&& (*v10 & 0xFFFFFFFFFFFFFFF8) == (*(void *)sub_216F7A450() & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F7A450();
    if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)EmptyString + 23) < 0) {
      uint64_t v14 = EmptyString[1];
    }
    else {
      uint64_t v14 = *((unsigned __int8 *)EmptyString + 23);
    }
    std::string::basic_string(&v17, &__p, v14 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v18);
    uint64_t v15 = *(void *)a2;
    uint64_t v16 = *(void *)a2 & 7;
    if (&v18 == (uint64_t *)a2)
    {
      if (v16) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v16) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)a2 = v18;
      uint64_t v18 = 0;
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = 1;
    unint64_t v9 = v19;
  }
  else
  {
    uint64_t v7 = 0;
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  sub_216889A04((void ***)&v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_216F7A06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string __p = &a17;
  sub_216889A04((void ***)&__p);
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Get@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t result = sub_216D36868(a3, this, (uint64_t *)a2);
  *(void *)uint64_t result = &unk_26C76DA78;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetAll(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(this);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetMultipleApplyInstanceNames(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&qword_267B93938, (uint64_t)&v8);
  uint64_t v5 = v8;
  long long v6 = v9;
  if (v8 != v9)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a2[1];
    do
    {
      if ((unint64_t)v7 >= a2[2])
      {
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_216F7E8F8(a2, this, v5);
      }
      else
      {
        sub_216D36868(v7, this, v5);
        *(void *)uint64_t v7 = &unk_26C76DA78;
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v7 + 32);
        a2[1] = (uint64_t)v7;
      }
      a2[1] = (uint64_t)v7;
      ++v5;
    }
    while (v5 != v6);
  }
  unint64_t v10 = (void **)&v8;
  sub_216889A04(&v10);
}

void sub_216F7A1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D37524((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93940, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93940))
  {
    __cxa_guard_release(&qword_267B93940);
  }
  return &qword_267B93938;
}

void sub_216F7A298(_Unwind_Exception *a1)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::IsSchemaPropertyBaseName(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  v8[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93928, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = this;
    int v5 = __cxa_guard_acquire(&qword_267B93928);
    this = v4;
    if (v5)
    {
      long long v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v6) {
        long long v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      if ((*((void *)v6 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*((void *)v6 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)EmptyString, v8);
      sub_216D30CFC(qword_267B93910, v8, 1uLL);
      if ((v8[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      __cxa_atexit((void (*)(void *))sub_216B554D0, qword_267B93910, &dword_216758000);
      __cxa_guard_release(&qword_267B93928);
      this = v4;
    }
  }
  uint64_t v2 = (void *)qword_267B93910[0];
  if (qword_267B93910[0] != unk_267B93918)
  {
    while ((*v2 & 0xFFFFFFFFFFFFFFF8) != (*(void *)this & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v2 == (void *)unk_267B93918)
      {
        uint64_t v2 = (void *)unk_267B93918;
        return v2 != (void *)unk_267B93918;
      }
    }
  }
  return v2 != (void *)unk_267B93918;
}

void sub_216F7A418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B93928);
  _Unwind_Resume(a1);
}

unint64_t sub_216F7A450()
{
  unint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B93930);
  if (!v0)
  {
    unint64_t v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "coordSys", 0);
    uint64_t v2 = *(void *)v0;
    if ((*(void *)v0 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)v0 + 1) = 0;
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    long long v6 = (void **)(v0 + 8);
    char v7 = 0;
    uint64_t v3 = operator new(8uLL);
    *((void *)v0 + 1) = v3;
    *((void *)v0 + 2) = v3;
    *uint64_t v3 = v2;
    unint64_t v4 = v3 + 1;
    *((void *)v0 + 3) = v3 + 1;
    if ((v2 & 7) != 0)
    {
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        *v3 &= 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)v0 + 2) = v4;
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    else
    {
      *((void *)v0 + 2) = v4;
    }
    uint64_t v5 = 0;
    atomic_compare_exchange_strong(&qword_267B93930, (unint64_t *)&v5, (unint64_t)v0);
    if (v5)
    {
      long long v6 = (void **)(v0 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B93930);
    }
  }
  return (unint64_t)v0;
}

void sub_216F7A574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_216889A04(&a9);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  return 6;
}

uint64_t sub_216F7A5D0(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93938, v6);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a2, a3);
  }
  else
  {
    v14[0] = "usd/prim.h";
    v14[1] = "CanApplyAPI";
    __n128 v14[2] = 1059;
    v14[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(const TfToken &, std::string *) const [SchemaTy"
             "pe = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI]";
    char v15 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v11);
    if (*(char *)(TypeName + 23) >= 0) {
      char v13 = (const char *)TypeName;
    }
    else {
      char v13 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v13);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if (sub_216F7A804(this, a2))
  {
    sub_216D36868(a3, this, (uint64_t *)a2);
    *(void *)a3 = &unk_26C76DA78;
  }
  else
  {
    int v8 = 1;
    unint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v11);
    uint64_t v12 = 0;
    uint64_t v7 = 0;
    sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, &v7);
    *(void *)a3 = &unk_26C76DA78;
    if ((v7 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_21697C414(&v10);
    if (v9) {
      sub_216D16E0C(v9);
    }
  }
}

void sub_216F7A7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F7A804(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93938, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "ApplyAPI";
    v12[2] = 1188;
    void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(const TfToken &) const [SchemaType = pxrInternal__"
             "aapl__pxrReserved__::UsdShadeCoordSysAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      int v11 = (const char *)TypeName;
    }
    else {
      int v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93950, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)__cxa_guard_acquire(&qword_267B93950);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(v2);
      byte_267B93948 = sub_216D16508((char *)&qword_267B93938, v3, v4);
      __cxa_guard_release(&qword_267B93950);
    }
  }
  return byte_267B93948;
}

void sub_216F7A93C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  return &qword_267B93938;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString) {
    EmptyString = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 3);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v10 = (uint64_t *)(v9 + 4);
  }
  else {
    int v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_216F7AADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::CreateBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString) {
    EmptyString = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 3);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v10 = (uint64_t *)(v9 + 4);
  }
  else {
    int v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, 0, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_216F7ACAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93970, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93970))
  {
    qword_267B93958 = 0;
    unk_267B93960 = 0;
    qword_267B93968 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93958, &dword_216758000);
    __cxa_guard_release(&qword_267B93970);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93990, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93990))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_267B93978 = 0;
    unk_267B93980 = 0;
    qword_267B93988 = 0;
    sub_21698FA28(&qword_267B93978, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93978, &dword_216758000);
    __cxa_guard_release(&qword_267B93990);
  }
  if (v1) {
    return &qword_267B93978;
  }
  else {
    return &qword_267B93958;
  }
}

void sub_216F7AE20(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetSchemaAttributeNames(this);
  uint64_t v7 = SchemaAttributeNames;
  uint64_t v8 = *a2;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v8)
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216973388((char **)a3, (SchemaAttributeNames[1] - *SchemaAttributeNames) >> 3);
    int v10 = (void *)*v7;
    uint64_t v11 = (void *)v7[1];
    if ((void *)*v7 != v11)
    {
      do
      {
        if ((*v10 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v12 = (*v10 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          uint64_t v12 = (uint64_t)EmptyString;
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
          char v13 = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v13, (uint64_t)&v37);
        int v15 = *(void **)(a3 + 8);
        unint64_t v14 = *(void *)(a3 + 16);
        if ((unint64_t)v15 >= v14)
        {
          uint64_t v18 = ((uint64_t)v15 - *(void *)a3) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v19 = v14 - *(void *)a3;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          uint64_t v36 = a3 + 16;
          if (v21) {
            unint64_t v22 = (char *)sub_21677CB28(a3 + 16, v21);
          }
          else {
            unint64_t v22 = 0;
          }
          char v23 = &v22[8 * v18];
          uint64_t v24 = &v22[8 * v21];
          size_t v35 = v24;
          *(void *)char v23 = v37;
          std::string v17 = v23 + 8;
          uint64_t v37 = 0;
          v34.i64[1] = (uint64_t)(v23 + 8);
          uint64_t v26 = *(char **)a3;
          uint64_t v25 = *(char **)(a3 + 8);
          if (v25 == *(char **)a3)
          {
            int64x2_t v28 = vdupq_n_s64((unint64_t)v25);
          }
          else
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *((void *)v23 - 1) = v27;
              v23 -= 8;
              *(void *)uint64_t v25 = 0;
            }
            while (v25 != v26);
            int64x2_t v28 = *(int64x2_t *)a3;
            std::string v17 = (void *)v34.i64[1];
            uint64_t v24 = v35;
          }
          *(void *)a3 = v23;
          *(void *)(a3 + 8) = v17;
          int64x2_t v34 = v28;
          int v29 = *(char **)(a3 + 16);
          *(void *)(a3 + 16) = v24;
          size_t v35 = v29;
          uint64_t v33 = v28.i64[0];
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168BE9D8((uint64_t)&v33);
          uint64_t v16 = v37;
        }
        else
        {
          uint64_t v16 = 0;
          void *v15 = v37;
          std::string v17 = v15 + 1;
          uint64_t v37 = 0;
        }
        *(void *)(a3 + 8) = v17;
        if ((v16 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        ++v10;
      }
      while (v10 != v11);
    }
  }
  else
  {
    float v30 = (uint64_t *)*SchemaAttributeNames;
    float v31 = (uint64_t *)SchemaAttributeNames[1];
    unint64_t v32 = ((uint64_t)v31 - *SchemaAttributeNames) >> 3;
    sub_21698FA28((void *)a3, v30, v31, v32);
  }
}

void sub_216F7B058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216F7B098()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADE_COORD_SYS_IS_MULTI_APPLY)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(pxrInternal__aapl__pxrReserved__ *this)
{
  unint64_t v1 = atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADE_COORD_SYS_IS_MULTI_APPLY);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
  if (*(char *)(v1 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)v1, *(void *)(v1 + 8));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    uint64_t v13 = *(void *)(v1 + 16);
    *(_OWORD *)std::string __p = v2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B939A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B939A0))
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F7B26C();
    if ((*((void *)v5 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*((void *)v5 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
    }
    if (sub_21691B1C8((unsigned __int8 *)__p, (unsigned __int8 *)EmptyString))
    {
      int v7 = 0;
    }
    else
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F7B26C();
      if ((*((void *)v8 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v9 = (uint64_t *)((*((void *)v8 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      if (sub_21691B1C8((unsigned __int8 *)__p, (unsigned __int8 *)v9))
      {
        int v7 = 1;
      }
      else
      {
        int v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F7B26C();
        if ((*(void *)v10 & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t v11 = (uint64_t *)((*(void *)v10 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t v11 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
        }
        if (sub_21691B1C8((unsigned __int8 *)__p, (unsigned __int8 *)v11)) {
          int v7 = 2;
        }
        else {
          int v7 = 1;
        }
      }
    }
    dword_267B93998 = v7;
    __cxa_guard_release(&qword_267B939A0);
  }
  uint64_t v3 = dword_267B93998;
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_216F7B244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_216F7B26C()
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B939A8);
  if (!v0)
  {
    unint64_t v0 = (char *)operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "Warn", 0);
    long long v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "True", 0);
    uint64_t v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "False", 0);
    uint64_t v4 = *(void ***)v0;
    uint64_t v16 = v4;
    if ((v4 & 7) != 0)
    {
      uint64_t v5 = (void **)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v16 = v5;
      }
    }
    uint64_t v6 = (atomic_uint *)*v2;
    std::string v17 = v6;
    if ((v6 & 7) != 0)
    {
      int v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        std::string v17 = v7;
      }
    }
    uint64_t v8 = (atomic_uint *)*v3;
    uint64_t v18 = v8;
    if ((v8 & 7) != 0)
    {
      unint64_t v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v18 = v9;
      }
    }
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    *((void *)v0 + 5) = 0;
    int v10 = (char *)operator new(0x18uLL);
    uint64_t v11 = 0;
    *((void *)v0 + 3) = v10;
    *((void *)v0 + 4) = v10;
    *((void *)v0 + 5) = v10 + 24;
    do
    {
      unint64_t v12 = (unint64_t)(&v16)[v11];
      *(void *)&v10[v11 * 8] = v12;
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v10[v11 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v11;
    }
    while (v11 != 3);
    *((void *)v0 + 4) = v10 + 24;
    for (uint64_t i = 2; i != -1; --i)
    {
      unint64_t v14 = (unint64_t)(&v16)[i];
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v15 = 0;
    atomic_compare_exchange_strong(&qword_267B939A8, (unint64_t *)&v15, (unint64_t)v0);
    if (v15)
    {
      uint64_t v16 = (void **)(v0 + 24);
      sub_216889A04(&v16);
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B939A8);
    }
  }
  return (unint64_t)v0;
}

void sub_216F7B4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v11);
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::_WarnOnUseOfDeprecatedNonAppliedAPI(pxrInternal__aapl__pxrReserved__ *this, const char *a2, char *a3)
{
  v3[0] = "usdShade/coordSysAPI.cpp";
  v3[1] = "_WarnOnUseOfDeprecatedNonAppliedAPI";
  _OWORD v3[2] = 297;
  void v3[3] = "void pxrInternal__aapl__pxrReserved__::_WarnOnUseOfDeprecatedNonAppliedAPI(const char *)";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)"Using deprecated method (%s) from non-applied UsdShadeCoordSysAPI. UsdShadeCoordSysAPI schema has been updated to be a multi-apply API.", a3, this);
}

_DWORD *pxrInternal__aapl__pxrReserved__::_WarnOnDeprecatedAsset(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  v7[0] = "usdShade/coordSysAPI.cpp";
  v7[1] = "_WarnOnDeprecatedAsset";
  uint64_t v7[2] = 306;
  uint64_t v7[3] = "void pxrInternal__aapl__pxrReserved__::_WarnOnDeprecatedAsset(const UsdPrim &)";
  char v8 = 0;
  sub_216D0162C((uint64_t)this, &v5);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v5);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v7, (pxrInternal__aapl__pxrReserved__ *)"Prim at path (%s) is using old style non-applied UsdShadeCoordSysAPI coordSys bindings. UsdShadeCoordSysAPI schema has been updated to be a multi-apply API.", v3, Text);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_21697C414(&v5);
}

void sub_216F7B630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetLocalBindings(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t *a2@<X8>)
{
  long long v33 = 0uLL;
  unint64_t v34 = 0;
  float v30 = 0;
  float v31 = 0;
  uint64_t v32 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B939B8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_267B939B8);
    if (v16)
    {
      dword_267B939B0 = pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(v16);
      __cxa_guard_release(&qword_267B939B8);
    }
  }
  if (dword_267B939B0 == 2)
  {
    sub_216D16CFC((uint64_t)&v25, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetLocalBindingsForPrim((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v25, (uint64_t *)&v23);
    sub_216F7EC98((void **)&v33);
    long long v33 = v23;
    unint64_t v34 = v24;
    unint64_t v24 = 0;
    long long v23 = 0uLL;
    unint64_t v18 = (unint64_t)&v23;
    sub_216F7EBA0((void ***)&v18);
    if ((v29 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_21697C414(&v27);
    if (v26) {
      sub_216D16E0C(v26);
    }
    uint64_t v4 = *((void *)&v33 + 1);
    uint64_t v3 = v33;
    if ((void)v33 != *((void *)&v33 + 1)) {
      goto LABEL_44;
    }
    goto LABEL_13;
  }
  if (dword_267B939B0 != 1)
  {
LABEL_13:
    sub_216D16CFC((uint64_t)&v25, (uint64_t *)this + 1, (_DWORD *)this + 4);
    int v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F7A450();
    if ((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)&v25, EmptyString, (uint64_t *)&v23);
    if ((v29 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_21697C414(&v27);
    if (v26) {
      sub_216D16E0C(v26);
    }
    uint64_t v7 = *((void *)&v23 + 1);
    for (uint64_t i = v23; i != v7; i += 32)
    {
      sub_216D6B8C4(i, (uint64_t)&v25);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v25, v9))
      {
        int v10 = v30;
        for (uint64_t j = v31; j != v10; sub_216981128((uint64_t)&v32, j))
          j -= 2;
        float v31 = v10;
        if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v25, (uint64_t *)&v30))
        {
          if (v30 != v31)
          {
            pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v25, (pxrInternal__aapl__pxrReserved__::TfToken *)&v18);
            sub_216D0162C((uint64_t)&v25, &v19);
            unint64_t v12 = v30;
            sub_216981010(&v21, v30);
            sub_21698105C(&v22, v12 + 1);
            uint64_t v13 = *((void *)&v33 + 1);
            if (*((void *)&v33 + 1) >= v34)
            {
              uint64_t v14 = sub_216F7ED08((uint64_t *)&v33, (uint64_t *)&v18);
            }
            else
            {
              sub_216F7EE14((uint64_t)&v34, *((uint64_t *)&v33 + 1), (uint64_t *)&v18);
              uint64_t v14 = v13 + 24;
            }
            *((void *)&v33 + 1) = v14;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
            sub_21697C414(&v21);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
            sub_21697C414(&v19);
            if ((v18 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
        }
      }
      if ((v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
      sub_21697C414(&v27);
      if (v26) {
        sub_216D16E0C(v26);
      }
    }
    uint64_t v25 = (void **)&v23;
    sub_216D3BBE0(&v25);
    uint64_t v4 = *((void *)&v33 + 1);
    uint64_t v3 = v33;
    if ((void)v33 != *((void *)&v33 + 1) && dword_267B939B0 == 2)
    {
      sub_216D16CFC((uint64_t)&v25, (uint64_t *)this + 1, (_DWORD *)this + 4);
      pxrInternal__aapl__pxrReserved__::_WarnOnDeprecatedAsset((pxrInternal__aapl__pxrReserved__ *)&v25, v15);
      if ((v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
      sub_21697C414(&v27);
      if (v26) {
        sub_216D16E0C(v26);
      }
      uint64_t v4 = *((void *)&v33 + 1);
      uint64_t v3 = v33;
    }
LABEL_44:
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v34;
    unint64_t v34 = 0;
    long long v33 = 0uLL;
    goto LABEL_45;
  }
  sub_216D16CFC((uint64_t)&v25, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetLocalBindingsForPrim((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v25, a2);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_21697C414(&v27);
  if (v26) {
    sub_216D16E0C(v26);
  }
LABEL_45:
  uint64_t v25 = (void **)&v30;
  sub_216981168(&v25);
  uint64_t v25 = (void **)&v33;
  sub_216F7EBA0(&v25);
}

void sub_216F7BA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  __cxa_guard_abort(&qword_267B939B8);
  a22 = (void **)&a26;
  sub_216981168(&a22);
  a22 = (void **)(v26 - 112);
  sub_216F7EBA0(&a22);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetLocalBindingsForPrim(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetBindingsForPrim(this, a2, 0);
}

void sub_216F7BB98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F7EBA0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F7BBB0(uint64_t a1)
{
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetBindingsForPrim(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *a1, uint64_t *a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93938, v5);
  HasAPI = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)a1, SchemaInfo);
  if (HasAPI)
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(HasAPI);
    pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetMultipleApplyInstanceNames(a1, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&qword_267B93938, (uint64_t)&v41);
    char v8 = v41;
    for (uint64_t i = v42; v8 != i; ++v8)
    {
      uint64_t v10 = *v8;
      if ((*v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v10 &= 0xFFFFFFFFFFFFFFF8;
      }
      EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!EmptyString) {
        EmptyString = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      uint64_t v12 = *((void *)EmptyString + 3);
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v13 = (atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v14 = (uint64_t)(v13 + 4);
      }
      else
      {
        EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        uint64_t v14 = (uint64_t)EmptyString;
      }
      uint64_t v15 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v16 = (uint64_t *)(v15 + 4);
      }
      else {
        uint64_t v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v14, (uint64_t)v16, (uint64_t)&v40);
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
      }
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (uint64_t)&v35);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v35, v17))
      {
        if (a3)
        {
          unint64_t v18 = (uint64_t *)*a2;
          int v19 = (uint64_t *)a2[1];
          while (v18 != v19)
          {
            int v20 = sub_216D563F8(&v35);
            pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingBaseName(v20, (uint64_t)&v30);
            uint64_t v21 = *v18;
            int v22 = (atomic_uint *)(v30 & 0xFFFFFFFFFFFFFFF8);
            if ((v30 & 7) != 0) {
              atomic_fetch_add_explicit(v22, 0xFFFFFFFE, memory_order_release);
            }
            if ((atomic_uint *)(v21 & 0xFFFFFFFFFFFFFFF8) == v22) {
              goto LABEL_39;
            }
            v18 += 3;
          }
        }
        long long v23 = v43;
        for (uint64_t j = v44; j != v23; sub_216981128((uint64_t)&v45, j))
          j -= 2;
        uint64_t v44 = v23;
        if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v35, (uint64_t *)&v43)&& v43 != v44)
        {
          uint64_t v25 = sub_216D563F8(&v35);
          pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingBaseName(v25, (uint64_t)&v30);
          sub_216D0162C((uint64_t)&v35, &v31);
          uint64_t v26 = v43;
          sub_216981010(&v33, v43);
          sub_21698105C(&v34, v26 + 1);
          unint64_t v27 = a2[1];
          if (v27 >= a2[2])
          {
            uint64_t v28 = sub_216F7ED08(a2, &v30);
          }
          else
          {
            sub_216F7EE14((uint64_t)(a2 + 2), a2[1], &v30);
            uint64_t v28 = v27 + 24;
          }
          a2[1] = v28;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
          sub_21697C414(&v33);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
          sub_21697C414(&v31);
          if ((v30 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
      }
LABEL_39:
      if ((v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
      sub_21697C414(&v37);
      if (v36) {
        sub_216D16E0C(v36);
      }
      if ((v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    size_t v35 = (void **)&v41;
    sub_216889A04(&v35);
    size_t v35 = (void **)&v43;
    sub_216981168(&v35);
  }
}

void sub_216F7BF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  a21 = (void **)&a26;
  sub_216889A04(&a21);
  a21 = (void **)(v27 - 112);
  sub_216981168(&a21);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingBaseName(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t a2@<X8>)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (const std::string *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  int v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5) {
    int v5 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)v5 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v6 = (uint64_t *)((*((void *)v5 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    int v6 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(EmptyString, (uint64_t)v6, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v5;
  atomic_uint *v6;
  uint64_t v7;
  atomic_uint *v8;
  uint64_t *v9;
  uint64_t v10;

  uint64_t v3 = *((void *)this + 3);
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString) {
    EmptyString = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  int v5 = *((void *)EmptyString + 3);
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  int v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v7 = (uint64_t)(v6 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v7 = (uint64_t)EmptyString;
  }
  char v8 = (atomic_uint *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v9 = (uint64_t *)(v8 + 4);
  }
  else {
    unint64_t v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v7, (uint64_t)v9, (uint64_t)&v10);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit(v6, 0xFFFFFFFE, memory_order_release);
  }
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit(v8, 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingBaseName((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v10, a2);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F7C0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetLocalBinding(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  uint64_t v4 = (int *)(a2 + 12);
  int v5 = (int *)(a2 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
  int v19 = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingRel(this, (uint64_t)&v14);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v14, v6)&& pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v14, (uint64_t *)&v19)&& v19 != v20)
  {
    uint64_t v7 = sub_216D563F8(&v14);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingBaseName(v7, (uint64_t)&v9);
    sub_216D0162C((uint64_t)&v14, &v10);
    char v8 = v19;
    sub_216981010(&v12, v19);
    sub_21698105C(&v13, v8 + 1);
    if (&v9 != (uint64_t *)a2)
    {
      if ((*(void *)a2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)a2 = v9;
      uint64_t v9 = 0;
    }
    sub_21697DE94(v5, &v10);
    sub_21697DEEC(v4, &v11);
    sub_21697DE94((int *)(a2 + 16), &v12);
    sub_21697DEEC((int *)(a2 + 20), &v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_21697C414(&v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_21697C414(&v10);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
  uint64_t v14 = (void **)&v19;
  sub_216981168(&v14);
}

void sub_216F7C308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D33F64((uint64_t)&a12);
  a9 = (unint64_t)&a16;
  sub_216981168((void ***)&a9);
  sub_216F7BBB0(v16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::FindBindingsWithInheritance(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t *a2@<X8>)
{
  long long v54 = 0uLL;
  unint64_t v55 = 0;
  memset(v53, 0, sizeof(v53));
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B939C8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v29 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_267B939C8);
    if (v29)
    {
      dword_267B939C0 = pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(v29);
      __cxa_guard_release(&qword_267B939C8);
    }
  }
  if (dword_267B939C0 == 2)
  {
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_216D16CFC((uint64_t)&v48, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::FindBindingsWithInheritanceForPrim(v5, (uint64_t *)&v41);
    sub_216F7EC98((void **)&v54);
    long long v54 = v41;
    unint64_t v55 = v42;
    unint64_t v42 = 0;
    long long v41 = 0uLL;
    uint64_t v36 = (void **)&v41;
    sub_216F7EBA0(&v36);
    if ((v52 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
    sub_21697C414(&v50);
    if (v49) {
      sub_216D16E0C(v49);
    }
    if ((void)v54 != *((void *)&v54 + 1))
    {
      *(_OWORD *)a2 = v54;
      a2[2] = v55;
LABEL_70:
      unint64_t v55 = 0;
      long long v54 = 0uLL;
      goto LABEL_71;
    }
LABEL_14:
    uint64_t v30 = a2;
    sub_216D16CFC((uint64_t)&v48, (uint64_t *)this + 1, (_DWORD *)this + 4);
    while ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v48, v6) & 1) != 0)
    {
      uint64_t v45 = 0;
      unint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F7A450();
      if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)&v48, EmptyString, v44);
      uint64_t v10 = v44[0];
      uint64_t v9 = v44[1];
      while (v10 != v9)
      {
        LODWORD(v41) = *(_DWORD *)v10;
        uint64_t v11 = *(void *)(v10 + 8);
        *((void *)&v41 + 1) = v11;
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 48), 1uLL, memory_order_relaxed);
        }
        sub_216981010(&v42, (_DWORD *)(v10 + 16));
        sub_21698105C((_DWORD *)&v42 + 1, (_DWORD *)(v10 + 20));
        uint64_t v12 = *(void *)(v10 + 24);
        uint64_t v43 = v12;
        if ((v12 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v43 &= 0xFFFFFFFFFFFFFFF8;
        }
        sub_216D6B8C4((uint64_t)&v41, (uint64_t)&v36);
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v36, v13))
        {
          uint64_t v15 = (uint64_t *)*((void *)&v54 + 1);
          for (uint64_t i = (uint64_t *)v54; i != v15; i += 3)
          {
            pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v36, (pxrInternal__aapl__pxrReserved__::TfToken *)&v31);
            uint64_t v16 = *i;
            int v17 = (atomic_uint *)(v31 & 0xFFFFFFFFFFFFFFF8);
            if ((v31 & 7) != 0) {
              atomic_fetch_add_explicit(v17, 0xFFFFFFFE, memory_order_release);
            }
            if ((atomic_uint *)(v16 & 0xFFFFFFFFFFFFFFF8) == v17) {
              goto LABEL_43;
            }
          }
          int v19 = v45;
          for (uint64_t j = v46; j != v19; sub_216981128((uint64_t)&v47, j))
            j -= 2;
          unint64_t v46 = v19;
          if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36, (uint64_t *)&v45)&& v45 != v46)
          {
            pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v36, (pxrInternal__aapl__pxrReserved__::TfToken *)&v31);
            sub_216D0162C((uint64_t)&v36, &v32);
            int v20 = v45;
            sub_216981010(&v34, v45);
            sub_21698105C(&v35, v20 + 1);
            uint64_t v21 = *((void *)&v54 + 1);
            if (*((void *)&v54 + 1) >= v55)
            {
              uint64_t v22 = sub_216F7ED08((uint64_t *)&v54, &v31);
            }
            else
            {
              sub_216F7EE14((uint64_t)&v55, *((uint64_t *)&v54 + 1), &v31);
              uint64_t v22 = v21 + 24;
            }
            *((void *)&v54 + 1) = v22;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v35);
            sub_21697C414(&v34);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
            sub_21697C414(&v32);
            if ((v31 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
        }
LABEL_43:
        if ((v40 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
        sub_21697C414(&v38);
        if (v37) {
          sub_216D16E0C(v37);
        }
        if ((v43 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
        sub_21697C414(&v42);
        if (*((void *)&v41 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v41 + 1));
        }
        v10 += 32;
      }
      *(void *)&long long v41 = v44;
      sub_216D3BBE0((void ***)&v41);
      *(void *)&long long v41 = &v45;
      sub_216981168((void ***)&v41);
      sub_216D6B1F8((uint64_t)&v48, (uint64_t)&v41);
      LODWORD(v48) = v41;
      long long v23 = (atomic_ullong *)*((void *)&v41 + 1);
      *((void *)&v41 + 1) = 0;
      unint64_t v24 = v49;
      uint64_t v49 = v23;
      if (v24) {
        sub_216D16E0C(v24);
      }
      sub_21697DE94(&v50, (int *)&v42);
      sub_21697DEEC(&v51, (int *)&v42 + 1);
      if ((v52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v52 = v43;
      uint64_t v43 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
      sub_21697C414(&v42);
      if (*((void *)&v41 + 1)) {
        sub_216D16E0C(*((atomic_ullong **)&v41 + 1));
      }
    }
    if ((v52 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
    sub_21697C414(&v50);
    if (v49) {
      sub_216D16E0C(v49);
    }
    uint64_t v26 = *((void *)&v54 + 1);
    uint64_t v25 = v54;
    if ((void)v54 != *((void *)&v54 + 1) && dword_267B939C0 == 2)
    {
      uint64_t v27 = (pxrInternal__aapl__pxrReserved__ *)sub_216D16CFC((uint64_t)&v48, (uint64_t *)this + 1, (_DWORD *)this + 4);
      pxrInternal__aapl__pxrReserved__::_WarnOnDeprecatedAsset(v27, v28);
      if ((v52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
      sub_21697C414(&v50);
      if (v49) {
        sub_216D16E0C(v49);
      }
      uint64_t v26 = *((void *)&v54 + 1);
      uint64_t v25 = v54;
    }
    *uint64_t v30 = v25;
    v30[1] = v26;
    v30[2] = v55;
    goto LABEL_70;
  }
  if (dword_267B939C0 != 1) {
    goto LABEL_14;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_216D16CFC((uint64_t)&v48, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::FindBindingsWithInheritanceForPrim(v4, a2);
  if ((v52 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
  sub_21697C414(&v50);
  if (v49) {
    sub_216D16E0C(v49);
  }
LABEL_71:
  uint64_t v48 = (void **)v53;
  sub_216981168(&v48);
  uint64_t v48 = (void **)&v54;
  sub_216F7EBA0(&v48);
}

void sub_216F7C93C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_267B939C8);
  *(void *)(v1 - 168) = v1 - 136;
  sub_216981168((void ***)(v1 - 168));
  *(void *)(v1 - 168) = v1 - 112;
  sub_216F7EBA0((void ***)(v1 - 168));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::FindBindingsWithInheritanceForPrim(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v15 = *(_DWORD *)this;
  int v5 = (atomic_ullong *)*((void *)this + 1);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(v5 + 6, 1uLL, memory_order_relaxed);
  }
  sub_216981010(&v17, (_DWORD *)this + 4);
  sub_21698105C(&v18, (_DWORD *)this + 5);
  uint64_t v7 = *((void *)this + 3);
  uint64_t v19 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  while ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v15, v6) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetBindingsForPrim((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v15, a2, 1);
    sub_216D6B1F8((uint64_t)&v15, (uint64_t)&v10);
    int v15 = v10;
    char v8 = v11;
    uint64_t v11 = 0;
    uint64_t v9 = v16;
    uint64_t v16 = v8;
    if (v9) {
      sub_216D16E0C(v9);
    }
    sub_21697DE94(&v17, &v12);
    sub_21697DEEC(&v18, &v13);
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v19 = v14;
    uint64_t v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_21697C414(&v12);
    if (v11) {
      sub_216D16E0C(v11);
    }
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
}

void sub_216F7CBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216D16AD8((uint64_t)va);
  sub_216F7EBA0((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::FindBindingWithInheritance(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this@<X0>, uint64_t a2@<X8>)
{
  long long v41 = 0;
  unint64_t v42 = 0;
  uint64_t v43 = 0;
  *(void *)a2 = 0;
  uint64_t v4 = (int *)(a2 + 12);
  int v5 = (int *)(a2 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
  uint64_t v6 = *((void *)this + 3);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString) {
    EmptyString = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v8 = *((void *)EmptyString + 3);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v10 = (uint64_t)(v9 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v10 = (uint64_t)EmptyString;
  }
  uint64_t v11 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v12 = (uint64_t *)(v11 + 4);
  }
  else {
    int v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v10, (uint64_t)v12, (uint64_t)&v40);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16CFC((uint64_t)&v35, (uint64_t *)this + 1, (_DWORD *)this + 4);
  while (1)
  {
    uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v35, v13);
    if ((IsDefined & 1) == 0) {
      break;
    }
    int v15 = (atomic_uint *)*((void *)this + 3);
    uint64_t v30 = v15;
    if ((v15 & 7) != 0)
    {
      uint64_t v16 = (atomic_uint *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v16, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v30 = v16;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)IsDefined);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93938, v17);
    BOOL HasAPIInstance = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)&v35, SchemaInfo, (pxrInternal__aapl__pxrReserved__::TfToken *)&v30);
    if ((v30 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (HasAPIInstance)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v35, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (uint64_t)&v30);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v30, v20)&& pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdObject *)&v30, (uint64_t *)&v41)&& v41 != v42)
      {
        long long v23 = sub_216D563F8(&v30);
        pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingBaseName(v23, (uint64_t)&v25);
        sub_216D0162C((uint64_t)&v30, &v26);
        unint64_t v24 = v41;
        sub_216981010(&v28, v41);
        sub_21698105C(&v29, v24 + 1);
        if (&v25 != (uint64_t *)a2)
        {
          if ((*(void *)a2 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *(void *)a2 = v25;
          uint64_t v25 = 0;
        }
        sub_21697DE94(v5, &v26);
        sub_21697DEEC(v4, &v27);
        sub_21697DE94((int *)(a2 + 16), &v28);
        sub_21697DEEC((int *)(a2 + 20), &v29);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
        sub_21697C414(&v28);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
        sub_21697C414(&v26);
        if ((v25 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v34 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
        sub_21697C414(&v32);
        if (v31) {
          sub_216D16E0C(v31);
        }
        break;
      }
      if ((v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
      sub_21697C414(&v32);
      if (v31) {
        sub_216D16E0C(v31);
      }
    }
    sub_216D6B1F8((uint64_t)&v35, (uint64_t)&v30);
    LODWORD(v35) = v30;
    uint64_t v21 = v31;
    uint64_t v31 = 0;
    uint64_t v22 = v36;
    uint64_t v36 = v21;
    if (v22) {
      sub_216D16E0C(v22);
    }
    sub_21697DE94(&v37, &v32);
    sub_21697DEEC(&v38, &v33);
    if ((v39 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v39 = v34;
    uint64_t v34 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
    sub_21697C414(&v32);
    if (v31) {
      sub_216D16E0C(v31);
    }
  }
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
  sub_21697C414(&v37);
  if (v36) {
    sub_216D16E0C(v36);
  }
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v35 = (void **)&v41;
  sub_216981168(&v35);
}

void sub_216F7D070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216F7BBB0(v20);
  a20 = (void **)(v22 - 112);
  sub_216981168(&a20);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::HasLocalBindings(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B939D8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_267B939D8);
    if (v20)
    {
      dword_267B939D0 = pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(v20);
      __cxa_guard_release(&qword_267B939D8);
    }
  }
  if (dword_267B939D0 == 2)
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_216D16CFC((uint64_t)&v28, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(v6);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93938, v7);
    char HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)&v28, SchemaInfo);
    if ((v32 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    sub_21697C414(&v30);
    if (v29) {
      sub_216D16E0C(v29);
    }
    if (HasAPI) {
      return 1;
    }
  }
  else if (dword_267B939D0 == 1)
  {
    long long v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_216D16CFC((uint64_t)&v28, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(v2);
    uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93938, v3);
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)&v28, v4);
    if ((v32 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    sub_21697C414(&v30);
    if (v29) {
      sub_216D16E0C(v29);
    }
    return v5;
  }
  uint64_t v10 = (uint64_t *)((char *)this + 8);
  uint64_t v11 = (_DWORD *)((char *)this + 16);
  sub_216D16CFC((uint64_t)&v28, v10, v11);
  int v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F7A450();
  if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)&v28, EmptyString, &v26);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
  sub_21697C414(&v30);
  if (v29) {
    sub_216D16E0C(v29);
  }
  uint64_t v14 = v26;
  uint64_t v15 = v27;
  if (v26 == v27)
  {
LABEL_29:
    uint64_t v5 = 0;
  }
  else
  {
    while (1)
    {
      sub_216D6B8C4(v14, (uint64_t)&v28);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v28, v16))
      {
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v28, v17))break; {
      }
        }
      if ((v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
      sub_21697C414(&v30);
      if (v29) {
        sub_216D16E0C(v29);
      }
      v14 += 32;
      if (v14 == v15) {
        goto LABEL_29;
      }
    }
    if (dword_267B939D0 == 2)
    {
      sub_216D16CFC((uint64_t)v21, v10, v11);
      pxrInternal__aapl__pxrReserved__::_WarnOnDeprecatedAsset((pxrInternal__aapl__pxrReserved__ *)v21, v18);
      if ((v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
      sub_21697C414(&v23);
      if (v22) {
        sub_216D16E0C(v22);
      }
    }
    if ((v32 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    sub_21697C414(&v30);
    if (v29) {
      sub_216D16E0C(v29);
    }
    uint64_t v5 = 1;
  }
  int v28 = (void **)&v26;
  sub_216D3BBE0(&v28);
  return v5;
}

void sub_216F7D474(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::HasLocalBindingsForPrim(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(this);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93938, v3);

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)this, SchemaInfo);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Bind(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v5 = this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B939E8, memory_order_acquire) & 1) == 0)
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)__cxa_guard_acquire(&qword_267B939E8);
    if (this)
    {
      dword_267B939E0 = pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(this);
      __cxa_guard_release(&qword_267B939E8);
    }
  }
  if (dword_267B939E0 == 2)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_216D16CFC((uint64_t)&v21, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(v7);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93938, v8);
    BOOL HasAPIInstance = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)&v21, SchemaInfo, a2);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
    sub_21697C414(&v23);
    this = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v22;
    if (v22) {
      sub_216D16E0C(v22);
    }
    if (HasAPIInstance)
    {
      sub_216D16CFC((uint64_t)v16, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
      pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v16, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v21);
      uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v21, a3);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v21);
      if ((v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_21697C414(&v18);
      this = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v17;
      if (v17) {
        sub_216D16E0C(v17);
      }
      goto LABEL_18;
    }
  }
  else if (dword_267B939E0 == 1)
  {
    sub_216D16CFC((uint64_t)v16, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v16, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v21);
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v21, a3);
    pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v21);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_21697C414(&v18);
    if (v17) {
      sub_216D16E0C(v17);
    }
    return v6;
  }
  uint64_t v6 = 0;
LABEL_18:
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetCoordSysRelationshipName((uint64_t)EmptyString, (uint64_t)&v15);
  sub_216D16CFC((uint64_t)&v21, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v15, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v16);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
  sub_21697C414(&v23);
  if (v22) {
    sub_216D16E0C(v22);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v16, v12))
  {
    if (dword_267B939E0 == 2)
    {
      uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfPath *)"usdShade/coordSysAPI.cpp";
      uint64_t v22 = (atomic_ullong *)"_WarnOnUseOfDeprecatedNonAppliedAPI";
      uint64_t v23 = 297;
      unint64_t v24 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::_WarnOnUseOfDeprecatedNonAppliedAPI(const char *)";
      char v25 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v21, (pxrInternal__aapl__pxrReserved__ *)"Using deprecated method (%s) from non-applied UsdShadeCoordSysAPI. UsdShadeCoordSysAPI schema has been updated to be a multi-apply API.", v13, "UsdShadeCoordSysAPI::Bind");
    }
    sub_216ABE8A8(&v21, 1uLL, a3);
    uint64_t v6 = v6 | pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v16, &v21);
    uint64_t v26 = &v21;
    sub_216981168((void ***)&v26);
  }
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_21697C414(&v18);
  if (v17) {
    sub_216D16E0C(v17);
  }
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v6;
}

void sub_216F7D898(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Bind(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::CreateBindingRel(this, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v7);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v7, v3))
  {
    sub_216ABE8A8(v6, 1uLL, a2);
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v7, v6);
    int v12 = v6;
    sub_216981168((void ***)&v12);
  }
  else
  {
    uint64_t v4 = 0;
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  return v4;
}

void sub_216F7DA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *(void *)(v5 - 24) = v4;
  sub_216981168((void ***)(v5 - 24));
  sub_216D33F64((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetCoordSysRelationshipName(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F7A450();
  if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v6 = EmptyString[1];
  }
  uint64_t v7 = &v14;
  sub_2167940B4((uint64_t)&v14, v6 + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)EmptyString + 23) >= 0) {
      uint64_t v8 = EmptyString;
    }
    else {
      uint64_t v8 = (const void *)*EmptyString;
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 58;
  int v9 = *(char *)(a1 + 23);
  if (v9 >= 0) {
    int v10 = (const std::string::value_type *)a1;
  }
  else {
    int v10 = *(const std::string::value_type **)a1;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a1 + 8);
  }
  int v12 = std::string::append(&v14, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v16 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_216F7DB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::ApplyAndBind(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v7, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v12);
  return v5;
}

void sub_216F7DC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::ClearBinding(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3)
{
  uint64_t v5 = this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B939F8, memory_order_acquire) & 1) == 0)
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)__cxa_guard_acquire(&qword_267B939F8);
    if (this)
    {
      dword_267B939F0 = pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(this);
      __cxa_guard_release(&qword_267B939F8);
    }
  }
  if (dword_267B939F0 == 2)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_216D16CFC((uint64_t)&v21, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(v7);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93938, v8);
    BOOL HasAPIInstance = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)&v21, SchemaInfo, a2);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
    sub_21697C414(&v23);
    this = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v22;
    if (v22) {
      sub_216D16E0C(v22);
    }
    if (HasAPIInstance)
    {
      sub_216D16CFC((uint64_t)v16, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
      pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v16, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v21);
      uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::ClearBinding((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v21, a3);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v21);
      if ((v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_21697C414(&v18);
      this = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v17;
      if (v17) {
        sub_216D16E0C(v17);
      }
      goto LABEL_18;
    }
  }
  else if (dword_267B939F0 == 1)
  {
    sub_216D16CFC((uint64_t)v16, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v16, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v21);
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::ClearBinding((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v21, a3);
    pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v21);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
    sub_21697C414(&v18);
    if (v17) {
      sub_216D16E0C(v17);
    }
    return v6;
  }
  uint64_t v6 = 0;
LABEL_18:
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetCoordSysRelationshipName((uint64_t)EmptyString, (uint64_t)&v15);
  sub_216D16CFC((uint64_t)&v21, (uint64_t *)v5 + 1, (_DWORD *)v5 + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v15, (uint64_t)v16);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
  sub_21697C414(&v23);
  if (v22) {
    sub_216D16E0C(v22);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v16, v12))
  {
    if (dword_267B939F0 == 2)
    {
      uint64_t v21 = "usdShade/coordSysAPI.cpp";
      uint64_t v22 = (atomic_ullong *)"_WarnOnUseOfDeprecatedNonAppliedAPI";
      uint64_t v23 = 297;
      unint64_t v24 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::_WarnOnUseOfDeprecatedNonAppliedAPI(const char *)";
      char v25 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v21, (pxrInternal__aapl__pxrReserved__ *)"Using deprecated method (%s) from non-applied UsdShadeCoordSysAPI. UsdShadeCoordSysAPI schema has been updated to be a multi-apply API.", v13, "UsdShadeCoordSysAPI::ClearBinding");
    }
    uint64_t v6 = v6 | pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v16, a3);
  }
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_21697C414(&v18);
  if (v17) {
    sub_216D16E0C(v17);
  }
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v6;
}

void sub_216F7DF8C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::ClearBinding(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, int a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetBindingRel(this, (uint64_t)&v6);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v6, v3))uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v6, a2); {
  else
  }
    uint64_t v4 = 0;
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  return v4;
}

void sub_216F7E0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::BlockBinding(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93A08, memory_order_acquire) & 1) == 0)
  {
    this = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)__cxa_guard_acquire(&qword_267B93A08);
    if (this)
    {
      dword_267B93A00 = pxrInternal__aapl__pxrReserved__::_UsdShadeCoordSysAPIMultiApplyChecker(this);
      __cxa_guard_release(&qword_267B93A08);
    }
  }
  if (dword_267B93A00 == 2)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)sub_216D16CFC((uint64_t)&v19, (uint64_t *)v3 + 1, (_DWORD *)v3 + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::_GetStaticTfType(v5);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93938, v6);
    BOOL HasAPIInstance = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPIInstance((uint64_t)&v19, SchemaInfo, a2);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
    sub_21697C414(&v21);
    this = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v20;
    if (v20) {
      sub_216D16E0C(v20);
    }
    if (HasAPIInstance)
    {
      sub_216D16CFC((uint64_t)v14, (uint64_t *)v3 + 1, (_DWORD *)v3 + 4);
      pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v14, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v19);
      uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::BlockBinding((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v19);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v19);
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      sub_21697C414(&v16);
      this = (pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v15;
      if (v15) {
        sub_216D16E0C(v15);
      }
      goto LABEL_18;
    }
  }
  else if (dword_267B93A00 == 1)
  {
    sub_216D16CFC((uint64_t)v14, (uint64_t *)v3 + 1, (_DWORD *)v3 + 4);
    pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::Apply((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)v14, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v19);
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::BlockBinding((pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *)&v19);
    pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v19);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_21697C414(&v16);
    if (v15) {
      sub_216D16E0C(v15);
    }
    return v4;
  }
  uint64_t v4 = 0;
LABEL_18:
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::GetCoordSysRelationshipName((uint64_t)EmptyString, (uint64_t)&v13);
  sub_216D16CFC((uint64_t)&v19, (uint64_t *)v3 + 1, (_DWORD *)v3 + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v14);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
  sub_21697C414(&v21);
  if (v20) {
    sub_216D16E0C(v20);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v14, v10))
  {
    if (dword_267B93A00 == 2)
    {
      int v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)"usdShade/coordSysAPI.cpp";
      uint64_t v20 = (atomic_ullong *)"_WarnOnUseOfDeprecatedNonAppliedAPI";
      uint64_t v21 = 297;
      unint64_t v22 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::_WarnOnUseOfDeprecatedNonAppliedAPI(const char *)";
      char v23 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v19, (pxrInternal__aapl__pxrReserved__ *)"Using deprecated method (%s) from non-applied UsdShadeCoordSysAPI. UsdShadeCoordSysAPI schema has been updated to be a multi-apply API.", v11, "UsdShadeCoordSysAPI::BlockBinding");
    }
    int v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v4 = v4 | pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v14, &v19);
    unint64_t v24 = &v19;
    sub_216981168((void ***)&v24);
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v4;
}

void sub_216F7E418(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::BlockBinding(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::CreateBindingRel(this, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v5);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v5, v1))
  {
    memset(v4, 0, sizeof(v4));
    uint64_t v2 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v5, v4);
    uint64_t v10 = v4;
    sub_216981168((void ***)&v10);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return v2;
}

void sub_216F7E570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *(void *)(v5 - 24) = v4;
  sub_216981168((void ***)(v5 - 24));
  sub_216D33F64((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI::CanContainPropertyName(pxrInternal__aapl__pxrReserved__::UsdShadeCoordSysAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    uint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)v3 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v4 = (uint64_t *)((*((void *)v3 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  if (*((char *)v4 + 23) >= 0) {
    uint64_t v5 = (const char *)v4;
  }
  else {
    uint64_t v5 = (const char *)*v4;
  }
  int v6 = *((char *)EmptyString + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v7 = EmptyString[1];
  }
  size_t v8 = strlen(v5);
  if (v7 < v8) {
    return 0;
  }
  size_t v10 = v8;
  if (v6 >= 0) {
    uint64_t v11 = (const char *)EmptyString;
  }
  else {
    uint64_t v11 = (const char *)*EmptyString;
  }
  return strncmp(v11, v5, v10) == 0;
}

void sub_216F7E788(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216F7E7C8()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F7E8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216F7E8F8(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  int v19 = a1 + 2;
  if (v11) {
    int v12 = (char *)sub_2168707F4(v9, v11);
  }
  else {
    int v12 = 0;
  }
  uint64_t v15 = v12;
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12[32 * v5];
  int v17 = v16;
  uint64_t v18 = &v12[32 * v11];
  *(void *)sub_216D36868(v16, a2, a3) = &unk_26C76DA78;
  int v17 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v17 + 32);
  sub_216F7EA04(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216D3788C((uint64_t)&v15);
  return v13;
}

void sub_216F7E9F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D3788C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F7EA04(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216F7EA7C((int)a1 + 16, a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216F7EA7C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        sub_216F7EB10(a1, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(i + a7), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(i + a3)))
  {
    i -= 32;
  }
  return a6;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_216F7EB10(int a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, a3);
  *(void *)uint64_t result = &unk_26C767760;
  uint64_t v5 = *((void *)a3 + 3);
  *((void *)result + 3) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)result + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)uint64_t result = &unk_26C76DA78;
  return result;
}

void sub_216F7EBA0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 24;
        sub_216F7EC38((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_216F7EC38(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_21697C414((_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 12));
  uint64_t result = sub_21697C414((_DWORD *)(a2 + 8));
  if ((*(void *)a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216F7EC98(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 24;
        sub_216F7EC38((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_216F7ED08(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  std::string v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_216782ED8((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  unint64_t v11 = &v7[24 * v3];
  uint64_t v13 = &v7[24 * v6];
  sub_216F7EE14((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  int v12 = v11 + 24;
  sub_216F7EEA0(a1, &v10);
  uint64_t v8 = a1[1];
  sub_216F7F0E4(&v10);
  return v8;
}

void sub_216F7EE00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F7F0E4((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216F7EE14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *(void *)a2 = *a3;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216981010((_DWORD *)(a2 + 8), (_DWORD *)a3 + 2);
  sub_21698105C((_DWORD *)(a2 + 12), (_DWORD *)a3 + 3);
  sub_216981010((_DWORD *)(a2 + 16), (_DWORD *)a3 + 4);

  return sub_21698105C((_DWORD *)(a2 + 20), (_DWORD *)a3 + 5);
}

uint64_t sub_216F7EEA0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216F7EF18((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216F7EF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 24;
      sub_216F7EFD0(a1, v7 - 24, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 24;
      *((void *)&v16 + 1) -= 24;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216F7F058((uint64_t)v13);
  return v11;
}

_DWORD *sub_216F7EFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (_DWORD *)(a3 + 20);
  *(void *)a2 = *(void *)a3;
  uint64_t v6 = (_DWORD *)(a2 + 12);
  *(void *)a3 = 0;
  uint64_t v7 = (_DWORD *)(a3 + 12);
  sub_21697D878((_DWORD *)(a2 + 8), (_DWORD *)(a3 + 8));
  sub_21697D8B4(v6, v7);
  sub_21697D878((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));

  return sub_21697D8B4((_DWORD *)(a2 + 20), v5);
}

uint64_t sub_216F7F058(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216F7F090((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216F7F090(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216F7EC38(v3, v1);
      v1 += 24;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216F7F0E4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216F7F118(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 24;
      uint64_t result = sub_216F7EC38(v4, v1 - 24);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v4 = sub_216D563F8(this);
  if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_216778F24(&__str, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)EmptyString;
    __str.__r_.__value_.__r.__words[2] = EmptyString[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v7) {
    uint64_t v7 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)v7 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v8 = (uint64_t *)((*((void *)v7 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  if (*((char *)v8 + 23) >= 0) {
    uint64_t v9 = (const char *)v8;
  }
  else {
    uint64_t v9 = (const char *)*v8;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  size_t v11 = strlen(v9);
  if (size >= v11
    && ((size_t v12 = v11, (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (p_str = &__str)
      : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
        !strncmp((const char *)p_str, v9, v12)))
  {
    int v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v17) {
      int v17 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    if ((*((void *)v17 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v18 = (uint64_t *)((*((void *)v17 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      uint64_t v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
    }
    if (*((char *)v18 + 23) < 0) {
      std::string::size_type v19 = v18[1];
    }
    else {
      std::string::size_type v19 = *((unsigned __int8 *)v18 + 23);
    }
    std::string::basic_string(&v20, &__str, v19, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v22);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    char v14 = sub_216D563F8(this);
    long long v15 = *(atomic_uint **)v14;
    *a2 = *(atomic_uint **)v14;
    if ((v15 & 7) != 0)
    {
      long long v16 = (atomic_uint *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v16, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v16;
      }
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_216F7F3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::UsdShadeInput(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a4)
{
  *(_DWORD *)a1 = 3;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (int *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(void *)(a1 + 24) = 0;
  uint64_t v9 = *a3;
  if ((*a3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v9 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString) {
    EmptyString = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)EmptyString + 10) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    size_t v11 = (const void **)((*((void *)EmptyString + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    size_t v11 = (const void **)EmptyString;
  }
  size_t v12 = (atomic_uint *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v13 = (uint64_t *)(v12 + 4);
  }
  else {
    uint64_t v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v11, (const void **)v13, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v28);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit(v12, 0xFFFFFFFE, memory_order_release);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, (uint64_t)&__p);
    *(_DWORD *)a1 = __p;
    long long v15 = v24;
    unint64_t v24 = 0;
    long long v16 = *(atomic_ullong **)(a1 + 8);
    *(void *)(a1 + 8) = v15;
    if (v16) {
      sub_216D16E0C(v16);
    }
    sub_21697DE94(v8, &v25);
    sub_21697DEEC((int *)(a1 + 20), &v26);
    if (&__p == (void **)a1)
    {
      uint64_t v18 = v27;
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 24);
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v18 = 0;
      *(void *)(a1 + 24) = v27;
      uint64_t v27 = 0;
    }
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
    sub_21697C414(&v25);
    if (v24) {
      sub_216D16E0C(v24);
    }
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a1, v14) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)a2, &v28, a4, 0, 0, (uint64_t)&__p);
    *(_DWORD *)a1 = __p;
    std::string::size_type v19 = v24;
    unint64_t v24 = 0;
    std::string v20 = *(atomic_ullong **)(a1 + 8);
    *(void *)(a1 + 8) = v19;
    if (v20) {
      sub_216D16E0C(v20);
    }
    sub_21697DE94(v8, &v25);
    sub_21697DEEC((int *)(a1 + 20), &v26);
    if (&__p == (void **)a1)
    {
      if ((v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      uint64_t v21 = *(void *)(a1 + 24);
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)(a1 + 24) = v27;
      uint64_t v27 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
    sub_21697C414(&v25);
    if (v24) {
      sub_216D16E0C(v24);
    }
  }
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216F7F6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D2EDA0(v17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2);
  if (result)
  {
    v7.n128_f64[0] = a3;
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::Get((uint64_t)a1, a2, v7);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v3 = sub_216F7F810();
  sub_216D1CF30((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v3 + 8));
}

unint64_t sub_216F7F810()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B93A10);
  if (!v0)
  {
    unint64_t v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "connectability", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "renderType", 0);
    unint64_t v3 = *(atomic_uint **)v0;
    long long v15 = v3;
    if ((v3 & 7) != 0)
    {
      uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        long long v15 = v4;
      }
    }
    uint64_t v5 = (atomic_uint *)*v2;
    long long v16 = v5;
    if ((v5 & 7) != 0)
    {
      long long v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        long long v16 = v6;
      }
    }
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    uint64_t v13 = (void **)(v0 + 16);
    char v14 = 0;
    __n128 v7 = (char *)operator new(0x10uLL);
    uint64_t v8 = 0;
    *((void *)v0 + 2) = v7;
    *((void *)v0 + 3) = v7;
    *((void *)v0 + 4) = v7 + 16;
    do
    {
      uint64_t v9 = (&v15)[v8];
      *(void *)&v7[v8 * 8] = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v7[v8 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v8;
    }
    while (v8 != 2);
    *((void *)v0 + 3) = v7 + 16;
    for (uint64_t i = 1; i != -1; --i)
    {
      size_t v11 = (&v15)[i];
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v12 = 0;
    atomic_compare_exchange_strong(&qword_267B93A10, (unint64_t *)&v12, (unint64_t)v0);
    if (v12)
    {
      uint64_t v13 = (void **)(v0 + 16);
      sub_216889A04(&v13);
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B93A10);
    }
  }
  return (unint64_t)v0;
}

void sub_216F7F9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetRenderType@<W0>(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  unint64_t v4 = sub_216F7F810();
  uint64_t v6 = 0;
  BOOL result = sub_216D1D1CC((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v4 + 8), (uint64_t)a2, &v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::HasRenderType(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(sub_216F7F810() + 8);

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, v2);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v5 = 0;
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    unint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  __p[0] = 0;
  sub_216D241E4((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 168));
}

void sub_216F7FCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  sub_2168EBBB8(&a19, 0);
  sub_216BA5BB8(v19);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    unint64_t v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  sub_216928738((uint64_t)v6);
  return sub_2168EE084((uint64_t)v6);
}

void sub_216F7FE14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetSdrMetadata(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetSdrMetadataByKey(result);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetSdrMetadataByKey(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2) {
    uint64_t v2 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  sub_216D24A4C(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v2 + 168));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::HasSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2) {
    uint64_t v2 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v2 + 168));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::HasSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    unint64_t v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::ClearSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2) {
    uint64_t v2 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v2 + 168));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::ClearSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    unint64_t v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2);
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this);
    if (result)
    {
      unint64_t v4 = sub_216D563F8(this);
      if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
      }
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v6) {
        uint64_t v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      if ((*((void *)v6 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v7 = (uint64_t *)((*((void *)v6 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      if (*((char *)v7 + 23) >= 0) {
        uint64_t v8 = (const char *)v7;
      }
      else {
        uint64_t v8 = (const char *)*v7;
      }
      int v9 = *((char *)EmptyString + 23);
      if (v9 >= 0) {
        size_t v10 = *((unsigned __int8 *)EmptyString + 23);
      }
      else {
        size_t v10 = EmptyString[1];
      }
      size_t v11 = strlen(v8);
      if (v10 >= v11)
      {
        size_t v12 = v11;
        if (v9 >= 0) {
          uint64_t v13 = (const char *)EmptyString;
        }
        else {
          uint64_t v13 = (const char *)*EmptyString;
        }
        return strncmp(v13, v8, v12) == 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInterfaceInputName(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2) {
    uint64_t v2 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)v2 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)v2 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    unint64_t v4 = (const char *)EmptyString;
  }
  else {
    unint64_t v4 = (const char *)*EmptyString;
  }
  int v5 = *(char *)(a1 + 23);
  if (v5 >= 0) {
    size_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v6 = *(void *)(a1 + 8);
  }
  size_t v7 = strlen(v4);
  if (v6 < v7) {
    return 0;
  }
  size_t v9 = v7;
  if (v5 >= 0) {
    size_t v10 = (const char *)a1;
  }
  else {
    size_t v10 = *(const char **)a1;
  }
  return strncmp(v10, v4, v9) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetDocumentation(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::SetDocumentation((uint64_t)a1);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, void *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2))
  {
    return (void *)pxrInternal__aapl__pxrReserved__::UsdObject::GetDocumentation(this, a3);
  }
  else
  {
    return sub_216779094(a3, "");
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetDisplayGroup(pxrInternal__aapl__pxrReserved__::UsdProperty *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdProperty::SetDisplayGroup((uint64_t)a1);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetDisplayGroup@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, void *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2))
  {
    return (void *)pxrInternal__aapl__pxrReserved__::UsdProperty::GetDisplayGroup(this, a3);
  }
  else
  {
    return sub_216779094(a3, "");
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetConnectability(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v3 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_216F7F810();
  sub_216D1CF30((uint64_t)this, v3);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetConnectability@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v8 = 0;
  unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_216F7F810();
  uint64_t v9 = 0;
  unint64_t result = sub_216D1D1CC((uint64_t)this, v4, (uint64_t)&v8, &v9);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v8)
  {
    *a2 = v8;
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t result = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!result) {
      unint64_t result = (unint64_t)sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    size_t v6 = *(atomic_uint **)(result + 48);
    *a2 = v6;
    if ((v6 & 7) != 0)
    {
      size_t v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v7;
      }
    }
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216F80504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::ClearConnectability(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F7F810();

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetValueProducingAttribute@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeUtils *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes(a1, 0, (uint64_t)v23);
  if (v25 != 1)
  {
    if (!v25)
    {
      if (a2) {
        *a2 = 0;
      }
      *(_DWORD *)a3 = 3;
      *(void *)(a3 + 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
      *(void *)(a3 + 24) = 0;
      return sub_216F80A24((uint64_t)v23);
    }
    v21[0] = "usdShade/input.cpp";
    v21[1] = "GetValueProducingAttribute";
    v21[2] = 426;
    v21[3] = "UsdAttribute pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetValueProducingAttribute(UsdShadeAttributeType *) const";
    char v22 = 0;
    sub_216D0162C((uint64_t)a1, &v19);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v19);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v21, (pxrInternal__aapl__pxrReserved__ *)"More than one value producing attribute for shading input %s. GetValueProducingAttribute will only report the first one. Please use GetValueProducingAttributes to retrieve all.", v7, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_21697C414(&v19);
  }
  unsigned int v8 = v26;
  uint64_t v9 = v23[0];
  if (v26 >= 2) {
    size_t v10 = (void *)v23[0];
  }
  else {
    size_t v10 = v23;
  }
  *(_DWORD *)a3 = *(_DWORD *)v10;
  uint64_t v11 = v10[1];
  *(void *)(a3 + 8) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 48), 1uLL, memory_order_relaxed);
  }
  if (v8 >= 2) {
    size_t v12 = (uint64_t *)(v9 + 16);
  }
  else {
    size_t v12 = &v24;
  }
  if (v8 >= 2) {
    uint64_t v13 = (_DWORD *)(v9 + 20);
  }
  else {
    uint64_t v13 = (_DWORD *)&v24 + 1;
  }
  if (v8 >= 2) {
    char v14 = (void *)v9;
  }
  else {
    char v14 = v23;
  }
  sub_216981010((_DWORD *)(a3 + 16), v12);
  sub_21698105C((_DWORD *)(a3 + 20), v13);
  uint64_t v15 = v14[3];
  *(void *)(a3 + 24) = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a3 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (a2)
  {
    uint64_t v16 = sub_216D563F8((_DWORD *)a3);
    *a2 = pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetType(v16, v17);
  }
  return sub_216F80A24((uint64_t)v23);
}

void sub_216F80750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216F8079C(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * v7);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      size_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if ((v12[2] & 0xFFFFFFFFFFFFFFF8) == v7) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          size_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v14 = a1 + 16;
  uint64_t v15 = operator new(0x30uLL);
  v26[0] = v15;
  v26[1] = a1 + 16;
  void *v15 = 0;
  v15[1] = v8;
  uint64_t v16 = *a4;
  v15[2] = **a4;
  *uint64_t v16 = 0;
  void v15[4] = 0;
  v15[5] = 0;
  void v15[3] = 0;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  char v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v14;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9) {
          v24 %= v9;
        }
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  size_t v12 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BA75E8((uint64_t)v26, 0);
  return v12;
}

void sub_216F80A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA75E8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216F80A24(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 36) >= 2u) {
    free(*(void **)a1);
  }
  return a1;
}

void sub_216F80A64(uint64_t *a1)
{
  uint64_t v1 = a1;
  if (*((_DWORD *)a1 + 9) >= 2u) {
    uint64_t v1 = (uint64_t *)*a1;
  }
  uint64_t v2 = *((unsigned int *)a1 + 8);
  if (v2)
  {
    uint64_t v3 = 32 * v2;
    unint64_t v4 = v1 + 2;
    do
    {
      uint64_t v5 = v4[1];
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v4 + 1);
      sub_21697C414(v4);
      size_t v6 = (atomic_ullong *)*(v4 - 1);
      if (v6) {
        sub_216D16E0C(v6);
      }
      v4 += 4;
      v3 -= 32;
    }
    while (v3);
  }
}

void sub_216F80AF0()
{
  sub_216F851DC();
  sub_216779094(__p, "Material");
  sub_216F85308((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F80B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  size_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76DAD0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "usdShade/material.cpp";
    uint8x8_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdShadeMaterial pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint8x8_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76DAD0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F80D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93A20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93A20))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93A18, "Material");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93A18, &dword_216758000);
    __cxa_guard_release(&qword_267B93A20);
  }
  size_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93A18, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76DAD0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "usdShade/material.cpp";
    uint8x8_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdShadeMaterial pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define(const Usd"
                            "StagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint8x8_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76DAD0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F80F18(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93A30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93A30))
  {
    __cxa_guard_release(&qword_267B93A30);
  }
  return &qword_267B93A28;
}

void sub_216F80FC0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93A40, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)__cxa_guard_acquire(&qword_267B93A40);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(v2);
      byte_267B93A38 = sub_216D16508((char *)&qword_267B93A28, v3, v4);
      __cxa_guard_release(&qword_267B93A40);
    }
  }
  return byte_267B93A38;
}

void sub_216F81040(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  return &qword_267B93A28;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    uint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 144), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F81118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v8) {
    uint64_t v8 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetDisplacementAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    uint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 136), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F81280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateDisplacementAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v8) {
    uint64_t v8 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v8 + 136), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetVolumeAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    uint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 152), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F813E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateVolumeAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v8) {
    uint64_t v8 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v8 + 152), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93A60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93A60))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v3) {
      uint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v4 = *((void *)v3 + 18);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v5) {
      uint64_t v5 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v6 = *((void *)v5 + 17);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v7) {
      int v7 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v8 = *((void *)v7 + 19);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B93A48, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93A48, &dword_216758000);
    __cxa_guard_release(&qword_267B93A60);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93A80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93A80))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)1);
    sub_216F81780((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93A68, &dword_216758000);
    __cxa_guard_release(&qword_267B93A80);
  }
  if (v1) {
    return &qword_267B93A68;
  }
  else {
    return &qword_267B93A48;
  }
}

void sub_216F816FC(_Unwind_Exception *a1)
{
}

void *sub_216F81780(uint64_t **a1)
{
  qword_267B93A70 = 0;
  unk_267B93A78 = 0;
  qword_267B93A68 = 0;
  sub_216973388((char **)&qword_267B93A68, ((*(void *)algn_267B93A50 - qword_267B93A48) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93A68, (void *)qword_267B93A70, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93A68, (void *)qword_267B93A70, (uint64_t *)qword_267B93A48, *(uint64_t **)algn_267B93A50, (*(void *)algn_267B93A50 - qword_267B93A48) >> 3);
}

void sub_216F81818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetEditContextForVariant(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  int v7 = (uint64_t *)(a1 + 8);
  uint64_t v8 = (_DWORD *)(a1 + 16);
  sub_216D16CFC((uint64_t)v38, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v38, v9, &v36);
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10) {
    uint64_t v10 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)v10 + 15) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet((uint64_t)v38, (long long *)EmptyString, (uint64_t)v29);
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(&v36);
  EditTarget = (void *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v12);
  uint64_t v14 = EditTarget;
  uint64_t v15 = EditTarget[1];
  *(void *)&long long v48 = *EditTarget;
  *((void *)&v48 + 1) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216BBEE18(v49, (uint64_t)(EditTarget + 2));
  long long v50 = *(_OWORD *)(v14 + 7);
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    float v17 = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    float v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
  }
  float v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v29, (uint64_t)v17, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1);
  if (v18)
  {
    BOOL v19 = (*a2 & 0xFFFFFFFFFFFFFFF8) != 0
        ? (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16)
        : (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
    if (pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v29, v19))
    {
      pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditTarget((uint64_t)v29, a3, (uint64_t)&v43);
      unint64_t v20 = (atomic_uint *)*((void *)&v48 + 1);
      long long v48 = v43;
      *((void *)&v43 + 1) = 0;
      if (v20 && atomic_fetch_add_explicit(v20 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v20 + 8))(v20);
      }
      *(void *)&long long v43 = 0;
      unint64_t v21 = (_DWORD *)sub_216BBED8C((uint64_t)v49);
      sub_216BBFB70(v21, (uint64_t)&v44);
      long long v50 = v47;
      sub_216BBED8C((uint64_t)&v44);
      uint64_t v22 = *((void *)&v43 + 1);
      if (*((void *)&v43 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v43 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
    }
  }
  sub_216D16CFC((uint64_t)&v43, v7, v8);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v43, v23, &v27);
  sub_216EEA1BC(a4, (uint64_t)&v27, (uint64_t)&v48);
  uint64_t v24 = v28;
  if (v28 && atomic_fetch_add_explicit((atomic_uint *volatile)(v28 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
  sub_21697C414(&v44);
  if (*((void *)&v43 + 1)) {
    sub_216D16E0C(*((atomic_ullong **)&v43 + 1));
  }
  sub_216BBED8C((uint64_t)v49);
  uint64_t v25 = *((void *)&v48 + 1);
  if (*((void *)&v48 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v48 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  if (v35 < 0) {
    operator delete(__p);
  }
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
  sub_21697C414(&v31);
  if (v30) {
    sub_216D16E0C(v30);
  }
  uint64_t v26 = v37;
  if (v37 && atomic_fetch_add_explicit((atomic_uint *volatile)(v37 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  sub_21697C414(&v40);
  if (v39) {
    sub_216D16E0C(v39);
  }
}

void sub_216F81C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  sub_216D483F4(v4 - 160);
  sub_216EE9BF8((uint64_t)va);
  uint64_t v6 = v16;
  if (v16)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  sub_216D16AD8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetMaterialVariant(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    uint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)v3 + 15) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet((uint64_t)&v5, (long long *)EmptyString, a2);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216F81E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVariant(pxrInternal__aapl__pxrReserved__::UsdObject *a1, atomic_ullong **a2, uint64_t *a3)
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2))
  {
    uint64_t v7 = *a3;
    if (!*a3)
    {
      int v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v8) {
        int v8 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      uint64_t v7 = *((void *)v8 + 15);
    }
    if ((v7 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v7 &= 0xFFFFFFFFFFFFFFF8;
    }
    Stage = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v120);
    long long v118 = 0uLL;
    std::string::size_type v119 = 0;
    uint64_t v12 = a2[1];
    if (v12 == *a2)
    {
      p_p = (std::string *)"usdShade/material.cpp";
      int v127 = (atomic_uint *)"CreateMasterMaterialVariant";
      uint64_t v128 = 283;
      unint64_t v129 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVaria"
                               "nt(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
      LOBYTE(v130) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 1, (pxrInternal__aapl__pxrReserved__ *)"No material prims specified on which to operate.");
      goto LABEL_40;
    }
    uint64_t v111 = *a2;
    int v112 = v12;
    while (1)
    {
      if (v111 == v112)
      {
        unint64_t v40 = v7 & 0xFFFFFFFFFFFFFFF8;
        if ((v7 & 0xFFFFFFFFFFFFFFF8) != 0) {
          EmptyString = (uint64_t *)(v40 + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Stage);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet((uint64_t)a1, (long long *)EmptyString, (uint64_t)&v111);
        *(_OWORD *)int v110 = v118;
LABEL_58:
        BOOL v34 = v110[0] == v110[1];
        if (v110[0] != v110[1])
        {
          uint64_t v55 = sub_21686731C(v110, v53, v54);
          if (pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v111, v55, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)1))
          {
            uint64_t v58 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_21686731C(v110, v56, v57);
            pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v111, v58);
            *(_OWORD *)&v106.__r_.__value_.__l.__data_ = 0uLL;
            pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext((pxrInternal__aapl__pxrReserved__::UsdObject *)&v111, (uint64_t *)&v106, (uint64_t)&__p);
            pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(&p_p, &__p);
            sub_216BBED8C((uint64_t)&v124);
            __int16 v61 = v123;
            if (v123 && atomic_fetch_add_explicit(v123 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v61 + 8))(v61);
            }
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_
              && atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
            }
            std::string::size_type v63 = v106.__r_.__value_.__l.__size_;
            if (v106.__r_.__value_.__l.__size_
              && atomic_fetch_add_explicit((atomic_uint *volatile)(v106.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(std::string::size_type))(*(void *)v63 + 8))(v63);
            }
            for (long long i = *(_OWORD *)a2; ; sub_216F82DF8(&i))
            {
              if ((void)i == *((void *)&i + 1))
              {
                pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext((pxrInternal__aapl__pxrReserved__::UsdEditContext *)&p_p);
                sub_21686739C(v110);
                goto LABEL_58;
              }
              uint64_t v64 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216F82CFC((uint64_t *)&i, v59, v60);
              if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v64, v65) & 1) == 0) {
                break;
              }
              uint64_t v68 = sub_216F82D7C(&i, v66, v67);
              sub_216D0162C(*v68, (int *)&__p);
              sub_216D0162C((uint64_t)a1, (int *)&v106);
              BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v106);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v106.__r_.__value_.__r.__words + 1);
              sub_21697C414(&v106);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
              sub_21697C414(&__p);
              if (HasPrefix)
              {
                uint64_t v72 = *sub_216F82D7C(&i, v70, v71);
                int v73 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if (!v73) {
                  int v73 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                }
                if ((*((void *)v73 + 15) & 0xFFFFFFFFFFFFFFF8) != 0) {
                  int v74 = (uint64_t *)((*((void *)v73 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
                }
                else {
                  int v74 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v73);
                }
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet(v72, (long long *)v74, (uint64_t)&__p);
                uint64_t v92 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_21686731C(v110, v90, v91);
                pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&__p, v92);
                if (v125 < 0) {
                  operator delete(v124);
                }
                if ((v123 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v123 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p.__r_.__value_.__r.__words[2] + 1);
                sub_21697C414(&__p.__r_.__value_.__r.__words[2]);
                if (__p.__r_.__value_.__l.__size_) {
                  sub_216D16E0C((atomic_ullong *)__p.__r_.__value_.__l.__size_);
                }
              }
              else
              {
                int v75 = sub_216F82D7C(&i, v70, v71);
                int v76 = sub_216D2F758(*v75);
                uint64_t v79 = sub_216F82CFC((uint64_t *)&i, v77, v78);
                uint64_t v80 = sub_216D2F758(v79);
                sub_216981010(&v106, v80);
                long long v81 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21698105C((_DWORD *)v106.__r_.__value_.__r.__words + 1, (_DWORD *)v80 + 1);
                uint64_t v82 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v81);
                if (v106.__r_.__value_.__r.__words[0] != *v82)
                {
                  while ((pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v106) & 1) == 0)
                  {
                    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v106, &__p);
                    sub_21697DE94((int *)&v106, (int *)&__p);
                    sub_21697DEEC((int *)v106.__r_.__value_.__r.__words + 1, (int *)__p.__r_.__value_.__r.__words + 1);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
                    sub_21697C414(&__p);
                  }
                }
                sub_216D0162C((uint64_t)a1, (int *)&__p);
                pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v108, (pxrInternal__aapl__pxrReserved__::SdfPath *)v76, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v106, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, 1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
                sub_21697C414(&__p);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v106.__r_.__value_.__r.__words + 1);
                sub_21697C414(&v106);
                uint64_t v83 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(&v120);
                pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim(v83, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v108, (uint64_t)&v106);
                int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v106, v84);
                char v86 = IsDefined;
                if (IsDefined)
                {
                  uint64_t v87 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                  if (!v87) {
                    uint64_t v87 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                  }
                  if ((*((void *)v87 + 15) & 0xFFFFFFFFFFFFFFF8) != 0) {
                    uint64_t v88 = (uint64_t *)((*((void *)v87 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
                  }
                  else {
                    uint64_t v88 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v87);
                  }
                  pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet((uint64_t)&v106, (long long *)v88, (uint64_t)&__p);
                  uint64_t v95 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_21686731C(v110, v93, v94);
                  pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&__p, v95);
                  if (v125 < 0) {
                    operator delete(v124);
                  }
                  if ((v123 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v123 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p.__r_.__value_.__r.__words[2] + 1);
                  sub_21697C414(&__p.__r_.__value_.__r.__words[2]);
                  if (__p.__r_.__value_.__l.__size_) {
                    sub_216D16E0C((atomic_ullong *)__p.__r_.__value_.__l.__size_);
                  }
                }
                else
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdShade/material.cpp";
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"CreateMasterMaterialVariant";
                  __p.__r_.__value_.__r.__words[2] = 368;
                  int v123 = (atomic_uint *)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMate"
                                        "rialVariant(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
                  LOBYTE(v124) = 0;
                  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v108);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to create over for Material prim %s, so cannot set its materialVariant", Text);
                }
                if ((v107 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v106.__r_.__value_.__r.__words[2] + 1);
                sub_21697C414(&v106.__r_.__value_.__r.__words[2]);
                if (v106.__r_.__value_.__l.__size_) {
                  sub_216D16E0C((atomic_ullong *)v106.__r_.__value_.__l.__size_);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v108 + 1);
                sub_21697C414(&v108);
                if ((v86 & 1) == 0) {
                  goto LABEL_118;
                }
              }
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdShade/material.cpp";
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)"CreateMasterMaterialVariant";
            __p.__r_.__value_.__r.__words[2] = 347;
            int v123 = (atomic_uint *)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVa"
                                  "riant(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
            LOBYTE(v124) = 0;
            if (v40)
            {
              int v96 = (const char *)(v40 + 16);
              if (*(char *)(v40 + 39) < 0) {
                int v96 = *(const char **)v96;
              }
            }
            else
            {
              int v96 = "";
            }
            int v97 = (const char **)sub_216885718(v110);
            unsigned int v100 = *v97;
            if ((*v97)[23] < 0) {
              unsigned int v100 = *(const char **)v100;
            }
            char v101 = (pxrInternal__aapl__pxrReserved__::UsdObject **)sub_216F82D7C(&i, v98, v99);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetDescription(*v101, &v106);
            if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v102 = &v106;
            }
            else {
              int v102 = (std::string *)v106.__r_.__value_.__r.__words[0];
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Switching master variant %s to %s caused one or more material prims to expire.  First such: %s.", v96, v100, (const char *)v102);
            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v106.__r_.__value_.__l.__data_);
            }
LABEL_118:
            pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext((pxrInternal__aapl__pxrReserved__::UsdEditContext *)&p_p);
          }
          else
          {
            p_p = (std::string *)"usdShade/material.cpp";
            int v127 = (atomic_uint *)"CreateMasterMaterialVariant";
            uint64_t v128 = 330;
            unint64_t v129 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMateria"
                                     "lVariant(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
            LOBYTE(v130) = 0;
            uint64_t v103 = (const char **)sub_216885718(v110);
            int v104 = *v103;
            if ((*v103)[23] < 0) {
              int v104 = *(const char **)v104;
            }
            sub_216D0162C((uint64_t)a1, (int *)&__p);
            int v105 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to create Material variant %s on prim %s. Aborting master materialVariant creation.", v104, v105);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
            sub_21697C414(&__p);
          }
        }
        if (v117 < 0) {
          operator delete(v116);
        }
        if ((v115 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v115 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v114);
        sub_21697C414(&v113);
        if (v112) {
          sub_216D16E0C(v112);
        }
        goto LABEL_41;
      }
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216F82CFC((uint64_t *)&v111, v10, v11);
      if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v13, v14) & 1) == 0) {
        break;
      }
      float v17 = (pxrInternal__aapl__pxrReserved__::UsdObject **)sub_216F82D7C(&v111, v15, v16);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(*v17, v18, &p_p);
      uint64_t v19 = sub_216851B24((uint64_t)&v120);
      uint64_t v22 = sub_216851B24((uint64_t)&p_p);
      char v23 = v127;
      if (v127 && atomic_fetch_add_explicit(v127 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v23 + 8))(v23);
      }
      if (v19 != v22)
      {
        p_p = (std::string *)"usdShade/material.cpp";
        int v127 = (atomic_uint *)"CreateMasterMaterialVariant";
        uint64_t v128 = 297;
        unint64_t v129 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVar"
                                 "iant(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
        LOBYTE(v130) = 0;
        sub_216D0162C((uint64_t)a1, (int *)&__p);
        int v44 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
        long long v47 = sub_216F82D7C(&v111, v45, v46);
        long long v48 = sub_216D2F758(*v47);
        uint64_t v49 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v48);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 1, (pxrInternal__aapl__pxrReserved__ *)"All material prims to be controlled by masterPrim %s must originate on the same UsdStage as masterPrim.  Prim %s does not.", v44, v49);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p.__r_.__value_.__r.__words + 1);
        sub_21697C414(&__p);
        goto LABEL_40;
      }
      uint64_t v24 = *sub_216F82D7C(&v111, v20, v21);
      uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v25) {
        uint64_t v25 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      if ((*((void *)v25 + 15) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v26 = (uint64_t *)((*((void *)v25 + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v26 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v25);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet(v24, (long long *)v26, (uint64_t)&p_p);
      pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantNames((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&p_p, v27, &__p);
      if (v131 < 0) {
        operator delete(v130);
      }
      if ((v129 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v129 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v128 + 1);
      sub_21697C414(&v128);
      if (v127) {
        sub_216D16E0C((atomic_ullong *)v127);
      }
      int v30 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
      {
        p_p = (std::string *)"usdShade/material.cpp";
        int v127 = (atomic_uint *)"CreateMasterMaterialVariant";
        uint64_t v128 = 308;
        unint64_t v129 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVar"
                                 "iant(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
        LOBYTE(v130) = 0;
        long long v50 = sub_216F82D7C(&v111, v28, v29);
        uint64_t v51 = sub_216D2F758(*v50);
        uint64_t v52 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v51);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 1, (pxrInternal__aapl__pxrReserved__ *)"All Material prims to be switched by master materialVariant must actually possess a non-empty materialVariant themselves.  %s does not.", v52);
LABEL_38:
        p_p = &__p;
        sub_216782F20((void ***)&p_p);
        goto LABEL_40;
      }
      std::string::size_type v32 = *((void *)&v118 + 1);
      int v31 = (unsigned __int8 *)v118;
      if (*((void *)&v118 + 1) != (void)v118)
      {
        if (*((void *)&v118 + 1) - (void)v118 == __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0])
        {
          while (sub_2168513F8((uint64_t)&p_p, v31, v30))
          {
            v31 += 24;
            v30 += 24;
            if (v31 == (unsigned __int8 *)v32) {
              goto LABEL_35;
            }
          }
        }
        p_p = (std::string *)"usdShade/material.cpp";
        int v127 = (atomic_uint *)"CreateMasterMaterialVariant";
        uint64_t v128 = 319;
        unint64_t v129 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVar"
                                 "iant(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
        LOBYTE(v130) = 0;
        char v35 = sub_216F82D7C(&v111, v28, v29);
        uint64_t v36 = sub_216D2F758(*v35);
        uint64_t v37 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v36);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 1, (pxrInternal__aapl__pxrReserved__ *)"All Material prims to be switched by master materialVariant must possess the SAME material variants. %s has a different set of variants.", v37);
        goto LABEL_38;
      }
      long long v118 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[0] = v32;
      __p.__r_.__value_.__l.__size_ = v32;
      std::string::size_type v33 = v119;
      std::string::size_type v119 = __p.__r_.__value_.__r.__words[2];
      __p.__r_.__value_.__r.__words[2] = v33;
LABEL_35:
      p_p = &__p;
      sub_216782F20((void ***)&p_p);
      Stage = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F82DF8(&v111);
    }
    p_p = (std::string *)"usdShade/material.cpp";
    int v127 = (atomic_uint *)"CreateMasterMaterialVariant";
    uint64_t v128 = 289;
    unint64_t v129 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVariant"
                             "(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
    LOBYTE(v130) = 0;
    uint64_t v42 = (pxrInternal__aapl__pxrReserved__::UsdObject **)sub_216F82D7C(&v111, v15, v16);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetDescription(*v42, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v43 = &__p;
    }
    else {
      long long v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to process invalid material: %s", (const char *)v43);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_40:
    BOOL v34 = 0;
LABEL_41:
    p_p = (std::string *)&v118;
    sub_216782F20((void ***)&p_p);
    uint64_t v38 = v121;
    if (v121 && atomic_fetch_add_explicit((atomic_uint *volatile)(v121 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
    }
    if ((v7 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    p_p = (std::string *)"usdShade/material.cpp";
    int v127 = (atomic_uint *)"CreateMasterMaterialVariant";
    uint64_t v128 = 273;
    unint64_t v129 = (unint64_t)"static BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateMasterMaterialVariant"
                             "(const UsdPrim &, const std::vector<UsdPrim> &, const TfToken &)";
    LOBYTE(v130) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_p, 1, (pxrInternal__aapl__pxrReserved__ *)"MasterPrim is not a valid UsdPrim.");
    return 0;
  }
  return v34;
}

void sub_216F82A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F82CFC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::U"
            "sdPrim>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216F82D74()
{
}

void *sub_216F82D7C(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::U"
            "sdPrim>>::operator->() [T = const std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216F82DF8(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    _OWORD v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::UsdPrim>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::UsdPrim>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

uint64_t sub_216F82E78(uint64_t a1)
{
  sub_216BBED8C(a1 + 32);
  uint64_t v2 = *(atomic_uint **)(a1 + 24);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetBaseMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetBaseMaterialPath(this, &v4);
  sub_216F82FF4((pxrInternal__aapl__pxrReserved__::UsdProperty *)v6, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v4, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
  sub_21697C414(&v4);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
}

void sub_216F82FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  sub_216D16AD8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216F82FF4(pxrInternal__aapl__pxrReserved__::UsdProperty *a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2)
    || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    goto LABEL_14;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v10);
  int v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v10);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, a2, (uint64_t)&v12);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12);
  *(void *)a3 = &unk_26C76DAD0;
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
  uint64_t v8 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)a3 + 1);
  if (!v9
    || (*(unsigned char *)(v9 + 57) & 8) != 0
    || ((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *))(*(void *)a3 + 32))(a3) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph(a3);
LABEL_14:
    int v12 = 1;
    uint64_t v13 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v15);
    uint64_t v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12);
    *(void *)a3 = &unk_26C76DAD0;
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    if (v13) {
      sub_216D16E0C(v13);
    }
  }
}

void sub_216F831D4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetBaseMaterialPath(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, int *a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v4 = (uint64_t *)((char *)this + 8);
  int v5 = (_DWORD *)((char *)this + 16);
  sub_216D16CFC((uint64_t)v14, (uint64_t *)this + 1, (_DWORD *)this + 4);
  int v7 = (uint64_t *)sub_216D240F8((uint64_t)v14, v6);
  uint64_t v19 = &unk_26C76DBF8;
  uint64_t v20 = (atomic_ullong *)this;
  unint64_t v23 = (unint64_t)&v19;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::FindBaseMaterialPathInPrimIndex(v7, (uint64_t)&v19, a2);
  sub_216ABC260(&v19);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v15;
  if (v15) {
    sub_216D16E0C(v15);
  }
  if (*(void *)a2 != *pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v8))
  {
    sub_216D16CFC((uint64_t)&v19, v4, v5);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19, v9, &v12);
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v12);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (uint64_t)v14);
    uint64_t v11 = v13;
    if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_21697C414(&v21);
    if (v20) {
      sub_216D16E0C(v20);
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v16))
    {
      sub_216F83748((uint64_t)v14, (uint64_t)&v19);
      sub_216D0162C((uint64_t)&v19, (int *)&v12);
      sub_21697DE94(a2, (int *)&v12);
      sub_21697DEEC(a2 + 1, (int *)&v12 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
      sub_21697C414(&v12);
      if ((v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
      sub_21697C414(&v21);
      if (v20) {
        sub_216D16E0C(v20);
      }
    }
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_21697C414(&v16);
    if (v15) {
      sub_216D16E0C(v15);
    }
  }
}

void sub_216F834D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::FindBaseMaterialPathInPrimIndex@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange(a1, 6u, (uint64_t *)&v27);
  char v6 = v27;
  int v5 = v28;
  int v7 = v29;
  if (v27 == v29 && v28 == v30)
  {
LABEL_14:
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  else
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)((char *)v30 - 1);
    while (1)
    {
      uint64_t v10 = v5;
      v26[0] = v6;
      v26[1] = v5;
      if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26) == 6)
      {
        uint64_t ParentNode = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetParentNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26);
        uint64_t v13 = v12;
        pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode(v26);
        if (v13 == v15 && ParentNode == v14)
        {
          MapToParent = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToParent((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26);
          int v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(MapToParent);
          uint64_t v20 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate((pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)MapToParent, v18, v19);
          pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v20, v17, &v24);
          LODWORD(MapToParent) = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
          sub_21697C414(&v24);
          if (MapToParent)
          {
            Path = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v26);
            uint64_t v22 = *(void *)(a2 + 24);
            if (!v22) {
              sub_21683A7CC();
            }
            if ((*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v22 + 48))(v22, Path)) {
              break;
            }
          }
        }
      }
      int v5 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph *)((char *)v10 + 1);
      if (v6 == v7 && v9 == v10) {
        goto LABEL_14;
      }
    }
    sub_216981010(a3, Path);
    return sub_21698105C(a3 + 1, Path + 1);
  }
}

_DWORD *sub_216F83748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16)))
  {
    uint64_t v5 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v5 + 1);
    sub_216D16CFC(a2, (uint64_t *)(a1 + 8), &v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v5 + 1);
    return sub_21697C414(&v5);
  }
  else
  {
    *(_DWORD *)a2 = 1;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

void sub_216F83800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::SetBaseMaterialPath(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3, (uint64_t)v7);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v5 + 1);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    sub_216981010(&v14, a2);
    sub_21698105C(&v15, (_DWORD *)a2 + 1);
    uint64_t v3 = 0;
    int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v12 = &v3;
    char v13 = 0;
    uint64_t v3 = (atomic_ullong *)operator new(8uLL);
    int v4 = v3;
    uint64_t v5 = v3 + 1;
    int v4 = (atomic_ullong *)sub_216980F74((uint64_t)&v5, &v14, &v16, v3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    pxrInternal__aapl__pxrReserved__::UsdSpecializes::SetSpecializes(v7, &v3);
    uint64_t v12 = &v3;
    sub_216981168((void ***)&v12);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSpecializes::ClearSpecializes((pxrInternal__aapl__pxrReserved__::UsdSpecializes *)v7);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216F839A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216F83A2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F83A2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::SetBaseMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a2)
{
  sub_216D16CFC((uint64_t)v5, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v5, v3))
  {
    sub_216D0162C((uint64_t)v5, (int *)&v4);
  }
  else
  {
    uint64_t v4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v4 + 1);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::SetBaseMaterialPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v4 + 1);
  sub_21697C414(&v4);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216F83B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  sub_216D16AD8((uint64_t)va1);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ClearBaseMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  uint64_t v3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v3 + 1);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::SetBaseMaterialPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v3 + 1);
  return sub_21697C414(&v3);
}

void sub_216F83C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::HasBaseMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetBaseMaterialPath(this, &v3);
  BOOL v1 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v4);
  sub_21697C414(&v3);
  return v1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputSources(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath **a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = *a3;
  int v8 = a3[1];
  if (*a3 != v8)
  {
    char v9 = 0;
    do
    {
      int v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v10) {
        int v10 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      BOOL v11 = (*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 27) & 0xFFFFFFFFFFFFFFF8);
      sub_216F840AC(a2, v7, (uint64_t)&v35);
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v35, (uint64_t)v30);
      if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v30, v12))
      {
        char v13 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        if (!v13) {
          char v13 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        }
        if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 27) & 0xFFFFFFFFFFFFFFF8)
          && (pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthored((pxrInternal__aapl__pxrReserved__::UsdProperty *)v30) & 1) == 0)
        {
          *(void *)(a4 + 32) = 0x100000000;
LABEL_38:
          if ((v34 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          goto LABEL_40;
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes((pxrInternal__aapl__pxrReserved__::UsdShadeUtils *)v30, (const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)1, a4);
        unsigned int v14 = *(_DWORD *)(a4 + 32);
        if (v14 >= 2)
        {
          int v25 = "usdShade/material.cpp";
          uint64_t v26 = "_ComputeNamedOutputSources";
          uint64_t v27 = 537;
          uint64_t v28 = "UsdShadeAttributeVector pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputSources(c"
                "onst TfToken &, const TfTokenVector &) const";
          char v29 = 0;
          unint64_t v15 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
          if (v15)
          {
            uint64_t v16 = (const char *)(v15 + 16);
            if (*(char *)(v15 + 39) < 0) {
              uint64_t v16 = *(const char **)v16;
            }
          }
          else
          {
            uint64_t v16 = "";
          }
          unint64_t v17 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v17)
          {
            uint64_t v18 = (const char *)(v17 + 16);
            if (*(char *)(v17 + 39) < 0) {
              uint64_t v18 = *(const char **)v18;
            }
          }
          else
          {
            uint64_t v18 = "";
          }
          sub_216D1E2AC((uint64_t)a1, &v23);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v25, (pxrInternal__aapl__pxrReserved__ *)"Multiple connected sources for output %s:%s on material %s. Only the first will be consider as a terminal.", v20, v16, v18, Text);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
          sub_21697C414(&v23);
          unsigned int v14 = *(_DWORD *)(a4 + 32);
        }
        if (v14) {
          goto LABEL_38;
        }
        sub_216F80A24(a4);
      }
      if ((v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
      sub_21697C414(&v32);
      if (v31) {
        sub_216D16E0C(v31);
      }
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v9 |= v11;
      int v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
    }
    while (v7 != v8);
    if ((v9 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_31:
  int v21 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v21) {
    int v21 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  sub_216F840AC(a2, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v21 + 216), (uint64_t)&v35);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v35, (uint64_t)v30);
  if ((pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v30, v22) & 1) == 0)
  {
    int v25 = "usdShade/material.cpp";
    uint64_t v26 = "_ComputeNamedOutputSources";
    uint64_t v27 = 552;
    uint64_t v28 = "UsdShadeAttributeVector pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputSources(const T"
          "fToken &, const TfTokenVector &) const";
    char v29 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v25, "universalOutput", 0) & 1) == 0)
    {
      sub_216F73CDC((uint64_t)v30);
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_30:
      *(void *)(a4 + 32) = 0x100000000;
      return;
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes((pxrInternal__aapl__pxrReserved__::UsdShadeUtils *)v30, (const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)1, a4);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_40:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
  sub_21697C414(&v32);
  if (v31) {
    sub_216D16E0C(v31);
  }
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F8403C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_216F73CDC((uint64_t)va);
  uint64_t v14 = *(void *)(v12 - 88);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216F840AC(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *this@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(this, a1, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (v5 < 0) {
    operator delete(__p);
  }
}

void sub_216F84104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath **a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a6@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputSources(a1, a2, a3, (uint64_t)&v23);
  if (v25[4])
  {
    char v9 = v23;
    if (a4 | a5)
    {
      if (v26 >= 2) {
        int v10 = v23;
      }
      else {
        int v10 = &v23;
      }
      BOOL v11 = sub_216D563F8(v10);
      pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetBaseNameAndType(v11, (uint64_t)&v18);
      int v12 = (int)v19;
      uint64_t v17 = v18;
      if (a4) {
        sub_2168D2318((void *)a4, &v17);
      }
      if (a5) {
        *(_DWORD *)a5 = v12;
      }
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      char v9 = v23;
    }
    if (v26 >= 2) {
      char v13 = (uint64_t *)(v9 + 2);
    }
    else {
      char v13 = &v24;
    }
    uint64_t v14 = v9 + 4;
    if (v26 >= 2) {
      unint64_t v15 = v14;
    }
    else {
      unint64_t v15 = v25;
    }
    sub_216D16CFC((uint64_t)&v18, v13, v15);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a6, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18);
    *(void *)a6 = &unk_26C76DDF0;
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  }
  else
  {
    LODWORD(v18) = 1;
    uint64_t v19 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v20);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v21);
    uint64_t v22 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a6, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18);
    *(void *)a6 = &unk_26C76DDF0;
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  }
  sub_21697C414(&v20);
  if (v19) {
    sub_216D16E0C(v19);
  }
  return sub_216F80A24((uint64_t)&v23);
}

void sub_216F84314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetOutputsForTerminalName(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6) {
    uint64_t v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  sub_216F840AC(a2, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 216), (uint64_t)&v16);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (uint64_t)v18);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v18, v7))sub_216F73BC8(a3, (uint64_t)v18); {
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs(this, 1, (uint64_t *)&v16);
  }
  int v8 = v16;
  for (i = v17; v8 != i; int v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)((char *)v8 + 32))
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName(v8, (uint64_t)&v23);
    if ((v23 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((v23 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifier((unsigned __int8 *)EmptyString, (uint64_t *)&v14);
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v14) >> 3) >= 2
      && pxrInternal__aapl__pxrReserved__::TfToken::operator==(a2, (unsigned __int8 *)(v15 - 24)))
    {
      unint64_t v12 = a3[1];
      if (v12 >= a3[2])
      {
        uint64_t v13 = sub_216F8578C(a3, (uint64_t)v8);
      }
      else
      {
        sub_216D3B3EC((uint64_t)(a3 + 2), a3[1], (uint64_t)v8);
        uint64_t v13 = v12 + 32;
        a3[1] = v12 + 32;
      }
      a3[1] = v13;
    }
    unint64_t v23 = (unint64_t)&v14;
    sub_216782F20((void ***)&v23);
  }
  uint64_t v14 = &v16;
  sub_216F752E0((void ***)&v14);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_21697C414(&v20);
  if (v19) {
    sub_216D16E0C(v19);
  }
}

void sub_216F84558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_216F73CDC((uint64_t)va);
  sub_216F752E0((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateSurfaceOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6) {
    uint64_t v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  sub_216F840AC((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 208), a2, (uint64_t)&v8);
  int v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7) {
    int v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v7 + 88), a3);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6) {
    uint64_t v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  sub_216F840AC((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 208), a2, (uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, a3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t *a2@<X8>)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    int v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetOutputsForTerminalName(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 208), a2);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  int v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10) {
    int v10 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v11 = *a2;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = &v13;
  char v17 = 0;
  unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(8uLL);
  uint64_t v13 = v12;
  uint64_t v14 = v12;
  *(void *)unint64_t v12 = v11;
  uint64_t v15 = (char *)v12 + 8;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 8);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 208), &v13, a3, a4, a5);
  uint64_t v16 = &v13;
  sub_216889A04((void ***)&v16);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F848FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216889A04((void ***)va);
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath **a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  int v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10) {
    int v10 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 208), a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateDisplacementOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6) {
    uint64_t v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  sub_216F840AC((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 32), a2, (uint64_t)&v8);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7) {
    uint64_t v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v7 + 88), a3);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetDisplacementOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6) {
    uint64_t v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  sub_216F840AC((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 32), a2, (uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, a3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetDisplacementOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t *a2@<X8>)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    int v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetOutputsForTerminalName(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 32), a2);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeDisplacementSource(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  int v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10) {
    int v10 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v11 = *a2;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = &v13;
  char v17 = 0;
  unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(8uLL);
  uint64_t v13 = v12;
  uint64_t v14 = v12;
  *(void *)unint64_t v12 = v11;
  uint64_t v15 = (char *)v12 + 8;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 8);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 32), &v13, a3, a4, a5);
  uint64_t v16 = &v13;
  sub_216889A04((void ***)&v16);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F84CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216889A04((void ***)va);
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeDisplacementSource@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath **a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  int v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10) {
    int v10 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 32), a2, a3, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::CreateVolumeOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6) {
    uint64_t v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  sub_216F840AC((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 232), a2, (uint64_t)&v8);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7) {
    uint64_t v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v7 + 88), a3);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetVolumeOutput(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6) {
    uint64_t v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  sub_216F840AC((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 232), a2, (uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, a3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetVolumeOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this@<X0>, uint64_t *a2@<X8>)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    int v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetOutputsForTerminalName(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 232), a2);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeVolumeSource(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  int v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10) {
    int v10 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v11 = *a2;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = &v13;
  char v17 = 0;
  unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(8uLL);
  uint64_t v13 = v12;
  uint64_t v14 = v12;
  *(void *)unint64_t v12 = v11;
  uint64_t v15 = (char *)v12 + 8;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 8);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 232), &v13, a3, a4, a5);
  uint64_t v16 = &v13;
  sub_216889A04((void ***)&v16);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F8507C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216889A04((void ***)va);
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeVolumeSource@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath **a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  int v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v10) {
    int v10 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_ComputeNamedOutputShader(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 232), a2, a3, a4, a5);
}

void sub_216F85140(uint64_t a1, const std::type_info *a2, char *a3)
{
  int v4 = operator new(0x10uLL);
  v4[4] = 257;
  *(void *)int v4 = &unk_26C76DB28;
  sub_216F8548C(&v5, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(v3, &v5);
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_216F851C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216F851DC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F853BC((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F852BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F85308(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F8539C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F853BC(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F8542C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F85454(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::~UsdShadeConnectableAPIBehavior(a1);

  operator delete(v1);
}

uint64_t sub_216F8547C(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdProperty *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectInputToSource(a1, a2, a3, a4, 1);
}

uint64_t sub_216F85484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectOutputToSource(a1, a2, a3, a4, 1);
}

void *sub_216F8548C(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  *char v4 = &unk_26C76DB80;
  v4[1] = 0;
  void v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216F854E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325190(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F85500(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216F85528(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216F85558(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C76DBD0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216F855A4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C76DBF8;
  result[1] = v3;
  return result;
}

uint64_t sub_216F855EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C76DBF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_216F85618(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  sub_216D16CFC((uint64_t)v5, (uint64_t *)(*(void *)(a1 + 8) + 8), (_DWORD *)(*(void *)(a1 + 8) + 16));
  sub_216F82FF4((pxrInternal__aapl__pxrReserved__::UsdProperty *)v5, a2, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v10);
  if (!v11 || (*(unsigned char *)(v11 + 57) & 8) != 0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = (*(uint64_t (**)(uint64_t *))(v10 + 32))(&v10);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return v3;
}

void sub_216F856F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, uint64_t a14, char a15)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a13);
  sub_217324FCC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_216F85740(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C76DC58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216F85780()
{
  return &unk_26C76DC58;
}

uint64_t sub_216F8578C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    int v8 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v7);
  }
  else {
    int v8 = 0;
  }
  uint64_t v11 = v8;
  unint64_t v12 = &v8[32 * v3];
  uint64_t v14 = &v8[32 * v7];
  sub_216D3B3EC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  uint64_t v13 = v12 + 32;
  sub_216F753E8(a1, &v11);
  uint64_t v9 = a1[1];
  sub_216F755A4(&v11);
  return v9;
}

void sub_216F85868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F755A4((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76DC78;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdShade/materialBindingAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdShadeMaterialBindingAPI pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingA"
                            "PI::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76DC78;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F85A38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  return 5;
}

uint64_t sub_216F85A60(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93A88, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdShadeMaterialBindingAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216F85C48(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76DC78;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76DC78;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216F85C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F85C48(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93A88, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdShadeMaterialBindingAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93A90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93A90))
  {
    __cxa_guard_release(&qword_267B93A90);
  }
  return &qword_267B93A88;
}

void sub_216F85D7C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93AA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)__cxa_guard_acquire(&qword_267B93AA0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetStaticTfType(v2);
      byte_267B93A98 = sub_216D16508((char *)&qword_267B93A88, v3, v4);
      __cxa_guard_release(&qword_267B93AA0);
    }
  }
  return byte_267B93A98;
}

void sub_216F85DFC(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  return &qword_267B93A88;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93AC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93AC0))
  {
    qword_267B93AA8 = 0;
    unk_267B93AB0 = 0;
    qword_267B93AB8 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93AA8, &dword_216758000);
    __cxa_guard_release(&qword_267B93AC0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93AE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93AE0))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_267B93AC8 = 0;
    unk_267B93AD0 = 0;
    qword_267B93AD8 = 0;
    sub_21698FA28(&qword_267B93AC8, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93AC8, &dword_216758000);
    __cxa_guard_release(&qword_267B93AE0);
  }
  if (v1) {
    return &qword_267B93AC8;
  }
  else {
    return &qword_267B93AA8;
  }
}

void sub_216F85F44(_Unwind_Exception *a1)
{
}

void sub_216F85F5C()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADE_WARN_ON_MISSING_MATERIAL_BINDING_API)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216F86084(a2, (atomic_uint **)&v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5, a3);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
}

void sub_216F86050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216F86084(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, atomic_uint **a2@<X8>)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    unint64_t v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  unint64_t v5 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
  int v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (v5 == v6)
  {
    if (!v7) {
      int v7 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v10 = (atomic_uint *)*((void *)v7 + 13);
  }
  else
  {
    if (!v7) {
      int v7 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 20) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v10 = *(atomic_uint **)(sub_216F8BAD0() + 8);
    }
    else
    {
      int v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v8) {
        int v8 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v8 + 6) & 0xFFFFFFFFFFFFFFF8))
      {
        int v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        if (!v9) {
          int v9 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v9 + 104), a1, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
        if (v13 < 0) {
          operator delete(__p);
        }
        return;
      }
      uint64_t v10 = *(atomic_uint **)sub_216F8BAD0();
    }
  }
  *a2 = v10;
  if ((v10 & 7) != 0)
  {
    char v11 = (atomic_uint *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v11, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v11;
    }
  }
}

void sub_216F861E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216F862F4(a2, a3, (uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, a4);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
}

void sub_216F862C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216F862F4(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6) {
    unint64_t v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v6 & 0xFFFFFFFFFFFFFFF8))
  {
    int v21 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v21) {
      int v21 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v21 + 112), a1, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  }
  else
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v7) {
      uint64_t v7 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 20) & 0xFFFFFFFFFFFFFFF8))
    {
      unint64_t v22 = sub_216F8BAD0();
      pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((pxrInternal__aapl__pxrReserved__::SdfPath *)(v22 + 24), a1, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
    }
    else
    {
      int v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v8) {
        int v8 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v8 + 6) & 0xFFFFFFFFFFFFFFF8))
      {
        int v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        if (!v9) {
          int v9 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        }
        int v10 = (atomic_uint *)*((void *)v9 + 14);
        int v30 = v10;
        if ((v10 & 7) != 0)
        {
          int v11 = (atomic_uint *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v11, 2u, memory_order_relaxed) & 1) == 0) {
            int v30 = v11;
          }
        }
        uint64_t v12 = (atomic_uint *)*a2;
        int v31 = v12;
        if ((v12 & 7) != 0)
        {
          char v13 = (atomic_uint *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v13, 2u, memory_order_relaxed) & 1) == 0) {
            int v31 = v13;
          }
        }
        uint64_t v14 = *(atomic_uint **)a1;
        int v32 = v14;
        if ((v14 & 7) != 0)
        {
          uint64_t v15 = (atomic_uint *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v15, 2u, memory_order_relaxed) & 1) == 0) {
            int v32 = v15;
          }
        }
        uint64_t v24 = 0;
        int v25 = 0;
        unsigned int v26 = 0;
        uint64_t v28 = &v24;
        char v29 = 0;
        uint64_t v16 = (char *)operator new(0x18uLL);
        uint64_t v17 = 0;
        uint64_t v24 = v16;
        int v25 = v16;
        unsigned int v26 = v16 + 24;
        do
        {
          uint64_t v18 = (&v30)[v17];
          *(void *)&v16[v17 * 8] = v18;
          if ((v18 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *(void *)&v16[v17 * 8] &= 0xFFFFFFFFFFFFFFF8;
          }
          ++v17;
        }
        while (v17 != 3);
        int v25 = v16 + 24;
        pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(&v24, &__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v28 = &v24;
        sub_216889A04((void ***)&v28);
        for (uint64_t i = 2; i != -1; --i)
        {
          int v20 = (&v30)[i];
          if ((v20 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        return;
      }
      unint64_t v23 = sub_216F8BAD0();
      pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((pxrInternal__aapl__pxrReserved__::SdfPath *)(v23 + 16), a1, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216F865D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
}

pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::DirectBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *this, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2)
{
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(this)
     + 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v4);
  *((_DWORD *)this + 2) = *(_DWORD *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  *((void *)this + 2) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)this + 6, (_DWORD *)a2 + 4);
  sub_21698105C((_DWORD *)this + 7, (_DWORD *)a2 + 5);
  uint64_t v6 = *((void *)a2 + 3);
  *((void *)this + 4) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 4) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216F867EC(a2, (void *)this + 5);
  *((unsigned char *)this + 48) = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)((char *)this + 8), (uint64_t *)&v9);
  if (v10 - (void)v9 == 8 && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v9))
  {
    uint64_t v7 = v9;
    sub_2169C487C((int *)this, v9);
    sub_2169C48D4(v4, (_DWORD *)v7 + 1);
    *((unsigned char *)this + 48) = 1;
  }
  uint64_t v12 = &v9;
  sub_216981168((void ***)&v12);
  return this;
}

void sub_216F867A4(_Unwind_Exception *a1)
{
  sub_216D33F64(v2);
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

void sub_216F867EC(pxrInternal__aapl__pxrReserved__::UsdProperty *a1@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName(a1, v6);
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((v6[1] - v6[0]) >> 3);
  if (v3 == 3 || v3 == 5)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  }
  else
  {
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v4) {
      unint64_t v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v5 = *(void *)v4;
    *a2 = *(void *)v4;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *a2 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v7 = (void **)v6;
  sub_216782F20(&v7);
}

void sub_216F868C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216782F20(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::GetMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v11, (uint64_t *)this + 2, (_DWORD *)this + 6);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v11, v4))
  {
    BOOL v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_21697C414(&v13);
    if (v12) {
      sub_216D16E0C(v12);
    }
    if (v5)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)((char *)this + 8), v6, &v9);
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v9);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, this, (uint64_t)&v11);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v11);
      *(void *)a2 = &unk_26C76DAD0;
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
      sub_21697C414(&v13);
      if (v12) {
        sub_216D16E0C(v12);
      }
      uint64_t v8 = v10;
      if (v10)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      return;
    }
  }
  else
  {
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_21697C414(&v13);
    if (v12) {
      sub_216D16E0C(v12);
    }
  }
  int v11 = 1;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v14);
  uint64_t v15 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v11);
  *(void *)a2 = &unk_26C76DAD0;
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (v12) {
    sub_216D16E0C(v12);
  }
}

void sub_216F86B08(_Unwind_Exception *a1, uint64_t a2, atomic_uint *a3, ...)
{
  va_start(va, a3);
  sub_216D16AD8((uint64_t)va);
  if (a3)
  {
    if (atomic_fetch_add_explicit(a3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a3 + 8))(a3);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBindingRel(this, a2, (uint64_t)&v4);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::DirectBinding(a3, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F86C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRels(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v17, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v16 = 0;
  sub_216F862F4((pxrInternal__aapl__pxrReserved__::TfToken *)&v16, a2, (uint64_t)&v11);
  if ((v11 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertiesInNamespace((uint64_t)&v17, EmptyString, (uint64_t *)&v22);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C(v18);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v7 = v22;
  for (uint64_t i = v23; v7 != i; v7 += 8)
  {
    if (*v7 == 4)
    {
      sub_216D6B8C4((uint64_t)v7, (uint64_t)&v17);
      sub_216F867EC((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v17, &v11);
      uint64_t v9 = (atomic_uint *)(v11 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v10 = *(void *)a2;
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
      }
      if (v9 == (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216D6B8C4((uint64_t)v7, (uint64_t)&v11);
        sub_216F86EC0(a3, (uint64_t)&v11);
        if ((v15 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
        sub_21697C414(&v13);
        if (v12) {
          sub_216D16E0C(v12);
        }
      }
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
      sub_21697C414(&v19);
      if (v18) {
        sub_216D16E0C(v18);
      }
    }
  }
  uint64_t v17 = (void **)&v22;
  sub_216D3BBE0(&v17);
}

void sub_216F86E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if ((a6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216F86EC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    uint64_t v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v10 = v4 - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = a1 + 2;
    if (v12) {
      int v13 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v12);
    }
    else {
      int v13 = 0;
    }
    int v14 = v13;
    uint64_t v15 = &v13[32 * v9];
    uint64_t v17 = &v13[32 * v12];
    sub_216D6C860(v5, (uint64_t)v15, a2);
    uint64_t v16 = v15 + 32;
    sub_216D6D530(a1, &v14);
    unint64_t v8 = a1[1];
    uint64_t result = sub_216D6D6EC(&v14);
  }
  else
  {
    uint64_t result = sub_216D6C860((uint64_t)(a1 + 2), v6, a2);
    unint64_t v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_216F86FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D6D6EC((void **)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *this, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2)
{
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(this)
     + 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 3);
  *((_DWORD *)this + 4) = *(_DWORD *)a2;
  uint64_t v5 = *((void *)a2 + 1);
  *((void *)this + 3) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)this + 8, (_DWORD *)a2 + 4);
  sub_21698105C((_DWORD *)this + 9, (_DWORD *)a2 + 5);
  uint64_t v6 = *((void *)a2 + 3);
  *((void *)this + 5) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 5) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets(a2, (uint64_t *)&v11);
  if (v12 - (void)v11 == 16)
  {
    BOOL IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v11);
    if (IsPrimPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 8)))
    {
      unint64_t v8 = (_DWORD *)((char *)v11 + 8 * !IsPrimPath);
      sub_2169C487C((int *)this + 2, v8);
      sub_2169C48D4((int *)this + 3, v8 + 1);
      uint64_t v9 = (_DWORD *)((char *)v11 + 8 * IsPrimPath);
      sub_2169C487C((int *)this, v9);
      sub_2169C48D4(v4, v9 + 1);
    }
  }
  int v14 = &v11;
  sub_216981168((void ***)&v14);
  return this;
}

void sub_216F87148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216981168(&a12);
  sub_216D33F64(v14);
  sub_21697B754(v13);
  sub_21697B754(v12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v11, (uint64_t *)this + 3, (_DWORD *)this + 8);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v11, v4))
  {
    BOOL v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 2);
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_21697C414(&v13);
    if (v12) {
      sub_216D16E0C(v12);
    }
    if (v5)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)((char *)this + 16), v6, &v9);
      int v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(&v9);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)((char *)this + 8), (uint64_t)&v11);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v11);
      *(void *)a2 = &unk_26C76DAD0;
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
      sub_21697C414(&v13);
      if (v12) {
        sub_216D16E0C(v12);
      }
      uint64_t v8 = v10;
      if (v10)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      return;
    }
  }
  else
  {
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    sub_21697C414(&v13);
    if (v12) {
      sub_216D16E0C(v12);
    }
  }
  int v11 = 1;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v14);
  uint64_t v15 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v11);
  *(void *)a2 = &unk_26C76DAD0;
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  if (v12) {
    sub_216D16E0C(v12);
  }
}

void sub_216F873BC(_Unwind_Exception *a1, uint64_t a2, atomic_uint *a3, ...)
{
  va_start(va, a3);
  sub_216D16AD8((uint64_t)va);
  if (a3)
  {
    if (atomic_fetch_add_explicit(a3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a3 + 8))(a3);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v10, (uint64_t *)this + 3, (_DWORD *)this + 8);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v10, v4))
  {
    BOOL v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_21697C414(&v12);
    if (v11) {
      sub_216D16E0C(v11);
    }
    if (v5)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)((char *)this + 16), v6, &v10);
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection(this, &v10, v7, a2);
      uint64_t v8 = v11;
      if (v11)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_ullong *))(*v8 + 8))(v8);
        }
      }
      return;
    }
  }
  else
  {
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_21697C414(&v12);
    if (v11) {
      sub_216D16E0C(v11);
    }
  }
  LODWORD(v10) = 1;
  int v11 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v13);
  uint64_t v14 = 0;
  uint64_t v9 = 0;
  sub_216D36868(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10, &v9);
  *(void *)a2 = &unk_26C767A08;
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
}

void sub_216F8761C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, atomic_uint *a12)
{
  if (a12) {
    sub_217323F90(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::IsCollectionBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *this, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2)
{
  uint64_t v2 = sub_216D563F8(this);
  if ((*(void *)v2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  }
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    unint64_t v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  BOOL v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 104);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v6) {
    uint64_t v6 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  int v7 = (const char *)v17;
  pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(v5, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v6 + 24), (uint64_t)v17);
  int v8 = v18;
  uint64_t v9 = (void *)v17[0];
  if (v18 < 0) {
    int v7 = (const char *)v17[0];
  }
  int v10 = *((char *)EmptyString + 23);
  if (v10 >= 0) {
    size_t v11 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v11 = EmptyString[1];
  }
  size_t v12 = strlen(v7);
  if (v11 >= v12)
  {
    size_t v14 = v12;
    if (v10 >= 0) {
      uint64_t v15 = (const char *)EmptyString;
    }
    else {
      uint64_t v15 = (const char *)*EmptyString;
    }
    BOOL v13 = strncmp(v15, v7, v14) == 0;
    if (v8 < 0) {
      goto LABEL_20;
    }
  }
  else
  {
    BOOL v13 = 0;
    if (v18 < 0) {
LABEL_20:
    }
      operator delete(v9);
  }
  return v13;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindings(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRels(this, a2, (uint64_t *)&v9);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_216F87890(a3, (v10 - v9) >> 5);
  unint64_t v4 = v9;
  BOOL v5 = v10;
  while (v4 != v5)
  {
    unint64_t v6 = a3[1];
    if (v6 >= a3[2])
    {
      uint64_t v8 = sub_216F8C354(a3, v4);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)a3[1], v4);
      uint64_t v8 = v6 + 48;
      a3[1] = v6 + 48;
    }
    a3[1] = v8;
    if (!sub_216F87944(v8 - 48, v7)) {
      a3[1] = (uint64_t)sub_216F8BE28(a3[1] - 48);
    }
    unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)((char *)v4 + 32);
  }
  size_t v11 = &v9;
  sub_216D6D428((void ***)&v11);
}

void sub_216F87858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216D6D428(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_216F87890(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_2168073F4(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    uint64_t v7[3] = v7[0] + 48 * v6;
    sub_216F8C1D8(a1, v7);
    return sub_216F8C304((uint64_t)v7);
  }
  return result;
}

void sub_216F87930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F8C304((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216F87944(uint64_t a1, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2)
{
  BOOL result = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::IsCollectionBindingRel((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(a1 + 16), a2);
  if (result) {
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 8));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetCollectionBindings(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_216F87890(a3, (a2[1] - *a2) >> 3);
  uint64_t v6 = *a2;
  int v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = (uint64_t *)(a1 + 8);
    uint64_t v9 = (_DWORD *)(a1 + 16);
    do
    {
      sub_216D16CFC((uint64_t)&v14, v8, v9);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v14, v6, (uint64_t)v19);
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      sub_21697C414(&v16);
      if (v15) {
        sub_216D16E0C(v15);
      }
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v19, v10))
      {
        unint64_t v11 = a3[1];
        if (v11 >= a3[2])
        {
          uint64_t v13 = sub_216F8C45C(a3, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)v19);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)a3[1], (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)v19);
          uint64_t v13 = v11 + 48;
          a3[1] = v11 + 48;
        }
        a3[1] = v13;
        if (!sub_216F87944(v13 - 48, v12)) {
          a3[1] = (uint64_t)sub_216F8BE28(a3[1] - 48);
        }
      }
      if ((v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
      sub_21697C414(&v21);
      if (v20) {
        sub_216D16E0C(v20);
      }
      uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v6 + 8);
    }
    while (v6 != v7);
  }
}

void sub_216F87B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216F8C154((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindingStrength@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v9 = 0;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5) {
    uint64_t v5 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v10 = 0;
  unint64_t result = sub_216D1D1CC((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v5 + 8), (uint64_t)&v9, &v10);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v7 = v9;
  if (!v9)
  {
    unint64_t result = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!result) {
      unint64_t result = (unint64_t)sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    int v7 = *(atomic_uint **)(result + 240);
  }
  *a2 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v8;
    }
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216F87C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindingStrength(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5) {
    uint64_t v5 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v5 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v6) {
      uint64_t v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v14 = 0;
    sub_216D1CF30((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 8));
  }
  uint64_t v13 = 0;
  int v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v7) {
    int v7 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v14 = 0;
  sub_216D1D1CC((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v7 + 8), (uint64_t)&v13, &v14);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = v13;
  if (v13)
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v9) {
      uint64_t v9 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v8 = v13;
    if ((v13 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v9 + 30) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v10) {
        uint64_t v10 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens)) {
        sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      uint64_t v14 = 0;
      sub_216D1CF30((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v10 + 8));
    }
  }
  uint64_t result = 1;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216F87E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_CreateDirectBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a3@<X8>)
{
  sub_216D16CFC((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216F86084(a2, (atomic_uint **)&v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5, 0, a3);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
}

void sub_216F87F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_CreateCollectionBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a4@<X8>)
{
  sub_216F862F4(a2, a3, (uint64_t)&v11);
  sub_216D16CFC((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, 0, a4);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F87FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  uint64_t v4 = *(void *)(v2 - 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_CreateDirectBindingRel(this, a4, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v13);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v13, v6))
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindingStrength((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)v13, a3, v7);
    sub_216D1E2AC((uint64_t)a2, &v20);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    size_t v12 = 0;
    uint64_t v18 = &v10;
    char v19 = 0;
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(8uLL);
    uint64_t v11 = v10;
    size_t v12 = (char *)v10 + 8;
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216980F74((uint64_t)&v12, &v20, &v22, v10);
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v13, &v10);
    uint64_t v18 = &v10;
    sub_216981168((void ***)&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_21697C414(&v20);
  }
  else
  {
    uint64_t v8 = 0;
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  return v8;
}

void sub_216F88178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *a2, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a3, char **a4, const pxrInternal__aapl__pxrReserved__::TfToken *a5, const pxrInternal__aapl__pxrReserved__::TfToken *a6)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  size_t v12 = *a4;
  unint64_t v34 = (unint64_t)v12;
  if ((v12 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)v34 &= 0xFFFFFFFFFFFFFFF8; {
    size_t v12 = *a4;
    }
  }
  if (v12)
  {
    unint64_t v13 = (unint64_t)v12 & 0xFFFFFFFFFFFFFFF8;
    if (v13) {
      EmptyString = (const std::string *)(v13 + 16);
    }
    else {
      EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
    }
    if (std::string::find(EmptyString, 58, 0) != -1)
    {
      char v29 = "usdShade/materialBindingAPI.cpp";
      int v30 = (atomic_ullong *)"Bind";
      uint64_t v31 = 464;
      unint64_t v32 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind(const UsdCollectio"
                              "nAPI &, const UsdShadeMaterial &, const TfToken &, const TfToken &, const TfToken &) const";
      char v33 = 0;
      unint64_t v17 = (unint64_t)*a4 & 0xFFFFFFFFFFFFFFF8;
      if (v17)
      {
        uint64_t v18 = (const char *)(v17 + 16);
        if (*(char *)(v17 + 39) < 0) {
          uint64_t v18 = *(const char **)v18;
        }
      }
      else
      {
        uint64_t v18 = "";
      }
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath(a2, (int *)&v26);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
      sub_216D1E2AC((uint64_t)a3, &v35);
      uint64_t v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid bindingName '%s', as it contains namespaces. Not binding collection <%s> to material <%s>.", v18, Text, v24);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
      sub_21697C414(&v35);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
      sub_21697C414(&v26);
      uint64_t v21 = 0;
      goto LABEL_31;
    }
  }
  else
  {
    unint64_t v15 = *((void *)a2 + 3);
    unint64_t v26 = v15;
    if ((v15 & 7) != 0)
    {
      int v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v15 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v16, 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v26 = (unint64_t)v16;
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, (uint64_t)&v29);
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v34 = (unint64_t)v29;
    char v29 = 0;
    if ((v26 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_CreateCollectionBindingRel(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, a6, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v29);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v29, v19))
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindingStrength((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v29, a5, v20);
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath(a2, v38);
    sub_216D1E2AC((uint64_t)a3, &v39);
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v35 = (void **)&v26;
    char v36 = 0;
    unint64_t v26 = (unint64_t)operator new(0x10uLL);
    uint64_t v27 = (_DWORD *)v26;
    uint64_t v28 = (char *)(v26 + 16);
    uint64_t v27 = sub_216980F74((uint64_t)&v28, v38, &v40, (_DWORD *)v26);
    uint64_t v21 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v29, (pxrInternal__aapl__pxrReserved__::SdfPath **)&v26);
    uint64_t v35 = (void **)&v26;
    sub_216981168(&v35);
    uint64_t v22 = 4;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37[v22 * 4]);
      v22 -= 2;
      sub_21697C414(&v38[v22]);
    }
    while (v22 * 4);
  }
  else
  {
    uint64_t v21 = 0;
  }
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
  sub_21697C414(&v31);
  if (v30) {
    sub_216D16E0C(v30);
  }
LABEL_31:
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v21;
}

void sub_216F88514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if ((a21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindDirectBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D16CFC((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216F86084(a2, (atomic_uint **)&v15);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v15, 0, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v10);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v10, v3))
  {
    uint64_t v6 = 0;
    int v7 = 0;
    uint64_t v8 = 0;
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v10, &v6);
    unint64_t v15 = (unint64_t)&v6;
    sub_216981168((void ***)&v15);
  }
  else
  {
    uint64_t v4 = 0;
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  return v4;
}

void sub_216F8872C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *(void *)(v7 - 24) = v6;
  sub_216981168((void ***)(v7 - 24));
  sub_216D33F64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindCollectionBinding(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  sub_216D16CFC((uint64_t)&v8, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216F862F4(a2, a3, (uint64_t)&v17);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v17, 0, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)v12);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v12, v5))
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v12, &v8);
    unint64_t v17 = (unint64_t)&v8;
    sub_216981168((void ***)&v17);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
  return v6;
}

void sub_216F888B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *(void *)(v7 - 24) = v6;
  sub_216981168((void ***)(v7 - 24));
  sub_216D33F64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::UnbindAllBindings(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  int v1 = (uint64_t *)((char *)this + 8);
  uint64_t v2 = (_DWORD *)((char *)this + 16);
  sub_216D16CFC((uint64_t)&v19, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    unint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)v3 + 13) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)v3 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace((uint64_t)&v19, EmptyString, &v24);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v20) {
    sub_216D16E0C(v20);
  }
  sub_216D16CFC((uint64_t)&v15, v1, v2);
  unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5) {
    unint64_t v5 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v15, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v5 + 104), (uint64_t)&v19);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v19, v6))
  {
    unint64_t v7 = v25;
    if (v25 >= v26)
    {
      uint64_t v8 = sub_216F8C564(&v24, (uint64_t)&v19);
    }
    else
    {
      sub_216D3B3EC((uint64_t)&v26, v25, (uint64_t)&v19);
      uint64_t v8 = v7 + 32;
    }
    unint64_t v25 = v8;
  }
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v20) {
    sub_216D16E0C(v20);
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v9 = v24;
  unint64_t v10 = v25;
  if (v24 == v25)
  {
    LOBYTE(v11) = 1;
  }
  else
  {
    int v11 = 1;
    do
    {
      sub_216D6B8C4(v9, (uint64_t)&v19);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v19, v12))
      {
        memset(v14, 0, sizeof(v14));
        v11 &= pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v19, v14);
        uint64_t v27 = v14;
        sub_216981168((void ***)&v27);
      }
      if ((v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
      sub_21697C414(&v21);
      if (v20) {
        sub_216D16E0C(v20);
      }
      v9 += 32;
    }
    while (v9 != v10);
  }
  char v19 = (void **)&v15;
  sub_216D6D428(&v19);
  char v19 = (void **)&v24;
  sub_216D3BBE0(&v19);
  return v11 & 1;
}

void sub_216F88BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a17 = (void **)&a21;
  sub_216D3BBE0(&a17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::RemovePrimFromBindingCollection(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel(this, a3, a4, (uint64_t)v13);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v13, v5))goto LABEL_8; {
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)v12, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)v13);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)v12, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v10);
  if (v11 && (*(unsigned char *)(v11 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v10 + 32))(&v10))
  {
    sub_216D0162C((uint64_t)a2, &v8);
    LOBYTE(a2) = pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ExcludePath((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v10);
  sub_216F8BE28((uint64_t)v12);
  if ((v6 & 1) == 0) {
LABEL_8:
  }
    LOBYTE(a2) = 1;
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  return a2 & 1;
}

void sub_216F88D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_21697B754((uint64_t *)va);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)va1);
  sub_216F8BE28((uint64_t)va2);
  sub_216D33F64(v2 - 48);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::AddPrimToBindingCollection(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel(this, a3, a4, (uint64_t)v13);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v13, v5))goto LABEL_8; {
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)v12, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)v13);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)v12, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v10);
  if (v11 && (*(unsigned char *)(v11 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v10 + 32))(&v10))
  {
    sub_216D0162C((uint64_t)a2, &v8);
    LOBYTE(a2) = pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IncludePath((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v10);
  sub_216F8BE28((uint64_t)v12);
  if ((v6 & 1) == 0) {
LABEL_8:
  }
    LOBYTE(a2) = 1;
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  return a2 & 1;
}

void sub_216F88EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_21697B754((uint64_t *)va);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)va1);
  sub_216F8BE28((uint64_t)va2);
  sub_216D33F64(v2 - 48);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim::BindingsAtPrim(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  *((_OWORD *)this + 2) = 0u;
  uint64_t v8 = (void **)((char *)this + 32);
  *((void *)this + 6) = 0;
  uint64_t v9 = (void **)((char *)this + 8);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetStaticTfType(this);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93A88, v10);
  int HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)a2, SchemaInfo);
  char v13 = HasAPI;
  if ((a4 | HasAPI))
  {
    unint64_t v34 = (void **)&unk_26C76DCD0;
    unint64_t v38 = (unint64_t)&v34;
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertyNames((uint64_t)a2, (uint64_t)&v34, &v31);
    sub_216D3BB5C(&v34);
    if (v31 != v32)
    {
      sub_216F86084(a3, (atomic_uint **)&v30);
      int v14 = v31;
      if (v31 != v32)
      {
        while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (v30 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v14 == v32)
          {
            int v14 = v32;
            break;
          }
        }
      }
      if (v14 != v32)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v30, (uint64_t)&v34);
        int v15 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)operator new(0x38uLL);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::DirectBinding(v15, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v34);
        uint64_t v16 = *(void *)this;
        *(void *)this = v15;
        if (v16) {
          sub_216F8C7DC((uint64_t)this, v16);
        }
        if ((v38 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
        sub_21697C414(&v36);
        if (v35) {
          sub_216D16E0C(v35);
        }
      }
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v17) {
        uint64_t v17 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v17 & 0xFFFFFFFFFFFFFFF8)
        && (!*(void *)this
         || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(*(_DWORD **)this)))
      {
        uint64_t v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        if (!v18) {
          uint64_t v18 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
        }
        sub_216F86084(v18, (atomic_uint **)&v28);
        char v19 = v31;
        if (v31 != v32)
        {
          while ((*v19 & 0xFFFFFFFFFFFFFFF8) != (v28 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v19 == v32)
            {
              char v19 = v32;
              break;
            }
          }
        }
        if (v19 != v32)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v28, (uint64_t)&v34);
          int v20 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)operator new(0x38uLL);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::DirectBinding(v20, (const pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v34);
          uint64_t v21 = *(void *)this;
          *(void *)this = v20;
          if (v21) {
            sub_216F8C7DC((uint64_t)this, v21);
          }
          if ((v38 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
          sub_21697C414(&v36);
          if (v35) {
            sub_216D16E0C(v35);
          }
        }
        if ((v28 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      if (*(void *)this
        && !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(*(_DWORD **)this))
      {
        *(void *)this = 0;
      }
      int v22 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v22) {
        int v22 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v22 & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216F8956C(&v31, a3, (uint64_t)&v28);
        if ((atomic_uint *)v28 != v29)
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v34, a2);
          unint64_t v38 = 0;
          unint64_t v34 = (void **)&unk_26C76DC78;
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetCollectionBindings((uint64_t)&v34, (const pxrInternal__aapl__pxrReserved__::TfToken **)&v28, (uint64_t *)&v26);
          sub_216F8C880(v9);
          *(_OWORD *)((char *)this + 8) = v26;
          *((void *)this + 3) = v27;
          uint64_t v27 = 0;
          long long v26 = 0uLL;
          char v33 = (void **)&v26;
          sub_216F8C154(&v33);
          pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v34);
        }
        unint64_t v34 = (void **)&v28;
        sub_216889A04(&v34);
      }
      uint64_t v23 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v23) {
        uint64_t v23 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      sub_216F8956C(&v31, v23, (uint64_t)&v28);
      if ((atomic_uint *)v28 != v29)
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v34, a2);
        unint64_t v38 = 0;
        unint64_t v34 = (void **)&unk_26C76DC78;
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::_GetCollectionBindings((uint64_t)&v34, (const pxrInternal__aapl__pxrReserved__::TfToken **)&v28, (uint64_t *)&v26);
        sub_216F8C880(v8);
        *((_OWORD *)this + 2) = v26;
        *((void *)this + 6) = v27;
        uint64_t v27 = 0;
        long long v26 = 0uLL;
        char v33 = (void **)&v26;
        sub_216F8C154(&v33);
        pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v34);
      }
      if ((v13 & 1) == 0
        && !atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADE_WARN_ON_MISSING_MATERIAL_BINDING_API))
      {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
      }
      unint64_t v34 = (void **)&v28;
      sub_216889A04(&v34);
      if ((v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    unint64_t v34 = (void **)&v31;
    sub_216889A04(&v34);
  }
  return this;
}

void sub_216F8942C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  a20 = (void **)&a12;
  sub_216889A04(&a20);
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  a20 = (void **)&a16;
  sub_216889A04(&a20);
  sub_216F8C154(&a20);
  sub_216F8C154(&a20);
  uint64_t v22 = *v20;
  *int v20 = 0;
  if (v22) {
    sub_216F8C7DC((uint64_t)v20, v22);
  }
  _Unwind_Resume(a1);
}

void sub_216F8956C(uint64_t **a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = 0;
  sub_216F862F4((pxrInternal__aapl__pxrReserved__::TfToken *)&v29, a2, (uint64_t)&v28);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = v28;
  unint64_t v8 = v28 & 0xFFFFFFFFFFFFFFF8;
  if ((v28 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    if (*(char *)(v8 + 39) < 0) {
      unint64_t v9 = *(void *)(v8 + 24);
    }
    else {
      unint64_t v9 = *(unsigned __int8 *)(v8 + 39);
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  if (*a1 != v11)
  {
    do
    {
      unint64_t v12 = *v10 & 0xFFFFFFFFFFFFFFF8;
      if (v12)
      {
        int v13 = *(char *)(v12 + 39);
        uint64_t v14 = *(unsigned __int8 *)(v12 + 39);
        unint64_t v15 = v13 < 0 ? *(void *)(v12 + 24) : *(unsigned __int8 *)(v12 + 39);
        if (v15 > v9)
        {
          uint64_t v16 = (unint64_t *)(v12 + 16);
          unint64_t v17 = v12 + 16;
          if (v13 < 0) {
            unint64_t v17 = *v16;
          }
          if (*(unsigned char *)(v17 + v9) == 58)
          {
            if ((v28 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              EmptyString = (uint64_t *)((v28 & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else
            {
              EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v6);
              uint64_t v14 = *(unsigned __int8 *)(v12 + 39);
            }
            char v19 = *((char *)EmptyString + 23) >= 0 ? (const char *)EmptyString : (const char *)*EmptyString;
            int v20 = (char)v14;
            size_t v21 = (v14 & 0x80u) == 0 ? v14 : *(void *)(v12 + 24);
            size_t v6 = strlen(v19);
            if (v21 >= v6)
            {
              size_t v22 = v6;
              uint64_t v23 = v20 >= 0 ? (const char *)v16 : (const char *)*v16;
              size_t v6 = strncmp(v23, v19, v22);
              if (!v6)
              {
                uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if (!v24) {
                  uint64_t v24 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                }
                if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v24 & 0xFFFFFFFFFFFFFFF8)
                  || ((*v10 & 0xFFFFFFFFFFFFFFF8) == 0
                    ? (uint64_t v27 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v24))
                    : (uint64_t v27 = (const std::string *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 16)),
                      size_t v6 = std::string::find(v27, 58, v9 + 1),
                      v6 == -1))
                {
                  unint64_t v25 = *(uint64_t **)(a3 + 8);
                  if ((unint64_t)v25 >= *(void *)(a3 + 16))
                  {
                    size_t v6 = (size_t)sub_216973984((char **)a3, v10);
                  }
                  else
                  {
                    uint64_t v26 = *v10;
                    uint64_t *v25 = *v10;
                    if ((v26 & 7) != 0
                      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                    {
                      *v25 &= 0xFFFFFFFFFFFFFFF8;
                    }
                    size_t v6 = (size_t)(v25 + 1);
                  }
                  *(void *)(a3 + 8) = v6;
                }
              }
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v11);
    uint64_t v7 = v28;
  }
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216F897B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialPurposes@<X0>(void *a1@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    unint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v4 = *(void *)v3;
  uint64_t v14 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v14 &= 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5) {
    unint64_t v5 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v6 = *((void *)v5 + 20);
  uint64_t v15 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v15 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v7) {
    uint64_t v7 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v8 = *((void *)v7 + 6);
  uint64_t v16 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v16 &= 0xFFFFFFFFFFFFFFF8;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = (char *)operator new(0x18uLL);
  uint64_t v10 = 0;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 24;
  do
  {
    uint64_t v11 = *(uint64_t *)((char *)&v14 + v10);
    *(void *)&result[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&result[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 8;
  }
  while (v10 != 24);
  a1[1] = result + 24;
  for (uint64_t i = 16; i != -8; i -= 8)
  {
    uint64_t v13 = *(uint64_t *)((char *)&v14 + i);
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_216F899CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  while (1)
  {
    uint64_t v13 = *((void *)v11 - 1);
    v11 -= 8;
    uint64_t v12 = v13;
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v11 == &a11) {
      _Unwind_Resume(exception_object);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetResolvedTargetPathFromBindingRel(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X1>, _DWORD *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2))
  {
    memset(v8, 0, sizeof(v8));
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets(this, v8);
    BOOL IsCollectionBindingRel = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::IsCollectionBindingRel(this, v5);
    uint64_t v7 = (_DWORD *)(v8[0] + 8 * IsCollectionBindingRel);
    sub_216981010(a3, v7);
    sub_21698105C(a3 + 1, v7 + 1);
    unint64_t v9 = (void **)v8;
    sub_216981168(&v9);
  }
  else
  {
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

void sub_216F89B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const pxrInternal__aapl__pxrReserved__::TfToken *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a7@<X8>)
{
  uint64_t v77 = (_DWORD *)(a1 + 16);
  int v78 = (uint64_t *)(a1 + 8);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)&v107, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  char IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v11, v12);
  if ((v110 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
  sub_21697C414(&v109);
  if (v108) {
    sub_216D16E0C(v108);
  }
  if ((IsDefined & 1) == 0)
  {
    uint64_t v107 = (void **)"usdShade/materialBindingAPI.cpp";
    uint64_t v108 = (atomic_ullong *)"ComputeBoundMaterial";
    uint64_t v109 = 728;
    unint64_t v110 = (unint64_t)"UsdShadeMaterial pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBound"
                             "Material(BindingsCache *, CollectionQueryCache *, const TfToken &, UsdRelationship *, BOOL) const";
    char v111 = 0;
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__ *)sub_216D16CFC((uint64_t)&v104, v78, v77);
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)__p, v16, v17);
    if (v93 >= 0) {
      uint64_t v18 = __p;
    }
    else {
      uint64_t v18 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v107, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim (%s)", (const char *)v18);
    if (SHIBYTE(v93) < 0) {
      operator delete(__p[0]);
    }
    if ((v106 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v105 + 3);
    sub_21697C414((_DWORD *)&v105 + 2);
    if ((void)v105) {
      sub_216D16E0C((atomic_ullong *)v105);
    }
    LODWORD(v107) = 1;
    uint64_t v108 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v109 + 1);
    unint64_t v110 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a7, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v107);
    *(void *)a7 = &unk_26C76DAD0;
    if ((v110 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
    sub_21697C414(&v109);
    if (v108) {
      sub_216D16E0C(v108);
    }
    return;
  }
  uint64_t v14 = *(void *)a4;
  if ((*(void *)a4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v14 &= 0xFFFFFFFFFFFFFFF8;
  }
  char v101 = 0;
  int v102 = 0;
  uint64_t v103 = 0;
  uint64_t v107 = (void **)&v101;
  LOBYTE(v108) = 0;
  uint64_t v15 = (char *)operator new(8uLL);
  char v101 = v15;
  int v102 = v15;
  *(void *)uint64_t v15 = v14;
  uint64_t v103 = v15 + 8;
  if ((v14 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *(void *)v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v102 = v15 + 8;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    int v102 = v15 + 8;
  }
  char v19 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v19) {
    char v19 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*(void *)a4 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v19 & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v23 = v102;
  }
  else
  {
    int v20 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v20) {
      int v20 = (uint64_t *)sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    size_t v21 = v102;
    if (v102 >= v103)
    {
      uint64_t v23 = sub_216973984(&v101, v20);
    }
    else
    {
      uint64_t v22 = *v20;
      *(void *)int v102 = *v20;
      if ((v22 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)v21 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v23 = v21 + 8;
    }
    int v102 = v23;
  }
  uint64_t v82 = v101;
  if (v101 == v23)
  {
LABEL_136:
    LODWORD(v107) = 1;
    uint64_t v108 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v109 + 1);
    unint64_t v110 = 0;
    *(void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a7, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v107) = &unk_26C76DAD0;
    if ((v110 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
    sub_21697C414(&v109);
    if (v108) {
      sub_216D16E0C(v108);
    }
    goto LABEL_167;
  }
  int v76 = v23;
  while (2)
  {
    LODWORD(v107) = 1;
    uint64_t v108 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v109 + 1);
    unint64_t v110 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v97, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v107);
    int v97 = &unk_26C76DAD0;
    if ((v110 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
    sub_21697C414(&v109);
    if (v108) {
      sub_216D16E0C(v108);
    }
    LODWORD(v107) = 4;
    uint64_t v108 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v109 + 1);
    unint64_t v110 = 0;
    sub_216D16CFC((uint64_t)&v104, v78, v77);
    BOOL v24 = 0;
    while (!pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v104))
    {
      sub_216D0162C((uint64_t)&v104, (int *)__p);
      sub_216F8C8E0(a2, (unsigned int *)__p, &v96);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_21697C414(__p);
      uint64_t v25 = v96;
      if (v96 == __PAIR128__(a2 + 16, 0))
      {
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim *)operator new(0x38uLL);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim::BindingsAtPrim(v26, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v104, a4, a6);
        unint64_t v88 = (unint64_t)v26;
        sub_216D0162C((uint64_t)&v104, &v85);
        LODWORD(v95) = v85;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v85);
        DWORD1(v95) = v86;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(&v86);
        unint64_t v27 = v88;
        unint64_t v88 = 0;
        *((void *)&v95 + 1) = v27;
        *(_DWORD *)uint64_t v83 = v95;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v95);
        *(_DWORD *)&v83[4] = DWORD1(v95);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)&v95 + 1);
        uint64_t v28 = *((void *)&v95 + 1);
        *((void *)&v95 + 1) = 0;
        *(void *)&v83[8] = v28;
        sub_216F8CC80(a2, (unsigned int *)v83, 0, (uint64_t)__p);
        long long v96 = *(_OWORD *)__p;
        uint64_t v29 = *(char **)&v83[8];
        *(void *)&v83[8] = 0;
        if (v29) {
          sub_216F8CC14((uint64_t)&v83[8], v29);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v83[4]);
        sub_21697C414(v83);
        unint64_t v30 = (char *)*((void *)&v95 + 1);
        *((void *)&v95 + 1) = 0;
        if (v30) {
          sub_216F8CC14((uint64_t)&v95 + 8, v30);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v95 + 1);
        sub_21697C414(&v95);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v86);
        sub_21697C414(&v85);
        uint64_t v31 = (char *)v88;
        unint64_t v88 = 0;
        if (v31) {
          sub_216F8CC14((uint64_t)&v88, v31);
        }
        uint64_t v25 = v96;
      }
      unint64_t v32 = *(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding ***)(v25 + 16);
      char v33 = *v32;
      if (*v32 && (*((void *)v33 + 5) & 0xFFFFFFFFFFFFFFF8) == (*(void *)v82 & 0xFFFFFFFFFFFFFFF8))
      {
        unint64_t v34 = *v32;
        if (v24)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindingStrength((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)((char *)v33 + 8), (atomic_uint **)__p);
          uint64_t v35 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
          if (!v35) {
            uint64_t v35 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
          }
          int v36 = (atomic_uint *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
          uint64_t v37 = *((void *)v35 + 24);
          if (((uint64_t)__p[0] & 7) != 0) {
            atomic_fetch_add_explicit(v36, 0xFFFFFFFE, memory_order_release);
          }
          if (v36 != (atomic_uint *)(v37 & 0xFFFFFFFFFFFFFFF8))
          {
            BOOL v24 = 1;
            goto LABEL_75;
          }
          unint64_t v34 = *v32;
        }
        BOOL v24 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v34);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding::GetMaterial(*v32, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)__p);
        unint64_t v38 = (atomic_ullong *)__p[1];
        if (__p[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 6, 1uLL, memory_order_relaxed);
        }
        uint64_t v39 = v98;
        uint64_t v98 = v38;
        if (v39) {
          sub_216D16E0C(v39);
        }
        sub_2169C487C(&v99, &v92);
        sub_2169C48D4(&v100, &v93);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)__p);
        LODWORD(v107) = *((_DWORD *)v33 + 2);
        uint64_t v40 = (atomic_ullong *)*((void *)v33 + 2);
        if (v40) {
          atomic_fetch_add_explicit(v40 + 6, 1uLL, memory_order_relaxed);
        }
        int v41 = v108;
        uint64_t v108 = v40;
        if (v41) {
          sub_216D16E0C(v41);
        }
        sub_2169C487C((int *)&v109, (_DWORD *)v33 + 6);
        sub_2169C48D4((int *)&v109 + 1, (_DWORD *)v33 + 7);
        sub_2168D2318(&v110, (void *)v33 + 4);
      }
LABEL_75:
      uint64_t v42 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v42) {
        uint64_t v42 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      uint64_t v43 = 1;
      if ((*(void *)v82 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v42 & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v43 = 4;
        int v44 = v32 + 4;
      }
      else
      {
        int v44 = v32 + 1;
      }
      uint64_t v45 = v32[v43];
      uint64_t v46 = v44[1];
      if (v45 != v46)
      {
        long long v47 = (unsigned int *)((char *)v45 + 40);
        while (1)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetCollection((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(v47 - 10), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)__p);
          if (__p[1]
            && (*((unsigned char *)__p[1] + 57) & 8) == 0
            && ((*((uint64_t (**)(void **))__p[0] + 4))(__p) & 1) != 0)
          {
            sub_216F8CED8(a3, v47 - 10, &v95);
            uint64_t v48 = v95;
            if (v95 == __PAIR128__(a3 + 16, 0))
            {
              uint64_t v49 = operator new(0x90uLL);
              v49[4] = 0;
              *(_OWORD *)uint64_t v49 = 0u;
              *((_OWORD *)v49 + 1) = 0u;
              *((_DWORD *)v49 + 10) = 1065353216;
              v49[8] = 0;
              v49[7] = 0;
              v49[6] = v49 + 7;
              *((unsigned char *)v49 + 72) = 0;
              *((_OWORD *)v49 + 5) = 0u;
              *((_OWORD *)v49 + 6) = 0u;
              *((_OWORD *)v49 + 7) = 0u;
              *((_OWORD *)v49 + 8) = 0u;
              uint64_t v90 = (char *)v49;
              pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)__p, (uint64_t)v49);
              sub_216981010(&v85, v47 - 10);
              sub_21698105C(&v86, v47 - 9);
              long long v50 = v90;
              uint64_t v90 = 0;
              uint64_t v87 = v50;
              LODWORD(v88) = v85;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v85);
              HIDWORD(v88) = v86;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(&v86);
              uint64_t v51 = v87;
              uint64_t v87 = 0;
              uint64_t v89 = v51;
              sub_216F8D2D0(a3, (unsigned int *)&v88, 0, (uint64_t)v83);
              long long v95 = *(_OWORD *)v83;
              uint64_t v52 = v89;
              uint64_t v89 = 0;
              if (v52) {
                sub_216F8D20C((uint64_t)&v89, v52);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v88 + 1);
              sub_21697C414(&v88);
              uint64_t v53 = v87;
              uint64_t v87 = 0;
              if (v53) {
                sub_216F8D20C((uint64_t)&v87, v53);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v86);
              sub_21697C414(&v85);
              long long v54 = v90;
              uint64_t v90 = 0;
              if (v54) {
                sub_216F8D20C((uint64_t)&v90, v54);
              }
              uint64_t v48 = v95;
            }
            uint64_t v55 = *(void *)(v48 + 16);
            sub_216D1E2AC(a1, v83);
            LOBYTE(v55) = sub_216D33DE4(v55, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v83, 0);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v83[4]);
            sub_21697C414(v83);
            if ((_BYTE)v55)
            {
              if (!v24) {
                break;
              }
              sub_216D16CFC((uint64_t)v83, (uint64_t *)&v108, &v109);
              if (*(_DWORD *)v83 == v104
                && *(_OWORD *)&v83[8] == v105
                && (uint64_t v56 = v84, (v84 & 0xFFFFFFFFFFFFFFF8) == (v106 & 0xFFFFFFFFFFFFFFF8)))
              {
                BOOL v58 = 1;
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindingStrength((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)(v47 - 6), (atomic_uint **)&v88);
                unint64_t v57 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                if (!v57) {
                  unint64_t v57 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
                }
                BOOL v58 = (v88 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v57 + 24) & 0xFFFFFFFFFFFFFFF8);
                if ((v88 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                uint64_t v56 = v84;
              }
              if ((v56 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v83[20]);
              sub_21697C414(&v83[16]);
              if (*(void *)&v83[8]) {
                sub_216D16E0C(*(atomic_ullong **)&v83[8]);
              }
              if (v58) {
                break;
              }
            }
          }
          pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)__p);
          uint64_t v59 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::DirectBinding *)(v47 + 2);
          v47 += 12;
          if (v59 == v46) {
            goto LABEL_120;
          }
        }
        BOOL v24 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v47 - 8);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::GetMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)(v47 - 10), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v83);
        uint64_t v60 = *(void *)&v83[8];
        if (*(void *)&v83[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v83[8] + 48), 1uLL, memory_order_relaxed);
        }
        __int16 v61 = v98;
        uint64_t v98 = (atomic_ullong *)v60;
        if (v61) {
          sub_216D16E0C(v61);
        }
        sub_2169C487C(&v99, &v83[16]);
        sub_2169C48D4(&v100, &v83[20]);
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v83);
        LODWORD(v107) = *(v47 - 6);
        uint64_t v62 = (atomic_ullong *)*((void *)v47 - 2);
        if (v62) {
          atomic_fetch_add_explicit(v62 + 6, 1uLL, memory_order_relaxed);
        }
        std::string::size_type v63 = v108;
        uint64_t v108 = v62;
        if (v63) {
          sub_216D16E0C(v63);
        }
        sub_2169C487C((int *)&v109, v47 - 2);
        sub_2169C48D4((int *)&v109 + 1, v47 - 1);
        sub_2168D2318(&v110, v47);
        pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)__p);
      }
LABEL_120:
      sub_216D6B1F8((uint64_t)&v104, (uint64_t)__p);
      int v104 = (int)__p[0];
      uint64_t v64 = __p[1];
      __p[1] = 0;
      uint64_t v65 = (atomic_ullong *)v105;
      *(void *)&long long v105 = v64;
      if (v65) {
        sub_216D16E0C(v65);
      }
      sub_21697DE94((int *)&v105 + 2, &v92);
      sub_21697DEEC((int *)&v105 + 3, &v93);
      if ((v106 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v106 = v94;
      uint64_t v94 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v93);
      sub_21697C414(&v92);
      if (__p[1]) {
        sub_216D16E0C((atomic_ullong *)__p[1]);
      }
    }
    if ((v106 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v105 + 3);
    sub_21697C414((_DWORD *)&v105 + 2);
    if ((void)v105) {
      sub_216D16E0C((atomic_ullong *)v105);
    }
    if (!v24)
    {
      if ((v110 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
      sub_21697C414(&v109);
      if (v108) {
        sub_216D16E0C(v108);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v97);
      v82 += 8;
      if (v82 == v76) {
        goto LABEL_136;
      }
      continue;
    }
    break;
  }
  if (a5)
  {
    *(_DWORD *)a5 = v107;
    uint64_t v66 = v108;
    if (v108) {
      atomic_fetch_add_explicit(v108 + 6, 1uLL, memory_order_relaxed);
    }
    uint64_t v67 = *(atomic_ullong **)(a5 + 8);
    *(void *)(a5 + 8) = v66;
    if (v67) {
      sub_216D16E0C(v67);
    }
    sub_2169C487C((int *)(a5 + 16), &v109);
    sub_2169C48D4((int *)(a5 + 20), (_DWORD *)&v109 + 1);
    sub_2168D2318((void *)(a5 + 24), &v110);
  }
  uint64_t v68 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_216D16CFC((uint64_t)&v104, (uint64_t *)&v98, &v99);
  int v70 = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v68, v69);
  if ((v106 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v105 + 3);
  sub_21697C414((_DWORD *)&v105 + 2);
  if ((void)v105) {
    sub_216D16E0C((atomic_ullong *)v105);
  }
  if (v70)
  {
    unint64_t v71 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)sub_216D16CFC((uint64_t)&v104, (uint64_t *)&v98, &v99);
    StaticTfType = pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(v71);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v73);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v104, SchemaInfo, v75))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a7, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v97);
      *(void *)a7 = &unk_26C76DAD0;
    }
    else
    {
      LODWORD(__p[0]) = 1;
      __p[1] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v92);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v93);
      uint64_t v94 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a7, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)__p);
      *(void *)a7 = &unk_26C76DAD0;
      if ((v94 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v93);
      sub_21697C414(&v92);
      if (__p[1]) {
        sub_216D16E0C((atomic_ullong *)__p[1]);
      }
    }
    if ((v106 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v105 + 3);
    sub_21697C414((_DWORD *)&v105 + 2);
    if ((void)v105) {
      sub_216D16E0C((atomic_ullong *)v105);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a7, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v97);
    *(void *)a7 = &unk_26C76DAD0;
  }
  if ((v110 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
  sub_21697C414(&v109);
  if (v108) {
    sub_216D16E0C(v108);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v97);
LABEL_167:
  uint64_t v107 = (void **)&v101;
  sub_216889A04(&v107);
}

void sub_216F8AA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_DWORD *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,_DWORD *a31,_DWORD *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,_DWORD *a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,unint64_t __p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v60 = *(void *)(v58 - 136);
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a32);
  sub_21697C414(a31);
  __int16 v61 = *(atomic_ullong **)(v58 - 152);
  if (v61) {
    sub_216D16E0C(v61);
  }
  uint64_t v62 = *(void *)(v58 - 104);
  if ((v62 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a21);
  sub_21697C414(a40);
  std::string::size_type v63 = *(atomic_ullong **)(v58 - 120);
  if (v63) {
    sub_216D16E0C(v63);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)(v58 - 208));
  *(void *)(v58 - 128) = v58 - 184;
  sub_216889A04((void ***)(v58 - 128));
  _Unwind_Resume(a1);
}

_DWORD *sub_216F8AD70(uint64_t a1)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_216F8CC14((uint64_t)v2, v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

_DWORD *sub_216F8ADC0(uint64_t a1)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_216F8CC14((uint64_t)v2, v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

_DWORD *sub_216F8AE10(uint64_t a1)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_216F8D20C((uint64_t)v2, v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

_DWORD *sub_216F8AE60(uint64_t a1)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_216F8D20C((uint64_t)v2, v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a3@<X2>, int a4@<W3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  sub_216F8D4C4((uint64_t)v14, 8uLL, v13);
  sub_216F8D61C((uint64_t)v13, 8uLL, &v15);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((uint64_t)this, (uint64_t)v14, (uint64_t)v13, a2, (uint64_t)a3, a4, a5);
  sub_216F8BEB4((uint64_t)v13, v10);
  return sub_216F8C004((uint64_t)v14, v11);
}

void sub_216F8AF50(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216F8BEB4((uint64_t)va, a2);
  sub_216F8C004((uint64_t)&STACK[0x238], v4);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterials@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unint64_t v27 = a3;
  char v26 = a4;
  sub_216F8D774(a5, (a1[1] - *a1) >> 5);
  if (a3)
  {
    uint64_t v10 = *a3;
    uint64_t v9 = a3[1];
    if (v9 != *a3)
    {
      do
      {
        v9 -= 32;
        sub_216D6D4C0((uint64_t)(a3 + 2), v9);
      }
      while (v9 != v10);
    }
    a3[1] = v10;
    sub_216F8B204(a3, (a1[1] - *a1) >> 5);
  }
  sub_216F8D4C4((uint64_t)v25, 8uLL, v24);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__ *)sub_216F8D61C((uint64_t)v24, 8uLL, v29);
  uint64_t v14 = *a1;
  uint64_t v13 = a1[1];
  v23[0] = a1;
  v23[1] = &v27;
  void v23[2] = a5;
  v23[3] = v25;
  void v23[4] = v24;
  v23[5] = a2;
  v23[6] = &v26;
  if (v13 != v14)
  {
    unint64_t v18 = (v13 - v14) >> 5;
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v11))
    {
      v29[0] = 0;
      uint64_t v30 = 65539;
      int v31 = 55;
      tbb::task_group_context::init((uint64_t)v29, v15, v16, v17);
      uint64_t v28 = (tbb::task_group_context *)v29;
      uint64_t v19 = tbb::internal::allocate_root_with_context_proxy::allocate(&v28, 0x38uLL);
      *(unsigned char *)(v19 - 11) = 1;
      *(void *)uint64_t v19 = &unk_26C76DD50;
      *(void *)(v19 + 8) = v18;
      *(_OWORD *)(v19 + 16) = xmmword_217411D30;
      *(void *)(v19 + 32) = v23;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v19);
      *(_DWORD *)(v19 + 48) = 0;
      *(unsigned char *)(v19 + 52) = 5;
      *(void *)(v19 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v19 - 40) + 16))(*(void *)(v19 - 40), v19, v19 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v29);
    }
    else
    {
      sub_216F8DF6C((uint64_t)v23, 0, v18);
    }
  }
  sub_216F8BEB4((uint64_t)v24, v12);
  return sub_216F8C004((uint64_t)v25, v21);
}

void sub_216F8B194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&STACK[0x4B0], v10);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&STACK[0x4B8]);
  sub_216F8BEB4((uint64_t)va, v12);
  sub_216F8C004((uint64_t)&STACK[0x270], v13);
  STACK[0x270] = v9;
  sub_216F50D48((void ***)&STACK[0x270]);
  _Unwind_Resume(a1);
}

void sub_216F8B204(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      while (v3 != v6)
      {
        v3 -= 32;
        sub_216D6D4C0((uint64_t)(a1 + 2), v3);
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_216F8D92C((uint64_t)a1, v5);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CreateMaterialBindSubset(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v6, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v11, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6);
  v11[0] = &unk_26C76CA38;
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens)) {
    sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateGeomSubset((uint64_t)v11, a2, a3);
}

void sub_216F8B460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindSubsetsFamilyType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v4) {
    unint64_t v4 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v4 + 146) & 0xFFFFFFFFFFFFFFF8))
  {
    sub_216D16CFC((uint64_t)&v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v9, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10);
    v9[0] = &unk_26C76CA38;
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
    sub_21697C414(&v12);
    if (v11) {
      sub_216D16E0C(v11);
    }
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v6) {
      uint64_t v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::SetFamilyType((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v9, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v6 + 96), a2, v5);
  }
  uint64_t v10 = "usdShade/materialBindingAPI.cpp";
  uint64_t v11 = (atomic_ullong *)"SetMaterialBindSubsetsFamilyType";
  uint64_t v12 = 957;
  unint64_t v13 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::SetMaterialBindSubsetsFamil"
                          "yType(const TfToken &)";
  char v14 = 0;
  sub_216D1E2AC((uint64_t)this, v9);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to set invalid familyType 'unrestricted' forthe \"materialBind\" family of subsets on <%s>.", Text);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v9 + 1);
  sub_21697C414(v9);
  return 0;
}

void sub_216F8B664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this@<X0>, void *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v9, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  v9[0] = &unk_26C76CA38;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  uint64_t v4 = 0;
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens)) {
    sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v9, a2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)v9);
}

void sub_216F8B794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsetsFamilyType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  sub_216D16CFC((uint64_t)v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v8, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v3);
  v8[0] = &unk_26C76CA38;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2) {
    uint64_t v2 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyType((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)v8, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v2 + 96), v1);
}

void sub_216F8B8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CanContainPropertyName(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    uint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)v3 + 13) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v4 = (uint64_t *)((*((void *)v3 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  if (*((char *)v4 + 23) >= 0) {
    int v5 = (const char *)v4;
  }
  else {
    int v5 = (const char *)*v4;
  }
  int v6 = *((char *)EmptyString + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v7 = EmptyString[1];
  }
  size_t v8 = strlen(v5);
  if (v7 < v8) {
    return 0;
  }
  size_t v10 = v8;
  if (v6 >= 0) {
    uint64_t v11 = (const char *)EmptyString;
  }
  else {
    uint64_t v11 = (const char *)*EmptyString;
  }
  return strncmp(v11, v5, v10) == 0;
}

uint64_t *sub_216F8B9A0()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F8BA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

unint64_t sub_216F8BAD0()
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B93AE8);
  if (!v0)
  {
    unint64_t v0 = (char *)operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "material:binding:full", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "material:binding:preview", 0);
    uint64_t v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "material:binding:collection:full", 0);
    char v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "material:binding:collection:preview", 0);
    int v5 = *(void ***)v0;
    uint64_t v19 = v5;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (void **)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v6, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v19 = v6;
      }
    }
    int v7 = (atomic_uint *)*v2;
    int v20 = v7;
    if ((v7 & 7) != 0)
    {
      size_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        int v20 = v8;
      }
    }
    int v9 = (atomic_uint *)*v3;
    size_t v21 = v9;
    if ((v9 & 7) != 0)
    {
      size_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
        size_t v21 = v10;
      }
    }
    uint64_t v11 = (atomic_uint *)*v4;
    uint64_t v22 = v11;
    if ((v11 & 7) != 0)
    {
      uint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v22 = v12;
      }
    }
    *((void *)v0 + 4) = 0;
    *((void *)v0 + 5) = 0;
    *((void *)v0 + 6) = 0;
    unint64_t v13 = (char *)operator new(0x20uLL);
    uint64_t v14 = 0;
    *((void *)v0 + 4) = v13;
    *((void *)v0 + 5) = v13;
    *((void *)v0 + 6) = v13 + 32;
    do
    {
      unint64_t v15 = (unint64_t)(&v19)[v14];
      *(void *)&v13[v14 * 8] = v15;
      if ((v15 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v13[v14 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v14;
    }
    while (v14 != 4);
    *((void *)v0 + 5) = v13 + 32;
    for (uint64_t i = 3; i != -1; --i)
    {
      unint64_t v17 = (unint64_t)(&v19)[i];
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v18 = 0;
    atomic_compare_exchange_strong(&qword_267B93AE8, (unint64_t *)&v18, (unint64_t)v0);
    if (v18)
    {
      uint64_t v19 = (void **)(v0 + 32);
      sub_216889A04(&v19);
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B93AE8);
    }
  }
  return (unint64_t)v0;
}

void sub_216F8BD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

_DWORD *sub_216F8BE28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_21697C414((_DWORD *)(a1 + 32));
  uint64_t v3 = *(atomic_ullong **)(a1 + 24);
  if (v3) {
    sub_216D16E0C(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216F8BEB4(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t sub_216F8BEE8(uint64_t a1)
{
  sub_216F8BF24(a1);
  uint64_t v2 = *(tbb::internal **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  sub_216F8BF6C(a1, v2);
  return a1;
}

uint64_t sub_216F8BF24(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(tbb::internal ***)(result + 16);
  uint64_t v3 = *v2;
  *uint64_t v2 = 0;
  if (v3)
  {
    do
    {
      char v4 = *(tbb::internal **)v3;
      uint64_t result = sub_216F8BF6C(v1, v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  *(void *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_216F8BF6C(uint64_t a1, tbb::internal *this)
{
  if (*((unsigned char *)this + 24)) {
    sub_216F8BFB0(a1, (uint64_t)this);
  }

  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

_DWORD *sub_216F8BFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 16);
  char v4 = *(char **)(a2 + 16);
  *uint64_t v3 = 0;
  if (v4) {
    sub_216F8D20C((uint64_t)v3, v4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 12));

  return sub_21697C414((_DWORD *)(a2 + 8));
}

uint64_t sub_216F8C004(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t sub_216F8C038(uint64_t a1)
{
  sub_216F8C074(a1);
  uint64_t v2 = *(tbb::internal **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  sub_216F8C0BC(a1, v2);
  return a1;
}

uint64_t sub_216F8C074(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(tbb::internal ***)(result + 16);
  uint64_t v3 = *v2;
  *uint64_t v2 = 0;
  if (v3)
  {
    do
    {
      char v4 = *(tbb::internal **)v3;
      uint64_t result = sub_216F8C0BC(v1, v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  *(void *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_216F8C0BC(uint64_t a1, tbb::internal *this)
{
  if (*((unsigned char *)this + 24)) {
    sub_216F8C100(a1, (uint64_t)this);
  }

  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

_DWORD *sub_216F8C100(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 16);
  char v4 = *(char **)(a2 + 16);
  *uint64_t v3 = 0;
  if (v4) {
    sub_216F8CC14((uint64_t)v3, v4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 12));

  return sub_21697C414((_DWORD *)(a2 + 8));
}

void sub_216F8C154(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    char v4 = v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        char v4 = sub_216F8BE28((uint64_t)(v4 - 12));
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_216F8C1D8(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    do
    {
      v6 -= 48;
      v4 -= 48;
      uint64_t result = (uint64_t *)sub_216F8C278((uint64_t)(v3 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  _OWORD v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

_DWORD *sub_216F8C278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21697D878((_DWORD *)a2, (_DWORD *)a3);
  sub_21697D8B4((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  sub_21697D878((_DWORD *)(a2 + 8), (_DWORD *)(a3 + 8));
  sub_21697D8B4((_DWORD *)(a2 + 12), (_DWORD *)(a3 + 12));
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  sub_21697D878((_DWORD *)(a2 + 32), (_DWORD *)(a3 + 32));
  uint64_t result = sub_21697D8B4((_DWORD *)(a2 + 36), (_DWORD *)(a3 + 36));
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a3 + 40) = 0;
  return result;
}

uint64_t sub_216F8C304(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_216F8BE28(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216F8C354(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    size_t v10 = (char *)sub_2168073F4(v7, v9);
  }
  else {
    size_t v10 = 0;
  }
  unint64_t v13 = v10;
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)&v10[48 * v4];
  uint64_t v16 = &v10[48 * v9];
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding(v14, a2);
  unint64_t v15 = (char *)v14 + 48;
  sub_216F8C1D8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216F8C304((uint64_t)&v13);
  return v11;
}

void sub_216F8C448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F8C304((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F8C45C(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdRelationship *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    size_t v10 = (char *)sub_2168073F4(v7, v9);
  }
  else {
    size_t v10 = 0;
  }
  unint64_t v13 = v10;
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding *)&v10[48 * v4];
  uint64_t v16 = &v10[48 * v9];
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::CollectionBinding::CollectionBinding(v14, a2);
  unint64_t v15 = (char *)v14 + 48;
  sub_216F8C1D8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216F8C304((uint64_t)&v13);
  return v11;
}

void sub_216F8C550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F8C304((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216F8C564(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  unint64_t v15 = a1 + 2;
  if (v7) {
    unint64_t v8 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v7);
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v12 = &v8[32 * v3];
  uint64_t v14 = &v8[32 * v7];
  sub_216D3B3EC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  unint64_t v13 = v12 + 32;
  sub_216D6C730(a1, &v11);
  uint64_t v9 = a1[1];
  sub_216D6C948(&v11);
  return v9;
}

void sub_216F8C640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D6C948((void **)va);
  _Unwind_Resume(a1);
}

void *sub_216F8C65C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C76DCD0;
  return result;
}

void sub_216F8C694(uint64_t a1, void *a2)
{
  *a2 = &unk_26C76DCD0;
}

BOOL sub_216F8C6BC(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    uint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)v3 + 13) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v4 = (uint64_t *)((*((void *)v3 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  if (*((char *)v4 + 23) >= 0) {
    unint64_t v5 = (const char *)v4;
  }
  else {
    unint64_t v5 = (const char *)*v4;
  }
  int v6 = *((char *)EmptyString + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v7 = EmptyString[1];
  }
  size_t v8 = strlen(v5);
  if (v7 < v8) {
    return 0;
  }
  size_t v10 = v8;
  if (v6 >= 0) {
    uint64_t v11 = (const char *)EmptyString;
  }
  else {
    uint64_t v11 = (const char *)*EmptyString;
  }
  return strncmp(v11, v5, v10) == 0;
}

uint64_t sub_216F8C790(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C76DD30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216F8C7D0()
{
  return &unk_26C76DD30;
}

void sub_216F8C7DC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 40);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v4 = *(void *)(a2 + 32);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 28));
    sub_21697C414((_DWORD *)(a2 + 24));
    unint64_t v5 = *(atomic_ullong **)(a2 + 16);
    if (v5) {
      sub_216D16E0C(v5);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));
    int v6 = sub_21697C414((_DWORD *)a2);
    operator delete(v6);
  }
}

void sub_216F8C880(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        uint64_t v3 = sub_216F8BE28((uint64_t)(v3 - 12));
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_216F8C8E0(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v14 = 0;
  unint64_t v15 = (void *)v5;
  int v6 = (unsigned __int8 *)&v15;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v8 = *v6++;
    *((unsigned char *)&v14 + i) = byte_217457512[v8];
  }
  uint64_t v9 = v14;
  uint64_t v10 = a1 + 16;
  sub_216F8C9C4(a1, v5, &v15);
  uint64_t v11 = v15;
  if (v15)
  {
    unint64_t v12 = v9 | 1;
    while (1)
    {
      unint64_t v13 = v11[3];
      if (v13 > v12) {
        break;
      }
      if (v13 == v12 && v11[1] == *(void *)a2) {
        goto LABEL_11;
      }
      uint64_t v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = 0;
LABEL_11:
    *a3 = v11;
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  a3[1] = v10;
}

void sub_216F8C9C4(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 8);
  __dmb(0xBu);
  unint64_t v6 = a2 % v5;
  unint64_t v7 = sub_216851020(a2 % v5);
  unint64_t v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v9 = a1 + 8 * v7;
  uint64_t v11 = *(void *)(v9 + 48);
  uint64_t v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (uint64_t v12 = *v10, __dmb(0xBu), !*(void *)(v12 + 8 * v8))) {
    sub_216F8CA5C(a1, (atomic_ullong *)v6);
  }
  uint64_t v13 = *v10;
  __dmb(0xBu);
  *a3 = *(void *)(v13 + 8 * v8);
}

void sub_216F8CA5C(uint64_t a1, atomic_ullong *a2)
{
  unint64_t v4 = sub_21691BC60(a1, (unint64_t)a2);
  if (!sub_21691BCEC(a1, v4)) {
    sub_216F8CA5C(a1, v4);
  }
  unint64_t v5 = sub_216851020(v4);
  uint64_t v6 = *(void *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  uint64_t v11 = *(atomic_ullong **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  unint64_t v7 = &v13;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v9 = *(unsigned __int8 *)v7;
    unint64_t v7 = (atomic_ullong **)((char *)v7 + 1);
    *((unsigned char *)&v12 + i) = byte_217457512[v9];
  }
  sub_216F8CB40(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  uint64_t v10 = v13;
  sub_216912714(a1, (unint64_t)a2, &v10);
}

tbb::internal *sub_216F8CB40@<X0>(uint64_t a1@<X0>, atomic_ullong **a2@<X1>, unint64_t a3@<X2>, atomic_ullong **a4@<X8>)
{
  uint64_t i = (atomic_ullong *)**a2;
  uint64_t result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  *((void *)result + 3) = a3;
  *(void *)uint64_t result = 0;
  if (i) {
    goto LABEL_2;
  }
LABEL_3:
  while (1)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t result = i;
    while (1)
    {
      uint64_t v12 = i;
      atomic_compare_exchange_strong(v11, (unint64_t *)&v12, (unint64_t)result);
      if (v12 == i) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v11, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != i) {
        goto LABEL_8;
      }
    }
    unint64_t add_explicit = (unint64_t)i;
LABEL_8:
    if (i == (atomic_ullong *)add_explicit || result == (tbb::internal *)add_explicit) {
      break;
    }
    for (uint64_t i = *a2; ; *a2 = i)
    {
      uint64_t i = (atomic_ullong *)*i;
      if (!i) {
        break;
      }
LABEL_2:
      unint64_t v10 = i[3];
      if (v10 > a3) {
        goto LABEL_3;
      }
      if (v10 == a3)
      {
        uint64_t result = (tbb::internal *)sub_216F8C0BC(a1, result);
        goto LABEL_17;
      }
    }
  }
  uint64_t i = (atomic_ullong *)result;
LABEL_17:
  *a4 = i;
  return result;
}

void sub_216F8CC14(uint64_t a1, char *a2)
{
  if (a2)
  {
    unint64_t v4 = (void **)(a2 + 32);
    sub_216F8C154(&v4);
    unint64_t v4 = (void **)(a2 + 8);
    sub_216F8C154(&v4);
    uint64_t v3 = *(void *)a2;
    *(void *)a2 = 0;
    if (v3) {
      sub_216F8C7DC((uint64_t)a2, v3);
    }
    operator delete(a2);
  }
}

void sub_216F8CC80(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v24 = 0;
  uint64_t v25 = (atomic_ullong *)v8;
  int v9 = &v25;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v11 = *(unsigned __int8 *)v9;
    int v9 = (atomic_ullong **)((char *)v9 + 1);
    *((unsigned char *)&v24 + i) = byte_217457512[v11];
  }
  unint64_t v12 = v24 | 1;
  sub_216F8C9C4(a1, v8, &v25);
  uint64_t v13 = a1 + 16;
  if (a3)
  {
    a3[3] = v12;
    *a3 = 0;
  }
  uint64_t v14 = a2;
  while (1)
  {
    unint64_t v15 = v25;
    uint64_t v16 = (atomic_ullong *)*v25;
    if (*v25)
    {
      unint64_t v17 = v16[3];
      while (1)
      {
        uint64_t v18 = v16;
        if (v17 > v12) {
          break;
        }
        if (v17 == v12 && v16[1] == *v14)
        {
          if (a3) {
            sub_216F8C0BC(a1 + 16, (tbb::internal *)a3);
          }
          *(void *)a4 = v16;
          *(void *)(a4 + 8) = v13;
          *(unsigned char *)(a4 + 16) = 0;
          return;
        }
        uint64_t v25 = v16;
        uint64_t v16 = (atomic_ullong *)*v16;
        if (!*v18)
        {
          unint64_t v15 = v18;
          break;
        }
        unint64_t v17 = v16[3];
        unint64_t v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = (void *)sub_216F8CE74(a1 + 16, v12, (uint64_t)a2);
      uint64_t v14 = a3 + 1;
      unint64_t v15 = v25;
    }
    *a3 = v16;
    while (1)
    {
      uint64_t v19 = v16;
      atomic_compare_exchange_strong(v15, (unint64_t *)&v19, (unint64_t)a3);
      if (v19 == v16) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v15, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != v16) {
        goto LABEL_21;
      }
    }
    unint64_t add_explicit = (unint64_t)v16;
LABEL_21:
    if (v16 == (atomic_ullong *)add_explicit || a3 == (void *)add_explicit) {
      break;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = v13;
    *(unsigned char *)(a4 + 16) = 0;
  }
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 24), 1uLL);
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t v22 = *(void *)(a1 + 8);
  __dmb(0xBu);
  if ((float)((float)add / (float)v22) > *(float *)(a1 + 44))
  {
    do
    {
      unint64_t v23 = v22;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v23, 2 * v22);
    }
    while (v23 != v22 && atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 0, memory_order_relaxed) == v22);
  }
}

uint64_t sub_216F8CE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  sub_216981010((_DWORD *)(v5 + 8), (_DWORD *)a3);
  sub_21698105C((_DWORD *)(v5 + 12), (_DWORD *)(a3 + 4));
  uint64_t v6 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(v5 + 16) = v6;
  *(void *)(v5 + 24) = a2;
  *(void *)uint64_t v5 = 0;
  return v5;
}

void sub_216F8CED8(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v14 = 0;
  unint64_t v15 = (void *)v5;
  uint64_t v6 = (unsigned __int8 *)&v15;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v8 = *v6++;
    *((unsigned char *)&v14 + i) = byte_217457512[v8];
  }
  uint64_t v9 = v14;
  uint64_t v10 = a1 + 16;
  sub_216F8CFBC(a1, v5, &v15);
  int v11 = v15;
  if (v15)
  {
    unint64_t v12 = v9 | 1;
    while (1)
    {
      unint64_t v13 = v11[3];
      if (v13 > v12) {
        break;
      }
      if (v13 == v12 && v11[1] == *(void *)a2) {
        goto LABEL_11;
      }
      int v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_9;
      }
    }
    int v11 = 0;
LABEL_11:
    *a3 = v11;
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  a3[1] = v10;
}

void sub_216F8CFBC(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 8);
  __dmb(0xBu);
  unint64_t v6 = a2 % v5;
  unint64_t v7 = sub_216851020(a2 % v5);
  unint64_t v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v9 = a1 + 8 * v7;
  uint64_t v11 = *(void *)(v9 + 48);
  uint64_t v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (uint64_t v12 = *v10, __dmb(0xBu), !*(void *)(v12 + 8 * v8))) {
    sub_216F8D054(a1, (atomic_ullong *)v6);
  }
  uint64_t v13 = *v10;
  __dmb(0xBu);
  *a3 = *(void *)(v13 + 8 * v8);
}

void sub_216F8D054(uint64_t a1, atomic_ullong *a2)
{
  unint64_t v4 = sub_21691BC60(a1, (unint64_t)a2);
  if (!sub_21691BCEC(a1, v4)) {
    sub_216F8D054(a1, v4);
  }
  unint64_t v5 = sub_216851020(v4);
  uint64_t v6 = *(void *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  uint64_t v11 = *(atomic_ullong **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  unint64_t v7 = &v13;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v9 = *(unsigned __int8 *)v7;
    unint64_t v7 = (atomic_ullong **)((char *)v7 + 1);
    *((unsigned char *)&v12 + i) = byte_217457512[v9];
  }
  sub_216F8D138(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  uint64_t v10 = v13;
  sub_216912714(a1, (unint64_t)a2, &v10);
}

tbb::internal *sub_216F8D138@<X0>(uint64_t a1@<X0>, atomic_ullong **a2@<X1>, unint64_t a3@<X2>, atomic_ullong **a4@<X8>)
{
  uint64_t i = (atomic_ullong *)**a2;
  uint64_t result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  *((void *)result + 3) = a3;
  *(void *)uint64_t result = 0;
  if (i) {
    goto LABEL_2;
  }
LABEL_3:
  while (1)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t result = i;
    while (1)
    {
      uint64_t v12 = i;
      atomic_compare_exchange_strong(v11, (unint64_t *)&v12, (unint64_t)result);
      if (v12 == i) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v11, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != i) {
        goto LABEL_8;
      }
    }
    unint64_t add_explicit = (unint64_t)i;
LABEL_8:
    if (i == (atomic_ullong *)add_explicit || result == (tbb::internal *)add_explicit) {
      break;
    }
    for (uint64_t i = *a2; ; *a2 = i)
    {
      uint64_t i = (atomic_ullong *)*i;
      if (!i) {
        break;
      }
LABEL_2:
      unint64_t v10 = i[3];
      if (v10 > a3) {
        goto LABEL_3;
      }
      if (v10 == a3)
      {
        uint64_t result = (tbb::internal *)sub_216F8BF6C(a1, result);
        goto LABEL_17;
      }
    }
  }
  uint64_t i = (atomic_ullong *)result;
LABEL_17:
  *a4 = i;
  return result;
}

void sub_216F8D20C(uint64_t a1, char *a2)
{
  if (a2)
  {
    unint64_t v5 = (void **)(a2 + 120);
    sub_216D373D0(&v5);
    uint64_t v3 = (void *)*((void *)a2 + 12);
    if (v3)
    {
      *((void *)a2 + 13) = v3;
      operator delete(v3);
    }
    unint64_t v4 = (atomic_uint *)*((void *)a2 + 11);
    if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
    sub_216981EE8((uint64_t)(a2 + 48), *((void **)a2 + 7));
    sub_216D37A04((uint64_t)(a2 + 8));
    if ((*(void *)a2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

void sub_216F8D2D0(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v24 = 0;
  uint64_t v25 = (atomic_ullong *)v8;
  int v9 = &v25;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v11 = *(unsigned __int8 *)v9;
    int v9 = (atomic_ullong **)((char *)v9 + 1);
    *((unsigned char *)&v24 + i) = byte_217457512[v11];
  }
  unint64_t v12 = v24 | 1;
  sub_216F8CFBC(a1, v8, &v25);
  uint64_t v13 = a1 + 16;
  if (a3)
  {
    a3[3] = v12;
    *a3 = 0;
  }
  uint64_t v14 = a2;
  while (1)
  {
    unint64_t v15 = v25;
    uint64_t v16 = (atomic_ullong *)*v25;
    if (*v25)
    {
      unint64_t v17 = v16[3];
      while (1)
      {
        uint64_t v18 = v16;
        if (v17 > v12) {
          break;
        }
        if (v17 == v12 && v16[1] == *v14)
        {
          if (a3) {
            sub_216F8BF6C(a1 + 16, (tbb::internal *)a3);
          }
          *(void *)a4 = v16;
          *(void *)(a4 + 8) = v13;
          *(unsigned char *)(a4 + 16) = 0;
          return;
        }
        uint64_t v25 = v16;
        uint64_t v16 = (atomic_ullong *)*v16;
        if (!*v18)
        {
          unint64_t v15 = v18;
          break;
        }
        unint64_t v17 = v16[3];
        unint64_t v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = (void *)sub_216F8CE74(a1 + 16, v12, (uint64_t)a2);
      uint64_t v14 = a3 + 1;
      unint64_t v15 = v25;
    }
    *a3 = v16;
    while (1)
    {
      uint64_t v19 = v16;
      atomic_compare_exchange_strong(v15, (unint64_t *)&v19, (unint64_t)a3);
      if (v19 == v16) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v15, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != v16) {
        goto LABEL_21;
      }
    }
    unint64_t add_explicit = (unint64_t)v16;
LABEL_21:
    if (v16 == (atomic_ullong *)add_explicit || a3 == (void *)add_explicit) {
      break;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = v13;
    *(unsigned char *)(a4 + 16) = 0;
  }
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 24), 1uLL);
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t v22 = *(void *)(a1 + 8);
  __dmb(0xBu);
  if ((float)((float)add / (float)v22) > *(float *)(a1 + 44))
  {
    do
    {
      unint64_t v23 = v22;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v23, 2 * v22);
    }
    while (v23 != v22 && atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 0, memory_order_relaxed) == v22);
  }
}

uint64_t sub_216F8D4C4(uint64_t a1, unint64_t a2, _WORD *a3)
{
  *(_WORD *)a1 = *a3;
  *(void *)(a1 + 24) = 0;
  unint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  uint64_t v5[3] = 0;
  *unint64_t v5 = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v7 = 2 * v6 - 1;
  BOOL v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7)) {
    v7 >>= 32;
  }
  char v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    char v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(void *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v11);
  return a1;
}

void sub_216F8D608(_Unwind_Exception *a1)
{
  sub_216F8C038(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t sub_216F8D61C(uint64_t a1, unint64_t a2, _WORD *a3)
{
  *(_WORD *)a1 = *a3;
  *(void *)(a1 + 24) = 0;
  unint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
  uint64_t v5[3] = 0;
  *unint64_t v5 = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v7 = 2 * v6 - 1;
  BOOL v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7)) {
    v7 >>= 32;
  }
  char v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    char v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(void *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v11);
  return a1;
}

void sub_216F8D760(_Unwind_Exception *a1)
{
  sub_216F8BEE8(v1 + 16);
  _Unwind_Resume(a1);
}

void *sub_216F8D774(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216782E84(a1, a2);
    sub_216F8D7E0((uint64_t)a1, a2);
  }
  return a1;
}

void sub_216F8D7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216F8D7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a1 + 8);
  if (a2)
  {
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 24 * a2);
    uint64_t v5 = 24 * a2;
    do
    {
      sub_216F8D854(a1 + 16, v3);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v3 + 24);
      v5 -= 24;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3;
}

void sub_216F8D84C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216F8D854(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  int v3 = 1;
  unint64_t v4 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v6);
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *(void *)a2 = &unk_26C76DAD0;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216F8D918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **sub_216F8D92C(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 16;
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    return (void **)sub_216F8DA38((_DWORD *)a1, a2);
  }
  else
  {
    uint64_t v8 = v7 - *(void *)a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *(void *)a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_2168707F4(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v15 = v13;
    uint64_t v16 = &v13[32 * v10];
    unint64_t v17 = v16;
    uint64_t v18 = &v13[32 * v12];
    sub_216F8DAB4(&v15, a2);
    sub_216D6D530((uint64_t *)a1, &v15);
    return sub_216D6D6EC(&v15);
  }
}

void sub_216F8DA24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D6D6EC((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216F8DA38(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((void *)result + 1);
  if (a2)
  {
    uint64_t v4 = v3 + 32 * a2;
    uint64_t v5 = v3 + 16;
    do
    {
      *(_DWORD *)(v5 - 16) = 4;
      *(void *)(v5 - 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v5);
      uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v5 + 4));
      *(void *)(v5 + 8) = 0;
      uint64_t v6 = v5 + 16;
      v5 += 32;
    }
    while (v6 != v4);
  }
  else
  {
    uint64_t v4 = *((void *)result + 1);
  }
  *((void *)v2 + 1) = v4;
  return result;
}

_DWORD *sub_216F8DAB4(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *((void *)result + 2);
  if (a2)
  {
    uint64_t v4 = v3 + 32 * a2;
    uint64_t v5 = v3 + 16;
    do
    {
      *(_DWORD *)(v5 - 16) = 4;
      *(void *)(v5 - 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v5);
      uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(v5 + 4));
      *(void *)(v5 + 8) = 0;
      uint64_t v6 = v5 + 16;
      v5 += 32;
    }
    while (v6 != v4);
  }
  else
  {
    uint64_t v4 = *((void *)result + 2);
  }
  *((void *)v2 + 2) = v4;
  return result;
}

uint64_t sub_216F8DB38(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  uint64_t v5 = (long long *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 2);
  unint64_t v7 = *((void *)this + 3);
  unint64_t v8 = v4 - v6;
  if (v7 < v4 - v6)
  {
    unint64_t v9 = *((void *)this + 5);
    if (v9 > 1) {
      goto LABEL_12;
    }
    if (v9 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v10 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v10 - 11) = 1;
        *(void *)uint64_t v10 = &unk_26C751420;
        __dmb(0xBu);
        unsigned char v10[8] = 0;
        *((void *)this - 4) = v10;
        *((void *)v10 - 3) = 2;
        uint64_t v11 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v10, 0x38uLL);
        *(unsigned char *)(v11 - 11) = 1;
        *(void *)uint64_t v11 = &unk_26C76DD50;
        *(void *)(v11 + 8) = *((void *)this + 1);
        uint64_t v12 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v12;
        *(void *)(v11 + 16) = v12;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v13 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v13;
        *(void *)(v11 + 40) = v13;
        *(_DWORD *)(v11 + 48) = 2;
        *(unsigned char *)(v11 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v11 - 40))();
        unint64_t v6 = *((void *)this + 2);
        unint64_t v7 = *((void *)this + 3);
        unint64_t v4 = *((void *)this + 1);
        unint64_t v8 = v4 - v6;
        if (v7 >= v4 - v6) {
          break;
        }
        unint64_t v14 = *((void *)this + 5);
        if (v14 <= 1)
        {
          if (!v14 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v7 < v8 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)unint64_t v27 = 0x10000;
    long long v28 = *v5;
    uint64_t v29 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v27, *((unsigned __int8 *)this + 52));
      char v15 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v15 & 1) == 0) {
        break;
      }
      unsigned __int8 v18 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v18;
      unsigned __int8 v17 = v27[2];
      if (v27[2] < 2u)
      {
        unsigned int v16 = v27[0];
        if (v27[v27[0] + 3] < v18
          && *((void *)&v28 + 3 * v27[0] + 2) < *((void *)&v28 + 3 * v27[0]) - *((void *)&v28 + 3 * v27[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v19 = v27[1];
      unsigned __int8 v20 = v27[v27[1] + 3];
      size_t v21 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v21 - 11) = 1;
      *(void *)size_t v21 = &unk_26C751420;
      __dmb(0xBu);
      unsigned char v21[8] = 0;
      *((void *)this - 4) = v21;
      *((void *)v21 - 3) = 2;
      uint64_t v22 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v21, 0x38uLL);
      unint64_t v23 = (char *)&v28 + 24 * v19;
      *(unsigned char *)(v22 - 11) = 1;
      *(void *)uint64_t v22 = &unk_26C76DD50;
      long long v24 = *(_OWORD *)v23;
      *(void *)(v22 + 24) = *((void *)v23 + 2);
      *(_OWORD *)(v22 + 8) = v24;
      *(void *)(v22 + 32) = *((void *)this + 4);
      uint64_t v25 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v25;
      *(void *)(v22 + 40) = v25;
      *(_DWORD *)(v22 + 48) = 2;
      *(unsigned char *)(v22 + 52) = *((unsigned char *)this + 52) - v20;
      (***(void (****)(void))(v22 - 40))();
      unsigned __int8 v17 = --v27[2];
      v27[1] = (v27[1] + 1) & 7;
LABEL_27:
      if (!v17 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v16 = v27[0];
LABEL_22:
    sub_216F8DF6C(*((void *)this + 4), *((void *)&v28 + 3 * v16 + 1), *((void *)&v28 + 3 * v16));
    unsigned __int8 v17 = --v27[2];
    v27[0] = (v27[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_216F8DF6C(*((void *)this + 4), v6, v4);
  return 0;
}

void sub_216F8DF6C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3 - a2;
  if (a3 > a2)
  {
    uint64_t v5 = 32 * a2;
    uint64_t v6 = 24 * a2;
    do
    {
      unint64_t v7 = **(void ***)(a1 + 8);
      if (v7) {
        uint64_t v8 = *v7 + v5;
      }
      else {
        uint64_t v8 = 0;
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v13, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(**(void **)a1 + v5));
      void v13[3] = 0;
      v13[0] = &unk_26C76DC78;
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial((uint64_t)v13, *(void *)(a1 + 24), *(void *)(a1 + 32), *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a1 + 40), v8, **(unsigned __int8 **)(a1 + 48), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14);
      uint64_t v9 = **(void **)(a1 + 16);
      uint64_t v10 = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 48), 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *(atomic_ullong **)(v9 + v6 + 8);
      *(void *)(v9 + v6 + 8) = v10;
      if (v11) {
        sub_216D16E0C(v11);
      }
      uint64_t v12 = v9 + v6;
      sub_2169C487C((int *)(v12 + 16), &v16);
      sub_2169C48D4((int *)(v12 + 20), &v17);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v14);
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v13);
      v5 += 32;
      v6 += 24;
      --v3;
    }
    while (v3);
  }
}

void sub_216F8E0B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76DD98;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdShade/nodeDefAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdShadeNodeDefAPI pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76DD98;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F8E280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this)
{
  return 5;
}

uint64_t sub_216F8E2A8(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93AF0, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdShadeNodeDefAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216F8E490(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76DD98;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76DD98;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216F8E47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F8E490(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93AF0, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdShadeNodeDefAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93AF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93AF8))
  {
    __cxa_guard_release(&qword_267B93AF8);
  }
  return &qword_267B93AF0;
}

void sub_216F8E5C4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93B08, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)__cxa_guard_acquire(&qword_267B93B08);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_GetStaticTfType(v2);
      byte_267B93B00 = sub_216D16508((char *)&qword_267B93AF0, v3, v4);
      __cxa_guard_release(&qword_267B93B08);
    }
  }
  return byte_267B93B00;
}

void sub_216F8E644(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this)
{
  return &qword_267B93AF0;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSourceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    unint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 72), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F8E71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateImplementationSourceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v8) {
    uint64_t v8 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v8 + 72), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    unint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 64), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F8E884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v8) {
    uint64_t v8 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v8 + 64), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93B28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93B28))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v3) {
      unint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v4 = *((void *)v3 + 9);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v6) {
      int v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 8);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B93B10, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93B10, &dword_216758000);
    __cxa_guard_release(&qword_267B93B28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93B48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93B48))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216F8EBA4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93B30, &dword_216758000);
    __cxa_guard_release(&qword_267B93B48);
  }
  if (v1) {
    return &qword_267B93B30;
  }
  else {
    return &qword_267B93B10;
  }
}

void sub_216F8EB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B93B28);
  _Unwind_Resume(a1);
}

void *sub_216F8EBA4(uint64_t **a1)
{
  qword_267B93B38 = 0;
  unk_267B93B40 = 0;
  qword_267B93B30 = 0;
  sub_216973388((char **)&qword_267B93B30, ((unk_267B93B18 - qword_267B93B10) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93B30, (void *)qword_267B93B38, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93B30, (void *)qword_267B93B38, (uint64_t *)qword_267B93B10, unk_267B93B18, (unk_267B93B18 - qword_267B93B10) >> 3);
}

void sub_216F8EC3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSource(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this)
{
  v1[5] = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSourceAttr(this, (uint64_t)v1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_216F8EE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v17 = *(void *)(v16 - 40);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetShaderId(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    unint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v4 = (std::type_info_vtbl *)*((void *)v3 + 7);
  v14.__vftable = v4;
  v14.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_26C750C70 + 1;
  if ((v4 & 7) != 0)
  {
    int v5 = (std::type_info_vtbl *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)v5, 2u, memory_order_relaxed) & 1) == 0) {
      v14.__vftable = v5;
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateImplementationSourceAttr(this, &v14, 1, (uint64_t)v9);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v9, v6))
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetIdAttr(this, (uint64_t)v8);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  sub_2168EE084((uint64_t)&v14);
  return 0;
}

void sub_216F8F028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetShaderId(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
}

void sub_216F8F168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetSourceAsset(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  sub_216F8F424((uint64_t *)a3, (atomic_uint **)&v22);
  int v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5) {
    int v5 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  int v6 = (std::type_info_vtbl *)*((void *)v5 + 22);
  v24.__vftable = v6;
  v24.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_26C750C70 + 1;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24.__vftable = (std::type_info_vtbl *)((unint64_t)v24.__vftable & 0xFFFFFFFFFFFFFFF8);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateImplementationSourceAttr(this, &v24, 0, (uint64_t)v17);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v17, v7))
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v8) {
      uint64_t v8 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    v23.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_26C755A30;
    sub_2169B3DA8(&v23, (long long *)a2);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v8 + 96), 0, 1, &v23, 0, (uint64_t)&v12);
    uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v12, v9);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    if (v13) {
      sub_216D16E0C(v13);
    }
    sub_2168EE084((uint64_t)&v23);
  }
  else
  {
    uint64_t IsDefined = 0;
  }
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C(v18);
  }
  sub_2168EE084((uint64_t)&v24);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return IsDefined;
}

void sub_216F8F39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_216D2EDA0((uint64_t)&a13);
  sub_2168EE084(v17 - 56);
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216F8F424(uint64_t *a1@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    uint64_t v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v4 + 28) & 0xFFFFFFFFFFFFFFF8))
  {
    int v14 = *(atomic_uint **)(sub_216F91340() + 8);
    *a2 = v14;
    if ((v14 & 7) != 0)
    {
      int v15 = (atomic_uint *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v15, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v15;
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)sub_216F91340();
    uint64_t v22 = v5;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v22 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v6 = *a1;
    uint64_t v23 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v7) {
      int v7 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v8 = *((void *)v7 + 22);
    uint64_t v24 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    unsigned __int8 v18 = 0;
    int v20 = &v16;
    char v21 = 0;
    uint64_t v9 = (char *)operator new(0x18uLL);
    uint64_t v10 = 0;
    uint64_t v16 = v9;
    uint64_t v17 = v9;
    unsigned __int8 v18 = v9 + 24;
    do
    {
      uint64_t v11 = *(uint64_t *)((char *)&v22 + v10);
      *(void *)&v9[v10] = v11;
      if ((v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
      }
      v10 += 8;
    }
    while (v10 != 24);
    uint64_t v17 = v9 + 24;
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(&v16, &__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v20 = &v16;
    sub_216889A04((void ***)&v20);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v13 = *(uint64_t *)((char *)&v22 + i);
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
}

void sub_216F8F65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20 = 8;
  while (1)
  {
    uint64_t v21 = *(void *)(&a20 + v20);
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v20 -= 8;
    if (v20 == -8) {
      _Unwind_Resume(exception_object);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceAsset(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
}

void sub_216F8F9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v20 = *(void *)(v19 - 56);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetSourceAssetSubIdentifier(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, std::type_info_vtbl **a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  sub_216F8FCEC((uint64_t *)a3, (atomic_uint **)&v24);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5) {
    uint64_t v5 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v6 = (std::type_info_vtbl *)*((void *)v5 + 22);
  v26.__vftable = v6;
  v26.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_26C750C70 + 1;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26.__vftable = (std::type_info_vtbl *)((unint64_t)v26.__vftable & 0xFFFFFFFFFFFFFFF8);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateImplementationSourceAttr(this, &v26, 0, (uint64_t)v19);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v19, v7))
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v8) {
      uint64_t v8 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    uint64_t v9 = *a2;
    v25.__vftable = v9;
    v25.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_26C750C70
                    + 1;
    if ((v9 & 7) != 0)
    {
      uint64_t v10 = (std::type_info_vtbl *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v10, 2u, memory_order_relaxed) & 1) == 0) {
        v25.__vftable = v10;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v8 + 88), 0, 1, &v25, 0, (uint64_t)&v14);
    uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v14, v11);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_21697C414(&v16);
    if (v15) {
      sub_216D16E0C(v15);
    }
    sub_2168EE084((uint64_t)&v25);
  }
  else
  {
    uint64_t IsDefined = 0;
  }
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v20) {
    sub_216D16E0C(v20);
  }
  sub_2168EE084((uint64_t)&v26);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return IsDefined;
}

void sub_216F8FC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_216D2EDA0((uint64_t)&a13);
  sub_2168EE084(v17 - 56);
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216F8FCEC(uint64_t *a1@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    uint64_t v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v4 + 28) & 0xFFFFFFFFFFFFFFF8))
  {
    int v16 = *(atomic_uint **)(sub_216F91340() + 16);
    *a2 = v16;
    if ((v16 & 7) != 0)
    {
      uint64_t v17 = (atomic_uint *)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v17, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v17;
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)sub_216F91340();
    uint64_t v24 = v5;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v6 = *a1;
    uint64_t v25 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v7) {
      int v7 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v8 = *((void *)v7 + 22);
    uint64_t v26 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v9) {
      uint64_t v9 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v10 = *((void *)v9 + 25);
    uint64_t v27 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v22 = &v18;
    char v23 = 0;
    uint64_t v11 = (char *)operator new(0x20uLL);
    uint64_t v12 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v11;
    uint64_t v20 = v11 + 32;
    do
    {
      uint64_t v13 = *(uint64_t *)((char *)&v24 + v12);
      *(void *)&v11[v12] = v13;
      if ((v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v11[v12] &= 0xFFFFFFFFFFFFFFF8;
      }
      v12 += 8;
    }
    while (v12 != 32);
    uint64_t v19 = v11 + 32;
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(&v18, &__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v22 = &v18;
    sub_216889A04((void ***)&v22);
    for (uint64_t i = 24; i != -8; i -= 8)
    {
      uint64_t v15 = *(uint64_t *)((char *)&v24 + i);
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
}

void sub_216F8FF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  while (1)
  {
    uint64_t v23 = *((void *)v21 - 1);
    v21 -= 8;
    uint64_t v22 = v23;
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v21 == &a21) {
      _Unwind_Resume(exception_object);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceAssetSubIdentifier(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
}

void sub_216F902C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v20 = *(void *)(v19 - 56);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetSourceCode(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  sub_216F905F8(a3, (atomic_uint **)&v22);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5) {
    uint64_t v5 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v6 = (std::type_info_vtbl *)*((void *)v5 + 23);
  v24.__vftable = v6;
  v24.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_26C750C70 + 1;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24.__vftable = (std::type_info_vtbl *)((unint64_t)v24.__vftable & 0xFFFFFFFFFFFFFFF8);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateImplementationSourceAttr(a1, &v24, 0, (uint64_t)v17);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v17, v7))
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v8) {
      uint64_t v8 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    v23.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&off_26C750BB8;
    sub_21691B31C((unsigned int **)&v23, a2);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v8 + 80), 0, 1, &v23, 0, (uint64_t)&v12);
    uint64_t IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v12, v9);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    if (v13) {
      sub_216D16E0C(v13);
    }
    sub_2168EE084((uint64_t)&v23);
  }
  else
  {
    uint64_t IsDefined = 0;
  }
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C(v18);
  }
  sub_2168EE084((uint64_t)&v24);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return IsDefined;
}

void sub_216F90570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_216D2EDA0((uint64_t)&a13);
  sub_2168EE084(v17 - 56);
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216F905F8(uint64_t *a1@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    uint64_t v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v4 + 28) & 0xFFFFFFFFFFFFFFF8))
  {
    int v14 = *(atomic_uint **)(sub_216F91340() + 24);
    *a2 = v14;
    if ((v14 & 7) != 0)
    {
      int v15 = (atomic_uint *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v15, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v15;
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)sub_216F91340();
    uint64_t v22 = v5;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v22 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v6 = *a1;
    uint64_t v23 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v7) {
      int v7 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v8 = *((void *)v7 + 23);
    uint64_t v24 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v20 = &v16;
    char v21 = 0;
    uint64_t v9 = (char *)operator new(0x18uLL);
    uint64_t v10 = 0;
    uint64_t v16 = v9;
    uint64_t v17 = v9;
    uint64_t v18 = v9 + 24;
    do
    {
      uint64_t v11 = *(uint64_t *)((char *)&v22 + v10);
      *(void *)&v9[v10] = v11;
      if ((v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
      }
      v10 += 8;
    }
    while (v10 != 24);
    uint64_t v17 = v9 + 24;
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(&v16, &__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v20 = &v16;
    sub_216889A04((void ***)&v20);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v13 = *(uint64_t *)((char *)&v22 + i);
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
}

void sub_216F90830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20 = 8;
  while (1)
  {
    uint64_t v21 = *(void *)(&a20 + v20);
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v20 -= 8;
    if (v20 == -8) {
      _Unwind_Resume(exception_object);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceCode(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *a1)
{
}

void sub_216F90B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v20 = *(void *)(v19 - 56);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetShaderNodeForSourceType(pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
}

void sub_216F90F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v24 = *(void *)(v23 - 40);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F90FF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v5 = 0;
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    unint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  __p[0] = 0;
  sub_216D241E4(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 168));
}

void sub_216F91188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  sub_2168EBBB8(&a19, 0);
  sub_216BA5BB8(v19);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F91210()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F912F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

unint64_t sub_216F91340()
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B93B50);
  if (!v0)
  {
    unint64_t v0 = (char *)operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "info", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "info:sourceAsset", 0);
    unint64_t v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "info:sourceAsset:subIdentifier", 0);
    char v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "info:sourceCode", 0);
    uint64_t v5 = *(void ***)v0;
    uint64_t v19 = v5;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (void **)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v6, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v19 = v6;
      }
    }
    int v7 = (atomic_uint *)*v2;
    uint64_t v20 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v20 = v8;
      }
    }
    uint64_t v9 = (atomic_uint *)*v3;
    uint64_t v21 = v9;
    if ((v9 & 7) != 0)
    {
      uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v21 = v10;
      }
    }
    uint64_t v11 = (atomic_uint *)*v4;
    uint64_t v22 = v11;
    if ((v11 & 7) != 0)
    {
      uint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v22 = v12;
      }
    }
    *((void *)v0 + 4) = 0;
    *((void *)v0 + 5) = 0;
    *((void *)v0 + 6) = 0;
    uint64_t v13 = (char *)operator new(0x20uLL);
    uint64_t v14 = 0;
    *((void *)v0 + 4) = v13;
    *((void *)v0 + 5) = v13;
    *((void *)v0 + 6) = v13 + 32;
    do
    {
      unint64_t v15 = (unint64_t)(&v19)[v14];
      *(void *)&v13[v14 * 8] = v15;
      if ((v15 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v13[v14 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v14;
    }
    while (v14 != 4);
    *((void *)v0 + 5) = v13 + 32;
    for (uint64_t i = 3; i != -1; --i)
    {
      unint64_t v17 = (unint64_t)(&v19)[i];
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v18 = 0;
    atomic_compare_exchange_strong(&qword_267B93B50, (unint64_t *)&v18, (unint64_t)v0);
    if (v18)
    {
      uint64_t v19 = (void **)(v0 + 32);
      sub_216889A04(&v19);
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B93B50);
    }
  }
  return (unint64_t)v0;
}

void sub_216F915D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = sub_216D563F8(this);
  if ((*(void *)v3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (const std::string *)((*(void *)v3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v5) {
    uint64_t v5 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)v5 + 16) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v6 = (uint64_t *)((*((void *)v5 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(EmptyString, (uint64_t)v6, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216F917D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a4)
{
  *(_DWORD *)a1 = 3;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (int *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(void *)(a1 + 24) = 0;
  uint64_t v9 = *a3;
  if ((*a3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v9 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!EmptyString) {
    EmptyString = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)EmptyString + 16) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v11 = (const void **)((*((void *)EmptyString + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v11 = (const void **)EmptyString;
  }
  uint64_t v12 = (atomic_uint *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v13 = (uint64_t *)(v12 + 4);
  }
  else {
    uint64_t v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(v11, (const void **)v13, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v27);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit(v12, 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v27, (uint64_t)&__p);
  *(_DWORD *)a1 = __p;
  uint64_t v14 = v23;
  uint64_t v23 = 0;
  unint64_t v15 = *(atomic_ullong **)(a1 + 8);
  *(void *)(a1 + 8) = v14;
  if (v15) {
    sub_216D16E0C(v15);
  }
  sub_21697DE94(v8, &v24);
  sub_21697DEEC((int *)(a1 + 20), &v25);
  if (&__p == (void **)a1)
  {
    if ((v26 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 24);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 24) = v26;
    uint64_t v26 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_21697C414(&v24);
  if (v23) {
    sub_216D16E0C(v23);
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)a1, v17) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute((uint64_t)a2, &v27, a4, 0, 0, (uint64_t)&__p);
    *(_DWORD *)a1 = __p;
    uint64_t v18 = v23;
    uint64_t v23 = 0;
    uint64_t v19 = *(atomic_ullong **)(a1 + 8);
    *(void *)(a1 + 8) = v18;
    if (v19) {
      sub_216D16E0C(v19);
    }
    sub_21697DE94(v8, &v24);
    sub_21697DEEC((int *)(a1 + 20), &v25);
    if (&__p == (void **)a1)
    {
      if ((v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      uint64_t v20 = *(void *)(a1 + 24);
      if ((v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)(a1 + 24) = v26;
      uint64_t v26 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
    sub_21697C414(&v24);
    if (v23) {
      sub_216D16E0C(v23);
    }
  }
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216F91AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D2EDA0(v17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::Set(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  LODWORD(v12) = *(_DWORD *)a1;
  int v7 = *(atomic_ullong **)(a1 + 8);
  uint64_t v13 = v7;
  if (v7) {
    atomic_fetch_add_explicit(v7 + 6, 1uLL, memory_order_relaxed);
  }
  sub_216981010(&v14, (_DWORD *)(a1 + 16));
  sub_21698105C(&v15, (_DWORD *)(a1 + 20));
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v16 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v16 &= 0xFFFFFFFFFFFFFFF8;
  }
  int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v12, v8);
  if (IsDefined) {
    unsigned int v3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Set(&v12, a2, a3);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
  return IsDefined & v3;
}

void sub_216F91C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetRenderType(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unsigned int v3 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_216F91CC8();
  sub_216D1CF30((uint64_t)this, v3);
}

unint64_t sub_216F91CC8()
{
  unint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B93B58);
  if (!v0)
  {
    unint64_t v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "renderType", 0);
    uint64_t v2 = *(void *)v0;
    if ((*(void *)v0 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)v0 + 1) = 0;
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    uint64_t v6 = (void **)(v0 + 8);
    char v7 = 0;
    unsigned int v3 = operator new(8uLL);
    *((void *)v0 + 1) = v3;
    *((void *)v0 + 2) = v3;
    *unsigned int v3 = v2;
    uint64_t v4 = v3 + 1;
    *((void *)v0 + 3) = v3 + 1;
    if ((v2 & 7) != 0)
    {
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        *v3 &= 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)v0 + 2) = v4;
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    else
    {
      *((void *)v0 + 2) = v4;
    }
    uint64_t v5 = 0;
    atomic_compare_exchange_strong(&qword_267B93B58, (unint64_t *)&v5, (unint64_t)v0);
    if (v5)
    {
      uint64_t v6 = (void **)(v0 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B93B58);
    }
  }
  return (unint64_t)v0;
}

void sub_216F91DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_216889A04(&a9);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetRenderType@<W0>(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_216F91CC8();
  uint64_t v6 = 0;
  BOOL result = sub_216D1D1CC((uint64_t)this, v4, (uint64_t)a2, &v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::HasRenderType(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F91CC8();

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, v2);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v5 = 0;
  unsigned int v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    unsigned int v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  __p[0] = 0;
  sub_216D241E4((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 168));
}

void sub_216F920A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  sub_2168EBBB8(&a19, 0);
  sub_216BA5BB8(v19);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    uint64_t v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  sub_216928738((uint64_t)v6);
  return sub_2168EE084((uint64_t)v6);
}

void sub_216F921D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetSdrMetadata(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetSdrMetadataByKey(result);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetSdrMetadataByKey(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2) {
    uint64_t v2 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  sub_216D24A4C(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v2 + 168));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::HasSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2) {
    uint64_t v2 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v2 + 168));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::HasSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    uint64_t v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::ClearSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2) {
    uint64_t v2 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v2 + 168));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::ClearSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    uint64_t v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(this, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v4 + 168), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2);
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this);
    if (result)
    {
      uint64_t v4 = sub_216D563F8(this);
      if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
      }
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      if (!v6) {
        uint64_t v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
      }
      if ((*((void *)v6 + 16) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v7 = (uint64_t *)((*((void *)v6 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      if (*((char *)v7 + 23) >= 0) {
        uint64_t v8 = (const char *)v7;
      }
      else {
        uint64_t v8 = (const char *)*v7;
      }
      int v9 = *((char *)EmptyString + 23);
      if (v9 >= 0) {
        size_t v10 = *((unsigned __int8 *)EmptyString + 23);
      }
      else {
        size_t v10 = EmptyString[1];
      }
      size_t v11 = strlen(v8);
      if (v10 >= v11)
      {
        size_t v12 = v11;
        if (v9 >= 0) {
          uint64_t v13 = (const char *)EmptyString;
        }
        else {
          uint64_t v13 = (const char *)*EmptyString;
        }
        return strncmp(v13, v8, v12) == 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::SetConnectedSources(uint64_t a1, uint64_t *a2)
{
  sub_216F925B4(a1, (uint64_t)&v5);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::SetConnectedSources((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v5, a2);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return v3;
}

void sub_216F925A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_216F925B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a2 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a2 + 16), (_DWORD *)(a1 + 16));
  uint64_t result = sub_21698105C((_DWORD *)(a2 + 20), (_DWORD *)(a1 + 20));
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a2 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void sub_216F92660()
{
  sub_216F949C0();
  sub_216779094(__p, "Shader");
  sub_216F94AEC((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F926B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76DDF0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdShade/shader.cpp";
    size_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdShadeShader pxrInternal__aapl__pxrReserved__::UsdShadeShader::Get(const UsdStagePt"
                            "r &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    size_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76DDF0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F9287C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93B68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93B68))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93B60, "Shader");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93B60, &dword_216758000);
    __cxa_guard_release(&qword_267B93B68);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93B60, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76DDF0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdShade/shader.cpp";
    size_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdShadeShader pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define(const UsdStag"
                            "ePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    size_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76DDF0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F92A88(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93B78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93B78))
  {
    __cxa_guard_release(&qword_267B93B78);
  }
  return &qword_267B93B70;
}

void sub_216F92B30(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93B88, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)__cxa_guard_acquire(&qword_267B93B88);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v2);
      byte_267B93B80 = sub_216D16508((char *)&qword_267B93B70, v3, v4);
      __cxa_guard_release(&qword_267B93B88);
    }
  }
  return byte_267B93B80;
}

void sub_216F92BB0(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return &qword_267B93B70;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93BA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93BA8))
  {
    qword_267B93B90 = 0;
    *(void *)algn_267B93B98 = 0;
    qword_267B93BA0 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93B90, &dword_216758000);
    __cxa_guard_release(&qword_267B93BA8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93BC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93BC8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    qword_267B93BB0 = 0;
    *(void *)algn_267B93BB8 = 0;
    qword_267B93BC0 = 0;
    sub_21698FA28(&qword_267B93BB0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93BB0, &dword_216758000);
    __cxa_guard_release(&qword_267B93BC8);
  }
  if (v1) {
    return &qword_267B93BB0;
  }
  else {
    return &qword_267B93B90;
  }
}

void sub_216F92CF8(_Unwind_Exception *a1)
{
}

void sub_216F92D10(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v4 = operator new(0x10uLL);
  v4[4] = 256;
  *(void *)uint64_t v4 = &unk_26C76DE48;
  sub_216F94BD8(&v5, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(v3, &v5);
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_216F92D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdShadeShader *pxrInternal__aapl__pxrReserved__::UsdShadeShader::UsdShadeShader(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *(void *)this = &unk_26C76DDF0;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

{
  uint64_t v4;
  atomic_ullong *v5;
  int v6;
  int v7;
  uint64_t v8;

  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *(void *)this = &unk_26C76DDF0;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

void sub_216F92E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216F92F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *((void *)a2 + 3) = 0;
  *(void *)a2 = off_26C76D8C8;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216F92FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  void v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216F930A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216F9318C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216F93278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  void v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216F9336C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216F93458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216F93544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetImplementationSourceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v8, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  void v8[3] = 0;
  v8[0] = &unk_26C76DD98;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSourceAttr((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v8, a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v8);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216F93620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateImplementationSourceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  void v12[3] = 0;
  v12[0] = &unk_26C76DD98;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateImplementationSourceAttr((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216F93714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v8, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  void v8[3] = 0;
  v8[0] = &unk_26C76DD98;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v8, a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v8);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216F937F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  void v12[3] = 0;
  v12[0] = &unk_26C76DD98;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216F938E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetImplementationSource(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  sub_216D16CFC((uint64_t)&v1, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v1);
  v2[3] = 0;
  v2[0] = &unk_26C76DD98;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetImplementationSource((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v2);
}

void sub_216F939C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetShaderId(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = &unk_26C76DD98;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v10, a2);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return v3;
}

void sub_216F93AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v4, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  v4[3] = 0;
  v4[0] = &unk_26C76DD98;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v4, a2);
}

void sub_216F93B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetSourceAsset(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  void v12[3] = 0;
  v12[0] = &unk_26C76DD98;
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetSourceAsset((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  return v5;
}

void sub_216F93C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSourceAsset(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v6, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  uint64_t v6[3] = 0;
  v6[0] = &unk_26C76DD98;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceAsset((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v6, a2, a3);
}

void sub_216F93D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetSourceAssetSubIdentifier(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, std::type_info_vtbl **a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  void v12[3] = 0;
  v12[0] = &unk_26C76DD98;
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetSourceAssetSubIdentifier((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  return v5;
}

void sub_216F93E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSourceAssetSubIdentifier(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v6, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  uint64_t v6[3] = 0;
  v6[0] = &unk_26C76DD98;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceAssetSubIdentifier((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v6, a2, a3);
}

void sub_216F93F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetSourceCode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  void v12[3] = 0;
  v12[0] = &unk_26C76DD98;
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::SetSourceCode((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::~UsdShadeNodeDefAPI((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  return v5;
}

void sub_216F9404C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSourceCode(uint64_t a1)
{
  sub_216D16CFC((uint64_t)&v1, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v1);
  v2[3] = 0;
  v2[0] = &unk_26C76DD98;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetSourceCode((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v2);
}

void sub_216F94140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderNodeForSourceType(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v4, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  v4[3] = 0;
  v4[0] = &unk_26C76DD98;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI::GetShaderNodeForSourceType((pxrInternal__aapl__pxrReserved__::UsdShadeNodeDefAPI *)v4, a2);
}

void sub_216F94224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v5 = 0;
  sub_216D16CFC((uint64_t)__p, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v2) {
    uint64_t v2 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t v3 = 0;
  sub_216D241E4((uint64_t)__p, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v2 + 168));
}

void sub_216F94420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void **a19)
{
  sub_216D16AD8((uint64_t)&__p);
  sub_2168EBBB8(&a19, 0);
  sub_216BA5BB8(v19);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  sub_216D16CFC((uint64_t)v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    uint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v5, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 168), a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  sub_216928738((uint64_t)v10);
  return sub_2168EE084((uint64_t)v10);
}

void sub_216F945A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetSdrMetadata(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetSdrMetadataByKey(result);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::SetSdrMetadataByKey(uint64_t a1)
{
  sub_216D16CFC((uint64_t)&v2, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v1) {
    uint64_t v1 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  sub_216D24A4C((uint64_t)&v2, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v1 + 168));
}

void sub_216F946C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::HasSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v1) {
    uint64_t v1 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t HasMetadata = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v4, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v1 + 168));
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return HasMetadata;
}

void sub_216F94780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::HasSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D16CFC((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    uint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  uint64_t HasMetadataDictKey = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v6, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 168), a2);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  return HasMetadataDictKey;
}

void sub_216F94840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::ClearSdrMetadata(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  sub_216D16CFC((uint64_t)&v2, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v1) {
    uint64_t v1 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v2, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v1 + 168));
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
  sub_21697C414(&v4);
  if (v3) {
    sub_216D16E0C(v3);
  }
}

void sub_216F948F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::ClearSdrMetadataByKey(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v3) {
    uint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey((pxrInternal__aapl__pxrReserved__::UsdObject *)&v4, (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)((char *)v3 + 168), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216F949A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216F949C0()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F94AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F94AEC(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F94B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F94BA8(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::~UsdShadeConnectableAPIBehavior(a1);

  operator delete(v1);
}

uint64_t sub_216F94BD0()
{
  return 0;
}

void *sub_216F94BD8(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  *char v4 = &unk_26C76DEA0;
  v4[1] = 0;
  void v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216F94C30(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325190(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F94C4C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216F94C74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216F94CA4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C76DEF0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin::_cache(pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93BD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93BD8))
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdStageCache *)operator new(0x48uLL);
    pxrInternal__aapl__pxrReserved__::UsdStageCache::UsdStageCache(v2);
    qword_267B93BD0 = (uint64_t)v2;
    __cxa_guard_release(&qword_267B93BD8);
  }
  return qword_267B93BD0;
}

void sub_216F94D50(_Unwind_Exception *a1)
{
  operator delete(v1);
  __cxa_guard_abort(&qword_267B93BD8);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin::Parse@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = &v29;
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen(a1 + 96, &v28, &v43);
  sub_2167877AC((uint64_t)&v28, v29);
  char v5 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin::_cache(v4);
  sub_216ABBA60((uint64_t *)&v28, (uint64_t *)&v43);
  pxrInternal__aapl__pxrReserved__::UsdStageCache::FindOneMatching(v5, (uint64_t *)&v28, &v42);
  uint64_t v6 = v29;
  if (v29 && atomic_fetch_add_explicit(v29 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
  }
  if (v42) {
    goto LABEL_9;
  }
  sub_216ABBA60((uint64_t *)&v28, (uint64_t *)&v43);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open((uint64_t *)&v28, 0, (pxrInternal__aapl__pxrReserved__ **)&v44);
  int v7 = v42;
  uint64_t v42 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v44;
  unint64_t v44 = 0;
  sub_2168BD378((int)&v42, v7);
  sub_216E10FB8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v44);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin *)v29;
  if (v29 && atomic_fetch_add_explicit(v29 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin *))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin::_cache(v8);
  pxrInternal__aapl__pxrReserved__::UsdStageCache::Insert(v9, (uint64_t *)&v42);
  if (v42)
  {
LABEL_9:
    uint64_t v27 = a2;
    int v37 = 1;
    unint64_t v38 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v39);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v40);
    unint64_t v41 = 0;
    unint64_t v44 = *(void *)a1;
    if ((v44 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v44 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v10 = *(void *)(a1 + 208);
    uint64_t v45 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v45 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    int v36 = 0;
    uint64_t v28 = &v34;
    LOBYTE(v29) = 0;
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(0x10uLL);
    uint64_t v13 = 0;
    unint64_t v34 = v11;
    uint64_t v35 = v11;
    int v36 = (char *)v11 + 16;
    do
    {
      uint64_t v14 = *(unint64_t *)((char *)&v44 + v13);
      *(void *)((char *)v11 + v13) = v14;
      if ((v14 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)((char *)v11 + v13) &= 0xFFFFFFFFFFFFFFF8;
      }
      v13 += 8;
    }
    while (v13 != 16);
    uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 16);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v16 = *(unint64_t *)((char *)&v44 + i);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v18 = v34;
    uint64_t v17 = v35;
    if (v34 != v35)
    {
      do
      {
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v11);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v19, v18, &v44);
        uint64_t v20 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D57D70((uint64_t *)&v42);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, (uint64_t)&v28);
        int v37 = (int)v28;
        uint64_t v21 = (atomic_ullong *)v29;
        uint64_t v29 = 0;
        uint64_t v22 = v38;
        unint64_t v38 = v21;
        if (v22) {
          sub_216D16E0C(v22);
        }
        sub_21697DE94(&v39, (int *)&v30);
        sub_21697DEEC(&v40, (int *)&v30 + 1);
        if ((v41 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v41 = (unint64_t)__p;
        std::string __p = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
        sub_21697C414(&v30);
        if (v29) {
          sub_216D16E0C((atomic_ullong *)v29);
        }
        char IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v37, v23);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
        uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21697C414(&v44);
        uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v18 + 8);
        if (v18 == v17) {
          char v25 = 1;
        }
        else {
          char v25 = IsDefined;
        }
      }
      while ((v25 & 1) == 0);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v37, v12))
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v32, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v37);
      uint64_t v32 = &unk_26C76DDF0;
      if (v33
        && (*(unsigned char *)(v33 + 57) & 8) == 0
        && (off_26C76DE10((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v32) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v28);
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetSourceAsset((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v32, (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v28, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 64));
      }
      pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a1, v27);
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v32);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a1, v27);
    }
    uint64_t v28 = &v34;
    sub_216889A04((void ***)&v28);
    if ((v41 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
    sub_21697C414(&v39);
    if (v38) {
      sub_216D16E0C(v38);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a1, a2);
  }
  sub_216E10FB8(&v42);
  return sub_216ABB798(&v43);
}

void sub_216F95488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a44)
{
  sub_21682E578((uint64_t)&a28);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&a34);
  a28 = &a37;
  sub_216889A04((void ***)&a28);
  sub_216D16AD8((uint64_t)&a40);
  sub_216E10FB8(&a44);
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v44 - 256));
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin::GetDiscoveryTypes(pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93BF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93BF8))
  {
    uint64_t v2 = *(void *)sub_216F958B8();
    uint64_t v8 = v2;
    if ((v2 & 7) != 0)
    {
      unint64_t v3 = (atomic_uint *)(v2 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v8 = (uint64_t)v3;
      }
    }
    uint64_t v4 = *(void *)(sub_216F958B8() + 8);
    uint64_t v9 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v5 = *(void *)(sub_216F958B8() + 16);
    uint64_t v10 = v5;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v10 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(qword_267B93BE0, &v8, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v7 = *(uint64_t *)((char *)&v8 + i);
      if ((v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, qword_267B93BE0, &dword_216758000);
    __cxa_guard_release(&qword_267B93BF8);
  }
  return qword_267B93BE0;
}

void sub_216F95848(_Unwind_Exception *a1)
{
  uint64_t v3 = 16;
  while (1)
  {
    uint64_t v4 = *(void *)(v1 + v3);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v3 -= 8;
    if (v3 == -8)
    {
      __cxa_guard_abort(&qword_267B93BF8);
      _Unwind_Resume(a1);
    }
  }
}

unint64_t sub_216F958B8()
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B93C00);
  if (!v0)
  {
    unint64_t v0 = (char *)operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "usda", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "usdc", 0);
    uint64_t v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "usd", 0);
    uint64_t v4 = *(void ***)v0;
    uint64_t v16 = v4;
    if ((v4 & 7) != 0)
    {
      uint64_t v5 = (void **)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v16 = v5;
      }
    }
    uint64_t v6 = (atomic_uint *)*v2;
    uint64_t v17 = v6;
    if ((v6 & 7) != 0)
    {
      uint64_t v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v17 = v7;
      }
    }
    uint64_t v8 = (atomic_uint *)*v3;
    uint64_t v18 = v8;
    if ((v8 & 7) != 0)
    {
      uint64_t v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v18 = v9;
      }
    }
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    *((void *)v0 + 5) = 0;
    uint64_t v10 = (char *)operator new(0x18uLL);
    uint64_t v11 = 0;
    *((void *)v0 + 3) = v10;
    *((void *)v0 + 4) = v10;
    *((void *)v0 + 5) = v10 + 24;
    do
    {
      unint64_t v12 = (unint64_t)(&v16)[v11];
      *(void *)&v10[v11 * 8] = v12;
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v10[v11 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v11;
    }
    while (v11 != 3);
    *((void *)v0 + 4) = v10 + 24;
    for (uint64_t i = 2; i != -1; --i)
    {
      unint64_t v14 = (unint64_t)(&v16)[i];
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v15 = 0;
    atomic_compare_exchange_strong(&qword_267B93C00, (unint64_t *)&v15, (unint64_t)v0);
    if (v15)
    {
      uint64_t v16 = (void **)(v0 + 24);
      sub_216889A04(&v16);
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B93C00);
    }
  }
  return (unint64_t)v0;
}

void sub_216F95AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v11);
      _Unwind_Resume(a1);
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin::GetSourceType(pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefParserPlugin *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93C10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93C10))
  {
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B93C08, &dword_216758000);
    __cxa_guard_release(&qword_267B93C10);
  }
  return &unk_267B93C08;
}

uint64_t sub_216F95C0C()
{
  unint64_t v0 = sub_216F95EC8();

  return sub_216F95FF4(v0);
}

void sub_216F95C38(pxrInternal__aapl__pxrReserved__::NdrParserPlugin *a1, const void *a2)
{
  pxrInternal__aapl__pxrReserved__::NdrParserPlugin::~NdrParserPlugin(a1, a2);

  operator delete(v2);
}

void *sub_216F95C60(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_2168C3C3C(a1, v7, a4, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    void *v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  uint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216BA75E8((uint64_t)v22, 0);
  return v11;
}

void sub_216F95EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA75E8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_216F95EC8()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F9609C((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F95FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216F95FF4(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = &unk_26C76DF68;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_216F96080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F9609C(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F9610C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F96134(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  operator delete(v1);
}

void *sub_216F9615C()
{
  unint64_t v0 = operator new(0x10uLL);
  pxrInternal__aapl__pxrReserved__::NdrParserPlugin::NdrParserPlugin(v0);
  void *v0 = &unk_26C76DF18;
  return v0;
}

void sub_216F961A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetNodeDiscoveryResults(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetImplementationSource(a1);
}

void sub_216F966D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  __cxa_guard_abort(&qword_267B93C50);
  if ((a33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *(void *)(v34 - 184);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8(v34 - 176);
  *(void *)(v34 - 144) = v33;
  sub_216BA5A40((void ***)(v34 - 144));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetShaderProperties(pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils *this@<X0>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs(this, 0, (uint64_t *)&v6);
  uint64_t v3 = v6;
  if (v6 != v7)
  {
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get(v6, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v9, NAN);
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetSdrMetadata(v3, (uint64_t)v5);
  }
  *(void *)&long long v8 = &v6;
  sub_216F75620((void ***)&v8);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs(this, 0, (uint64_t *)&v6);
  if (v6 != v7)
  {
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetSdrMetadata(v6, (uint64_t)v5);
  }
  *(void *)&long long v8 = &v6;
  sub_216F752E0((void ***)&v8);
}

void sub_216F97630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36)
{
  sub_2169B2E0C(&a21);
  a21 = (void **)&a27;
  sub_216BB1A58(&a21);
  sub_216BA5BB8((uint64_t)&a31);
  sub_216BA5BB8((uint64_t)&a36);
  sub_2168EE084(v36 - 112);
  if (*(char *)(v36 - 185) < 0) {
    operator delete(*(void **)(v36 - 208));
  }
  sub_216BA5BB8((uint64_t)&a13);
  sub_2168EE084(v36 - 128);
  a36 = (void **)&a18;
  sub_216F752E0(&a36);
  sub_216BA861C(&a36);
  _Unwind_Resume(a1);
}

void sub_216F979E8(uint64_t a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  JUMPOUT(0x216F979E0);
}

unint64_t sub_216F979FC()
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B93C58);
  if (!v0)
  {
    unint64_t v0 = (char *)operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "primvarProperty", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "defaultInput", 0);
    uint64_t v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "implementationName", 0);
    char v4 = *(void ***)v0;
    uint64_t v16 = v4;
    if ((v4 & 7) != 0)
    {
      char v5 = (void **)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v16 = v5;
      }
    }
    uint64_t v6 = (atomic_uint *)*v2;
    unint64_t v17 = v6;
    if ((v6 & 7) != 0)
    {
      int v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v17 = v7;
      }
    }
    long long v8 = (atomic_uint *)*v3;
    size_t v18 = v8;
    if ((v8 & 7) != 0)
    {
      uint8x8_t v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
        size_t v18 = v9;
      }
    }
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    *((void *)v0 + 5) = 0;
    uint64_t v10 = (char *)operator new(0x18uLL);
    uint64_t v11 = 0;
    *((void *)v0 + 3) = v10;
    *((void *)v0 + 4) = v10;
    *((void *)v0 + 5) = v10 + 24;
    do
    {
      unint64_t v12 = (unint64_t)(&v16)[v11];
      *(void *)&v10[v11 * 8] = v12;
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v10[v11 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v11;
    }
    while (v11 != 3);
    *((void *)v0 + 4) = v10 + 24;
    for (uint64_t i = 2; i != -1; --i)
    {
      unint64_t v14 = (unint64_t)(&v16)[i];
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v15 = 0;
    atomic_compare_exchange_strong(&qword_267B93C58, (unint64_t *)&v15, (unint64_t)v0);
    if (v15)
    {
      uint64_t v16 = (void **)(v0 + 24);
      sub_216889A04(&v16);
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B93C58);
    }
  }
  return (unint64_t)v0;
}

void sub_216F97C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v11);
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetPrimvarNamesMetadataString(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v5 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  if (!v5) {
    char v5 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
  }
  if (sub_2168CB120(a1, (void *)v5 + 6))
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    if (!v6) {
      uint64_t v6 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
    }
    int v7 = sub_2168CB120(a1, (void *)v6 + 6);
    if (!v7) {
      sub_216855AEC("unordered_map::at: key not found");
    }
    if (*((char *)v7 + 47) < 0)
    {
      if (!v7[4]) {
        goto LABEL_12;
      }
    }
    else if (!*((unsigned char *)v7 + 47))
    {
      goto LABEL_12;
    }
    uint64_t v15 = sub_2167E9A44((uint64_t *)&v14, (long long *)(v7 + 3));
  }
LABEL_12:
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs(a2, 0, (uint64_t *)&v12);
  long long v8 = v12;
  for (i = v13; v8 != i; long long v8 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)((char *)v8 + 32))
  {
    uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_216F979FC();
    if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::HasSdrMetadataByKey(v8, v10))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetTypeName(v8);
      pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetSdrMetadata(v8, (uint64_t)&v17);
    }
  }
  unint64_t v17 = &v12;
  sub_216F75620((void ***)&v17);
  pxrInternal__aapl__pxrReserved__::TfStringJoin("|", &v14, a3);
  unint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput **)&v14;
  sub_216782F20((void ***)&v17);
}

void sub_216F980B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if ((__p & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216BA5BB8((uint64_t)&a25);
  std::string __p = &a19;
  sub_216F75620((void ***)&__p);
  std::string __p = &a22;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_216F981A0@<X0>(void **a1@<X0>, void *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::ShaderMetadataHelpers::IsPropertyATerminal(a2))
  {
    int v7 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    if (!v7) {
      int v7 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
    }
    uint64_t result = sub_216F98DF8(a3);
    unint64_t v9 = *((void *)v7 + 11);
  }
  else
  {
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v10) {
      uint64_t v10 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v10 + 2)) {
      goto LABEL_204;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v11) {
      uint64_t v11 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v11 + 58)) {
      goto LABEL_204;
    }
    unint64_t v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v12) {
      unint64_t v12 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v12)) {
      goto LABEL_204;
    }
    float v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v13) {
      float v13 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v13 + 56))
    {
LABEL_204:
      if (a3 && *((void *)a3 + 1))
      {
        unint64_t v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v14) {
          unint64_t v14 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v14))
        {
          if (sub_216959490(a3))
          {
            uint64_t v15 = *((void *)a3 + 1);
            uint64_t v16 = a3;
            if ((v15 & 4) != 0) {
              uint64_t v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
            }
            unsigned __int32 v17 = *(unsigned __int8 *)v16;
            v81.n128_u64[1] = (unint64_t)&unk_26C750543;
            v81.n128_u32[0] = v17;
            sub_2168ED33C(a3, &v81);
            sub_2168EE084((uint64_t)&v81);
          }
        }
        else
        {
          size_t v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v18) {
            size_t v18 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v18 + 56)
            && sub_216A31600(a3))
          {
            uint64_t v19 = *((void *)a3 + 1);
            if ((v19 & 4) != 0) {
              unint64_t v20 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
            }
            else {
              unint64_t v20 = *(unint64_t **)a3;
            }
            uint64_t v83 = 0;
            __n128 v81 = 0u;
            long long v82 = 0u;
            sub_216F4DD50(v81.n128_u64, *v20);
            unint64_t v21 = *v20;
            if (*v20)
            {
              uint64_t v22 = (unsigned __int8 *)v20[4];
              do
              {
                LODWORD(v80[0]) = *v22;
                sub_216F51340((uint64_t)&v81, v80);
                ++v22;
                --v21;
              }
              while (v21);
            }
            sub_2169079C8(&v81, (pxrInternal__aapl__pxrReserved__::VtValue *)v80);
            sub_2168ED33C(a3, v80);
            sub_2168EE084((uint64_t)v80);
            sub_2168F83DC((uint64_t)&v81);
          }
        }
      }
      uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      if (!v23) {
        uint64_t v23 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
      }
      uint64_t result = sub_216F98DF8(a3);
      unint64_t v9 = *(void *)v23;
    }
    else
    {
      char v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v25) {
        char v25 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v25 + 10)) {
        goto LABEL_205;
      }
      uint64_t v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v26) {
        uint64_t v26 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v26 + 11)) {
        goto LABEL_205;
      }
      uint64_t v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v27) {
        uint64_t v27 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v27 + 12)) {
        goto LABEL_205;
      }
      uint64_t v28 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v28) {
        uint64_t v28 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v28 + 67)) {
        goto LABEL_205;
      }
      uint64_t v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v29) {
        uint64_t v29 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v29 + 68)) {
        goto LABEL_205;
      }
      uint64_t v30 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v30) {
        uint64_t v30 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v30 + 69))
      {
LABEL_205:
        if (a3 && *((void *)a3 + 1))
        {
          int v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v31) {
            int v31 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v31 + 11))
          {
            if (sub_21695DC44(a3))
            {
              uint64_t v32 = *((void *)a3 + 1);
              uint64_t v33 = a3;
              if ((v32 & 4) != 0) {
                uint64_t v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
              }
              if ((*(void *)v33 & 0xFFFFFFFFFFFFFFF8) != 0) {
                EmptyString = (uint64_t *)((*(void *)v33 & 0xFFFFFFFFFFFFFFF8) + 16);
              }
              else {
                EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
              }
              v81.n128_u64[1] = (unint64_t)&off_26C750BB8;
              sub_21691B31C((unsigned int **)&v81, (uint64_t)EmptyString);
              sub_2168ED33C(a3, &v81);
              sub_2168EE084((uint64_t)&v81);
            }
          }
          else
          {
            uint64_t v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v35) {
              uint64_t v35 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            }
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v35 + 68)
              && sub_21699807C(a3))
            {
              uint64_t v36 = *((void *)a3 + 1);
              if ((v36 & 4) != 0) {
                int v37 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(a3);
              }
              else {
                int v37 = *(unint64_t **)a3;
              }
              uint64_t v83 = 0;
              __n128 v81 = 0u;
              long long v82 = 0u;
              sub_216F98E54(v81.n128_u64, *v37);
              unint64_t v39 = *v37;
              if (*v37)
              {
                int v40 = (void *)v37[4];
                uint64_t v41 = 8 * v39;
                do
                {
                  if ((*v40 & 0xFFFFFFFFFFFFFFF8) != 0) {
                    uint64_t v42 = (uint64_t *)((*v40 & 0xFFFFFFFFFFFFFFF8) + 16);
                  }
                  else {
                    uint64_t v42 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v38);
                  }
                  sub_216F44988((uint64_t)&v81, (long long *)v42);
                  ++v40;
                  v41 -= 8;
                }
                while (v41);
              }
              sub_216F433A0(&v81, (pxrInternal__aapl__pxrReserved__::VtValue *)v80);
              sub_2168ED33C(a3, v80);
              sub_2168EE084((uint64_t)v80);
              sub_2169B1EE4(&v81);
            }
          }
        }
        uint64_t v43 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
        if (!v43) {
          uint64_t v43 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
        }
        uint64_t result = sub_216F98DF8(a3);
        unint64_t v9 = *((void *)v43 + 1);
      }
      else
      {
        uint64_t v44 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v44) {
          uint64_t v44 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v44 + 7)) {
          goto LABEL_95;
        }
        uint64_t v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v45) {
          uint64_t v45 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v45 + 64))
        {
LABEL_95:
          uint64_t v46 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
          if (!v46) {
            uint64_t v46 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
          }
          uint64_t result = sub_216F98DF8(a3);
          unint64_t v9 = *((void *)v46 + 2);
        }
        else
        {
          long long v47 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v47) {
            long long v47 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v47 + 19)) {
            goto LABEL_104;
          }
          uint64_t v48 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v48) {
            uint64_t v48 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v48 + 76))
          {
LABEL_104:
            uint64_t v49 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
            if (!v49) {
              uint64_t v49 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
            }
            unint64_t v50 = *((void *)v49 + 2);
            if ((v50 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v50 &= 0xFFFFFFFFFFFFFFF8;
            }
            *a4 = v50;
            uint64_t result = 2;
            goto LABEL_42;
          }
          uint64_t v51 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v51) {
            uint64_t v51 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v51 + 20)) {
            goto LABEL_116;
          }
          uint64_t v52 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v52) {
            uint64_t v52 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v52 + 77))
          {
LABEL_116:
            uint64_t v53 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
            if (!v53) {
              uint64_t v53 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
            }
            unint64_t v54 = *((void *)v53 + 2);
            if ((v54 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v54 &= 0xFFFFFFFFFFFFFFF8;
            }
            *a4 = v54;
            uint64_t result = 3;
            goto LABEL_42;
          }
          uint64_t v55 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v55) {
            uint64_t v55 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v55 + 21)) {
            goto LABEL_129;
          }
          uint64_t v56 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v56) {
            uint64_t v56 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v56 + 78))
          {
LABEL_129:
            unint64_t v57 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
            if (!v57) {
              unint64_t v57 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
            }
            unint64_t v58 = *((void *)v57 + 2);
            if ((v58 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v58 &= 0xFFFFFFFFFFFFFFF8;
            }
            *a4 = v58;
            uint64_t result = 4;
            goto LABEL_42;
          }
          uint64_t v59 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v59) {
            uint64_t v59 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v59 + 35)) {
            goto LABEL_141;
          }
          uint64_t v60 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v60) {
            uint64_t v60 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v60 + 92))
          {
LABEL_141:
            __int16 v61 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
            if (!v61) {
              __int16 v61 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
            }
            uint64_t result = sub_216F98DF8(a3);
            unint64_t v9 = *((void *)v61 + 4);
          }
          else
          {
            uint64_t v62 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v62) {
              uint64_t v62 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            }
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v62 + 38)) {
              goto LABEL_151;
            }
            std::string::size_type v63 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            if (!v63) {
              std::string::size_type v63 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
            }
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v63 + 95))
            {
LABEL_151:
              uint64_t v64 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
              if (!v64) {
                uint64_t v64 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
              }
              uint64_t result = sub_216F98DF8(a3);
              unint64_t v9 = *((void *)v64 + 5);
            }
            else
            {
              uint64_t v65 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
              if (!v65) {
                uint64_t v65 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
              }
              if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v65 + 26)) {
                goto LABEL_160;
              }
              uint64_t v66 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
              if (!v66) {
                uint64_t v66 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
              }
              if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v66 + 83))
              {
LABEL_160:
                uint64_t v67 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
                if (!v67) {
                  uint64_t v67 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
                }
                uint64_t result = sub_216F98DF8(a3);
                unint64_t v9 = *((void *)v67 + 6);
              }
              else
              {
                uint64_t v68 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                if (!v68) {
                  uint64_t v68 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                }
                if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v68 + 29)) {
                  goto LABEL_169;
                }
                char v69 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                if (!v69) {
                  char v69 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                }
                if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v69 + 86))
                {
LABEL_169:
                  int v70 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
                  if (!v70) {
                    int v70 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
                  }
                  uint64_t result = sub_216F98DF8(a3);
                  unint64_t v9 = *((void *)v70 + 8);
                }
                else
                {
                  unint64_t v71 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                  if (!v71) {
                    unint64_t v71 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                  }
                  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v71 + 32)) {
                    goto LABEL_178;
                  }
                  uint64_t v72 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                  if (!v72) {
                    uint64_t v72 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                  }
                  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v72 + 89))
                  {
LABEL_178:
                    int v73 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
                    if (!v73) {
                      int v73 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
                    }
                    uint64_t result = sub_216F98DF8(a3);
                    unint64_t v9 = *((void *)v73 + 7);
                  }
                  else
                  {
                    int v74 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                    if (!v74) {
                      int v74 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                    }
                    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v74 + 45))
                    {
                      int v75 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                      if (!v75) {
                        int v75 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
                      }
                      if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(a1, (void **)v75 + 102))
                      {
                        v81.n128_u64[0] = (unint64_t)"usdShade/shaderDefUtils.cpp";
                        v81.n128_u64[1] = (unint64_t)"_GetShaderPropertyTypeAndArraySize";
                        *(void *)&long long v82 = 302;
                        *((void *)&v82 + 1) = "std::pair<TfToken, size_t> pxrInternal__aapl__pxrReserved__::_GetShaderP"
                                                "ropertyTypeAndArraySize(const SdfValueTypeName &, const NdrTokenMap &, VtValue *)";
                        LOBYTE(v83) = 0;
                        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a1, v80);
                        unint64_t v77 = (unint64_t)v80[0] & 0xFFFFFFFFFFFFFFF8;
                        if (((unint64_t)v80[0] & 0xFFFFFFFFFFFFFFF8) != 0)
                        {
                          int v78 = (const char *)(v77 + 16);
                          if (*(char *)(v77 + 39) < 0) {
                            int v78 = *(const char **)v78;
                          }
                        }
                        else
                        {
                          int v78 = "";
                        }
                        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v81, 3, (pxrInternal__aapl__pxrReserved__ *)"Shader property has unsupported type '%s'", v78);
                        if (((uint64_t)v80[0] & 7) != 0) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v80[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                        }
                        uint64_t v79 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
                        if (!v79) {
                          uint64_t v79 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
                        }
                        unint64_t v24 = *((void *)v79 + 13);
                        if ((v24 & 7) != 0
                          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                        {
                          v24 &= 0xFFFFFFFFFFFFFFF8;
                        }
                        uint64_t result = 0;
                        goto LABEL_41;
                      }
                    }
                    int v76 = (pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
                    if (!v76) {
                      int v76 = sub_216BB441C(&pxrInternal__aapl__pxrReserved__::SdrPropertyTypes);
                    }
                    uint64_t result = sub_216F98DF8(a3);
                    unint64_t v9 = *((void *)v76 + 9);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *a4 = v9;
  if ((v9 & 7) != 0)
  {
    unint64_t v24 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)v24, 2u, memory_order_relaxed) & 1) == 0) {
LABEL_41:
    }
      *a4 = v24;
  }
LABEL_42:
  a4[1] = result;
  return result;
}

void sub_216F98D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F98DF8(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  if (!this || !*((void *)this + 1) || !pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this)) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(this);
}

void sub_216F98E54(unint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    uint64_t v6 = sub_2169B21D0((uint64_t)a1, a2);
    goto LABEL_9;
  }
  if (a1[3]) {
    char v4 = a1;
  }
  else {
    char v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    uint64_t v6 = sub_2169B21D0((uint64_t)a1, a2);
    sub_2169B232C(v3, v3 + 24 * v5, (uint64_t)v6);
LABEL_9:
    sub_2169B1EE4(a1);
    a1[4] = (unint64_t)v6;
  }
}

void *sub_216F98EEC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C76DFA8;
  return result;
}

void sub_216F98F24(uint64_t a1, void *a2)
{
  *a2 = &unk_26C76DFA8;
}

BOOL sub_216F98F4C(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (byte_267B93C2F >= 0) {
    uint64_t v3 = (const char *)&qword_267B93C18;
  }
  else {
    uint64_t v3 = (const char *)qword_267B93C18;
  }
  int v4 = *((char *)EmptyString + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v5 = EmptyString[1];
  }
  size_t v6 = strlen(v3);
  if (v5 < v6) {
    return 0;
  }
  if (v4 < 0) {
    EmptyString = (uint64_t *)*EmptyString;
  }
  if (!strncmp((const char *)EmptyString, v3, v6)
    && (byte_267B93C4F >= 0 ? (int v7 = (const char *)&qword_267B93C38) : (int v7 = (const char *)qword_267B93C38),
        size_t v8 = strlen(v7),
        v5 >= v8))
  {
    return strcmp((const char *)EmptyString + v5 - v8, v7) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_216F9902C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C76E008)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216F9906C()
{
  return &unk_26C76E008;
}

uint64_t sub_216F99078(uint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, long long *a8, long long *a9)
{
  unint64_t v10 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0x12F684BDA12F684) {
    sub_21677CB10();
  }
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v11) {
    unint64_t v11 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  }
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42) {
    unint64_t v19 = 0x12F684BDA12F684;
  }
  else {
    unint64_t v19 = v11;
  }
  uint64_t v28 = a1 + 2;
  if (v19)
  {
    unint64_t v23 = v10;
    unint64_t v20 = (char *)sub_216BA76E0((uint64_t)(a1 + 2), v19);
    unint64_t v10 = v23;
  }
  else
  {
    unint64_t v20 = 0;
  }
  unint64_t v24 = v20;
  char v25 = &v20[216 * v10];
  uint64_t v27 = &v20[216 * v19];
  sub_216F991F4((pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 2), (uint64_t)v25, a2, a3, a4, a5, a6, a7, a8, a9);
  uint64_t v26 = v25 + 216;
  sub_216BA7640(a1, &v24);
  uint64_t v21 = a1[1];
  sub_216BA7820((uint64_t)&v24);
  return v21;
}

void sub_216F991E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216BA7820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216F991F4(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, long long *a9, long long *a10)
{
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  memset(v20, 0, sizeof(v20));
  int v21 = 1065353216;
  long long __p = 0uLL;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  sub_216BA6EEC(a2, a3, a4, (long long *)EmptyString, a6, a7, a8, a9, a10, &v22, (uint64_t)v20, &__p, &v17);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  sub_216BA5BB8((uint64_t)v20);
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
}

void sub_216F99308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21732491C((uint64_t)va, (uint64_t)va1, (uint64_t)va2, v7 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_216F99340(void *a1, void *a2)
{
  uint64_t result = (uint64_t)sub_2168CB1F4(a1, a2);
  if (result)
  {
    sub_216851DB0(a1, (void *)result, (uint64_t)v4);
    sub_216BA75E8((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void sub_216F99390(uint64_t *a1)
{
  if (*a1)
  {
    sub_216BB1AAC((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

BOOL sub_216F993CC(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8 || (*(unsigned char *)(v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v9 = *(void *)v8;
  v11[1] = a3;
  v11[2] = &stru_26C74E298;
  __int16 v12 = 0;
  v11[0] = &unk_26C75DD20;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

uint64_t sub_216F99474(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216F994EC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216F994EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216F99584((uint64_t)v13);
  return v11;
}

uint64_t sub_216F99584(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216F995BC((void *)a1);
  }
  return a1;
}

void *sub_216F995BC(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_216F99624(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_216F9965C(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    int v4 = result;
    do
    {
      void v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void sub_216F996D0()
{
  sub_216F9BA18();
  sub_216779094(__p, "NodeGraph");
  sub_216F9BB44((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216F99720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::~UsdShadeNodeGraph(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E028;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdShade/nodeGraph.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdShadeNodeGraph pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E028;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F998EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93C68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93C68))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93C60, "NodeGraph");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93C60, &dword_216758000);
    __cxa_guard_release(&qword_267B93C68);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93C60, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E028;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdShade/nodeGraph.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdShadeNodeGraph pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E028;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216F99AF8(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93C78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93C78))
  {
    __cxa_guard_release(&qword_267B93C78);
  }
  return &qword_267B93C70;
}

void sub_216F99BA0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93C88, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)__cxa_guard_acquire(&qword_267B93C88);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetStaticTfType(v2);
      byte_267B93C80 = sub_216D16508((char *)&qword_267B93C70, v3, v4);
      __cxa_guard_release(&qword_267B93C88);
    }
  }
  return byte_267B93C80;
}

void sub_216F99C20(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  return &qword_267B93C70;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93CA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93CA8))
  {
    qword_267B93C90 = 0;
    *(void *)algn_267B93C98 = 0;
    qword_267B93CA0 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93C90, &dword_216758000);
    __cxa_guard_release(&qword_267B93CA8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93CC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93CC8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    qword_267B93CB0 = 0;
    *(void *)algn_267B93CB8 = 0;
    qword_267B93CC0 = 0;
    sub_21698FA28(&qword_267B93CB0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93CB0, &dword_216758000);
    __cxa_guard_release(&qword_267B93CC8);
  }
  if (v1) {
    return &qword_267B93CB0;
  }
  else {
    return &qword_267B93C90;
  }
}

void sub_216F99D68(_Unwind_Exception *a1)
{
}

pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::UsdShadeNodeGraph(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *(void *)this = &unk_26C76E028;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

{
  uint64_t v4;
  atomic_ullong *v5;
  int v6;
  int v7;
  uint64_t v8;

  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *(void *)this = &unk_26C76E028;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

void sub_216F99E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216F99EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *((void *)a2 + 3) = 0;
  *(void *)a2 = off_26C76D8C8;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216F99F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  void v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216F9A074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216F9A160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216F9A24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ComputeOutputSource(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X2>, _DWORD *a4@<X3>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a5@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutput(a1, a2, (uint64_t)v37);
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v37, v10))
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes((pxrInternal__aapl__pxrReserved__::UsdShadeUtils *)v37, 0, (uint64_t)&v42);
    if (v47 != 1)
    {
      if (!v47)
      {
        LODWORD(v32) = 1;
        uint64_t v33 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v34);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v34 + 1);
        unint64_t v35 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a5, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v32);
        *(void *)a5 = &unk_26C76DDF0;
        if ((v35 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
LABEL_55:
        sub_21697C414(&v34);
        if (v33) {
          sub_216D16E0C(v33);
        }
        sub_216F80A24((uint64_t)&v42);
        goto LABEL_58;
      }
      uint64_t v32 = "usdShade/nodeGraph.cpp";
      uint64_t v33 = (atomic_ullong *)"ComputeOutputSource";
      uint64_t v34 = 190;
      unint64_t v35 = (unint64_t)"UsdShadeShader pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ComputeOutputSource(co"
                              "nst TfToken &, TfToken *, UsdShadeAttributeType *) const";
      char v36 = 0;
      unint64_t v11 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        unint64_t v12 = (const char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0) {
          unint64_t v12 = *(const char **)v12;
        }
      }
      else
      {
        unint64_t v12 = "";
      }
      sub_216D1E2AC((uint64_t)a1, &v25);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__ *)"Found multiple upstream attributes for output %s on NodeGraph %s. ComputeOutputSource will only report the first upsteam UsdShadeShader. Please use GetValueProducingAttributes to retrieve all.", v14, v12, Text);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_21697C414(&v25);
    }
    unsigned int v15 = v48;
    long long v16 = v42;
    if (v48 >= 2) {
      uint64_t v17 = v42;
    }
    else {
      uint64_t v17 = &v42;
    }
    LODWORD(v32) = *(_DWORD *)v17;
    size_t v18 = (atomic_ullong *)v17[1];
    uint64_t v33 = v18;
    if (v18) {
      atomic_fetch_add_explicit(v18 + 6, 1uLL, memory_order_relaxed);
    }
    if (v15 >= 2) {
      uint64_t v19 = (int *)(v16 + 2);
    }
    else {
      uint64_t v19 = &v44;
    }
    if (v15 >= 2) {
      unint64_t v20 = (int *)v16 + 5;
    }
    else {
      unint64_t v20 = &v45;
    }
    if (v15 >= 2) {
      int v21 = v16;
    }
    else {
      int v21 = &v42;
    }
    sub_216981010(&v34, v19);
    sub_21698105C((_DWORD *)&v34 + 1, v20);
    unint64_t v22 = v21[3];
    unint64_t v35 = v22;
    if ((v22 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v23 = sub_216D563F8(&v32);
    pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetBaseNameAndType(v23, (uint64_t)&v25);
    uint64_t v24 = *a3;
    if (&v25 != a3)
    {
      if ((v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v24 = 0;
      *a3 = v25;
      uint64_t v25 = 0;
    }
    *a4 = v26;
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_216D16CFC((uint64_t)&v25, (uint64_t *)&v33, &v34);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v30, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25);
    uint64_t v30 = (uint64_t (**)(void **))&unk_26C76DDF0;
    if ((v29 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_21697C414(&v27);
    if (v26) {
      sub_216D16E0C(v26);
    }
    if (*a4 == 2 && v31 && (*(unsigned char *)(v31 + 57) & 8) == 0 && (v30[4]((void **)&v30) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a5, (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v30);
      *(void *)a5 = &unk_26C76DDF0;
    }
    else
    {
      LODWORD(v25) = 1;
      uint64_t v26 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v28);
      uint64_t v29 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a5, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25);
      *(void *)a5 = &unk_26C76DDF0;
      if ((v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
      sub_21697C414(&v27);
      if (v26) {
        sub_216D16E0C(v26);
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v30);
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    goto LABEL_55;
  }
  LODWORD(v42) = 1;
  uint64_t v43 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v45);
  uint64_t v46 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a5, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v42);
  *(void *)a5 = &unk_26C76DDF0;
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v45);
  sub_21697C414(&v44);
  if (v43) {
    sub_216D16E0C(v43);
  }
LABEL_58:
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
  sub_21697C414(&v39);
  if (v38) {
    sub_216D16E0C(v38);
  }
}

void sub_216F9A7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)va);
  sub_216D2EDA0((uint64_t)va1);
  sub_216F80A24(v7 - 128);
  sub_216F73CDC((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_216F9A888()
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateInput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  void v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216F9A960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216F9AA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216F9AB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInterfaceInputs(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ComputeInterfaceInputConsumersMap@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  sub_216F9AD2C((uint64_t)this, (uint64_t)v19);
  if (a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    int v18 = 1065353216;
    sub_216F9B490((uint64_t)v19, &v16);
    if (*((void *)&v17 + 1))
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)(a3 + 32) = 1065353216;
      for (uint64_t i = v20; i; uint64_t i = (uint64_t *)*i)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v6 = i[6];
        uint64_t v7 = i[7];
        while (v6 != v7)
        {
          int v10 = 0;
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          sub_216F9B740(v6, &v16, (uint64_t *)&v10);
          sub_216F9D78C(&v13, v14, (uint64_t)v10, v11, (v11 - (uint64_t)v10) >> 5);
          int v21 = &v10;
          sub_216F75620((void ***)&v21);
          v6 += 32;
        }
        int v21 = (void ***)(i + 2);
        int v8 = sub_216F9D314(a3, (uint64_t)(i + 2), (uint64_t)&unk_2174BFD90, (uint64_t *)&v21) + 6;
        if (v8 != &v13) {
          sub_216F9DBF8((uint64_t)v8, v13, v14, (v14 - v13) >> 5);
        }
        int v10 = (void **)&v13;
        sub_216F75620(&v10);
      }
    }
    else
    {
      sub_2168C06A4(a3, v19);
    }
    sub_216F9D6F8((uint64_t)&v16);
  }
  else
  {
    sub_2168C06A4(a3, v19);
  }
  return sub_216F9D2D8((uint64_t)v19);
}

void sub_216F9ACD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_216F9D6F8((uint64_t)va);
  sub_216F9D2D8((uint64_t)va1);
  _Unwind_Resume(a1);
}

_DWORD *sub_216F9AD2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)a1, 1, &v51);
  uint64_t v2 = v51;
  for (uint64_t i = v52; v2 != i; v2 += 32)
  {
    uint64_t v47 = v2;
    uint64_t v4 = sub_216F9D314(a2, v2, (uint64_t)&unk_2174BFD90, &v47);
    sub_216F9BBFC((uint64_t)(v4 + 6), 0, 0, 0);
  }
  uint64_t v60 = (void **)&v51;
  sub_216F75620(&v60);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)sub_216D16CFC((uint64_t)&v60, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v5);
  uint64_t v8 = *UsdPrimDefaultPredicate;
  uint64_t v7 = UsdPrimDefaultPredicate[1];
  uint64_t v9 = UsdPrimDefaultPredicate[2];
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v62)
    && ((v8 & 0x2000) != 0 || (v7 & 0x2000) == 0))
  {
    v8 |= 0x2000uLL;
    v7 &= ~0x2000uLL;
  }
  uint64_t v47 = v8;
  uint64_t v48 = v7;
  *(void *)&long long v49 = v9;
  sub_216D5BAA4((uint64_t)&v60, &v47, (uint64_t)&v51);
  if ((v64 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v63);
  sub_21697C414(&v62);
  if (v61) {
    sub_216D16E0C(v61);
  }
  uint64_t v47 = v51;
  sub_216981010(&v48, &v52);
  sub_21698105C((_DWORD *)&v48 + 1, (_DWORD *)&v52 + 1);
  long long v49 = v53;
  uint64_t v50 = v54;
  uint64_t v43 = v55;
  sub_216981010(&v44, &v56);
  sub_21698105C((_DWORD *)&v44 + 1, &v57);
  long long v45 = v58;
  uint64_t v46 = v59;
  while (v47 != v43 || v48 != v44 || !sub_216D5D158((uint64_t)&v49, (uint64_t)&v45))
  {
    sub_216D5DD48((uint64_t)&v47, (uint64_t)v38);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v35, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v38);
    uint64_t v37 = 0;
    unint64_t v35 = off_26C76D8C8;
    if (v36
      && (*(unsigned char *)(v36 + 57) & 8) == 0
      && pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v35))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v35, 1, &v33);
      uint64_t v11 = v33;
      uint64_t v10 = v34;
      uint64_t v23 = v34;
      while (v11 != v10)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSources(&v60, v11, 0);
        uint64_t v24 = v11;
        uint64_t v12 = (void ***)v60;
        if (v66 < 2) {
          uint64_t v12 = &v60;
        }
        if (v65)
        {
          uint64_t v13 = 56 * v65;
          uint64_t v14 = (uint64_t *)(v12 + 4);
          do
          {
            sub_216D16CFC((uint64_t)&v29, v14 - 3, (_DWORD *)v14 - 4);
            sub_216D16CFC((uint64_t)&v25, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
            if (v29 == v25
              && v30 == v26
              && v31 == v27
              && (v32 & 0xFFFFFFFFFFFFFFF8) == (v28 & 0xFFFFFFFFFFFFFFF8))
            {
              int v15 = *((_DWORD *)v14 + 2);
              if ((v28 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
              sub_21697C414(&v27);
              if (v26) {
                sub_216D16E0C(v26);
              }
              if ((v32 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
              sub_21697C414(&v31);
              if (v30) {
                sub_216D16E0C(v30);
              }
              if (v15 != 1) {
                goto LABEL_36;
              }
              pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)v14, (uint64_t)&v29);
              uint64_t v25 = &v29;
              long long v16 = sub_216F9BFA0(a2, (uint64_t)&v29, (uint64_t)&unk_2174BFD90, (uint64_t *)&v25);
              unint64_t v17 = v16[7];
              if (v17 >= v16[8])
              {
                uint64_t v18 = sub_216F9C3A0(v16 + 6, v24);
              }
              else
              {
                uint64_t v20 = v16[7];
                sub_216D3B3EC((uint64_t)(v16 + 8), v17, v24);
                uint64_t v18 = v20 + 32;
                v16[7] = v20 + 32;
              }
              v16[7] = v18;
              if ((v32 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
            }
            else
            {
              if ((v28 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
              sub_21697C414(&v27);
              if (v26) {
                sub_216D16E0C(v26);
              }
              if ((v32 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
            sub_21697C414(&v31);
            if (v30) {
              sub_216D16E0C(v30);
            }
LABEL_36:
            v14 += 7;
            v13 -= 56;
          }
          while (v13);
        }
        sub_216F74B60((uint64_t)&v60);
        uint64_t v10 = v23;
        uint64_t v11 = v24 + 32;
      }
      uint64_t v60 = (void **)&v33;
      sub_216F75620(&v60);
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v35);
    if ((v42 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
    sub_21697C414(&v40);
    if (v39) {
      sub_216D16E0C(v39);
    }
    sub_216D5D974((uint64_t)&v47);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
  sub_21697C414(&v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
  sub_21697C414(&v48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v57);
  sub_21697C414(&v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v52 + 1);
  return sub_21697C414(&v52);
}

void sub_216F9B2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

void sub_216F9B490(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v4 = v2[6];
      uint64_t v5 = v2[7];
      uint64_t v13 = v2;
      while (v4 != v5)
      {
        sub_216D16CFC((uint64_t)v15, (uint64_t *)(v4 + 8), (_DWORD *)(v4 + 16));
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v20, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v15);
        uint64_t v23 = 0;
        uint64_t v20 = off_26C76D8C8;
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
        sub_21697C414(&v17);
        if (v16) {
          sub_216D16E0C(v16);
        }
        uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)sub_216D16CFC((uint64_t)v15, &v21, &v22);
        pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::_GetStaticTfType(v6);
        SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B93C70, v7);
        int IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)v15, SchemaInfo, v9);
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
        sub_21697C414(&v17);
        if (v16) {
          sub_216D16E0C(v16);
        }
        if (IsA)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v15, (const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v20);
          uint64_t v11 = sub_216F9C490(a2, (uint64_t)v15);
          pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)v15);
          if (!v11)
          {
            pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v14, (const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v20);
            sub_216F9AD2C((uint64_t)v14, (uint64_t)v15);
            pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)v14);
            pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::UsdShadeNodeGraph((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v14, (const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v20);
            uint64_t v24 = (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v14;
            uint64_t v12 = sub_216F9C788((uint64_t)a2, (uint64_t)v14, (uint64_t)&unk_2174BFD90, &v24);
            if (v12 + 5 != (void *)v15)
            {
              *((_DWORD *)v12 + 18) = v19;
              sub_216F9CB38(v12 + 5, v17, 0);
            }
            pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)v14);
            sub_216F9B490(v15, a2);
            sub_216F9D2D8((uint64_t)v15);
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v20);
        v4 += 32;
      }
      uint64_t v2 = (void *)*v13;
    }
    while (*v13);
  }
}

void sub_216F9B6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_216F9D2D8((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)va1);
  _Unwind_Resume(a1);
}

void sub_216F9B740(uint64_t a1, void *a2, uint64_t *a3)
{
  sub_216D16CFC((uint64_t)v13, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v18, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v13);
  uint64_t v18 = (uint64_t (**)(void **))&unk_26C76E028;
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (v14) {
    sub_216D16E0C(v14);
  }
  if (!v19 || (*(unsigned char *)(v19 + 57) & 8) != 0 || (v18[4]((void **)&v18) & 1) == 0)
  {
    uint64_t v10 = (uint64_t)(a3 + 2);
    unint64_t v11 = a3[1];
    if (v11 < a3[2]) {
      goto LABEL_14;
    }
LABEL_15:
    uint64_t v12 = sub_216F9C3A0(a3, a1);
    goto LABEL_16;
  }
  uint64_t v6 = sub_216F9C490(a2, (uint64_t)&v18);
  if (!v6)
  {
    uint64_t v10 = (uint64_t)(a3 + 2);
    unint64_t v11 = a3[1];
    if (v11 < a3[2]) {
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  uint64_t v7 = sub_216F9D04C(v6 + 5, a1);
  if (!v7) {
    goto LABEL_17;
  }
  uint64_t v8 = v7[6];
  uint64_t v9 = v7[7];
  if (v8 == v9)
  {
    uint64_t v10 = (uint64_t)(a3 + 2);
    unint64_t v11 = a3[1];
    if (v11 >= a3[2]) {
      goto LABEL_15;
    }
LABEL_14:
    sub_216D3B3EC(v10, a3[1], a1);
    uint64_t v12 = v11 + 32;
    a3[1] = v11 + 32;
LABEL_16:
    a3[1] = v12;
    goto LABEL_17;
  }
  do
  {
    sub_216F9B740(v8, a2, a3);
    v8 += 32;
  }
  while (v8 != v9);
LABEL_17:
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)&v18);
}

void sub_216F9B92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)va);
  _Unwind_Resume(a1);
}

void sub_216F9B97C(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v4 = operator new(0x10uLL);
  void v4[4] = 257;
  *(void *)uint64_t v4 = &unk_26C76E080;
  sub_216F9D1C8(&v5, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(v3, &v5);
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_216F9BA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216F9BA18()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216F9BAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216F9BB44(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216F9BBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F9BBFC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    sub_216F9BD50((void **)a1);
    if (a4 >> 59) {
      sub_21677CB10();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_2168C5234((void *)a1, v12);
    uint64_t v13 = sub_216F9BDC0(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 32 * v14;
    sub_216F9BEF8((uint64_t)&v19, a2, v15, (uint64_t)v9);
    uint64_t v13 = sub_216F9BDC0(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_216F9BEF8((uint64_t)&v20, a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 32;
      sub_216F756B8(v8, v18);
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_216F9BD40(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216F9BD48(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216F9BD50(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    char v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 32;
        sub_216F756B8((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      char v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_216F9BDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216D3B3EC(a1, v4, v6);
      v6 += 32;
      uint64_t v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_216F9BE6C((uint64_t)v9);
  return v4;
}

void sub_216F9BE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216F9BE6C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216F9BEA4((uint64_t *)a1);
  }
  return a1;
}

void sub_216F9BEA4(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 32;
      sub_216F756B8(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_216F9BEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    uint64_t v7 = *(void *)(v5 + 8);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 48), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(atomic_ullong **)(a4 + 8);
    *(void *)(a4 + 8) = v7;
    if (v8) {
      sub_216D16E0C(v8);
    }
    sub_2169C487C((int *)(a4 + 16), (_DWORD *)(v5 + 16));
    sub_2169C48D4((int *)(a4 + 20), (_DWORD *)(v5 + 20));
    sub_2168D2318((void *)(a4 + 24), (void *)(v5 + 24));
    a4 += 32;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

void *sub_216F9BFA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v24 = 0;
  LOBYTE(v25) = 0;
  sub_216D6EF4C((uint64_t)&v24, (unsigned int *)a2, (void *)(a2 + 8), (unsigned int *)(a2 + 16), (void *)(a2 + 24));
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * (void)v24);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == *(_DWORD *)a2
              && v12[3] == *(void *)(a2 + 8)
              && v12[4] == *(void *)(a2 + 16)
              && (v12[5] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8))
            {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v14 = operator new(0x48uLL);
  uint64_t v24 = v14;
  uint64_t v25 = a1 + 16;
  *unint64_t v14 = 0;
  v14[1] = v8;
  sub_216F9C270((uint64_t)(v14 + 2), *a4);
  char v26 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v24 = *v21;
    void *v21 = v24;
  }
  else
  {
    *uint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v24)
    {
      unint64_t v22 = *(void *)(*v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24;
    }
  }
  uint64_t v12 = v24;
  uint64_t v24 = 0;
  ++*(void *)(a1 + 24);
  sub_216F9C2D8((uint64_t)&v24, 0);
  return v12;
}

void sub_216F9C258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F9C2D8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216F9C270(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  sub_21697D878((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_216F9C2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216F9C330((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_216F9C330(uint64_t a1)
{
  unint64_t v4 = (void **)(a1 + 32);
  sub_216F75620(&v4);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
}

uint64_t sub_216F9C3A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  float v15 = a1 + 2;
  if (v7) {
    unint64_t v8 = (char *)sub_2168707F4((uint64_t)(a1 + 2), v7);
  }
  else {
    unint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v12 = &v8[32 * v3];
  unint64_t v14 = &v8[32 * v7];
  sub_216D3B3EC((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  unint64_t v13 = v12 + 32;
  sub_216F75728(a1, &v11);
  uint64_t v9 = a1[1];
  sub_216F758E4(&v11);
  return v9;
}

void sub_216F9C47C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F758E4((void **)va);
  _Unwind_Resume(a1);
}

void *sub_216F9C490(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_216F9C594((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint8x8_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11[1];
      if (v6 == v13)
      {
        if (sub_216F9C65C(v12, (uint64_t)(v11 + 2), a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t sub_216F9C594(uint64_t a1, uint64_t a2)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  uint64_t v9 = 0;
  char v10 = 0;
  sub_216D6EF4C((uint64_t)&v9, &v4, &v5, &v6, &v8);
  uint64_t v2 = v9;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

void sub_216F9C648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_216F9C65C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_216D16CFC((uint64_t)&v10, (uint64_t *)(a2 + 8), (_DWORD *)(a2 + 16));
  sub_216D16CFC((uint64_t)&v6, (uint64_t *)(a3 + 8), (_DWORD *)(a3 + 16));
  BOOL v4 = v10 == v6 && v11 == v7 && v12 == v8 && (v13 & 0xFFFFFFFFFFFFFFF8) == (v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v8 + 1);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  return v4;
}

void sub_216F9C774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216F9C788(uint64_t a1, uint64_t a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_216F9C594(a1 + 24, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      float v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (sub_216F9C65C(a1 + 32, (uint64_t)(v15 + 2), a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          float v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_216F9CA20(a1, v10, a4, (uint64_t)&v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *char v26 = *v23;
    void *v23 = v26;
  }
  else
  {
    *char v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v26)
    {
      unint64_t v24 = *(void *)(*v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26;
    }
  }
  float v15 = v26;
  ++*v8;
  return v15;
}

void sub_216F9C9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13)
{
  if (__p) {
    sub_216F9CAD8((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

double sub_216F9CA20@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v8 + 16), *a3);
  *((void *)v8 + 2) = &unk_26C76E028;
  double result = 0.0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216F9CABC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_216F9CAD8(v3, v2);
  _Unwind_Resume(a1);
}

void sub_216F9CAD8(uint64_t a1, char *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_216F9D2D8((uint64_t)(__p + 40));
    pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)(__p + 16));
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void sub_216F9CB38(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 6;
        sub_216F9CC8C(v12, (uint64_t)(v4 + 2));
        unint64_t v10 = (void *)*v8;
        sub_216EFA720(a1, (uint64_t)v8);
        unint64_t v4 = (void *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        uint64_t v8 = v10;
      }
      while (!v11);
    }
    sub_216F9CC48((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    sub_216F9CD30(a1, (uint64_t)(v4 + 2));
    unint64_t v4 = (void *)*v4;
  }
}

void sub_216F9CC18(void *a1)
{
  __cxa_begin_catch(a1);
  sub_216F9CC48(v1, v2);
  __cxa_rethrow();
}

void sub_216F9CC34(_Unwind_Exception *a1)
{
}

void sub_216F9CC48(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216F9C330((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *sub_216F9CC8C(void *a1, uint64_t a2)
{
  unint64_t v4 = (_DWORD *)*a1;
  *(_DWORD *)*a1 = *(_DWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (atomic_ullong *)*((void *)v4 + 1);
  *((void *)v4 + 1) = v5;
  if (v6) {
    sub_216D16E0C(v6);
  }
  sub_2169C487C(v4 + 4, (_DWORD *)(a2 + 16));
  sub_2169C48D4(v4 + 5, (_DWORD *)(a2 + 20));
  sub_2168D2318((void *)v4 + 3, (void *)(a2 + 24));
  uint64_t v7 = a1[1];
  if (v7 != a2 + 32) {
    sub_216F9DBF8(v7, *(void *)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 5);
  }
  return a1;
}

uint64_t sub_216F9CD30(void *a1, uint64_t a2)
{
  sub_216F9CD9C((uint64_t)a1, a2, (uint64_t)v5);
  uint64_t v3 = sub_216EFA720(a1, v5[0]);
  v5[0] = 0;
  sub_216F9C2D8((uint64_t)v5, 0);
  return v3;
}

void sub_216F9CD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F9C2D8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216F9CD9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  sub_216F9CE5C((uint64_t)v6 + 16, a2);
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t result = sub_216D6EF4C((uint64_t)&v8, (unsigned int *)v6 + 4, (void *)v6 + 3, (unsigned int *)v6 + 8, (void *)v6 + 5);
  *((void *)v6 + 1) = bswap64(0x9E3779B97F4A7C55 * v8);
  return result;
}

void sub_216F9CE44(_Unwind_Exception *a1)
{
  sub_216F9C2D8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216F9CE5C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_216F9CF18((void *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 5);
  return a1;
}

void sub_216F9CF04(_Unwind_Exception *a1)
{
  sub_216F74530(v1);
  _Unwind_Resume(a1);
}

void *sub_216F9CF18(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2168C5234(result, a4);
    uint64_t result = (void *)sub_216F9CFA0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216F9CF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216F75620(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216F9CFA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216D3B3EC(a1, v4, v6);
      v6 += 32;
      uint64_t v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_216F9BE6C((uint64_t)v9);
  return v4;
}

void sub_216F9D038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216F9D04C(void *a1, uint64_t a2)
{
  uint64_t v11 = 0;
  char v12 = 0;
  sub_216D6EF4C((uint64_t)&v11, (unsigned int *)a2, (void *)(a2 + 8), (unsigned int *)(a2 + 16), (void *)(a2 + 24));
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * v11);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v4) {
      unint64_t v7 = v5 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v4 - 1) & v5;
  }
  uint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t result = *v8; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v10 = result[1];
    if (v5 == v10)
    {
      if (*((_DWORD *)result + 4) == *(_DWORD *)a2
        && result[3] == *(void *)(a2 + 8)
        && result[4] == *(void *)(a2 + 16)
        && (result[5] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8))
      {
        return result;
      }
    }
    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }
      else
      {
        v10 &= *(void *)&v4 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return result;
}

void sub_216F9D198(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::~UsdShadeConnectableAPIBehavior(a1);

  operator delete(v1);
}

uint64_t sub_216F9D1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectOutputToSource(a1, a2, a3, a4, 0);
}

void *sub_216F9D1C8(void *a1, uint64_t a2)
{
  *a1 = a2;
  int8x8_t v4 = operator new(0x20uLL);
  *int8x8_t v4 = &unk_26C76E0D8;
  v4[1] = 0;
  void v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216F9D220(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325190(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216F9D23C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216F9D264(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216F9D294(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C76E128)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_216F9D2D8(uint64_t a1)
{
  sub_216F9CC48(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_216F9D314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v23 = 0;
  char v24 = 0;
  sub_216D6EF4C((uint64_t)&v23, (unsigned int *)a2, (void *)(a2 + 8), (unsigned int *)(a2 + 16), (void *)(a2 + 24));
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * (void)v23);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (*((_DWORD *)i + 4) == *(_DWORD *)a2
            && i[3] == *(void *)(a2 + 8)
            && i[4] == *(void *)(a2 + 16)
            && (i[5] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8))
          {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_216F9D5F4(a1, v8, a4, (uint64_t)&v23);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  unint64_t v20 = *(uint64_t **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    uint64_t *v23 = *v20;
    *unint64_t v20 = (uint64_t)v23;
  }
  else
  {
    uint64_t *v23 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v23)
    {
      unint64_t v21 = *(void *)(*v23 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v21 >= v9) {
          v21 %= v9;
        }
      }
      else
      {
        v21 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23;
    }
  }
  uint64_t i = v23;
  uint64_t v23 = 0;
  ++*(void *)(a1 + 24);
  sub_216F9C2D8((uint64_t)&v23, 0);
  return i;
}

void sub_216F9D5DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F9C2D8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216F9D5F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_216F9D664((uint64_t)(v8 + 2), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216F9D64C(_Unwind_Exception *a1)
{
  sub_216F9C2D8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216F9D664(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_216F9D6F8(uint64_t a1)
{
  sub_216F9D734(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216F9D734(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216F9D2D8((uint64_t)(v2 + 5));
      pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped((pxrInternal__aapl__pxrReserved__::UsdTyped *)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_216F9D78C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 5)
    {
      uint64_t v19 = v12 - a2;
      uint64_t v20 = (uint64_t)(v12 - a2) >> 5;
      if (v20 >= a5)
      {
        uint64_t v21 = a3 + 32 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 32 * v20;
        a1[1] = sub_216F9CFA0(v9, v21, a4, *(void *)(v9 - 8));
        if (v19 < 1) {
          return v5;
        }
      }
      sub_216F9D938((uint64_t)a1, v5, v12, v5 + 32 * a5);
      sub_216F9BEF8((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 5);
      if (v14 >> 59) {
        sub_21677CB10();
      }
      uint64_t v15 = (a2 - v13) >> 5;
      uint64_t v16 = v10 - v13;
      if (v16 >> 4 > v14) {
        unint64_t v14 = v16 >> 4;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v29 = v9;
      if (v17) {
        unint64_t v18 = (char *)sub_2168707F4(v9, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      size_t v22 = &v18[32 * v15];
      v26[0] = v18;
      v26[1] = v22;
      uint64_t v27 = v22;
      uint64_t v28 = &v18[32 * v17];
      uint64_t v23 = 32 * a5;
      char v24 = &v22[32 * a5];
      do
      {
        sub_216D3B3EC(v29, (uint64_t)v22, v7);
        v22 += 32;
        v7 += 32;
        v23 -= 32;
      }
      while (v23);
      uint64_t v27 = v24;
      uint64_t v5 = sub_216F9D9DC(a1, v26, v5);
      sub_216F758E4(v26);
    }
  }
  return v5;
}

void sub_216F9D90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216F9D938(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      sub_216D6C860(a1 + 16, v8, v10);
      v10 += 32;
      v8 += 32;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_216F9DA90((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_216F9D9DC(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216F757A0((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216F9DB64(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_216F9DA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a3 + v7;
      *(_DWORD *)(v8 - 32) = *(_DWORD *)(a3 + v7 - 32);
      uint64_t v10 = *(void *)(a3 + v7 - 24);
      *(void *)(a3 + v7 - 24) = 0;
      uint64_t v11 = *(atomic_ullong **)(a4 + v7 - 24);
      *(void *)(v8 - 24) = v10;
      if (v11) {
        sub_216D16E0C(v11);
      }
      sub_21697DE94((int *)(v8 - 16), (int *)(v9 - 16));
      sub_21697DEEC((int *)(v8 - 12), (int *)(v9 - 12));
      if (v9 != v8)
      {
        uint64_t v12 = *(void *)(v8 - 8);
        if ((v12 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *(void *)(v8 - 8) = *(void *)(v9 - 8);
        *(void *)(v9 - 8) = 0;
      }
      v7 -= 32;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_216F9DB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216D6C860(a1, v4, v6);
      v6 += 32;
      uint64_t v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_216F9BE6C((uint64_t)v9);
  return v4;
}

void sub_216F9DBF8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    sub_216F9BD50((void **)a1);
    if (a4 >> 59) {
      sub_21677CB10();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_2168C5234((void *)a1, v12);
    uint64_t v13 = sub_216F9CFA0(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 32 * v14;
    sub_216F9BEF8((uint64_t)&v19, a2, v15, (uint64_t)v9);
    uint64_t v13 = sub_216F9CFA0(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_216F9BEF8((uint64_t)&v20, a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 32;
      sub_216F756B8(v8, v18);
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_216F9DD3C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216F9DD44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *pxrInternal__aapl__pxrReserved__::UsdShadeTokensType::UsdShadeTokensType(pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *this)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  uint64_t v46 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v46, "bindMaterialAs", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "coordSys", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "coordSys:__INSTANCE_NAME__:binding", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "displacement", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "fallbackStrength", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "full", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "id", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "info:id", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "info:implementationSource", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "inputs:", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "interfaceOnly", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "materialBind", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "material:binding", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "material:binding:collection", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "materialVariant", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "outputs:", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "outputs:displacement", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "outputs:surface", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "outputs:volume", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "preview", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "sdrMetadata", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "sourceAsset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "sourceCode", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "strongerThanDescendants", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "subIdentifier", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "surface", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "volume", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "weakerThanDescendants", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "ConnectableAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "CoordSysAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "Material", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "MaterialBindingAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "NodeDefAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "NodeGraph", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "Shader", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v47 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v46;
  uint64_t v48 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v49 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v50 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v51 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v52 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v53 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v54 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v55 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v56 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v57 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v58 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v59 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v60 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v61 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v62 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v63 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v64 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v65 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v66 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v67 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v68 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v69 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v70 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v71 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v72 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v73 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v74 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v75 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v76 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v32 = *((void *)this + 30);
  uint64_t v77 = v32;
  if ((v32 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *((void *)this + 31);
  uint64_t v78 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v79 = v34;
  if ((v34 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v35 = *((void *)this + 33);
  uint64_t v80 = v35;
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v36 = *((void *)this + 34);
  uint64_t v81 = v36;
  if ((v36 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v37 = *((void *)this + 35);
  uint64_t v82 = v37;
  if ((v37 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v38 = *((void *)this + 36);
  uint64_t v83 = v38;
  if ((v38 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v39 = *((void *)this + 37);
  uint64_t v84 = v39;
  if ((v39 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  int v40 = (char *)operator new(0x130uLL);
  uint64_t v41 = 0;
  *((void *)this + 38) = v40;
  *((void *)this + 39) = v40;
  *((void *)this + 40) = v40 + 304;
  do
  {
    uint64_t v42 = *(uint64_t *)((char *)&v47 + v41);
    *(void *)&v40[v41] = v42;
    if ((v42 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v40[v41] &= 0xFFFFFFFFFFFFFFF8;
    }
    v41 += 8;
  }
  while (v41 != 304);
  *((void *)this + 39) = v40 + 304;
  for (uint64_t i = 296; i != -8; i -= 8)
  {
    uint64_t v44 = *(uint64_t *)((char *)&v47 + i);
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216F9E8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void **a39,uint64_t a40,char a41)
{
  sub_216889A04(&a39);
  uint64_t v51 = 296;
  while (1)
  {
    uint64_t v52 = *(void *)(&a41 + v51);
    if ((v52 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v51 -= 8;
    if (v51 == -8)
    {
      if ((*v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216F9ED60()
{
}

void sub_216F9ED68()
{
}

void sub_216F9ED70()
{
}

void sub_216F9ED78()
{
}

void sub_216F9ED80()
{
}

void sub_216F9ED88()
{
}

void sub_216F9ED90()
{
}

void sub_216F9ED98()
{
}

void sub_216F9EDA0()
{
}

void sub_216F9EDA8()
{
}

void sub_216F9EDB0()
{
}

void sub_216F9EDB8()
{
}

void sub_216F9EDC0()
{
}

void sub_216F9EDC8()
{
}

void sub_216F9EDD0()
{
}

void sub_216F9EDD8()
{
}

void sub_216F9EDE0()
{
}

void sub_216F9EDE8()
{
}

void sub_216F9EDF0()
{
}

void sub_216F9EDF8()
{
}

void sub_216F9EE00()
{
}

void sub_216F9EE08()
{
}

void sub_216F9EE10()
{
}

void sub_216F9EE18()
{
}

void sub_216F9EE20()
{
}

void sub_216F9EE28()
{
}

void sub_216F9EE30()
{
}

void sub_216F9EE38()
{
}

void sub_216F9EE40()
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::IsUdimIdentifier(const std::string *a1)
{
  sub_216F9EED0(a1, &v7);
  std::string::size_type v1 = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  std::string::size_type size = v7.__r_.__value_.__l.__size_;
  uint64_t v3 = v10;
  uint64_t v4 = v9;
  if ((char)v10 < 0)
  {
    operator delete(__p);
    if ((v1 & 0x80) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((unsigned char *)&v7.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v7.__r_.__value_.__l.__data_);
  std::string::size_type v1 = size;
LABEL_3:
  if ((v3 & 0x80u) == 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v4;
  }
  return (v1 | v5) != 0;
}

double sub_216F9EED0@<D0>(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93CE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93CE8))
  {
    sub_216779094(&v24, "<UDIM>");
    sub_216A3A700((uint64_t)&qword_267B93CD0, (long long *)&v24, 1uLL);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    __cxa_atexit((void (*)(void *))sub_216963C50, &qword_267B93CD0, &dword_216758000);
    __cxa_guard_release(&qword_267B93CE8);
  }
  uint64_t v3 = qword_267B93CD0;
  uint64_t v4 = unk_267B93CD8;
  if (qword_267B93CD0 == unk_267B93CD8)
  {
LABEL_29:
    a2->__r_.__value_.__r.__words[2] = 0;
    a2[1].__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2[1].__r_.__value_.__l.__size_ = 0;
    a2[1].__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    int v5 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v5 >= 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = (const std::string *)a1->__r_.__value_.__r.__words[0];
    }
    if (v5 >= 0) {
      int64_t size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = a1->__r_.__value_.__l.__size_;
    }
    uint64_t v8 = (char *)v6 + size;
    while (1)
    {
      int v9 = *(char *)(v3 + 23);
      unsigned __int8 v10 = v9 >= 0 ? (char *)v3 : *(char **)v3;
      int64_t v11 = v9 >= 0 ? *(unsigned __int8 *)(v3 + 23) : *(void *)(v3 + 8);
      if (!v11) {
        break;
      }
      if (size >= v11)
      {
        int v12 = *v10;
        int64_t v13 = size;
        uint64_t v14 = (std::string *)v6;
        do
        {
          int64_t v15 = v13 - v11;
          if (v15 == -1) {
            break;
          }
          uint64_t v16 = (char *)memchr(v14, v12, v15 + 1);
          if (!v16) {
            break;
          }
          uint64_t v18 = v16;
          if (!memcmp(v16, v10, v11))
          {
            if (v18 == v8) {
              break;
            }
            std::string::size_type v19 = v18 - (char *)v6;
            if (v18 - (char *)v6 == -1) {
              break;
            }
            goto LABEL_31;
          }
          uint64_t v14 = (std::string *)(v18 + 1);
          int64_t v13 = v8 - (v18 + 1);
        }
        while (v13 >= v11);
      }
      v3 += 24;
      if (v3 == v4) {
        goto LABEL_29;
      }
    }
    std::string::size_type v19 = 0;
LABEL_31:
    std::string::basic_string(&v24, a1, 0, v19, (std::allocator<char> *)&v22);
    if (*(char *)(v3 + 23) < 0) {
      uint64_t v20 = *(void *)(v3 + 8);
    }
    else {
      uint64_t v20 = *(unsigned __int8 *)(v3 + 23);
    }
    std::string::basic_string(&v22, a1, v20 + v19, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
    *a2 = v24;
    double result = *(double *)&v22.__r_.__value_.__l.__data_;
    a2[1] = v22;
  }
  return result;
}

void sub_216F9F118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_267B93CE8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ResolveUdimTilePaths(const std::string *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
}

void sub_216F9F170(const std::string *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_216F9EED0(a1, &v25);
  std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v25.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_7;
  }
  std::string::size_type v9 = v28;
  if ((v28 & 0x80u) != 0) {
    std::string::size_type v9 = v27;
  }
  if (v9)
  {
LABEL_7:
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v7);
    int v11 = 1001;
    while (1)
    {
      std::to_string(&v24, v11);
      pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)&v25.__r_.__value_.__l.__data_, (const void **)&v24.__r_.__value_.__l.__data_, (uint64_t)&__p);
      if ((v28 & 0x80u) == 0) {
        int v12 = (const std::string::value_type *)&v26;
      }
      else {
        int v12 = (const std::string::value_type *)v26;
      }
      if ((v28 & 0x80u) == 0) {
        std::string::size_type v13 = v28;
      }
      else {
        std::string::size_type v13 = v27;
      }
      uint64_t v14 = std::string::append(&__p, v12, v13);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v16 = sub_21697CF14(a2);
      if (v17 & 1 | (unint64_t)v16)
      {
        pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(a2, (uint64_t)&v23, (uint64_t)&__p);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        std::string v23 = __p;
      }
      pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
      std::string::operator=(&v23, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::size_type v18 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      int v19 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v18 = v23.__r_.__value_.__l.__size_;
      }
      if (v18)
      {
        sub_216F9F9E8((char *)&__p, (long long *)&v23, (long long *)&v24);
        sub_216830030(a4, (long long *)&__p);
        if (v22 < 0) {
          operator delete(v21);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        int v19 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
        if (a3) {
          break;
        }
      }
      if (v19 < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (++v11 == 1101) {
        goto LABEL_40;
      }
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
LABEL_40:
  if ((char)v28 < 0) {
    operator delete(v26);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_216F9F39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30)
{
}

void pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ResolveUdimPath(const std::string *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  v39[2] = *MEMORY[0x263EF8340];
  sub_216F9F170(a1, a2, 1, v37);
  if (v37[0] == v37[1])
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    sub_216F9EED0(a1, &v34);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    if (*(char *)(v37[0] + 23) < 0)
    {
      sub_216778F24(&__str, *(void **)v37[0], *(void *)(v37[0] + 8));
    }
    else
    {
      long long v5 = *(_OWORD *)v37[0];
      __str.__r_.__value_.__r.__words[2] = *(void *)(v37[0] + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v5;
    }
    if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)&__str))
    {
      pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner((uint64_t)&__str, (uint64_t)&v27);
      v25[0] = &v31;
      v25[1] = &__str;
      sub_21696AB3C(v25, (long long *)&v27);
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
    }
    sub_216F9EED0(a1, &v27);
    *(_OWORD *)std::string v25 = *(_OWORD *)__p;
    uint64_t v26 = v29;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    uint64_t v6 = (void *)HIBYTE(v26);
    if (v26 >= 0) {
      std::string v7 = v25;
    }
    else {
      std::string v7 = (void **)v25[0];
    }
    int v8 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    size_t v10 = strlen((const char *)v7);
    if (size < v10) {
      goto LABEL_23;
    }
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    if (!strcmp((const char *)p_str + size - v10, (const char *)v7))
    {
      if ((char)v6 >= 0) {
        long long v15 = v6;
      }
      else {
        long long v15 = v25[1];
      }
      std::string::basic_string(&v24, &__str, 0, size - (void)v15 - 4, (std::allocator<char> *)&v38);
      uint64_t v16 = std::string::append(&v24, "<UDIM>");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (v26 >= 0) {
        std::string::size_type v18 = v25;
      }
      else {
        std::string::size_type v18 = (void **)v25[0];
      }
      if (v26 >= 0) {
        std::string::size_type v19 = HIBYTE(v26);
      }
      else {
        std::string::size_type v19 = (std::string::size_type)v25[1];
      }
      uint64_t v20 = std::string::append(&v27, (const std::string::value_type *)v18, v19);
      std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
      v39[0] = v20->__r_.__value_.__l.__size_;
      *(void *)((char *)v39 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __str.__r_.__value_.__r.__words[0] = v21;
      __str.__r_.__value_.__l.__size_ = v39[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v39 + 7);
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = v22;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      uint64_t v23 = HIBYTE(v33);
      if (v33 < 0) {
        uint64_t v23 = v32;
      }
      if (v23)
      {
        pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&v31, (uint64_t)&__str, a3);
      }
      else if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_216778F24(a3, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        *a3 = __str;
      }
    }
    else
    {
LABEL_23:
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdShade/udimUtils.cpp";
      v27.__r_.__value_.__l.__size_ = (std::string::size_type)"ResolveUdimPath";
      v27.__r_.__value_.__r.__words[2] = 166;
      __p[0] = "static std::string pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ResolveUdimPath(const std::string"
               " &, const SdfLayerHandle &)";
      LOBYTE(__p[1]) = 0;
      if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = (uint64_t *)a1;
      }
      else {
        std::string::size_type v13 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
      }
      uint64_t v14 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v8 >= 0) {
        uint64_t v14 = &__str;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v27, (pxrInternal__aapl__pxrReserved__ *)"Resolution of first udim tile gave ambigious result. First tile for '%s' is '%s'.", v11, v13, v14);
      a3->__r_.__value_.__r.__words[0] = 0;
      a3->__r_.__value_.__l.__size_ = 0;
      a3->__r_.__value_.__r.__words[2] = 0;
    }
    if (SHIBYTE(v26) < 0) {
      operator delete(v25[0]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete(v31);
    }
    if (v36 < 0) {
      operator delete(v35);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  sub_21682E488((void ***)&v34);
}

void sub_216F9F7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  sub_21682E578(v46 - 168);
  *(void *)(v46 - 168) = v46 - 120;
  sub_21682E488((void ***)(v46 - 168));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeUdimUtils::ReplaceUdimPattern(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  sub_216F9EED0((const std::string *)a1, &v13);
  std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_7;
  }
  std::string::size_type v7 = v16;
  if ((v16 & 0x80u) != 0) {
    std::string::size_type v7 = v15;
  }
  if (v7)
  {
LABEL_7:
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)&v13.__r_.__value_.__l.__data_, a2, (uint64_t)&v12);
    if ((v16 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v9 = v16;
    }
    else {
      std::string::size_type v9 = v15;
    }
    size_t v10 = std::string::append(&v12, p_p, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)(a3 + 16) = *((void *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)a3 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    sub_216778F24((unsigned char *)a3, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(void *)(a3 + 16) = *(void *)(a1 + 16);
  }
  if ((char)v16 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_216F9F9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

char *sub_216F9F9E8(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v5;
  }
  uint64_t v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return __dst;
}

void sub_216F9FA64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetPrefixForAttributeType@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result == 2)
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v3) {
      uint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v4 = *((void *)v3 + 16);
  }
  else
  {
    if (result != 1)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      return result;
    }
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v3) {
      uint64_t v3 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    uint64_t v4 = *((void *)v3 + 10);
  }
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if (v5) {
    double result = (uint64_t *)(v5 + 16);
  }
  else {
    double result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  if (*((char *)result + 23) < 0)
  {
    long long v7 = (void *)*result;
    unint64_t v8 = result[1];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v7, v8);
  }
  else
  {
    long long v6 = *(_OWORD *)result;
    *(void *)(a2 + 16) = result[2];
    *(_OWORD *)a2 = v6;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetConnectedSourcePath(uint64_t a1@<X0>, int *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a2 + 1);
  if (sub_216F749E4(a1))
  {
    PrefixForAttributeType = pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetPrefixForAttributeType((uint64_t *)*(unsigned int *)(a1 + 40), (uint64_t)&v12);
    if ((*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)PrefixForAttributeType);
    }
    int v6 = *((char *)EmptyString + 23);
    if (v6 >= 0) {
      long long v7 = (const std::string::value_type *)EmptyString;
    }
    else {
      long long v7 = (const std::string::value_type *)*EmptyString;
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *((unsigned __int8 *)EmptyString + 23);
    }
    else {
      std::string::size_type v8 = EmptyString[1];
    }
    std::string::size_type v9 = std::string::append(&v12, v7, v8);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v19 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    sub_216D16CFC((uint64_t)&v12, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    sub_216D0162C((uint64_t)&v12, &v14);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, &v16);
    sub_21697DE94(a2, &v16);
    sub_21697DEEC(a2 + 1, &v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_21697C414(&v16);
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12.__r_.__value_.__r.__words[2] + 1);
    sub_21697C414(&v12.__r_.__value_.__r.__words[2]);
    if (v12.__r_.__value_.__l.__size_) {
      sub_216D16E0C((atomic_ullong *)v12.__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216F9FD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a18);
  sub_216D16AD8((uint64_t)&a11);
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_21697B754(v25);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetBaseNameAndType(pxrInternal__aapl__pxrReserved__::UsdShadeUtils *this@<X0>, uint64_t a2@<X8>)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (const std::string *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  int v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v6) {
    int v6 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)v6 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
    long long v7 = (uint64_t *)((*((void *)v6 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    long long v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(EmptyString, (uint64_t)v7, &__p);
  if (v18)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v15);
    *(void *)a2 = v15.__r_.__value_.__r.__words[0];
    int v9 = 1;
LABEL_23:
    *(_DWORD *)(a2 + 8) = v9;
    goto LABEL_24;
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    long long v10 = (const std::string *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    long long v10 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  }
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v11) {
    uint64_t v11 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)v11 + 16) & 0xFFFFFFFFFFFFFFF8) != 0) {
    std::string v12 = (uint64_t *)((*((void *)v11 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    std::string v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(v10, (uint64_t)v12, &v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v15;
  char v18 = v16;
  if (v16)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v15);
    *(void *)a2 = v15.__r_.__value_.__r.__words[0];
    int v9 = 2;
    goto LABEL_23;
  }
  uint64_t v13 = *(void *)this;
  *(void *)a2 = *(void *)this;
  if ((v13 & 7) != 0)
  {
    int v14 = (atomic_uint *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v14, 2u, memory_order_relaxed) & 1) == 0) {
      *(void *)a2 = v14;
    }
  }
  *(_DWORD *)(a2 + 8) = 0;
LABEL_24:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216F9FF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetType(pxrInternal__aapl__pxrReserved__::UsdShadeUtils *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (const std::string *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  if (!v4) {
    uint64_t v4 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
  }
  if ((*((void *)v4 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v5 = (uint64_t *)((*((void *)v4 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t v5 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(EmptyString, (uint64_t)v5, &__p);
  if (v15)
  {
    uint64_t v7 = 1;
  }
  else
  {
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
      std::string::size_type v8 = (const std::string *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      std::string::size_type v8 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
    }
    int v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    if (!v9) {
      int v9 = sub_216F74E18(&pxrInternal__aapl__pxrReserved__::UsdShadeTokens);
    }
    if ((*((void *)v9 + 16) & 0xFFFFFFFFFFFFFFF8) != 0) {
      long long v10 = (uint64_t *)((*((void *)v9 + 16) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      long long v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(v8, (uint64_t)v10, &v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v12;
    unsigned __int8 v15 = v13;
    uint64_t v7 = 2 * v13;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_216FA008C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetFullName(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  PrefixForAttributeType = pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetPrefixForAttributeType(a2, (uint64_t)&v12);
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)PrefixForAttributeType);
  }
  int v7 = *((char *)EmptyString + 23);
  if (v7 >= 0) {
    std::string::size_type v8 = (const std::string::value_type *)EmptyString;
  }
  else {
    std::string::size_type v8 = (const std::string::value_type *)*EmptyString;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    std::string::size_type v9 = EmptyString[1];
  }
  long long v10 = std::string::append(&v12, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  std::string::size_type v14 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_216FA015C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::_FollowConnectionSourceRecursive(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  std::string::size_type v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)((char *)this + 32);
  if (*((_DWORD *)this + 10) == 2)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(this, v9, (uint64_t)&v13);
    if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer(this))
    {
      uint64_t v10 = sub_216FA0304((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v13, a2, a3, a4);
    }
    else
    {
      sub_216FA0998(a3, (uint64_t)&v13);
      uint64_t v10 = 1;
    }
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_21697C414(&v15);
    if (v14) {
      sub_216D16E0C(v14);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(this, v9, (uint64_t)&v13);
    int IsContainer = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::IsContainer(this);
    if (IsContainer) {
      unsigned int v4 = sub_216FA05A8(&v13, a2, a3, a4);
    }
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_21697C414(&v15);
    if (v14) {
      sub_216D16E0C(v14);
    }
    return IsContainer & v4;
  }
  return v10;
}

void sub_216FA02E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FA0304(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, _DWORD *a2, uint64_t a3, char a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput(a1, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)a2))
  {
    sub_216D0162C((uint64_t)a1, (int *)&v21);
    uint64_t v8 = a2[10];
    if (v8)
    {
      unsigned int v9 = a2[11];
      uint64_t v10 = a2;
      if (v9 >= 6) {
        uint64_t v10 = *(void **)a2;
      }
      uint64_t v11 = 8 * v8;
      std::string v12 = &v10[v8];
      while (*v10 != v21)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
        {
          uint64_t v10 = v12;
          break;
        }
      }
      uint64_t v13 = a2;
      if (v9 >= 6) {
        uint64_t v13 = *(_DWORD **)a2;
      }
      if (v10 != (void *)&v13[2 * v8])
      {
        v23[0] = "usdShade/utils.cpp";
        v23[1] = "_GetValueProducingAttributesRecursive";
        void v23[2] = 193;
        v23[3] = "BOOL pxrInternal__aapl__pxrReserved__::_GetValueProducingAttributesRecursive(const UsdShadeInOutput &, "
                 "_SmallSdfPathVector *, UsdShadeAttributeVector &, BOOL) [UsdShadeInOutput = pxrInternal__aapl__pxrReser"
                 "ved__::UsdShadeOutput]";
        char v24 = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v23, (pxrInternal__aapl__pxrReserved__ *)"GetValueProducingAttributes: Found cycle with attribute %s", v15, Text);
        LOBYTE(v16) = 0;
LABEL_34:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
        sub_21697C414(&v21);
        return v16 & 1;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSources(v23, a1, 0);
    if (v25)
    {
      sub_216FA0B74(a2, &v21);
      if (v25 >= 2)
      {
        int v16 = 0;
        if (v26 >= 2) {
          uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v23[0];
        }
        else {
          uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v23;
        }
        uint64_t v18 = 56 * v25;
        do
        {
          sub_216FA0D30(v22, a2);
          v16 |= pxrInternal__aapl__pxrReserved__::_FollowConnectionSourceRecursive(v17);
          sub_216FA0E0C(v22);
          uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)((char *)v17 + 56);
          v18 -= 56;
        }
        while (v18);
        goto LABEL_28;
      }
      if (v25)
      {
        if (v26 >= 2) {
          std::string::size_type v19 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v23[0];
        }
        else {
          std::string::size_type v19 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v23;
        }
        LOBYTE(v16) = pxrInternal__aapl__pxrReserved__::_FollowConnectionSourceRecursive(v19);
LABEL_28:
        if ((a4 & 1) == 0 && (v16 & 1) == 0)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue(a1))
          {
            sub_216FA0998(a3, (uint64_t)a1);
            LOBYTE(v16) = 1;
          }
          else
          {
            LOBYTE(v16) = 0;
          }
        }
        sub_216F74B60((uint64_t)v23);
        goto LABEL_34;
      }
    }
    LOBYTE(v16) = 0;
    goto LABEL_28;
  }
  LOBYTE(v16) = 0;
  return v16 & 1;
}

void sub_216FA0550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_216F74B60((uint64_t)va1);
  sub_21697B754((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FA05A8(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2)&& pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput(a1, v8))
  {
    sub_216D0162C((uint64_t)a1, (int *)&v22);
    uint64_t v9 = a2[10];
    if (v9)
    {
      unsigned int v10 = a2[11];
      uint64_t v11 = a2;
      if (v10 >= 6) {
        uint64_t v11 = *(void **)a2;
      }
      uint64_t v12 = 8 * v9;
      uint64_t v13 = &v11[v9];
      while (*v11 != v22)
      {
        ++v11;
        v12 -= 8;
        if (!v12)
        {
          uint64_t v11 = v13;
          break;
        }
      }
      std::string::size_type v14 = a2;
      if (v10 >= 6) {
        std::string::size_type v14 = *(_DWORD **)a2;
      }
      if (v11 != (void *)&v14[2 * v9])
      {
        v24[0] = "usdShade/utils.cpp";
        v24[1] = "_GetValueProducingAttributesRecursive";
        _OWORD v24[2] = 193;
        v24[3] = "BOOL pxrInternal__aapl__pxrReserved__::_GetValueProducingAttributesRecursive(const UsdShadeInOutput &, "
                 "_SmallSdfPathVector *, UsdShadeAttributeVector &, BOOL) [UsdShadeInOutput = pxrInternal__aapl__pxrReser"
                 "ved__::UsdShadeInput]";
        char v25 = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v22);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v24, (pxrInternal__aapl__pxrReserved__ *)"GetValueProducingAttributes: Found cycle with attribute %s", v16, Text);
        LOBYTE(v17) = 0;
LABEL_35:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
        sub_21697C414(&v22);
        return v17 & 1;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSources(v24, a1, 0);
    if (v26)
    {
      sub_216FA0B74(a2, &v22);
      if (v26 >= 2)
      {
        int v17 = 0;
        if (v27 >= 2) {
          uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v24[0];
        }
        else {
          uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v24;
        }
        uint64_t v19 = 56 * v26;
        do
        {
          sub_216FA0D30(v23, a2);
          v17 |= pxrInternal__aapl__pxrReserved__::_FollowConnectionSourceRecursive(v18, v23, a3, a4);
          sub_216FA0E0C(v23);
          uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)((char *)v18 + 56);
          v19 -= 56;
        }
        while (v19);
        goto LABEL_29;
      }
      if (v26)
      {
        if (v27 >= 2) {
          uint64_t v20 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v24[0];
        }
        else {
          uint64_t v20 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v24;
        }
        LOBYTE(v17) = pxrInternal__aapl__pxrReserved__::_FollowConnectionSourceRecursive(v20, a2, a3, a4);
LABEL_29:
        if ((a4 & 1) == 0 && (v17 & 1) == 0)
        {
          if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue(a1))
          {
            sub_216FA0998(a3, (uint64_t)a1);
            LOBYTE(v17) = 1;
          }
          else
          {
            LOBYTE(v17) = 0;
          }
        }
        sub_216F74B60((uint64_t)v24);
        goto LABEL_35;
      }
    }
    LOBYTE(v17) = 0;
    goto LABEL_29;
  }
  LOBYTE(v17) = 0;
  return v17 & 1;
}

void sub_216FA0800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_216F74B60((uint64_t)va1);
  sub_21697B754((uint64_t *)va);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeUtils *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdShadeInput *a2@<X1>, uint64_t a3@<X8>)
{
  v4[6] = *(void **)MEMORY[0x263EF8340];
  v4[5] = (void *)0x500000000;
  *(void *)(a3 + 32) = 0x100000000;
  sub_216FA05A8(this, v4, a3, (uint64_t)a2);
  return sub_216FA0E0C(v4);
}

void sub_216FA08DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F80A24(v2);
  sub_216FA0E0C((void **)va);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes@<X0>(pxrInternal__aapl__pxrReserved__::UsdShadeUtils *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *a2@<X1>, uint64_t a3@<X8>)
{
  v4[6] = *(void **)MEMORY[0x263EF8340];
  v4[5] = (void *)0x500000000;
  *(void *)(a3 + 32) = 0x100000000;
  sub_216FA0304(this, v4, a3, (char)a2);
  return sub_216FA0E0C(v4);
}

void sub_216FA097C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F80A24(v2);
  sub_216FA0E0C((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216FA0998(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = *(_DWORD *)(a1 + 32);
  unsigned int v4 = *(_DWORD *)(a1 + 36);
  if (v5 == v4)
  {
    sub_216FA0A6C(a1, v5 + (v5 >> 1) + 1);
    unsigned int v4 = *(_DWORD *)(a1 + 36);
  }
  uint64_t v6 = a1;
  if (v4 >= 2) {
    uint64_t v6 = *(void *)a1;
  }
  uint64_t v7 = v6 + 32 * *(unsigned int *)(a1 + 32);
  *(_DWORD *)uint64_t v7 = *(_DWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(v7 + 8) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(v7 + 16), (_DWORD *)(a2 + 16));
  double result = sub_21698105C((_DWORD *)(v7 + 20), (_DWORD *)(a2 + 20));
  uint64_t v10 = *(void *)(a2 + 24);
  *(void *)(v7 + 24) = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(v7 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_216FA0A6C(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = malloc(32 * a2);
  uint64_t v5 = a1;
  if (*(_DWORD *)(a1 + 36) >= 2u) {
    uint64_t v5 = *(void *)a1;
  }
  sub_216FA0AEC(v5, v5 + 32 * *(unsigned int *)(a1 + 32), (uint64_t)v4);
  sub_216F80A64((uint64_t *)a1);
  if (*(_DWORD *)(a1 + 36) >= 2u) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 36) = a2;
}

uint64_t sub_216FA0AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 16;
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)(v5 - 16);
      *(void *)(a3 + 8) = *(void *)(v5 - 8);
      *(void *)(v5 - 8) = 0;
      sub_21697D878((_DWORD *)(a3 + 16), (_DWORD *)v5);
      sub_21697D8B4((_DWORD *)(a3 + 20), (_DWORD *)(v5 + 4));
      *(void *)(a3 + 24) = *(void *)(v5 + 8);
      *(void *)(v5 + 8) = 0;
      a3 += 32;
      uint64_t v6 = v5 + 16;
      v5 += 32;
    }
    while (v6 != a2);
  }
  return a3;
}

_DWORD *sub_216FA0B74(_DWORD *a1, _DWORD *a2)
{
  unsigned int v5 = a1[10];
  unsigned int v4 = a1[11];
  if (v5 == v4)
  {
    sub_216FA0BF0(a1, v5 + (v5 >> 1) + 1);
    unsigned int v4 = a1[11];
  }
  uint64_t v6 = a1;
  if (v4 >= 6) {
    uint64_t v6 = *(_DWORD **)a1;
  }
  uint64_t v7 = sub_216981010(&v6[2 * a1[10]], a2);
  double result = sub_21698105C(v7 + 1, a2 + 1);
  ++a1[10];
  return result;
}

void sub_216FA0BF0(_DWORD *a1, unsigned int a2)
{
  unsigned int v4 = malloc(8 * a2);
  unsigned int v5 = a1;
  if (a1[11] >= 6u) {
    unsigned int v5 = *(_DWORD **)a1;
  }
  sub_216FA0CCC(v5, &v5[2 * a1[10]], v4);
  sub_216FA0C70(a1);
  if (a1[11] >= 6u) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  a1[11] = a2;
}

_DWORD *sub_216FA0C70(_DWORD *result)
{
  uint64_t v1 = result;
  if (result[11] >= 6u) {
    uint64_t v1 = *(_DWORD **)result;
  }
  uint64_t v2 = result[10];
  if (v2)
  {
    uint64_t v3 = 8 * v2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v1 + 1);
      double result = sub_21697C414(v1);
      v1 += 2;
      v3 -= 8;
    }
    while (v3);
  }
  return result;
}

_DWORD *sub_216FA0CCC(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  if (a1 != a2)
  {
    unsigned int v5 = a1;
    do
    {
      sub_21697D878(a3, v5);
      sub_21697D8B4(a3 + 1, v5 + 1);
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

_DWORD *sub_216FA0D30(_DWORD *a1, _DWORD *a2)
{
  a1[11] = 5;
  uint64_t v4 = a2[10];
  unsigned int v5 = a1;
  if (v4 >= 6)
  {
    unsigned int v5 = malloc(8 * v4);
    *(void *)a1 = v5;
    a1[11] = v4;
  }
  a1[10] = v4;
  if (a2[11] >= 6u) {
    uint64_t v6 = *(_DWORD **)a2;
  }
  else {
    uint64_t v6 = a2;
  }
  sub_216FA0DA8(v6, &v6[2 * a2[10]], v5);
  return a1;
}

_DWORD *sub_216FA0DA8(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  if (a1 != a2)
  {
    unsigned int v5 = a1;
    do
    {
      sub_216981010(a3, v5);
      sub_21698105C(a3 + 1, v5 + 1);
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void **sub_216FA0E0C(void **a1)
{
  if (*((_DWORD *)a1 + 11) >= 6u) {
    free(*a1);
  }
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLux_DiscoveryPlugin::GetSearchURIs(pxrInternal__aapl__pxrReserved__::UsdLux_DiscoveryPlugin *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93D08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93D08))
  {
    qword_267B93CF0 = 0;
    *(void *)algn_267B93CF8 = 0;
    qword_267B93D00 = 0;
    __cxa_atexit((void (*)(void *))sub_216963C50, &qword_267B93CF0, &dword_216758000);
    __cxa_guard_release(&qword_267B93D08);
  }
  return &qword_267B93CF0;
}

void pxrInternal__aapl__pxrReserved__::UsdLux_DiscoveryPlugin::DiscoverNodes(uint64_t *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93D18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93D18))
  {
    __cxa_guard_release(&qword_267B93D18);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93D28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93D28))
  {
    __cxa_guard_release(&qword_267B93D28);
  }
  char v36 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = (uint64_t *)&v36;
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(qword_267B93D10, &v35);
  AllDerivedTypes = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(qword_267B93D20, &v35);
  ShaderIdToAPITypeNameMap = pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::_GetShaderIdToAPITypeNameMap(AllDerivedTypes);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  sub_216973388(&v32, ShaderIdToAPITypeNameMap[3] + v37);
  uint64_t v4 = v35;
  if (v35 != (uint64_t *)&v36)
  {
    do
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93D40, memory_order_acquire) & 1) == 0)
      {
        uint64_t v13 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)__cxa_guard_acquire(&qword_267B93D40);
        if (v13)
        {
          pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v13);
          sub_216779094(&__p, "usdLux");
          pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginWithName((unsigned __int8 *)&__p, &unk_267B93D30);
          if (v31 < 0) {
            operator delete(__p);
          }
          __cxa_atexit((void (*)(void *))sub_216FA1398, &unk_267B93D30, &dword_216758000);
          __cxa_guard_release(&qword_267B93D40);
        }
      }
      unsigned int v5 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78((uint64_t *)&unk_267B93D30);
      if (pxrInternal__aapl__pxrReserved__::PlugPlugin::DeclaresType(v5, (const pxrInternal__aapl__pxrReserved__::TfType *)(v4 + 4), 0))
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetConcreteSchemaTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)(v4 + 4), (atomic_uint **)&__p);
        unint64_t v6 = (unint64_t)__p;
        if (__p)
        {
          uint64_t v7 = v33;
          if ((unint64_t)v33 >= v34)
          {
            uint64_t v8 = sub_216973984(&v32, (uint64_t *)&__p);
          }
          else
          {
            *(void *)uint64_t v33 = __p;
            if ((v6 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *(void *)v7 &= 0xFFFFFFFFFFFFFFF8;
            }
            uint64_t v8 = v7 + 8;
          }
          uint64_t v33 = v8;
          unint64_t v9 = (unint64_t)__p;
        }
        else
        {
          unint64_t v9 = 0;
        }
        if ((v9 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      uint64_t v10 = (uint64_t *)v4[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (uint64_t *)v4[2];
          BOOL v12 = *v11 == (void)v4;
          uint64_t v4 = v11;
        }
        while (!v12);
      }
      uint64_t v4 = v11;
    }
    while (v11 != (uint64_t *)&v36);
  }
  std::string::size_type v14 = (void *)ShaderIdToAPITypeNameMap[2];
  if (v14)
  {
    int v15 = v33;
    do
    {
      int v16 = v14 + 2;
      if ((unint64_t)v15 >= v34)
      {
        int v15 = sub_216973984(&v32, v16);
      }
      else
      {
        uint64_t v17 = *v16;
        *(void *)int v15 = *v16;
        if ((v17 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)v15 &= 0xFFFFFFFFFFFFFFF8;
        }
        v15 += 8;
      }
      uint64_t v33 = v15;
      std::string::size_type v14 = (void *)*v14;
    }
    while (v14);
  }
  else
  {
    int v15 = v33;
  }
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)sub_216FA13FC(a1, (v15 - v32) >> 3);
  uint64_t v19 = (uint64_t *)v32;
  uint64_t v20 = (uint64_t *)v33;
  if (v32 != v33)
  {
    do
    {
      uint64_t v28 = 0;
      std::string __p = 0;
      int v30 = 1;
      DiscoveryType = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::_GetDiscoveryType(v18);
      SourceType = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::_GetSourceType(DiscoveryType);
      unint64_t v23 = a1[1];
      if (v23 >= a1[2])
      {
        uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)sub_216FA17BC(a1, v19, (uint64_t *)&__p, v19, &v28, (uint64_t *)DiscoveryType, SourceType, "", "");
      }
      else
      {
        sub_216FA1938((pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 2), v23, v19, (uint64_t *)&__p, v19, &v28, (uint64_t *)DiscoveryType, SourceType, "", "");
        uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)(v23 + 216);
        a1[1] = v23 + 216;
      }
      a1[1] = (uint64_t)v18;
      if ((v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      ++v19;
    }
    while (v19 != v20);
  }
  std::string __p = &v32;
  sub_216889A04((void ***)&__p);
  sub_2167FB780((uint64_t)&v35, v36);
}

void sub_216FA12C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

uint64_t sub_216FA1398(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_216FA13FC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x84BDA12F684BDA13 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x12F684BDA12F685) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_216BA76E0(result, a2);
    v7[1] = v7[0] + v5;
    uint64_t v7[2] = v7[0] + v5;
    uint64_t v7[3] = v7[0] + 216 * v6;
    sub_216BA7640(a1, v7);
    return sub_216BA7820((uint64_t)v7);
  }
  return result;
}

void sub_216FA14A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BA7820((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FA14BC()
{
  unint64_t v0 = sub_216FA1510();

  return sub_216FA163C(v0);
}

void sub_216FA14E8(pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin *a1, const void *a2)
{
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::~NdrDiscoveryPlugin(a1, a2);

  operator delete(v2);
}

uint64_t *sub_216FA1510()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216BA541C((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FA15F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216FA163C(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = &unk_26C76E198;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_216FA16C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FA16EC(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216FA1714@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x18uLL);
  pxrInternal__aapl__pxrReserved__::NdrDiscoveryPlugin::NdrDiscoveryPlugin((uint64_t)v2);
  *uint64_t v2 = &unk_26C76E150;
  *a1 = v2;
  char v4 = 0;
  return sub_216FA178C(&v4);
}

void sub_216FA1778(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216FA178C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t sub_216FA17BC(uint64_t *a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, char *a8, char *a9)
{
  unint64_t v10 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0x12F684BDA12F684) {
    sub_21677CB10();
  }
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v11) {
    unint64_t v11 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  }
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42) {
    unint64_t v19 = 0x12F684BDA12F684;
  }
  else {
    unint64_t v19 = v11;
  }
  uint64_t v28 = a1 + 2;
  if (v19)
  {
    unint64_t v23 = v10;
    uint64_t v20 = (char *)sub_216BA76E0((uint64_t)(a1 + 2), v19);
    unint64_t v10 = v23;
  }
  else
  {
    uint64_t v20 = 0;
  }
  char v24 = v20;
  char v25 = &v20[216 * v10];
  unsigned int v27 = &v20[216 * v19];
  sub_216FA1938((pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 2), (uint64_t)v25, a2, a3, a4, a5, a6, a7, a8, a9);
  unsigned int v26 = v25 + 216;
  sub_216BA7640(a1, &v24);
  uint64_t v21 = a1[1];
  sub_216BA7820((uint64_t)&v24);
  return v21;
}

void sub_216FA1924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216BA7820((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216FA1938(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, char *a9, char *a10)
{
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  sub_216779094(&v26, a9);
  sub_216779094(&v24, a10);
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  memset(v20, 0, sizeof(v20));
  int v21 = 1065353216;
  long long __p = 0uLL;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  sub_216BA6EEC(a2, a3, a4, (long long *)EmptyString, a6, a7, a8, &v26, &v24, &v22, (uint64_t)v20, &__p, &v17);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  sub_216BA5BB8((uint64_t)v20);
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
  if (v25 < 0) {
    operator delete((void *)v24);
  }
  if (v27 < 0) {
    operator delete((void *)v26);
  }
}

void sub_216FA1A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_216BA5BB8((uint64_t)&a22);
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v32 - 105) < 0) {
    operator delete(*(void **)(v32 - 128));
  }
  if (*(char *)(v32 - 81) < 0) {
    operator delete(*(void **)(v32 - 104));
  }
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *this)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v1 = (unint64_t *)atomic_load((unint64_t *)&qword_267B93D48);
  if (!v1)
  {
    uint64_t v1 = (unint64_t *)operator new(0x60uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1, "USD", 0);
    char v25 = (uint64_t *)(v1 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 1, "usd-schema-gen", 0);
    uint64_t v3 = (uint64_t *)(v1 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 2, "MeshLight", 0);
    char v4 = (uint64_t *)(v1 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 3, "MeshLightAPI", 0);
    uint64_t v5 = (uint64_t *)(v1 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 4, "LightAPI", 0);
    uint64_t v6 = (uint64_t *)(v1 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 5, "ShadowAPI", 0);
    int v7 = (uint64_t *)(v1 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 6, "ShapingAPI", 0);
    uint64_t v8 = (uint64_t *)(v1 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 7, "VolumeLight", 0);
    unint64_t v9 = (uint64_t *)(v1 + 8);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v1 + 8, "VolumeLightAPI", 0);
    unint64_t v10 = *v1;
    unint64_t v26 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = *v25;
    uint64_t v27 = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v12 = *v3;
    uint64_t v28 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v13 = *v4;
    uint64_t v29 = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v14 = *v5;
    uint64_t v30 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = *v6;
    uint64_t v31 = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v16 = *v7;
    uint64_t v32 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v17 = *v8;
    uint64_t v33 = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v18 = *v9;
    uint64_t v34 = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    v1[9] = 0;
    v1[10] = 0;
    v1[11] = 0;
    uint64_t v19 = (char *)operator new(0x48uLL);
    uint64_t v20 = 0;
    v1[9] = (unint64_t)v19;
    v1[10] = (unint64_t)v19;
    v1[11] = (unint64_t)(v19 + 72);
    do
    {
      unint64_t v21 = *(unint64_t *)((char *)&v26 + v20);
      *(void *)&v19[v20] = v21;
      if ((v21 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v19[v20] &= 0xFFFFFFFFFFFFFFF8;
      }
      v20 += 8;
    }
    while (v20 != 72);
    v1[10] = (unint64_t)(v19 + 72);
    for (uint64_t i = 64; i != -8; i -= 8)
    {
      unint64_t v23 = *(unint64_t *)((char *)&v26 + i);
      if ((v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v24 = 0;
    atomic_compare_exchange_strong(&qword_267B93D48, (unint64_t *)&v24, (unint64_t)v1);
    if (v24)
    {
      unint64_t v26 = (unint64_t)(v1 + 9);
      sub_216889A04((void ***)&v26);
      if ((*v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v1 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v1);
      return atomic_load((unint64_t *)&qword_267B93D48);
    }
  }
  return (unint64_t)v1;
}

void sub_216FA1FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void **a11, uint64_t a12, char a13)
{
  sub_216889A04(&a11);
  uint64_t v22 = 64;
  while (1)
  {
    uint64_t v23 = *(void *)(&a13 + v22);
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v22 -= 8;
    if (v22 == -8)
    {
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v13);
      _Unwind_Resume(a1);
    }
  }
}

void sub_216FA2104()
{
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::_GetDiscoveryType(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *this)
{
  return pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(this) + 8;
}

void *pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::_GetShaderIdToAPITypeNameMap(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *this)
{
  void v12[2] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93D78, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)__cxa_guard_acquire(&qword_267B93D78);
    if (v2)
    {
      SourceType = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(v2);
      unint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType((pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)SourceType);
      uint64_t v5 = sub_216B12870(v11, SourceType + 2, (uint64_t *)(v4 + 24));
      uint64_t v6 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType((pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)v5);
      unint64_t v7 = pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType((pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)v6);
      sub_216B12870(v12, v6 + 7, (uint64_t *)(v7 + 64));
      sub_216FA36F4((uint64_t)&unk_267B93D50, v11, 2);
      for (uint64_t i = 0; i != -4; i -= 2)
      {
        uint64_t v9 = v12[i + 1];
        if ((v9 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v10 = v11[i + 2];
        if ((v10 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      __cxa_atexit((void (*)(void *))sub_216FA22D8, &unk_267B93D50, &dword_216758000);
      __cxa_guard_release(&qword_267B93D78);
    }
  }
  return &unk_267B93D50;
}

void sub_216FA226C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2173251B4(v2 + 32, (uint64_t)va);
  __cxa_guard_abort(&qword_267B93D78);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::Parse@<X0>(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::_GetShaderIdToAPITypeNameMap(a1);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_2168CB120(qword_267B93D50, (void *)a2);
  uint64_t v6 = (unint64_t *)a2;
  if (v5)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)sub_2168CB120(qword_267B93D50, (void *)a2);
    if (!v5) {
      sub_216855AEC("unordered_map::at: key not found");
    }
    uint64_t v6 = (unint64_t *)((char *)v5 + 24);
  }
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(v5);
  sub_216779094(&v75, "usdLux");
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginWithName((unsigned __int8 *)&v75, &v60);
  uint64_t v7 = sub_2168E5D78((uint64_t *)&v60);
  sub_216779094(&__p, "generatedSchema.usda");
  pxrInternal__aapl__pxrReserved__::PlugPlugin::FindPluginResource(v7, (uint64_t)&__p, 0, (uint64_t)&v81);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p);
  }
  uint64_t v8 = v61;
  if (v61 && atomic_fetch_add_explicit((atomic_uint *volatile)(v61 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (SHIBYTE(v77) < 0) {
    operator delete(v75);
  }
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayer::OpenAsAnonymous((uint64_t)&v81, 0, (uint64_t)&v75, &v74);
  if (SHIBYTE(v77) < 0) {
    operator delete(v75);
  }
  if (SHIBYTE(v83) < 0) {
    operator delete((void *)v81);
  }
  if (v74)
  {
    uint64_t v9 = (const std::string *)sub_216779094(&v81, ".usd");
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v75 = &v76;
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(v9, (pxrInternal__aapl__pxrReserved__::TfToken *)&v75, (uint64_t *)&v73);
    sub_2167877AC((uint64_t)&v75, v76);
    if (SHIBYTE(v83) < 0) {
      operator delete((void *)v81);
    }
    uint64_t v10 = sub_216ABBA60((uint64_t *)&v75, (uint64_t *)&v73);
    if ((*v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v10);
    }
    unint64_t v81 = 0;
    unint64_t v82 = 0;
    uint64_t v83 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::New((uint64_t *)&v75, 0, &v72);
    if (SHIBYTE(v83) < 0) {
      operator delete((void *)v81);
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)v76;
    if (v76 && atomic_fetch_add_explicit(v76 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *))(*(void *)v11 + 8))(v11);
    }
    SourceType = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(v11);
    unint64_t v13 = *((void *)SourceType + 4);
    unint64_t v81 = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v81 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v82 = *v6;
    if ((v82 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v82 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(SourceType);
    uint64_t v15 = *((void *)v14 + 5);
    uint64_t v83 = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v83 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v16 = *(void *)(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(v14) + 48);
    unint64_t v84 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v84 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v75 = &v69;
    LOBYTE(v76) = 0;
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfPath *)operator new(0x20uLL);
    uint64_t v18 = 0;
    uint64_t v69 = v17;
    uint64_t v70 = v17;
    uint64_t v71 = (char *)v17 + 32;
    do
    {
      unint64_t v19 = *(unint64_t *)((char *)&v81 + v18);
      *(void *)((char *)v17 + v18) = v19;
      if ((v19 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)((char *)v17 + v18) &= 0xFFFFFFFFFFFFFFF8;
      }
      v18 += 8;
    }
    while (v18 != 32);
    uint64_t v70 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 32);
    for (uint64_t i = 24; i != -8; i -= 8)
    {
      unint64_t v21 = *(unint64_t *)((char *)&v81 + i);
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v54 = a3;
    uint64_t v22 = v69;
    if (v69 == v70)
    {
      uint64_t v31 = sub_216ABBA60((uint64_t *)&v81, (uint64_t *)&v73);
      uint64_t v75 = 0;
      uint64_t v76 = 0;
      pxrInternal__aapl__pxrReserved__::UsdStage::Open(v31, (uint64_t *)&v75, 0, &v78);
      uint64_t v32 = v76;
      if (v76 && atomic_fetch_add_explicit(v76 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v32 + 8))(v32);
      }
      unint64_t v33 = v82;
      if (v82 && atomic_fetch_add_explicit((atomic_uint *volatile)(v82 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(unint64_t))(*(void *)v33 + 8))(v33);
      }
      if (v78)
      {
        uint64_t v34 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D57D70((uint64_t *)&v78);
        uint64_t v35 = sub_216A663FC(&v72);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v35, &v81);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v34, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v81, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v81 + 1);
        sub_21697C414(&v81);
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&__p, v36))
        {
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v60, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p);
          uint64_t v63 = 0;
          uint64_t v60 = off_26C76D8C8;
          uint64_t v37 = operator new(0x220uLL);
          char v38 = (pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeContext);
          if (!v38) {
            char v38 = sub_216FA376C(&pxrInternal__aapl__pxrReserved__::SdrNodeContext);
          }
          long long v58 = 0uLL;
          uint64_t v59 = 0;
          long long v56 = 0uLL;
          uint64_t v57 = 0;
          pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetShaderProperties((pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils *)&v60, v55);
          sub_216BA71F4((uint64_t)&v75, a2 + 144);
          sub_216D16CFC((uint64_t)&v81, &v61, &v62);
          unint64_t v41 = v82;
          if (!v82 || (*(unsigned char *)(v82 + 57) & 8) != 0) {
            pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v82, v39);
          }
          unint64_t v42 = **(void **)(v41 + 24) & 0xFFFFFFFFFFFFFFF8;
          if (v42)
          {
            uint64_t v43 = (const char *)(v42 + 16);
            if (*(char *)(v42 + 39) < 0) {
              uint64_t v43 = *(const char **)v43;
            }
          }
          else
          {
            uint64_t v43 = "";
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Fallback shader node generated from the USD %s schema", (const char *)v39, v40, v43);
          uint64_t v44 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
          if (!v44) {
            uint64_t v44 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
          }
          uint64_t v80 = (uint64_t *)((char *)v44 + 24);
          long long v45 = sub_216F95C60((uint64_t)&v75, (void *)v44 + 3, (uint64_t)&unk_2174BFD90, &v80);
          uint64_t v46 = (void **)(v45 + 3);
          if (*((char *)v45 + 47) < 0) {
            operator delete(*v46);
          }
          *(std::string *)uint64_t v46 = v79;
          *((unsigned char *)&v79.__r_.__value_.__s + 23) = 0;
          v79.__r_.__value_.__s.__data_[0] = 0;
          if ((v84 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v83 + 1);
          sub_21697C414(&v83);
          if (v82) {
            sub_216D16E0C((atomic_ullong *)v82);
          }
          uint64_t v47 = (void *)sub_216BA71F4((uint64_t)&v81, (uint64_t)&v75);
          pxrInternal__aapl__pxrReserved__::UsdShadeShaderDefUtils::GetPrimvarNamesMetadataString(v47, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v60, &v79);
          uint64_t v48 = (pxrInternal__aapl__pxrReserved__::SdrNodeMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
          if (!v48) {
            uint64_t v48 = sub_216BB427C(&pxrInternal__aapl__pxrReserved__::SdrNodeMetadata);
          }
          uint64_t v80 = (uint64_t *)((char *)v48 + 48);
          uint64_t v49 = sub_216F95C60((uint64_t)&v75, (void *)v48 + 6, (uint64_t)&unk_2174BFD90, &v80);
          uint64_t v50 = (uint64_t *)((char *)v38 + 32);
          uint64_t v51 = (void **)(v49 + 3);
          if (*((char *)v49 + 47) < 0) {
            operator delete(*v51);
          }
          *(std::string *)uint64_t v51 = v79;
          *((unsigned char *)&v79.__r_.__value_.__s + 23) = 0;
          v79.__r_.__value_.__s.__data_[0] = 0;
          sub_216BA5BB8((uint64_t)&v81);
          pxrInternal__aapl__pxrReserved__::SdrShaderNode::SdrShaderNode((uint64_t)v37, (uint64_t *)a2, (uint64_t *)(a2 + 8), (long long *)(a2 + 24), (uint64_t *)(a2 + 48), v50, (uint64_t *)(a2 + 64), &v58, &v56, (uint64_t)v55, (uint64_t)&v75, (long long *)(a2 + 120));
          *uint64_t v54 = v37;
          sub_216BA5BB8((uint64_t)&v75);
          unint64_t v81 = (unint64_t)v55;
          sub_216BA861C((void ***)&v81);
          if (SHIBYTE(v57) < 0) {
            operator delete((void *)v56);
          }
          if (SHIBYTE(v59) < 0) {
            operator delete((void *)v58);
          }
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v60);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a2, a3);
        }
        if ((v68 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
        sub_21697C414(&v66);
        if (v65) {
          sub_216D16E0C(v65);
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a2, a3);
      }
      sub_216E10FB8(&v78);
    }
    else
    {
      uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v17);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v23, v22, &v60);
      uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v74);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v24, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v60, &v79);
      if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v79))
      {
        uint64_t v27 = (uint64_t **)sub_216A663FC(&v72);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v27, (uint64_t *)&__p);
        uint64_t v28 = sub_216A663FC(&v72);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v58);
        uint64_t v29 = (uint64_t **)sub_216A663FC((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v79);
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetProperties(v29);
      }
      unint64_t v81 = (unint64_t)"usdLux/lightDefParser.cpp";
      unint64_t v82 = (unint64_t)"_CopyPropertiesFromSchema";
      uint64_t v83 = 121;
      unint64_t v84 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::_CopyPropertiesFromSchema(const SdfLayerRefPtr &, c"
                              "onst TfToken &, const SdfPrimSpecHandle &)";
      char v85 = 0;
      unint64_t v25 = *(void *)v22 & 0xFFFFFFFFFFFFFFF8;
      if (v25)
      {
        unint64_t v26 = (const char *)(v25 + 16);
        if (*(char *)(v25 + 39) < 0) {
          unint64_t v26 = *(const char **)v26;
        }
      }
      else
      {
        unint64_t v26 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v81, 1, (pxrInternal__aapl__pxrReserved__ *)"The generatedSchema for UsdLux does not have a prim spec for schema type '%s'.", v26);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v30, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v79);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v60 + 1);
      sub_21697C414(&v60);
      pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a2, a3);
    }
    unint64_t v81 = (unint64_t)&v69;
    sub_216889A04((void ***)&v81);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v52, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v72);
    sub_216ABB798(&v73);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::NdrParserPlugin::GetInvalidNode(a2, a3);
  }
  return sub_216ABB798(&v74);
}

void sub_216FA2E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,int a47,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a48,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a49,char *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  operator delete(v55);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&a32);
  sub_216D16AD8((uint64_t)&a36);
  sub_216E10FB8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v56 - 224));
  a50 = &a43;
  sub_216889A04((void ***)&a50);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v58, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a46);
  sub_216ABB798(&a48);
  sub_216ABB798(&a49);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetDiscoveryTypes(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *this)
{
  v5[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93D98, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin *)__cxa_guard_acquire(&qword_267B93D98);
    if (v2)
    {
      uint64_t v3 = *(void *)(pxrInternal__aapl__pxrReserved__::UsdLux_LightDefParserPlugin::GetSourceType(v2) + 8);
      v5[0] = v3;
      if ((v3 & 7) != 0)
      {
        unint64_t v4 = (atomic_uint *)(v3 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
          v5[0] = (uint64_t)v4;
        }
      }
      sub_216D30CFC(qword_267B93D80, v5, 1uLL);
      if ((v5[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      __cxa_atexit((void (*)(void *))sub_216B554D0, qword_267B93D80, &dword_216758000);
      __cxa_guard_release(&qword_267B93D98);
    }
  }
  return qword_267B93D80;
}

void sub_216FA342C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B93D98);
  _Unwind_Resume(a1);
}

uint64_t sub_216FA3468()
{
  unint64_t v0 = sub_216FA3490();

  return sub_216FA35BC(v0);
}

uint64_t *sub_216FA3490()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F9609C((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FA3570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216FA35BC(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = &unk_26C76E228;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_216FA3648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FA366C(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  operator delete(v1);
}

void *sub_216FA3694()
{
  unint64_t v0 = operator new(0x10uLL);
  pxrInternal__aapl__pxrReserved__::NdrParserPlugin::NdrParserPlugin(v0);
  void *v0 = &unk_26C76E1D8;
  return v0;
}

void sub_216FA36E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216FA36F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      sub_216D12EB8(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_216FA3758(_Unwind_Exception *a1)
{
  sub_2169735B4(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *sub_216FA376C(atomic_ullong *a1)
{
  uint64_t result = sub_216FA37B4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType::~SdrNodeContext_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *sub_216FA37B4()
{
  unint64_t v0 = (pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType *)operator new(0x60uLL);
  pxrInternal__aapl__pxrReserved__::SdrNodeContext_StaticTokenType::SdrNodeContext_StaticTokenType(v0);
  return v0;
}

void sub_216FA37E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

int8x8_t pxrInternal__aapl__pxrReserved__::UsdLuxBlackbodyTemperatureAsRgb(pxrInternal__aapl__pxrReserved__ *this, float a2)
{
  float v2 = (float)(a2 + -1000.0) / 9000.0;
  float v3 = v2 * 18.0;
  if (v2 > 1.0) {
    float v3 = 18.0;
  }
  if (v2 >= 0.0) {
    float v4 = v3;
  }
  else {
    float v4 = 0.0;
  }
  unsigned int v5 = vcvtms_s32_f32(v4);
  float v6 = v4 - (float)(int)floorf(v4);
  int v7 = (char *)&unk_2174A6AD0 + 12 * (int)v5;
  float v8 = *((float *)v7 + 2);
  float v9 = *((float *)v7 + 5);
  float v10 = *((float *)v7 + 8);
  float v11 = *((float *)v7 + 11);
  float v12 = (float)((float)((float)((float)(v8 * 0.0) + v9) + (float)(v10 * 0.0)) + (float)(v11 * 0.0))
      + (float)(v6
              * (float)((float)((float)((float)((float)(v8 * -0.5) + (float)(v9 * 0.0)) + (float)(v10 * 0.5))
                              + (float)(v11 * 0.0))
                      + (float)(v6
                              * (float)((float)((float)((float)(v8 + (float)(v9 * -2.5)) + (float)(v10 + v10))
                                              - (float)(v11 * 0.5))
                                      + (float)(v6
                                              * (float)((float)((float)((float)(v8 * -0.5) + (float)(v9 * 1.5))
                                                              - (float)(v10 * 1.5))
                                                      + (float)(v11 * 0.5)))))));
  float32x2_t v13 = *(float32x2_t *)(v7 + 12);
  float32x2_t v14 = *(float32x2_t *)(v7 + 24);
  float32x2_t v15 = *(float32x2_t *)(v7 + 36);
  float32x2_t v16 = vmul_f32(*(float32x2_t *)v7, (float32x2_t)0xBF000000BF000000);
  __asm { FMOV            V17.2S, #1.5 }
  float32x2_t v22 = vmul_f32(v15, (float32x2_t)0x3F0000003F000000);
  __asm { FMOV            V20.2S, #-2.5 }
  float32x2_t v24 = vmul_f32(v15, 0);
  float32x2_t v25 = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_f32(*(float32x2_t *)v7, 0), v13), vmul_f32(v14, 0)), v24), vmul_n_f32(vadd_f32(vadd_f32(vadd_f32(vadd_f32(v16, vmul_f32(v13, 0)), vmul_f32(v14, (float32x2_t)0x3F0000003F000000)), v24), vmul_n_f32(vadd_f32(vsub_f32(vadd_f32(vadd_f32(*(float32x2_t *)v7, vmul_f32(v13, _D20)), vadd_f32(v14, v14)), v22), vmul_n_f32(vadd_f32(vsub_f32(vadd_f32(v16, vmul_f32(v13, _D17)), vmul_f32(v14, _D17)), v22), v6)), v6)), v6));
  float32x2_t v26 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v25), 1.0 / (float)(vaddv_f32(vmul_f32(v25, (float32x2_t)0x3F3717593E59B3D0)) + (float)(v12 * 0.0722))));
  return vbic_s8((int8x8_t)v26, (int8x8_t)vcltz_f32(v26));
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  float v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    float v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E268;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    float v9 = "usdLux/boundableLightBase.cpp";
    float v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdLuxBoundableLightBase pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::"
                            "Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    float v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E268;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FA3B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93DA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93DA8))
  {
    __cxa_guard_release(&qword_267B93DA8);
  }
  return &qword_267B93DA0;
}

void sub_216FA3C20(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93DB8, memory_order_acquire) & 1) == 0)
  {
    float v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)__cxa_guard_acquire(&qword_267B93DB8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::_GetStaticTfType(v2);
      byte_267B93DB0 = sub_216D16508((char *)&qword_267B93DA0, v3, v4);
      __cxa_guard_release(&qword_267B93DB8);
    }
  }
  return byte_267B93DB0;
}

void sub_216FA3CA0(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this)
{
  return &qword_267B93DA0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93DD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93DD8))
  {
    qword_267B93DC0 = 0;
    *(void *)algn_267B93DC8 = 0;
    qword_267B93DD0 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93DC0, &dword_216758000);
    __cxa_guard_release(&qword_267B93DD8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93DF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93DF8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)1);
    qword_267B93DE0 = 0;
    *(void *)algn_267B93DE8 = 0;
    qword_267B93DF0 = 0;
    sub_21698FA28(&qword_267B93DE0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93DE0, &dword_216758000);
    __cxa_guard_release(&qword_267B93DF8);
  }
  if (v1) {
    return &qword_267B93DE0;
  }
  else {
    return &qword_267B93DC0;
  }
}

void sub_216FA3DE8(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetIntensityAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FA3E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *((void *)a2 + 3) = 0;
  *(void *)a2 = &unk_26C76E5F8;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216FA3EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateIntensityAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FA3F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetExposureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FA3FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateExposureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FA4030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetDiffuseAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FA4088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateDiffuseAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FA40F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetSpecularAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FA4150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateSpecularAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FA41C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetNormalizeAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FA4218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateNormalizeAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FA4288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetColorAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FA42E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateColorAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FA4350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetEnableColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FA43A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateEnableColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FA4418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FA4470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v7);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateColorTemperatureAttr((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v7);
}

void sub_216FA44E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetFiltersRel((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FA4538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::CreateFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::LightAPI(this, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v3);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateFiltersRel((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3, a2);
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI((pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)v3);
}

void sub_216FA4590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216FA45A4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1C36C((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FA4684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FA46D4()
{
  sub_216FA545C();
  sub_216779094(__p, "CylinderLight");
  sub_216FA5588((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FA4724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::~UsdLuxCylinderLight(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    float v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E2C0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    float v9 = "usdLux/cylinderLight.cpp";
    float v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdLuxCylinderLight pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::Get(const "
                            "UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    float v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E2C0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FA48F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93E08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93E08))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93E00, "CylinderLight");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93E00, &dword_216758000);
    __cxa_guard_release(&qword_267B93E08);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    float v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93E00, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E2C0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    float v9 = "usdLux/cylinderLight.cpp";
    float v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdLuxCylinderLight pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::Define(con"
                            "st UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    float v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E2C0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FA4AFC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93E18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93E18))
  {
    __cxa_guard_release(&qword_267B93E18);
  }
  return &qword_267B93E10;
}

void sub_216FA4BA4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93E28, memory_order_acquire) & 1) == 0)
  {
    float v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *)__cxa_guard_acquire(&qword_267B93E28);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::_GetStaticTfType(v2);
      byte_267B93E20 = sub_216D16508((char *)&qword_267B93E10, v3, v4);
      __cxa_guard_release(&qword_267B93E28);
    }
  }
  return byte_267B93E20;
}

void sub_216FA4C24(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this)
{
  return &qword_267B93E10;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::GetLengthAttr(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 168), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA4CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::CreateLengthAttr(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 168), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 184), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA4E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::CreateRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 184), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::GetTreatAsLineAttr(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 456), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA4FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::CreateTreatAsLineAttr(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 456), v9, 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93E48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93E48))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 21);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5) {
      int v5 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v6 = *((void *)v5 + 23);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v7) {
      int v7 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v8 = *((void *)v7 + 57);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B93E30, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93E30, &dword_216758000);
    __cxa_guard_release(&qword_267B93E48);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93E68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93E68))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)1);
    sub_216FA5364((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93E50, &dword_216758000);
    __cxa_guard_release(&qword_267B93E68);
  }
  if (v1) {
    return &qword_267B93E50;
  }
  else {
    return &qword_267B93E30;
  }
}

void sub_216FA52E0(_Unwind_Exception *a1)
{
}

void *sub_216FA5364(uint64_t **a1)
{
  qword_267B93E58 = 0;
  unk_267B93E60 = 0;
  qword_267B93E50 = 0;
  sub_216973388((char **)&qword_267B93E50, ((unk_267B93E38 - qword_267B93E30) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93E50, (void *)qword_267B93E58, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93E50, (void *)qword_267B93E58, (uint64_t *)qword_267B93E30, unk_267B93E38, (unk_267B93E38 - qword_267B93E30) >> 3);
}

void sub_216FA53FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216FA541C(uint64_t a1, const std::type_info *a2, char *a3)
{
  var8.__vftable = (std::type_info_vtbl *)sub_216FA56D0;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_216FA545C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216FA563C((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FA553C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FA5588(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FA561C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FA563C(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FA56AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FA56D0(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1)
{
  int v1 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v6, a1);
  uint64_t v6 = &unk_26C76E2C0;
  if (v7 && (*(unsigned char *)(v7 + 57) & 8) == 0 && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v1) & 1) != 0
    || (v3[0] = "usdLux/cylinderLight.cpp",
        v3[1] = "_ComputeExtent",
        _OWORD v3[2] = 223,
        void v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const UsdTimeCode &, con"
                "st GfMatrix4d *, VtVec3fArray *)",
        char v4 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v3, "light", 0) & 1) != 0))
  {
    int v5 = 0;
    pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdLuxCylinderLight *)&v6, (uint64_t)v3);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)&v6);
  return 0;
}

void sub_216FA59A0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)(v1 - 88));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *sub_216FA59F4(atomic_ullong *a1)
{
  uint64_t result = sub_216FA5A3C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_216FA5A80((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *sub_216FA5A3C()
{
  unint64_t v0 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)operator new(0x2B0uLL);
  pxrInternal__aapl__pxrReserved__::UsdLuxTokensType::UsdLuxTokensType(v0);
  return v0;
}

void sub_216FA5A6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216FA5A80(uint64_t a1)
{
  char v85 = (void **)(a1 + 664);
  sub_216889A04(&v85);
  uint64_t v2 = *(void *)(a1 + 656);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 648);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 640);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 632);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 624);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 616);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 608);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 600);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 592);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 584);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 576);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 568);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 560);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 552);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 544);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 536);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 528);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 520);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 512);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *(void *)(a1 + 504);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *(void *)(a1 + 496);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *(void *)(a1 + 488);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *(void *)(a1 + 480);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *(void *)(a1 + 472);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *(void *)(a1 + 464);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *(void *)(a1 + 456);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *(void *)(a1 + 448);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *(void *)(a1 + 440);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *(void *)(a1 + 432);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *(void *)(a1 + 424);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *(void *)(a1 + 416);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *(void *)(a1 + 408);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *(void *)(a1 + 400);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *(void *)(a1 + 392);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *(void *)(a1 + 384);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *(void *)(a1 + 376);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *(void *)(a1 + 368);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v39 = *(void *)(a1 + 360);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = *(void *)(a1 + 352);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v41 = *(void *)(a1 + 344);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v42 = *(void *)(a1 + 336);
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v43 = *(void *)(a1 + 328);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v44 = *(void *)(a1 + 320);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v45 = *(void *)(a1 + 312);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v46 = *(void *)(a1 + 304);
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v47 = *(void *)(a1 + 296);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v48 = *(void *)(a1 + 288);
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v49 = *(void *)(a1 + 280);
  if ((v49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v50 = *(void *)(a1 + 272);
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v51 = *(void *)(a1 + 264);
  if ((v51 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v52 = *(void *)(a1 + 256);
  if ((v52 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v53 = *(void *)(a1 + 248);
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v54 = *(void *)(a1 + 240);
  if ((v54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v55 = *(void *)(a1 + 232);
  if ((v55 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v56 = *(void *)(a1 + 224);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v57 = *(void *)(a1 + 216);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v58 = *(void *)(a1 + 208);
  if ((v58 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v59 = *(void *)(a1 + 200);
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v60 = *(void *)(a1 + 192);
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v61 = *(void *)(a1 + 184);
  if ((v61 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v62 = *(void *)(a1 + 176);
  if ((v62 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v63 = *(void *)(a1 + 168);
  if ((v63 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v64 = *(void *)(a1 + 160);
  if ((v64 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v65 = *(void *)(a1 + 152);
  if ((v65 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v66 = *(void *)(a1 + 144);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v67 = *(void *)(a1 + 136);
  if ((v67 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v68 = *(void *)(a1 + 128);
  if ((v68 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v69 = *(void *)(a1 + 120);
  if ((v69 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v70 = *(void *)(a1 + 112);
  if ((v70 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v71 = *(void *)(a1 + 104);
  if ((v71 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v72 = *(void *)(a1 + 96);
  if ((v72 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v73 = *(void *)(a1 + 88);
  if ((v73 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v74 = *(void *)(a1 + 80);
  if ((v74 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v75 = *(void *)(a1 + 72);
  if ((v75 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v76 = *(void *)(a1 + 64);
  if ((v76 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v77 = *(void *)(a1 + 56);
  if ((v77 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v78 = *(void *)(a1 + 48);
  if ((v78 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v79 = *(void *)(a1 + 40);
  if ((v79 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v80 = *(void *)(a1 + 32);
  if ((v80 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v81 = *(void *)(a1 + 24);
  if ((v81 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v82 = *(void *)(a1 + 16);
  if ((v82 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v83 = *(void *)(a1 + 8);
  if ((v83 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216FA6284()
{
  sub_216FA6C44();
  sub_216779094(__p, "DiskLight");
  sub_216FA6D70((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FA62D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::~UsdLuxDiskLight(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E318;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/diskLight.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdLuxDiskLight pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E318;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FA64A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93E78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93E78))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93E70, "DiskLight");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93E70, &dword_216758000);
    __cxa_guard_release(&qword_267B93E78);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93E70, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E318;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/diskLight.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdLuxDiskLight pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::Define(const UsdSt"
                            "agePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E318;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FA66AC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93E88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93E88))
  {
    __cxa_guard_release(&qword_267B93E88);
  }
  return &qword_267B93E80;
}

void sub_216FA6754(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93E98, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *)__cxa_guard_acquire(&qword_267B93E98);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::_GetStaticTfType(v2);
      byte_267B93E90 = sub_216D16508((char *)&qword_267B93E80, v3, v4);
      __cxa_guard_release(&qword_267B93E98);
    }
  }
  return byte_267B93E90;
}

void sub_216FA67D4(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this)
{
  return &qword_267B93E80;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 184), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA68AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::CreateRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 184), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *this)
{
  int v1 = (int)this;
  v7[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93EB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93EB8))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 23);
    v7[0] = v4;
    if ((v4 & 7) != 0)
    {
      uint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = (uint64_t)v5;
      }
    }
    sub_216D30CFC(&qword_267B93EA0, v7, 1uLL);
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93EA0, &dword_216758000);
    __cxa_guard_release(&qword_267B93EB8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93ED8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93ED8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)1);
    sub_216FA6B4C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93EC0, &dword_216758000);
    __cxa_guard_release(&qword_267B93ED8);
  }
  if (v1) {
    return &qword_267B93EC0;
  }
  else {
    return &qword_267B93EA0;
  }
}

void sub_216FA6B04(_Unwind_Exception *a1)
{
}

void *sub_216FA6B4C(uint64_t **a1)
{
  qword_267B93EC8 = 0;
  unk_267B93ED0 = 0;
  qword_267B93EC0 = 0;
  sub_216973388((char **)&qword_267B93EC0, ((unk_267B93EA8 - qword_267B93EA0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93EC0, (void *)qword_267B93EC8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93EC0, (void *)qword_267B93EC8, (uint64_t *)qword_267B93EA0, unk_267B93EA8, (unk_267B93EA8 - qword_267B93EA0) >> 3);
}

void sub_216FA6BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216FA6C04(uint64_t a1, const std::type_info *a2, char *a3)
{
  var8.__vftable = (std::type_info_vtbl *)sub_216FA6E28;
  pxrInternal__aapl__pxrReserved__::UsdGeomRegisterComputeExtentFunction(v3, &var8, v4);
}

uint64_t *sub_216FA6C44()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216FA563C((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FA6D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FA6D70(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FA6E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216FA6E28(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1)
{
  int v1 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v6, a1);
  uint64_t v6 = &unk_26C76E318;
  if (v7 && (*(unsigned char *)(v7 + 57) & 8) == 0 && (pxrInternal__aapl__pxrReserved__::UsdTyped::_IsCompatible(v1) & 1) != 0
    || (v3[0] = "usdLux/diskLight.cpp",
        v3[1] = "_ComputeExtent",
        _OWORD v3[2] = 185,
        void v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::_ComputeExtent(const UsdGeomBoundable &, const UsdTimeCode &, con"
                "st GfMatrix4d *, VtVec3fArray *)",
        char v4 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v3, "light", 0) & 1) != 0))
  {
    int v5 = 0;
    pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight::GetRadiusAttr((pxrInternal__aapl__pxrReserved__::UsdLuxDiskLight *)&v6, (uint64_t)v3);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)&v6);
  return 0;
}

void sub_216FA7090(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase::~UsdLuxBoundableLightBase((pxrInternal__aapl__pxrReserved__::UsdLuxBoundableLightBase *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_216FA70D8()
{
  sub_216FA7A58();
  sub_216779094(__p, "DistantLight");
  sub_216FA7B84((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FA7128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::~UsdLuxDistantLight(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::~UsdLuxNonboundableLightBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E370;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/distantLight.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdLuxDistantLight pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E370;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FA72F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93EE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93EE8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93EE0, "DistantLight");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93EE0, &dword_216758000);
    __cxa_guard_release(&qword_267B93EE8);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93EE0, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E370;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/distantLight.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdLuxDistantLight pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::Define(const"
                            " UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E370;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FA7500(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93EF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93EF8))
  {
    __cxa_guard_release(&qword_267B93EF8);
  }
  return &qword_267B93EF0;
}

void sub_216FA75A8(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93F08, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *)__cxa_guard_acquire(&qword_267B93F08);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::_GetStaticTfType(v2);
      byte_267B93F00 = sub_216D16508((char *)&qword_267B93EF0, v3, v4);
      __cxa_guard_release(&qword_267B93F08);
    }
  }
  return byte_267B93F00;
}

void sub_216FA7628(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this)
{
  return &qword_267B93EF0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::GetAngleAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 104), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA7700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::CreateAngleAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 104), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxDistantLight *this)
{
  int v1 = (int)this;
  v7[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93F28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93F28))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 13);
    v7[0] = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = (uint64_t)v5;
      }
    }
    sub_216D30CFC(&qword_267B93F10, v7, 1uLL);
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93F10, &dword_216758000);
    __cxa_guard_release(&qword_267B93F28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93F48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93F48))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *)1);
    sub_216FA79A0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93F30, &dword_216758000);
    __cxa_guard_release(&qword_267B93F48);
  }
  if (v1) {
    return &qword_267B93F30;
  }
  else {
    return &qword_267B93F10;
  }
}

void sub_216FA7958(_Unwind_Exception *a1)
{
}

void *sub_216FA79A0(uint64_t **a1)
{
  qword_267B93F38 = 0;
  unk_267B93F40 = 0;
  qword_267B93F30 = 0;
  sub_216973388((char **)&qword_267B93F30, ((unk_267B93F18 - qword_267B93F10) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93F30, (void *)qword_267B93F38, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93F30, (void *)qword_267B93F38, (uint64_t *)qword_267B93F10, unk_267B93F18, (unk_267B93F18 - qword_267B93F10) >> 3);
}

void sub_216FA7A38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FA7A58()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216FA7C38((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FA7B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FA7B84(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FA7C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FA7C38(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FA7CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FA7CCC()
{
  sub_216FA8F80();
  sub_216779094(__p, "DomeLight");
  sub_216FA90AC((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FA7D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::~UsdLuxDomeLight(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::~UsdLuxNonboundableLightBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E3C8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/domeLight.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdLuxDomeLight pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E3C8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FA7EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93F58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93F58))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93F50, "DomeLight");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93F50, &dword_216758000);
    __cxa_guard_release(&qword_267B93F58);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93F50, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E3C8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/domeLight.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdLuxDomeLight pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::Define(const UsdSt"
                            "agePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E3C8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FA80F4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93F68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93F68))
  {
    __cxa_guard_release(&qword_267B93F68);
  }
  return &qword_267B93F60;
}

void sub_216FA819C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93F78, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *)__cxa_guard_acquire(&qword_267B93F78);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::_GetStaticTfType(v2);
      byte_267B93F70 = sub_216D16508((char *)&qword_267B93F60, v3, v4);
      __cxa_guard_release(&qword_267B93F78);
    }
  }
  return byte_267B93F70;
}

void sub_216FA821C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  return &qword_267B93F60;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::GetTextureFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 296), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA82F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::CreateTextureFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 296), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::GetTextureFormatAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 304), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA845C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::CreateTextureFormatAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 304), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::GetGuideRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 80), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA85C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::CreateGuideRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::GetPortalsRel(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 432), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA872C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::CreatePortalsRel(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 432), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA87E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93F98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93F98))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 37);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5) {
      char v5 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v6 = *((void *)v5 + 38);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v7) {
      int v7 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v8 = *((void *)v7 + 10);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B93F80, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93F80, &dword_216758000);
    __cxa_guard_release(&qword_267B93F98);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93FB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93FB8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *)1);
    sub_216FA8AD0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93FA0, &dword_216758000);
    __cxa_guard_release(&qword_267B93FB8);
  }
  if (v1) {
    return &qword_267B93FA0;
  }
  else {
    return &qword_267B93F80;
  }
}

void sub_216FA8A4C(_Unwind_Exception *a1)
{
}

void *sub_216FA8AD0(uint64_t **a1)
{
  qword_267B93FA8 = 0;
  unk_267B93FB0 = 0;
  qword_267B93FA0 = 0;
  sub_216973388((char **)&qword_267B93FA0, ((unk_267B93F88 - qword_267B93F80) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B93FA0, (void *)qword_267B93FA8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B93FA0, (void *)qword_267B93FA8, (uint64_t *)qword_267B93F80, unk_267B93F88, (unk_267B93F88 - qword_267B93F80) >> 3);
}

void sub_216FA8B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight::OrientToStageUpAxis(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight *this)
{
  sub_216D16CFC((uint64_t)&v14, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v14, v2, &v20);
  pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis((uint64_t *)&v20, (atomic_uint **)&v22);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    unint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v4 = (atomic_uint *)(v22.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = *((void *)v3 + 169);
  if ((v22.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit(v4, 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = v21;
  if (v21 && atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
  if (v4 == (atomic_uint *)v7)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v8) {
      uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v9 = (void *)((char *)v8 + 416);
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(3, (void *)v8 + 52, 0, &v22);
    BOOL v19 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps(this, &v19, &v14);
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    while (1)
    {
      if ((atomic_ullong *)v10 == v11)
      {
        uint64_t v20 = (void **)&v14;
        sub_216EF9D3C(&v20);
        pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddXformOp((uint64_t)this, 3, 1, v9, 0, (uint64_t)&v14);
        LODWORD(v20) = 1119092736;
        sub_216FA8E6C((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v14);
        sub_216EF9DC0((uint64_t)&v14);
        goto LABEL_21;
      }
      uint64_t v12 = (_DWORD *)sub_216F0BE78(v10);
      uint64_t v13 = sub_216D563F8(v12);
      if ((*(void *)v13 & 0xFFFFFFFFFFFFFFF8) == (v22.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8)) {
        break;
      }
      v10 += 136;
    }
    uint64_t v20 = (void **)&v14;
    sub_216EF9D3C(&v20);
LABEL_21:
    if ((v22.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_216FA8DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void *)(v2 - 40);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(atomic_uint **)(v2 - 48);
  if (v5)
  {
    if (atomic_fetch_add_explicit(v5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
    }
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216FA8E6C(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *a1)
{
  if (!*((unsigned char *)a1 + 132))
  {
    sub_216F0BE78((uint64_t)a1);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>();
  }
  v5[0] = "usdGeom/xformOp.h";
  v5[1] = "Set";
  uint64_t v5[2] = 399;
  uint64_t v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::Set(const T &, UsdTimeCode) const [T = float]";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a1, (atomic_uint **)&v4);
  unint64_t v1 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0) {
      uint64_t v2 = *(const char **)v2;
    }
  }
  else
  {
    uint64_t v2 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set a value on the inverse xformOp '%s'. Please set value on the paired non-inverse xformOp instead.", v2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 0;
}

uint64_t *sub_216FA8F80()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216FA7C38((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FA9060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FA90AC(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FA9140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FA9164()
{
  sub_216FAA1D4();
  sub_216779094(__p, "DomeLight_1");
  sub_216FAA300((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FA91B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::~UsdLuxDomeLight_1(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::~UsdLuxNonboundableLightBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E420;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/domeLight_1.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdLuxDomeLight_1 pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E420;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FA9380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93FC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93FC8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B93FC0, "DomeLight_1");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B93FC0, &dword_216758000);
    __cxa_guard_release(&qword_267B93FC8);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B93FC0, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E420;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/domeLight_1.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdLuxDomeLight_1 pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E420;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FA958C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93FD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B93FD8))
  {
    __cxa_guard_release(&qword_267B93FD8);
  }
  return &qword_267B93FD0;
}

void sub_216FA9634(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B93FE8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *)__cxa_guard_acquire(&qword_267B93FE8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::_GetStaticTfType(v2);
      byte_267B93FE0 = sub_216D16508((char *)&qword_267B93FD0, v3, v4);
      __cxa_guard_release(&qword_267B93FE8);
    }
  }
  return byte_267B93FE0;
}

void sub_216FA96B4(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this)
{
  return &qword_267B93FD0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::GetTextureFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 296), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA978C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::CreateTextureFileAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 296), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::GetTextureFormatAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 304), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA98F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::CreateTextureFormatAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 304), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::GetGuideRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 80), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA9A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::CreateGuideRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 80), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::GetPoleAxisAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 424), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA9BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::CreatePoleAxisAttr(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 424), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::GetPortalsRel(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 432), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA9D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::CreatePortalsRel(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 432), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FA9DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxDomeLight_1 *this)
{
  int v1 = (int)this;
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94008, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94008))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 37);
    uint64_t v14 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5) {
      char v5 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v6 = *((void *)v5 + 38);
    uint64_t v15 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v7) {
      int v7 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v8 = *((void *)v7 + 10);
    uint64_t v16 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9) {
      uint64_t v9 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v10 = *((void *)v9 + 53);
    uint64_t v17 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B93FF0, &v14, 4uLL);
    for (uint64_t i = 24; i != -8; i -= 8)
    {
      uint64_t v12 = *(uint64_t *)((char *)&v14 + i);
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B93FF0, &dword_216758000);
    __cxa_guard_release(&qword_267B94008);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94028, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94028))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *)1);
    sub_216FAA11C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94010, &dword_216758000);
    __cxa_guard_release(&qword_267B94028);
  }
  if (v1) {
    return &qword_267B94010;
  }
  else {
    return &qword_267B93FF0;
  }
}

void sub_216FAA098(_Unwind_Exception *a1)
{
}

void *sub_216FAA11C(uint64_t **a1)
{
  qword_267B94018 = 0;
  unk_267B94020 = 0;
  qword_267B94010 = 0;
  sub_216973388((char **)&qword_267B94010, ((unk_267B93FF8 - qword_267B93FF0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94010, (void *)qword_267B94018, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94010, (void *)qword_267B94018, (uint64_t *)qword_267B93FF0, unk_267B93FF8, (unk_267B93FF8 - qword_267B93FF0) >> 3);
}

void sub_216FAA1B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FAA1D4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216FA7C38((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FAA2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FAA300(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FAA394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FAA3B8()
{
  sub_216FAAC74();
  sub_216779094(__p, "GeometryLight");
  sub_216FAADA0((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FAA408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::~UsdLuxGeometryLight(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::~UsdLuxNonboundableLightBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E478;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/geometryLight.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdLuxGeometryLight pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::Get(const "
                            "UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E478;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FAA5D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94038, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94038))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B94030, "GeometryLight");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B94030, &dword_216758000);
    __cxa_guard_release(&qword_267B94038);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B94030, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E478;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/geometryLight.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdLuxGeometryLight pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::Define(con"
                            "st UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E478;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FAA7E0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94048, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94048))
  {
    __cxa_guard_release(&qword_267B94048);
  }
  return &qword_267B94040;
}

void sub_216FAA888(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94058, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *)__cxa_guard_acquire(&qword_267B94058);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::_GetStaticTfType(v2);
      byte_267B94050 = sub_216D16508((char *)&qword_267B94040, v3, v4);
      __cxa_guard_release(&qword_267B94058);
    }
  }
  return byte_267B94050;
}

void sub_216FAA908(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this)
{
  return &qword_267B94040;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::GetGeometryRel(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 72), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAA9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::CreateGeometryRel(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 72), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAAA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxGeometryLight *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94078, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94078))
  {
    qword_267B94060 = 0;
    *(void *)algn_267B94068 = 0;
    qword_267B94070 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94060, &dword_216758000);
    __cxa_guard_release(&qword_267B94078);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94098, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94098))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdLuxNonboundableLightBase *)1);
    sub_216FAABBC((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94080, &dword_216758000);
    __cxa_guard_release(&qword_267B94098);
  }
  if (v1) {
    return &qword_267B94080;
  }
  else {
    return &qword_267B94060;
  }
}

void sub_216FAABA4(_Unwind_Exception *a1)
{
}

void *sub_216FAABBC(uint64_t **a1)
{
  qword_267B94088 = 0;
  unk_267B94090 = 0;
  qword_267B94080 = 0;
  sub_216973388((char **)&qword_267B94080, ((*(void *)algn_267B94068 - qword_267B94060) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94080, (void *)qword_267B94088, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94080, (void *)qword_267B94088, (uint64_t *)qword_267B94060, *(uint64_t **)algn_267B94068, (*(void *)algn_267B94068 - qword_267B94060) >> 3);
}

void sub_216FAAC54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216FAAC74()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216FA7C38((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FAAD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FAADA0(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_216FAAE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::~UsdLuxLight(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E4D0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/light.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdLuxLight pxrInternal__aapl__pxrReserved__::UsdLuxLight::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E4D0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FAB00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLight::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLight::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B940A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B940A8))
  {
    __cxa_guard_release(&qword_267B940A8);
  }
  return &qword_267B940A0;
}

void sub_216FAB09C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLight::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B940B8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxLight *)__cxa_guard_acquire(&qword_267B940B8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxLight::_GetStaticTfType(v2);
      byte_267B940B0 = sub_216D16508((char *)&qword_267B940A0, v3, v4);
      __cxa_guard_release(&qword_267B940B8);
    }
  }
  return byte_267B940B0;
}

void sub_216FAB11C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLight::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  return &qword_267B940A0;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 160), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAB1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 160), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 144), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAB35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 128), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAB4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 128), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 288), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAB62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 288), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 176), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAB794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 176), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 112), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAB8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 112), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 280), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 136), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FABA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 136), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 120), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FABBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 120), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 328), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FABD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 328), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FABDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  int v1 = (int)this;
  uint64_t v36 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B940D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B940D8))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      unint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 3);
    uint64_t v26 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5) {
      char v5 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v6 = *((void *)v5 + 4);
    uint64_t v27 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v7) {
      int v7 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v8 = *((void *)v7 + 20);
    uint64_t v28 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9) {
      uint64_t v9 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v10 = *((void *)v9 + 18);
    uint64_t v29 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v11) {
      uint64_t v11 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v12 = *((void *)v11 + 16);
    uint64_t v30 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v13) {
      char v13 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v14 = *((void *)v13 + 36);
    uint64_t v31 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v15) {
      uint64_t v15 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v16 = *((void *)v15 + 22);
    uint64_t v32 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v17) {
      uint64_t v17 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v18 = *((void *)v17 + 14);
    uint64_t v33 = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    BOOL v19 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v19) {
      BOOL v19 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v20 = *((void *)v19 + 17);
    uint64_t v34 = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v21) {
      uint64_t v21 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v22 = *((void *)v21 + 15);
    uint64_t v35 = v22;
    if ((v22 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B940C0, &v26, 0xAuLL);
    for (uint64_t i = 72; i != -8; i -= 8)
    {
      uint64_t v24 = *(uint64_t *)((char *)&v26 + i);
      if ((v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B940C0, &dword_216758000);
    __cxa_guard_release(&qword_267B940D8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B940F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B940F8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    sub_216FAC2EC((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B940E0, &dword_216758000);
    __cxa_guard_release(&qword_267B940F8);
  }
  if (v1) {
    return &qword_267B940E0;
  }
  else {
    return &qword_267B940C0;
  }
}

void sub_216FAC268(_Unwind_Exception *a1)
{
}

void *sub_216FAC2EC(uint64_t **a1)
{
  qword_267B940E8 = 0;
  unk_267B940F0 = 0;
  qword_267B940E0 = 0;
  sub_216973388((char **)&qword_267B940E0, ((unk_267B940C8 - qword_267B940C0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B940E0, (void *)qword_267B940E8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B940E0, (void *)qword_267B940E8, (uint64_t *)qword_267B940C0, unk_267B940C8, (unk_267B940C8 - qword_267B940C0) >> 3);
}

void sub_216FAC384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216FAC3A4(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v4 = operator new(0x10uLL);
  void v4[4] = 256;
  *(void *)uint64_t v4 = &unk_26C76E528;
  sub_216FAD1C0(&v5, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(v3, &v5);
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_216FAC428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdLuxLight *pxrInternal__aapl__pxrReserved__::UsdLuxLight::UsdLuxLight(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *(void *)this = &unk_26C76E4D0;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

{
  uint64_t v4;
  atomic_ullong *v5;
  int v6;
  int v7;
  uint64_t v8;

  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *(void *)this = &unk_26C76E4D0;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

void sub_216FAC4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216FAC59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *((void *)a2 + 3) = 0;
  *(void *)a2 = off_26C76D8C8;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216FAC650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  uint64_t v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216FAC734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetOutput(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FAC820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FAC90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::CreateInput(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  uint64_t v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216FACA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetInput(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FACAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetInputs(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FACBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::ComputeBaseEmission(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this)
{
  int v2 = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetIntensityAttr(this, (uint64_t)v1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
}

void sub_216FACE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D2EDA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetLightLinkCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  sub_216D36868(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (uint64_t *)v3 + 43);
  *(void *)a2 = &unk_26C767A08;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FACF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLight::GetShadowLinkCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLight *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  sub_216D36868(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (uint64_t *)v3 + 56);
  *(void *)a2 = &unk_26C767A08;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAD03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216FAD054()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F06AAC((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FAD134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FAD188(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::~UsdShadeConnectableAPIBehavior(a1);

  operator delete(v1);
}

uint64_t sub_216FAD1B0(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdProperty *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectInputToSource(a1, a2, a3, a4, 1);
}

uint64_t sub_216FAD1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectOutputToSource(a1, a2, a3, a4, 1);
}

void *sub_216FAD1C0(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  *char v4 = &unk_26C76E580;
  v4[1] = 0;
  void v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216FAD218(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325190(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FAD234(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216FAD25C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216FAD28C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C76E5D0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::~UsdLuxLightAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76E5F8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdLux/lightAPI.cpp";
    int v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdLuxLightAPI pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::Get(const UsdStagePt"
                            "r &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    int v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C76E5F8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FAD48C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this)
{
  return 5;
}

uint64_t sub_216FAD4B4(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94100, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    void v12[2] = 1024;
    uint64_t v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdLuxLightAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_216FAD69C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76E5F8;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C76E5F8;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_216FAD688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216FAD69C(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B94100, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    void v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdLuxLightAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94108, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94108))
  {
    __cxa_guard_release(&qword_267B94108);
  }
  return &qword_267B94100;
}

void sub_216FAD7D0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94118, memory_order_acquire) & 1) == 0)
  {
    int v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *)__cxa_guard_acquire(&qword_267B94118);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetStaticTfType(v2);
      byte_267B94110 = sub_216D16508((char *)&qword_267B94100, v3, v4);
      __cxa_guard_release(&qword_267B94118);
    }
  }
  return byte_267B94110;
}

void sub_216FAD850(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this)
{
  return &qword_267B94100;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetShaderIdAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 376), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAD928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateShaderIdAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 376), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetMaterialSyncModeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 368), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FADA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateMaterialSyncModeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 368), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 160), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FADBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateIntensityAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 160), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 144), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FADD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateExposureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 128), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FADEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateDiffuseAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 128), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 288), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAE030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateSpecularAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 288), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 176), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAE198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateNormalizeAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 176), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 112), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAE300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateColorAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 112), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 280), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 136), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAE468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateEnableColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 136), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 120), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAE5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateColorTemperatureAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 120), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 328), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAE738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateFiltersRel(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 328), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAE7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this)
{
  int v1 = (int)this;
  uint64_t v36 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94138, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94138))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 47);
    uint64_t v26 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5) {
      int v5 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v6 = *((void *)v5 + 46);
    uint64_t v27 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v7) {
      int v7 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v8 = *((void *)v7 + 20);
    uint64_t v28 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v9) {
      uint64_t v9 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v10 = *((void *)v9 + 18);
    uint64_t v29 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v11 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v11) {
      char v11 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v12 = *((void *)v11 + 16);
    uint64_t v30 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v13) {
      char v13 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v14 = *((void *)v13 + 36);
    uint64_t v31 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v15) {
      uint64_t v15 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v16 = *((void *)v15 + 22);
    uint64_t v32 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v17) {
      uint64_t v17 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v18 = *((void *)v17 + 14);
    uint64_t v33 = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    BOOL v19 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v19) {
      BOOL v19 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v20 = *((void *)v19 + 17);
    uint64_t v34 = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v21) {
      uint64_t v21 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v22 = *((void *)v21 + 15);
    uint64_t v35 = v22;
    if ((v22 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B94120, &v26, 0xAuLL);
    for (uint64_t i = 72; i != -8; i -= 8)
    {
      uint64_t v24 = *(uint64_t *)((char *)&v26 + i);
      if ((v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94120, &dword_216758000);
    __cxa_guard_release(&qword_267B94138);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94158, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94158))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216FAECF0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94140, &dword_216758000);
    __cxa_guard_release(&qword_267B94158);
  }
  if (v1) {
    return &qword_267B94140;
  }
  else {
    return &qword_267B94120;
  }
}

void sub_216FAEC6C(_Unwind_Exception *a1)
{
}

void *sub_216FAECF0(uint64_t **a1)
{
  qword_267B94148 = 0;
  unk_267B94150 = 0;
  qword_267B94140 = 0;
  sub_216973388((char **)&qword_267B94140, ((unk_267B94128 - qword_267B94120) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B94140, (void *)qword_267B94148, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B94140, (void *)qword_267B94148, (uint64_t *)qword_267B94120, unk_267B94128, (unk_267B94128 - qword_267B94120) >> 3);
}

void sub_216FAED88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216FAEDA8(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v4 = operator new(0x10uLL);
  void v4[4] = 1;
  *(void *)uint64_t v4 = &unk_26C76E650;
  sub_216FAFD54(&v5, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(v3, &v5);
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_216FAEE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::UsdLuxLightAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this, const pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26C76E5F8;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

{
  uint64_t v4;
  atomic_ullong *v5;
  int v6;
  int v7;
  uint64_t v8;

  sub_216D16CFC((uint64_t)&v4, (uint64_t *)a2 + 1, (_DWORD *)a2 + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4);
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26C76E5F8;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return this;
}

void sub_216FAEEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216FAEFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::ConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v3);
  *((void *)a2 + 3) = 0;
  *(void *)a2 = off_26C76D8C8;
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216FAF05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  uint64_t v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216FAF140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetOutput(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FAF22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FAF318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateInput(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, uint64_t a4@<X8>)
{
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v7);
  uint64_t v12[3] = 0;
  v12[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12, a2, a3, a4);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v12);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
}

void sub_216FAF40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetInput(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FAF4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetInputs(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v10, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
  void v10[3] = 0;
  v10[0] = off_26C76D8C8;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10, a2, a3);
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
}

void sub_216FAF5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetLightLinkCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  sub_216D36868(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (uint64_t *)v3 + 43);
  *(void *)a2 = &unk_26C767A08;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAF6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetShadowLinkCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  sub_216D36868(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (uint64_t *)v3 + 56);
  *(void *)a2 = &unk_26C767A08;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FAF798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetShaderIdAttrForRenderContext(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216D16CFC((uint64_t)v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
  sub_216FAF890(a2, (atomic_uint **)&v5);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5, a3);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
}

void sub_216FAF85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216FAF890(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X0>, atomic_uint **a2@<X8>)
{
  if (*(void *)this)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v4) {
      uint64_t v4 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v4 + 376), (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
    if (v9 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v5) {
      unint64_t v5 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    int v6 = (atomic_uint *)*((void *)v5 + 47);
    *a2 = v6;
    if ((v6 & 7) != 0)
    {
      int v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v7;
      }
    }
  }
}

void sub_216FAF958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::CreateShaderIdAttrForRenderContext(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, std::type_info *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  sub_216FAF890(a2, (atomic_uint **)&v10);
  char v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    char v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a3, a4, a5);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetShaderId(pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetShaderIdAttrForRenderContext(this, v4, (uint64_t)&v7);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v7, v6))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>(); {
      if ((v11 & 7) != 0)
      }
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
      sub_21697C414(&v9);
      if (v8) {
        sub_216D16E0C(v8);
      }
      uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8);
    }
    while (v4 != v5);
  }
  pxrInternal__aapl__pxrReserved__::UsdLuxLightAPI::GetShaderIdAttr(this, (uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_216FAFBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_216D2EDA0((uint64_t)&a9);
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216FAFBE8()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216FAFCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216FAFD1C(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::~UsdShadeConnectableAPIBehavior(a1);

  operator delete(v1);
}

uint64_t sub_216FAFD44(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdProperty *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectInputToSource(a1, a2, a3, a4, 1);
}

uint64_t sub_216FAFD4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPIBehavior::_CanConnectOutputToSource(a1, a2, a3, a4, 1);
}

void *sub_216FAFD54(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  *char v4 = &unk_26C76E6A8;
  v4[1] = 0;
  void v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216FAFDAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325190(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216FAFDC8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216FAFDF0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216FAFE20(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C76E6F8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216FAFE64()
{
  sub_216FB1548();
  sub_216779094(__p, "LightFilter");
  sub_216FB1674((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216FAFEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::~UsdLuxLightFilter(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E720;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    int v9 = "usdLux/lightFilter.cpp";
    int v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdLuxLightFilter pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    int v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E720;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB0080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94168, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94168))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B94160, "LightFilter");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B94160, &dword_216758000);
    __cxa_guard_release(&qword_267B94168);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B94160, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E720;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    int v9 = "usdLux/lightFilter.cpp";
    int v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdLuxLightFilter pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::Define(const U"
                            "sdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    int v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C76E720;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216FB028C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94178, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B94178))
  {
    __cxa_guard_release(&qword_267B94178);
  }
  return &qword_267B94170;
}

void sub_216FB0334(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B94188, memory_order_acquire) & 1) == 0)
  {
    int v2 = (pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *)__cxa_guard_acquire(&qword_267B94188);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_GetStaticTfType(v2);
      byte_267B94180 = sub_216D16508((char *)&qword_267B94170, v3, v4);
      __cxa_guard_release(&qword_267B94188);
    }
  }
  return byte_267B94180;
}

void sub_216FB03B4(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this)
{
  return &qword_267B94170;
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetShaderIdAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v3) {
    uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v3 + 336), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216FB048C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::CreateShaderIdAttr(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  if (!v8) {
    uint64_t v8 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
  }
  int v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    int v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)((char *)v8 + 336), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdLuxLightFilter *this)
{
  int v1 = (int)this;
  v7[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B941A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B941A8))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdLuxTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    if (!v3) {
      uint64_t v3 = sub_216FA59F4(&pxrInternal__aapl__pxrReserved__::UsdLuxTokens);
    }
    uint64_t v4 = *((void *)v3 + 42);
    v7[0] = v4;
    if ((v4 & 7) != 0)
    {
      unint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = (uint64_t)v5;
      }
    }
    sub_216D30CFC(&qword_267B94190, v7, 1uLL);
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B94190, &dword_216758000);
    __cxa_guard_release(&qword_267B941A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B941C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B941C8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)1);
    sub_216FB072C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B941B0, &dword_216758000);
    __cxa_guard_release(&qword_267B941C8);
  }
  if (v1) {
    return &qword_267B941B0;
  }
  else {
    return &qword_267B94190;
  }
}

void sub_216FB06E4(_Unwind_Exception *a1)
{
}

void *sub_216FB072C(uint64_t **a1)
{
  qword_267B941B8 = 0;
  unk_267B941C0 = 0;
  qword_267B941B0 = 0;
  sub_216973388((char **)&qword_267B941B0, ((unk_267B94198 - qword_267B94190) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B941B0, (void *)qword_267B941B8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B941B0, (void *)qword_267B941B8, (uint64_t *)qword_267B94190, unk_267B94198, (unk_267B94198 - qword_267B94190) >> 3);
}

void sub_216FB07C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216FB07E4(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v4 = operator new(0x10uLL);
  void v4[4] = 1;
  *(void *)uint64_t v4 = &unk_26C76E778;
  sub_216FB1768(&v5, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::UsdShadeRegisterConnectableAPIBehavior(v3, &v5);
  if (v6) {
    sub_216784EC4(v6);
  }
}