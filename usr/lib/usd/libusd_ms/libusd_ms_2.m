void pxrInternal__aapl__pxrReserved__::ArchMapFileReadWrite(const char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  FILE *v5;
  FILE *v6;
  long long v7;
  uint64_t v8;
  uint64_t vars8;

  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  v5 = fopen(a1, "rb");
  if (v5)
  {
    v6 = v5;
    sub_216834B5C(v5, a2, a3);
    fclose(v6);
  }
  else
  {
    if (a2)
    {
      pxrInternal__aapl__pxrReserved__::ArchStrerror(&v7);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(_OWORD *)a2 = v7;
      *(void *)(a2 + 16) = v8;
    }
    *a3 = 0;
    a3[1] = -1;
  }
}

void sub_216834DF8(_Unwind_Exception *a1)
{
  fclose(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchMemAdvise(uint64_t a1, uint64_t a2, int a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E218, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E218))
  {
    qword_26798E210 = -sysconf(29);
    __cxa_guard_release(&qword_26798E218);
  }
  uint64_t v6 = qword_26798E210 & a1;
  size_t v7 = a1 - (qword_26798E210 & a1) + a2;
  int v8 = posix_madvise((void *)(qword_26798E210 & a1), v7, dword_21740BD60[a3]);
  if (v8)
  {
    int v9 = v8;
    v10 = (FILE *)*MEMORY[0x263EF8348];
    int v11 = *__error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror(__p);
    if (v14 >= 0) {
      v12 = __p;
    }
    else {
      v12 = (void **)__p[0];
    }
    fprintf(v10, "failed call to posix_madvise(%zd, %zd)ret=%d, errno=%d '%s'\n", v6, v7, v9, v11, (const char *)v12);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216834F1C(_Unwind_Exception *a1)
{
}

BOOL pxrInternal__aapl__pxrReserved__::ArchQueryMappedMemoryResidency(pxrInternal__aapl__pxrReserved__ *this, size_t a2, char *a3, unsigned __int8 *a4)
{
  return mincore(this, a2, a3) == 0;
}

ssize_t pxrInternal__aapl__pxrReserved__::ArchPRead(FILE *this, __sFILE *a2, char *a3, off_t a4)
{
  if (!a3) {
    return 0;
  }
  v5 = a3;
  int v7 = fileno(this);
  ssize_t result = pread(v7, a2, (size_t)v5, a4);
  if ((char *)result != v5 && result)
  {
    uint64_t v9 = 0;
    while (1)
    {
      if (result == -1)
      {
        if (*__error() != 4) {
          return -1;
        }
      }
      else if (result >= 1)
      {
        a2 = (__sFILE *)((char *)a2 + result);
        a4 += result;
        v5 -= result;
        v9 += result;
      }
      ssize_t result = pread(v7, a2, (size_t)v5, a4);
      if ((char *)result == v5 || !result)
      {
        result += v9;
        return result;
      }
    }
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::ArchPWrite(FILE *this, __sFILE *a2, char *a3, off_t a4)
{
  if (a4 < 0) {
    return (char *)-1;
  }
  off_t v4 = a4;
  int v7 = fileno(this);
  ssize_t v8 = pwrite(v7, a2, (size_t)a3, v4);
  if ((char *)v8 != a3)
  {
    uint64_t v9 = 0;
    while (v8 != -1)
    {
      uint64_t v10 = v9;
      int v11 = a3;
      v9 += v8;
      a3 -= v8;
      v4 += v8;
      a2 = (__sFILE *)((char *)a2 + v8);
      ssize_t v8 = pwrite(v7, a2, (size_t)a3, v4);
      if ((char *)v8 == a3) {
        return &v11[v10];
      }
    }
    return (char *)-1;
  }
  return a3;
}

void pxrInternal__aapl__pxrReserved__::ArchReadLink(pxrInternal__aapl__pxrReserved__ *this@<X0>, void *a2@<X8>)
{
  if (this && *(unsigned char *)this)
  {
    v5 = 0;
    int64_t v6 = 1024;
    while (1)
    {
      int v7 = (char *)operator new[](v6);
      if (v5) {
        operator delete[](v5);
      }
      ssize_t v8 = readlink((const char *)this, v7, v6);
      if (v8 == -1)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        goto LABEL_15;
      }
      if (v8 < v6) {
        break;
      }
      if (lstat((const char *)this, &v9)) {
        v6 *= 2;
      }
      else {
        int64_t v6 = v9.st_size + 1;
      }
      v5 = v7;
    }
    v7[v8] = 0;
    sub_216779094(a2, v7);
LABEL_15:
    operator delete[](v7);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_2168351C4(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_2168351F0(uint64_t a1, uint64_t a2)
{
  ssize_t result = *(void **)a1;
  *(void *)a1 = a2;
  if (result) {
    return (void *)munmap(result, *(void *)(a1 + 8));
  }
  return result;
}

void *sub_216835220(uint64_t a1, uint64_t a2)
{
  ssize_t result = *(void **)a1;
  *(void *)a1 = a2;
  if (result) {
    return (void *)munmap(result, *(void *)(a1 + 8));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName(uint64_t a1@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  int v5 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v7 = (char *)a2->__r_.__value_.__r.__words[0];
  unint64_t size = a2->__r_.__value_.__l.__size_;
  if (v5 >= 0) {
    uint64_t v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    uint64_t v8 = a2->__r_.__value_.__l.__size_;
  }
  if (v5 >= 0) {
    stat v9 = a2;
  }
  else {
    stat v9 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v8 >= 7)
  {
    uint64_t v10 = (char *)v9 + v8;
    uint64_t v11 = v8;
    v12 = (std::string *)v9;
    do
    {
      v13 = (char *)memchr(v12, 32, v11 - 6);
      if (!v13) {
        break;
      }
      BOOL v14 = *(_DWORD *)v13 == 1769429792 && *(_DWORD *)(v13 + 3) == 543716457;
      if (v14)
      {
        if (v13 != v10)
        {
          std::string::size_type v15 = v13 - (char *)v9;
          if (v15 != -1)
          {
            std::string::basic_string(&v91, a2, 0, v15, (std::allocator<char> *)&v89);
            std::string::basic_string(&v89, a2, v15 + 6, v8 - v15 - 7, (std::allocator<char> *)&__str);
            std::string __dst = v91;
            std::string v88 = v89;
            goto LABEL_23;
          }
        }
        break;
      }
      v12 = (std::string *)(v13 + 1);
      uint64_t v11 = v10 - (char *)v12;
    }
    while (v10 - (char *)v12 >= 7);
  }
  if (v5 < 0) {
    sub_216778F24(&__dst, v7, size);
  }
  else {
    std::string __dst = *a2;
  }
  memset(&v88, 0, sizeof(v88));
LABEL_23:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    sub_216778F24(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = __dst;
  }
  v16 = (std::string *)sub_216779094(&v91, "::");
  int v17 = *(char *)(a1 + 23);
  if (v17 >= 0) {
    v18 = (const std::string::value_type *)a1;
  }
  else {
    v18 = *(const std::string::value_type **)a1;
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v19 = *(void *)(a1 + 8);
  }
  std::string::append(v16, v18, v19);
  int64_t v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t v20 = __p.__r_.__value_.__l.__size_;
  }
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v22 = &v91;
  }
  else {
    v22 = (std::string *)v91.__r_.__value_.__r.__words[0];
  }
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v23 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v23 = v91.__r_.__value_.__l.__size_;
  }
  if (v23 && v20 >= v23)
  {
    v45 = (char *)p_p + v20;
    int v46 = v22->__r_.__value_.__s.__data_[0];
    v47 = p_p;
    do
    {
      int64_t v48 = v20 - v23;
      if (v48 == -1) {
        break;
      }
      v49 = (char *)memchr(v47, v46, v48 + 1);
      if (!v49) {
        break;
      }
      v50 = v49;
      if (!memcmp(v49, v22, v23))
      {
        if (v50 == v45) {
          unint64_t v80 = -1;
        }
        else {
          unint64_t v80 = v50 - (char *)p_p;
        }
        if (v80 + 1 > 1)
        {
          if (*(char *)(a1 + 23) >= 0) {
            uint64_t v81 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            uint64_t v81 = *(void *)(a1 + 8);
          }
          std::string::size_type v82 = sub_216835C18((uint64_t *)&__p, v80);
          std::string::basic_string(&__str, &__p, v82, v80 + v81 - v82 + 2, (std::allocator<char> *)&v89);
          goto LABEL_48;
        }
        break;
      }
      v47 = (std::string *)(v50 + 1);
      int64_t v20 = v45 - (v50 + 1);
    }
    while (v20 >= v23);
  }
  if (*(char *)(a1 + 23) < 0) {
    sub_216778F24(&__str, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __str = *(std::string *)a1;
  }
LABEL_48:
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v84.__r_.__value_.__r.__words[1] = 0uLL;
  v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84.__r_.__value_.__l.__size_;
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v24 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v24 = v88.__r_.__value_.__l.__size_;
  }
  for (std::string::size_type i = std::string::rfind(&v88, 61, v24); i != -1; std::string::size_type i = std::string::rfind(&v88, 61, v37 + 1))
  {
    std::string::size_type v26 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v27 = &v88;
    }
    else {
      v27 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v26 = v88.__r_.__value_.__l.__size_;
    }
    if (v26 <= i)
    {
LABEL_66:
      std::string::size_type v28 = -1;
    }
    else
    {
      std::string::size_type v28 = i;
      while (1)
      {
        int v29 = v27->__r_.__value_.__s.__data_[v28];
        if (v29 != 61 && v29 != 32) {
          break;
        }
        if (v26 == ++v28) {
          goto LABEL_66;
        }
      }
    }
    if (v26 > i) {
      std::string::size_type v26 = i + 1;
    }
    if (v26)
    {
      unint64_t v30 = v26 - 1;
      do
      {
        int v31 = v27->__r_.__value_.__s.__data_[v30];
        if (v31 != 61 && v31 != 32) {
          break;
        }
        --v30;
      }
      while (v30 != -1);
    }
    else
    {
      unint64_t v30 = -1;
    }
    std::string::size_type v32 = sub_216835C18((uint64_t *)&v88, v30);
    std::string::basic_string(&v91, &v88, v28, v24 - v28, (std::allocator<char> *)&v89);
    std::string::basic_string(&v89, &v88, v32, v30 - v32 + 1, (std::allocator<char> *)&v90);
    v90 = &v89;
    v33 = sub_21677B5F8((uint64_t **)&v84, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (_OWORD **)&v90);
    v34 = (void **)v33 + 7;
    if (*((char *)v33 + 79) < 0) {
      operator delete(*v34);
    }
    *(std::string *)v34 = v91;
    *((unsigned char *)&v91.__r_.__value_.__s + 23) = 0;
    v91.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v89.__r_.__value_.__l.__data_);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
    }
    std::string::size_type v35 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v36 = &v88;
    }
    else {
      v36 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v35 = v88.__r_.__value_.__l.__size_;
    }
    if (v35 <= v32 - 1) {
      uint64_t v37 = v35;
    }
    else {
      uint64_t v37 = v32;
    }
    v38 = (char *)&v36[-1].__r_.__value_.__r.__words[2] + 7;
    while (v37)
    {
      if (!memchr(" =,;", v38[v37--], 4uLL)) {
        goto LABEL_94;
      }
    }
    uint64_t v37 = -1;
LABEL_94:
    std::string::size_type v24 = v37 + 1;
  }
  *(_OWORD *)&v89.__r_.__value_.__r.__words[1] = 0uLL;
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v40 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v40 = __str.__r_.__value_.__l.__size_;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v40 >= 1)
  {
    v42 = (char *)p_str + v40;
    v43 = p_str;
    while (1)
    {
      v44 = memchr(v43, 60, v40);
      if (!v44) {
        goto LABEL_159;
      }
      if (*v44 == 60) {
        break;
      }
      v43 = (std::string *)(v44 + 1);
      int64_t v40 = v42 - (unsigned char *)v43;
      if (v42 - (unsigned char *)v43 < 1) {
        goto LABEL_159;
      }
    }
    if (v44 != v42)
    {
      std::string::size_type v51 = v44 - (unsigned char *)p_str;
      while (v51 != -1)
      {
        std::string::size_type v53 = __str.__r_.__value_.__l.__size_;
        v52 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v54 = &__str;
        }
        else {
          v54 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v55 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v55 = __str.__r_.__value_.__l.__size_;
        }
        if (v55 > v51)
        {
          std::string::size_type v56 = v51;
          while (1)
          {
            int v57 = v54->__r_.__value_.__s.__data_[v56];
            if (v57 != 60 && v57 != 32) {
              break;
            }
            if (v55 == ++v56) {
              goto LABEL_126;
            }
          }
          if (v56 != -1)
          {
            if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (*(unsigned char *)(__str.__r_.__value_.__r.__words[0] + v56) != 60)
              {
LABEL_136:
                if (v53 > v56)
                {
                  v58 = (unsigned __int8 *)v52 + v56;
                  v59 = (unsigned __int8 *)v52 + v53;
LABEL_138:
                  uint64_t v60 = 0;
                  while (*v58 != asc_2174ED611[v60])
                  {
                    if (++v60 == 2)
                    {
                      if (++v58 != v59) {
                        goto LABEL_138;
                      }
                      goto LABEL_147;
                    }
                  }
                  if (v58 != v59)
                  {
                    std::string::size_type v61 = v58 - (unsigned __int8 *)v52;
                    if (v58 - (unsigned __int8 *)v52 != -1)
                    {
                      if (v54->__r_.__value_.__s.__data_[v61] == 44) {
                        std::string::size_type v51 = v61 + 1;
                      }
                      else {
                        std::string::size_type v51 = std::string::find(&__str, 60, v56);
                      }
                      goto LABEL_152;
                    }
                  }
                }
LABEL_147:
                std::string::size_type v62 = std::string::find(&__str, 62, v56);
                if (v62 != -1)
                {
                  std::string::size_type v61 = v62;
                  goto LABEL_151;
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::size_type v51 = -1;
                  std::string::size_type v61 = __str.__r_.__value_.__l.__size_;
                }
                else
                {
                  std::string::size_type v61 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_151:
                  std::string::size_type v51 = -1;
                }
LABEL_152:
                std::string::basic_string(&v91, &__str, v56, v61 - v56, (std::allocator<char> *)&v90);
                std::string::size_type v63 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v63 = v91.__r_.__value_.__l.__size_;
                }
                if (v63)
                {
                  uint64_t v64 = sub_21678C2D8((uint64_t)&v84, (const void **)&v91.__r_.__value_.__l.__data_);
                  if (&v84.__r_.__value_.__r.__words[1] != (std::string::size_type *)v64) {
                    sub_216835CD4((uint64_t **)&v89, (const void **)(v64 + 32), (long long *)(v64 + 32));
                  }
                }
                goto LABEL_127;
              }
            }
            else
            {
              v52 = &__str;
              std::string::size_type v53 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if (__str.__r_.__value_.__s.__data_[v56] != 60) {
                goto LABEL_136;
              }
            }
          }
        }
LABEL_126:
        memset(&v91, 0, sizeof(v91));
        std::string::size_type v51 = -1;
LABEL_127:
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
      }
    }
  }
LABEL_159:
  sub_2167877AC((uint64_t)&v84, (void *)v84.__r_.__value_.__l.__size_);
  v65 = (void *)v89.__r_.__value_.__l.__size_;
  std::string v84 = v89;
  if (v89.__r_.__value_.__r.__words[2])
  {
    *(void *)(v89.__r_.__value_.__l.__size_ + 16) = &v84.__r_.__value_.__l.__size_;
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89.__r_.__value_.__l.__size_;
    *(_OWORD *)&v89.__r_.__value_.__r.__words[1] = 0uLL;
    v65 = 0;
  }
  else
  {
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84.__r_.__value_.__l.__size_;
  }
  sub_2167877AC((uint64_t)&v89, v65);
  memset(&v91, 0, sizeof(v91));
  if (v84.__r_.__value_.__r.__words[2])
  {
    std::string::size_type v66 = v84.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v84.__r_.__value_.__l.__data_ != &v84.__r_.__value_.__r.__words[1])
    {
      do
      {
        std::string::size_type v67 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v67 = v91.__r_.__value_.__l.__size_;
        }
        if (v67) {
          v68 = ", ";
        }
        else {
          v68 = " [with ";
        }
        std::string::append(&v91, v68);
        int v69 = *(char *)(v66 + 55);
        if (v69 >= 0) {
          v70 = (const std::string::value_type *)(v66 + 32);
        }
        else {
          v70 = *(const std::string::value_type **)(v66 + 32);
        }
        if (v69 >= 0) {
          std::string::size_type v71 = *(unsigned __int8 *)(v66 + 55);
        }
        else {
          std::string::size_type v71 = *(void *)(v66 + 40);
        }
        std::string::append(&v91, v70, v71);
        std::string::append(&v91, " = ");
        int v72 = *(char *)(v66 + 79);
        if (v72 >= 0) {
          v73 = (const std::string::value_type *)(v66 + 56);
        }
        else {
          v73 = *(const std::string::value_type **)(v66 + 56);
        }
        if (v72 >= 0) {
          std::string::size_type v74 = *(unsigned __int8 *)(v66 + 79);
        }
        else {
          std::string::size_type v74 = *(void *)(v66 + 64);
        }
        std::string::append(&v91, v73, v74);
        v75 = *(std::string **)(v66 + 8);
        if (v75)
        {
          do
          {
            v76 = v75;
            v75 = (std::string *)v75->__r_.__value_.__r.__words[0];
          }
          while (v75);
        }
        else
        {
          do
          {
            v76 = *(std::string **)(v66 + 16);
            BOOL v14 = v76->__r_.__value_.__r.__words[0] == v66;
            std::string::size_type v66 = (std::string::size_type)v76;
          }
          while (!v14);
        }
        std::string::size_type v66 = (std::string::size_type)v76;
      }
      while (v76 != (std::string *)&v84.__r_.__value_.__r.__words[1]);
    }
    std::string::append(&v91, "]");
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v77 = &__str;
  }
  else {
    v77 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v78 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v78 = __str.__r_.__value_.__l.__size_;
  }
  v79 = std::string::insert(&v91, 0, (const std::string::value_type *)v77, v78);
  *a3 = *v79;
  v79->__r_.__value_.__l.__size_ = 0;
  v79->__r_.__value_.__r.__words[2] = 0;
  v79->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  sub_2167877AC((uint64_t)&v84, (void *)v84.__r_.__value_.__l.__size_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_216835B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (*(char *)(v39 - 89) < 0) {
    operator delete(*(void **)(v39 - 112));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_21682E578((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_216835C18(uint64_t *a1, unint64_t a2)
{
  int v2 = *((char *)a1 + 23);
  BOOL v3 = v2 < 0;
  off_t v4 = (uint64_t *)*a1;
  if (v2 >= 0) {
    off_t v4 = a1;
  }
  unint64_t v5 = *((unsigned __int8 *)a1 + 23);
  if (v3) {
    unint64_t v5 = a1[1];
  }
  if (v5 > a2) {
    uint64_t v6 = a2 + 1;
  }
  else {
    uint64_t v6 = v5;
  }
  uint64_t v7 = (uint64_t)v4 - 1;
  do
  {
    if (!v6) {
      goto LABEL_30;
    }
    int v8 = *(unsigned __int8 *)(v7 + v6--);
  }
  while (v8 != 62 && v8 != 32);
LABEL_28:
  if (v6 != -1 && *((unsigned char *)v4 + v6) != 32)
  {
    uint64_t v9 = v6 - 1;
    int v10 = 1;
    do
    {
      unint64_t v11 = v9;
      if (!v9) {
        break;
      }
      int v12 = *((unsigned __int8 *)v4 + v9);
      int v13 = v12 == 60 ? -1 : 0;
      if (v12 == 62) {
        int v13 = 1;
      }
      uint64_t v9 = v11 - 1;
      v10 += v13;
    }
    while (v10);
    if (v5 > v11) {
      uint64_t v6 = v11 + 1;
    }
    else {
      uint64_t v6 = v5;
    }
    while (v6)
    {
      int v14 = *(unsigned __int8 *)(v7 + v6--);
      if (v14 == 62 || v14 == 32) {
        goto LABEL_28;
      }
    }
LABEL_30:
    uint64_t v6 = -1;
  }
  return v6 + 1;
}

uint64_t *sub_216835CD4(uint64_t **a1, const void **a2, long long *a3)
{
  unint64_t v5 = (uint64_t **)sub_21677B220((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    sub_216789BF8((uint64_t)a1, a3, (uint64_t)v9);
    sub_21677B358(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    sub_21677B548((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchHash(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  unint64_t v3 = 0;
  unint64_t v4 = 0;
  sub_216835E2C((unint64_t)this, (size_t)a2, &v4, &v3);
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchHash(pxrInternal__aapl__pxrReserved__ *this, const char *a2, unsigned int a3)
{
  unint64_t v4 = a3;
  unint64_t v5 = a3;
  sub_216835E2C((unint64_t)this, (size_t)a2, &v5, &v4);
  return v5;
}

unint64_t pxrInternal__aapl__pxrReserved__::ArchHash64(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  unint64_t v3 = 0;
  unint64_t v4 = 0;
  sub_216835E2C((unint64_t)this, (size_t)a2, &v3, &v4);
  return v3;
}

unint64_t pxrInternal__aapl__pxrReserved__::ArchHash64(pxrInternal__aapl__pxrReserved__ *this, const char *a2, unint64_t a3)
{
  unint64_t v4 = a3;
  unint64_t v5 = a3;
  sub_216835E2C((unint64_t)this, (size_t)a2, &v4, &v5);
  return v4;
}

unint64_t sub_216835E2C(unint64_t __src, size_t __n, unint64_t *a3, unint64_t *a4)
{
  size_t v6 = __n;
  unint64_t p_dst = __src;
  uint64_t v185 = *MEMORY[0x263EF8340];
  unint64_t v8 = 0xDEADBEEFDEADBEEFLL;
  if (__n > 0xBF)
  {
    unint64_t v39 = *a3;
    unint64_t v40 = *a4;
    v41 = (const void *)(p_dst + 96 * (__n / 0x60));
    int64_t v42 = 96 * (v6 / 0x60);
    v176 = a3;
    if ((p_dst & 7) != 0)
    {
      if (v42 >= 1)
      {
        unint64_t v43 = 0xDEADBEEFDEADBEEFLL;
        unint64_t v44 = *a4;
        unint64_t v45 = *a3;
        unint64_t v46 = 0xDEADBEEFDEADBEEFLL;
        unint64_t v47 = *a4;
        unint64_t v48 = *a3;
        unint64_t v49 = 0xDEADBEEFDEADBEEFLL;
        unint64_t v50 = *a4;
        unint64_t v51 = *a3;
        do
        {
          long long v52 = *(_OWORD *)(p_dst + 16);
          long long __dst = *(_OWORD *)p_dst;
          long long v180 = v52;
          long long v53 = *(_OWORD *)(p_dst + 48);
          long long v181 = *(_OWORD *)(p_dst + 32);
          long long v182 = v53;
          long long v54 = *(_OWORD *)(p_dst + 80);
          long long v183 = *(_OWORD *)(p_dst + 64);
          long long v184 = v54;
          uint64_t v55 = ((__dst + v51) ^ v8) + v50;
          unint64_t v56 = ((*((void *)&__dst + 1) + v50) ^ __ROR8__(__dst + v51, 53)) + (v40 ^ v49);
          uint64_t v57 = v180 + (v40 ^ v49);
          unint64_t v58 = (v57 ^ __ROR8__(*((void *)&__dst + 1) + v50, 32)) + (v55 ^ v48);
          unint64_t v59 = (v55 ^ v48) + *((void *)&v180 + 1);
          unint64_t v49 = (v59 ^ __ROR8__(v57, 21)) + (v56 ^ v47);
          uint64_t v60 = (v56 ^ v47) + v181;
          unint64_t v48 = (v60 ^ __ROR8__(v59, 33)) + (v58 ^ v46);
          unint64_t v61 = (v58 ^ v46) + *((void *)&v181 + 1);
          unint64_t v47 = (v61 ^ __ROR8__(v60, 47)) + (v49 ^ v45);
          uint64_t v62 = (v49 ^ v45) + v182;
          unint64_t v46 = (v62 ^ __ROR8__(v61, 36)) + (v48 ^ v44);
          unint64_t v63 = (v48 ^ v44) + *((void *)&v182 + 1);
          unint64_t v45 = (v63 ^ __ROR8__(v62, 25)) + (v47 ^ v43);
          uint64_t v64 = (v47 ^ v43) + v183;
          unint64_t v44 = (v64 ^ __ROR8__(v63, 7)) + (v46 ^ v39);
          unint64_t v65 = (v46 ^ v39) + *((void *)&v183 + 1);
          unint64_t v43 = (v65 ^ __ROR8__(v64, 9)) + (v45 ^ v40);
          uint64_t v66 = (v45 ^ v40) + v54;
          unint64_t v67 = v44 ^ v55;
          unint64_t v51 = v43 ^ v56;
          unint64_t v39 = (v66 ^ __ROR8__(v65, 10)) + v67;
          unint64_t v50 = v39 ^ v58;
          unint64_t v68 = (v67 + *((void *)&v54 + 1)) ^ __ROR8__(v66, 42);
          unint64_t v8 = __ROR8__(v67 + *((void *)&v54 + 1), 18);
          unint64_t v40 = v68 + (v43 ^ v56);
          p_dst += 96;
        }
        while (p_dst < (unint64_t)v41);
        goto LABEL_20;
      }
    }
    else if (v42 >= 1)
    {
      unint64_t v43 = 0xDEADBEEFDEADBEEFLL;
      unint64_t v44 = *a4;
      unint64_t v45 = *a3;
      unint64_t v46 = 0xDEADBEEFDEADBEEFLL;
      unint64_t v47 = *a4;
      unint64_t v48 = *a3;
      unint64_t v49 = 0xDEADBEEFDEADBEEFLL;
      unint64_t v50 = *a4;
      unint64_t v51 = *a3;
      do
      {
        unint64_t v69 = *(void *)p_dst + v51;
        unint64_t v70 = (v69 ^ v8) + v50;
        unint64_t v71 = *(void *)(p_dst + 8) + v50;
        unint64_t v72 = (v71 ^ __ROR8__(v69, 53)) + (v40 ^ v49);
        unint64_t v73 = *(void *)(p_dst + 16) + (v40 ^ v49);
        unint64_t v74 = (v73 ^ __ROR8__(v71, 32)) + (v70 ^ v48);
        unint64_t v75 = (v70 ^ v48) + *(void *)(p_dst + 24);
        unint64_t v49 = (v75 ^ __ROR8__(v73, 21)) + (v72 ^ v47);
        unint64_t v76 = (v72 ^ v47) + *(void *)(p_dst + 32);
        unint64_t v48 = (v76 ^ __ROR8__(v75, 33)) + (v74 ^ v46);
        unint64_t v77 = (v74 ^ v46) + *(void *)(p_dst + 40);
        unint64_t v47 = (v77 ^ __ROR8__(v76, 47)) + (v49 ^ v45);
        unint64_t v78 = (v49 ^ v45) + *(void *)(p_dst + 48);
        unint64_t v46 = (v78 ^ __ROR8__(v77, 36)) + (v48 ^ v44);
        unint64_t v79 = (v48 ^ v44) + *(void *)(p_dst + 56);
        unint64_t v45 = (v79 ^ __ROR8__(v78, 25)) + (v47 ^ v43);
        unint64_t v80 = (v47 ^ v43) + *(void *)(p_dst + 64);
        unint64_t v44 = (v80 ^ __ROR8__(v79, 7)) + (v46 ^ v39);
        unint64_t v81 = (v46 ^ v39) + *(void *)(p_dst + 72);
        unint64_t v43 = (v81 ^ __ROR8__(v80, 9)) + (v45 ^ v40);
        unint64_t v82 = (v45 ^ v40) + *(void *)(p_dst + 80);
        unint64_t v83 = v44 ^ v70;
        unint64_t v51 = v43 ^ v72;
        unint64_t v39 = (v82 ^ __ROR8__(v81, 10)) + v83;
        unint64_t v84 = v83 + *(void *)(p_dst + 88);
        unint64_t v50 = v39 ^ v74;
        unint64_t v8 = __ROR8__(v84, 18);
        unint64_t v40 = (v84 ^ __ROR8__(v82, 42)) + v51;
        p_dst += 96;
      }
      while (p_dst < (unint64_t)v41);
      goto LABEL_20;
    }
    unint64_t v51 = *a3;
    unint64_t v50 = *a4;
    unint64_t v49 = 0xDEADBEEFDEADBEEFLL;
    unint64_t v48 = v39;
    unint64_t v47 = *a4;
    unint64_t v46 = 0xDEADBEEFDEADBEEFLL;
    unint64_t v45 = v39;
    unint64_t v44 = *a4;
    unint64_t v43 = 0xDEADBEEFDEADBEEFLL;
LABEL_20:
    unint64_t v174 = v8;
    unint64_t v175 = v40;
    unint64_t v178 = v6 % 0x60;
    memcpy(&__dst, v41, v6 % 0x60);
    bzero((char *)&__dst + v178, 96 - v178);
    HIBYTE(v184) = v178;
    unint64_t v85 = *((void *)&__dst + 1) + v50 + v174 + *((void *)&v184 + 1);
    unint64_t v86 = __dst + v51 + (v85 ^ (v180 + v49));
    unint64_t v87 = (v86 ^ (*((void *)&v180 + 1) + v48)) + __ROR8__(*((void *)&__dst + 1) + v50, 20);
    unint64_t v88 = (v87 ^ (v181 + v47)) + __ROR8__(v85 ^ (v180 + v49), 49);
    unint64_t v89 = (v88 ^ (*((void *)&v181 + 1) + v46)) + __ROR8__(v86 ^ (*((void *)&v180 + 1) + v48), 30);
    unint64_t v90 = (v89 ^ (v182 + v45)) + __ROR8__(v87 ^ (v181 + v47), 43);
    unint64_t v91 = (v90 ^ (*((void *)&v182 + 1) + v44)) + __ROR8__(v88 ^ (*((void *)&v181 + 1) + v46), 26);
    unint64_t v92 = (v91 ^ (v183 + v43)) + __ROR8__(v89 ^ (v182 + v45), 31);
    unint64_t v93 = (v92 ^ (*((void *)&v183 + 1) + v39)) + __ROR8__(v90 ^ (*((void *)&v182 + 1) + v44), 54);
    uint64_t v94 = (v93 ^ (v184 + v175)) + __ROR8__(v91 ^ (v183 + v43), 51);
    unint64_t v95 = v94 ^ v85;
    unint64_t v96 = v95 + __ROR8__(v92 ^ (*((void *)&v183 + 1) + v39), 26);
    unint64_t v97 = v96 ^ v86;
    unint64_t v98 = v97 + __ROR8__(v93 ^ (v184 + v175), 11);
    unint64_t v99 = v98 ^ v87;
    unint64_t v100 = v99 + __ROR8__(v95, 22);
    unint64_t v101 = v100 ^ v88;
    unint64_t v102 = v101 + __ROR8__(v97, 10);
    unint64_t v103 = v102 ^ v89;
    unint64_t v104 = v103 + __ROR8__(v99, 20);
    unint64_t v105 = v104 ^ v90;
    unint64_t v106 = v105 + __ROR8__(v101, 49);
    unint64_t v107 = v106 ^ v91;
    unint64_t v108 = v107 + __ROR8__(v103, 30);
    unint64_t v109 = v108 ^ v92;
    unint64_t v110 = v109 + __ROR8__(v105, 43);
    unint64_t v111 = v110 ^ v93;
    unint64_t v112 = v111 + __ROR8__(v107, 26);
    uint64_t v113 = v112 ^ v94;
    uint64_t v114 = v113 + __ROR8__(v109, 31);
    uint64_t v115 = v114 ^ v96;
    uint64_t v116 = v115 + __ROR8__(v111, 54);
    uint64_t v117 = v116 ^ v98;
    uint64_t v118 = v117 + __ROR8__(v113, 51);
    uint64_t v119 = v118 ^ v100;
    uint64_t v120 = v119 + __ROR8__(v115, 26);
    uint64_t v121 = v120 ^ v102;
    __src = v121 + __ROR8__(v117, 11);
    uint64_t v122 = __src ^ v104;
    uint64_t v123 = v122 + __ROR8__(v119, 22);
    uint64_t v124 = v123 ^ v106;
    uint64_t v125 = v124 + __ROR8__(v121, 10);
    uint64_t v126 = v125 ^ v108;
    uint64_t v127 = v126 + __ROR8__(v122, 20);
    uint64_t v128 = v127 ^ v110;
    uint64_t v129 = (v128 + __ROR8__(v124, 49)) ^ v112;
    uint64_t v130 = (v129 + __ROR8__(v126, 30)) ^ v114;
    uint64_t v131 = (v130 + __ROR8__(v128, 43)) ^ v116;
    uint64_t v132 = (v131 + __ROR8__(v129, 26)) ^ v118;
    uint64_t v133 = (v132 + __ROR8__(v130, 31)) ^ v120;
    uint64_t v134 = (v133 + __ROR8__(v131, 54)) ^ __src;
    uint64_t v135 = (((v134 + __ROR8__(v132, 51)) ^ v123) + __ROR8__(v133, 26)) ^ v125;
    unint64_t *v176 = __ROR8__(v135, 10);
    *a4 = (v135 + __ROR8__(v134, 11)) ^ v127;
    return __src;
  }
  if ((__src & 7) != 0)
  {
    __src = (unint64_t)memcpy(&__dst, (const void *)__src, __n);
    size_t v6 = __n;
    unint64_t p_dst = (unint64_t)&__dst;
  }
  unint64_t v10 = v6 & 0x1F;
  unint64_t v11 = *a3;
  unint64_t v12 = *a4;
  if (v6 < 0x10)
  {
    unint64_t v15 = 0xDEADBEEFDEADBEEFLL;
    unint64_t v14 = 0xDEADBEEFDEADBEEFLL;
  }
  else
  {
    if (((v6 >> 3) & 0x1FFFFFFFFFFFFFFCLL) != 0)
    {
      unint64_t v13 = p_dst + 8 * ((v6 >> 3) & 0x1FFFFFFFFFFFFFFCLL);
      unint64_t v14 = 0xDEADBEEFDEADBEEFLL;
      unint64_t v15 = 0xDEADBEEFDEADBEEFLL;
      do
      {
        unint64_t v16 = *(void *)(p_dst + 8) + v14;
        unint64_t v17 = v16 + __ROR8__(*(void *)p_dst + v15, 14);
        unint64_t v18 = v17 ^ v11;
        unint64_t v19 = v18 + __ROR8__(v16, 12);
        unint64_t v20 = v19 ^ v12;
        unint64_t v21 = v20 + __ROR8__(v18, 34);
        unint64_t v22 = v21 ^ v17;
        unint64_t v23 = v22 + __ROR8__(v20, 23);
        uint64_t v24 = v23 ^ v19;
        uint64_t v25 = v24 + __ROR8__(v22, 10);
        uint64_t v26 = v25 ^ v21;
        uint64_t v27 = v26 + __ROR8__(v24, 16);
        uint64_t v28 = v27 ^ v23;
        uint64_t v29 = v28 + __ROR8__(v26, 26);
        uint64_t v30 = v29 ^ v25;
        uint64_t v31 = v30 + __ROR8__(v28, 27);
        uint64_t v32 = v31 ^ v27;
        uint64_t v33 = v32 + __ROR8__(v30, 2);
        uint64_t v34 = v33 ^ v29;
        uint64_t v35 = v34 + __ROR8__(v32, 30);
        uint64_t v36 = v35 ^ v31;
        uint64_t v37 = v36 + __ROR8__(v34, 59);
        unint64_t v15 = v37 ^ v33;
        uint64_t v38 = __ROR8__(v36, 28);
        unint64_t v11 = v37 + *(void *)(p_dst + 16);
        unint64_t v14 = (v15 + v38) ^ v35;
        unint64_t v12 = v15 + v38 + *(void *)(p_dst + 24);
        p_dst += 32;
      }
      while (p_dst < v13);
    }
    else
    {
      unint64_t v15 = 0xDEADBEEFDEADBEEFLL;
      unint64_t v14 = 0xDEADBEEFDEADBEEFLL;
    }
    if (v10 >= 0x10)
    {
      uint64_t v136 = *(void *)p_dst;
      uint64_t v137 = *(void *)(p_dst + 8);
      p_dst += 16;
      uint64_t v138 = v137 + v14;
      uint64_t v139 = v138 + __ROR8__(v136 + v15, 14);
      uint64_t v140 = v139 ^ v11;
      uint64_t v141 = v140 + __ROR8__(v138, 12);
      unint64_t v142 = v141 ^ v12;
      unint64_t v143 = v142 + __ROR8__(v140, 34);
      uint64_t v144 = v143 ^ v139;
      uint64_t v145 = v144 + __ROR8__(v142, 23);
      uint64_t v146 = v145 ^ v141;
      uint64_t v147 = v146 + __ROR8__(v144, 10);
      uint64_t v148 = v147 ^ v143;
      uint64_t v149 = v148 + __ROR8__(v146, 16);
      uint64_t v150 = v149 ^ v145;
      uint64_t v151 = v150 + __ROR8__(v148, 26);
      uint64_t v152 = v151 ^ v147;
      uint64_t v153 = v152 + __ROR8__(v150, 27);
      uint64_t v154 = v153 ^ v149;
      uint64_t v155 = v154 + __ROR8__(v152, 2);
      uint64_t v156 = v155 ^ v151;
      uint64_t v157 = v156 + __ROR8__(v154, 30);
      uint64_t v158 = v157 ^ v153;
      unint64_t v11 = v158 + __ROR8__(v156, 59);
      unint64_t v15 = v11 ^ v155;
      unint64_t v12 = v15 + __ROR8__(v158, 28);
      unint64_t v14 = v12 ^ v157;
      v10 -= 16;
    }
  }
  unint64_t v159 = v14 + (v6 << 56);
  switch(v10)
  {
    case 0uLL:
      v15 -= 0x2152411021524111;
      v159 -= 0x2152411021524111;
      break;
    case 1uLL:
      goto LABEL_28;
    case 2uLL:
      goto LABEL_27;
    case 3uLL:
      v15 += (unint64_t)*(unsigned __int8 *)(p_dst + 2) << 16;
LABEL_27:
      v15 += (unint64_t)*(unsigned __int8 *)(p_dst + 1) << 8;
LABEL_28:
      uint64_t v160 = *(unsigned __int8 *)p_dst;
      goto LABEL_33;
    case 4uLL:
      goto LABEL_32;
    case 5uLL:
      goto LABEL_31;
    case 6uLL:
      goto LABEL_30;
    case 7uLL:
      v15 += (unint64_t)*(unsigned __int8 *)(p_dst + 6) << 48;
LABEL_30:
      v15 += (unint64_t)*(unsigned __int8 *)(p_dst + 5) << 40;
LABEL_31:
      v15 += (unint64_t)*(unsigned __int8 *)(p_dst + 4) << 32;
LABEL_32:
      uint64_t v160 = *(unsigned int *)p_dst;
LABEL_33:
      v15 += v160;
      break;
    case 8uLL:
      goto LABEL_42;
    case 9uLL:
      goto LABEL_36;
    case 0xAuLL:
      goto LABEL_35;
    case 0xBuLL:
      v159 += (unint64_t)*(unsigned __int8 *)(p_dst + 10) << 16;
LABEL_35:
      v159 += (unint64_t)*(unsigned __int8 *)(p_dst + 9) << 8;
LABEL_36:
      uint64_t v161 = *(unsigned __int8 *)(p_dst + 8);
      goto LABEL_41;
    case 0xCuLL:
      goto LABEL_40;
    case 0xDuLL:
      goto LABEL_39;
    case 0xEuLL:
      goto LABEL_38;
    case 0xFuLL:
      v159 += (unint64_t)*(unsigned __int8 *)(p_dst + 14) << 48;
LABEL_38:
      v159 += (unint64_t)*(unsigned __int8 *)(p_dst + 13) << 40;
LABEL_39:
      v159 += (unint64_t)*(unsigned __int8 *)(p_dst + 12) << 32;
LABEL_40:
      uint64_t v161 = *(unsigned int *)(p_dst + 8);
LABEL_41:
      v159 += v161;
LABEL_42:
      v15 += *(void *)p_dst;
      break;
    default:
      break;
  }
  unint64_t v162 = (v159 ^ v15) + __ROR8__(v15, 49);
  unint64_t v163 = (v162 ^ v11) + __ROR8__(v162, 12);
  unint64_t v164 = (v163 ^ v12) + __ROR8__(v163, 38);
  unint64_t v165 = (v164 ^ __ROR8__(v15, 49)) + __ROR8__(v164, 13);
  uint64_t v166 = (v165 ^ __ROR8__(v162, 12)) + __ROR8__(v165, 36);
  uint64_t v167 = (v166 ^ __ROR8__(v163, 38)) + __ROR8__(v166, 55);
  uint64_t v168 = (v167 ^ __ROR8__(v164, 13)) + __ROR8__(v167, 17);
  uint64_t v169 = (v168 ^ __ROR8__(v165, 36)) + __ROR8__(v168, 10);
  uint64_t v170 = (v169 ^ __ROR8__(v166, 55)) + __ROR8__(v169, 32);
  uint64_t v171 = (v170 ^ __ROR8__(v167, 17)) + __ROR8__(v170, 39);
  uint64_t v172 = v171 ^ __ROR8__(v168, 10);
  unint64_t v173 = __ROR8__(v171, 1);
  *a3 = v173;
  *a4 = v172 + v173;
  return __src;
}

void *pxrInternal__aapl__pxrReserved__::ArchLibraryOpen(uint64_t a1, int a2)
{
  dlerror();
  if (*(char *)(a1 + 23) >= 0) {
    unint64_t v4 = (const char *)a1;
  }
  else {
    unint64_t v4 = *(const char **)a1;
  }

  return dlopen(v4, a2);
}

char *pxrInternal__aapl__pxrReserved__::ArchLibraryError@<X0>(void *a1@<X8>)
{
  ssize_t result = dlerror();
  if (result)
  {
    return (char *)sub_216779094(a1, result);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchIsPtmallocActive(pxrInternal__aapl__pxrReserved__ *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchIsStlAllocatorOff(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E228, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E228))
  {
    sub_216779094(__p, "GLIBCXX_FORCE_NEW");
    BOOL HasEnv = pxrInternal__aapl__pxrReserved__::ArchHasEnv((const char *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    byte_26798E220 = HasEnv;
    __cxa_guard_release(&qword_26798E228);
  }
  return byte_26798E220;
}

void sub_2168368F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26798E228);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::ArchMallocHook::IsInitialized(pxrInternal__aapl__pxrReserved__::ArchMallocHook *this)
{
  return *(void *)this || *((void *)this + 1) || *((void *)this + 2) || *((void *)this + 3) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchMallocHook::Initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return 0;
}

regex_t *pxrInternal__aapl__pxrReserved__::ArchRegex::_Impl::_Impl(regex_t *a1, const char *a2, char a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  int v6 = regcomp(a1, a2, (2 * (a3 & 1)) | 9);
  if (v6) {
    sub_217323E30(v8, v6, a1, a4);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::ArchRegex::_Impl::~_Impl(pxrInternal__aapl__pxrReserved__::ArchRegex::_Impl *this)
{
}

{
  MEMORY[0x21D448A80]();
}

BOOL pxrInternal__aapl__pxrReserved__::ArchRegex::_Impl::Match(const regex_t *this, const char *a2)
{
  return regexec(this, a2, 0, 0, 0) != 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchRegex::ArchRegex(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = a3;
  *(_DWORD *)a1 = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  std::string::size_type v5 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  int v7 = (char)v6;
  unint64_t v8 = *(void *)(a2 + 8);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    if ((v3 & 2) != 0)
    {
      if (v7 < 0) {
        sub_216778F24(&v12, *(void **)a2, v8);
      }
      else {
        std::string v12 = *(std::string *)a2;
      }
      sub_216779094(v26, ".");
      sub_216779094(v24, "\\.");
      sub_216836F64(&v12, (char *)v26, (uint64_t)v24, (uint64_t)&v28);
      sub_216779094(v22, "*");
      sub_216779094(v20, ".*");
      sub_216836F64(&v28, (char *)v22, (uint64_t)v20, (uint64_t)&v29);
      sub_216779094(v18, "?");
      sub_216779094(__p, ".");
      sub_216836F64(&v29, (char *)v18, (uint64_t)__p, (uint64_t)__dst);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    else if (v7 < 0)
    {
      sub_216778F24(__dst, *(void **)a2, v8);
    }
    else
    {
      *(_OWORD *)long long __dst = *(_OWORD *)a2;
      uint64_t v14 = *(void *)(a2 + 16);
    }
    v29.__r_.__value_.__r.__words[0] = v5;
    sub_216837108((const char *)__dst, (_DWORD *)a1, (uint64_t *)&v29, &v15);
    long long v9 = v15;
    long long v15 = 0uLL;
    unint64_t v10 = *(std::__shared_weak_count **)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v9;
    if (v10)
    {
      sub_216784EC4(v10);
      if (*((void *)&v15 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(__dst[0]);
    }
    if ((v3 & 2) != 0 && SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    MEMORY[0x21D4477E0](a1 + 8, "empty pattern");
  }
  return a1;
}

void sub_216836CF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v48 + 31) < 0) {
    uint64_t v50 = *(void *)(v48 + 16);
  }
  else {
    uint64_t v50 = *(unsigned __int8 *)(v48 + 31);
  }
  if (!v50) {
    MEMORY[0x21D4477E0](v49, "unknown reason");
  }
  __cxa_end_catch();
  JUMPOUT(0x216836CDCLL);
}

void sub_216836E2C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  char v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (v4) {
    sub_216784EC4(v4);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex(pxrInternal__aapl__pxrReserved__::ArchRegex *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    sub_216784EC4(v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

BOOL pxrInternal__aapl__pxrReserved__::ArchRegex::operator BOOL(uint64_t a1)
{
  return *(void *)(a1 + 32) != 0;
}

void *pxrInternal__aapl__pxrReserved__::ArchRegex::GetError@<X0>(void *this@<X0>, void *a2@<X8>)
{
  if (this[4])
  {
    int v2 = "";
    return sub_216779094(a2, v2);
  }
  char v3 = (void **)(this + 1);
  if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 31))
    {
      *(_OWORD *)a2 = *(_OWORD *)v3;
      a2[2] = this[3];
      return this;
    }
LABEL_9:
    int v2 = "uncompiled pattern";
    return sub_216779094(a2, v2);
  }
  unint64_t v4 = this[2];
  if (!v4) {
    goto LABEL_9;
  }
  return sub_216778F24(a2, *v3, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchRegex::GetFlags(pxrInternal__aapl__pxrReserved__::ArchRegex *this)
{
  return *(unsigned int *)this;
}

const regex_t *pxrInternal__aapl__pxrReserved__::ArchRegex::Match(uint64_t a1, const char *a2)
{
  ssize_t result = *(const regex_t **)(a1 + 32);
  if (result)
  {
    if (a2[23] < 0) {
      a2 = *(const char **)a2;
    }
    return (const regex_t *)(regexec(result, a2, 0, 0, 0) != 1);
  }
  return result;
}

__n128 sub_216836F64@<Q0>(std::string *this@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type v6 = 0;
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    unint64_t v8 = this;
  }
  else {
    unint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  int v9 = a2[23];
  BOOL v30 = v9 < 0;
  std::string::size_type v10 = *((void *)a2 + 1);
  std::string::size_type v11 = a2[23];
  if (v9 >= 0) {
    std::string v12 = a2;
  }
  else {
    std::string v12 = *(char **)a2;
  }
  if (v9 >= 0) {
    int64_t v13 = a2[23];
  }
  else {
    int64_t v13 = *((void *)a2 + 1);
  }
  while (!v13)
  {
LABEL_22:
    if (v6 != -1)
    {
      if (v30) {
        std::string::size_type v21 = v10;
      }
      else {
        std::string::size_type v21 = v11;
      }
      int v22 = *(char *)(a3 + 23);
      if (v22 >= 0) {
        char v23 = (const std::string::value_type *)a3;
      }
      else {
        char v23 = *(const std::string::value_type **)a3;
      }
      if (v22 >= 0) {
        std::string::size_type v24 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v24 = *(void *)(a3 + 8);
      }
      std::string::replace(this, v6, v21, v23, v24);
      uint64_t v25 = *(unsigned __int8 *)(a3 + 23);
      if ((v25 & 0x80u) != 0) {
        uint64_t v25 = *(void *)(a3 + 8);
      }
      v6 += v25;
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) == 0) {
        unint64_t v8 = this;
      }
      else {
        unint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      if ((size & 0x80u) != 0) {
        std::string::size_type size = this->__r_.__value_.__l.__size_;
      }
      int v26 = a2[23];
      BOOL v30 = v26 < 0;
      std::string::size_type v10 = *((void *)a2 + 1);
      std::string::size_type v11 = a2[23];
      std::string v12 = v26 >= 0 ? a2 : *(char **)a2;
      int64_t v13 = v26 >= 0 ? a2[23] : *((void *)a2 + 1);
      if (size >= v6) {
        continue;
      }
    }
    goto LABEL_46;
  }
  uint64_t v14 = (char *)v8 + v6;
  long long v15 = (char *)v8 + size;
  int64_t v16 = size - v6;
  if (v16 >= v13)
  {
    int v17 = *v12;
    do
    {
      int64_t v18 = v16 - v13;
      if (v18 == -1) {
        break;
      }
      char v19 = (char *)memchr(v14, v17, v18 + 1);
      if (!v19) {
        break;
      }
      unint64_t v20 = v19;
      if (!memcmp(v19, v12, v13))
      {
        if (v20 == v15) {
          break;
        }
        std::string::size_type v6 = v20 - (char *)v8;
        goto LABEL_22;
      }
      uint64_t v14 = v20 + 1;
      int64_t v16 = v15 - (v20 + 1);
    }
    while (v16 >= v13);
  }
LABEL_46:
  __n128 result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_OWORD *)a4 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(void *)(a4 + 16) = *((void *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  return result;
}

uint64_t sub_216837108@<X0>(const char *a1@<X1>, _DWORD *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  unint64_t v8 = (char *)operator new(0x38uLL);
  uint64_t result = sub_21683717C((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_216837168(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21683717C(uint64_t a1, const char *a2, _DWORD *a3, uint64_t *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C74B2B0;
  pxrInternal__aapl__pxrReserved__::ArchRegex::_Impl::_Impl((regex_t *)(a1 + 24), a2, *a3, *a4);
  return a1;
}

void sub_2168371CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2168371E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C74B2B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216837200(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C74B2B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216837244(uint64_t a1)
{
  return MEMORY[0x21D448A80](a1 + 24);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchEnableSessionLogging(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E238))
  {
    qword_26798E230 = (uint64_t)operator new(4uLL);
    __cxa_guard_release(&qword_26798E238);
  }
  uint64_t result = atexit(sub_2168372F8);
  *(_DWORD *)qword_26798E230 = result;
  return result;
}

void sub_2168372E0(_Unwind_Exception *a1)
{
}

void sub_2168372F8()
{
  if (byte_26798E260)
  {
    if (qword_26798E268) {
      v0 = (const char *)qword_26798E268;
    }
    else {
      v0 = "libArch";
    }
    sub_2168379D0((uint64_t)v0, 0);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchSetProcessStateLogCommand(uint64_t this, const char *a2, const char *const *a3, const char *const *a4)
{
  qword_26798E240 = this;
  qword_26798E248 = (uint64_t)a2;
  qword_26798E250 = (uint64_t)a3;
  return this;
}

time_t sub_216837344()
{
  time_t result = time(0);
  qword_26798E258 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetAppLaunchTime(pxrInternal__aapl__pxrReserved__ *this)
{
  return qword_26798E258;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchSetFatalStackLogging(uint64_t this)
{
  byte_26798E260 = this;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetFatalStackLogging(pxrInternal__aapl__pxrReserved__ *this)
{
  return byte_26798E260;
}

void pxrInternal__aapl__pxrReserved__::ArchSetProgramInfoForErrors(long long *a1, uint64_t a2)
{
  uint64_t v4 = sub_216837658();
  std::mutex::lock((std::mutex *)(v4 + 24));
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    v24[0] = a1;
    std::string::size_type v6 = sub_21677B174((uint64_t **)v4, (const void **)a1, (uint64_t)&unk_2174BFD90, v24);
    std::string::operator=((std::string *)(v6 + 7), (const std::string *)a2);
  }
  else
  {
    sub_216839AC4((uint64_t **)v4, (const void **)a1);
  }
  sub_21677B834((uint64_t)v24);
  int v7 = *(uint64_t **)v4;
  if (*(void *)v4 != v4 + 8)
  {
    do
    {
      int v8 = *((char *)v7 + 55);
      if (v8 >= 0) {
        uint64_t v9 = (uint64_t)(v7 + 4);
      }
      else {
        uint64_t v9 = v7[4];
      }
      if (v8 >= 0) {
        uint64_t v10 = *((unsigned __int8 *)v7 + 55);
      }
      else {
        uint64_t v10 = v7[5];
      }
      std::string::size_type v11 = sub_216779180(v24, v9, v10);
      std::string v12 = sub_216779180(v11, (uint64_t)": ", 2);
      int v13 = *((char *)v7 + 79);
      if (v13 >= 0) {
        uint64_t v14 = (uint64_t)(v7 + 7);
      }
      else {
        uint64_t v14 = v7[7];
      }
      if (v13 >= 0) {
        uint64_t v15 = *((unsigned __int8 *)v7 + 79);
      }
      else {
        uint64_t v15 = v7[8];
      }
      int64_t v16 = sub_216779180(v12, v14, v15);
      LOBYTE(__s1[0]) = 10;
      sub_216779180(v16, (uint64_t)__s1, 1);
      int v17 = (uint64_t *)v7[1];
      if (v17)
      {
        do
        {
          int64_t v18 = v17;
          int v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          int64_t v18 = (uint64_t *)v7[2];
          BOOL v19 = *v18 == (void)v7;
          int v7 = v18;
        }
        while (!v19);
      }
      int v7 = v18;
    }
    while (v18 != (uint64_t *)(v4 + 8));
  }
  unint64_t v20 = *(void **)(v4 + 88);
  if (v20) {
    free(v20);
  }
  std::stringbuf::str();
  if (v23 < 0)
  {
    std::string::size_type v21 = __s1[0];
    *(void *)(v4 + 88) = strdup(__s1[0]);
    operator delete(v21);
  }
  else
  {
    *(void *)(v4 + 88) = strdup((const char *)__s1);
  }
  v24[0] = *(long long **)MEMORY[0x263F8C2C8];
  *(long long **)((char *)v24 + *((void *)v24[0] - 3)) = *(long long **)(MEMORY[0x263F8C2C8] + 24);
  v24[1] = (long long *)(MEMORY[0x263F8C318] + 16);
  if (v25 < 0) {
    operator delete(v24[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21D447E60](&v26);
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_21683762C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_217323E90((uint64_t)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_216837658()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E298, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E298))
  {
    uint64_t v1 = operator new(0x60uLL);
    v1[1] = 0;
    void *v1 = v1 + 1;
    v1[2] = 0;
    v1[3] = 850045863;
    *((_OWORD *)v1 + 2) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *((_OWORD *)v1 + 4) = 0u;
    *((_OWORD *)v1 + 5) = 0u;
    qword_26798E290 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798E298);
  }
  return qword_26798E290;
}

void sub_2168376DC(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::ArchGetProgramInfoForErrors(const void **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = sub_216837658();
  std::mutex::lock((std::mutex *)(v4 + 24));
  uint64_t v5 = sub_21678C2D8(v4, a1);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (v4 + 8 != v5) {
    std::string::operator=(a2, (const std::string *)(v5 + 56));
  }

  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_216837774(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchSetExtraLogInfoForErrors(const void **a1, void *a2)
{
  uint64_t v4 = sub_216837848();
  std::mutex::lock((std::mutex *)(v4 + 24));
  if (!a2 || *a2 == a2[1])
  {
    sub_216839B20((uint64_t **)v4, a1);
  }
  else
  {
    uint64_t v5 = a1;
    sub_216839B68((uint64_t **)v4, a1, (uint64_t)&unk_2174BFD90, (long long **)&v5)[7] = (uint64_t)a2;
  }
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_216837834(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216837848()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E2A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E2A8))
  {
    uint64_t v1 = operator new(0x58uLL);
    v1[1] = 0;
    void *v1 = v1 + 1;
    v1[2] = 0;
    v1[3] = 850045863;
    *((_OWORD *)v1 + 2) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *((_OWORD *)v1 + 4) = 0u;
    v1[10] = 0;
    qword_26798E2A0 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798E2A8);
  }
  return qword_26798E2A0;
}

void sub_2168378D0(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::ArchSetProgramNameForErrors(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  if (qword_26798E268) {
    free((void *)qword_26798E268);
  }
  if (this)
  {
    char v3 = strrchr((char *)this, 47);
    if (v3)
    {
      int v5 = v3[1];
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__ *)(v3 + 1);
      if (v5) {
        this = v4;
      }
    }
    sub_216779094(__s1, (char *)this);
    if (v8 < 0)
    {
      std::string::size_type v6 = *(char **)__s1;
      qword_26798E268 = (uint64_t)strdup(*(const char **)__s1);
      operator delete(v6);
    }
    else
    {
      qword_26798E268 = (uint64_t)strdup(__s1);
    }
  }
  else
  {
    qword_26798E268 = 0;
  }
}

const char *pxrInternal__aapl__pxrReserved__::ArchGetProgramNameForErrors(pxrInternal__aapl__pxrReserved__ *this)
{
  if (qword_26798E268) {
    return (const char *)qword_26798E268;
  }
  else {
    return "libArch";
  }
}

int *pxrInternal__aapl__pxrReserved__::ArchLogSessionInfo(int *this, const char *a2)
{
  if (byte_26798E260)
  {
    uint64_t v2 = (uint64_t)this;
    if (qword_26798E268) {
      char v3 = (const char *)qword_26798E268;
    }
    else {
      char v3 = "libArch";
    }
    return sub_2168379D0((uint64_t)v3, v2);
  }
  return this;
}

int *sub_2168379D0(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  time_t result = (int *)sub_216839CA8((pxrInternal__aapl__pxrReserved__ *)"ARCH_LOGSESSION");
  int v5 = &qword_26798E280;
  if (!a2) {
    int v5 = &qword_26798E278;
  }
  std::string::size_type v6 = (void *)*v5;
  if (result) {
    uint64_t v7 = (uint64_t)result;
  }
  else {
    uint64_t v7 = qword_26798E270;
  }
  if (v7) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    pid_t v9 = getpid();
    sub_2168399B0(v30, v9);
    __darwin_time_t v10 = sub_216839D70();
    sub_2168399B0(v29, v10);
    v28[0] = "$pid";
    v28[1] = v30;
    v28[2] = "$time";
    v28[3] = v29;
    v28[4] = "$prog";
    v28[5] = a1;
    v28[6] = "$stack";
    v28[7] = a2;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)std::string v12 = 0u;
    long long v13 = 0u;
    if (sub_216839DB8((uint64_t)v12, v7, v6, (uint64_t)v28)) {
      return (int *)pxrInternal__aapl__pxrReserved__::ArchCrashHandlerSystemv(v12[0], (char *const *)v12, (char *const *)0x3C, 0, 0, v11);
    }
    else {
      return sub_216839A54("Too many arguments to log session command\n");
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchSetLogSession(uint64_t this, const char *a2, const char *const *a3, const char *const *a4)
{
  qword_26798E270 = this;
  qword_26798E278 = (uint64_t)a2;
  qword_26798E280 = (uint64_t)a3;
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchIsAppCrashing(pxrInternal__aapl__pxrReserved__ *this)
{
  return dword_26798E288 != 0;
}

int *pxrInternal__aapl__pxrReserved__::ArchLogFatalProcessState(pxrInternal__aapl__pxrReserved__ *this, const char *a2, const char *a3, const char *a4)
{
  return sub_216837B84((pxrInternal__aapl__pxrReserved__ *)1, (const char *)this, a2, a3);
}

int *sub_216837B84(pxrInternal__aapl__pxrReserved__ *a1, const char *a2, const char *a3, const char *a4)
{
  int v7 = (int)a1;
  uint64_t v34 = *MEMORY[0x263EF8340];
  while ((atomic_exchange_explicit(byte_26798E2B0, 1u, memory_order_acquire) & 1) != 0)
    a1 = (pxrInternal__aapl__pxrReserved__ *)sched_yield();
  if (v7) {
    dword_26798E288 = 1;
  }
  int v30 = v7;
  BOOL v8 = (const char *)qword_26798E268;
  if (!qword_26798E268) {
    BOOL v8 = "libArch";
  }
  __s = (char *)v8;
  pid_t v9 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArchDebuggerAttach(a1);
  if (v9)
  {
    pxrInternal__aapl__pxrReserved__::ArchDebuggerTrap(v9);
    _exit(0);
  }
  if (sub_216839EB0((pxrInternal__aapl__pxrReserved__ *)__filename) == -1)
  {
    time_t result = sub_216839A54("Cannot create a log file\n");
  }
  else
  {
    __darwin_time_t v10 = pxrInternal__aapl__pxrReserved__::ArchOpenFile(__filename, "a");
    if (v10)
    {
      if (a2)
      {
        fputs("This stack trace was requested because: ", v10);
        fputs(a2, v10);
        fputs("\n", v10);
      }
      if (a3)
      {
        fputs(a3, v10);
        fputs("\n", v10);
      }
      uint64_t v11 = sub_216837848();
      sub_2168385FC(v11, v10, 0);
      if (a4)
      {
        fputs(a4, v10);
        fputs("\n", v10);
      }
      fputs("\nPostmortem Stack Trace\n", v10);
      fclose(v10);
    }
    if (gethostname(v32, 0x100uLL)) {
      v32[0] = 0;
    }
    int v12 = strlen(__s);
    if (v12 + 17 <= 80) {
      int v13 = 80;
    }
    else {
      int v13 = v12 + 17;
    }
    long long v14 = (FILE **)MEMORY[0x263EF8348];
    fputs("\n", (FILE *)*MEMORY[0x263EF8348]);
    int v15 = v13 - (v12 + 11);
    if (v13 < v12 + 11) {
      ++v15;
    }
    int v16 = v15 >> 1;
    int v17 = (v15 >> 1) - 1;
    if (((v15 >> 1) + 62) >= 0x7F)
    {
      int v18 = v17 / 64;
      do
      {
        fputs("----------------------------------------------------------------", *v14);
        --v18;
      }
      while (v18);
    }
    if (v17 <= 0) {
      int v19 = -(-v17 & 0x3F);
    }
    else {
      int v19 = v17 & 0x3F;
    }
    fputs(&asc_2174ED9F3[-v19 + 64], *v14);
    fputs(" ", *v14);
    fputs(__s, *v14);
    fputs(" terminated", *v14);
    fputs(" ", *v14);
    int v20 = v13 - (v16 + v12);
    int v21 = v20 - 12;
    if ((v20 + 51) >= 0x7F)
    {
      int v22 = v21 / 64;
      do
      {
        fputs("----------------------------------------------------------------", *v14);
        --v22;
      }
      while (v22);
    }
    if (v21 <= 0) {
      int v23 = -(-v21 & 0x3F);
    }
    else {
      int v23 = v21 & 0x3F;
    }
    fputs(&asc_2174ED9F3[-v23 + 64], *v14);
    fputs("\n", *v14);
    uint64_t v24 = sub_216837658();
    sub_216838400(v24);
    if (a2)
    {
      fputs("This stack trace was requested because: ", *v14);
      fputs(a2, *v14);
      fputs("\n", *v14);
    }
    if (a3)
    {
      fputs(a3, *v14);
      fputs("\n", *v14);
    }
    fputs("writing crash report to [ ", *v14);
    fputs(v32, *v14);
    fputs(":", *v14);
    fputs(__filename, *v14);
    fputs(" ] ...", *v14);
    fflush(*v14);
    if (a2) {
      int v25 = sub_21683A0FC(v30, (uint64_t)__filename, (uint64_t)a2);
    }
    else {
      int v25 = sub_21683A0FC(v30, (uint64_t)__filename, (uint64_t)a3);
    }
    int v27 = v25;
    fputs(" done.\n", *v14);
    uint64_t v28 = sub_216837848();
    sub_2168385FC(v28, *v14, 3uLL);
    unsigned int v29 = v13 >> 6;
    do
    {
      fputs("----------------------------------------------------------------", *v14);
      --v29;
    }
    while (v29);
    fputs(&asc_2174ED9F3[-(v13 & 0x3F) + 64], *v14);
    time_t result = (int *)fputs("\n", *v14);
    if (v27 && byte_26798E260) {
      time_t result = sub_2168379D0((uint64_t)__s, (uint64_t)__filename);
    }
  }
  atomic_store(0, (unsigned __int8 *)byte_26798E2B0);
  return result;
}

void sub_21683800C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::ArchLogCurrentProcessState(pxrInternal__aapl__pxrReserved__ *this, const char *a2, const char *a3, const char *a4)
{
  return sub_216837B84(0, (const char *)this, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::ArchLogStackTrace(uint64_t a1, uint64_t a2)
{
  if (qword_26798E268) {
    uint64_t v4 = (char *)qword_26798E268;
  }
  else {
    uint64_t v4 = "libArch";
  }
  sub_216779094(__p, v4);
  pxrInternal__aapl__pxrReserved__::ArchLogStackTrace((uint64_t)__p, a1, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2168380A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchLogStackTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](a1, a2, a3);
  int v7 = v6;
  int v8 = (int)v5;
  uint64_t v9 = (uint64_t)v4;
  uint64_t v10 = v3;
  uint64_t v29 = *MEMORY[0x263EF8340];
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v25 = 0;
  uint64_t v11 = (const char *)qword_26798E268;
  if (!qword_26798E268) {
    uint64_t v11 = "libArch";
  }
  pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s_%s", v4, v5, "st", v11);
  int TmpFile = pxrInternal__aapl__pxrReserved__::ArchMakeTmpFile((const char *)__p, (char *)v24);
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (gethostname(v26, 0x100uLL)) {
    v26[0] = 0;
  }
  int v13 = (FILE **)MEMORY[0x263EF8348];
  if (*(char *)(v10 + 23) >= 0) {
    long long v14 = (const char *)v10;
  }
  else {
    long long v14 = *(const char **)v10;
  }
  if (*(char *)(v9 + 23) >= 0) {
    int v15 = (const char *)v9;
  }
  else {
    int v15 = *(const char **)v9;
  }
  fprintf((FILE *)*MEMORY[0x263EF8348], "--------------------------------------------------------------\nA stack trace has been requested by %s because of %s\n", v14, v15);
  uint64_t v16 = sub_216837658();
  sub_216838400(v16);
  if (TmpFile == -1)
  {
    fwrite("--------------------------------------------------------------\n", 0x3FuLL, 1uLL, *v13);
    pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(*v13, v10, v9);
    uint64_t v21 = sub_216837848();
    sub_2168385FC(v21, *v13, 0);
    goto LABEL_38;
  }
  int v17 = fdopen(TmpFile, "w");
  int v18 = v24;
  if (v25 < 0) {
    int v18 = (void **)v24[0];
  }
  fprintf(*v13, "The stack can be found in %s:%s\n--------------------------------------------------------------\n", v26, (const char *)v18);
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(v17, v10, v9);
  if (!v8)
  {
    fclose(v17);
    goto LABEL_38;
  }
  uint64_t v19 = sub_216837848();
  sub_2168385FC(v19, v17, 0);
  fclose(v17);
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v10 = *(void *)v10;
  }
  if (v25 >= 0) {
    int v20 = v24;
  }
  else {
    int v20 = (void **)v24[0];
  }
  if ((*((char *)v7 + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)v7 + 23)) {
      goto LABEL_36;
    }
LABEL_29:
    int v22 = pxrInternal__aapl__pxrReserved__::ArchOpenFile((const char *)v20, "a");
    if (v22)
    {
      int v23 = pxrInternal__aapl__pxrReserved__::ArchOpenFile((const char *)v7, "r");
      if (v23)
      {
        fputs("\n\n********** Session Log **********\n\n", v22);
        while (fgets((char *)__p, 4096, v23))
          fputs((const char *)__p, v22);
        fclose(v23);
      }
      fclose(v22);
    }
    goto LABEL_36;
  }
  if (v7[1])
  {
    int v7 = (uint64_t *)*v7;
    if (v7) {
      goto LABEL_29;
    }
  }
LABEL_36:
  if (byte_26798E260) {
    sub_2168379D0(v10, (uint64_t)v20);
  }
LABEL_38:
  fwrite("--------------------------------------------------------------\n", 0x3FuLL, 1uLL, *v13);
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[0]);
  }
}

void sub_2168383C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216838400(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v3 = *(const char **)(a1 + 88);
  if (v3) {
    fputs(v3, (FILE *)*MEMORY[0x263EF8348]);
  }

  std::mutex::unlock(v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(FILE *a1, uint64_t a2, uint64_t a3)
{
  sub_21677B834((uint64_t)v11);
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(v11, a2, a3);
  if (a1) {
    char v6 = a1;
  }
  else {
    char v6 = (FILE *)*MEMORY[0x263EF8348];
  }
  std::stringbuf::str();
  if (v10 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  fputs(p_p, v6);
  if (v10 < 0) {
    operator delete(__p);
  }
  fflush(v6);
  v11[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v11[1] = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v13);
}

void sub_2168385E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168385FC(uint64_t a1, FILE *a2, unint64_t a3)
{
  char v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  uint64_t v9 = *(void **)a1;
  int v7 = (void *)(a1 + 8);
  int v8 = v9;
  if (v9 != v7)
  {
    unint64_t v10 = 0;
    do
    {
      fputs("\n", a2);
      uint64_t v11 = (const char *)(v8 + 4);
      if (*((char *)v8 + 55) < 0) {
        uint64_t v11 = *(const char **)v11;
      }
      fputs(v11, a2);
      fputs(":\n", a2);
      char v12 = (uint64_t *)v8[7];
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      while (v13 != v14)
      {
        if (a3)
        {
          if (v10 >= a3)
          {
            fputs("... see full diagnostics in crash report.\n", a2);
            goto LABEL_21;
          }
          ++v10;
        }
        int v15 = (const char *)v13;
        if (*(char *)(v13 + 23) < 0) {
          int v15 = *(const char **)v13;
        }
        fputs(v15, a2);
        v13 += 24;
      }
      uint64_t v16 = (void *)v8[1];
      if (v16)
      {
        do
        {
          int v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          int v17 = (void *)v8[2];
          BOOL v18 = *v17 == (void)v8;
          int v8 = v17;
        }
        while (!v18);
      }
      int v8 = v17;
    }
    while (v17 != v7);
  }
LABEL_21:

  std::mutex::unlock(v6);
}

void sub_216838740(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  char v6 = sub_216779180(a1, (uint64_t)"==============================================================\n", 63);
  int v7 = sub_216779180(v6, (uint64_t)" A stack trace has been requested by ", 37);
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *(void *)a2;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  uint64_t v11 = sub_216779180(v7, v9, v10);
  char v12 = sub_216779180(v11, (uint64_t)" because: ", 10);
  int v13 = *(char *)(a3 + 23);
  if (v13 >= 0) {
    uint64_t v14 = a3;
  }
  else {
    uint64_t v14 = *(void *)a3;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v15 = *(void *)(a3 + 8);
  }
  uint64_t v16 = sub_216779180(v12, v14, v15);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  int v17 = std::locale::use_facet(&v31, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  std::ostream::flush();
  v26[0] = a1;
  v26[1] = 0;
  sub_216839EB0((pxrInternal__aapl__pxrReserved__ *)&v31);
  sub_21683A0FC(0, (uint64_t)&v31, (uint64_t)"Log Stack Trace");
  sub_21683A8C8(v28);
  memset(&v25, 0, sizeof(v25));
  BOOL v18 = (const std::ios_base *)((char *)v28 + *(void *)(v28[0] - 24));
  if ((v18->__rdstate_ & 2) == 0)
  {
    uint64_t v19 = -2;
    int v20 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v21 = v19;
      std::ios_base::getloc(v18);
      int v22 = std::locale::use_facet(&v27, v20);
      unsigned __int8 v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v27);
      sub_21683AAFC(v28, (uint64_t)&v25, v23);
      if ((v29[*(void *)(v28[0] - 24) + 16] & 2) == 0) {
        std::string::append(&v25, "\n");
      }
      sub_21683AA8C((uint64_t)v26, (uint64_t)&v25);
      BOOL v18 = (const std::ios_base *)((char *)v28 + *(void *)(v28[0] - 24));
      if ((v18->__rdstate_ & 2) != 0) {
        break;
      }
      uint64_t v19 = v21 - 1;
    }
    while (v21);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v28 + *(void *)(v28[0] - 24)), *(_DWORD *)&v29[*(void *)(v28[0] - 24) + 16] | 4);
  }
  unlink((const char *)&v31);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  v28[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v28 + *(void *)(v28[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x21D447910](v29);
  std::istream::~istream();
  MEMORY[0x21D447E60](&v30);
  return sub_216779180(a1, (uint64_t)"==============================================================\n", 63);
}

void sub_216838AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  a19 = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)&a19 + *(void *)(a19 - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x21D447910](&a21);
  std::istream::~istream();
  MEMORY[0x21D447E60](&a72);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(FILE *a1, uint64_t a2)
{
  if (qword_26798E268) {
    uint64_t v4 = (char *)qword_26798E268;
  }
  else {
    uint64_t v4 = "libArch";
  }
  sub_216779094(__p, v4);
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(a1, (uint64_t)__p, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216838C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(void *a1, uint64_t a2)
{
  if (qword_26798E268) {
    uint64_t v4 = (char *)qword_26798E268;
  }
  else {
    uint64_t v4 = "libArch";
  }
  sub_216779094(__p, v4);
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(a1, (uint64_t)__p, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216838CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchGetStackTrace(void *a1, uint64_t a2)
{
  if (qword_26798E268) {
    uint64_t v4 = (char *)qword_26798E268;
  }
  else {
    uint64_t v4 = "libArch";
  }
  sub_216779094(__p, v4);
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(a1, (uint64_t)__p, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216838D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchGetStackFrames(pxrInternal__aapl__pxrReserved__ *a1, uint64_t *a2)
{
}

void pxrInternal__aapl__pxrReserved__::ArchGetStackFrames(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t *a3)
{
  sub_21679A004((uint64_t)a3, (unint64_t)a1);
  unint64_t StackFrames = pxrInternal__aapl__pxrReserved__::ArchGetStackFrames(a1, a2, *a3, v6);

  sub_21679A004((uint64_t)a3, StackFrames);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetStackFrames(pxrInternal__aapl__pxrReserved__ *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](this, a2, a3);
  int v7 = v6;
  uint64_t v8 = v5;
  uint64_t v15 = *MEMORY[0x263EF8340];
  memset(&v14[2], 0, 480);
  if ((unint64_t)(v5 + v4) >= 0x1000) {
    int v9 = 4096;
  }
  else {
    int v9 = v5 + v4;
  }
  memset(v14, 0, 32);
  uint64_t result = backtrace((void **)v14, v9) - v8;
  if (result)
  {
    uint64_t v11 = (uint64_t *)v14 + v8;
    uint64_t v12 = result;
    do
    {
      uint64_t v13 = *v11++;
      *v7++ = v13;
      --v12;
    }
    while (v12);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames(void *a1, uint64_t *a2, int a3)
{
  sub_216839060(a2, a3, &v14);
  uint64_t v4 = v14;
  if (v15 != v14)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    int v7 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v8 = v4 + v5;
      int v9 = *(char *)(v8 + 23);
      if (v9 >= 0) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = *(void *)v8;
      }
      if (v9 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        uint64_t v11 = *(void *)(v8 + 8);
      }
      uint64_t v12 = sub_216779180(a1, v10, v11);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
      uint64_t v13 = std::locale::use_facet(&v16, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v16);
      std::ostream::put();
      std::ostream::flush();
      ++v6;
      uint64_t v4 = v14;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3));
  }
  v16.__locale_ = (std::locale::__imp *)&v14;
  sub_216782F20((void ***)&v16);
}

void sub_216839034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, std::locale a14)
{
  a13 = &a10;
  sub_216782F20((void ***)&a13);
  _Unwind_Resume(a1);
}

void sub_216839060(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*a1 == a1[1])
  {
    sub_216779094(v42, "No frames saved, stack traces probably not supported on this architecture.");
    unint64_t v26 = a3[2];
    unint64_t v27 = a3[1];
    if (v27 >= v26)
    {
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *a3) >> 3);
      unint64_t v30 = v29 + 1;
      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *a3) >> 3);
      if (2 * v31 > v30) {
        unint64_t v30 = 2 * v31;
      }
      if (v31 >= 0x555555555555555) {
        unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v32 = v30;
      }
      uint64_t v49 = a3 + 2;
      if (v32) {
        uint64_t v33 = (char *)sub_216782ED8((uint64_t)(a3 + 2), v32);
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v34 = &v33[24 * v29];
      unint64_t v45 = v33;
      unint64_t v46 = v34;
      uint64_t v48 = (void **)&v33[24 * v32];
      long long v35 = *(_OWORD *)v42;
      *((void *)v34 + 2) = v43;
      *(_OWORD *)uint64_t v34 = v35;
      v42[1] = 0;
      uint64_t v43 = 0;
      v42[0] = 0;
      unint64_t v47 = v34 + 24;
      sub_216790CCC(a3, &v45);
      uint64_t v36 = a3[1];
      sub_216790E64((uint64_t)&v45);
      int v37 = SHIBYTE(v43);
      a3[1] = v36;
      if (v37 < 0) {
        operator delete(v42[0]);
      }
    }
    else
    {
      long long v28 = *(_OWORD *)v42;
      *(void *)(v27 + 16) = v43;
      *(_OWORD *)unint64_t v27 = v28;
      a3[1] = v27 + 24;
    }
  }
  else
  {
    sub_21683959C();
    sub_21683A3F4((uint64_t)v42, (uint64_t)&unk_26798E2B8);
    if (!v44)
    {
      unint64_t v45 = &unk_26C74B300;
      unint64_t v46 = (char *)sub_21683A28C;
      uint64_t v48 = &v45;
      sub_21683A560(&v45, v42);
      sub_21683A844(&v45);
    }
    uint64_t v6 = *a1;
    if (a1[1] != *a1)
    {
      unint64_t v7 = 0;
      uint64_t v8 = 0;
      while (1)
      {
        sub_21683A39C((uint64_t)v42, *(void *)(v6 + 8 * v7));
        char v11 = v41;
        if (!a2) {
          break;
        }
        if (v41 < 0)
        {
          if (v40[1] != (void *)9) {
            break;
          }
          uint64_t v12 = (void **)v40[0];
        }
        else
        {
          if (v41 != 9) {
            break;
          }
          uint64_t v12 = v40;
        }
        uint64_t v13 = *v12;
        int v14 = *((unsigned __int8 *)v12 + 8);
        if (v13 != (void *)0x6E776F6E6B6E753CLL || v14 != 62) {
          break;
        }
LABEL_32:
        if (v11 < 0) {
          operator delete(v40[0]);
        }
        ++v7;
        uint64_t v6 = *a1;
        if (v7 >= (a1[1] - *a1) >> 3) {
          goto LABEL_35;
        }
      }
      if (v41 >= 0) {
        std::locale v16 = v40;
      }
      else {
        std::locale v16 = (void **)v40[0];
      }
      pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)" #%-3i 0x%016lx in %s", v9, v10, v8, *(void *)(*a1 + 8 * v7), v16);
      unint64_t v18 = a3[1];
      unint64_t v17 = a3[2];
      if (v18 >= v17)
      {
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a3) >> 3);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a3) >> 3);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v20;
        }
        uint64_t v49 = a3 + 2;
        if (v22) {
          unsigned __int8 v23 = (char *)sub_216782ED8((uint64_t)(a3 + 2), v22);
        }
        else {
          unsigned __int8 v23 = 0;
        }
        uint64_t v24 = &v23[24 * v19];
        unint64_t v45 = v23;
        unint64_t v46 = v24;
        uint64_t v48 = (void **)&v23[24 * v22];
        *((void *)v24 + 2) = v39;
        *(_OWORD *)uint64_t v24 = *(_OWORD *)__p;
        uint64_t v39 = 0;
        *(_OWORD *)std::string __p = 0uLL;
        unint64_t v47 = v24 + 24;
        sub_216790CCC(a3, &v45);
        uint64_t v25 = a3[1];
        sub_216790E64((uint64_t)&v45);
        a3[1] = v25;
      }
      else
      {
        *(void *)(v18 + 16) = v39;
        *(_OWORD *)unint64_t v18 = *(_OWORD *)__p;
        a3[1] = v18 + 24;
      }
      uint64_t v8 = (v8 + 1);
      char v11 = v41;
      goto LABEL_32;
    }
LABEL_35:
    sub_21683A844(v42);
  }
}

void sub_21683944C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchGetStackTrace(pxrInternal__aapl__pxrReserved__ *this@<X0>, uint64_t *a2@<X8>)
{
  std::string __p = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetStackFrames(this, 0, (uint64_t *)&__p);
  sub_216839060((uint64_t *)&__p, 0, a2);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_216839540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::ArchSetStackTraceCallback(uint64_t a1)
{
  sub_21683959C();

  return sub_216839618(qword_26798E2B8, a1);
}

void sub_21683959C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E2D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E2D8))
  {
    qword_26798E2D0 = 0;
    __cxa_atexit((void (*)(void *))sub_21683A3F0, &unk_26798E2B8, &dword_216758000);
    __cxa_guard_release(&qword_26798E2D8);
  }
}

void *sub_216839618(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  sub_21683A3F4((uint64_t)v4, a2);
  sub_21683A560(v4, a1);
  sub_21683A844(v4);
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::ArchGetStackTraceCallback(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_21683959C();
    return sub_216839618(v1, (uint64_t)qword_26798E2B8);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchCrashHandlerSystemv(pxrInternal__aapl__pxrReserved__ *this, char *const *a2, char *const *a3, void (*a4)(void), void (*a5)(void *), void *a6)
{
  int v8 = (int)a3;
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::Arch_nonLockingFork) {
    pid_t v11 = pxrInternal__aapl__pxrReserved__::Arch_nonLockingFork(this, a2, a3, a4, a5, a6);
  }
  else {
    pid_t v11 = fork();
  }
  pid_t v12 = v11;
  if (v11 == -1)
  {
    unint64_t v17 = __error();
    sub_2168399B0(v27, *v17);
    sub_216839A54("FAIL: Unable to fork() crash handler: errno=");
    sub_216839A54(v27);
    sub_216839A54("\n");
    return 0xFFFFFFFFLL;
  }
  if (!v11)
  {
    if (isatty(0)) {
      setsid();
    }
    j__execv((const char *)this, a2);
    unsigned __int8 v23 = __error();
    sub_2168399B0(v27, *v23);
    sub_216839A54("FAIL: Unable to exec crash handler ");
    sub_216839A54(this);
    sub_216839A54(": errno=");
    sub_216839A54(v27);
    sub_216839A54("\n");
    _exit(127);
  }
  v26.__sigaction_u.__sa_handler = (void (__cdecl *)(int))nullsub_30;
  *(void *)&v26.sa_mask = 0;
  sigaction(14, &v26, &v25);
  int v13 = 0;
  while (1)
  {
    int v24 = 0;
    if (v8 >= 1)
    {
      int v13 = 1;
      alarm(1u);
    }
    pid_t v14 = waitpid(v12, &v24, 0);
    if (!v14) {
      goto LABEL_12;
    }
    if (v14 != -1) {
      break;
    }
    if (*__error() != 4)
    {
      unint64_t v19 = __error();
      sub_2168399B0(v27, *v19);
      unint64_t v20 = "FAIL: Crash handler wait failed: errno=";
LABEL_25:
      sub_216839A54(v20);
      sub_216839A54(v27);
      std::locale v16 = "\n";
      goto LABEL_26;
    }
LABEL_12:
    if (a4) {
      a4(a5);
    }
    BOOL v15 = __OFSUB__(v8, v13);
    v8 -= v13;
    if ((v8 < 0) ^ v15 | (v8 == 0))
    {
      alarm(0);
      kill(v12, 9);
      waitpid(v12, 0, 0);
      *__error() = 16;
      std::locale v16 = "FAIL: Crash handler timed out\n";
LABEL_26:
      sub_216839A54(v16);
      uint64_t v18 = 0xFFFFFFFFLL;
      goto LABEL_27;
    }
  }
  if ((v24 & 0x7F) == 0x7F)
  {
    *__error() = 4;
    sub_2168399B0(v27, v24);
    unint64_t v20 = "FAIL: Crash handler unexpected wait status=";
    goto LABEL_25;
  }
  if ((v24 & 0x7F) != 0)
  {
    *__error() = 4;
    sub_2168399B0(v27, v24 & 0x7F);
    unint64_t v20 = "FAIL: Crash handler died: signal=";
    goto LABEL_25;
  }
  uint64_t v18 = BYTE1(v24);
  if (BYTE1(v24) == 127)
  {
    *__error() = 2;
    sub_216839A54("FAIL: Crash handler failed to exec\n");
  }
LABEL_27:
  int v21 = *__error();
  alarm(0);
  sigaction(14, &v25, 0);
  *__error() = v21;
  return v18;
}

unsigned char *sub_2168399B0(unsigned char *a1, int64_t a2)
{
  if (a2 < 0)
  {
    a2 = -a2;
    *a1 = 45;
  }
  uint64_t v2 = 1;
  if ((unint64_t)a2 >= 0xA)
  {
    unint64_t v3 = a2;
    do
    {
      ++v2;
      BOOL v4 = v3 > 0x63;
      v3 /= 0xAuLL;
    }
    while (v4);
  }
  uint64_t v5 = &a1[v2];
  a1[v2] = 0;
  if (a2)
  {
    uint64_t v6 = &a1[v2 - 1];
    do
    {
      *v6-- = a0123456789[a2 % 10];
      unint64_t v7 = a2 + 9;
      a2 /= 10;
    }
    while (v7 > 0x12);
  }
  else
  {
    *(v5 - 1) = 48;
  }
  return v5;
}

int *sub_216839A54(unsigned char *a1)
{
  int v2 = *__error();
  if (a1 && *a1)
  {
    uint64_t v3 = 0;
    do
      size_t v4 = v3 + 1;
    while (a1[++v3]);
  }
  else
  {
    size_t v4 = 0;
  }
  write(2, a1, v4);
  uint64_t result = __error();
  *uint64_t result = v2;
  return result;
}

uint64_t sub_216839AC4(uint64_t **a1, const void **a2)
{
  uint64_t v3 = (uint64_t *)sub_21678C2D8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  size_t v4 = v3;
  sub_2167AE00C(a1, v3);
  sub_21677B5A0((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t sub_216839B20(uint64_t **a1, const void **a2)
{
  uint64_t v3 = sub_21678C2D8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  sub_2167ADFC8(a1, v3);
  return 1;
}

uint64_t *sub_216839B68(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_216839C00((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_216839C00@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216839C8C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_21678C278(v3, v2);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__ *sub_216839CA8(pxrInternal__aapl__pxrReserved__ *result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (*(unsigned char *)result)
  {
    uint64_t v2 = 0;
    do
      uint64_t v3 = v2 + 1;
    while (*((unsigned __int8 *)result + ++v2));
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::ArchEnviron(result);
  uint64_t v6 = *v5;
  if (!*v5) {
    return 0;
  }
  while (2)
  {
    unint64_t v7 = v6;
    int v8 = v1;
    uint64_t v9 = v3;
    while (*v7)
    {
      if (!v9) {
        goto LABEL_18;
      }
      int v10 = *(unsigned __int8 *)v8;
LABEL_16:
      if (*v7 != v10) {
        goto LABEL_19;
      }
      int v8 = (pxrInternal__aapl__pxrReserved__ *)((char *)v8 + 1);
      ++v7;
      --v9;
    }
    int v10 = *(unsigned __int8 *)v8;
    if (*(unsigned char *)v8) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11) {
      goto LABEL_16;
    }
LABEL_18:
    if (v6[v3] == 61) {
      return (pxrInternal__aapl__pxrReserved__ *)&v6[v3 + 1];
    }
LABEL_19:
    pid_t v12 = v5[1];
    ++v5;
    uint64_t v6 = v12;
    if (v12) {
      continue;
    }
    return 0;
  }
}

__darwin_time_t sub_216839D70()
{
  if (getrusage(0, &v1)) {
    return time(0) - qword_26798E258;
  }
  else {
    return v1.ru_utime.tv_sec;
  }
}

uint64_t sub_216839DB8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (!*a3)
  {
    unint64_t v4 = 1;
    goto LABEL_8;
  }
  unint64_t v4 = 1;
  while (a3[v4++])
    ;
  if (v4 <= 0x1F)
  {
    if (!v4)
    {
LABEL_26:
      *(void *)(a1 + 8 * v4) = 0;
      return 1;
    }
LABEL_8:
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v7 = a3[i];
      if (v7)
      {
        int v8 = (unsigned __int8 *)a3[i];
        uint64_t v9 = "$cmd";
        while (1)
        {
          int v10 = *v8;
          int v11 = *(unsigned __int8 *)v9;
          if (!(v10 | v11)) {
            break;
          }
          ++v8;
          ++v9;
          if (v10 != v11) {
            goto LABEL_13;
          }
        }
        *(void *)(a1 + 8 * i) = a2;
      }
      else
      {
LABEL_13:
        uint64_t v12 = 0;
        *(void *)(a1 + 8 * i) = v7;
        int v13 = (unsigned __int8 *)a3[i];
        while (1)
        {
          pid_t v14 = *(unsigned __int8 **)(a4 + 16 * v12);
          if (v13)
          {
            if (v14) {
              break;
            }
          }
          if (v13 == v14) {
            goto LABEL_23;
          }
LABEL_21:
          if (++v12 == 4) {
            goto LABEL_25;
          }
        }
        BOOL v15 = (unsigned __int8 *)a3[i];
        while (1)
        {
          int v16 = *v15;
          int v17 = *v14;
          if (!(v16 | v17)) {
            break;
          }
          ++v15;
          ++v14;
          if (v16 != v17) {
            goto LABEL_21;
          }
        }
LABEL_23:
        *(void *)(a1 + 8 * i) = *(void *)(a4 + 16 * v12 + 8);
      }
LABEL_25:
      ;
    }
    goto LABEL_26;
  }
  return 0;
}

uint64_t sub_216839EB0(pxrInternal__aapl__pxrReserved__ *a1)
{
  TmpDir = (unsigned char *)pxrInternal__aapl__pxrReserved__::ArchGetTmpDir(a1);
  if (TmpDir && *TmpDir)
  {
    uint64_t v3 = 0;
    do
      uint64_t v4 = v3 + 1;
    while (TmpDir[++v3]);
    uint64_t v6 = v4 + 5;
  }
  else
  {
    uint64_t v6 = 5;
  }
  uint64_t v7 = (const char *)qword_26798E268;
  if (!qword_26798E268) {
    uint64_t v7 = "libArch";
  }
  if (*v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v7 + 1;
    do
      uint64_t v10 = v8 + 1;
    while (v9[v8++]);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__ *)getpid();
  if ((int)v12 >= 0) {
    unint64_t v13 = v12;
  }
  else {
    unint64_t v13 = -(int)v12;
  }
  uint64_t v14 = 1;
  if ((int)v12 < 0) {
    uint64_t v14 = 2;
  }
  if (v13 >= 0xA)
  {
    do
    {
      ++v14;
      BOOL v15 = v13 > 0x63;
      v13 /= 0xAuLL;
    }
    while (v15);
  }
  uint64_t v16 = v6 + v10 + v14;
  if ((unint64_t)(v16 - 1024) <= 0xFFFFFFFFFFFFFBFELL)
  {
LABEL_22:
    *__error() = 12;
    return 0xFFFFFFFFLL;
  }
  uint64_t v18 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::ArchGetTmpDir(v12);
  uint64_t v19 = sub_21683A278((uint64_t)a1, v18);
  uint64_t v20 = sub_21683A278(v19, "/");
  uint64_t v21 = sub_21683A278(v20, "st");
  uint64_t v22 = sub_21683A278(v21, "_");
  if (qword_26798E268) {
    unsigned __int8 v23 = (unsigned __int8 *)qword_26798E268;
  }
  else {
    unsigned __int8 v23 = "libArch";
  }
  uint64_t v24 = sub_21683A278(v22, v23);
  sigaction v25 = (unsigned char *)sub_21683A278(v24, ".");
  pid_t v26 = getpid();
  unint64_t v27 = sub_2168399B0(v25, v26);
  int v28 = open((const char *)a1, 3585, 416);
  if (v28 == -1)
  {
    unint64_t v29 = 0;
    while (*__error() == 17)
    {
      uint64_t v30 = 1;
      if (v29 >= 9)
      {
        unint64_t v31 = v29 + 1;
        do
        {
          ++v30;
          BOOL v15 = v31 > 0x63;
          v31 /= 0xAuLL;
        }
        while (v15);
      }
      if ((unint64_t)(v16 + 2 + v30) >= 0x401) {
        goto LABEL_22;
      }
      sub_21683A278((uint64_t)v27, ".");
      sub_2168399B0(v27 + 1, v29 + 1);
      int v28 = open((const char *)a1, 3585, 416);
      ++v29;
      if (v28 != -1) {
        goto LABEL_28;
      }
    }
    return 0xFFFFFFFFLL;
  }
LABEL_28:
  close(v28);
  return 0;
}

uint64_t sub_21683A0FC(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_216839CA8((pxrInternal__aapl__pxrReserved__ *)"ARCH_POSTMORTEM");
  uint64_t v7 = &qword_26798E250;
  if (!a1) {
    uint64_t v7 = &qword_26798E248;
  }
  uint64_t v8 = (void *)*v7;
  if (v6) {
    uint64_t v9 = (uint64_t)v6;
  }
  else {
    uint64_t v9 = qword_26798E240;
  }
  if (v9) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    pid_t v11 = getpid();
    sub_2168399B0(v33, v11);
    __darwin_time_t v12 = sub_216839D70();
    sub_2168399B0(v32, v12);
    v31[0] = "$pid";
    v31[1] = v33;
    v31[2] = "$log";
    v31[3] = a2;
    v31[4] = "$time";
    v31[5] = v32;
    v31[6] = "$reason";
    v31[7] = a3;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)BOOL v15 = 0u;
    long long v16 = 0u;
    if (sub_216839DB8((uint64_t)v15, v9, v8, (uint64_t)v31))
    {
      pxrInternal__aapl__pxrReserved__::ArchCrashHandlerSystemv(v15[0], (char *const *)v15, (char *const *)0x12C, 0, 0, v13);
      return 1;
    }
    sub_216839A54("Too many arguments to postmortem command\n");
  }
  return 0;
}

uint64_t sub_21683A278(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = a1 - 1;
  do
  {
    int v3 = *a2++;
    *(unsigned char *)++uint64_t result = v3;
  }
  while (v3);
  return result;
}

void sub_21683A28C(uint64_t a1@<X0>, void *a2@<X8>)
{
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  memset(&__p, 0, sizeof(__p));
  uint64_t v9 = 0;
  BOOL v10 = 0;
  BOOL AddressInfo = pxrInternal__aapl__pxrReserved__::ArchGetAddressInfo((const void *)(a1 - 1), (uint64_t)v12, &v10, (uint64_t)&__p, &v9);
  if (v9) {
    BOOL v5 = AddressInfo;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::Arch_DemangleFunctionName(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s+%#0lx", v6, v7, p_p, a1 - (void)v9);
  }
  else
  {
    sub_216779094(a2, "<unknown>");
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
}

void sub_21683A36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21683A39C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_21683A3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_21683A494(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C74B300;
  result[1] = v3;
  return result;
}

uint64_t sub_21683A4DC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C74B300;
  a2[1] = v2;
  return result;
}

uint64_t sub_21683A508(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t sub_21683A514(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74B380)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21683A554()
{
  return &unk_26C74B380;
}

void *sub_21683A560(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    BOOL v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_21683A7C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

void sub_21683A7CC()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C74B3C8;
  __cxa_throw(exception, (struct type_info *)&unk_26C74B3A0, (void (*)(void *))std::exception::~exception);
}

void sub_21683A81C(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete(v1);
}

void *sub_21683A844(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_21683A8C8(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x21D447900](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_21683AA54(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x21D447E60](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21683AA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v5 = v4;
  }
  sub_216779180(v3, a2, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    size_t v7 = strlen(*(const char **)(a1 + 8));
    sub_216779180(*(void **)a1, v6, v7);
  }
  return a1;
}

void *sub_21683AAFC(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x21D447960](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    size_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_21683AC5C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x21683AC1CLL);
  }
  __cxa_rethrow();
}

void sub_21683ACD8(_Unwind_Exception *a1)
{
}

BOOL pxrInternal__aapl__pxrReserved__::ArchGetAddressInfo(const void *a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  int v9 = dladdr(a1, &v15);
  if (v9)
  {
    if (a2)
    {
      sub_216779094(__p, (char *)v15.dli_fname);
      pxrInternal__aapl__pxrReserved__::ArchAbsPath((uint64_t)__p, &v14);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(std::string *)a2 = v14;
      *((unsigned char *)&v14.__r_.__value_.__s + 23) = 0;
      v14.__r_.__value_.__s.__data_[0] = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    if (a3) {
      *a3 = v15.dli_fbase;
    }
    if (a4)
    {
      if (v15.dli_sname) {
        dli_sname = v15.dli_sname;
      }
      else {
        dli_sname = "";
      }
      MEMORY[0x21D4477E0](a4, dli_sname);
    }
    if (a5) {
      *a5 = v15.dli_saddr;
    }
  }
  return v9 != 0;
}

void sub_21683ADD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchGetCwd(void *a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (getcwd(__s, 0x400uLL))
  {
    sub_216779094(a1, __s);
  }
  else
  {
    uint64_t v4 = getcwd(0, 0);
    if (v4)
    {
      sub_216779094(a1, v4);
      free(v4);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Arch_Warning((pxrInternal__aapl__pxrReserved__ *)"can't determine working directory", "ArchGetCwd", (const char *)0x4E, "arch/systemInfo.cpp", v3);
      sub_216779094(a1, ".");
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::ArchGetExecutablePath@<X0>(void *a1@<X8>)
{
  v7[4] = *MEMORY[0x263EF8340];
  v7[0] = &unk_26C74B3F0;
  v7[3] = v7;
  uint64_t v3 = (char *)operator new[](0x400uLL);
  size_t __sz = 1024;
  while (1)
  {
    if (sub_21683B000((uint64_t)v7, (uint64_t)v3, (uint64_t)&__sz))
    {
      sub_216779094(a1, v3);
      goto LABEL_7;
    }
    if (__sz == -1) {
      break;
    }
    uint64_t v4 = (char *)operator new[](__sz);
    operator delete[](v3);
    uint64_t v3 = v4;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_7:
  operator delete[](v3);
  return sub_21683B160(v7);
}

void sub_21683AFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete[](v10);
  sub_21683B160(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetPageSize(pxrInternal__aapl__pxrReserved__ *this)
{
  return sysconf(29);
}

uint64_t sub_21683B000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void *sub_21683B060()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C74B3F0;
  return result;
}

void sub_21683B098(uint64_t a1, void *a2)
{
  *a2 = &unk_26C74B3F0;
}

BOOL sub_21683B0C0(uint64_t a1, char **a2, void **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  bufstd::string::size_type size = **a3;
  int v5 = _NSGetExecutablePath(v3, &bufsize);
  if (v5 == -1) {
    *uint64_t v4 = bufsize;
  }
  return v5 != -1;
}

uint64_t sub_21683B114(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74B460)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21683B154()
{
  return &unk_26C74B460;
}

void *sub_21683B160(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchIsMainThread(pxrInternal__aapl__pxrReserved__ *this)
{
  return pthread_main_np() != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetMainThreadId(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E2E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E2E8))
  {
    qword_26798E2E0 = pthread_main_thread_np();
    __cxa_guard_release(&qword_26798E2E8);
  }
  return qword_26798E2E0;
}

void sub_21683B260(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetTickQuantum(pxrInternal__aapl__pxrReserved__ *this)
{
  return sub_21683B294(&qword_26798AF78, (uint64_t (*)(void))sub_21683B2F8);
}

uint64_t sub_21683B294(atomic_ullong *a1, uint64_t (*a2)(void))
{
  uint64_t result = *a1;
  if (result < 0)
  {
    if (result != -1) {
      goto LABEL_10;
    }
    atomic_compare_exchange_strong(a1, (unint64_t *)&result, 0xFFFFFFFFFFFFFFFELL);
    if (result == -1)
    {
      uint64_t result = a2();
      *a1 = result;
      return result;
    }
    if (result < 0)
    {
LABEL_10:
      do
      {
        sched_yield();
        uint64_t result = *a1;
      }
      while (*a1 < 0);
    }
  }
  return result;
}

unint64_t sub_21683B2F8()
{
  int v0 = 0;
  v12[5] = *MEMORY[0x263EF8340];
  unint64_t v1 = -1;
  do
  {
    uint64_t v2 = mach_absolute_time();
    v12[0] = v2;
    v12[1] = mach_absolute_time();
    v12[2] = mach_absolute_time();
    v12[3] = mach_absolute_time();
    uint64_t v3 = mach_absolute_time();
    uint64_t v4 = 0;
    v12[4] = v3;
    int8x16_t v5 = (int8x16_t)vdupq_n_s64(v2);
    do
    {
      int64x2_t v6 = *(int64x2_t *)&v12[v4 + 1];
      *(int64x2_t *)&v12[v4] = vsubq_s64(v6, (int64x2_t)vextq_s8(v5, (int8x16_t)v6, 8uLL));
      v4 += 2;
      int8x16_t v5 = (int8x16_t)v6;
    }
    while (v4 != 4);
    size_t v7 = v12;
    unint64_t v8 = v12[0];
    for (uint64_t i = 1; i != 4; ++i)
    {
      if (v12[i] < v8)
      {
        unint64_t v8 = v12[i];
        size_t v7 = &v12[i];
      }
    }
    unint64_t v10 = *v7;
    if (v10 < v1) {
      unint64_t v1 = v10;
    }
    ++v0;
  }
  while (v0 != 64);
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetIntervalTimerTickOverhead(pxrInternal__aapl__pxrReserved__ *this)
{
  return sub_21683B294(&qword_26798AF80, (uint64_t (*)(void))sub_21683B418);
}

unint64_t sub_21683B418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t (*a5)(const void *, int))
{
  int64x2_t v6 = &pxrInternal__aapl__pxrReserved__::testTimeAccum;
  *(void *)size_t v7 = &v6;
  return pxrInternal__aapl__pxrReserved__::Arch_MeasureExecutionTime((pxrInternal__aapl__pxrReserved__ *)0x989680, 0, v7, (uint64_t (*)(void, void))sub_21683B7D0, a5);
}

unint64_t pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(pxrInternal__aapl__pxrReserved__ *this)
{
  return llround(pxrInternal__aapl__pxrReserved__::ArchGetNanosecondsPerTick(this) * (double)(unint64_t)this);
}

double pxrInternal__aapl__pxrReserved__::ArchGetNanosecondsPerTick(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t v1 = qword_26798AF88;
  double result = *(double *)&qword_26798AF88;
  if (*(double *)&qword_26798AF88 < 0.0)
  {
    if (*(double *)&qword_26798AF88 == -1.0)
    {
      double v3 = *(double *)&qword_26798AF88;
      atomic_compare_exchange_strong(&qword_26798AF88, (unint64_t *)&v3, 0xC000000000000000);
      if (*(void *)&v3 == v1)
      {
        mach_timebase_info(&info);
        LODWORD(v4) = info.numer;
        LODWORD(v5) = info.denom;
        double result = (double)v4 / (double)v5;
        qword_26798AF88 = *(void *)&result;
        return result;
      }
      double result = v3;
    }
    while (result < 0.0)
    {
      sched_yield();
      double result = *(double *)&qword_26798AF88;
    }
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds(pxrInternal__aapl__pxrReserved__ *this)
{
  return (double)(uint64_t)llround(pxrInternal__aapl__pxrReserved__::ArchGetNanosecondsPerTick(this)* (double)(unint64_t)this)/ 1000000000.0;
}

unint64_t pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks(pxrInternal__aapl__pxrReserved__ *this, double a2)
{
  return llround(a2 * 1000000000.0 / pxrInternal__aapl__pxrReserved__::ArchGetNanosecondsPerTick(this));
}

unint64_t pxrInternal__aapl__pxrReserved__::Arch_MeasureExecutionTime(pxrInternal__aapl__pxrReserved__ *this, char *a2, BOOL *a3, uint64_t (*a4)(void, void), unint64_t (*a5)(const void *, int))
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v8 = -1;
  int v9 = -10;
  do
  {
    unint64_t v10 = ((uint64_t (*)(BOOL *, uint64_t, BOOL *, uint64_t (*)(void, void), unint64_t (*)(const void *, int)))a4)(a3, 1, a3, a4, a5);
    if (v10 < v8) {
      unint64_t v8 = v10;
    }
  }
  while (!__CFADD__(v9++, 1));
  uint64_t v12 = sub_21683B294(&qword_26798AF78, (uint64_t (*)(void))sub_21683B2F8);
  if (v8 >= 2000 * v12) {
    LODWORD(v13) = 1;
  }
  else {
    unint64_t v13 = (2000 * v12 + (v8 >> 1)) / v8;
  }
  uint64_t v14 = 0;
  if ((v13 & 0x80000000) == 0) {
    int v15 = v13;
  }
  else {
    int v15 = v13 + 1;
  }
  uint64_t v16 = (uint64_t)v15 >> 1;
  unint64_t v17 = (int)v13;
  do
    v28[v14++] = (a4(a3, v17) + v16) / v17;
  while (v14 != 64);
  if ((unint64_t)this >= 0x12A05F200) {
    unint64_t v18 = 5000000000;
  }
  else {
    unint64_t v18 = (unint64_t)this;
  }
  uint64_t v19 = mach_absolute_time();
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  unint64_t v20 = v28[0];
  if (v28[0] == v29)
  {
LABEL_28:
    long long v24 = a2;
    if (a2)
    {
      char v25 = 1;
LABEL_33:
      *long long v24 = v25;
    }
  }
  else
  {
    unint64_t v20 = -1;
    while (mach_absolute_time() - v19 < v18)
    {
      unint64_t v21 = v29;
      for (uint64_t i = 43; i != 64; ++i)
        v28[i] = (a4(a3, v17) + v16) / v17;
      for (uint64_t j = 0; j != 6; ++j)
        v28[j] = (a4(a3, v17) + v16) / v17;
      if (v21 < v20) {
        unint64_t v20 = v21;
      }
      std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
      if (v28[0] == v29)
      {
        unint64_t v20 = v28[0];
        goto LABEL_28;
      }
    }
    while (mach_absolute_time() - v19 < v18)
      ;
    long long v24 = a2;
    if (a2)
    {
      char v25 = 0;
      goto LABEL_33;
    }
  }
  return v20;
}

uint64_t sub_21683B7D0(void ***a1, int a2)
{
  for (i = mach_absolute_time(); a2; *void *v5 = mach_absolute_time() - v6)
  {
    --a2;
    unint64_t v5 = *a1;
    uint64_t v6 = mach_absolute_time();
  }
  return mach_absolute_time() - i;
}

void *pxrInternal__aapl__pxrReserved__::ArchReserveVirtualMemory(size_t this)
{
  double result = mmap(0, this, 0, 4098, -1, 0);
  if ((unint64_t)result + 1 < 2) {
    return 0;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchCommitVirtualMemoryRange(unint64_t this, void *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E2F8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_26798E2F8);
    if (v5)
    {
      qword_26798E2F0 = -(uint64_t)(int)pxrInternal__aapl__pxrReserved__::ArchGetPageSize(v5);
      __cxa_guard_release(&qword_26798E2F8);
    }
  }
  return mprotect((void *)(qword_26798E2F0 & this), (size_t)a2 + this - (qword_26798E2F0 & this), 3) == 0;
}

void sub_21683B908(_Unwind_Exception *a1)
{
}

BOOL pxrInternal__aapl__pxrReserved__::ArchFreeVirtualMemory(pxrInternal__aapl__pxrReserved__ *this, size_t a2)
{
  return munmap(this, a2) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchSetMemoryProtection(uint64_t a1, uint64_t a2, int a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E2F8, memory_order_acquire) & 1) == 0)
  {
    size_t v7 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_26798E2F8);
    if (v7)
    {
      qword_26798E2F0 = -(uint64_t)(int)pxrInternal__aapl__pxrReserved__::ArchGetPageSize(v7);
      __cxa_guard_release(&qword_26798E2F8);
    }
  }
  return mprotect((void *)(qword_26798E2F0 & a1), a1 + a2 - (qword_26798E2F0 & a1), dword_21740C080[a3]) == 0;
}

void sub_21683B9DC(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::ArchVStringPrintf(pxrInternal__aapl__pxrReserved__ *this, const char *a2, char *a3)
{
  double v3 = (const char *)MEMORY[0x270FA5388](this, a2, a3);
  uint64_t v5 = v4;
  uint64_t v18 = *MEMORY[0x263EF8340];
  va_list v15 = v6;
  va_list v16 = v6;
  int v7 = vsnprintf(__str, 0x1000uLL, v3, v6) + 1;
  if (v7 > 0x1000)
  {
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    BOOL v9 = 1;
    *(void *)(v5 + 16) = 0;
  }
  else
  {
    sub_216779094((void *)v5, __str);
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
    if (*(char *)(v5 + 23) < 0) {
      uint64_t v8 = *(void *)(v5 + 8);
    }
    BOOL v9 = v8 == 0;
  }
  size_t v10 = v7;
  if (v7) {
    BOOL v11 = !v9;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    uint64_t v12 = (char *)operator new[](v7);
    vsnprintf(v12, v10, v3, v15);
    sub_216779094(&v13, v12);
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    *(_OWORD *)uint64_t v5 = v13;
    *(void *)(v5 + 16) = v14;
    operator delete[](v12);
  }
}

void sub_21683BB3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchStringPrintf(pxrInternal__aapl__pxrReserved__ *this, const char *a2, char *a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::ArchVStringPrintf(this, va, a3);
}

void sub_21683BB90()
{
  sub_216779094(v15, "TF_MALLOC_TAG_CAPTURE");
  sub_216779094(__p, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v15, (uint64_t)__p, (uint64_t)v17);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
  sub_216779094(__p, "TF_MALLOC_TAG_DEBUG");
  sub_216779094(v11, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)__p, (uint64_t)v11, (uint64_t)v15);
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v0 = v18;
  if ((v18 & 0x80u) != 0) {
    unint64_t v0 = (unint64_t)v17[1];
  }
  if (!v0)
  {
    unint64_t v1 = v16;
    if ((v16 & 0x80u) != 0) {
      unint64_t v1 = (unint64_t)v15[1];
    }
    if (!v1)
    {
      sub_216779094(__p, "TF_MALLOC_TAG");
      BOOL v2 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
      BOOL v3 = v2;
      if (SHIBYTE(v14) < 0)
      {
        operator delete(__p[0]);
        if (!v3) {
          goto LABEL_30;
        }
      }
      else if (!v2)
      {
        goto LABEL_30;
      }
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  if (pxrInternal__aapl__pxrReserved__::TfMallocTag::Initialize((uint64_t)__p))
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::SetCapturedMallocStacksMatchList((uint64_t)v17, v4, v5);
    pxrInternal__aapl__pxrReserved__::TfMallocTag::SetDebugMatchList((uint64_t)v15, v6, v7);
  }
  else
  {
    uint64_t v8 = (FILE *)*MEMORY[0x263EF8348];
    pxrInternal__aapl__pxrReserved__::ArchGetExecutablePath(v11);
    if (v12 >= 0) {
      BOOL v9 = v11;
    }
    else {
      BOOL v9 = (void **)v11[0];
    }
    size_t v10 = __p;
    if (v14 < 0) {
      size_t v10 = (void **)__p[0];
    }
    fprintf(v8, "%s: TF_MALLOC_TAG environment variable set, but\n            malloc tag initialization failed: %s\n", (const char *)v9, (const char *)v10);
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
LABEL_30:
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
}

void sub_21683BD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 17) < 0) {
    operator delete(*(void **)(v28 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::BignumDtoa(uint64_t result, int a2, unsigned char *a3, uint64_t a4, int *a5, int *a6, double a7)
{
  unsigned int v12 = result;
  float v13 = a7;
  int v14 = ((*(void *)&a7 >> 52) & 0x7FF) - 1075;
  uint64_t v15 = *(void *)&a7 & 0xFFFFFFFFFFFFFLL;
  if ((*(void *)&a7 & 0x7FF0000000000000) != 0) {
    uint64_t v15 = *(void *)&a7 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  else {
    int v14 = -1074;
  }
  BOOL v16 = (*(void *)&a7 & 0x7FE0000000000000) != 0 && (*(void *)&a7 & 0xFFFFFFFFFFFFFLL) == 0;
  int v17 = (LODWORD(v13) >> 23) - 150;
  LODWORD(v18) = LODWORD(v13) & 0x7FFFFF;
  if ((LODWORD(v13) & 0x7F800000) != 0) {
    unint64_t v18 = LODWORD(v13) & 0x7FFFFF | 0x800000u;
  }
  else {
    unint64_t v18 = v18;
  }
  if ((LODWORD(v13) & 0x7F800000) == 0) {
    int v17 = -149;
  }
  BOOL v19 = (LODWORD(v13) & 0x7F000000) != 0 && (LODWORD(v13) & 0x7FFFFF) == 0;
  if (result == 1) {
    BOOL v20 = v19;
  }
  else {
    BOOL v20 = v16;
  }
  if (result == 1) {
    int v21 = v17;
  }
  else {
    int v21 = v14;
  }
  if (result == 1) {
    unint64_t v22 = v18;
  }
  else {
    unint64_t v22 = v15;
  }
  int v23 = v21 - __clz(v22 & 0xFFFFFFFFFFFFFLL) + 11;
  if ((v22 & 0x10000000000000) != 0) {
    int v23 = v21;
  }
  int v24 = vcvtpd_s64_f64((double)(v23 + 52) * 0.301029996 + -1.0e-10);
  if (result == 2 && ~v24 > a2)
  {
    *a3 = 0;
    *a5 = 0;
    *a6 = -a2;
    return result;
  }
  *(_DWORD *)long long v54 = 0;
  *(_DWORD *)long long v53 = 0;
  *(_DWORD *)long long v52 = 0;
  *(_DWORD *)unint64_t v51 = 0;
  if ((v21 & 0x80000000) == 0)
  {
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt64(v54, v22);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v54, v21);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignPowerUInt16(v53, 0xAu, v24);
    if (v12 > 1) {
      goto LABEL_44;
    }
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v53, 1);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v54, 1);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(v51, 1);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v51, v21);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(v52, 1);
    long long v26 = v52;
    int v27 = v21;
    goto LABEL_39;
  }
  if (v24 < 0)
  {
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignPowerUInt16((__int16 *)v54, 0xAu, -v24);
    if (v12 > 1)
    {
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt64(v54, v22);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(v53, 1);
      int v27 = -v21;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignBignum(v51, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignBignum(v52, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt64(v54, v22);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(v53, 1);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v53, -v21);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v54, 1);
      int v27 = 1;
    }
    long long v26 = v53;
LABEL_39:
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v26, v27);
    goto LABEL_40;
  }
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt64(v54, v22);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignPowerUInt16(v53, 0xAu, v24);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v53, -v21);
  if (v12 > 1) {
    goto LABEL_44;
  }
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v53, 1);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v54, 1);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(v51, 1);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(v52, 1);
LABEL_40:
  char v28 = !v20;
  if (v12 > 1) {
    char v28 = 1;
  }
  if ((v28 & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v53, 1);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v54, 1);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v51, 1);
  }
LABEL_44:
  double result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v51, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v53, v25);
  if ((v22 & 1) == 0)
  {
    if ((result & 0x80000000) != 0) {
      goto LABEL_46;
    }
LABEL_49:
    *a6 = v24 + 1;
    goto LABEL_50;
  }
  if ((int)result >= 1) {
    goto LABEL_49;
  }
LABEL_46:
  *a6 = v24;
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32((__int16 *)v54, 0xAu);
  int v31 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare((uint64_t)v52, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v51, v30);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(v52, 0xAu);
  if (v31) {
    double result = (uint64_t)pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(v51, 0xAu);
  }
  else {
    double result = (uint64_t)pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignBignum(v51, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v52);
  }
LABEL_50:
  if (v12 < 2)
  {
    uint64_t v33 = (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v52;
    int v34 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare((uint64_t)v52, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v51, v29);
    if (v34) {
      uint64_t v33 = (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v51;
    }
    int v35 = (v22 & 1) == 0;
    *a5 = 0;
    if (v22) {
      int v36 = 0;
    }
    else {
      int v36 = -1;
    }
    while (1)
    {
      char v37 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::DivideModuloIntBignum((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v53);
      uint64_t v38 = *a5;
      *a5 = v38 + 1;
      a3[v38] = v37 + 48;
      int v40 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare((uint64_t)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v52, v39);
      double result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, v33, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v53, v41);
      if (v40 < v35 || (int)result > v36) {
        break;
      }
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32((__int16 *)v54, 0xAu);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(v52, 0xAu);
      if (v34) {
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(v51, 0xAu);
      }
    }
    if (v40 >= v35 || (int)result <= v36)
    {
      if (v40 < v35) {
        goto LABEL_81;
      }
      uint64_t v48 = &a3[*a5];
      char v49 = *(v48 - 1);
      uint64_t v44 = v48 - 1;
      char v45 = v49;
    }
    else
    {
      double result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v53, v42);
      if ((result & 0x80000000) != 0) {
        goto LABEL_81;
      }
      uint64_t v43 = &a3[*a5];
      char v46 = *(v43 - 1);
      uint64_t v44 = v43 - 1;
      char v45 = v46;
      if (!result && (v45 & 1) == 0) {
        goto LABEL_81;
      }
    }
    unsigned char *v44 = v45 + 1;
    goto LABEL_81;
  }
  if (v12 != 2)
  {
    if (v12 != 3) {
      abort();
    }
    int v32 = a2;
    goto LABEL_80;
  }
  int v47 = -*a6;
  if (v47 <= a2)
  {
    if (v47 != a2)
    {
      int v32 = *a6 + a2;
LABEL_80:
      double result = sub_21683C340(v32, a6, (pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v53, a3, a4, a5);
      goto LABEL_81;
    }
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(v53, 0xAu);
    double result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v53, v50);
    if ((result & 0x80000000) == 0)
    {
      *a3 = 49;
      *a5 = 1;
      ++*a6;
      goto LABEL_81;
    }
  }
  else
  {
    *a6 = -a2;
  }
  *a5 = 0;
LABEL_81:
  a3[*a5] = 0;
  return result;
}

uint64_t sub_21683C340(int a1, _DWORD *a2, pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a4, unsigned char *a5, uint64_t a6, int *a7)
{
  uint64_t v13 = (a1 - 1);
  uint64_t v14 = (a1 - 2);
  if (a1 < 2)
  {
    char v24 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::DivideModuloIntBignum(this, a4);
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare(this, this, a4, v25);
    a5[(int)v13] = v24 + ((int)result >= 0) + 48;
  }
  else
  {
    uint64_t v15 = (a1 - 1);
    BOOL v16 = a5;
    do
    {
      *v16++ = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::DivideModuloIntBignum(this, a4) + 48;
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32((__int16 *)this, 0xAu);
      --v15;
    }
    while (v15);
    uint64_t v17 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::DivideModuloIntBignum(this, a4);
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare(this, this, a4, v18);
    a5[(int)v13] = v17 + ((int)result >= 0) + 48;
    BOOL v20 = &a5[v13];
    char v21 = a5[v13];
    unint64_t v22 = &a5[v14];
    int v23 = a1;
    do
    {
      if (v21 != 58) {
        break;
      }
      *v20-- = 48;
      char v21 = *v22 + 1;
      *v22-- = v21;
      --v23;
    }
    while (v23 > 1);
  }
  if (*a5 == 58)
  {
    *a5 = 49;
    ++*a2;
  }
  *a7 = a1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::RawBigit(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, int a2)
{
  return (uint64_t)this + 4 * a2 + 4;
}

{
  return (uint64_t)this + 4 * a2 + 4;
}

_DWORD *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(_DWORD *this, int a2)
{
  *this = 0;
  if (a2)
  {
    this[1] = a2;
    *(_WORD *)this = 1;
  }
  return this;
}

_DWORD *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt64(_DWORD *this, unint64_t a2)
{
  *this = 0;
  if (a2)
  {
    __int16 v2 = 0;
    uint64_t v3 = 1;
    do
    {
      this[v3] = a2 & 0xFFFFFFF;
      a2 >>= 28;
      ++v2;
      ++v3;
    }
    while (a2);
    *(_WORD *)this = v2;
  }
  return this;
}

_WORD *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignBignum(_WORD *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2)
{
  this[1] = *((_WORD *)a2 + 1);
  int v2 = *(__int16 *)a2;
  if (v2 >= 1)
  {
    uint64_t v3 = *(unsigned __int16 *)a2;
    uint64_t v4 = this + 2;
    uint64_t v5 = (int *)((char *)a2 + 4);
    do
    {
      int v6 = *v5++;
      *v4++ = v6;
      --v3;
    }
    while (v3);
  }
  *this = v2;
  return this;
}

void pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignDecimalString(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, uint64_t a2, int a3)
{
  int v3 = a3;
  *(_DWORD *)this = 0;
  if (a3 < 19)
  {
    unsigned int v6 = 0;
    int v10 = a3;
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v7 = a2;
    do
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
        unint64_t v9 = *(char *)(v7 + v8++) + 10 * v9 - 48;
      while (v8 != 19);
      v6 += 19;
      int v10 = v3 - 19;
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByPowerOfTen((unsigned __int16 *)this, 19);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AddUInt64(this, v9);
      v7 += 19;
      BOOL v11 = v3 <= 37;
      v3 -= 19;
    }
    while (!v11);
  }
  if (v10 < 1)
  {
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v13 = v6;
    do
      unint64_t v12 = *(char *)(a2 + v13++) + 10 * v12 - 48;
    while (v13 < (int)(v10 + v6));
  }
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByPowerOfTen((unsigned __int16 *)this, v10);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AddUInt64(this, v12);
  int v14 = *(__int16 *)this;
  if (v14 < 1)
  {
    if (!*(_WORD *)this) {
LABEL_19:
    }
      *((_WORD *)this + 1) = 0;
  }
  else
  {
    while (!*((_DWORD *)this + (unsigned __int16)v14))
    {
      int v15 = (__int16)v14;
      LOWORD(v14) = v14 - 1;
      *(_WORD *)this = v14;
      if (v15 <= 1) {
        goto LABEL_19;
      }
    }
  }
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByPowerOfTen(unsigned __int16 *this, int a2)
{
  if (a2)
  {
    int v2 = this;
    if (*this)
    {
      int v4 = a2;
      if (a2 >= 27)
      {
        unsigned int v5 = a2;
        do
        {
          pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt64(v2, 0x6765C793FA10079DuLL);
          int v4 = v5 - 27;
          BOOL v6 = v5 > 0x35;
          v5 -= 27;
        }
        while (v6);
      }
      if (v4 < 13)
      {
        int v7 = v4;
      }
      else
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32((__int16 *)v2, 0x48C27395u);
          int v7 = v4 - 13;
          BOOL v6 = v4 > 0x19;
          v4 -= 13;
        }
        while (v6);
      }
      BOOL v8 = __OFSUB__(v7, 1);
      int v9 = v7 - 1;
      if (v9 < 0 == v8) {
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32((__int16 *)v2, dword_21740C0A0[v9]);
      }
      return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v2, a2);
    }
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AddUInt64(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, unint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = 0;
    v3[0] = 0;
    do
    {
      v3[v2 + 1] = a2 & 0xFFFFFFF;
      a2 >>= 28;
      ++v2;
    }
    while (a2);
    LOWORD(v3[0]) = v2;
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AddBignum(this, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v3);
  }
}

__int16 *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Clamp(__int16 *this)
{
  int v1 = *this;
  if (v1 < 1)
  {
    if (!*this) {
LABEL_7:
    }
      this[1] = 0;
  }
  else
  {
    while (!*(_DWORD *)&this[2 * (unsigned __int16)v1])
    {
      int v2 = (__int16)v1;
      LOWORD(v1) = v1 - 1;
      *this = v1;
      if (v2 <= 1) {
        goto LABEL_7;
      }
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignHexString(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)uint64_t result = 0;
  if (a3 > 896) {
    abort();
  }
  if (!a3)
  {
LABEL_19:
    *(_WORD *)(result + 2) = 0;
    return result;
  }
  unsigned __int16 v3 = 0;
  int v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = a3 - 1;
  do
  {
    int v7 = *(char *)(a2 + v6);
    uint64_t v8 = (v7 - 48);
    unsigned int v9 = v7 - 97;
    uint64_t v10 = (v7 - 87);
    if (v9 > 5) {
      uint64_t v10 = *(char *)(a2 + v6) - 55;
    }
    if (v8 <= 9) {
      uint64_t v10 = v8;
    }
    v5 |= v10 << v4;
    if (v4 < 24)
    {
      v4 += 4;
    }
    else
    {
      uint64_t v11 = result + 4 * (__int16)v3++;
      *(_WORD *)uint64_t result = v3;
      *(_DWORD *)(v11 + 4) = v5 & 0xFFFFFFF;
      v5 >>= 28;
      v4 -= 24;
    }
  }
  while (v6--);
  if (v5)
  {
    uint64_t v13 = result + 4 * (__int16)v3++;
    *(_WORD *)uint64_t result = v3;
    *(_DWORD *)(v13 + 4) = v5 & 0xFFFFFFF;
  }
  if ((__int16)v3 < 1)
  {
    if (v3) {
      return result;
    }
    goto LABEL_19;
  }
  while (!*(_DWORD *)(result + 4 * (v3 - 1) + 4))
  {
    int v14 = (__int16)v3--;
    *(_WORD *)uint64_t result = v3;
    if (v14 <= 1) {
      goto LABEL_19;
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AddBignum(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2)
{
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Align(this, a2);
  int v4 = *(__int16 *)this;
  int v5 = *((__int16 *)this + 1);
  int v6 = v5 + v4;
  uint64_t v7 = *(__int16 *)a2;
  int v8 = *((__int16 *)a2 + 1);
  if (v5 + v4 <= v8 + (int)v7) {
    int v6 = v8 + v7;
  }
  if (v6 - v5 >= 128) {
    abort();
  }
  int v9 = v8 - v5;
  if (v8 - v5 > v4) {
    bzero((char *)this + 4 * *(__int16 *)this + 4, 4 * (~v5 + v8 - *(__int16 *)this) + 4);
  }
  if ((int)v7 >= 1)
  {
    unsigned int v10 = 0;
    uint64_t v11 = (char *)this + 4;
    uint64_t v12 = v9;
    uint64_t v13 = (int *)((char *)a2 + 4);
    do
    {
      if (v12 >= v4) {
        int v14 = 0;
      }
      else {
        int v14 = *(_DWORD *)&v11[4 * v12];
      }
      int v15 = *v13++;
      unsigned int v16 = v14 + v10 + v15;
      *(_DWORD *)&v11[4 * v12] = v16 & 0xFFFFFFF;
      unsigned int v10 = v16 >> 28;
      ++v12;
      --v7;
    }
    while (v7);
    if (v10)
    {
      uint64_t v17 = (char *)this + 4;
      do
      {
        if (v12 >= v4) {
          int v18 = 0;
        }
        else {
          int v18 = *(_DWORD *)&v17[4 * v12];
        }
        unsigned int v19 = v18 + v10;
        *(_DWORD *)&v17[4 * v12] = v19 & 0xFFFFFFF;
        unsigned int v10 = v19 >> 28;
        ++v12;
      }
      while (v10);
    }
    int v9 = v12;
  }
  if (v9 <= v4) {
    __int16 v20 = v4;
  }
  else {
    __int16 v20 = v9;
  }
  *(_WORD *)this = v20;
}

void pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Align(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2)
{
  int v2 = *((__int16 *)this + 1);
  int v3 = *((__int16 *)a2 + 1);
  int v4 = v2 - v3;
  if (v2 > v3)
  {
    int v6 = *(__int16 *)this;
    if (v4 + v6 > 128) {
      abort();
    }
    int v7 = *(unsigned __int16 *)this;
    if ((__int16)v6 >= 1)
    {
      uint64_t v8 = 4 * (v2 + v7 - v3);
      unint64_t v9 = *(unsigned __int16 *)this;
      do
      {
        *(_DWORD *)((char *)this + v8) = *((_DWORD *)this + v9);
        v8 -= 4;
      }
      while (v9-- > 1);
    }
    if (v4 >= 1) {
      bzero((char *)this + 4, 4 * (~v3 + v2) + 4);
    }
    *(_WORD *)this = v7 + v4;
    *((_WORD *)this + 1) = v2 - v4;
  }
}

void pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::SubtractBignum(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2)
{
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Align(this, a2);
  uint64_t v4 = *(__int16 *)a2;
  if (v4 >= 1)
  {
    int v5 = 0;
    int v6 = *((__int16 *)a2 + 1);
    int v7 = *((__int16 *)this + 1);
    uint64_t v8 = v4;
    unint64_t v9 = (int *)((char *)this + 4 * (v6 - v7) + 4);
    unsigned int v10 = (int *)((char *)a2 + 4);
    do
    {
      int v11 = *v10++;
      int v12 = *v9 + v5 - v11;
      *v9++ = v12 & 0xFFFFFFF;
      int v5 = v12 >> 31;
      --v8;
    }
    while (v8);
    if (v12 < 0)
    {
      int v13 = v4 + v6 - v7;
      do
      {
        int v14 = (char *)this + 4 * v13++;
        int v15 = *((_DWORD *)v14 + 1) - 1;
        *((_DWORD *)v14 + 1) = v15 & 0xFFFFFFF;
      }
      while (v15 < 0);
    }
  }
  int v16 = *(__int16 *)this;
  if (v16 < 1)
  {
    if (!*(_WORD *)this) {
LABEL_12:
    }
      *((_WORD *)this + 1) = 0;
  }
  else
  {
    while (!*((_DWORD *)this + (unsigned __int16)v16))
    {
      int v17 = (__int16)v16;
      LOWORD(v16) = v16 - 1;
      *(_WORD *)this = v16;
      if (v17 <= 1) {
        goto LABEL_12;
      }
    }
  }
}

_WORD *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(_WORD *this, int a2)
{
  int v2 = (__int16)*this;
  if (*this)
  {
    this[1] += a2 / 28;
    if (v2 >= 128) {
      abort();
    }
    char v3 = a2 % 28;
    return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::BigitsShiftLeft(this, v3);
  }
  return this;
}

_WORD *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::BigitsShiftLeft(_WORD *this, char a2)
{
  if ((__int16)*this >= 1)
  {
    uint64_t v2 = 0;
    unsigned int v3 = 0;
    uint64_t v4 = (unsigned __int16)*this;
    do
    {
      unsigned int v5 = *(_DWORD *)&this[v2 + 2];
      unsigned int v6 = (v5 << a2) + v3;
      unsigned int v3 = v5 >> (28 - a2);
      *(_DWORD *)&this[v2 + 2] = v6 & 0xFFFFFFF;
      v2 += 2;
    }
    while (2 * v4 != v2);
    if (v3)
    {
      *(_DWORD *)&this[2 * (__int16)v4 + 2] = v3;
      *this = v4 + 1;
    }
  }
  return this;
}

__int16 *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(__int16 *this, unsigned int a2)
{
  if (a2 != 1)
  {
    if (a2)
    {
      int v2 = *this;
      if (v2 >= 1)
      {
        uint64_t v3 = 0;
        unint64_t v4 = 0;
        do
        {
          unint64_t v5 = v4 + *(unsigned int *)&this[v3 + 2] * (unint64_t)a2;
          *(_DWORD *)&this[v3 + 2] = v5 & 0xFFFFFFF;
          unint64_t v4 = v5 >> 28;
          v3 += 2;
        }
        while (2 * (unsigned __int16)v2 != v3);
        for (; v4; v4 >>= 28)
        {
          if ((__int16)v2 >= 128) {
            abort();
          }
          *(_DWORD *)&this[2 * (__int16)v2 + 2] = v4 & 0xFFFFFFF;
          LOWORD(v2) = v2 + 1;
          *this = v2;
        }
      }
    }
    else
    {
      *(_DWORD *)this = 0;
    }
  }
  return this;
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt64(unsigned __int16 *this, unint64_t a2)
{
  if (a2 != 1)
  {
    if (a2)
    {
      uint64_t v2 = *this;
      unsigned __int16 v3 = *this;
      if (*this) {
        BOOL v4 = (__int16)v2 < 1;
      }
      else {
        BOOL v4 = 1;
      }
      if (!v4)
      {
        unint64_t v5 = 0;
        unint64_t v6 = 0;
        uint64_t v7 = 4 * v2;
        do
        {
          uint64_t v8 = *(unsigned int *)&this[v5 / 2 + 2];
          unint64_t v9 = (v6 & 0xFFFFFFF) + a2 * (unint64_t)v8;
          *(_DWORD *)&this[v5 / 2 + 2] = v9 & 0xFFFFFFF;
          unint64_t v6 = ((a2 >> 28) & 0xFFFFFFFF0) * v8 + (v6 >> 28) + (v9 >> 28);
          v5 += 4;
        }
        while (v7 != v5);
        for (; v6; v6 >>= 28)
        {
          if ((__int16)v3 >= 128) {
            abort();
          }
          *(_DWORD *)&this[2 * (__int16)v3++ + 2] = v6 & 0xFFFFFFF;
          *this = v3;
        }
      }
    }
    else
    {
      *(_DWORD *)this = 0;
    }
  }
  return this;
}

__int16 *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Square(__int16 *this)
{
  uint64_t v1 = *this;
  if ((int)v1 > 64) {
    abort();
  }
  uint64_t v2 = *this;
  uint64_t v3 = 2 * v2;
  if ((int)v1 < 1)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v4 = (unsigned __int16)*this;
    unint64_t v5 = this + 2;
    uint64_t v6 = *this;
    do
    {
      v5[v4] = *v5;
      ++v5;
      --v6;
    }
    while (v6);
    unint64_t v7 = 0;
    uint64_t v8 = 4;
    unint64_t v9 = &this[2 * v4];
    do
    {
      uint64_t v10 = 2;
      uint64_t v11 = v8;
      do
      {
        v7 += *(unsigned int *)&v9[v10] * (unint64_t)*(unsigned int *)((char *)v9 + v11);
        v10 += 2;
        v11 -= 4;
      }
      while (v11);
      *(_DWORD *)&this[2 * v6 + 2] = v7 & 0xFFFFFFF;
      v7 >>= 28;
      ++v6;
      v8 += 4;
    }
    while (v6 != v1);
  }
  if ((int)v3 > (int)v1)
  {
    uint64_t v12 = (uint64_t)&this[2 * (int)v1 + 4];
    uint64_t v13 = 1;
    do
    {
      if (v2 < 2 * (int)v1 - 1)
      {
        uint64_t v14 = v1;
        int v15 = (unsigned int *)v12;
        int v16 = &this[4 * (int)v1];
        do
        {
          unsigned int v18 = *(_DWORD *)v16;
          v16 -= 2;
          unsigned int v17 = v18;
          unsigned int v19 = *v15++;
          v7 += v19 * (unint64_t)v17;
          --v14;
        }
        while (v13 != v14);
      }
      *(_DWORD *)&this[2 * v2 + 2] = v7 & 0xFFFFFFF;
      v7 >>= 28;
      ++v2;
      ++v13;
      v12 += 4;
    }
    while (v2 != v3);
  }
  *this = v3;
  this[1] *= 2;
  if ((__int16)v3 < 1)
  {
    if (!(2 * (_WORD)v1)) {
LABEL_22:
    }
      this[1] = 0;
  }
  else
  {
    while (!*(_DWORD *)&this[2 * (unsigned __int16)v3])
    {
      int v20 = (__int16)v3;
      LOWORD(v3) = v3 - 1;
      *this = v3;
      if (v20 <= 1) {
        goto LABEL_22;
      }
    }
  }
  return this;
}

__int16 *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignPowerUInt16(__int16 *this, unsigned int a2, int a3)
{
  uint64_t v3 = this;
  if (a3)
  {
    unsigned int v5 = a2;
    *(_DWORD *)this = 0;
    int v6 = 0;
    if ((a2 & 1) == 0)
    {
      do
      {
        unsigned int v7 = v5 >> 1;
        unsigned int v5 = (unsigned __int16)v5 >> 1;
        ++v6;
      }
      while ((v7 & 1) == 0);
    }
    int v8 = 0;
    char v9 = 64;
    unsigned int v10 = v5;
    do
    {
      --v9;
      v8 += a3;
      BOOL v11 = v10 > 1;
      v10 >>= 1;
    }
    while (v11);
    if (v8 > 3555) {
      abort();
    }
    int v12 = 1;
    do
    {
      int v13 = v12;
      v12 *= 2;
    }
    while (v13 <= a3);
    int v14 = v13 >> 2;
    if (v13 >= 4)
    {
      int v15 = 0;
      uint64_t v17 = -1 << v9;
      unint64_t v16 = v5;
      do
      {
        unsigned int v18 = v14;
        v16 *= v16;
        if ((v16 & v17) != 0) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = v5;
        }
        uint64_t v20 = v19 * v16;
        int v21 = ((v16 & v17) != 0) | v15;
        if ((v14 & a3) != 0)
        {
          unint64_t v16 = v20;
          int v15 = v21;
        }
        v14 >>= 1;
      }
      while (v18 >= 2 && !HIDWORD(v16));
    }
    else
    {
      LOBYTE(v15) = 0;
      unint64_t v16 = v5;
    }
    if (v16)
    {
      uint64_t v22 = 0;
      do
      {
        *(_DWORD *)&this[2 * v22 + 2] = v16 & 0xFFFFFFF;
        v16 >>= 28;
        ++v22;
      }
      while (v16);
      *this = v22;
    }
    if (v15) {
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(this, v5);
    }
    if (v14)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Square(v3);
        if ((v14 & a3) != 0) {
          pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(v3, v5);
        }
        BOOL v11 = v14 > 1;
        v14 >>= 1;
      }
      while (v11);
    }
    return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v3, v6 * a3);
  }
  else
  {
    *(void *)this = 0x100000001;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::DivideModuloIntBignum(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2)
{
  if (*((__int16 *)this + 1) + *(__int16 *)this >= *((__int16 *)a2 + 1) + *(__int16 *)a2)
  {
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Align(this, a2);
    int v6 = *(__int16 *)this;
    int v7 = *(__int16 *)a2;
    if (*((__int16 *)this + 1) + v6 <= *((__int16 *)a2 + 1) + v7)
    {
      int v2 = 0;
    }
    else
    {
      int v2 = 0;
      do
      {
        int v8 = *((_DWORD *)this + v6);
        v2 += v8;
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::SubtractTimes(this, a2, v8);
        int v6 = *(__int16 *)this;
        int v7 = *(__int16 *)a2;
      }
      while (*((__int16 *)this + 1) + v6 > *((__int16 *)a2 + 1) + v7);
    }
    int v9 = (unsigned __int16)v6;
    unsigned int v10 = (unsigned int *)((char *)this + 4 * v6);
    unsigned int v11 = *v10;
    unsigned int v12 = *((_DWORD *)a2 + v7);
    if ((unsigned __int16)v7 == 1)
    {
      unsigned int *v10 = v11 % v12;
      v2 += v11 / v12;
      if ((__int16)v9 < 1)
      {
        if (!v9) {
LABEL_19:
        }
          *((_WORD *)this + 1) = 0;
      }
      else
      {
        while (!*((_DWORD *)this + (unsigned __int16)v9))
        {
          int v13 = (__int16)v9;
          LOWORD(v9) = v9 - 1;
          *(_WORD *)this = v9;
          if (v13 <= 1) {
            goto LABEL_19;
          }
        }
      }
    }
    else
    {
      unsigned int v14 = v11 / (v12 + 1);
      LOWORD(v2) = v2 + v14;
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::SubtractTimes(this, a2, v14);
      if (v12 + v12 * v14 <= v11
        && (int)pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare((uint64_t)a2, this, v15) <= 0)
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::SubtractBignum(this, a2);
          LOWORD(v2) = v2 + 1;
        }
        while ((int)pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare((uint64_t)a2, this, v16) < 1);
      }
    }
  }
  else
  {
    LOWORD(v2) = 0;
  }
  return (unsigned __int16)v2;
}

void pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::SubtractTimes(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2, int a3)
{
  int v3 = a3;
  if (a3 > 2)
  {
    int v6 = *((__int16 *)a2 + 1) - *((__int16 *)this + 1);
    int v7 = *(__int16 *)a2;
    if (v7 < 1)
    {
      unsigned int v8 = 0;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = (int *)((char *)this + 4 * v6 + 4);
      unsigned int v10 = (unsigned int *)((char *)a2 + 4);
      uint64_t v11 = *(__int16 *)a2;
      do
      {
        unsigned int v12 = *v10++;
        unint64_t v13 = v12 * (unint64_t)a3 + v8;
        unsigned int v14 = *v9 - (v13 & 0xFFFFFFF);
        *v9++ = v14 & 0xFFFFFFF;
        unsigned int v8 = (v13 >> 28) + (v14 >> 31);
        --v11;
      }
      while (v11);
    }
    LODWORD(v15) = v6 + v7;
    uint64_t v16 = *(__int16 *)this;
    if ((int)v15 >= (int)v16)
    {
LABEL_14:
      if ((int)v16 < 1)
      {
        if (!v16) {
LABEL_19:
        }
          *((_WORD *)this + 1) = 0;
      }
      else
      {
        while (!*((_DWORD *)this + (unsigned __int16)v16))
        {
          int v19 = (__int16)v16;
          LOWORD(v16) = v16 - 1;
          *(_WORD *)this = v16;
          if (v19 <= 1) {
            goto LABEL_19;
          }
        }
      }
    }
    else
    {
      uint64_t v15 = (int)v15;
      uint64_t v17 = (char *)this + 4;
      while (v8)
      {
        unsigned int v18 = *(_DWORD *)&v17[4 * v15] - v8;
        *(_DWORD *)&v17[4 * v15] = v18 & 0xFFFFFFF;
        unsigned int v8 = v18 >> 31;
        if (++v15 >= v16) {
          goto LABEL_14;
        }
      }
    }
  }
  else if (a3 >= 1)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::SubtractBignum(this, a2);
      --v3;
    }
    while (v3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ToHexString(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, char *a2, int a3)
{
  int v3 = *(__int16 *)this;
  if (*(_WORD *)this)
  {
    int v4 = 7 * (*((__int16 *)this + 1) + v3) - 7;
    unsigned int v5 = *((_DWORD *)this + v3);
    if (v5)
    {
      int v6 = 0;
      do
      {
        ++v6;
        BOOL v7 = v5 > 0xF;
        v5 >>= 4;
      }
      while (v7);
    }
    else
    {
      int v6 = 0;
    }
    int v8 = v4 + v6;
    if (v4 + v6 < a3)
    {
      int v9 = v8 - 1;
      a2[v8] = 0;
      if (*((__int16 *)this + 1) >= 1)
      {
        int v10 = 0;
        uint64_t v11 = &a2[v9 - 6];
        do
        {
          *(_DWORD *)(v11 + 3) = 808464432;
          *(_DWORD *)uint64_t v11 = 808464432;
          v11 -= 7;
          ++v10;
          v9 -= 7;
        }
        while (v10 < *((__int16 *)this + 1));
      }
      uint64_t v12 = *(__int16 *)this;
      if (v12 < 2)
      {
        uint64_t v18 = v12 - 1;
      }
      else
      {
        uint64_t v13 = 0;
        do
        {
          int v14 = 0;
          unsigned int v15 = *((_DWORD *)this + v13 + 1);
          uint64_t v16 = &a2[v9];
          do
          {
            if ((v15 & 0xF) >= 0xA) {
              char v17 = 55;
            }
            else {
              char v17 = 48;
            }
            *v16-- = v17 + (v15 & 0xF);
            v15 >>= 4;
            ++v14;
          }
          while (v14 != 7);
          v9 -= 7;
          ++v13;
          uint64_t v18 = *(__int16 *)this - 1;
        }
        while (v13 < v18);
      }
      unsigned int v20 = *((_DWORD *)this + v18 + 1);
      if (v20)
      {
        int v21 = &a2[v9];
        do
        {
          if ((v20 & 0xF) >= 0xA) {
            char v22 = 55;
          }
          else {
            char v22 = 48;
          }
          *v21-- = v22 + (v20 & 0xF);
          BOOL v7 = v20 > 0xF;
          v20 >>= 4;
        }
        while (v7);
      }
      return 1;
    }
    return 0;
  }
  if (a3 < 2) {
    return 0;
  }
  *(_WORD *)a2 = 48;
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::BigitOrZero(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, int a2)
{
  int v2 = *((__int16 *)this + 1);
  if (a2 < v2 || v2 + *(__int16 *)this <= a2) {
    return 0;
  }
  else {
    return *((unsigned int *)this + a2 - v2 + 1);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare(uint64_t this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a3)
{
  uint64_t v3 = *(__int16 *)this;
  uint64_t v4 = *(__int16 *)(this + 2);
  uint64_t v5 = v4 + v3;
  uint64_t v6 = *((__int16 *)a2 + 1);
  uint64_t v7 = v6 + *(__int16 *)a2;
  if ((int)v4 + (int)v3 < (int)v7) {
    return 0xFFFFFFFFLL;
  }
  if ((int)v4 + (int)v3 > (int)v7) {
    return 1;
  }
  if ((int)v6 >= (int)v4) {
    int v8 = *(__int16 *)(this + 2);
  }
  else {
    int v8 = *((__int16 *)a2 + 1);
  }
  uint64_t v9 = v3 + v4;
  int v10 = (unsigned int *)(this + 4 * v3);
  while (v9 > v8)
  {
    unsigned int v11 = 0;
    if (v9 > v4 && v9 <= v5) {
      unsigned int v11 = *v10;
    }
    unsigned int v12 = 0;
    if (v9 > v6 && v9 <= v7) {
      unsigned int v12 = *((_DWORD *)a2 + v9 - v6);
    }
    --v10;
    --v9;
    BOOL v13 = v11 >= v12;
    BOOL v14 = v11 == v12;
    if (v11 > v12) {
      unsigned int v15 = 1;
    }
    else {
      unsigned int v15 = this;
    }
    if (v13) {
      this = v15;
    }
    else {
      this = 0xFFFFFFFFLL;
    }
    if (!v14) {
      return this;
    }
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a3, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a4)
{
  __int16 v4 = *(_WORD *)this;
  __int16 v5 = *((_WORD *)this + 1);
  do
  {
    uint64_t v6 = (__int16 *)a2;
    a2 = this;
    int v7 = v5;
    int v8 = v5 + v4;
    __int16 v4 = *v6;
    int v9 = v6[1];
    __int16 v5 = v6[1];
    int v10 = v9 + *v6;
    this = (pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v6;
  }
  while (v8 < v10);
  uint64_t v11 = *(__int16 *)a3;
  uint64_t v12 = *((__int16 *)a3 + 1);
  uint64_t v13 = v12 + v11;
  if (v8 + 1 < (int)v12 + (int)v11) {
    return 0xFFFFFFFFLL;
  }
  if (v8 > (int)v13) {
    return 1;
  }
  if (v10 <= v7 && v8 < (int)v13) {
    return 0xFFFFFFFFLL;
  }
  __int16 v15 = *((_WORD *)a2 + 1);
  if (v9 < v7) {
    __int16 v15 = v6[1];
  }
  if ((int)v12 >= v15) {
    LODWORD(v16) = v15;
  }
  else {
    LODWORD(v16) = *((__int16 *)a3 + 1);
  }
  if ((int)v13 > (int)v16)
  {
    unsigned int v17 = 0;
    uint64_t v18 = v7;
    uint64_t v19 = v11 + v12;
    uint64_t v16 = (__int16)v16;
    unsigned int v20 = (int *)((char *)a3 + 4 * v11);
    int v21 = &v6[-2 * v6[1]];
    char v22 = (char *)a2 - 4 * v7;
    while (1)
    {
      int v23 = 0;
      if (v19 > v18 && v19 <= v8) {
        int v23 = *(_DWORD *)&v22[4 * v19];
      }
      int v24 = 0;
      if (v19 > v9 && v19 <= v10) {
        int v24 = *(_DWORD *)&v21[2 * v19];
      }
      int v25 = 0;
      if (v19 > v12 && v19 <= v13) {
        int v25 = *v20;
      }
      unsigned int v26 = v24 + v23;
      unsigned int v27 = v25 + v17;
      unsigned int v28 = v25 + v17 - v26;
      if (v27 < v26) {
        break;
      }
      if (v28 > 1) {
        return 0xFFFFFFFFLL;
      }
      --v19;
      unsigned int v17 = v28 << 28;
      --v20;
      if (v19 <= v16)
      {
        if (v27 == v26) {
          return 0;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::PowersOfTenCache::GetCachedPowerForBinaryExponentRange(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  signed int v4 = vcvtpd_s64_f64((double)((int)result + 63) * 0.301029996);
  int v6 = v4 + 347;
  BOOL v5 = v4 < -347;
  int v7 = v4 + 354;
  if (!v5) {
    int v7 = v6;
  }
  int v8 = (char *)&unk_21740C0D0 + 16 * (v7 >> 3);
  uint64_t v9 = *((void *)v8 + 2);
  int v10 = *((__int16 *)v8 + 12);
  *a4 = *((__int16 *)v8 + 13);
  *(void *)a3 = v9;
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::PowersOfTenCache::GetCachedPowerForDecimalExponent(uint64_t result, uint64_t a2, _DWORD *a3)
{
  int v3 = result + 348;
  if ((int)result < -348) {
    int v3 = result + 355;
  }
  signed int v4 = (char *)&unk_21740C0D0 + 16 * (v3 >> 3);
  uint64_t v5 = *(void *)v4;
  int v6 = *((__int16 *)v4 + 4);
  LODWORD(v4) = *((__int16 *)v4 + 5);
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *a3 = v4;
  return result;
}

int *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::EcmaScriptConverter(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E330, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E330))
  {
    dword_26798E300 = 9;
    qword_26798E308 = (uint64_t)"Infinity";
    unk_26798E310 = "NaN";
    byte_26798E318 = 101;
    unk_26798E31C = xmmword_21740C640;
    dword_26798E32C = 0;
    __cxa_guard_release(&qword_26798E330);
  }
  return &dword_26798E300;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::HandleSpecialValues(uint64_t a1, uint64_t a2, double a3)
{
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
  {
    signed int v4 = *(const char **)(a1 + 8);
    if (v4)
    {
      if (a3 < 0.0)
      {
        uint64_t v5 = *(int *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = v5 + 1;
        *(unsigned char *)(*(void *)a2 + v5) = 45;
        signed int v4 = *(const char **)(a1 + 8);
      }
      goto LABEL_8;
    }
    return 0;
  }
  uint64_t v6 = 0;
  if ((~*(void *)&a3 & 0x7FF0000000000000) == 0 && (*(void *)&a3 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    signed int v4 = *(const char **)(a1 + 16);
    if (v4)
    {
LABEL_8:
      int v7 = strlen(v4);
      memmove((void *)(*(void *)a2 + *(int *)(a2 + 16)), v4, v7);
      *(_DWORD *)(a2 + 16) += v7;
      return 1;
    }
    return 0;
  }
  return v6;
}

void *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateExponentialRepresentation(uint64_t a1, char *a2, int a3, unsigned int a4, uint64_t a5)
{
  char v8 = *a2;
  uint64_t v9 = *(int *)(a5 + 16);
  *(_DWORD *)(a5 + 16) = v9 + 1;
  *(unsigned char *)(*(void *)a5 + v9) = v8;
  int v10 = a3 - 1;
  if (a3 == 1)
  {
    int v11 = *(_DWORD *)(a5 + 16);
    if ((*(unsigned char *)a1 & 0x20) != 0)
    {
      *(_DWORD *)(a5 + 16) = v11 + 1;
      *(unsigned char *)(*(void *)a5 + v11) = 46;
      int v12 = *(_DWORD *)(a5 + 16);
      int v11 = v12;
      if ((*(unsigned char *)a1 & 0x40) != 0)
      {
        *(_DWORD *)(a5 + 16) = v12 + 1;
        *(unsigned char *)(*(void *)a5 + v12) = 48;
        int v11 = *(_DWORD *)(a5 + 16);
      }
    }
  }
  else
  {
    uint64_t v13 = *(int *)(a5 + 16);
    *(_DWORD *)(a5 + 16) = v13 + 1;
    *(unsigned char *)(*(void *)a5 + v13) = 46;
    memmove((void *)(*(void *)a5 + *(int *)(a5 + 16)), a2 + 1, v10);
    int v11 = *(_DWORD *)(a5 + 16) + v10;
  }
  char v14 = *(unsigned char *)(a1 + 24);
  *(_DWORD *)(a5 + 16) = v11 + 1;
  *(unsigned char *)(*(void *)a5 + v11) = v14;
  if ((a4 & 0x80000000) != 0)
  {
    uint64_t v17 = *(int *)(a5 + 16);
    *(_DWORD *)(a5 + 16) = v17 + 1;
    *(unsigned char *)(*(void *)a5 + v17) = 45;
    a4 = -a4;
    char v26 = 0;
LABEL_12:
    uint64_t v18 = 4;
    do
    {
      v25[v18--] = (a4 % 0xA) | 0x30;
      BOOL v19 = a4 > 9;
      a4 /= 0xAu;
    }
    while (v19);
    int v16 = v18 + 1;
    goto LABEL_15;
  }
  if (*(unsigned char *)a1)
  {
    uint64_t v15 = *(int *)(a5 + 16);
    *(_DWORD *)(a5 + 16) = v15 + 1;
    *(unsigned char *)(*(void *)a5 + v15) = 43;
  }
  char v26 = 0;
  if (a4) {
    goto LABEL_12;
  }
  v25[4] = 48;
  int v16 = 4;
LABEL_15:
  if (*(int *)(a1 + 44) >= 5) {
    int v20 = 5;
  }
  else {
    int v20 = *(_DWORD *)(a1 + 44);
  }
  int v21 = 5 - v16;
  if (5 - v16 < v20)
  {
    memset(&v25[v16 - 1 - (v16 + v20 - 6)], 48, (v16 + v20 - 6) + 1);
    uint64_t v22 = 5 - v16;
    uint64_t v23 = 6 - v16;
    if (v20 > v23) {
      LODWORD(v23) = v20;
    }
    int v16 = 5 - v23;
    do
      ++v22;
    while (v22 < v20);
    int v21 = v23;
  }
  uint64_t result = memcpy((void *)(*(void *)a5 + *(int *)(a5 + 16)), &v25[v16], v21);
  *(_DWORD *)(a5 + 16) += v21;
  return result;
}

int *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateDecimalRepresentation(int *result, char *__src, int a3, size_t __len, int a5, uint64_t a6)
{
  int v8 = __len;
  int v11 = result;
  if ((int)__len <= 0)
  {
    uint64_t v18 = *(int *)(a6 + 16);
    *(_DWORD *)(a6 + 16) = v18 + 1;
    *(unsigned char *)(*(void *)a6 + v18) = 48;
    if (a5 >= 1)
    {
      uint64_t v19 = *(int *)(a6 + 16);
      *(_DWORD *)(a6 + 16) = v19 + 1;
      *(unsigned char *)(*(void *)a6 + v19) = 46;
      if (__len)
      {
        int v20 = __len;
        do
        {
          uint64_t v21 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v21 + 1;
          *(unsigned char *)(*(void *)a6 + v21) = 48;
        }
        while (!__CFADD__(v20++, 1));
      }
      uint64_t result = (int *)memmove((void *)(*(void *)a6 + *(int *)(a6 + 16)), __src, a3);
      *(_DWORD *)(a6 + 16) += a3;
      int v23 = v8 - a3 + a5;
      if (v23 >= 1)
      {
        do
        {
          uint64_t v24 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v24 + 1;
          *(unsigned char *)(*(void *)a6 + v24) = 48;
          --v23;
        }
        while (v23);
      }
    }
  }
  else
  {
    int v12 = (void *)(*(void *)a6 + *(int *)(a6 + 16));
    int v13 = __len - a3;
    if ((int)__len >= a3)
    {
      uint64_t result = (int *)memmove(v12, __src, a3);
      *(_DWORD *)(a6 + 16) += a3;
      if (v13 >= 1)
      {
        do
        {
          uint64_t v25 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v25 + 1;
          *(unsigned char *)(*(void *)a6 + v25) = 48;
          --v13;
        }
        while (v13);
      }
      if (a5 >= 1)
      {
        uint64_t v26 = *(int *)(a6 + 16);
        *(_DWORD *)(a6 + 16) = v26 + 1;
        *(unsigned char *)(*(void *)a6 + v26) = 46;
        int v27 = a5;
        do
        {
          uint64_t v28 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v28 + 1;
          *(unsigned char *)(*(void *)a6 + v28) = 48;
          --v27;
        }
        while (v27);
      }
    }
    else
    {
      memmove(v12, __src, __len);
      uint64_t v14 = *(int *)(a6 + 16) + (uint64_t)v8;
      *(_DWORD *)(a6 + 16) = v14 + 1;
      *(unsigned char *)(*(void *)a6 + v14) = 46;
      int v15 = a3 - v8;
      uint64_t result = (int *)memmove((void *)(*(void *)a6 + *(int *)(a6 + 16)), &__src[v8], v15);
      *(_DWORD *)(a6 + 16) += v15;
      int v16 = a5 - v15;
      if (a5 - v15 >= 1)
      {
        do
        {
          uint64_t v17 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v17 + 1;
          *(unsigned char *)(*(void *)a6 + v17) = 48;
          --v16;
        }
        while (v16);
      }
    }
  }
  if (!a5)
  {
    int v29 = *v11;
    if ((*v11 & 2) != 0)
    {
      uint64_t v30 = *(int *)(a6 + 16);
      *(_DWORD *)(a6 + 16) = v30 + 1;
      *(unsigned char *)(*(void *)a6 + v30) = 46;
      int v29 = *v11;
    }
    if ((v29 & 4) != 0)
    {
      uint64_t v31 = *(int *)(a6 + 16);
      *(_DWORD *)(a6 + 16) = v31 + 1;
      *(unsigned char *)(*(void *)a6 + v31) = 48;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToShortestIeeeNumber(int *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((~*(void *)&a4 & 0x7FF0000000000000) != 0)
  {
    int __len = 0;
    BOOL v11 = 0;
    int v10 = 0;
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::DoubleToAscii(a3, 0, __len_6, 0x12u, &v11, &v10, &__len, a4);
    BOOL v8 = (*(unsigned char *)a1 & 8) == 0 || a4 != 0.0;
    if (v11 && v8)
    {
      uint64_t v9 = *(int *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = v9 + 1;
      *(unsigned char *)(*(void *)a2 + v9) = 45;
    }
    if (a1[7] < __len && __len <= a1[8]) {
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateDecimalRepresentation(a1, __len_6, v10, __len, (v10 - __len) & ~((v10 - __len) >> 31), a2);
    }
    else {
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateExponentialRepresentation((uint64_t)a1, __len_6, v10, __len - 1, a2);
    }
    return 1;
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::HandleSpecialValues((uint64_t)a1, a2, a4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::DoubleToAscii(uint64_t result, int a2, unsigned char *a3, unsigned int a4, BOOL *a5, int *a6, int *a7, double a8)
{
  int v11 = a2;
  uint64_t v12 = result;
  if (a8 >= 0.0) {
    double v13 = a8;
  }
  else {
    double v13 = -a8;
  }
  *a5 = a8 < 0.0;
  if (result != 3 || a2)
  {
    if (v13 == 0.0)
    {
      *(_WORD *)a3 = 48;
      *a6 = 1;
      *a7 = 1;
    }
    else
    {
      uint64_t v14 = a4;
      switch((int)result)
      {
        case 0:
          double v15 = v13;
          unsigned int v16 = 0;
          goto LABEL_14;
        case 1:
          double v15 = v13;
          unsigned int v16 = 1;
LABEL_14:
          a2 = 0;
          goto LABEL_16;
        case 2:
          uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::FastFixedDtoa(a2, a3, a4, a6, a7, v13);
          if (result) {
            return result;
          }
          goto LABEL_17;
        case 3:
          double v15 = v13;
          unsigned int v16 = 2;
LABEL_16:
          uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::FastDtoa(v16, a2, (uint64_t)a3, a4, a6, a7, v15);
          if ((result & 1) == 0)
          {
LABEL_17:
            uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::BignumDtoa(v12, v11, a3, v14, a6, a7, v13);
            a3[*a6] = 0;
          }
          break;
        default:
          abort();
      }
    }
  }
  else
  {
    *a3 = 0;
    *a6 = 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToFixed(int *a1, int a2, uint64_t a3, double a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((~*(void *)&a4 & 0x7FF0000000000000) != 0)
  {
    if (a2 <= 100)
    {
      uint64_t result = 0;
      if (a4 < 1.0e60 && a4 > -1.0e60)
      {
        unsigned int __len = 0;
        BOOL v12 = 0;
        int v11 = 0;
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::DoubleToAscii(2, a2, __len_7, 0xA1u, &v12, &v11, (int *)&__len, a4);
        BOOL v9 = (*(unsigned char *)a1 & 8) == 0 || a4 != 0.0;
        if (v12 && v9)
        {
          uint64_t v10 = *(int *)(a3 + 16);
          *(_DWORD *)(a3 + 16) = v10 + 1;
          *(unsigned char *)(*(void *)a3 + v10) = 45;
        }
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateDecimalRepresentation(a1, __len_7, v11, __len, a2, a3);
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::HandleSpecialValues((uint64_t)a1, a3, a4);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToExponential(unsigned char *a1, int a2, uint64_t a3, double a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((~*(void *)&a4 & 0x7FF0000000000000) != 0)
  {
    if ((a2 - 121) >= 0xFFFFFF86)
    {
      int v14 = 0;
      BOOL v13 = 0;
      int v12 = 0;
      if (a2 == -1)
      {
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::DoubleToAscii(0, 0, v15, 0x7Au, &v13, &v12, &v14, a4);
      }
      else
      {
        int v9 = a2 + 1;
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::DoubleToAscii(3, a2 + 1, v15, 0x7Au, &v13, &v12, &v14, a4);
        if (a2 >= v12) {
          memset(&v15[v12], 48, (a2 - v12) + 1);
        }
        int v12 = v9;
      }
      BOOL v10 = (*a1 & 8) == 0 || a4 != 0.0;
      if (v13 && v10)
      {
        uint64_t v11 = *(int *)(a3 + 16);
        *(_DWORD *)(a3 + 16) = v11 + 1;
        *(unsigned char *)(*(void *)a3 + v11) = 45;
      }
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateExponentialRepresentation((uint64_t)a1, v15, v12, v14 - 1, a3);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::HandleSpecialValues((uint64_t)a1, a3, a4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToPrecision(int *a1, int a2, uint64_t a3, double a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if ((~*(void *)&a4 & 0x7FF0000000000000) != 0)
  {
    int v8 = a2;
    if ((a2 - 121) < 0xFFFFFF88) {
      return 0;
    }
    *(_DWORD *)unsigned int __len = 0;
    BOOL v22 = 0;
    int v21 = 0;
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::DoubleToAscii(3, a2, __len_7, 0x79u, &v22, &v21, (int *)__len, a4);
    BOOL v9 = (*(unsigned char *)a1 & 8) == 0 || a4 != 0.0;
    if (v22 && v9)
    {
      uint64_t v10 = *(int *)(a3 + 16);
      *(_DWORD *)(a3 + 16) = v10 + 1;
      *(unsigned char *)(*(void *)a3 + v10) = 45;
    }
    unsigned int v11 = *a1;
    if (1 - *(_DWORD *)__len <= a1[9])
    {
      int v13 = *(_DWORD *)__len - v8 + ((v11 >> 2) & 1);
      int v14 = a1[10];
      BOOL v15 = v13 > v14;
      if ((v11 & 0x10) == 0)
      {
        int v12 = v21;
        if (v13 > v14) {
          goto LABEL_37;
        }
LABEL_18:
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateDecimalRepresentation(a1, __len_7, v12, *(unsigned int *)__len, (v8 - *(_DWORD *)__len) & ~((v8 - *(_DWORD *)__len) >> 31), a3);
        return 1;
      }
      if (*(int *)__len <= 1) {
        int v16 = 1;
      }
      else {
        int v16 = *(_DWORD *)__len;
      }
      if (v13 > v14) {
        int v16 = 1;
      }
    }
    else
    {
      if ((v11 & 0x10) == 0)
      {
        int v12 = v21;
LABEL_37:
        unsigned int v20 = *(_DWORD *)__len - 1;
        if (v12 < v8) {
          memset(&__len_7[v12], 48, (v8 + ~v12) + 1);
        }
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateExponentialRepresentation((uint64_t)a1, __len_7, v8, v20, a3);
        return 1;
      }
      BOOL v15 = 1;
      int v16 = 1;
    }
    int v12 = v21;
    if (v21 <= v16)
    {
      int v16 = v21;
    }
    else
    {
      uint64_t v17 = v21;
      if (__len_7[v21 - 1] == 48)
      {
        while (1)
        {
          int v18 = v17 - 1;
          if (v17 - 1 <= v16) {
            break;
          }
          int v19 = __len[v17-- + 5];
          if (v19 != 48)
          {
            int v21 = v18;
            int v12 = v18;
            goto LABEL_32;
          }
        }
        int v12 = v17 - 1;
        int v21 = v17 - 1;
      }
      else
      {
        int v18 = v21;
LABEL_32:
        int v16 = v18;
      }
    }
    if (v16 < v8) {
      int v8 = v16;
    }
    if (v15) {
      goto LABEL_37;
    }
    goto LABEL_18;
  }

  return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::HandleSpecialValues((uint64_t)a1, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::pxr_double_conversion::FastDtoa(unsigned int a1, int a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6, double a7)
{
  if (a1 >= 2)
  {
    if (a1 != 2) {
      abort();
    }
    double v61 = a7;
    uint64_t v18 = sub_21683EBAC(&v61);
    int v20 = v19;
    double v61 = 0.0;
    int v62 = 0;
    LODWORD(v59) = 0;
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::PowersOfTenCache::GetCachedPowerForBinaryExponentRange((-124 - v19), (-96 - v19), (uint64_t)&v61, &v59);
    unint64_t v21 = ((LODWORD(v61) * (unint64_t)HIDWORD(v18)) >> 32)
        + HIDWORD(v61) * (unint64_t)HIDWORD(v18)
        + ((HIDWORD(v61) * (unint64_t)v18) >> 32)
        + ((((LODWORD(v61) * (unint64_t)v18) >> 32)
          + (LODWORD(v61) * HIDWORD(v18))
          + (HIDWORD(v61) * v18)
          + 0x80000000) >> 32);
    char v22 = -64 - (v20 + v62);
    int v23 = -(v20 + v62);
    unint64_t v24 = v21 >> -(char)(v20 + v62);
    int v25 = 1233 * (v20 + v62 + 64) + 80145;
    int v26 = v25 >> 12;
    uint64_t v27 = ((uint64_t)v25 >> 12) + 1;
    if (dword_21740C660[v27] > v24) {
      LODWORD(v27) = v26;
    }
    unsigned int v28 = dword_21740C660[(int)v27];
    unint64_t v29 = 1 << v23;
    uint64_t v30 = (1 << v23) - 1;
    unint64_t v31 = v21 & v30;
    LODWORD(v57) = v27;
    *a5 = 0;
    if ((int)v27 < 1)
    {
      int v32 = 0;
      if (a2)
      {
LABEL_30:
        if (a2 < 1 || v31 < 2) {
          return 0;
        }
        unint64_t v52 = 1;
        do
        {
          unsigned int v53 = a2;
          v52 *= 10;
          *(unsigned char *)(a3 + v32) = ((10 * v31) >> v22) + 48;
          int v32 = *a5 + 1;
          *a5 = v32;
          --a2;
          unint64_t v31 = v30 & (10 * v31);
          LODWORD(v27) = v27 - 1;
        }
        while (v53 >= 2 && v31 > v52);
        LODWORD(v57) = v27;
        if (a2) {
          return 0;
        }
        long long v54 = (unsigned char *)a3;
        uint64_t v55 = a4;
LABEL_39:
        if (sub_21683EE00(v54, v55, v32, v31, v29, v52, &v57))
        {
          int v51 = LODWORD(v57) - v59;
          goto LABEL_41;
        }
        return 0;
      }
    }
    else
    {
      int v32 = 0;
      while (1)
      {
        *(unsigned char *)(a3 + v32) = v24 / v28 + 48;
        int v32 = *a5 + 1;
        *a5 = v32;
        LODWORD(v24) = v24 % v28;
        LODWORD(v27) = v27 - 1;
        if (!--a2) {
          break;
        }
        v28 /= 0xAu;
        if ((v27 + 1) <= 1)
        {
          LODWORD(v57) = v27;
          goto LABEL_30;
        }
      }
      LODWORD(v57) = v27;
    }
    v31 += (unint64_t)v24 << v22;
    unint64_t v29 = (unint64_t)v28 << v22;
    long long v54 = (unsigned char *)a3;
    uint64_t v55 = a4;
    unint64_t v52 = 1;
    goto LABEL_39;
  }
  double v61 = a7;
  uint64_t v13 = sub_21683EBAC(&v61);
  int v15 = v14;
  double v61 = 0.0;
  int v62 = 0;
  uint64_t v59 = 0;
  int v60 = 0;
  if (a1)
  {
    float v16 = a7;
    *(float *)&double v57 = v16;
    sub_21683EC90((int *)&v57, (uint64_t)&v61, (uint64_t)&v59);
  }
  else
  {
    double v57 = a7;
    sub_21683EBF0(&v57, (uint64_t)&v61, (uint64_t)&v59);
  }
  double v57 = 0.0;
  int v58 = 0;
  int v56 = 0;
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::PowersOfTenCache::GetCachedPowerForBinaryExponentRange((-124 - v15), (-96 - v15), (uint64_t)&v57, &v56);
  unint64_t v33 = ((LODWORD(v57) * (unint64_t)HIDWORD(v13)) >> 32)
      + HIDWORD(v57) * (unint64_t)HIDWORD(v13)
      + ((HIDWORD(v57) * (unint64_t)v13) >> 32)
      + ((((LODWORD(v57) * (unint64_t)v13) >> 32)
        + (LODWORD(v57) * HIDWORD(v13))
        + (HIDWORD(v57) * v13)
        + 0x80000000) >> 32);
  unint64_t v34 = ((HIDWORD(v59) * (unint64_t)LODWORD(v57)) >> 32)
      + HIDWORD(v59) * (unint64_t)HIDWORD(v57)
      + ((v59 * (unint64_t)HIDWORD(v57)) >> 32)
      + ((((v59 * (unint64_t)LODWORD(v57)) >> 32)
        + (HIDWORD(v59) * LODWORD(v57))
        + (v59 * HIDWORD(v57))
        + 0x80000000) >> 32);
  unint64_t v35 = v34 + 1;
  unint64_t v36 = v34
      - (((HIDWORD(v61) * (unint64_t)LODWORD(v57)) >> 32)
       + HIDWORD(v61) * (unint64_t)HIDWORD(v57)
       + ((LODWORD(v61) * (unint64_t)HIDWORD(v57)) >> 32)
       + ((((LODWORD(v61) * (unint64_t)LODWORD(v57)) >> 32)
         + (HIDWORD(v61) * LODWORD(v57))
         + (LODWORD(v61) * HIDWORD(v57))
         + 0x80000000) >> 32))
      + 2;
  char v37 = -64 - (v15 + v58);
  unint64_t v38 = 1 << -(char)(v15 + v58);
  unint64_t v39 = v35 >> -(char)(v15 + v58);
  unint64_t v40 = v35 & (v38 - 1);
  int v41 = 1233 * (v15 + v58 + 64) + 80145;
  int v42 = v41 >> 12;
  uint64_t v43 = ((uint64_t)v41 >> 12) + 1;
  if (dword_21740C660[v43] <= v39) {
    int v44 = v43;
  }
  else {
    int v44 = v42;
  }
  unsigned int v45 = dword_21740C660[v44];
  *a5 = 0;
  if (v44 >= 1)
  {
    int v46 = 0;
    int v47 = v44 + 1;
    while (1)
    {
      *(unsigned char *)(a3 + v46) = v39 / v45 + 48;
      int v46 = *a5 + 1;
      *a5 = v46;
      unint64_t v39 = v39 % v45;
      if ((v39 << v37) + v40 < v36) {
        break;
      }
      v45 /= 0xAu;
      if (--v47 <= 1)
      {
        int v44 = 0;
        goto LABEL_23;
      }
    }
    if (sub_21683ED30(a3, a4, v46, v35 - v33, v36, (v39 << v37) + v40, (unint64_t)v45 << v37, 1))
    {
      int v51 = v47 - v56 - 2;
      goto LABEL_41;
    }
    return 0;
  }
  int v46 = 0;
LABEL_23:
  uint64_t v48 = 1;
  do
  {
    v48 *= 10;
    uint64_t v49 = 5 * v36;
    v36 *= 10;
    *(unsigned char *)(a3 + v46) = ((10 * v40) >> v37) + 48;
    int v46 = *a5 + 1;
    *a5 = v46;
    unint64_t v40 = (v38 - 1) & (10 * v40);
    --v44;
  }
  while (v40 >= 2 * v49);
  BOOL result = sub_21683ED30(a3, a4, v46, v48 * (v35 - v33), v36, v40, v38, v48);
  if (result)
  {
    int v51 = v44 - v56;
LABEL_41:
    *a6 = *a5 + v51;
    *(unsigned char *)(a3 + *a5) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_21683EBAC(void *a1)
{
  uint64_t v1 = (*a1 & 0xFFFFFFFFFFFFFLL) << (__clz(*a1 & 0xFFFFFFFFFFFFFLL) - 11);
  if ((*a1 & 0x7FF0000000000000) != 0) {
    uint64_t v2 = *a1 | 0x10000000000000;
  }
  else {
    uint64_t v2 = v1;
  }
  return v2 << 11;
}

void *sub_21683EBF0(void *result, uint64_t a2, uint64_t a3)
{
  if ((*result & 0x7FF0000000000000) != 0) {
    uint64_t v3 = *result & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  else {
    uint64_t v3 = *result & 0xFFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 2 * v3;
  unint64_t v5 = (2 * (v3 & 0x1FFFFFFFFFFFFFLL)) | 1;
  if ((*result & 0x7FF0000000000000) != 0) {
    int v6 = ((*result >> 52) & 0x7FF) - 1075;
  }
  else {
    int v6 = -1074;
  }
  char v7 = v6 - 1;
  int v8 = v6 - 1;
  do
  {
    unint64_t v9 = v5 >> 44;
    v5 <<= 10;
    v8 -= 10;
  }
  while (!v9);
  for (; (v5 & 0x8000000000000000) == 0; --v8)
    v5 *= 2;
  BOOL v10 = (*result & 0xFFFFFFFFFFFFFLL) == 0;
  BOOL v11 = (*result & 0x7FE0000000000000) != 0;
  uint64_t v12 = 4 * v3;
  char v13 = v6 - 2;
  BOOL v14 = !v10 || !v11;
  if (v10 && v11) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = v4;
  }
  if (v14) {
    char v16 = v7;
  }
  else {
    char v16 = v13;
  }
  *(void *)a3 = v5;
  *(_DWORD *)(a3 + 8) = v8;
  *(void *)a2 = (v15 - 1) << (v16 - v8);
  *(_DWORD *)(a2 + 8) = v8;
  return result;
}

int *sub_21683EC90(int *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  unsigned int v4 = *result & 0x7FFFFF;
  LODWORD(v5) = v4 | 0x800000;
  if ((*result & 0x7F800000) != 0) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = v4;
  }
  if ((v3 & 0x7F800000) != 0) {
    int v6 = (*result >> 23) - 150;
  }
  else {
    int v6 = -149;
  }
  uint64_t v7 = 2 * v5;
  unint64_t v8 = (2 * (v5 & 0xFFFFFF)) | 1;
  char v9 = v6 - 1;
  int v10 = v6 - 1;
  do
  {
    unint64_t v11 = v8 >> 44;
    v8 <<= 10;
    v10 -= 10;
  }
  while (!v11);
  for (; (v8 & 0x8000000000000000) == 0; --v10)
    v8 *= 2;
  BOOL v12 = v4 == 0;
  BOOL v13 = (v3 & 0x7F000000) != 0;
  uint64_t v14 = 4 * v5;
  char v15 = v6 - 2;
  BOOL v16 = !v12 || !v13;
  if (v12 && v13) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = v7;
  }
  if (v16) {
    char v18 = v9;
  }
  else {
    char v18 = v15;
  }
  *(void *)a3 = v8;
  *(_DWORD *)(a3 + 8) = v10;
  *(void *)a2 = (v17 - 1) << (v18 - v10);
  *(_DWORD *)(a2 + 8) = v10;
  return result;
}

BOOL sub_21683ED30(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v8 = a4 - a8;
  unint64_t v9 = a8 + a4;
  BOOL v10 = a5 - a6 < a7;
  if (a4 - a8 > a6 && a5 - a6 >= a7)
  {
    uint64_t v11 = -(uint64_t)a6;
    uint64_t v12 = a5 - a7;
    while (1)
    {
      unint64_t v13 = a6 + a7;
      if (a6 + a7 >= v8 && v8 + v11 < a8 - a4 + a7 + a6) {
        break;
      }
      --*(unsigned char *)(a1 + a3 - 1);
      unint64_t v14 = v12 + v11;
      BOOL v10 = v12 + v11 < a7;
      if (v13 < v8)
      {
        v11 -= a7;
        a6 += a7;
        if (v14 >= a7) {
          continue;
        }
      }
      goto LABEL_11;
    }
    BOOL v10 = 0;
  }
  unint64_t v13 = a6;
LABEL_11:
  unint64_t v15 = v9 - v13;
  if (v9 > v13 && !v10)
  {
    BOOL v16 = v13 + a7 >= v9;
    unint64_t v17 = v13 + a7 - v9;
    if (!v16 || v15 > v17) {
      return 0;
    }
  }
  return v13 >= 2 * a8 && v13 <= a5 - 4 * a8;
}

uint64_t sub_21683EE00(unsigned char *a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, unint64_t a6, _DWORD *a7)
{
  uint64_t v7 = 0;
  if (a5 > a6 && a5 - a6 > a6)
  {
    if (a5 - a4 <= a4 || a5 - 2 * a4 < 2 * a6)
    {
      if (a4 <= a6 || a5 - (a4 - a6) > a4 - a6) {
        return 0;
      }
      uint64_t v8 = a3 - 1;
      ++a1[v8];
      if (a3 >= 2)
      {
        unint64_t v9 = &a1[v8];
        char v10 = *v9;
        uint64_t v11 = &a1[a3 - 2];
        do
        {
          if (v10 != 58) {
            break;
          }
          *v9-- = 48;
          char v10 = *v11 + 1;
          *v11-- = v10;
          --a3;
        }
        while (a3 > 1);
      }
      if (*a1 == 58)
      {
        *a1 = 49;
        ++*a7;
      }
    }
    return 1;
  }
  return v7;
}

BOOL pxrInternal__aapl__pxrReserved__::pxr_double_conversion::FastFixedDtoa(int a1, unsigned char *a2, uint64_t a3, int *a4, int *a5, double a6)
{
  if ((*(void *)&a6 & 0x7FF0000000000000) != 0) {
    unint64_t v7 = *(void *)&a6 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  else {
    unint64_t v7 = *(void *)&a6 & 0xFFFFFFFFFFFFFLL;
  }
  if ((*(void *)&a6 & 0x7FF0000000000000) != 0) {
    unsigned int v8 = ((*(void *)&a6 >> 52) & 0x7FF) - 1075;
  }
  else {
    unsigned int v8 = -1074;
  }
  BOOL v10 = a1 < 21 && (int)v8 < 21;
  if (!v10) {
    return v10;
  }
  *a4 = 0;
  if ((int)v8 >= 12)
  {
    unint64_t v15 = 0xB1A2BC2EC5 << (17 - v8);
    unint64_t v16 = v7 / v15;
    unint64_t v17 = (v7 % v15) << v8;
    unint64_t v18 = v7 << (v8 - 17);
    BOOL v19 = v8 >= 0x12;
    if (v8 >= 0x12) {
      unint64_t v20 = (v18 % 0xB1A2BC2EC5) << 17;
    }
    else {
      unint64_t v20 = v17;
    }
    if (v19) {
      unint64_t v21 = v18 / 0xB1A2BC2EC5;
    }
    else {
      unint64_t v21 = v16;
    }
    sub_21683F294(v21, (uint64_t)a2, a3, a4);
    unint64_t v22 = v20 / 0x5AF3107A4000;
    int v23 = a2 + 2;
    for (unsigned int i = 4; i > 1; --i)
    {
      v23[*a4] = (v22 % 0xA) | 0x30;
      --v23;
      LODWORD(v22) = v22 / 0xA;
    }
    unsigned int v25 = v20 / 0x989680 % 0x989680;
    *a4 += 3;
    int v26 = a2 + 6;
    for (unsigned int j = 8; j > 1; --j)
    {
      v26[*a4] = (v25 % 0xA) | 0x30;
      --v26;
      v25 /= 0xAu;
    }
    unsigned int v28 = v20 % 0x989680;
    *a4 += 7;
    unint64_t v29 = a2 + 6;
    for (unsigned int k = 8; k > 1; --k)
    {
      v29[*a4] = (v28 % 0xA) | 0x30;
      --v29;
      v28 /= 0xAu;
    }
    int v31 = *a4 + 7;
    *a4 = v31;
    goto LABEL_30;
  }
  if ((v8 & 0x80000000) != 0)
  {
    if (v8 < 0xFFFFFFCC)
    {
      if (v8 <= 0xFFFFFF7F)
      {
        *a2 = 0;
        *a4 = 0;
        int v31 = -a1;
        goto LABEL_30;
      }
      *a5 = 0;
    }
    else
    {
      unint64_t v38 = v7 >> -(char)v8;
      unint64_t v39 = v7 - (v38 << -(char)v8);
      if (HIDWORD(v38)) {
        sub_21683F324(v7 >> -(char)v8, (uint64_t)a2, a3, a4);
      }
      else {
        sub_21683F294(v7 >> -(char)v8, (uint64_t)a2, a3, a4);
      }
      *a5 = *a4;
      unint64_t v7 = v39;
    }
    sub_21683F4CC(v7, v8, a1, a2, a3, (unsigned int *)a4, a5);
    goto LABEL_31;
  }
  sub_21683F324(v7 << v8, (uint64_t)a2, a3, a4);
  int v31 = *a4;
LABEL_30:
  *a5 = v31;
LABEL_31:
  unint64_t v32 = *a4;
  if ((int)v32 >= 1)
  {
    if (a2[v32 - 1] == 48)
    {
      do
      {
        *a4 = v32 - 1;
        int v33 = v32 - 1;
        if (v32 <= 1)
        {
          LODWORD(v32) = v32 - 1;
          goto LABEL_52;
        }
        int v34 = a2[(v32-- - 2)];
      }
      while (v34 == 48);
      LODWORD(v32) = v33;
      if (v33 > 0) {
        goto LABEL_38;
      }
      LODWORD(v32) = v33;
    }
    else
    {
      int v33 = *a4;
LABEL_38:
      uint64_t v35 = 0;
      while (a2[v35] == 48)
      {
        if (v33 == ++v35)
        {
          LODWORD(v35) = v32;
          break;
        }
      }
      if (v35)
      {
        if ((int)v35 < (int)v32)
        {
          uint64_t v36 = (int)v35;
          char v37 = a2;
          do
            *v37++ = a2[v36++];
          while (v36 < *a4);
          LODWORD(v32) = *a4;
        }
        *a4 = v32 - v35;
        *a5 -= v35;
        LODWORD(v32) = *a4;
      }
    }
  }
LABEL_52:
  a2[(int)v32] = 0;
  if (!*a4) {
    *a5 = -a1;
  }
  return v10;
}

unint64_t sub_21683F294(unint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (result)
  {
    uint64_t v4 = 0;
    do
    {
      *(unsigned char *)(a2 + *a4 + v4++) = (result % 0xA) | 0x30;
      BOOL v5 = result > 9;
      BOOL result = result / 0xAuLL;
    }
    while (v5);
  }
  else
  {
    LODWORD(v4) = 0;
  }
  uint64_t v6 = *a4;
  int v7 = v6 + v4;
  int v8 = v6 + v4 - 1;
  if ((int)v6 < v8)
  {
    uint64_t v9 = v8;
    do
    {
      char v10 = *(unsigned char *)(a2 + v6);
      *(unsigned char *)(a2 + v6) = *(unsigned char *)(a2 + v9);
      *(unsigned char *)(a2 + v9) = v10;
      ++v6;
      --v9;
    }
    while (v6 < v9);
    int v7 = *a4 + v4;
  }
  *a4 = v7;
  return result;
}

unint64_t sub_21683F324(unint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v6 = a1 % 0x989680;
  unint64_t v7 = (a1 / 0x989680)
     - 10000000 * ((a1 / 0x989680 * (unsigned __int128)0x1AD7F29ABCBuLL) >> 64);
  unint64_t v8 = a1 / 0x5AF3107A4000;
  if (v8)
  {
    unint64_t result = sub_21683F294(v8, a2, a3, a4);
    uint64_t v10 = a2 + 6;
    for (unsigned int i = 8; i > 1; --i)
    {
      *(unsigned char *)(v10 + *a4) = (v7 % 0xA) | 0x30;
      --v10;
      LODWORD(v7) = v7 / 0xA;
    }
    *a4 += 7;
    uint64_t v12 = a2 + 6;
    for (unsigned int j = 8; j > 1; --j)
    {
      *(unsigned char *)(v12 + *a4) = (v6 % 0xA) | 0x30;
      --v12;
      LODWORD(v6) = v6 / 0xA;
    }
LABEL_10:
    *a4 += 7;
    return result;
  }
  if (v7)
  {
    unint64_t result = sub_21683F294(v7, a2, a3, a4);
    uint64_t v14 = a2 + 6;
    for (unsigned int k = 8; k > 1; --k)
    {
      *(unsigned char *)(v14 + *a4) = (v6 % 0xA) | 0x30;
      --v14;
      LODWORD(v6) = v6 / 0xA;
    }
    goto LABEL_10;
  }

  return sub_21683F294(v6, a2, a3, a4);
}

unint64_t sub_21683F4CC(unint64_t result, int a2, int a3, unsigned char *a4, uint64_t a5, unsigned int *a6, _DWORD *a7)
{
  int v11 = a3;
  if (a2 < -64)
  {
    unint64_t v27 = result;
    unint64_t v28 = 0;
    unint64_t result = (unint64_t)sub_21683F75C((uint64_t *)&v27, -64 - a2);
    unint64_t v14 = v27;
    unint64_t v15 = v28;
    if (v11 < 1)
    {
      int v22 = 128;
    }
    else
    {
      int v16 = 0;
      int v17 = 128;
      while (v14 | v15)
      {
        unint64_t v18 = 5 * v15;
        unint64_t v19 = 5 * HIDWORD(v15) + HIDWORD(v18);
        unint64_t v20 = v18 | ((unint64_t)v19 << 32);
        unint64_t v28 = v20;
        unint64_t v21 = 5 * v14 + HIDWORD(v19);
        int v22 = v17 - 1;
        char v23 = v17 - 65;
        if (v17 < 65)
        {
          unint64_t v14 = 0;
          unint64_t v24 = (v21 << (v16 - 63)) + (v20 >> v22);
          unint64_t v15 = v20 - (v20 >> v22 << v22);
          unint64_t v28 = v15;
        }
        else
        {
          unint64_t v24 = v21 >> v23;
          unint64_t v14 = v21 - ((uint64_t)(int)(v21 >> v23) << v23);
          unint64_t v15 = v20;
        }
        unint64_t v27 = v14;
        a4[(*a6)++] = v24 + 48;
        ++v16;
        int v17 = v22;
        if (v11 == v16) {
          goto LABEL_20;
        }
      }
      unint64_t v15 = 0;
      unint64_t v14 = 0;
      int v22 = v17;
    }
LABEL_20:
    if (v22 <= 64) {
      char v25 = -1;
    }
    else {
      char v25 = -65;
    }
    char v26 = v25 + v22;
    if (v22 <= 64) {
      unint64_t v14 = v15;
    }
    if ((v14 >> v26)) {
      return (unint64_t)sub_21683F6C0(a4, a5, a6, a7);
    }
  }
  else
  {
    int v12 = -a2;
    if (a3 < 1)
    {
LABEL_5:
      if (result && ((result >> (v12 - 1)) & 1) != 0)
      {
        return (unint64_t)sub_21683F6C0(a4, a5, a6, a7);
      }
    }
    else
    {
      while (result)
      {
        LOBYTE(v12) = v12 - 1;
        unint64_t v13 = (5 * result) >> v12;
        a4[(*a6)++] = v13 + 48;
        unint64_t result = 5 * result - ((uint64_t)(int)v13 << v12);
        if (!--v11) {
          goto LABEL_5;
        }
      }
    }
  }
  return result;
}

unsigned char *sub_21683F6C0(unsigned char *result, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v4 = (int)*a3;
  if (v4)
  {
    ++result[v4 - 1];
    uint64_t v5 = *a3;
    if ((int)v5 < 2)
    {
LABEL_5:
      if (*result == 58)
      {
        *unint64_t result = 49;
        ++*a4;
      }
    }
    else
    {
      while (1)
      {
        uint64_t v6 = v5 - 1;
        if (result[(v5 - 1)] != 58) {
          break;
        }
        result[(v5 - 1)] = 48;
        ++result[(v5-- - 2)];
        if ((unint64_t)(v6 + 1) <= 2) {
          goto LABEL_5;
        }
      }
    }
  }
  else
  {
    *unint64_t result = 49;
    *a4 = 1;
    *a3 = 1;
  }
  return result;
}

uint64_t *sub_21683F75C(uint64_t *result, int a2)
{
  if (a2 == 64)
  {
    uint64_t v2 = *result;
    *unint64_t result = 0;
    result[1] = v2;
  }
  else if (a2)
  {
    if (a2 == -64)
    {
      *unint64_t result = result[1];
      result[1] = 0;
    }
    else if (a2 <= 0)
    {
      unint64_t v4 = result[1];
      *unint64_t result = (v4 >> a2) + (*result << -(char)a2);
      result[1] = v4 << -(char)a2;
    }
    else
    {
      unint64_t v3 = (*result << -(char)a2) + ((unint64_t)result[1] >> a2);
      *unint64_t result = (unint64_t)*result >> a2;
      result[1] = v3;
    }
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringToDouble(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter *this, char *a2, int a3, int *a4)
{
  return sub_21683F7DC((int *)this, (unsigned __int8 *)a2, a3, 1, a4);
}

double sub_21683F7DC(int *a1, unsigned __int8 *a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v6 = (char *)&a2[a3];
  unint64_t v85 = v6;
  *(void *)unint64_t v86 = a2;
  *a5 = 0;
  if (!a3) {
    return *((double *)a1 + 1);
  }
  int v9 = (int)a2;
  unsigned int v10 = *a1;
  int v11 = (*a1 >> 4) & 1;
  int v12 = a2;
  if ((*a1 & 8) == 0)
  {
    int v12 = a2;
    if (!v11)
    {
      int v13 = *a2;
      int v12 = a2;
      goto LABEL_5;
    }
  }
LABEL_15:
  uint64_t v17 = 0;
  int v13 = *v12;
  do
  {
    if (byte_21740C68C[v17] == v13)
    {
      if (++v12 == (unsigned __int8 *)v6)
      {
        *a5 = a3;
        return *((double *)a1 + 1);
      }
      goto LABEL_15;
    }
    ++v17;
  }
  while (v17 != 6);
  *(void *)unint64_t v86 = v12;
  if ((v10 & 8) == 0 && v12 != a2) {
    return *((double *)a1 + 2);
  }
LABEL_5:
  if (v13 == 45 || v13 == 43)
  {
    BOOL v14 = v13 == 45;
    *(void *)unint64_t v86 = v12 + 1;
    if (v12 + 1 == (unsigned __int8 *)v6) {
      return *((double *)a1 + 2);
    }
    uint64_t v15 = 1;
LABEL_9:
    for (uint64_t i = 0; i != 6; ++i)
    {
      if (byte_21740C68C[i] == v12[v15])
      {
        if (++v15 == &a2[a3] - v12) {
          return *((double *)a1 + 2);
        }
        goto LABEL_9;
      }
    }
    if ((v10 & 0x20) == 0 && v15 != 1) {
      return *((double *)a1 + 2);
    }
    v12 += v15;
    *(void *)unint64_t v86 = v12;
  }
  else
  {
    BOOL v14 = 0;
  }
  unint64_t v19 = (unsigned __int8 *)*((void *)a1 + 3);
  if (v19)
  {
    int v20 = *v12;
    if ((v10 & 0x40) != 0)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E340, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26798E340))
      {
        unint64_t v75 = std::locale::classic();
        qword_26798E338 = (uint64_t)std::locale::use_facet(v75, MEMORY[0x263F8C108]);
        __cxa_guard_release(&qword_26798E340);
      }
      unsigned __int8 v21 = (*(uint64_t (**)(uint64_t, void))(*(void *)qword_26798E338 + 40))(qword_26798E338, (char)v20);
      int v20 = *v19;
    }
    else
    {
      unsigned __int8 v21 = *v19;
    }
    if (v20 == v21)
    {
      int v22 = (int)v85;
      if (!sub_216840C74((unsigned __int8 **)v86, (unsigned __int8 *)v85, *((void *)a1 + 3), (v10 >> 6) & 1)) {
        return *((double *)a1 + 2);
      }
      char v23 = *(char **)v86;
      if ((v11 | ((v10 & 4) >> 2)))
      {
        if ((v10 & 4) != 0 || *(char **)v86 == v85)
        {
          int v22 = *(_DWORD *)v86;
        }
        else
        {
          do
          {
            uint64_t v24 = 0;
            while (byte_21740C68C[v24] != *v23)
            {
              if (++v24 == 6) {
                return *((double *)a1 + 2);
              }
            }
            ++v23;
          }
          while (v23 != v85);
        }
      }
      else if (*(char **)v86 != v85)
      {
        return *((double *)a1 + 2);
      }
      *a5 = v22 - v9;
      BOOL v50 = !v14;
      double result = INFINITY;
      unint64_t v51 = 0xFFF0000000000000;
      goto LABEL_121;
    }
    int v12 = *(unsigned __int8 **)v86;
  }
  char v25 = (unsigned __int8 *)*((void *)a1 + 4);
  if (v25)
  {
    int v26 = *v12;
    if ((v10 & 0x40) != 0)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E340, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26798E340))
      {
        unint64_t v76 = std::locale::classic();
        qword_26798E338 = (uint64_t)std::locale::use_facet(v76, MEMORY[0x263F8C108]);
        __cxa_guard_release(&qword_26798E340);
      }
      unsigned __int8 v27 = (*(uint64_t (**)(uint64_t, void))(*(void *)qword_26798E338 + 40))(qword_26798E338, (char)v26);
      int v26 = *v25;
    }
    else
    {
      unsigned __int8 v27 = *v25;
    }
    if (v26 == v27)
    {
      int v28 = (int)v85;
      if (!sub_216840C74((unsigned __int8 **)v86, (unsigned __int8 *)v85, *((void *)a1 + 4), (v10 >> 6) & 1)) {
        return *((double *)a1 + 2);
      }
      unint64_t v29 = *(char **)v86;
      if ((v11 | ((v10 & 4) >> 2)))
      {
        if ((v10 & 4) != 0 || *(char **)v86 == v85)
        {
          int v28 = *(_DWORD *)v86;
        }
        else
        {
          do
          {
            uint64_t v30 = 0;
            while (byte_21740C68C[v30] != *v29)
            {
              if (++v30 == 6) {
                return *((double *)a1 + 2);
              }
            }
            ++v29;
          }
          while (v29 != v85);
        }
      }
      else if (*(char **)v86 != v85)
      {
        return *((double *)a1 + 2);
      }
      *a5 = v28 - v9;
      BOOL v50 = !v14;
      double result = NAN;
      unint64_t v51 = 0xFFF8000000000000;
LABEL_121:
      double v52 = *(double *)&v51;
LABEL_205:
      if (!v50) {
        return v52;
      }
      return result;
    }
    int v12 = *(unsigned __int8 **)v86;
  }
  int v81 = v11;
  if (*v12 != 48)
  {
    int v78 = *v12;
    int v79 = a4;
    int v80 = v14;
    unint64_t v82 = a5;
    LOBYTE(v31) = 0;
    goto LABEL_65;
  }
  int v39 = *((unsigned __int16 *)a1 + 20);
  if (sub_216840DB0((char **)v86, v39, 10, &v85))
  {
LABEL_78:
    *a5 = *(_DWORD *)v86 - v9;
    BOOL v40 = !v14;
LABEL_79:
    double result = -0.0;
    if (v40) {
      return 0.0;
    }
    return result;
  }
  unsigned int v41 = *a1;
  if ((*a1 & 0x81) != 0)
  {
    uint64_t v42 = *(void *)v86;
    if ((**(unsigned char **)v86 | 0x20) == 0x78)
    {
      int v43 = a4;
      BOOL v44 = v14;
      unsigned int v45 = (char *)++*(void *)v86;
      int v46 = v85;
      if ((char *)(v42 + 1) == v85) {
        return *((double *)a1 + 2);
      }
      if (v41 & 0x80) != 0 && (sub_216840E84((char *)(v42 + 1), v85, v39, (v10 & 4) != 0))
      {
        int v47 = 1;
        goto LABEL_128;
      }
      int v53 = *v45;
      if ((v53 - 48) < 0xA && v53 < 64)
      {
        int v47 = 0;
LABEL_128:
        int v55 = v44;
      }
      else
      {
        unsigned int v58 = v53 - 65;
        if (v58 >= 0x26 || ((0x3F0000003FuLL >> v58) & 1) == 0) {
          return *((double *)a1 + 2);
        }
        int v55 = v44;
        int v47 = 0;
      }
      v87[0] = 0;
      double result = sub_216841128((char **)v86, v46, v55, v39, v47, (v10 & 4) != 0, v43, v87, *((double *)a1 + 2));
      if (v87[0]) {
        return result;
      }
      int v56 = *(char **)v86;
      if ((v10 & 0x10) != 0 && *(char **)v86 != v46)
      {
        do
        {
          uint64_t v57 = 0;
          while (byte_21740C68C[v57] != *v56)
          {
            if (++v57 == 6) {
              goto LABEL_138;
            }
          }
          ++v56;
        }
        while (v56 != v46);
        LODWORD(v56) = v46;
      }
LABEL_138:
      *a5 = v56 - v9;
      return result;
    }
  }
  while (**(unsigned char **)v86 == 48)
  {
    if (sub_216840DB0((char **)v86, v39, 10, &v85)) {
      goto LABEL_78;
    }
  }
  int v78 = 48;
  int v79 = a4;
  int v80 = v14;
  unint64_t v82 = a5;
  int v31 = (v41 >> 1) & 1;
LABEL_65:
  char v32 = 0;
  unsigned int v33 = 0;
  int v34 = 0;
  int v35 = 0;
  while (2)
  {
    uint64_t v36 = *(char **)v86;
    int v37 = **(unsigned char **)v86;
    if ((v37 - 48) <= 9)
    {
      if (v35 > 771)
      {
        ++v34;
        v32 |= v37 != 48;
        if (v31) {
          goto LABEL_71;
        }
LABEL_69:
        int v31 = 0;
      }
      else
      {
        v87[v33++] = v37;
        ++v35;
        if ((v31 & 1) == 0) {
          goto LABEL_69;
        }
LABEL_71:
        int v31 = *v36 < 56;
      }
      if (sub_216840DB0((char **)v86, *((unsigned __int16 *)a1 + 20), 10, &v85))
      {
        int v38 = 0;
        goto LABEL_74;
      }
      continue;
    }
    break;
  }
  int v31 = (v35 != 0) & v31;
  if (v37 != 46)
  {
    int v38 = 0;
    goto LABEL_102;
  }
  if (v31 && (v10 & 4) == 0) {
    return *((double *)a1 + 2);
  }
  if (v31) {
    goto LABEL_76;
  }
  int v77 = *((unsigned __int16 *)a1 + 20);
  if (!sub_216840DB0((char **)v86, v77, 10, &v85))
  {
    if (v35 || **(unsigned char **)v86 != 48)
    {
      int v38 = 0;
      goto LABEL_149;
    }
    int v38 = 0;
    do
    {
      if (sub_216840DB0((char **)v86, v77, 10, &v85))
      {
        *unint64_t v82 = *(_DWORD *)v86 - v9;
        BOOL v40 = v80 == 0;
        goto LABEL_79;
      }
      --v38;
    }
    while (**(unsigned char **)v86 == 48);
LABEL_149:
    while (1)
    {
      uint64_t v36 = *(char **)v86;
      int v37 = **(unsigned char **)v86;
      if ((v37 - 48) > 9) {
        break;
      }
      if (v35 > 771)
      {
        v32 |= v37 != 48;
      }
      else
      {
        v87[v33++] = v37;
        ++v35;
        --v38;
      }
      if (sub_216840DB0((char **)v86, v77, 10, &v85)) {
        goto LABEL_194;
      }
    }
LABEL_102:
    if (v78 != 48 && !v38 && !v35) {
      return *((double *)a1 + 2);
    }
    if ((v37 | 0x20) == 0x65)
    {
      if (v31 && (v10 & 4) == 0) {
        return *((double *)a1 + 2);
      }
      if (v31) {
        goto LABEL_76;
      }
      uint64_t v48 = v36 + 1;
      *(void *)unint64_t v86 = v36 + 1;
      if (v36 + 1 == v85)
      {
LABEL_158:
        if ((v10 & 4) == 0) {
          return *((double *)a1 + 2);
        }
        *(void *)unint64_t v86 = v36;
        goto LABEL_194;
      }
      int v49 = *v48;
      if (v49 == 45 || v49 == 43)
      {
        uint64_t v48 = v36 + 2;
        *(void *)unint64_t v86 = v36 + 2;
        if (v36 + 2 == v85) {
          goto LABEL_158;
        }
      }
      else
      {
        int v49 = 43;
      }
      if (v48 == v85) {
        goto LABEL_158;
      }
      unsigned int v59 = *v48;
      if (v59 - 58 < 0xFFFFFFF6) {
        goto LABEL_158;
      }
      int v60 = 0;
      uint64_t v36 = v85;
      double v61 = v48 + 1;
      while (1)
      {
        if (v60 <= 107374181 || (int v62 = 0x3FFFFFFF, v60 == 107374182) && v59 <= 0x33) {
          int v62 = v59 + 10 * v60 - 48;
        }
        if (v61 == v85) {
          break;
        }
        unsigned int v63 = *v61++;
        unsigned int v59 = v63;
        int v60 = v62;
        if (v63 - 48 >= 0xA)
        {
          uint64_t v36 = v61 - 1;
          break;
        }
      }
      *(void *)unint64_t v86 = v36;
      if (v49 == 45) {
        int v64 = -v62;
      }
      else {
        int v64 = v62;
      }
      v38 += v64;
    }
    if ((v81 | ((v10 & 4) >> 2)))
    {
      if ((v10 & 4) != 0) {
        goto LABEL_183;
      }
      unint64_t v65 = v85;
    }
    else
    {
      unint64_t v65 = v36;
      if (v36 != v85) {
        return *((double *)a1 + 2);
      }
    }
    if (v36 != v65)
    {
      do
      {
        uint64_t v66 = 0;
        while (byte_21740C68C[v66] != *v36)
        {
          if (++v66 == 6) {
            return *((double *)a1 + 2);
          }
        }
        ++v36;
      }
      while (v36 != v65);
      *(void *)unint64_t v86 = v65;
      goto LABEL_184;
    }
LABEL_183:
    unint64_t v65 = v36;
LABEL_184:
    if ((v10 & 0x10) != 0 && v65 != v85)
    {
      while (2)
      {
        uint64_t v67 = 0;
        while (byte_21740C68C[v67] != *v65)
        {
          if (++v67 == 6)
          {
            *(void *)unint64_t v86 = v65;
            if (v31) {
              goto LABEL_75;
            }
            goto LABEL_194;
          }
        }
        if (++v65 != v85) {
          continue;
        }
        break;
      }
      *(void *)unint64_t v86 = v85;
      if (v31) {
        goto LABEL_75;
      }
      goto LABEL_194;
    }
LABEL_74:
    if (!v31)
    {
LABEL_194:
      int v68 = v38 + v34;
      if (v32)
      {
        v87[v33++] = 49;
        --v68;
      }
      v87[v33] = 0;
      uint64_t v69 = v33;
      while ((int)v69 >= 1)
      {
        int v70 = v69 - 1;
        int v71 = *((unsigned __int8 *)&v86[4] + v69-- + 1);
        if (v71 != 48)
        {
          int v72 = v70 + 1;
          goto LABEL_201;
        }
      }
      int v72 = 0;
LABEL_201:
      uint64_t v73 = v33 - v72 + v68;
      if (v79)
      {
        double result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtodTrimmed((uint64_t)v87, v72, v73);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtofTrimmed((uint64_t)v87, v72, v73);
        double result = v74;
      }
      *unint64_t v82 = *(_DWORD *)v86 - v9;
      double v52 = -result;
      BOOL v50 = v80 == 0;
      goto LABEL_205;
    }
LABEL_75:
    LODWORD(v36) = *(_DWORD *)v86;
LABEL_76:
    unint64_t v83 = v87;
    double result = sub_2168415A8(&v83, &v87[v33], v80, *((unsigned __int16 *)a1 + 20), (v10 & 4) != 0, v79, &v84, *((double *)a1 + 2));
    *unint64_t v82 = v36 - v9;
    return result;
  }
  int v38 = 0;
  if (v35 || v78 == 48) {
    goto LABEL_194;
  }
  return *((double *)a1 + 2);
}

void sub_21684021C(_Unwind_Exception *a1)
{
}

double pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringToDouble(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter *this, unsigned __int16 *a2, int a3, int *a4)
{
  return sub_21684024C((int *)this, a2, a3, 1, a4);
}

double sub_21684024C(int *a1, unsigned __int16 *a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v6 = &a2[a3];
  uint64_t v73 = v6;
  *(void *)float v74 = a2;
  *a5 = 0;
  if (!a3) {
    return *((double *)a1 + 1);
  }
  unsigned int v10 = *a1;
  if ((*a1 & 0x18) != 0)
  {
    int v11 = a2;
    while (1)
    {
      unsigned int v12 = *v11;
      if (v12 >= 0x80) {
        break;
      }
      uint64_t v13 = 0;
      while (byte_21740C68C[v13] != v12)
      {
        if (++v13 == 6) {
          goto LABEL_16;
        }
      }
LABEL_13:
      if (++v11 == v6)
      {
        *a5 = a3;
        return *((double *)a1 + 1);
      }
    }
    for (uint64_t i = 0; i != 20; ++i)
    {
      if ((unsigned __int16)word_21740C692[i] == v12) {
        goto LABEL_13;
      }
    }
LABEL_16:
    *(void *)float v74 = v11;
    if ((v10 & 8) == 0 && v11 != a2) {
      return *((double *)a1 + 2);
    }
  }
  else
  {
    unsigned int v12 = *a2;
    int v11 = a2;
  }
  if (v12 == 45 || v12 == 43)
  {
    BOOL v16 = v12 == 45;
    if (v11 + 1 == v6) {
      return *((double *)a1 + 2);
    }
    uint64_t v17 = 1;
    while (1)
    {
      unsigned int v12 = v11[v17];
      if (v12 >= 0x80) {
        break;
      }
      uint64_t v18 = 0;
      while (byte_21740C68C[v18] != v12)
      {
        if (++v18 == 6) {
          goto LABEL_35;
        }
      }
LABEL_33:
      if (&v11[++v17] == v6) {
        return *((double *)a1 + 2);
      }
    }
    for (uint64_t j = 0; j != 20; ++j)
    {
      if ((unsigned __int16)word_21740C692[j] == v12) {
        goto LABEL_33;
      }
    }
LABEL_35:
    if ((v10 & 0x20) == 0 && v17 != 1) {
      return *((double *)a1 + 2);
    }
    v11 += v17;
    *(void *)float v74 = v11;
  }
  else
  {
    BOOL v16 = 0;
  }
  int v20 = (unsigned __int8 *)*((void *)a1 + 3);
  if (v20)
  {
    if ((v10 & 0x40) != 0)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E340, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26798E340))
      {
        unint64_t v65 = std::locale::classic();
        qword_26798E338 = (uint64_t)std::locale::use_facet(v65, MEMORY[0x263F8C108]);
        __cxa_guard_release(&qword_26798E340);
      }
      unsigned __int8 v21 = (*(uint64_t (**)(uint64_t, void))(*(void *)qword_26798E338 + 40))(qword_26798E338, (char)v12);
      LOBYTE(v12) = *v20;
    }
    else
    {
      unsigned __int8 v21 = *v20;
    }
    if (v21 == v12)
    {
      if (!sub_216841A38((unsigned __int8 **)v74, (unsigned __int8 *)v73, *((void *)a1 + 3), (v10 >> 6) & 1)) {
        return *((double *)a1 + 2);
      }
      if ((v10 & 0x14) != 0)
      {
        if ((v10 & 4) != 0)
        {
LABEL_116:
          *a5 = (*(void *)v74 - (void)a2) >> 1;
          BOOL v49 = !v16;
          double v50 = INFINITY;
          unint64_t v51 = 0xFFF0000000000000;
LABEL_127:
          double v54 = *(double *)&v51;
          goto LABEL_128;
        }
      }
      else if (*(unsigned __int16 **)v74 != v73)
      {
        return *((double *)a1 + 2);
      }
      if (sub_2168419B0((unsigned __int16 **)v74, v73)) {
        return *((double *)a1 + 2);
      }
      goto LABEL_116;
    }
    int v11 = *(unsigned __int16 **)v74;
  }
  int v22 = (unsigned __int8 *)*((void *)a1 + 4);
  if (v22)
  {
    __int16 v23 = *v11;
    if ((v10 & 0x40) != 0)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E340, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26798E340))
      {
        uint64_t v66 = std::locale::classic();
        qword_26798E338 = (uint64_t)std::locale::use_facet(v66, MEMORY[0x263F8C108]);
        __cxa_guard_release(&qword_26798E340);
      }
      unsigned __int8 v24 = (*(uint64_t (**)(uint64_t, void))(*(void *)qword_26798E338 + 40))(qword_26798E338, (char)v23);
      LOBYTE(v23) = *v22;
    }
    else
    {
      unsigned __int8 v24 = *v22;
    }
    if (v24 == v23)
    {
      if (!sub_216841A38((unsigned __int8 **)v74, (unsigned __int8 *)v73, *((void *)a1 + 4), (v10 >> 6) & 1)) {
        return *((double *)a1 + 2);
      }
      if ((v10 & 0x14) != 0)
      {
        if ((v10 & 4) != 0)
        {
LABEL_126:
          *a5 = (*(void *)v74 - (void)a2) >> 1;
          BOOL v49 = !v16;
          double v50 = NAN;
          unint64_t v51 = 0xFFF8000000000000;
          goto LABEL_127;
        }
      }
      else if (*(unsigned __int16 **)v74 != v73)
      {
        return *((double *)a1 + 2);
      }
      if (sub_2168419B0((unsigned __int16 **)v74, v73)) {
        return *((double *)a1 + 2);
      }
      goto LABEL_126;
    }
    int v11 = *(unsigned __int16 **)v74;
  }
  if (*v11 != 48)
  {
    int v68 = *v11;
    int v69 = a4;
    int v70 = v16;
    LOBYTE(v25) = 0;
LABEL_63:
    char v26 = 0;
    unsigned int v27 = 0;
    int v28 = 0;
    int v29 = 0;
    while (1)
    {
      uint64_t v30 = *(unsigned __int16 **)v74;
      int v31 = (unsigned __int16)**(_WORD **)v74;
      if ((v31 - 48) > 9)
      {
        int v25 = (v29 != 0) & v25;
        if (v31 != 46)
        {
          int v32 = 0;
          goto LABEL_102;
        }
        if (v25 && (v10 & 4) == 0) {
          return *((double *)a1 + 2);
        }
        if ((v25 & 1) == 0)
        {
          int v67 = *((unsigned __int16 *)a1 + 20);
          if (sub_216841B74((unsigned __int16 **)v74, v67, 10, &v73))
          {
            int v32 = 0;
            if (v29 || v68 == 48) {
              goto LABEL_73;
            }
            return *((double *)a1 + 2);
          }
          if (v29 || **(_WORD **)v74 != 48)
          {
            int v32 = 0;
            goto LABEL_149;
          }
          int v32 = 0;
          do
          {
            if (sub_216841B74((unsigned __int16 **)v74, v67, 10, &v73))
            {
              *a5 = (*(void *)v74 - (void)a2) >> 1;
              BOOL v39 = v70 == 0;
              goto LABEL_81;
            }
            --v32;
          }
          while (**(_WORD **)v74 == 48);
LABEL_149:
          while (1)
          {
            uint64_t v30 = *(unsigned __int16 **)v74;
            int v31 = (unsigned __int16)**(_WORD **)v74;
            if ((v31 - 48) > 9) {
              break;
            }
            if (v29 > 771)
            {
              v26 |= v31 != 48;
            }
            else
            {
              v75[v27++] = v31;
              ++v29;
              --v32;
            }
            if (sub_216841B74((unsigned __int16 **)v74, v67, 10, &v73)) {
              goto LABEL_73;
            }
          }
LABEL_102:
          if (v68 != 48 && !v32 && !v29) {
            return *((double *)a1 + 2);
          }
          if ((v31 | 0x20) != 0x65) {
            goto LABEL_172;
          }
          if (v25 && (v10 & 4) == 0) {
            return *((double *)a1 + 2);
          }
          if ((v25 & 1) == 0)
          {
            int v46 = v30 + 1;
            int v47 = v73;
            if (v30 + 1 == v73) {
              goto LABEL_158;
            }
            int v48 = *v46;
            if (v48 == 45 || v48 == 43)
            {
              int v46 = v30 + 2;
              if (v30 + 2 == v73) {
                goto LABEL_158;
              }
            }
            else
            {
              LOBYTE(v48) = 43;
            }
            if (v46 == v73 || (unsigned int v59 = *v46, v59 - 58 < 0xFFFFFFF6))
            {
LABEL_158:
              if ((v10 & 4) == 0) {
                return *((double *)a1 + 2);
              }
              *(void *)float v74 = v30;
LABEL_73:
              int v33 = v32 + v28;
              if (v26)
              {
                v75[v27++] = 49;
                --v33;
              }
              v75[v27] = 0;
              uint64_t v34 = v27;
              while ((int)v34 >= 1)
              {
                int v35 = v34 - 1;
                int v36 = *((unsigned __int8 *)&v74[4] + v34-- + 1);
                if (v36 != 48)
                {
                  int v37 = v35 + 1;
                  goto LABEL_118;
                }
              }
              int v37 = 0;
LABEL_118:
              uint64_t v52 = v27 - v37 + v33;
              if (v69)
              {
                double v50 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtodTrimmed((uint64_t)v75, v37, v52);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtofTrimmed((uint64_t)v75, v37, v52);
                double v50 = v53;
              }
              *a5 = (*(void *)v74 - (void)a2) >> 1;
              double v54 = -v50;
              BOOL v49 = v70 == 0;
LABEL_128:
              if (v49) {
                return v50;
              }
              else {
                return v54;
              }
            }
            int v60 = 0;
            double v61 = v46 + 1;
            while (1)
            {
              if (v60 <= 107374181 || (int v62 = 0x3FFFFFFF, v60 == 107374182) && v59 <= 0x33) {
                int v62 = v59 + 10 * v60 - 48;
              }
              if (v61 == v73) {
                break;
              }
              unsigned int v63 = *v61++;
              unsigned int v59 = v63;
              int v60 = v62;
              if (v63 - 48 >= 0xA)
              {
                int v47 = v61 - 1;
                break;
              }
            }
            *(void *)float v74 = v47;
            if (v48 == 45) {
              int v64 = -v62;
            }
            else {
              int v64 = v62;
            }
            v32 += v64;
            uint64_t v30 = v47;
LABEL_172:
            if ((v10 & 0x14) == 0)
            {
              if (v30 != v73) {
                return *((double *)a1 + 2);
              }
              goto LABEL_176;
            }
            if ((v10 & 4) == 0)
            {
              uint64_t v30 = v73;
LABEL_176:
              if (sub_2168419B0((unsigned __int16 **)v74, v30)) {
                return *((double *)a1 + 2);
              }
            }
            if ((v10 & 0x10) != 0)
            {
              sub_2168419B0((unsigned __int16 **)v74, v73);
              if ((v25 & 1) == 0) {
                goto LABEL_73;
              }
            }
            else
            {
LABEL_72:
              if (!v25) {
                goto LABEL_73;
              }
            }
          }
        }
        int v71 = v75;
        double v15 = sub_2168415A8(&v71, &v75[v27], v70, *((unsigned __int16 *)a1 + 20), (v10 & 4) != 0, v69, &v72, *((double *)a1 + 2));
        goto LABEL_180;
      }
      if (v29 > 771)
      {
        ++v28;
        v26 |= v31 != 48;
        if (v25)
        {
LABEL_69:
          int v25 = *v30 < 0x38u;
          goto LABEL_70;
        }
      }
      else
      {
        v75[v27++] = v31;
        ++v29;
        if (v25) {
          goto LABEL_69;
        }
      }
      int v25 = 0;
LABEL_70:
      if (sub_216841B74((unsigned __int16 **)v74, *((unsigned __int16 *)a1 + 20), 10, &v73))
      {
        int v32 = 0;
        goto LABEL_72;
      }
    }
  }
  int v38 = *((unsigned __int16 *)a1 + 20);
  if (sub_216841B74((unsigned __int16 **)v74, v38, 10, &v73))
  {
LABEL_80:
    *a5 = (*(void *)v74 - (void)a2) >> 1;
    BOOL v39 = !v16;
LABEL_81:
    if (v39) {
      return 0.0;
    }
    else {
      return -0.0;
    }
  }
  unsigned int v40 = *a1;
  if ((*a1 & 0x81) == 0 || (uint64_t v41 = *(void *)v74, ((unsigned __int16)**(_WORD **)v74 | 0x20) != 0x78))
  {
    while (**(_WORD **)v74 == 48)
    {
      if (sub_216841B74((unsigned __int16 **)v74, v38, 10, &v73)) {
        goto LABEL_80;
      }
    }
    int v68 = 48;
    int v69 = a4;
    int v70 = v16;
    int v25 = (v40 >> 1) & 1;
    goto LABEL_63;
  }
  int v42 = a4;
  int v43 = (unsigned __int16 *)(*(void *)v74 + 2);
  *(void *)v74 += 2;
  BOOL v44 = v73;
  if ((unsigned __int16 *)(v41 + 2) == v73) {
    return *((double *)a1 + 2);
  }
  if (v40 & 0x80) != 0 && (sub_216841C48((unsigned __int16 *)(v41 + 2), v73, v38, (v10 & 4) != 0))
  {
    int v45 = 1;
  }
  else
  {
    unsigned int v56 = *v43;
    if (v56 - 48 >= 0xA || v56 >= 0x40)
    {
      unsigned int v58 = v56 - 65;
      if (v58 >= 0x26 || ((0x3F0000003FuLL >> v58) & 1) == 0) {
        return *((double *)a1 + 2);
      }
    }
    int v45 = 0;
  }
  v75[0] = 0;
  double v15 = sub_216841E48((unsigned __int16 **)v74, v44, v16, *((unsigned __int16 *)a1 + 20), v45, (v10 & 4) != 0, v42, v75, *((double *)a1 + 2));
  if (!v75[0])
  {
    if ((v10 & 0x10) != 0) {
      sub_2168419B0((unsigned __int16 **)v74, v44);
    }
LABEL_180:
    *a5 = (*(void *)v74 - (void)a2) >> 1;
  }
  return v15;
}

void sub_216840BA8(_Unwind_Exception *a1)
{
}

float pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringToFloat(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter *this, char *a2, int a3, int *a4)
{
  return sub_21683F7DC((int *)this, (unsigned __int8 *)a2, a3, 0, a4);
}

float pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringToFloat(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter *this, unsigned __int16 *a2, int a3, int *a4)
{
  return sub_21684024C((int *)this, a2, a3, 0, a4);
}

double pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringTo<double>(int *a1, unsigned __int8 *a2, int a3, _DWORD *a4)
{
  return sub_21683F7DC(a1, a2, a3, 1, a4);
}

float pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringTo<float>(int *a1, unsigned __int8 *a2, int a3, _DWORD *a4)
{
  return sub_21683F7DC(a1, a2, a3, 0, a4);
}

double pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringTo<double>(int *a1, unsigned __int16 *a2, int a3, _DWORD *a4)
{
  return sub_21684024C(a1, a2, a3, 1, a4);
}

float pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringTo<float>(int *a1, unsigned __int16 *a2, int a3, _DWORD *a4)
{
  return sub_21684024C(a1, a2, a3, 0, a4);
}

BOOL sub_216840C74(unsigned __int8 **a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    uint64_t v6 = (unsigned char *)(a3 + 1);
    unint64_t v7 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      int v8 = *v6;
      BOOL v9 = *v6 == 0;
      unsigned int v10 = *a1 + 1;
      *a1 = v10;
      if (v8) {
        BOOL v11 = v10 == a2;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11) {
        break;
      }
      unsigned __int8 v12 = *v10;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E340, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26798E340))
      {
        double v15 = std::locale::classic();
        qword_26798E338 = (uint64_t)std::locale::use_facet(v15, v7);
        __cxa_guard_release(&qword_26798E340);
      }
      unsigned __int8 v13 = (*(uint64_t (**)(uint64_t, void))(*(void *)qword_26798E338 + 40))(qword_26798E338, (char)v12);
      int v14 = *v6++;
    }
    while (v14 == v13);
  }
  else
  {
    BOOL v16 = *a1 + 1;
    uint64_t v17 = (unsigned char *)(a3 + 1);
    do
    {
      BOOL v11 = *v17 == 0;
      BOOL v9 = *v17 == 0;
      *a1 = v16;
      if (v11 || v16 == a2) {
        break;
      }
      int v20 = *v16++;
      int v19 = v20;
      int v21 = *v17++;
    }
    while (v19 == v21);
  }
  return v9;
}

void sub_216840D98(_Unwind_Exception *a1)
{
}

uint64_t sub_216840DB0(char **a1, int a2, int a3, char **a4)
{
  uint64_t v6 = *a1;
  if (!a2)
  {
    *a1 = v6 + 1;
    return v6 + 1 == *a4;
  }
  BOOL v9 = v6 + 1;
  LODWORD(result) = sub_2168410CC(*v6, a3);
  int v11 = result;
  *a1 = v6 + 1;
  unsigned __int8 v12 = *a4;
  if (v6 + 1 == *a4) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = result;
  }
  if (v11) {
    BOOL v13 = v9 == v12;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    int v14 = v6 + 2;
    if (v14 == v12) {
      return 0;
    }
    if (*v9 == a2 && sub_2168410CC(*v14, a3))
    {
      *a1 = v14;
      unsigned __int8 v12 = *a4;
      BOOL v9 = v14;
    }
    return v9 == v12;
  }
  return result;
}

uint64_t sub_216840E84(char *a1, char *a2, int a3, char a4)
{
  char v7 = 0;
  int v21 = a1;
  int v22 = a2;
  while (1)
  {
    int v8 = *v21;
    if ((v8 - 48) >= 0xA || v8 >= 64)
    {
      if (*v21 - 46 > 0x38) {
        goto LABEL_25;
      }
      if (((1 << (v8 - 46)) & 0x1F8000001F80000) == 0) {
        break;
      }
    }
    char v7 = 1;
    if (sub_216840DB0(&v21, a3, 16, &v22)) {
      return 0;
    }
  }
  if (*v21 == 46)
  {
    if (sub_216840DB0(&v21, a3, 16, &v22)) {
      return 0;
    }
    while (1)
    {
      int v8 = *v21;
      BOOL v11 = v8 >= 64 || (v8 - 48) >= 0xA;
      BOOL v12 = !v11;
      if ((v8 - 97) >= 6 && !v12 && (v8 <= 64 || v8 > 0x46)) {
        break;
      }
      char v13 = sub_216840DB0(&v21, a3, 16, &v22);
      uint64_t result = 0;
      char v7 = 1;
      if (v13) {
        return result;
      }
    }
  }
LABEL_25:
  if (v7 & 1) == 0 || (v8 | 0x20) != 0x70 || (sub_216840DB0(&v21, a3, 16, &v22)) {
    return 0;
  }
  int v14 = *v21;
  if (v14 != 45 && v14 != 43) {
    goto LABEL_32;
  }
  if (sub_216840DB0(&v21, a3, 16, &v22)) {
    return 0;
  }
  LOBYTE(v14) = *v21;
LABEL_32:
  if ((char)v14 > 57 || ((char)v14 - 48) > 9) {
    return 0;
  }
  if (sub_216840DB0(&v21, a3, 16, &v22)) {
    return 1;
  }
  while (1)
  {
    BOOL v16 = v21;
    int v17 = *v21;
    if (v17 > 57 || (v17 - 48) > 9) {
      break;
    }
    char v19 = sub_216840DB0(&v21, a3, 16, &v22);
    uint64_t result = 1;
    if (v19) {
      return result;
    }
  }
  uint64_t result = 1;
  if (v21 != a2 && (a4 & 1) == 0)
  {
    do
    {
      uint64_t v20 = 0;
      while (byte_21740C68C[v20] != *v16)
      {
        uint64_t result = 0;
        if (++v20 == 6) {
          return result;
        }
      }
      ++v16;
      uint64_t result = 1;
    }
    while (v16 != a2);
  }
  return result;
}

uint64_t sub_2168410CC(int a1, int a2)
{
  if ((a1 - 48) <= 9 && a2 + 48 > a1 || a1 >= 97 && a2 >= 11 && a2 + 87 > a1) {
    return 1;
  }
  BOOL v3 = a2 + 55 > a1;
  if (a2 < 11) {
    BOOL v3 = 0;
  }
  return a1 >= 65 && v3;
}

double sub_216841128(char **a1, char *a2, int a3, int a4, int a5, char a6, int a7, unsigned char *a8, double a9)
{
  float v53 = a2;
  *a8 = 1;
  while (1)
  {
    uint64_t v18 = *a1;
    int v19 = **a1;
    if (v19 != 48) {
      break;
    }
    if (sub_216840DB0(a1, a4, 16, &v53))
    {
      *a8 = 0;
      if (a3) {
        return -0.0;
      }
      else {
        return 0.0;
      }
    }
  }
  char v52 = a6;
  int v20 = 0;
  int64_t v21 = 0;
  char v22 = 0;
  if (a7) {
    char v23 = 53;
  }
  else {
    char v23 = 24;
  }
  while (1)
  {
    unsigned int v24 = (char)v19 - 48;
    if (v24 < 0xA) {
      goto LABEL_15;
    }
    if (((char)v19 - 97) <= 5)
    {
      unsigned int v24 = (char)v19 - 87;
      goto LABEL_15;
    }
    if (((char)v19 - 65) > 5) {
      break;
    }
    unsigned int v24 = (char)v19 - 55;
LABEL_15:
    if (v22) {
      v20 -= 4;
    }
    int64_t v21 = 16 * v21 + v24;
    uint64_t v25 = v21 >> v23;
    if ((v21 >> v23))
    {
      int v50 = a3;
      int v26 = 1;
      if ((int)v25 >= 2)
      {
        do
        {
          ++v26;
          BOOL v31 = v25 > 3;
          LODWORD(v25) = v25 >> 1;
        }
        while (v31);
      }
      unint64_t v51 = a2;
      int v27 = v26 + v20;
      if (sub_216840DB0(a1, a4, 16, &v53))
      {
        char v28 = 1;
LABEL_43:
        if ((a5 & 1) == 0 && (v52 & 1) == 0)
        {
          for (uint64_t i = *a1; i != v51; *a1 = i)
          {
            uint64_t v34 = 0;
            while (byte_21740C68C[v34] != *i)
            {
              if (++v34 == 6) {
                return a9;
              }
            }
            ++i;
          }
        }
        int v35 = v21 & ~(-1 << v26);
        int v36 = 1 << (v26 - 1);
        uint64_t v37 = (v21 >> v26) + ((v21 >> v26) & 1u | ((v28 & 1) == 0));
        if (v35 != v36) {
          uint64_t v37 = v21 >> v26;
        }
        if (v35 > v36) {
          uint64_t v38 = (v21 >> v26) + 1;
        }
        else {
          uint64_t v38 = v37;
        }
        int v20 = v27 + (((unint64_t)v38 >> v23) & 1);
        int64_t v21 = v38 >> (((unint64_t)v38 >> v23) & 1);
        a3 = v50;
        goto LABEL_57;
      }
      char v28 = 1;
      while (2)
      {
        int v29 = *a1;
        if (a5)
        {
          int v30 = *v29;
          if (v30 == 46)
          {
            sub_216840DB0(a1, a4, 16, &v53);
            int v29 = *a1;
            char v22 = 1;
            goto LABEL_31;
          }
        }
        else
        {
LABEL_31:
          int v30 = *v29;
        }
        BOOL v31 = ((char)v30 - 48) < 0xA && (char)v30 < 64;
        if (!v31 && ((v30 - 65) > 0x25 || ((1 << (v30 - 65)) & 0x3F0000003FLL) == 0)) {
          goto LABEL_43;
        }
        v28 &= v30 == 48;
        if ((v22 & 1) == 0) {
          v27 += 4;
        }
        if (sub_216840DB0(a1, a4, 16, &v53)) {
          goto LABEL_43;
        }
        continue;
      }
    }
    if (sub_216840DB0(a1, a4, 16, &v53)) {
      goto LABEL_57;
    }
LABEL_19:
    uint64_t v18 = *a1;
    LOBYTE(v19) = **a1;
  }
  if (!a5) {
    goto LABEL_91;
  }
  if ((char)v19 == 46)
  {
    sub_216840DB0(a1, a4, 16, &v53);
    char v22 = 1;
    goto LABEL_19;
  }
  if (v19 != 80 && v19 != 112)
  {
LABEL_91:
    if (v18 != a2 && (v52 & 1) == 0)
    {
      do
      {
        uint64_t v49 = 0;
        while (byte_21740C68C[v49] != *v18)
        {
          if (++v49 == 6) {
            return a9;
          }
        }
        *a1 = ++v18;
      }
      while (v18 != a2);
    }
LABEL_57:
    *a8 = 0;
    if (a5) {
      goto LABEL_62;
    }
    goto LABEL_78;
  }
  *a8 = 0;
LABEL_62:
  sub_216840DB0(a1, a4, 16, &v53);
  int v39 = 0;
  int v40 = **a1;
  if (v40 == 43)
  {
LABEL_65:
    sub_216840DB0(a1, a4, 16, &v53);
  }
  else if (v40 == 45)
  {
    int v39 = 1;
    goto LABEL_65;
  }
  int v41 = 0;
  do
  {
    int v42 = **a1;
    if ((v42 - 48) > 9) {
      break;
    }
    if (v41 >= 0) {
      unsigned int v43 = v41;
    }
    else {
      unsigned int v43 = -v41;
    }
    int v44 = v42 + 10 * v41 - 48;
    if (v43 < 0x17BB1) {
      int v41 = v44;
    }
  }
  while (!sub_216840DB0(a1, a4, 16, &v53));
  if (v39) {
    int v45 = -v41;
  }
  else {
    int v45 = v41;
  }
  v20 += v45;
LABEL_78:
  if (v20) {
    BOOL v46 = v21 == 0;
  }
  else {
    BOOL v46 = 1;
  }
  if (v46)
  {
    if (a3)
    {
      if (!v21) {
        return -0.0;
      }
      return (double)-v21;
    }
    return (double)v21;
  }
  else
  {
    double v47 = COERCE_DOUBLE(sub_216841874(v21, v20));
    if (a3) {
      return -v47;
    }
    else {
      return v47;
    }
  }
}

double sub_2168415A8(char **a1, char *a2, int a3, int a4, char a5, int a6, unsigned char *a7, double a8)
{
  int v39 = a2;
  *a7 = 1;
  while (**a1 == 48)
  {
    if (sub_21684190C(a1, a4, &v39))
    {
      *a7 = 0;
      if (a3) {
        return -0.0;
      }
      else {
        return 0.0;
      }
    }
  }
  int64_t v16 = 0;
  if (a6) {
    char v17 = 53;
  }
  else {
    char v17 = 24;
  }
  while (1)
  {
    uint64_t v18 = *a1;
    int v19 = **a1;
    if (v19 > 55 || (v19 - 48) >= 0xA)
    {
      if (v18 != a2 && (a5 & 1) == 0)
      {
        do
        {
          uint64_t v22 = 0;
          while (byte_21740C68C[v22] != *v18)
          {
            if (++v22 == 6) {
              return a8;
            }
          }
          *a1 = ++v18;
        }
        while (v18 != a2);
      }
LABEL_24:
      *a7 = 0;
      BOOL v23 = v16 == 0;
      goto LABEL_25;
    }
    int64_t v16 = **a1 + 8 * v16 - 48;
    uint64_t v21 = v16 >> v17;
    if ((v16 >> v17)) {
      break;
    }
    if (sub_21684190C(a1, a4, &v39)) {
      goto LABEL_24;
    }
  }
  int v24 = 1;
  if ((int)v21 >= 2)
  {
    do
    {
      ++v24;
      BOOL v28 = v21 > 3;
      LODWORD(v21) = v21 >> 1;
    }
    while (v28);
  }
  int v38 = a3;
  char v25 = 1;
  for (int i = v24; !sub_21684190C(a1, a4, &v39); i += 3)
  {
    int v27 = **a1;
    BOOL v28 = v27 > 55 || (v27 - 48) > 9;
    if (v28) {
      break;
    }
    v25 &= v27 == 48;
  }
  if ((a5 & 1) == 0)
  {
    for (uint64_t j = *a1; j != a2; *a1 = j)
    {
      uint64_t v30 = 0;
      while (byte_21740C68C[v30] != *j)
      {
        if (++v30 == 6) {
          return a8;
        }
      }
      ++j;
    }
  }
  int v31 = v16 & ~(-1 << v24);
  int v32 = 1 << (v24 - 1);
  uint64_t v33 = (v16 >> v24) + ((v16 >> v24) & 1u | ((v25 & 1) == 0));
  if (v31 != v32) {
    uint64_t v33 = v16 >> v24;
  }
  if (v31 > v32) {
    uint64_t v34 = (v16 >> v24) + 1;
  }
  else {
    uint64_t v34 = v33;
  }
  uint64_t v35 = ((unint64_t)v34 >> v17) & 1;
  int64_t v16 = v34 >> (((unint64_t)v34 >> v17) & 1);
  *a7 = 0;
  BOOL v23 = v16 == 0;
  a3 = v38;
  if (i + v35 && v16)
  {
    double v36 = COERCE_DOUBLE(sub_216841874(v16, i + (int)v35));
    if (v38) {
      return -v36;
    }
    else {
      return v36;
    }
  }
LABEL_25:
  if (a3)
  {
    if (v23) {
      return -0.0;
    }
    return (double)-v16;
  }
  return (double)v16;
}

unint64_t sub_216841874(unint64_t a1, int a2)
{
  if (a1 >> 53)
  {
    do
    {
      unint64_t v2 = a1 >> 1;
      ++a2;
      unint64_t v3 = a1 >> 54;
      a1 >>= 1;
    }
    while (v3);
  }
  else
  {
    unint64_t v2 = a1;
  }
  if (a2 > 971) {
    return 0x7FF0000000000000;
  }
  if (a2 < -1074) {
    return 0;
  }
  BOOL v5 = (v2 & 0x10000000000000) == 0;
  if (a2 != -1074 && (v2 & 0x10000000000000) == 0)
  {
    do
    {
      int v6 = a2;
      uint64_t v8 = v2 & 0x8000000000000;
      BOOL v7 = (v2 & 0x8000000000000) == 0;
      v2 *= 2;
      --a2;
      BOOL v5 = v7;
    }
    while (v6 >= -1072 && !v8);
  }
  if (a2 == -1074 && v5) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = (unint64_t)(a2 + 1075) << 52;
  }
  return v9 & 0xFFF0000000000000 | v2 & 0xFFFFFFFFFFFFFLL;
}

BOOL sub_21684190C(char **a1, int a2, char **a3)
{
  unint64_t v3 = *a1;
  if (!a2)
  {
    *a1 = v3 + 1;
    return v3 + 1 == *a3;
  }
  BOOL v5 = v3 + 1;
  int v4 = *v3;
  BOOL v7 = v4 > 55 || (v4 - 58) < 0xFFFFFFF6;
  *a1 = v5;
  uint64_t v8 = *a3;
  LODWORD(v9) = !v7;
  if (v5 == *a3) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v9;
  }
  if (!v7 && v5 != v8)
  {
    unsigned int v10 = v3 + 2;
    if (v3 + 2 == v8) {
      return 0;
    }
    if (*v5 == a2)
    {
      int v11 = *v10;
      if (v11 <= 55 && (v11 - 48) <= 9)
      {
        *a1 = v10;
        uint64_t v8 = *a3;
        BOOL v5 = v10;
      }
    }
    return v5 == v8;
  }
  return v9;
}

uint64_t sub_2168419B0(unsigned __int16 **a1, unsigned __int16 *a2)
{
  for (int i = *a1; i != a2; *a1 = i)
  {
    unsigned int v3 = *i;
    if (v3 >= 0x80)
    {
      uint64_t v5 = 0;
      while ((unsigned __int16)word_21740C692[v5] != v3)
      {
        if (++v5 == 20) {
          return 1;
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
      while (byte_21740C68C[v4] != v3)
      {
        if (++v4 == 6) {
          return 1;
        }
      }
    }
    ++i;
  }
  return 0;
}

BOOL sub_216841A38(unsigned __int8 **a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    int v6 = (unsigned char *)(a3 + 1);
    BOOL v7 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      int v8 = *v6;
      BOOL v9 = *v6 == 0;
      unsigned int v10 = *a1 + 2;
      *a1 = v10;
      if (v8) {
        BOOL v11 = v10 == a2;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11) {
        break;
      }
      __int16 v12 = *(_WORD *)v10;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E340, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26798E340))
      {
        double v15 = std::locale::classic();
        qword_26798E338 = (uint64_t)std::locale::use_facet(v15, v7);
        __cxa_guard_release(&qword_26798E340);
      }
      unsigned __int8 v13 = (*(uint64_t (**)(uint64_t, void))(*(void *)qword_26798E338 + 40))(qword_26798E338, (char)v12);
      int v14 = *v6++;
    }
    while (v14 == v13);
  }
  else
  {
    int64_t v16 = *a1 + 2;
    char v17 = (unsigned char *)(a3 + 1);
    do
    {
      BOOL v11 = *v17 == 0;
      BOOL v9 = *v17 == 0;
      *a1 = v16;
      if (v11 || v16 == a2) {
        break;
      }
      int v20 = *v16;
      v16 += 2;
      int v19 = v20;
      int v21 = *v17++;
    }
    while (v21 == v19);
  }
  return v9;
}

void sub_216841B5C(_Unwind_Exception *a1)
{
}

uint64_t sub_216841B74(unsigned __int16 **a1, int a2, int a3, unsigned __int16 **a4)
{
  int v6 = *a1;
  if (!a2)
  {
    *a1 = v6 + 1;
    return v6 + 1 == *a4;
  }
  BOOL v9 = v6 + 1;
  LODWORD(result) = sub_2168410CC(*v6, a3);
  int v11 = result;
  *a1 = v6 + 1;
  __int16 v12 = *a4;
  if (v6 + 1 == *a4) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = result;
  }
  if (v11) {
    BOOL v13 = v9 == v12;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    int v14 = v6 + 2;
    if (v14 == v12) {
      return 0;
    }
    if (*v9 == a2 && sub_2168410CC(*v14, a3))
    {
      *a1 = v14;
      __int16 v12 = *a4;
      BOOL v9 = v14;
    }
    return v9 == v12;
  }
  return result;
}

uint64_t sub_216841C48(unsigned __int16 *a1, unsigned __int16 *a2, int a3, char a4)
{
  char v7 = 0;
  int v19 = a1;
  int v20 = a2;
  while (1)
  {
    unsigned int v8 = *v19;
    if (v8 - 48 >= 0xA || v8 >= 0x40)
    {
      if (v8 - 46 > 0x38) {
        goto LABEL_25;
      }
      if (((1 << (v8 - 46)) & 0x1F8000001F80000) == 0) {
        break;
      }
    }
    char v7 = 1;
    if (sub_216841B74(&v19, a3, 16, &v20)) {
      return 0;
    }
  }
  if (v8 == 46)
  {
    if (sub_216841B74(&v19, a3, 16, &v20)) {
      return 0;
    }
    while (1)
    {
      unsigned int v8 = *v19;
      BOOL v11 = v8 >= 0x40 || v8 - 48 >= 0xA;
      BOOL v12 = !v11;
      if (v8 - 97 >= 6 && !v12 && (v8 <= 0x40 || v8 > 0x46)) {
        break;
      }
      char v13 = sub_216841B74(&v19, a3, 16, &v20);
      uint64_t result = 0;
      char v7 = 1;
      if (v13) {
        return result;
      }
    }
  }
LABEL_25:
  if (v7 & 1) == 0 || (v8 | 0x20) != 0x70 || (sub_216841B74(&v19, a3, 16, &v20)) {
    return 0;
  }
  unsigned int v14 = *v19;
  if (v14 != 45 && v14 != 43) {
    goto LABEL_32;
  }
  if (sub_216841B74(&v19, a3, 16, &v20)) {
    return 0;
  }
  unsigned int v14 = *v19;
LABEL_32:
  if (v14 > 0x39 || v14 - 48 > 9) {
    return 0;
  }
  if (sub_216841B74(&v19, a3, 16, &v20)) {
    return 1;
  }
  do
  {
    unsigned int v16 = *v19;
    if (v16 > 0x39 || v16 - 48 > 9) {
      break;
    }
    char v18 = sub_216841B74(&v19, a3, 16, &v20);
    uint64_t result = 1;
  }
  while ((v18 & 1) == 0);
  if (a4) {
    return 1;
  }
  else {
    return sub_2168419B0(&v19, a2) ^ 1;
  }
}

double sub_216841E48(unsigned __int16 **a1, unsigned __int16 *a2, int a3, int a4, int a5, char a6, int a7, unsigned char *a8, double a9)
{
  unsigned int v58 = a2;
  *a8 = 1;
  while (1)
  {
    char v18 = *a1;
    int v19 = **a1;
    if (v19 != 48) {
      break;
    }
    if (sub_216841B74(a1, a4, 16, &v58))
    {
      *a8 = 0;
      if (a3) {
        return -0.0;
      }
      else {
        return 0.0;
      }
    }
  }
  char v57 = a6;
  int v20 = 0;
  int64_t v21 = 0;
  char v22 = 0;
  if (a7) {
    char v23 = 53;
  }
  else {
    char v23 = 24;
  }
  while (1)
  {
    unsigned int v24 = v19 - 48;
    if ((v19 - 48) < 0xA) {
      goto LABEL_15;
    }
    if ((v19 - 97) <= 5)
    {
      unsigned int v24 = v19 - 87;
      goto LABEL_15;
    }
    if ((v19 - 65) > 5) {
      break;
    }
    unsigned int v24 = v19 - 55;
LABEL_15:
    if (v22) {
      v20 -= 4;
    }
    int64_t v21 = 16 * v21 + v24;
    uint64_t v25 = v21 >> v23;
    if ((v21 >> v23))
    {
      int v55 = a3;
      int v26 = 1;
      if ((int)v25 >= 2)
      {
        do
        {
          ++v26;
          BOOL v27 = v25 > 3;
          LODWORD(v25) = v25 >> 1;
        }
        while (v27);
      }
      unsigned int v56 = a2;
      int v28 = v26 + v20;
      if (sub_216841B74(a1, a4, 16, &v58))
      {
        char v29 = 1;
LABEL_44:
        if ((a5 & 1) == 0 && (v57 & 1) == 0)
        {
          for (int i = *a1; i != v56; *a1 = i)
          {
            unsigned int v35 = *i;
            if (v35 >= 0x80)
            {
              uint64_t v37 = 0;
              while ((unsigned __int16)word_21740C692[v37] != v35)
              {
                if (++v37 == 20) {
                  return a9;
                }
              }
            }
            else
            {
              uint64_t v36 = 0;
              while (byte_21740C68C[v36] != v35)
              {
                if (++v36 == 6) {
                  return a9;
                }
              }
            }
            ++i;
          }
        }
        int v38 = v21 & ~(-1 << v26);
        int v39 = 1 << (v26 - 1);
        uint64_t v40 = (v21 >> v26) + ((v21 >> v26) & 1u | ((v29 & 1) == 0));
        if (v38 != v39) {
          uint64_t v40 = v21 >> v26;
        }
        if (v38 > v39) {
          uint64_t v41 = (v21 >> v26) + 1;
        }
        else {
          uint64_t v41 = v40;
        }
        int v20 = v28 + (((unint64_t)v41 >> v23) & 1);
        int64_t v21 = v41 >> (((unint64_t)v41 >> v23) & 1);
        a3 = v55;
        goto LABEL_63;
      }
      char v29 = 1;
      while (2)
      {
        uint64_t v30 = *a1;
        if (a5)
        {
          unsigned int v31 = *v30;
          if (v31 == 46)
          {
            sub_216841B74(a1, a4, 16, &v58);
            uint64_t v30 = *a1;
            char v22 = 1;
            goto LABEL_31;
          }
        }
        else
        {
LABEL_31:
          unsigned int v31 = *v30;
        }
        if ((v31 - 48 >= 0xA || v31 >= 0x40)
          && (v31 - 65 > 0x25 || ((1 << (v31 - 65)) & 0x3F0000003FLL) == 0))
        {
          goto LABEL_44;
        }
        v29 &= v31 == 48;
        if ((v22 & 1) == 0) {
          v28 += 4;
        }
        if (sub_216841B74(a1, a4, 16, &v58)) {
          goto LABEL_44;
        }
        continue;
      }
    }
    if (sub_216841B74(a1, a4, 16, &v58)) {
      goto LABEL_63;
    }
LABEL_19:
    char v18 = *a1;
    int v19 = **a1;
  }
  if (!a5) {
    goto LABEL_97;
  }
  if (v19 == 46)
  {
    sub_216841B74(a1, a4, 16, &v58);
    char v22 = 1;
    goto LABEL_19;
  }
  if (v19 != 80 && v19 != 112)
  {
LABEL_97:
    if (v18 != a2 && (v57 & 1) == 0)
    {
      do
      {
        unsigned int v52 = *v18;
        if (v52 >= 0x80)
        {
          uint64_t v54 = 0;
          while ((unsigned __int16)word_21740C692[v54] != v52)
          {
            if (++v54 == 20) {
              return a9;
            }
          }
        }
        else
        {
          uint64_t v53 = 0;
          while (byte_21740C68C[v53] != v52)
          {
            if (++v53 == 6) {
              return a9;
            }
          }
        }
        *a1 = ++v18;
      }
      while (v18 != a2);
    }
LABEL_63:
    *a8 = 0;
    if (a5) {
      goto LABEL_68;
    }
    goto LABEL_84;
  }
  *a8 = 0;
LABEL_68:
  sub_216841B74(a1, a4, 16, &v58);
  int v42 = 0;
  int v43 = **a1;
  if (v43 == 43)
  {
LABEL_71:
    sub_216841B74(a1, a4, 16, &v58);
  }
  else if (v43 == 45)
  {
    int v42 = 1;
    goto LABEL_71;
  }
  int v44 = 0;
  do
  {
    int v45 = **a1;
    if ((v45 - 48) > 9) {
      break;
    }
    if (v44 >= 0) {
      unsigned int v46 = v44;
    }
    else {
      unsigned int v46 = -v44;
    }
    int v47 = v45 + 10 * v44 - 48;
    if (v46 < 0x17BB1) {
      int v44 = v47;
    }
  }
  while (!sub_216841B74(a1, a4, 16, &v58));
  if (v42) {
    int v48 = -v44;
  }
  else {
    int v48 = v44;
  }
  v20 += v48;
LABEL_84:
  if (v20) {
    BOOL v49 = v21 == 0;
  }
  else {
    BOOL v49 = 1;
  }
  if (v49)
  {
    if (a3)
    {
      if (!v21) {
        return -0.0;
      }
      return (double)-v21;
    }
    return (double)v21;
  }
  else
  {
    double v50 = COERCE_DOUBLE(sub_216841874(v21, v20));
    if (a3) {
      return -v50;
    }
    else {
      return v50;
    }
  }
}

double pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtodTrimmed(uint64_t a1, int a2, uint64_t a3)
{
  int v3 = a3;
  double v14 = 0.0;
  BOOL v6 = sub_2168423F4(a1, a2, a3, &v14);
  double v7 = v14;
  if (!v6)
  {
    uint64_t v8 = 2 * (*(void *)&v14 & 0xFFFFFFFFFFFFFLL);
    if ((*(void *)&v14 & 0x7FF0000000000000) != 0)
    {
      uint64_t v8 = (2 * (*(void *)&v14 & 0xFFFFFFFFFFFFFLL)) | 0x20000000000000;
      int v9 = ((*(void *)&v14 >> 52) & 0x7FF) - 1076;
    }
    else
    {
      int v9 = -1075;
    }
    int v10 = sub_21684286C(a1, a2, v3, v8 | 1, v9);
    if (v10 & 0x80000000) == 0 && (v10 || (LOBYTE(v7)))
    {
      *(void *)&double v11 = *(void *)&v7 + 1;
      *(void *)&double v12 = *(void *)&v7 - 1;
      if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
        double v12 = 0.0;
      }
      if (v7 < 0.0) {
        double v11 = v12;
      }
      if (v7 == INFINITY) {
        return INFINITY;
      }
      else {
        return v11;
      }
    }
  }
  return v7;
}

BOOL sub_2168423F4(uint64_t a1, int a2, uint64_t a3, double *a4)
{
  if (!a2) {
    goto LABEL_42;
  }
  uint64_t v6 = a3;
  int v7 = a2 + a3;
  if (a2 + (int)a3 >= 310)
  {
    *a4 = INFINITY;
    return 1;
  }
  if (v7 <= -324) {
    goto LABEL_42;
  }
  if (a2 >= 16) {
    goto LABEL_28;
  }
  if (a3 >= 0xFFFFFFEA)
  {
    if (a2 < 1)
    {
      double v10 = 0.0;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        unint64_t v9 = *(char *)(a1 + v8) + 10 * v9 - 48;
        if (v8 + 1 >= a2) {
          break;
        }
        ++v8;
      }
      while (v9 < 0x1999999999999999);
      double v10 = (double)v9;
    }
    double v18 = v10 / dbl_21740C6C8[-(int)a3];
    goto LABEL_81;
  }
  if (a3 <= 0x16)
  {
    if (a2 < 1)
    {
      double v13 = 0.0;
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        unint64_t v12 = *(char *)(a1 + v11) + 10 * v12 - 48;
        if (v11 + 1 >= a2) {
          break;
        }
        ++v11;
      }
      while (v12 < 0x1999999999999999);
      double v13 = (double)v12;
    }
    double v46 = dbl_21740C6C8[a3];
LABEL_80:
    double v18 = v13 * v46;
LABEL_81:
    *a4 = v18;
    return 1;
  }
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v14 = 15 - a2;
    if ((int)a3 - (int)v14 <= 22)
    {
      if (a2 < 1)
      {
        double v17 = 0.0;
      }
      else
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        do
        {
          unint64_t v16 = *(char *)(a1 + v15) + 10 * v16 - 48;
          if (v15 + 1 >= a2) {
            break;
          }
          ++v15;
        }
        while (v16 < 0x1999999999999999);
        double v17 = (double)v16;
      }
      double v13 = v17 * dbl_21740C6C8[v14];
      double v46 = dbl_21740C6C8[(int)a3 - (int)v14];
      goto LABEL_80;
    }
  }
  if (a2 < 1)
  {
    LODWORD(v19) = 0;
    unint64_t v20 = 0;
  }
  else
  {
LABEL_28:
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    do
    {
      uint64_t v21 = *(char *)(a1 + v19++);
      unint64_t v20 = v21 + 10 * v20 - 48;
    }
    while (v19 < a2 && v20 < 0x1999999999999999);
  }
  if (v19 == a2)
  {
    uint64_t v22 = 0;
  }
  else
  {
    if (*(char *)(a1 + (int)v19) > 52) {
      ++v20;
    }
    uint64_t v6 = (v7 - v19);
    uint64_t v22 = 4;
  }
  int v23 = 0;
  if (!(v20 >> 54))
  {
    unint64_t v24 = v20;
    do
    {
      unint64_t v20 = v24 << 10;
      v23 -= 10;
      unint64_t v25 = v24 >> 44;
      v24 <<= 10;
    }
    while (!v25);
  }
  for (; (v20 & 0x8000000000000000) == 0; --v23)
    v20 *= 2;
  if ((int)v6 <= -349)
  {
LABEL_42:
    *a4 = 0.0;
    return 1;
  }
  uint64_t v48 = 0;
  uint64_t v27 = v22 << -(char)v23;
  int v49 = 0;
  int v47 = 0;
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::PowersOfTenCache::GetCachedPowerForDecimalExponent(v6, (uint64_t)&v48, &v47);
  int v28 = v6 - v47;
  if (v6 != v47)
  {
    int v29 = v28 - 1;
    if ((v28 - 1) >= 7) {
      abort();
    }
    v23 += dword_21740C780[v29];
    unint64_t v20 = qword_21740C7A0[v29] * HIDWORD(v20)
        + ((qword_21740C7A0[v29] * (unint64_t)v20) >> 32)
        + ((((qword_21740C7A0[v29] * v20) & 0x80000000uLL) + 0x80000000) >> 32);
    if (19 - a2 < v28) {
      v27 += 4;
    }
  }
  unint64_t v30 = ((v48 * (unint64_t)HIDWORD(v20)) >> 32)
      + HIDWORD(v48) * (unint64_t)HIDWORD(v20)
      + ((HIDWORD(v48) * (unint64_t)v20) >> 32)
      + ((((v48 * (unint64_t)v20) >> 32)
        + (v48 * HIDWORD(v20))
        + (HIDWORD(v48) * v20)
        + 0x80000000) >> 32);
  if (v27) {
    uint64_t v31 = 9;
  }
  else {
    uint64_t v31 = 8;
  }
  if (v30 >> 54)
  {
    int v32 = v23 + v49 + 64;
    unint64_t v33 = ((v48 * (unint64_t)HIDWORD(v20)) >> 32)
        + HIDWORD(v48) * (unint64_t)HIDWORD(v20)
        + ((HIDWORD(v48) * (unint64_t)v20) >> 32)
        + ((((v48 * (unint64_t)v20) >> 32)
          + (v48 * HIDWORD(v20))
          + (HIDWORD(v48) * v20)
          + 0x80000000) >> 32);
  }
  else
  {
    int v32 = v23 + v49 + 64;
    do
    {
      unint64_t v33 = v30 << 10;
      v32 -= 10;
      unint64_t v34 = v30 >> 44;
      v30 <<= 10;
    }
    while (!v34);
  }
  for (uint64_t i = v31 + v27; (v33 & 0x8000000000000000) == 0; --v32)
    v33 *= 2;
  unint64_t v36 = i << (v23 + v49 + 64 - v32);
  int v37 = v32 + 1138;
  if (v32 < -1137) {
    int v37 = 0;
  }
  if (v32 > -1086) {
    int v37 = 53;
  }
  uint64_t v38 = (v36 >> (4 - v37)) + 9;
  BOOL v39 = v37 <= 3;
  if (v37 > 3)
  {
    int v40 = 64 - v37;
  }
  else
  {
    v33 >>= 4 - v37;
    v32 += 4 - v37;
    int v40 = 60;
  }
  if (v39) {
    uint64_t v41 = v38;
  }
  else {
    uint64_t v41 = v36;
  }
  uint64_t v42 = v33 & ~(-1 << v40);
  uint64_t v43 = 8 << (v40 - 1);
  if (8 * v42 < (unint64_t)(v43 + v41)) {
    unint64_t v44 = v33 >> v40;
  }
  else {
    unint64_t v44 = (v33 >> v40) + 1;
  }
  double v45 = COERCE_DOUBLE(sub_216841874(v44, v40 + v32));
  *a4 = v45;
  BOOL result = 1;
  if (v43 - v41 < (unint64_t)(8 * v42) && 8 * v42 < (unint64_t)(v43 + v41)) {
    return v45 == INFINITY;
  }
  return result;
}

uint64_t sub_21684286C(uint64_t a1, int a2, int a3, unint64_t a4, int a5)
{
  v15[0] = 0;
  v14[0] = 0;
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignDecimalString((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v15, a1, a2);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt64(v14, a4);
  if (a3 < 0)
  {
    int v9 = -a3;
    uint64_t v8 = (unsigned __int16 *)v14;
  }
  else
  {
    uint64_t v8 = (unsigned __int16 *)v15;
    int v9 = a3;
  }
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByPowerOfTen(v8, v9);
  if (a5 < 1)
  {
    int v11 = -a5;
    double v10 = v15;
  }
  else
  {
    double v10 = v14;
    int v11 = a5;
  }
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v10, v11);
  return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v14, v12);
}

double pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Strtod(uint64_t a1, int a2, int a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  LODWORD(v6) = 0;
  unsigned int v4 = 0;
  sub_216842988(a1, a2, a3, (uint64_t)v7, (uint64_t)&v5, &v4);
  return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtodTrimmed(v5, v6, v4);
}

uint64_t sub_216842988(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  if (a2 < 1)
  {
LABEL_5:
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    while (*(unsigned char *)(result + v6) == 48)
    {
      if (a2 == ++v6) {
        goto LABEL_5;
      }
    }
    result += v6;
    uint64_t v7 = (a2 - v6);
  }
  uint64_t v8 = (unsigned __int8 *)(v7 + result - 1);
  int v9 = a3 - 1;
  int v10 = v7;
  do
  {
    if (v10 <= 0)
    {
      int v12 = 0;
      int v9 = v7 + a3;
      goto LABEL_15;
    }
    int v11 = *v8--;
    ++v9;
    --v10;
  }
  while (v11 == 48);
  int v12 = v10 + 1;
  if ((v10 + 1) < 0x30D)
  {
LABEL_15:
    *(void *)a5 = result;
    *(_DWORD *)(a5 + 8) = v12;
    *a6 = v9;
    return result;
  }
  for (uint64_t i = 0; i != 779; ++i)
    *(unsigned char *)(a4 + i) = *(unsigned char *)(result + i);
  *(unsigned char *)(a4 + 779) = 49;
  *a6 = v10 + v9 - 779;
  *(void *)a5 = a4;
  *(_DWORD *)(a5 + 8) = 780;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Strtof(uint64_t a1, int a2, int a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  LODWORD(v6) = 0;
  unsigned int v4 = 0;
  sub_216842988(a1, a2, a3, (uint64_t)v7, (uint64_t)&v5, &v4);
  return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtofTrimmed(v5, v6, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtofTrimmed(uint64_t a1, int a2, uint64_t a3)
{
  int v3 = a3;
  double v22 = 0.0;
  uint64_t result = sub_2168423F4(a1, a2, a3, &v22);
  if (v22 >= 3.40282347e38)
  {
    if (v22 >= 3.40282357e38) {
      int v8 = 2139095040;
    }
    else {
      int v8 = 2139095039;
    }
    float v7 = *(float *)&v8;
  }
  else
  {
    float v7 = v22;
  }
  if (v22 == v7) {
    return result;
  }
  if (v22 == INFINITY)
  {
    uint64_t v9 = -1;
    double v10 = INFINITY;
    goto LABEL_19;
  }
  if ((*(void *)&v22 & 0x8000000000000000) == 0)
  {
    *(void *)&double v10 = *(void *)&v22 + 1;
    if (v22 != 0.0)
    {
      uint64_t v9 = -1;
      goto LABEL_19;
    }
    double v11 = -0.0;
LABEL_20:
    float v12 = v11;
    goto LABEL_25;
  }
  if ((*(void *)&v22 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    *(void *)&double v10 = *(void *)&v22 - 1;
    if (v22 == -INFINITY)
    {
      double v11 = -INFINITY;
      goto LABEL_20;
    }
  }
  else
  {
    double v10 = 0.0;
  }
  uint64_t v9 = 1;
LABEL_19:
  *(void *)&double v11 = v9 + *(void *)&v22;
  if (COERCE_DOUBLE(v9 + *(void *)&v22) < 3.40282347e38) {
    goto LABEL_20;
  }
  if (v11 >= 3.40282357e38) {
    int v13 = 2139095040;
  }
  else {
    int v13 = 2139095039;
  }
  float v12 = *(float *)&v13;
LABEL_25:
  if (v10 < 3.40282347e38)
  {
    float v14 = v10;
    if (result) {
      goto LABEL_44;
    }
LABEL_32:
    if (v10 == INFINITY) {
      goto LABEL_33;
    }
    if ((*(void *)&v10 & 0x8000000000000000) != 0)
    {
      if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      {
        double v18 = 0.0;
        goto LABEL_43;
      }
      uint64_t v17 = -1;
    }
    else
    {
      uint64_t v17 = 1;
    }
    *(void *)&double v18 = v17 + *(void *)&v10;
    if (v18 >= 3.40282347e38)
    {
      if (v18 < 3.40282357e38)
      {
        int v16 = 2139095039;
        goto LABEL_34;
      }
LABEL_33:
      int v16 = 2139095040;
LABEL_34:
      float v14 = *(float *)&v16;
      goto LABEL_44;
    }
LABEL_43:
    float v14 = v18;
    goto LABEL_44;
  }
  if (v10 >= 3.40282357e38) {
    int v15 = 2139095040;
  }
  else {
    int v15 = 2139095039;
  }
  float v14 = *(float *)&v15;
  if ((result & 1) == 0) {
    goto LABEL_32;
  }
LABEL_44:
  if (v12 != v14)
  {
    if (v12 == 0.0)
    {
      unint64_t v19 = 0x10000000000000;
      int v20 = -202;
    }
    else
    {
      if ((LODWORD(v12) & 0x7F800000) != 0) {
        int v21 = (2 * (LODWORD(v12) & 0x7FFFFF)) | 0x1000000;
      }
      else {
        int v21 = 2 * (LODWORD(v12) & 0x7FFFFF);
      }
      unint64_t v19 = v21 | 1u;
      if ((LODWORD(v12) & 0x7F800000) != 0) {
        int v20 = (LODWORD(v12) >> 23) - 151;
      }
      else {
        int v20 = -150;
      }
    }
    return sub_21684286C(a1, a2, v3, v19, v20);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_versionNumber(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  return 10902;
}

const char *pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_versionString(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  return "1.9.2";
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compressBound(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  if (this <= 0x7E000000) {
    return this + this / 0xFF + 16;
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_sizeofState(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  return 16416;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *__src, char *a3, char *a4, signed int a5, int a6)
{
  unsigned int v8 = a4;
  double v10 = 0;
  v248 = __src;
  if (this && (this & 7) == 0)
  {
    bzero(this, 0x4020uLL);
    __src = v248;
    double v10 = this;
  }
  float v12 = (_DWORD *)((char *)v10 + 0x4000);
  if (a6 <= 1) {
    int v13 = 1;
  }
  else {
    int v13 = a6;
  }
  if (v8 <= 0x7E000000) {
    signed int v14 = v8 + v8 / 0xFF + 16;
  }
  else {
    signed int v14 = 0;
  }
  uint64_t v15 = *v12;
  int v16 = &__src[-v15];
  if (v14 <= a5)
  {
    if ((int)v8 <= 65546)
    {
      if (v8 > 0x7E000000) {
        return 0;
      }
      unsigned int v63 = &__src[v8];
      *((_DWORD *)v10 + 4102) += v8;
      _DWORD *v12 = v15 + v8;
      *((_WORD *)v10 + 8195) = 3;
      unint64_t v19 = __src;
      int v64 = a3;
      if (v8 < 0xD) {
        goto LABEL_244;
      }
      unsigned int v238 = v8;
      unint64_t v65 = v63 - 11;
      *((_WORD *)v10 + ((-1640531535 * *(_DWORD *)__src) >> 19)) = v15;
      int v66 = v13 << 6;
      unint64_t v67 = (unint64_t)(v63 - 12);
      v230 = v63 - 8;
      v232 = v63 - 5;
      int v242 = (int)a3;
      v245 = &__src[v8];
      v228 = v63 - 6;
      unint64_t v19 = __src;
      int v64 = a3;
      int v235 = v13 << 6;
LABEL_71:
      int v68 = v19 + 1;
      int v69 = *(_DWORD *)(v19 + 1);
      int v70 = 1;
      int v71 = v66;
      do
      {
        char v72 = v68;
        int v68 = (_DWORD *)((char *)v68 + v70);
        if (v68 > (_DWORD *)v65) {
          goto LABEL_243;
        }
        int v70 = v71++ >> 6;
        unsigned int v73 = (-1640531535 * v69) >> 19;
        uint64_t v74 = *((unsigned __int16 *)v10 + v73);
        int v69 = *v68;
        *((_WORD *)v10 + v73) = (_WORD)v72 - (_WORD)v16;
      }
      while (*(_DWORD *)&v16[v74] != *v72);
      uint64_t v75 = 0;
      uint64_t v76 = &v16[v74];
      int v77 = v72 - v19;
      int v78 = v72 - v19 - 15;
      char v79 = (_BYTE)v72 - (_BYTE)v19 - 14;
      int v80 = v78;
      do
      {
        int v81 = v80;
        int v82 = v75;
        unint64_t v83 = &v76[v75];
        char v84 = (char *)v72 + v75;
        if (&v76[v75] <= __src || v84 <= v19) {
          break;
        }
        --v80;
        --v75;
      }
      while (*(v84 - 1) == *(v83 - 1));
      unsigned int v86 = v84 - v19;
      unint64_t v87 = v64 + 1;
      if ((v77 + v82) < 0xF)
      {
        *int v64 = 16 * v86;
      }
      else
      {
        char v88 = v82 + v78;
        *int v64 = -16;
        if (v82 + v78 > 254)
        {
          if (v81 >= 509) {
            int v89 = 509;
          }
          else {
            int v89 = v81;
          }
          unsigned int v90 = v77 - v89 + v82 + 239;
          char v217 = v79;
          memset(v87, 255, v90 / 0xFF + 1);
          unsigned int v86 = v84 - v19;
          __src = v248;
          unint64_t v87 = &v64[v90 / 0xFFuLL + 2];
          char v88 = v90 / 0xFF + v217 + v82;
        }
        *v87++ = v88;
      }
      unint64_t v91 = &v87[v86];
      do
      {
        uint64_t v92 = *(void *)v19;
        v19 += 8;
        *(void *)unint64_t v87 = v92;
        v87 += 8;
      }
      while (v87 < v91);
      while (1)
      {
        *(_WORD *)unint64_t v91 = (_WORD)v84 - (_WORD)v83;
        unint64_t v95 = v91 + 2;
        unint64_t v96 = v84 + 4;
        uint64_t v94 = v83 + 4;
        if (v67 <= (unint64_t)(v84 + 4))
        {
          unint64_t v93 = v84 + 4;
          goto LABEL_108;
        }
        unint64_t v97 = *v96 ^ *v94;
        if (v97) {
          break;
        }
        unint64_t v93 = v84 + 12;
        uint64_t v94 = v83 + 12;
LABEL_108:
        while ((unint64_t)v93 < v67)
        {
          unint64_t v99 = *v93 ^ *v94;
          if (v99)
          {
            unint64_t v93 = (void *)((char *)v93 + (__clz(__rbit64(v99)) >> 3));
            goto LABEL_112;
          }
          ++v93;
          ++v94;
        }
        if (v93 < (void *)v230 && *(_DWORD *)v94 == *(_DWORD *)v93)
        {
          unint64_t v93 = (void *)((char *)v93 + 4);
          uint64_t v94 = (void *)((char *)v94 + 4);
        }
        if (v93 < (void *)v228 && *(unsigned __int16 *)v94 == *(unsigned __int16 *)v93)
        {
          unint64_t v93 = (void *)((char *)v93 + 2);
          uint64_t v94 = (void *)((char *)v94 + 2);
        }
        if (v93 < (void *)v232 && *(unsigned __int8 *)v94 == *(unsigned __int8 *)v93) {
          LODWORD(v93) = v93 + 1;
        }
LABEL_112:
        unsigned int v98 = v93 - v96;
        v84 += v98 + 4;
        unsigned int v100 = v98 - 15;
        if (v98 < 0xF) {
          goto LABEL_116;
        }
        *v64 += 15;
        *(_DWORD *)unint64_t v95 = -1;
        if (v100 >= 0x3FC)
        {
          unint64_t v101 = v91 + 6;
          __int16 v102 = v98 - 1035;
          unsigned int v103 = (v98 - 1035) / 0x3FC;
          uint64_t v104 = 2 * v103;
          memset(v91 + 6, 255, v104 * 2 + 4);
          __src = v248;
          LOWORD(v100) = v102 - 1020 * v103;
          unint64_t v95 = (char *)&v101[v104];
        }
        unint64_t v105 = &v95[(unsigned __int16)v100 / 0xFFu];
        *unint64_t v105 = v100 + (unsigned __int16)v100 / 0xFFu;
        unint64_t v95 = v105 + 1;
LABEL_117:
        if (v84 >= v65)
        {
          unint64_t v19 = v84;
          int v64 = v95;
          LODWORD(a3) = v242;
LABEL_243:
          unsigned int v8 = v238;
          unsigned int v63 = v245;
LABEL_244:
          size_t v206 = v63 - v19;
          unint64_t v207 = v63 - v19 - 15;
          if ((unint64_t)(v63 - v19) < 0xF)
          {
            *int v64 = 16 * v206;
          }
          else
          {
            *int v64 = -16;
            v208 = v64 + 1;
            if (v207 >= 0xFF)
            {
              unint64_t v209 = &__src[v8] - v19 - 270;
              memset(v208, 255, v209 / 0xFF + 1);
              unint64_t v207 = v209 % 0xFF;
              v208 = &v64[v209 / 0xFF + 2];
            }
            char *v208 = v207;
            int v64 = v208;
          }
          v210 = v64 + 1;
          goto LABEL_260;
        }
        *((_WORD *)v10 + ((-1640531535 * *(_DWORD *)(v84 - 2)) >> 19)) = (_WORD)v84 - 2 - (_WORD)v16;
        unsigned int v106 = (-1640531535 * *(_DWORD *)v84) >> 19;
        unint64_t v83 = &v16[*((unsigned __int16 *)v10 + v106)];
        *((_WORD *)v10 + v106) = (_WORD)v84 - (_WORD)v16;
        if (*(_DWORD *)v83 != *(_DWORD *)v84)
        {
          unint64_t v19 = v84;
          int v64 = v95;
          LODWORD(a3) = v242;
          int v66 = v235;
          goto LABEL_71;
        }
        *unint64_t v95 = 0;
        unint64_t v91 = v95 + 1;
        int v64 = v95;
      }
      unsigned int v98 = __clz(__rbit64(v97)) >> 3;
      v84 += v98 + 4;
LABEL_116:
      *v64 += v98;
      goto LABEL_117;
    }
    if (v8 > 0x7E000000) {
      return 0;
    }
    uint64_t v226 = v8;
    uint64_t v157 = &__src[v8];
    unint64_t v158 = (unint64_t)(v157 - 11);
    v223 = v157 - 5;
    *((_DWORD *)v10 + 4102) += v8;
    _DWORD *v12 = v15 + v8;
    *((_WORD *)v10 + 8195) = 2;
    unint64_t v159 = __src + 2;
    *(_DWORD *)((char *)v10 + (((0xCF1BBCDCBB000000 * *(void *)__src) >> 50) & 0x3FFC)) = v15;
    int v160 = v13 << 6;
    unint64_t v161 = (unint64_t)(v157 - 12);
    v240 = v157;
    int v243 = (int)a3;
    v219 = v157 - 6;
    v221 = v157 - 8;
    unint64_t v162 = a3;
    uint64_t v114 = (uint64_t *)__src;
    int v247 = v13 << 6;
LABEL_184:
    unint64_t v163 = (_DWORD *)((char *)v114 + 1);
    uint64_t v164 = *(uint64_t *)((char *)v114 + 1);
    int v165 = v160;
    while (1)
    {
      uint64_t v166 = v159;
      unint64_t v167 = ((0xCF1BBCDCBB000000 * v164) >> 50) & 0x3FFC;
      uint64_t v168 = *(unsigned int *)((char *)v10 + v167);
      uint64_t v164 = *v166;
      *(_DWORD *)((char *)v10 + v167) = v163 - v16;
      if ((int)v168 + 0xFFFF >= (v163 - v16) && *(_DWORD *)&v16[v168] == *v163) {
        break;
      }
      unint64_t v159 = (char *)v166 + (v165++ >> 6);
      unint64_t v163 = v166;
      if ((unint64_t)v159 > v158) {
        goto LABEL_236;
      }
    }
    uint64_t v169 = 0;
    uint64_t v170 = &v16[v168];
    int v171 = v163 - v114;
    int v172 = v163 - v114 - 15;
    char v173 = (_BYTE)v163 - (_BYTE)v114 - 14;
    int v174 = v172;
    do
    {
      int v175 = v174;
      int v176 = v169;
      v177 = &v170[v169];
      unint64_t v178 = (uint64_t *)((char *)v163 + v169);
      if (&v170[v169] <= __src || v178 <= v114) {
        break;
      }
      --v174;
      --v169;
    }
    while (*((unsigned __int8 *)v178 - 1) == *(v177 - 1));
    int v180 = v178 - v114;
    long long v181 = v162 + 1;
    if ((v171 + v176) < 0xF)
    {
      *unint64_t v162 = 16 * v180;
    }
    else
    {
      char v182 = v176 + v172;
      *unint64_t v162 = -16;
      if (v176 + v172 > 254)
      {
        if (v175 >= 509) {
          int v183 = 509;
        }
        else {
          int v183 = v175;
        }
        unsigned int v184 = v171 - v183 + v176 + 239;
        char v233 = v173;
        memset(v181, 255, v184 / 0xFF + 1);
        int v180 = v178 - v114;
        __src = v248;
        long long v181 = &v162[v184 / 0xFFuLL + 2];
        char v182 = v184 / 0xFF + v233 + v176;
      }
      *v181++ = v182;
    }
    uint64_t v185 = &v181[v180];
    do
    {
      uint64_t v186 = *v114++;
      *(void *)long long v181 = v186;
      v181 += 8;
    }
    while (v181 < v185);
    v187 = v162;
    uint64_t v114 = v178;
    while (1)
    {
      *(_WORD *)uint64_t v185 = (_WORD)v114 - (_WORD)v177;
      unint64_t v162 = v185 + 2;
      v188 = (uint64_t *)((char *)v114 + 4);
      v189 = v177 + 4;
      if (v161 > (unint64_t)v114 + 4) {
        break;
      }
      v192 = (uint64_t *)((char *)v114 + 4);
LABEL_211:
      while ((unint64_t)v192 < v161)
      {
        unint64_t v193 = *v192 ^ *v189;
        if (v193)
        {
          v192 = (void *)((char *)v192 + (__clz(__rbit64(v193)) >> 3));
          goto LABEL_215;
        }
        ++v192;
        ++v189;
      }
      if (v192 < (void *)v221 && *(_DWORD *)v189 == *(_DWORD *)v192)
      {
        v192 = (void *)((char *)v192 + 4);
        v189 = (void *)((char *)v189 + 4);
      }
      if (v192 < (void *)v219 && *(unsigned __int16 *)v189 == *(unsigned __int16 *)v192)
      {
        v192 = (void *)((char *)v192 + 2);
        v189 = (void *)((char *)v189 + 2);
      }
      if (v192 < (void *)v223 && *(unsigned __int8 *)v189 == *(unsigned __int8 *)v192) {
        LODWORD(v192) = v192 + 1;
      }
LABEL_215:
      unsigned int v191 = v192 - v188;
      uint64_t v114 = (uint64_t *)((char *)v114 + v191 + 4);
      unsigned int v194 = v191 - 15;
      if (v191 < 0xF) {
        goto LABEL_219;
      }
      *v187 += 15;
      *(_DWORD *)unint64_t v162 = -1;
      if (v194 >= 0x3FC)
      {
        v195 = v185 + 6;
        __int16 v196 = v191 - 1035;
        unsigned int v197 = (v191 - 1035) / 0x3FC;
        uint64_t v198 = 2 * v197;
        memset(v185 + 6, 255, v198 * 2 + 4);
        __src = v248;
        LOWORD(v194) = v196 - 1020 * v197;
        unint64_t v162 = (char *)&v195[v198];
      }
      v199 = &v162[(unsigned __int16)v194 / 0xFFu];
      char *v199 = v194 + (unsigned __int16)v194 / 0xFFu;
      unint64_t v162 = v199 + 1;
LABEL_220:
      if ((unint64_t)v114 >= v158) {
        goto LABEL_236;
      }
      *(_DWORD *)((char *)v10 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v114 - 2)) >> 50) & 0x3FFC)) = v114 - 2 - v16;
      unint64_t v200 = ((0xCF1BBCDCBB000000 * *v114) >> 50) & 0x3FFC;
      uint64_t v201 = *(unsigned int *)((char *)v10 + v200);
      *(_DWORD *)((char *)v10 + v200) = v114 - v16;
      if ((int)v201 + 0xFFFF < (v114 - v16)
        || (v177 = &v16[v201], *(_DWORD *)&v16[v201] != *(_DWORD *)v114))
      {
        unint64_t v159 = (char *)v114 + 2;
        int v160 = v247;
        if ((unint64_t)v114 + 2 > v158)
        {
LABEL_236:
          size_t v153 = v240 - (char *)v114;
          unint64_t v202 = v240 - (char *)v114 - 15;
          if ((unint64_t)(v240 - (char *)v114) < 0xF)
          {
            *unint64_t v162 = 16 * v153;
          }
          else
          {
            *unint64_t v162 = -16;
            v203 = v162 + 1;
            if (v202 >= 0xFF)
            {
              unint64_t v204 = &__src[v226] - (char *)v114 - 270;
              memset(v203, 255, v204 / 0xFF + 1);
              unint64_t v202 = v204 % 0xFF;
              v203 = &v162[v204 / 0xFF + 2];
            }
            char *v203 = v202;
            unint64_t v162 = v203;
          }
          v205 = v162 + 1;
LABEL_263:
          memcpy(v205, v114, v153);
          return (v205 + v153 - v243);
        }
        goto LABEL_184;
      }
      *unint64_t v162 = 0;
      uint64_t v185 = v162 + 1;
      v187 = v162;
    }
    unint64_t v190 = *v188 ^ *v189;
    if (!v190)
    {
      v192 = (uint64_t *)((char *)v114 + 12);
      v189 = v177 + 12;
      goto LABEL_211;
    }
    unsigned int v191 = __clz(__rbit64(v190)) >> 3;
    uint64_t v114 = (uint64_t *)((char *)v114 + v191 + 4);
LABEL_219:
    *v187 += v191;
    goto LABEL_220;
  }
  if ((int)v8 > 65546)
  {
    if (v8 > 0x7E000000) {
      return 0;
    }
    uint64_t v216 = v8;
    unint64_t v107 = &__src[v8];
    unint64_t v108 = (unint64_t)(v107 - 11);
    v222 = v107 - 5;
    unint64_t v109 = &a3[a5];
    *((_DWORD *)v10 + 4102) += v8;
    _DWORD *v12 = v15 + v8;
    *((_WORD *)v10 + 8195) = 2;
    unint64_t v110 = __src + 2;
    *(_DWORD *)((char *)v10 + (((0xCF1BBCDCBB000000 * *(void *)__src) >> 50) & 0x3FFC)) = v15;
    int v111 = v13 << 6;
    unint64_t v112 = (unint64_t)(v107 - 12);
    v236 = v107;
    v218 = v107 - 6;
    v220 = v107 - 8;
    int v243 = (int)a3;
    v246 = v109;
    uint64_t v113 = a3;
    uint64_t v114 = (uint64_t *)__src;
    int v239 = v13 << 6;
LABEL_122:
    uint64_t v115 = (_DWORD *)((char *)v114 + 1);
    uint64_t v116 = *(uint64_t *)((char *)v114 + 1);
    int v117 = v111;
    while (1)
    {
      uint64_t v118 = v110;
      unint64_t v119 = ((0xCF1BBCDCBB000000 * v116) >> 50) & 0x3FFC;
      uint64_t v120 = *(unsigned int *)((char *)v10 + v119);
      uint64_t v116 = *v118;
      *(_DWORD *)((char *)v10 + v119) = v115 - v16;
      if ((int)v120 + 0xFFFF >= (v115 - v16) && *(_DWORD *)&v16[v120] == *v115) {
        break;
      }
      unint64_t v110 = (char *)v118 + (v117++ >> 6);
      uint64_t v115 = v118;
      if ((unint64_t)v110 > v108)
      {
LABEL_177:
        size_t v153 = v236 - (char *)v114;
        if (&v113[v236 - (char *)v114 + 1 + (v236 - (char *)v114 + 240) / 0xFFuLL] > v109) {
          return 0;
        }
        unint64_t v154 = v153 - 15;
        if (v153 < 0xF)
        {
          *uint64_t v113 = 16 * v153;
        }
        else
        {
          *uint64_t v113 = -16;
          uint64_t v155 = v113 + 1;
          if (v154 >= 0xFF)
          {
            unint64_t v156 = &__src[v216] - (char *)v114 - 270;
            memset(v155, 255, v156 / 0xFF + 1);
            unint64_t v154 = v156 % 0xFF;
            uint64_t v155 = &v113[v156 / 0xFF + 2];
          }
          *uint64_t v155 = v154;
          uint64_t v113 = v155;
        }
        v205 = v113 + 1;
        goto LABEL_263;
      }
    }
    uint64_t v121 = 0;
    uint64_t v122 = &v16[v120];
    int v123 = v115 - v114;
    int v124 = v115 - v114 - 15;
    int v125 = v124;
    do
    {
      int v126 = v125;
      int v127 = v121;
      uint64_t v128 = &v122[v121];
      uint64_t v129 = (uint64_t *)((char *)v115 + v121);
      if (&v122[v121] <= __src || v129 <= v114) {
        break;
      }
      --v125;
      --v121;
    }
    while (*((unsigned __int8 *)v129 - 1) == *(v128 - 1));
    int v131 = v129 - v114;
    uint64_t v132 = v113 + 1;
    if (&v113[(v129 - v114) + 9 + (v123 + v127) / 0xFFuLL] > v109) {
      return 0;
    }
    if ((v123 + v127) < 0xF)
    {
      *uint64_t v113 = 16 * v131;
    }
    else
    {
      char v133 = v127 + v124;
      *uint64_t v113 = -16;
      if (v127 + v124 > 254)
      {
        if (v126 >= 509) {
          int v134 = 509;
        }
        else {
          int v134 = v126;
        }
        unsigned int v135 = v123 - v134 + v127 + 239;
        char v225 = v123 - 14;
        memset(v132, 255, v135 / 0xFF + 1);
        int v131 = v129 - v114;
        __src = v248;
        uint64_t v132 = &v113[v135 / 0xFFuLL + 2];
        char v133 = v135 / 0xFF + v225 + v127;
      }
      *v132++ = v133;
    }
    uint64_t v136 = &v132[v131];
    do
    {
      uint64_t v137 = *v114++;
      *(void *)uint64_t v132 = v137;
      v132 += 8;
    }
    while (v132 < v136);
    uint64_t v138 = v113;
    uint64_t v114 = v129;
    while (1)
    {
      *(_WORD *)uint64_t v136 = (_WORD)v114 - (_WORD)v128;
      uint64_t v113 = v136 + 2;
      uint64_t v139 = (uint64_t *)((char *)v114 + 4);
      uint64_t v140 = v128 + 4;
      if (v112 <= (unint64_t)v114 + 4)
      {
        unint64_t v143 = (_DWORD *)v114 + 1;
      }
      else
      {
        unint64_t v141 = *v139 ^ *v140;
        if (v141)
        {
          unsigned int v142 = __clz(__rbit64(v141)) >> 3;
          goto LABEL_165;
        }
        unint64_t v143 = (_DWORD *)v114 + 3;
        uint64_t v140 = v128 + 12;
      }
      if ((unint64_t)v143 >= v112)
      {
LABEL_154:
        if (v143 < (_DWORD *)v220 && *(_DWORD *)v140 == *v143)
        {
          ++v143;
          uint64_t v140 = (void *)((char *)v140 + 4);
        }
        if (v143 < (_DWORD *)v218 && *(unsigned __int16 *)v140 == *(unsigned __int16 *)v143)
        {
          unint64_t v143 = (_DWORD *)((char *)v143 + 2);
          uint64_t v140 = (void *)((char *)v140 + 2);
        }
        if (v143 < (_DWORD *)v222 && *(unsigned __int8 *)v140 == *(unsigned __int8 *)v143) {
          LODWORD(v143) = v143 + 1;
        }
        unsigned int v142 = v143 - v139;
      }
      else
      {
        int v144 = v143 - v114 - 4;
        while (1)
        {
          unint64_t v145 = *(void *)v143 ^ *v140;
          if (v145) {
            break;
          }
          v143 += 2;
          ++v140;
          v144 += 8;
          if ((unint64_t)v143 >= v112) {
            goto LABEL_154;
          }
        }
        unsigned int v142 = (__clz(__rbit64(v145)) >> 3) + v144;
      }
LABEL_165:
      if (&v136[(v142 + 240) / 0xFFuLL + 8] > v109) {
        return 0;
      }
      char v146 = *v138;
      unsigned int v147 = v142 - 15;
      if (v142 < 0xF)
      {
        *uint64_t v138 = v146 + v142;
      }
      else
      {
        *uint64_t v138 = v146 + 15;
        *(_DWORD *)uint64_t v113 = -1;
        if (v147 >= 0x3FC)
        {
          uint64_t v148 = v136 + 6;
          uint64_t v149 = 2 * ((v142 - 1035) / 0x3FC);
          memset(v136 + 6, 255, v149 * 2 + 4);
          __src = v248;
          LOWORD(v147) = (v142 - 1035) % 0x3FC;
          uint64_t v113 = (char *)&v148[v149];
          unint64_t v109 = v246;
        }
        uint64_t v150 = &v113[(unsigned __int16)v147 / 0xFFu];
        *uint64_t v150 = v147 + (unsigned __int16)v147 / 0xFFu;
        uint64_t v113 = v150 + 1;
      }
      uint64_t v114 = (uint64_t *)((char *)v114 + v142 + 4);
      if ((unint64_t)v114 >= v108) {
        goto LABEL_177;
      }
      *(_DWORD *)((char *)v10 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v114 - 2)) >> 50) & 0x3FFC)) = v114 - 2 - v16;
      unint64_t v151 = ((0xCF1BBCDCBB000000 * *v114) >> 50) & 0x3FFC;
      uint64_t v152 = *(unsigned int *)((char *)v10 + v151);
      *(_DWORD *)((char *)v10 + v151) = v114 - v16;
      if ((int)v152 + 0xFFFF < (v114 - v16)
        || (uint64_t v128 = &v16[v152], *(_DWORD *)&v16[v152] != *(_DWORD *)v114))
      {
        unint64_t v110 = (char *)v114 + 2;
        int v111 = v239;
        if ((unint64_t)v114 + 2 > v108) {
          goto LABEL_177;
        }
        goto LABEL_122;
      }
      *uint64_t v113 = 0;
      uint64_t v136 = v113 + 1;
      uint64_t v138 = v113;
    }
  }
  if (v8 > 0x7E000000) {
    return 0;
  }
  uint64_t v17 = &__src[v8];
  double v18 = &a3[a5];
  *((_DWORD *)v10 + 4102) += v8;
  _DWORD *v12 = v15 + v8;
  *((_WORD *)v10 + 8195) = 3;
  unint64_t v19 = __src;
  int v20 = a3;
  if (v8 < 0xD) {
    goto LABEL_252;
  }
  v234 = &__src[v8];
  unsigned int v237 = v8;
  int v21 = v17 - 11;
  *((_WORD *)v10 + ((-1640531535 * *(_DWORD *)__src) >> 19)) = v15;
  int v22 = v13 << 6;
  unint64_t v23 = (unint64_t)(v17 - 12);
  v227 = v17 - 8;
  v229 = v17 - 5;
  v224 = v17 - 6;
  unint64_t v19 = __src;
  int v20 = a3;
  int v241 = (int)a3;
  v244 = v17 - 11;
  int v231 = v13 << 6;
LABEL_15:
  unint64_t v24 = v19 + 1;
  int v25 = *(_DWORD *)(v19 + 1);
  int v26 = 1;
  int v27 = v22;
  do
  {
    int v28 = v24;
    unint64_t v24 = (_DWORD *)((char *)v24 + v26);
    if (v24 > (_DWORD *)v21) {
      goto LABEL_251;
    }
    int v26 = v27++ >> 6;
    unsigned int v29 = (-1640531535 * v25) >> 19;
    uint64_t v30 = *((unsigned __int16 *)v10 + v29);
    int v25 = *v24;
    *((_WORD *)v10 + v29) = (_WORD)v28 - (_WORD)v16;
  }
  while (*(_DWORD *)&v16[v30] != *v28);
  uint64_t v31 = 0;
  int v32 = &v16[v30];
  int v33 = v28 - v19;
  int v34 = v28 - v19 - 15;
  int v35 = v34;
  do
  {
    int v36 = v35;
    int v37 = v31;
    uint64_t v38 = &v32[v31];
    BOOL v39 = (char *)v28 + v31;
    if (&v32[v31] <= __src || v39 <= v19) {
      break;
    }
    --v35;
    --v31;
  }
  while (*(v39 - 1) == *(v38 - 1));
  unsigned int v41 = v39 - v19;
  uint64_t v42 = v20 + 1;
  if (&v20[(v39 - v19) + 9 + (v33 + v37) / 0xFFuLL] > v18) {
    return 0;
  }
  if ((v33 + v37) < 0xF)
  {
    *int v20 = 16 * v41;
  }
  else
  {
    char v43 = v37 + v34;
    *int v20 = -16;
    if (v37 + v34 > 254)
    {
      if (v36 >= 509) {
        int v44 = 509;
      }
      else {
        int v44 = v36;
      }
      unsigned int v45 = v33 - v44 + v37 + 239;
      char v215 = v33 - 14;
      memset(v42, 255, v45 / 0xFF + 1);
      unsigned int v41 = v39 - v19;
      __src = v248;
      uint64_t v42 = &v20[v45 / 0xFFuLL + 2];
      char v43 = v45 / 0xFF + v215 + v37;
    }
    *v42++ = v43;
  }
  double v46 = &v42[v41];
  do
  {
    uint64_t v47 = *(void *)v19;
    v19 += 8;
    *(void *)uint64_t v42 = v47;
    v42 += 8;
  }
  while (v42 < v46);
  while (1)
  {
    *(_WORD *)double v46 = (_WORD)v39 - (_WORD)v38;
    int v49 = v46 + 2;
    double v50 = v39 + 4;
    unint64_t v51 = v38 + 4;
    if (v23 <= (unint64_t)(v39 + 4))
    {
      uint64_t v48 = v39 + 4;
    }
    else
    {
      unint64_t v52 = *v50 ^ *v51;
      if (v52)
      {
        unsigned int v53 = __clz(__rbit64(v52)) >> 3;
        goto LABEL_58;
      }
      uint64_t v48 = v39 + 12;
      unint64_t v51 = v38 + 12;
    }
    if ((unint64_t)v48 >= v23)
    {
LABEL_47:
      if (v48 < (_DWORD *)v227 && *(_DWORD *)v51 == *v48)
      {
        ++v48;
        unint64_t v51 = (void *)((char *)v51 + 4);
      }
      if (v48 < (_DWORD *)v224 && *(unsigned __int16 *)v51 == *(unsigned __int16 *)v48)
      {
        uint64_t v48 = (_DWORD *)((char *)v48 + 2);
        unint64_t v51 = (void *)((char *)v51 + 2);
      }
      if (v48 < (_DWORD *)v229 && *(unsigned __int8 *)v51 == *(unsigned __int8 *)v48) {
        LODWORD(v48) = v48 + 1;
      }
      unsigned int v53 = v48 - v50;
    }
    else
    {
      int v54 = v48 - v39 - 4;
      while (1)
      {
        unint64_t v55 = *(void *)v48 ^ *v51;
        if (v55) {
          break;
        }
        v48 += 2;
        ++v51;
        v54 += 8;
        if ((unint64_t)v48 >= v23) {
          goto LABEL_47;
        }
      }
      unsigned int v53 = (__clz(__rbit64(v55)) >> 3) + v54;
    }
LABEL_58:
    if (&v46[(v53 + 240) / 0xFFuLL + 8] > v18) {
      return 0;
    }
    char v56 = *v20;
    unsigned int v57 = v53 - 15;
    if (v53 < 0xF)
    {
      *int v20 = v56 + v53;
    }
    else
    {
      *int v20 = v56 + 15;
      *(_DWORD *)int v49 = -1;
      if (v57 >= 0x3FC)
      {
        unsigned int v58 = v46 + 6;
        unsigned int v59 = v18;
        uint64_t v60 = 2 * ((v53 - 1035) / 0x3FC);
        memset(v46 + 6, 255, v60 * 2 + 4);
        __src = v248;
        LOWORD(v57) = (v53 - 1035) % 0x3FC;
        int v49 = (char *)&v58[v60];
        double v18 = v59;
        int v21 = v244;
      }
      double v61 = &v49[(unsigned __int16)v57 / 0xFFu];
      *double v61 = v57 + (unsigned __int16)v57 / 0xFFu;
      int v49 = v61 + 1;
    }
    v39 += v53 + 4;
    if (v39 >= v21) {
      break;
    }
    *((_WORD *)v10 + ((-1640531535 * *(_DWORD *)(v39 - 2)) >> 19)) = (_WORD)v39 - 2 - (_WORD)v16;
    unsigned int v62 = (-1640531535 * *(_DWORD *)v39) >> 19;
    uint64_t v38 = &v16[*((unsigned __int16 *)v10 + v62)];
    *((_WORD *)v10 + v62) = (_WORD)v39 - (_WORD)v16;
    if (*(_DWORD *)v38 != *(_DWORD *)v39)
    {
      unint64_t v19 = v39;
      int v20 = v49;
      LODWORD(a3) = v241;
      int v22 = v231;
      goto LABEL_15;
    }
    char *v49 = 0;
    double v46 = v49 + 1;
    int v20 = v49;
  }
  unint64_t v19 = v39;
  int v20 = v49;
  LODWORD(a3) = v241;
LABEL_251:
  uint64_t v17 = v234;
  unsigned int v8 = v237;
LABEL_252:
  size_t v206 = v17 - v19;
  if (&v20[v17 - v19 + 1 + (v17 - v19 + 240) / 0xFFuLL] > v18) {
    return 0;
  }
  unint64_t v212 = v206 - 15;
  if (v206 < 0xF)
  {
    *int v20 = 16 * v206;
  }
  else
  {
    *int v20 = -16;
    v213 = v20 + 1;
    if (v212 >= 0xFF)
    {
      unint64_t v214 = &__src[v8] - v19 - 270;
      memset(v213, 255, v214 / 0xFF + 1);
      unint64_t v212 = v214 % 0xFF;
      v213 = &v20[v214 / 0xFF + 2];
    }
    char *v213 = v212;
    int v20 = v213;
  }
  v210 = v20 + 1;
LABEL_260:
  memcpy(v210, v19, v206);
  return (v210 + v206 - a3);
}

pxrInternal__aapl__pxrReserved__::pxr_lz4 *pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_initStream(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, unint64_t a2)
{
  uint64_t result = 0;
  if (this && a2 >> 5 >= 0x201 && (this & 7) == 0)
  {
    bzero(this, 0x4020uLL);
    return this;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState_fastReset(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *a2, char *a3, char *a4, signed int a5, int a6)
{
  unsigned int v6 = a4;
  float v7 = a3;
  unsigned int v8 = this;
  uint64_t v9 = (unsigned int *)((char *)this + 0x4000);
  if (a6 <= 1) {
    int v10 = 1;
  }
  else {
    int v10 = a6;
  }
  if (a4 <= 0x7E000000) {
    signed int v11 = a4 + a4 / 0xFF + 16;
  }
  else {
    signed int v11 = 0;
  }
  v361 = a2;
  if (v11 <= a5)
  {
    if ((int)a4 <= 65546)
    {
      if (*((_WORD *)this + 8194))
      {
        bzero(this, 0x4020uLL);
        a2 = v361;
LABEL_347:
        if (v6 > 0x7E000000) {
          return 0;
        }
        v263 = &a2[v6];
        v9[6] = v6;
        *uint64_t v9 = v6;
        *((_WORD *)v9 + 3) = 3;
        uint64_t v122 = a2;
        int v174 = (char *)v7;
        if (v6 < 0xD) {
          goto LABEL_402;
        }
        v354 = &a2[v6];
        v264 = v263 - 11;
        *((_WORD *)v8 + ((-1640531535 * *(_DWORD *)a2) >> 19)) = 0;
        int v265 = v10 << 6;
        int v174 = (char *)v7;
        unint64_t v266 = (unint64_t)(v263 - 12);
        v334 = v263 - 8;
        v338 = v263 - 5;
        v330 = v263 - 6;
        uint64_t v122 = a2;
        int v359 = (int)v174;
        int v342 = v10 << 6;
LABEL_351:
        v267 = v122 + 1;
        int v268 = *(_DWORD *)(v122 + 1);
        int v269 = 1;
        int v270 = v265;
        do
        {
          v271 = v267;
          v267 = (_DWORD *)((char *)v267 + v269);
          if (v267 > (_DWORD *)v264) {
            goto LABEL_401;
          }
          int v269 = v270++ >> 6;
          unsigned int v272 = (-1640531535 * v268) >> 19;
          uint64_t v273 = *((unsigned __int16 *)v8 + v272);
          int v268 = *v267;
          *((_WORD *)v8 + v272) = (_WORD)v271 - (_WORD)a2;
        }
        while (*(_DWORD *)&a2[v273] != *v271);
        uint64_t v274 = 0;
        v275 = &a2[v273];
        int v276 = v271 - v122;
        int v277 = v271 - v122 - 15;
        char v278 = (_BYTE)v271 - (_BYTE)v122 - 14;
        int v279 = v277;
        do
        {
          int v280 = v279;
          int v281 = v274;
          v282 = &v275[v274];
          v283 = (_DWORD *)((char *)v271 + v274);
          if (&v275[v274] <= a2 || v283 <= (_DWORD *)v122) {
            break;
          }
          --v279;
          --v274;
        }
        while (*((unsigned __int8 *)v283 - 1) == *(v282 - 1));
        unsigned int v285 = v283 - v122;
        v286 = v174 + 1;
        if ((v276 + v281) < 0xF)
        {
          *int v174 = 16 * v285;
        }
        else
        {
          char v287 = v281 + v277;
          *int v174 = -16;
          if (v281 + v277 > 254)
          {
            if (v280 >= 509) {
              int v288 = 509;
            }
            else {
              int v288 = v280;
            }
            unsigned int v289 = v276 - v288 + v281 + 239;
            char v321 = v278;
            memset(v286, 255, v289 / 0xFF + 1);
            a2 = v361;
            v286 = &v174[v289 / 0xFFuLL + 2];
            char v287 = v289 / 0xFF + v321 + v281;
          }
          *v286++ = v287;
        }
        v290 = &v286[v285];
        do
        {
          uint64_t v291 = *(void *)v122;
          v122 += 8;
          *(void *)v286 = v291;
          v286 += 8;
        }
        while (v286 < v290);
        while (1)
        {
          *(_WORD *)v290 = (_WORD)v283 - (_WORD)v282;
          v294 = v290 + 2;
          v295 = v283 + 1;
          v293 = v282 + 4;
          if (v266 <= (unint64_t)(v283 + 1))
          {
            v292 = v283 + 1;
            goto LABEL_388;
          }
          unint64_t v296 = *v295 ^ *v293;
          if (v296) {
            break;
          }
          v292 = v283 + 3;
          v293 = v282 + 12;
LABEL_388:
          while ((unint64_t)v292 < v266)
          {
            unint64_t v298 = *v292 ^ *v293;
            if (v298)
            {
              v292 = (void *)((char *)v292 + (__clz(__rbit64(v298)) >> 3));
              goto LABEL_392;
            }
            ++v292;
            ++v293;
          }
          if (v292 < (void *)v334 && *(_DWORD *)v293 == *(_DWORD *)v292)
          {
            v292 = (void *)((char *)v292 + 4);
            v293 = (void *)((char *)v293 + 4);
          }
          if (v292 < (void *)v330 && *(unsigned __int16 *)v293 == *(unsigned __int16 *)v292)
          {
            v292 = (void *)((char *)v292 + 2);
            v293 = (void *)((char *)v293 + 2);
          }
          if (v292 < (void *)v338 && *(unsigned __int8 *)v293 == *(unsigned __int8 *)v292) {
            LODWORD(v292) = v292 + 1;
          }
LABEL_392:
          unsigned int v297 = v292 - v295;
          v283 = (_DWORD *)((char *)v283 + v297 + 4);
          unsigned int v299 = v297 - 15;
          if (v297 < 0xF) {
            goto LABEL_396;
          }
          *v174 += 15;
          *(_DWORD *)v294 = -1;
          if (v299 >= 0x3FC)
          {
            v300 = v290 + 6;
            __int16 v301 = v297 - 1035;
            unsigned int v302 = (v297 - 1035) / 0x3FC;
            uint64_t v303 = 2 * v302;
            memset(v290 + 6, 255, v303 * 2 + 4);
            a2 = v361;
            LOWORD(v299) = v301 - 1020 * v302;
            v294 = (char *)&v300[v303];
          }
          v304 = &v294[(unsigned __int16)v299 / 0xFFu];
          char *v304 = v299 + (unsigned __int16)v299 / 0xFFu;
          v294 = v304 + 1;
LABEL_397:
          if (v283 >= (_DWORD *)v264)
          {
            uint64_t v122 = (const char *)v283;
            int v174 = v294;
LABEL_401:
            v263 = v354;
            LODWORD(v7) = v359;
LABEL_402:
            size_t v168 = v263 - v122;
            goto LABEL_403;
          }
          *((_WORD *)v8 + ((-1640531535 * *(_DWORD *)((char *)v283 - 2)) >> 19)) = (_WORD)v283
                                                                                               - 2
                                                                                               - (_WORD)a2;
          unsigned int v305 = (-1640531535 * *v283) >> 19;
          v282 = &a2[*((unsigned __int16 *)v8 + v305)];
          *((_WORD *)v8 + v305) = (_WORD)v283 - (_WORD)a2;
          if (*(_DWORD *)v282 != *v283)
          {
            uint64_t v122 = (const char *)v283;
            int v174 = v294;
            int v265 = v342;
            goto LABEL_351;
          }
          char *v294 = 0;
          v290 = v294 + 1;
          int v174 = v294;
        }
        unsigned int v297 = __clz(__rbit64(v296)) >> 3;
        v283 = (_DWORD *)((char *)v283 + v297 + 4);
LABEL_396:
        *v174 += v297;
        goto LABEL_397;
      }
      uint64_t v17 = (void *)((char *)this + 16390);
      if (*((_WORD *)this + 8195) == 3)
      {
        if ((int)a4 <= 4095)
        {
          unsigned int v18 = *v9;
          if (*v9 + a4 < 0xFFFF) {
            goto LABEL_285;
          }
        }
      }
      else if (!*((_WORD *)this + 8195))
      {
        unsigned int v18 = *v9;
LABEL_285:
        *((_DWORD *)this + 4102) = 0;
        *(_OWORD *)((char *)this + 16392) = 0u;
        if (!v18) {
          goto LABEL_347;
        }
        if (a4 > 0x7E000000) {
          return 0;
        }
        unint64_t v214 = &a2[(int)a4];
        *((_DWORD *)this + 4102) = a4;
        *uint64_t v9 = v18 + a4;
        *((_WORD *)this + 8195) = 3;
        uint64_t v122 = a2;
        char v215 = a3;
        if (a4 < 0xD)
        {
LABEL_342:
          size_t v168 = v214 - v122;
          unint64_t v260 = v214 - v122 - 15;
          if ((unint64_t)(v214 - v122) < 0xF)
          {
            *char v215 = 16 * v168;
          }
          else
          {
            *char v215 = -16;
            v261 = v215 + 1;
            if (v260 >= 0xFF)
            {
              unint64_t v262 = &a2[v6] - v122 - 270;
              memset(v261, 255, v262 / 0xFF + 1);
              unint64_t v260 = v262 % 0xFF;
              v261 = &v215[v262 / 0xFF + 2];
            }
            char *v261 = v260;
            char v215 = v261;
          }
          v309 = v215 + 1;
          goto LABEL_409;
        }
        uint64_t v216 = &a2[-v18];
        char v215 = a3;
        unint64_t v217 = (unint64_t)(v214 - 11);
        v218 = a2 + 2;
        *((_WORD *)this + ((-1640531535 * *(_DWORD *)a2) >> 19)) = v18;
        int v219 = v10 << 6;
        unint64_t v220 = (unint64_t)(v214 - 12);
        v320 = v214 - 8;
        v324 = v214 - 5;
        v341 = &a2[(int)a4];
        unsigned int v347 = a4;
        v316 = v214 - 6;
        int v358 = (int)a3;
        uint64_t v122 = a2;
        int v353 = v10 << 6;
LABEL_289:
        v221 = v122 + 1;
        int v222 = *(_DWORD *)(v122 + 1);
        int v223 = v219;
        while (1)
        {
          unsigned int v224 = (-1640531535 * v222) >> 19;
          uint64_t v225 = *((unsigned __int16 *)v8 + v224);
          uint64_t v226 = v218;
          int v222 = *v218;
          *((_WORD *)v8 + v224) = (_WORD)v221 - (_WORD)v216;
          if (v18 <= v225 && *(_DWORD *)&v216[v225] == *v221) {
            break;
          }
          v218 = (_DWORD *)((char *)v218 + (v223++ >> 6));
          v221 = v226;
          if ((unint64_t)v218 > v217)
          {
LABEL_341:
            LODWORD(v7) = v358;
            unint64_t v214 = v341;
            goto LABEL_342;
          }
        }
        uint64_t v227 = 0;
        v228 = &v216[v225];
        int v229 = v221 - v122;
        int v230 = v221 - v122 - 15;
        char v231 = (_BYTE)v221 - (_BYTE)v122 - 14;
        int v232 = v230;
        do
        {
          int v233 = v232;
          int v234 = v227;
          int v235 = &v228[v227];
          v236 = (char *)v221 + v227;
          if (&v228[v227] <= a2 || v236 <= v122) {
            break;
          }
          --v232;
          --v227;
        }
        while (*((unsigned __int8 *)v236 - 1) == *(v235 - 1));
        int v238 = v236 - v122;
        int v239 = v215 + 1;
        if ((v229 + v234) < 0xF)
        {
          *char v215 = 16 * v238;
          unsigned int v6 = v347;
        }
        else
        {
          char v240 = v234 + v230;
          *char v215 = -16;
          if (v234 + v230 > 254)
          {
            if (v233 >= 509) {
              int v241 = 509;
            }
            else {
              int v241 = v233;
            }
            unsigned int v242 = v229 - v241 + v234 + 239;
            char v333 = v231;
            memset(v239, 255, v242 / 0xFF + 1);
            int v238 = v236 - v122;
            a2 = v361;
            int v239 = &v215[v242 / 0xFFuLL + 2];
            char v240 = v242 / 0xFF + v333 + v234;
          }
          unsigned int v6 = v347;
          *v239++ = v240;
        }
        int v243 = &v239[v238];
        do
        {
          uint64_t v244 = *(void *)v122;
          v122 += 8;
          *(void *)int v239 = v244;
          v239 += 8;
        }
        while (v239 < v243);
        v245 = v215;
        uint64_t v122 = v236;
        while (1)
        {
          *(_WORD *)int v243 = (_WORD)v122 - (_WORD)v235;
          char v215 = v243 + 2;
          v246 = v122 + 4;
          int v247 = v235 + 4;
          if (v220 > (unint64_t)(v122 + 4)) {
            break;
          }
          v250 = v122 + 4;
LABEL_316:
          while ((unint64_t)v250 < v220)
          {
            unint64_t v251 = *v250 ^ *v247;
            if (v251)
            {
              v250 = (void *)((char *)v250 + (__clz(__rbit64(v251)) >> 3));
              goto LABEL_320;
            }
            ++v250;
            ++v247;
          }
          if (v250 < (void *)v320 && *(_DWORD *)v247 == *(_DWORD *)v250)
          {
            v250 = (void *)((char *)v250 + 4);
            int v247 = (void *)((char *)v247 + 4);
          }
          if (v250 < (void *)v316 && *(unsigned __int16 *)v247 == *(unsigned __int16 *)v250)
          {
            v250 = (void *)((char *)v250 + 2);
            int v247 = (void *)((char *)v247 + 2);
          }
          if (v250 < (void *)v324 && *(unsigned __int8 *)v247 == *(unsigned __int8 *)v250) {
            LODWORD(v250) = v250 + 1;
          }
LABEL_320:
          unsigned int v249 = v250 - v246;
          v122 += v249 + 4;
          unsigned int v252 = v249 - 15;
          if (v249 < 0xF) {
            goto LABEL_324;
          }
          *v245 += 15;
          *(_DWORD *)char v215 = -1;
          if (v252 >= 0x3FC)
          {
            v253 = v243 + 6;
            __int16 v254 = v249 - 1035;
            unsigned int v255 = (v249 - 1035) / 0x3FC;
            uint64_t v256 = 2 * v255;
            memset(v243 + 6, 255, v256 * 2 + 4);
            a2 = v361;
            LOWORD(v252) = v254 - 1020 * v255;
            char v215 = (char *)&v253[v256];
            unsigned int v6 = v347;
          }
          v257 = &v215[(unsigned __int16)v252 / 0xFFu];
          char *v257 = v252 + (unsigned __int16)v252 / 0xFFu;
          char v215 = v257 + 1;
LABEL_325:
          if ((unint64_t)v122 >= v217) {
            goto LABEL_341;
          }
          *((_WORD *)v8 + ((-1640531535 * *(_DWORD *)(v122 - 2)) >> 19)) = (_WORD)v122 - 2 - (_WORD)v216;
          unsigned int v258 = (-1640531535 * *(_DWORD *)v122) >> 19;
          uint64_t v259 = *((unsigned __int16 *)v8 + v258);
          *((_WORD *)v8 + v258) = (_WORD)v122 - (_WORD)v216;
          if (v18 > v259 || (int v235 = &v216[v259], *(_DWORD *)&v216[v259] != *(_DWORD *)v122))
          {
            v218 = v122 + 2;
            int v219 = v353;
            if ((unint64_t)(v122 + 2) > v217) {
              goto LABEL_341;
            }
            goto LABEL_289;
          }
          *char v215 = 0;
          int v243 = v215 + 1;
          v245 = v215;
        }
        unint64_t v248 = *v246 ^ *v247;
        if (!v248)
        {
          v250 = v122 + 12;
          int v247 = v235 + 12;
          goto LABEL_316;
        }
        unsigned int v249 = __clz(__rbit64(v248)) >> 3;
        v122 += v249 + 4;
LABEL_324:
        *v245 += v249;
        goto LABEL_325;
      }
      bzero(this, 0x4004uLL);
      a2 = v361;
      *uint64_t v17 = 0;
      *(void *)((char *)v9 + 14) = 0;
      *(void *)(v9 + 5) = 0;
      goto LABEL_347;
    }
    if (*((_WORD *)this + 8194))
    {
      bzero(this, 0x4020uLL);
      a2 = v361;
      unsigned int v14 = 0;
    }
    else
    {
      if (*((_WORD *)this + 8195))
      {
        *((_WORD *)this + 8195) = 0;
        bzero(this, 0x4004uLL);
        a2 = v361;
        unsigned int v14 = 0;
      }
      else
      {
        unsigned int v14 = *v9;
        if (*v9)
        {
          v14 += 0x10000;
          *uint64_t v9 = v14;
        }
      }
      *((_DWORD *)v8 + 4102) = 0;
      *(_OWORD *)((char *)v8 + 16392) = 0u;
    }
    if (v6 > 0x7E000000) {
      return 0;
    }
    unsigned int v73 = &a2[-v14];
    uint64_t v326 = v6;
    uint64_t v74 = &a2[v6];
    unint64_t v75 = (unint64_t)(v74 - 11);
    v323 = v74 - 5;
    int v27 = (char *)v7;
    v9[6] = v326;
    *uint64_t v9 = v14 + v326;
    *((_WORD *)v9 + 3) = 2;
    uint64_t v76 = a2 + 2;
    *(_DWORD *)((char *)v8 + (((0xCF1BBCDCBB000000 * *(void *)a2) >> 50) & 0x3FFC)) = v14;
    int v77 = v10 << 6;
    unint64_t v78 = (unint64_t)(v74 - 12);
    v344 = v74;
    v313 = v74 - 6;
    v318 = v74 - 8;
    int v28 = (uint64_t *)a2;
    int v349 = v10 << 6;
LABEL_97:
    char v79 = (_DWORD *)((char *)v28 + 1);
    uint64_t v80 = *(uint64_t *)((char *)v28 + 1);
    int v81 = v77;
    while (1)
    {
      int v82 = v76;
      unint64_t v83 = ((0xCF1BBCDCBB000000 * v80) >> 50) & 0x3FFC;
      uint64_t v84 = *(unsigned int *)((char *)v8 + v83);
      uint64_t v80 = *v82;
      *(_DWORD *)((char *)v8 + v83) = v79 - v73;
      if ((int)v84 + 0xFFFF >= (v79 - v73) && *(_DWORD *)&v73[v84] == *v79) {
        break;
      }
      uint64_t v76 = (char *)v82 + (v81++ >> 6);
      char v79 = v82;
      if ((unint64_t)v76 > v75) {
        goto LABEL_149;
      }
    }
    uint64_t v85 = 0;
    unsigned int v86 = &v73[v84];
    int v87 = v79 - v28;
    int v88 = v79 - v28 - 15;
    char v89 = (_BYTE)v79 - (_BYTE)v28 - 14;
    int v90 = v88;
    do
    {
      int v91 = v90;
      int v92 = v85;
      unint64_t v93 = &v86[v85];
      uint64_t v94 = (uint64_t *)((char *)v79 + v85);
      if (&v86[v85] <= a2 || v94 <= v28) {
        break;
      }
      --v90;
      --v85;
    }
    while (*((unsigned __int8 *)v94 - 1) == *(v93 - 1));
    unsigned int v96 = v94 - v28;
    unint64_t v97 = v27 + 1;
    if ((v87 + v92) < 0xF)
    {
      char *v27 = 16 * v96;
    }
    else
    {
      char v98 = v92 + v88;
      char *v27 = -16;
      if (v92 + v88 > 254)
      {
        if (v91 >= 509) {
          int v99 = 509;
        }
        else {
          int v99 = v91;
        }
        unsigned int v100 = v87 - v99 + v92 + 239;
        char v335 = v89;
        memset(v97, 255, v100 / 0xFF + 1);
        unsigned int v96 = v94 - v28;
        a2 = v361;
        unint64_t v97 = &v27[v100 / 0xFFuLL + 2];
        char v98 = v100 / 0xFF + v335 + v92;
      }
      *v97++ = v98;
    }
    unint64_t v101 = &v97[v96];
    do
    {
      uint64_t v102 = *v28++;
      *(void *)unint64_t v97 = v102;
      v97 += 8;
    }
    while (v97 < v101);
    unsigned int v103 = v27;
    int v28 = v94;
    while (1)
    {
      *(_WORD *)unint64_t v101 = (_WORD)v28 - (_WORD)v93;
      int v27 = v101 + 2;
      uint64_t v104 = (uint64_t *)((char *)v28 + 4);
      unint64_t v105 = v93 + 4;
      if (v78 > (unint64_t)v28 + 4) {
        break;
      }
      unint64_t v108 = (uint64_t *)((char *)v28 + 4);
LABEL_124:
      while ((unint64_t)v108 < v78)
      {
        unint64_t v109 = *v108 ^ *v105;
        if (v109)
        {
          unint64_t v108 = (void *)((char *)v108 + (__clz(__rbit64(v109)) >> 3));
          goto LABEL_128;
        }
        ++v108;
        ++v105;
      }
      if (v108 < (void *)v318 && *(_DWORD *)v105 == *(_DWORD *)v108)
      {
        unint64_t v108 = (void *)((char *)v108 + 4);
        unint64_t v105 = (void *)((char *)v105 + 4);
      }
      if (v108 < (void *)v313 && *(unsigned __int16 *)v105 == *(unsigned __int16 *)v108)
      {
        unint64_t v108 = (void *)((char *)v108 + 2);
        unint64_t v105 = (void *)((char *)v105 + 2);
      }
      if (v108 < (void *)v323 && *(unsigned __int8 *)v105 == *(unsigned __int8 *)v108) {
        LODWORD(v108) = v108 + 1;
      }
LABEL_128:
      unsigned int v107 = v108 - v104;
      int v28 = (uint64_t *)((char *)v28 + v107 + 4);
      unsigned int v110 = v107 - 15;
      if (v107 < 0xF) {
        goto LABEL_132;
      }
      *v103 += 15;
      *(_DWORD *)int v27 = -1;
      if (v110 >= 0x3FC)
      {
        int v111 = v101 + 6;
        __int16 v112 = v107 - 1035;
        unsigned int v113 = (v107 - 1035) / 0x3FC;
        uint64_t v114 = 2 * v113;
        memset(v101 + 6, 255, v114 * 2 + 4);
        a2 = v361;
        LOWORD(v110) = v112 - 1020 * v113;
        int v27 = (char *)&v111[v114];
      }
      uint64_t v115 = &v27[(unsigned __int16)v110 / 0xFFu];
      *uint64_t v115 = v110 + (unsigned __int16)v110 / 0xFFu;
      int v27 = v115 + 1;
LABEL_133:
      if ((unint64_t)v28 >= v75) {
        goto LABEL_149;
      }
      *(_DWORD *)((char *)v8 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v28 - 2)) >> 50) & 0x3FFC)) = v28 - 2 - v73;
      unint64_t v116 = ((0xCF1BBCDCBB000000 * *v28) >> 50) & 0x3FFC;
      uint64_t v117 = *(unsigned int *)((char *)v8 + v116);
      *(_DWORD *)((char *)v8 + v116) = v28 - v73;
      if ((int)v117 + 0xFFFF < (v28 - v73)
        || (unint64_t v93 = &v73[v117], *(_DWORD *)&v73[v117] != *(_DWORD *)v28))
      {
        uint64_t v76 = (char *)v28 + 2;
        int v77 = v349;
        if ((unint64_t)v28 + 2 > v75)
        {
LABEL_149:
          size_t v68 = v344 - (char *)v28;
          unint64_t v70 = v344 - (char *)v28 - 15;
          int v69 = (int)v7;
          if ((unint64_t)(v344 - (char *)v28) < 0xF) {
            goto LABEL_154;
          }
          char *v27 = -16;
          int v71 = v27 + 1;
          if (v70 >= 0xFF)
          {
            uint64_t v72 = v326;
LABEL_152:
            unint64_t v118 = &a2[v72] - (char *)v28 - 270;
            memset(v71, 255, v118 / 0xFF + 1);
            unint64_t v70 = v118 % 0xFF;
            int v71 = &v27[v118 / 0xFF + 2];
          }
LABEL_153:
          *int v71 = v70;
          int v27 = v71;
LABEL_155:
          memcpy(v27 + 1, v28, v68);
          return (v27 + 1 + v68 - v69);
        }
        goto LABEL_97;
      }
      char *v27 = 0;
      unint64_t v101 = v27 + 1;
      unsigned int v103 = v27;
    }
    unint64_t v106 = *v104 ^ *v105;
    if (!v106)
    {
      unint64_t v108 = (uint64_t *)((char *)v28 + 12);
      unint64_t v105 = v93 + 12;
      goto LABEL_124;
    }
    unsigned int v107 = __clz(__rbit64(v106)) >> 3;
    int v28 = (uint64_t *)((char *)v28 + v107 + 4);
LABEL_132:
    *v103 += v107;
    goto LABEL_133;
  }
  if ((int)a4 > 65546)
  {
    if (*((_WORD *)this + 8194))
    {
      bzero(this, 0x4020uLL);
      a2 = v361;
      unsigned int v13 = 0;
    }
    else
    {
      if (*((_WORD *)this + 8195))
      {
        *((_WORD *)this + 8195) = 0;
        bzero(this, 0x4004uLL);
        a2 = v361;
        unsigned int v13 = 0;
      }
      else
      {
        unsigned int v13 = *v9;
        if (*v9)
        {
          v13 += 0x10000;
          *uint64_t v9 = v13;
        }
      }
      *((_DWORD *)v8 + 4102) = 0;
      *(_OWORD *)((char *)v8 + 16392) = 0u;
    }
    if (v6 > 0x7E000000) {
      return 0;
    }
    unint64_t v19 = &a2[-v13];
    uint64_t v312 = v6;
    int v20 = &a2[v6];
    int v21 = v7;
    unint64_t v22 = (unint64_t)(v20 - 11);
    v325 = v20 - 5;
    unint64_t v23 = (unint64_t)&v21[a5];
    v9[6] = v6;
    *uint64_t v9 = v13 + v6;
    *((_WORD *)v9 + 3) = 2;
    unint64_t v24 = a2 + 2;
    *(_DWORD *)((char *)v8 + (((0xCF1BBCDCBB000000 * *(void *)a2) >> 50) & 0x3FFC)) = v13;
    int v25 = v10 << 6;
    unint64_t v26 = (unint64_t)(v20 - 12);
    v343 = v20;
    v317 = v20 - 6;
    v322 = v20 - 8;
    int v355 = (int)v21;
    int v27 = (char *)v21;
    int v28 = (uint64_t *)a2;
    v360 = v8;
    int v348 = v10 << 6;
LABEL_33:
    unsigned int v29 = (_DWORD *)((char *)v28 + 1);
    uint64_t v30 = *(uint64_t *)((char *)v28 + 1);
    int v31 = v25;
    while (1)
    {
      int v32 = v24;
      unint64_t v33 = ((0xCF1BBCDCBB000000 * v30) >> 50) & 0x3FFC;
      uint64_t v34 = *(unsigned int *)((char *)v8 + v33);
      uint64_t v30 = *v32;
      *(_DWORD *)((char *)v8 + v33) = v29 - v19;
      if ((int)v34 + 0xFFFF >= (v29 - v19) && *(_DWORD *)&v19[v34] == *v29) {
        break;
      }
      unint64_t v24 = (char *)v32 + (v31++ >> 6);
      unsigned int v29 = v32;
      if ((unint64_t)v24 > v22)
      {
LABEL_88:
        size_t v68 = v343 - (char *)v28;
        int v69 = v355;
        if ((unint64_t)&v27[v343 - (char *)v28 + 1 + (v343 - (char *)v28 + 240) / 0xFFuLL] > v23) {
          return 0;
        }
        unint64_t v70 = v68 - 15;
        if (v68 >= 0xF)
        {
          char *v27 = -16;
          int v71 = v27 + 1;
          if (v70 >= 0xFF)
          {
            uint64_t v72 = v312;
            goto LABEL_152;
          }
          goto LABEL_153;
        }
LABEL_154:
        char *v27 = 16 * v68;
        goto LABEL_155;
      }
    }
    uint64_t v35 = 0;
    int v36 = &v19[v34];
    int v37 = v29 - v28;
    int v38 = v29 - v28 - 15;
    int v39 = v38;
    do
    {
      int v40 = v39;
      int v41 = v35;
      uint64_t v42 = &v36[v35];
      char v43 = (uint64_t *)((char *)v29 + v35);
      if (&v36[v35] <= a2 || v43 <= v28) {
        break;
      }
      --v39;
      --v35;
    }
    while (*((unsigned __int8 *)v43 - 1) == *(v42 - 1));
    unsigned int v45 = v43 - v28;
    double v46 = v27 + 1;
    if ((unint64_t)&v27[(v43 - v28) + 9 + (v37 + v41) / 0xFFuLL] > v23) {
      return 0;
    }
    if ((v37 + v41) < 0xF)
    {
      char *v27 = 16 * v45;
    }
    else
    {
      char v47 = v41 + v38;
      char *v27 = -16;
      if (v41 + v38 > 254)
      {
        if (v40 >= 509) {
          int v48 = 509;
        }
        else {
          int v48 = v40;
        }
        unsigned int v49 = v37 - v48 + v41 + 239;
        char v328 = v37 - 14;
        memset(v46, 255, v49 / 0xFF + 1);
        unsigned int v45 = v43 - v28;
        a2 = v361;
        double v46 = &v27[v49 / 0xFFuLL + 2];
        char v47 = v49 / 0xFF + v328 + v41;
      }
      *v46++ = v47;
    }
    double v50 = &v46[v45];
    do
    {
      uint64_t v51 = *v28++;
      *(void *)double v46 = v51;
      v46 += 8;
    }
    while (v46 < v50);
    unint64_t v52 = v27;
    int v28 = v43;
    while (1)
    {
      *(_WORD *)double v50 = (_WORD)v28 - (_WORD)v42;
      int v27 = v50 + 2;
      unsigned int v53 = (uint64_t *)((char *)v28 + 4);
      int v54 = v42 + 4;
      if (v26 <= (unint64_t)v28 + 4)
      {
        unsigned int v57 = (_DWORD *)v28 + 1;
      }
      else
      {
        unint64_t v55 = *v53 ^ *v54;
        if (v55)
        {
          unsigned int v56 = __clz(__rbit64(v55)) >> 3;
          goto LABEL_76;
        }
        unsigned int v57 = (_DWORD *)v28 + 3;
        int v54 = v42 + 12;
      }
      if ((unint64_t)v57 >= v26)
      {
LABEL_65:
        if (v57 < (_DWORD *)v322 && *(_DWORD *)v54 == *v57)
        {
          ++v57;
          int v54 = (void *)((char *)v54 + 4);
        }
        if (v57 < (_DWORD *)v317 && *(unsigned __int16 *)v54 == *(unsigned __int16 *)v57)
        {
          unsigned int v57 = (_DWORD *)((char *)v57 + 2);
          int v54 = (void *)((char *)v54 + 2);
        }
        if (v57 < (_DWORD *)v325 && *(unsigned __int8 *)v54 == *(unsigned __int8 *)v57) {
          LODWORD(v57) = v57 + 1;
        }
        unsigned int v56 = v57 - v53;
      }
      else
      {
        int v58 = v57 - v28 - 4;
        while (1)
        {
          unint64_t v59 = *(void *)v57 ^ *v54;
          if (v59) {
            break;
          }
          v57 += 2;
          ++v54;
          v58 += 8;
          if ((unint64_t)v57 >= v26) {
            goto LABEL_65;
          }
        }
        unsigned int v56 = (__clz(__rbit64(v59)) >> 3) + v58;
      }
LABEL_76:
      if ((unint64_t)&v50[(v56 + 240) / 0xFFuLL + 8] > v23) {
        return 0;
      }
      char v60 = *v52;
      unsigned int v61 = v56 - 15;
      if (v56 < 0xF)
      {
        char *v52 = v60 + v56;
      }
      else
      {
        char *v52 = v60 + 15;
        *(_DWORD *)int v27 = -1;
        if (v61 >= 0x3FC)
        {
          unsigned int v62 = v50 + 6;
          unint64_t v63 = v23;
          uint64_t v64 = 2 * ((v56 - 1035) / 0x3FC);
          memset(v50 + 6, 255, v64 * 2 + 4);
          LOWORD(v61) = (v56 - 1035) % 0x3FC;
          int v27 = (char *)&v62[v64];
          unint64_t v23 = v63;
          unsigned int v8 = v360;
          a2 = v361;
        }
        unint64_t v65 = &v27[(unsigned __int16)v61 / 0xFFu];
        char *v65 = v61 + (unsigned __int16)v61 / 0xFFu;
        int v27 = v65 + 1;
      }
      int v28 = (uint64_t *)((char *)v28 + v56 + 4);
      if ((unint64_t)v28 >= v22) {
        goto LABEL_88;
      }
      *(_DWORD *)((char *)v8 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v28 - 2)) >> 50) & 0x3FFC)) = v28 - 2 - v19;
      unint64_t v66 = ((0xCF1BBCDCBB000000 * *v28) >> 50) & 0x3FFC;
      uint64_t v67 = *(unsigned int *)((char *)v8 + v66);
      *(_DWORD *)((char *)v8 + v66) = v28 - v19;
      if ((int)v67 + 0xFFFF < (v28 - v19)
        || (uint64_t v42 = &v19[v67], *(_DWORD *)&v19[v67] != *(_DWORD *)v28))
      {
        unint64_t v24 = (char *)v28 + 2;
        int v25 = v348;
        if ((unint64_t)v28 + 2 > v22) {
          goto LABEL_88;
        }
        goto LABEL_33;
      }
      char *v27 = 0;
      double v50 = v27 + 1;
      unint64_t v52 = v27;
    }
  }
  if (*((_WORD *)this + 8194))
  {
    bzero(this, 0x4020uLL);
    a2 = v361;
    goto LABEL_224;
  }
  uint64_t v15 = (void *)((char *)this + 16390);
  if (*((_WORD *)this + 8195) != 3)
  {
    if (!*((_WORD *)this + 8195))
    {
      uint64_t v16 = *v9;
      goto LABEL_158;
    }
LABEL_223:
    bzero(this, 0x4004uLL);
    a2 = v361;
    *uint64_t v15 = 0;
    *(void *)((char *)v9 + 14) = 0;
    *(void *)(v9 + 5) = 0;
    goto LABEL_224;
  }
  if ((int)a4 > 4095) {
    goto LABEL_223;
  }
  uint64_t v16 = *v9;
  if ((v16 + a4) >= 0xFFFF) {
    goto LABEL_223;
  }
LABEL_158:
  *((_DWORD *)this + 4102) = 0;
  *(_OWORD *)((char *)this + 16392) = 0u;
  if (v16)
  {
    if (a4 > 0x7E000000) {
      return 0;
    }
    uint64_t v120 = &a2[(int)a4];
    *((_DWORD *)this + 4102) = a4;
    uint64_t v121 = &a3[a5];
    *uint64_t v9 = v16 + a4;
    *((_WORD *)this + 8195) = 3;
    uint64_t v122 = a2;
    int v123 = a3;
    if (a4 >= 0xD)
    {
      int v123 = a3;
      int v124 = &a2[-v16];
      unint64_t v125 = (unint64_t)(v120 - 11);
      int v126 = a2 + 2;
      *((_WORD *)this + ((-1640531535 * *(_DWORD *)a2) >> 19)) = v16;
      int v127 = v10 << 6;
      unint64_t v128 = (unint64_t)(v120 - 12);
      v311 = v120 - 8;
      v314 = v120 - 5;
      v331 = &a2[(int)a4];
      v310 = v120 - 6;
      int v356 = (int)a3;
      uint64_t v122 = a2;
      v339 = &a3[a5];
      unsigned int v345 = a4;
      int v336 = v10 << 6;
LABEL_162:
      uint64_t v129 = v122 + 1;
      int v130 = *(_DWORD *)(v122 + 1);
      int v131 = v127;
      while (1)
      {
        unsigned int v132 = (-1640531535 * v130) >> 19;
        uint64_t v133 = *((unsigned __int16 *)v8 + v132);
        int v134 = v126;
        int v130 = *v126;
        *((_WORD *)v8 + v132) = (_WORD)v129 - (_WORD)v124;
        if (v16 <= v133 && *(_DWORD *)&v124[v133] == *v129) {
          break;
        }
        int v126 = (_DWORD *)((char *)v126 + (v131++ >> 6));
        uint64_t v129 = v134;
        if ((unint64_t)v126 > v125)
        {
LABEL_217:
          LODWORD(v7) = v356;
          uint64_t v120 = v331;
          goto LABEL_218;
        }
      }
      uint64_t v135 = 0;
      uint64_t v136 = &v124[v133];
      int v137 = v129 - v122;
      int v138 = v129 - v122 - 15;
      int v139 = v138;
      do
      {
        int v140 = v139;
        int v141 = v135;
        unsigned int v142 = &v136[v135];
        unint64_t v143 = (char *)v129 + v135;
        if (&v136[v135] <= a2 || v143 <= v122) {
          break;
        }
        --v139;
        --v135;
      }
      while (*((unsigned __int8 *)v143 - 1) == *(v142 - 1));
      int v145 = v143 - v122;
      char v146 = v123 + 1;
      if (&v123[(v143 - v122) + 9 + (v137 + v141) / 0xFFuLL] > v121) {
        return 0;
      }
      if ((v137 + v141) < 0xF)
      {
        *int v123 = 16 * v145;
        unsigned int v6 = v345;
      }
      else
      {
        char v147 = v141 + v138;
        *int v123 = -16;
        if (v141 + v138 > 254)
        {
          if (v140 >= 509) {
            int v148 = 509;
          }
          else {
            int v148 = v140;
          }
          unsigned int v149 = v137 - v148 + v141 + 239;
          unint64_t v350 = v125;
          char v319 = v137 - 14;
          memset(v146, 255, v149 / 0xFF + 1);
          int v145 = v143 - v122;
          unint64_t v125 = v350;
          a2 = v361;
          char v146 = &v123[v149 / 0xFFuLL + 2];
          char v147 = v149 / 0xFF + v319 + v141;
        }
        unsigned int v6 = v345;
        *v146++ = v147;
      }
      uint64_t v150 = &v146[v145];
      do
      {
        uint64_t v151 = *(void *)v122;
        v122 += 8;
        *(void *)char v146 = v151;
        v146 += 8;
      }
      while (v146 < v150);
      uint64_t v152 = v123;
      uint64_t v122 = v143;
      while (1)
      {
        *(_WORD *)uint64_t v150 = (_WORD)v122 - (_WORD)v142;
        int v123 = v150 + 2;
        size_t v153 = v122 + 4;
        unint64_t v154 = v142 + 4;
        if (v128 <= (unint64_t)(v122 + 4))
        {
          uint64_t v157 = v122 + 4;
        }
        else
        {
          unint64_t v155 = *v153 ^ *v154;
          if (v155)
          {
            unsigned int v156 = __clz(__rbit64(v155)) >> 3;
            goto LABEL_205;
          }
          uint64_t v157 = v122 + 12;
          unint64_t v154 = v142 + 12;
        }
        if ((unint64_t)v157 >= v128)
        {
LABEL_194:
          if (v157 < (_DWORD *)v311 && *(_DWORD *)v154 == *v157)
          {
            ++v157;
            unint64_t v154 = (void *)((char *)v154 + 4);
          }
          if (v157 < (_DWORD *)v310 && *(unsigned __int16 *)v154 == *(unsigned __int16 *)v157)
          {
            uint64_t v157 = (_DWORD *)((char *)v157 + 2);
            unint64_t v154 = (void *)((char *)v154 + 2);
          }
          if (v157 < (_DWORD *)v314 && *(unsigned __int8 *)v154 == *(unsigned __int8 *)v157) {
            LODWORD(v157) = v157 + 1;
          }
          unsigned int v156 = v157 - v153;
        }
        else
        {
          int v158 = v157 - v122 - 4;
          while (1)
          {
            unint64_t v159 = *(void *)v157 ^ *v154;
            if (v159) {
              break;
            }
            v157 += 2;
            ++v154;
            v158 += 8;
            if ((unint64_t)v157 >= v128) {
              goto LABEL_194;
            }
          }
          unsigned int v156 = (__clz(__rbit64(v159)) >> 3) + v158;
        }
LABEL_205:
        if (&v150[(v156 + 240) / 0xFFuLL + 8] > v121) {
          return 0;
        }
        char v160 = *v152;
        unsigned int v161 = v156 - 15;
        if (v156 < 0xF)
        {
          *uint64_t v152 = v160 + v156;
        }
        else
        {
          *uint64_t v152 = v160 + 15;
          *(_DWORD *)int v123 = -1;
          if (v161 >= 0x3FC)
          {
            v351 = v150 + 6;
            uint64_t v162 = 2 * ((v156 - 1035) / 0x3FC);
            uint64_t v163 = v16;
            unint64_t v164 = v125;
            memset(v150 + 6, 255, v162 * 2 + 4);
            unint64_t v125 = v164;
            uint64_t v16 = v163;
            a2 = v361;
            LOWORD(v161) = (v156 - 1035) % 0x3FC;
            unsigned int v6 = v345;
            int v123 = (char *)&v351[v162];
            uint64_t v121 = v339;
          }
          int v165 = &v123[(unsigned __int16)v161 / 0xFFu];
          *int v165 = v161 + (unsigned __int16)v161 / 0xFFu;
          int v123 = v165 + 1;
        }
        v122 += v156 + 4;
        if ((unint64_t)v122 >= v125) {
          goto LABEL_217;
        }
        *((_WORD *)v8 + ((-1640531535 * *(_DWORD *)(v122 - 2)) >> 19)) = (_WORD)v122 - 2 - (_WORD)v124;
        unsigned int v166 = (-1640531535 * *(_DWORD *)v122) >> 19;
        uint64_t v167 = *((unsigned __int16 *)v8 + v166);
        *((_WORD *)v8 + v166) = (_WORD)v122 - (_WORD)v124;
        if (v16 > v167 || (unsigned int v142 = &v124[v167], *(_DWORD *)&v124[v167] != *(_DWORD *)v122))
        {
          int v126 = v122 + 2;
          int v127 = v336;
          if ((unint64_t)(v122 + 2) > v125) {
            goto LABEL_217;
          }
          goto LABEL_162;
        }
        *int v123 = 0;
        uint64_t v150 = v123 + 1;
        uint64_t v152 = v123;
      }
    }
LABEL_218:
    size_t v168 = v120 - v122;
    if (&v123[v120 - v122 + 1 + (v120 - v122 + 240) / 0xFFuLL] > v121) {
      return 0;
    }
    unint64_t v169 = v168 - 15;
    if (v168 < 0xF)
    {
      *int v123 = 16 * v168;
    }
    else
    {
      *int v123 = -16;
      uint64_t v170 = v123 + 1;
      if (v169 >= 0xFF)
      {
        unint64_t v171 = &a2[v6] - v122 - 270;
        memset(v170, 255, v171 / 0xFF + 1);
        unint64_t v169 = v171 % 0xFF;
        uint64_t v170 = &v123[v171 / 0xFF + 2];
      }
      *uint64_t v170 = v169;
      int v123 = v170;
    }
    v309 = v123 + 1;
LABEL_409:
    memcpy(v309, v122, v168);
    return (v309 + v168 - v7);
  }
LABEL_224:
  if (v6 > 0x7E000000) {
    return 0;
  }
  int v172 = &a2[v6];
  v9[6] = v6;
  unint64_t v173 = (unint64_t)&v7[a5];
  *uint64_t v9 = v6;
  *((_WORD *)v9 + 3) = 3;
  uint64_t v122 = a2;
  int v174 = (char *)v7;
  if (v6 < 0xD) {
    goto LABEL_281;
  }
  v340 = &a2[v6];
  unsigned int v346 = v6;
  int v175 = v172 - 11;
  *((_WORD *)v8 + ((-1640531535 * *(_DWORD *)a2) >> 19)) = 0;
  int v176 = v10 << 6;
  unint64_t v177 = (unint64_t)(v172 - 12);
  v329 = v172 - 8;
  v332 = v172 - 5;
  v327 = v172 - 6;
  uint64_t v122 = a2;
  int v174 = (char *)v7;
  unint64_t v352 = v173;
  int v357 = (int)v7;
  int v337 = v10 << 6;
LABEL_227:
  unint64_t v178 = v122 + 1;
  int v179 = *(_DWORD *)(v122 + 1);
  int v180 = 1;
  int v181 = v176;
  do
  {
    char v182 = v178;
    unint64_t v178 = (_DWORD *)((char *)v178 + v180);
    if (v178 > (_DWORD *)v175) {
      goto LABEL_280;
    }
    int v180 = v181++ >> 6;
    unsigned int v183 = (-1640531535 * v179) >> 19;
    uint64_t v184 = *((unsigned __int16 *)v8 + v183);
    int v179 = *v178;
    *((_WORD *)v8 + v183) = (_WORD)v182 - (_WORD)a2;
  }
  while (*(_DWORD *)&a2[v184] != *v182);
  uint64_t v185 = 0;
  uint64_t v186 = &a2[v184];
  int v187 = v182 - v122;
  int v188 = v182 - v122 - 15;
  int v189 = v188;
  do
  {
    int v190 = v189;
    int v191 = v185;
    v192 = &v186[v185];
    float v7 = (char *)v182 + v185;
    if (&v186[v185] <= a2 || v7 <= v122) {
      break;
    }
    --v189;
    --v185;
  }
  while (*((unsigned __int8 *)v7 - 1) == *(v192 - 1));
  unsigned int v194 = v174 + 1;
  if ((unint64_t)&v174[(v7 - v122) + 9 + (v187 + v191) / 0xFFuLL] > v173) {
    return 0;
  }
  if ((v187 + v191) < 0xF)
  {
    *int v174 = 16 * ((_BYTE)v7 - (_BYTE)v122);
  }
  else
  {
    char v195 = v191 + v188;
    *int v174 = -16;
    if (v191 + v188 > 254)
    {
      if (v190 >= 509) {
        int v196 = 509;
      }
      else {
        int v196 = v190;
      }
      unsigned int v197 = v187 - v196 + v191 + 239;
      char v315 = v187 - 14;
      memset(v194, 255, v197 / 0xFF + 1);
      unint64_t v173 = v352;
      a2 = v361;
      unsigned int v194 = &v174[v197 / 0xFFuLL + 2];
      char v195 = v197 / 0xFF + v315 + v191;
    }
    *v194++ = v195;
  }
  uint64_t v198 = &v194[v7 - v122];
  do
  {
    uint64_t v199 = *(void *)v122;
    v122 += 8;
    *(void *)unsigned int v194 = v199;
    v194 += 8;
  }
  while (v194 < v198);
  while (1)
  {
    *(_WORD *)uint64_t v198 = (_WORD)v7 - (_WORD)v192;
    uint64_t v201 = v198 + 2;
    unint64_t v202 = v7 + 4;
    v203 = v192 + 4;
    if (v177 <= (unint64_t)(v7 + 4))
    {
      unint64_t v200 = v7 + 4;
    }
    else
    {
      unint64_t v204 = *v202 ^ *v203;
      if (v204)
      {
        unsigned int v205 = __clz(__rbit64(v204)) >> 3;
        goto LABEL_270;
      }
      unint64_t v200 = v7 + 12;
      v203 = v192 + 12;
    }
    if ((unint64_t)v200 >= v177)
    {
LABEL_259:
      if (v200 < (_DWORD *)v329 && *(_DWORD *)v203 == *v200)
      {
        ++v200;
        v203 = (void *)((char *)v203 + 4);
      }
      if (v200 < (_DWORD *)v327 && *(unsigned __int16 *)v203 == *(unsigned __int16 *)v200)
      {
        unint64_t v200 = (_DWORD *)((char *)v200 + 2);
        v203 = (void *)((char *)v203 + 2);
      }
      if (v200 < (_DWORD *)v332 && *(unsigned __int8 *)v203 == *(unsigned __int8 *)v200) {
        LODWORD(v200) = v200 + 1;
      }
      unsigned int v205 = v200 - v202;
    }
    else
    {
      int v206 = v200 - v7 - 4;
      while (1)
      {
        unint64_t v207 = *(void *)v200 ^ *v203;
        if (v207) {
          break;
        }
        v200 += 2;
        ++v203;
        v206 += 8;
        if ((unint64_t)v200 >= v177) {
          goto LABEL_259;
        }
      }
      unsigned int v205 = (__clz(__rbit64(v207)) >> 3) + v206;
    }
LABEL_270:
    if ((unint64_t)&v198[(v205 + 240) / 0xFFuLL + 8] > v173) {
      return 0;
    }
    char v208 = *v174;
    unsigned int v209 = v205 - 15;
    if (v205 < 0xF)
    {
      *int v174 = v208 + v205;
    }
    else
    {
      *int v174 = v208 + 15;
      *(_DWORD *)uint64_t v201 = -1;
      if (v209 >= 0x3FC)
      {
        v210 = v198 + 6;
        uint64_t v211 = 2 * ((v205 - 1035) / 0x3FC);
        memset(v198 + 6, 255, v211 * 2 + 4);
        unint64_t v173 = v352;
        a2 = v361;
        LOWORD(v209) = (v205 - 1035) % 0x3FC;
        uint64_t v201 = (char *)&v210[v211];
      }
      unint64_t v212 = &v201[(unsigned __int16)v209 / 0xFFu];
      *unint64_t v212 = v209 + (unsigned __int16)v209 / 0xFFu;
      uint64_t v201 = v212 + 1;
    }
    v7 += v205 + 4;
    if (v7 >= v175) {
      break;
    }
    *((_WORD *)v8 + ((-1640531535 * *(_DWORD *)(v7 - 2)) >> 19)) = (_WORD)v7 - 2 - (_WORD)a2;
    unsigned int v213 = (-1640531535 * *(_DWORD *)v7) >> 19;
    v192 = &a2[*((unsigned __int16 *)v8 + v213)];
    *((_WORD *)v8 + v213) = (_WORD)v7 - (_WORD)a2;
    if (*(_DWORD *)v192 != *(_DWORD *)v7)
    {
      uint64_t v122 = v7;
      int v174 = v201;
      LODWORD(v7) = v357;
      int v176 = v337;
      goto LABEL_227;
    }
    *uint64_t v201 = 0;
    uint64_t v198 = v201 + 1;
    int v174 = v201;
  }
  uint64_t v122 = v7;
  int v174 = v201;
  LODWORD(v7) = v357;
LABEL_280:
  int v172 = v340;
  unsigned int v6 = v346;
LABEL_281:
  size_t v168 = v172 - v122;
  if ((unint64_t)&v174[v172 - v122 + 1 + (v172 - v122 + 240) / 0xFFuLL] <= v173)
  {
LABEL_403:
    unint64_t v306 = v168 - 15;
    if (v168 < 0xF)
    {
      *int v174 = 16 * v168;
    }
    else
    {
      *int v174 = -16;
      v307 = v174 + 1;
      if (v306 >= 0xFF)
      {
        unint64_t v308 = &a2[v6] - v122 - 270;
        memset(v307, 255, v308 / 0xFF + 1);
        unint64_t v306 = v308 % 0xFF;
        v307 = &v174[v308 / 0xFF + 2];
      }
      char *v307 = v306;
      int v174 = v307;
    }
    v309 = v174 + 1;
    goto LABEL_409;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3)
{
  int v3 = (char *)MEMORY[0x270FA5388](this, a2, a3);
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)&v9, v3, v4, v5, v6, v7);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_default(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3)
{
  int v3 = (char *)MEMORY[0x270FA5388](this, a2, a3);
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)&v8, v3, v4, v5, v6, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_force(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](this, a2, a3);
  int v5 = v4;
  int v7 = v6;
  int v9 = v8;
  signed int v11 = v10;
  float v12 = (void *)v3;
  bzero(v131, 0x4020uLL);
  if (v9 > 65546)
  {
    if (v9 > 0x7E000000) {
      return 0;
    }
    uint64_t v115 = v9;
    char v60 = (char *)v12 + v9;
    unint64_t v61 = (unint64_t)(v60 - 11);
    unint64_t v62 = (unint64_t)&v11[v7];
    int v134 = v9;
    int v132 = v9;
    __int16 v133 = 2;
    unint64_t v63 = (char *)v12 + 2;
    *(_DWORD *)((char *)v131 + (((0xCF1BBCDCBB000000 * *v12) >> 50) & 0x3FFC)) = 0;
    int v64 = v5 << 6;
    unint64_t v65 = (unint64_t)(v60 - 12);
    unint64_t v117 = (unint64_t)(v60 - 8);
    unint64_t v118 = (unint64_t)(v60 - 5);
    int v124 = v60;
    unint64_t v116 = (unint64_t)(v60 - 6);
    int v128 = (int)v11;
    unint64_t v130 = v62;
    unint64_t v66 = v11;
    uint64_t v67 = v12;
    int v126 = v64;
LABEL_59:
    size_t v68 = (_DWORD *)((char *)v67 + 1);
    uint64_t v69 = *(uint64_t *)((char *)v67 + 1);
    int v70 = v64;
    while (1)
    {
      int v71 = v63;
      unint64_t v72 = ((0xCF1BBCDCBB000000 * v69) >> 50) & 0x3FFC;
      uint64_t v73 = *(unsigned int *)((char *)v131 + v72);
      uint64_t v69 = *v71;
      *(_DWORD *)((char *)v131 + v72) = v68 - v12;
      if ((int)v73 + 0xFFFF >= (v68 - v12) && *(_DWORD *)((char *)v12 + v73) == *v68) {
        break;
      }
      unint64_t v63 = (char *)v71 + (v70++ >> 6);
      size_t v68 = v71;
      if ((unint64_t)v63 > v61) {
        goto LABEL_114;
      }
    }
    uint64_t v74 = 0;
    unint64_t v75 = (char *)v12 + v73;
    int v76 = v68 - v67;
    int v77 = v68 - v67 - 15;
    int v78 = v77;
    do
    {
      int v79 = v78;
      int v80 = v74;
      int v81 = &v75[v74];
      int v82 = (uint64_t *)((char *)v68 + v74);
      if (&v75[v74] <= (char *)v12 || v82 <= v67) {
        break;
      }
      --v78;
      --v74;
    }
    while (*((unsigned __int8 *)v82 - 1) == *(v81 - 1));
    uint64_t v84 = v66 + 1;
    if ((unint64_t)&v66[(v82 - v67) + 9 + (v76 + v80) / 0xFFuLL] > v62) {
      return 0;
    }
    if ((v76 + v80) < 0xF)
    {
      *unint64_t v66 = 16 * ((_BYTE)v82 - (_BYTE)v67);
    }
    else
    {
      char v85 = v80 + v77;
      *unint64_t v66 = -16;
      if (v80 + v77 > 254)
      {
        if (v79 >= 509) {
          int v86 = 509;
        }
        else {
          int v86 = v79;
        }
        unsigned int v87 = v76 - v86 + v80 + 239;
        char v120 = v76 - 14;
        memset(v84, 255, v87 / 0xFF + 1);
        unint64_t v62 = v130;
        uint64_t v84 = &v66[v87 / 0xFFuLL + 2];
        char v85 = v87 / 0xFF + v120 + v80;
      }
      *(unsigned char *)uint64_t v84 = v85;
      uint64_t v84 = (void *)((char *)v84 + 1);
    }
    int v88 = (_WORD *)((char *)v84 + (v82 - v67));
    do
    {
      uint64_t v89 = *v67++;
      *v84++ = v89;
    }
    while (v84 < (void *)v88);
    int v90 = v66;
    uint64_t v67 = v82;
    while (1)
    {
      *int v88 = (_WORD)v67 - (_WORD)v81;
      unint64_t v66 = v88 + 1;
      int v91 = (uint64_t *)((char *)v67 + 4);
      int v92 = v81 + 4;
      if (v65 <= (unint64_t)v67 + 4)
      {
        unint64_t v95 = (_DWORD *)v67 + 1;
      }
      else
      {
        unint64_t v93 = *v91 ^ *v92;
        if (v93)
        {
          unsigned int v94 = __clz(__rbit64(v93)) >> 3;
          goto LABEL_102;
        }
        unint64_t v95 = (_DWORD *)v67 + 3;
        int v92 = v81 + 12;
      }
      if ((unint64_t)v95 >= v65)
      {
LABEL_91:
        if ((unint64_t)v95 < v117 && *(_DWORD *)v92 == *v95)
        {
          ++v95;
          int v92 = (void *)((char *)v92 + 4);
        }
        if ((unint64_t)v95 < v116 && *(unsigned __int16 *)v92 == *(unsigned __int16 *)v95)
        {
          unint64_t v95 = (_DWORD *)((char *)v95 + 2);
          int v92 = (void *)((char *)v92 + 2);
        }
        if ((unint64_t)v95 < v118 && *(unsigned __int8 *)v92 == *(unsigned __int8 *)v95) {
          LODWORD(v95) = v95 + 1;
        }
        unsigned int v94 = v95 - v91;
      }
      else
      {
        int v96 = v95 - v67 - 4;
        while (1)
        {
          unint64_t v97 = *(void *)v95 ^ *v92;
          if (v97) {
            break;
          }
          v95 += 2;
          ++v92;
          v96 += 8;
          if ((unint64_t)v95 >= v65) {
            goto LABEL_91;
          }
        }
        unsigned int v94 = (__clz(__rbit64(v97)) >> 3) + v96;
      }
LABEL_102:
      if ((unint64_t)v88 + (v94 + 240) / 0xFFuLL + 8 > v62) {
        return 0;
      }
      char v98 = *v90;
      unsigned int v99 = v94 - 15;
      if (v94 < 0xF)
      {
        char *v90 = v98 + v94;
      }
      else
      {
        char *v90 = v98 + 15;
        *(_DWORD *)unint64_t v66 = -1;
        if (v99 >= 0x3FC)
        {
          unsigned int v100 = v88 + 3;
          uint64_t v101 = 2 * ((v94 - 1035) / 0x3FC);
          memset(v88 + 3, 255, v101 * 2 + 4);
          unint64_t v62 = v130;
          LOWORD(v99) = (v94 - 1035) % 0x3FC;
          unint64_t v66 = &v100[v101];
        }
        uint64_t v102 = &v66[(unsigned __int16)v99 / 0xFFu];
        *uint64_t v102 = v99 + (unsigned __int16)v99 / 0xFFu;
        unint64_t v66 = v102 + 1;
      }
      uint64_t v67 = (uint64_t *)((char *)v67 + v94 + 4);
      if ((unint64_t)v67 >= v61) {
        goto LABEL_114;
      }
      *(_DWORD *)((char *)v131 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v67 - 2)) >> 50) & 0x3FFC)) = v67 - 2 - v12;
      unint64_t v103 = ((0xCF1BBCDCBB000000 * *v67) >> 50) & 0x3FFC;
      uint64_t v104 = *(unsigned int *)((char *)v131 + v103);
      *(_DWORD *)((char *)v131 + v103) = v67 - v12;
      if ((int)v104 + 0xFFFF < (v67 - v12)
        || (int v81 = (char *)v12 + v104, *(_DWORD *)((char *)v12 + v104) != *(_DWORD *)v67))
      {
        unint64_t v63 = (char *)v67 + 2;
        int v64 = v126;
        if ((unint64_t)v67 + 2 > v61)
        {
LABEL_114:
          size_t v105 = v124 - (char *)v67;
          if ((unint64_t)&v66[v124 - (char *)v67 + 1 + (v124 - (char *)v67 + 240) / 0xFFuLL] > v62) {
            return 0;
          }
          unint64_t v106 = v105 - 15;
          if (v105 < 0xF)
          {
            *unint64_t v66 = 16 * v105;
          }
          else
          {
            *unint64_t v66 = -16;
            unsigned int v107 = v66 + 1;
            if (v106 >= 0xFF)
            {
              unint64_t v108 = (char *)v12 + v115 - (char *)v67 - 270;
              memset(v107, 255, v108 / 0xFF + 1);
              unint64_t v106 = v108 % 0xFF;
              unsigned int v107 = &v66[v108 / 0xFF + 2];
            }
            *unsigned int v107 = v106;
            unint64_t v66 = v107;
          }
          memcpy(v66 + 1, v67, v105);
          return (v66 + 1 + v105 - v128);
        }
        goto LABEL_59;
      }
      *unint64_t v66 = 0;
      int v88 = v66 + 1;
      int v90 = v66;
    }
  }
  if (v9 > 0x7E000000) {
    return 0;
  }
  unsigned int v13 = (char *)v12 + v9;
  int v134 = v9;
  unint64_t v14 = (unint64_t)&v11[v7];
  int v132 = v9;
  __int16 v133 = 3;
  uint64_t v15 = (char *)v12;
  uint64_t v16 = v11;
  if (v9 < 0xD) {
    goto LABEL_121;
  }
  int v129 = v9;
  unint64_t v17 = (unint64_t)(v13 - 11);
  v131[(-1640531535 * *(_DWORD *)v12) >> 19] = 0;
  int v18 = v5 << 6;
  unint64_t v19 = (unint64_t)(v13 - 12);
  unint64_t v121 = (unint64_t)(v13 - 8);
  unint64_t v122 = (unint64_t)(v13 - 5);
  unint64_t v125 = (char *)v12 + v9;
  int v127 = (int)v11;
  unint64_t v119 = (unint64_t)(v13 - 6);
  uint64_t v15 = (char *)v12;
  uint64_t v16 = v11;
  int v123 = v5 << 6;
LABEL_5:
  int v20 = v15 + 1;
  int v21 = *(_DWORD *)(v15 + 1);
  int v22 = 1;
  int v23 = v18;
  do
  {
    unint64_t v24 = v20;
    int v20 = (_DWORD *)((char *)v20 + v22);
    if ((unint64_t)v20 > v17) {
      goto LABEL_120;
    }
    int v22 = v23++ >> 6;
    unsigned int v25 = (-1640531535 * v21) >> 19;
    uint64_t v26 = v131[v25];
    int v21 = *v20;
    v131[v25] = (_WORD)v24 - (_WORD)v12;
  }
  while (*(_DWORD *)((char *)v12 + v26) != *v24);
  uint64_t v27 = 0;
  int v28 = (char *)v12 + v26;
  int v29 = v24 - v15;
  int v30 = v24 - v15 - 15;
  int v31 = v30;
  do
  {
    int v32 = v31;
    int v33 = v27;
    uint64_t v34 = &v28[v27];
    uint64_t v35 = (char *)v24 + v27;
    if (&v28[v27] <= (char *)v12 || v35 <= v15) {
      break;
    }
    --v31;
    --v27;
  }
  while (*(v35 - 1) == *(v34 - 1));
  unsigned int v37 = v35 - v15;
  int v38 = v16 + 1;
  if ((unint64_t)&v16[(v35 - v15) + 9 + (v29 + v33) / 0xFFuLL] > v14) {
    return 0;
  }
  if ((v29 + v33) < 0xF)
  {
    unsigned char *v16 = 16 * v37;
  }
  else
  {
    char v39 = v33 + v30;
    unsigned char *v16 = -16;
    if (v33 + v30 > 254)
    {
      if (v32 >= 509) {
        int v40 = 509;
      }
      else {
        int v40 = v32;
      }
      unsigned int v41 = v29 - v40 + v33 + 239;
      char v114 = v29 - 14;
      memset(v38, 255, v41 / 0xFF + 1);
      unsigned int v37 = v35 - v15;
      int v38 = &v16[v41 / 0xFFuLL + 2];
      char v39 = v41 / 0xFF + v114 + v33;
    }
    *(unsigned char *)int v38 = v39;
    int v38 = (void *)((char *)v38 + 1);
  }
  uint64_t v42 = (_WORD *)((char *)v38 + v37);
  do
  {
    uint64_t v43 = *(void *)v15;
    v15 += 8;
    *v38++ = v43;
  }
  while (v38 < (void *)v42);
  while (1)
  {
    _WORD *v42 = (_WORD)v35 - (_WORD)v34;
    unsigned int v45 = v42 + 1;
    double v46 = v35 + 4;
    char v47 = v34 + 4;
    if (v19 <= (unint64_t)(v35 + 4))
    {
      int v44 = v35 + 4;
    }
    else
    {
      unint64_t v48 = *v46 ^ *v47;
      if (v48)
      {
        unsigned int v49 = __clz(__rbit64(v48)) >> 3;
        goto LABEL_48;
      }
      int v44 = v35 + 12;
      char v47 = v34 + 12;
    }
    if ((unint64_t)v44 >= v19)
    {
LABEL_37:
      if ((unint64_t)v44 < v121 && *(_DWORD *)v47 == *v44)
      {
        ++v44;
        char v47 = (void *)((char *)v47 + 4);
      }
      if ((unint64_t)v44 < v119 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v44)
      {
        int v44 = (_DWORD *)((char *)v44 + 2);
        char v47 = (void *)((char *)v47 + 2);
      }
      if ((unint64_t)v44 < v122 && *(unsigned __int8 *)v47 == *(unsigned __int8 *)v44) {
        LODWORD(v44) = v44 + 1;
      }
      unsigned int v49 = v44 - v46;
    }
    else
    {
      int v50 = v44 - v35 - 4;
      while (1)
      {
        unint64_t v51 = *(void *)v44 ^ *v47;
        if (v51) {
          break;
        }
        v44 += 2;
        ++v47;
        v50 += 8;
        if ((unint64_t)v44 >= v19) {
          goto LABEL_37;
        }
      }
      unsigned int v49 = (__clz(__rbit64(v51)) >> 3) + v50;
    }
LABEL_48:
    if ((unint64_t)v42 + (v49 + 240) / 0xFFuLL + 8 > v14) {
      return 0;
    }
    char v52 = *v16;
    unsigned int v53 = v49 - 15;
    if (v49 < 0xF)
    {
      unsigned char *v16 = v52 + v49;
    }
    else
    {
      unsigned char *v16 = v52 + 15;
      _DWORD *v45 = -1;
      if (v53 >= 0x3FC)
      {
        int v54 = v42 + 3;
        unint64_t v55 = v17;
        unint64_t v56 = v14;
        uint64_t v57 = 2 * ((v49 - 1035) / 0x3FC);
        memset(v42 + 3, 255, v57 * 2 + 4);
        LOWORD(v53) = (v49 - 1035) % 0x3FC;
        unsigned int v45 = &v54[v57];
        unint64_t v14 = v56;
        unint64_t v17 = v55;
      }
      int v58 = (char *)v45 + (unsigned __int16)v53 / 0xFFu;
      unsigned char *v58 = v53 + (unsigned __int16)v53 / 0xFFu;
      unsigned int v45 = v58 + 1;
    }
    v35 += v49 + 4;
    if ((unint64_t)v35 >= v17) {
      break;
    }
    v131[(-1640531535 * *(_DWORD *)(v35 - 2)) >> 19] = (_WORD)v35 - 2 - (_WORD)v12;
    unsigned int v59 = (-1640531535 * *(_DWORD *)v35) >> 19;
    uint64_t v34 = (char *)v12 + v131[v59];
    v131[v59] = (_WORD)v35 - (_WORD)v12;
    if (*(_DWORD *)v34 != *(_DWORD *)v35)
    {
      uint64_t v15 = v35;
      uint64_t v16 = v45;
      int v18 = v123;
      goto LABEL_5;
    }
    *(unsigned char *)unsigned int v45 = 0;
    uint64_t v42 = (_WORD *)((char *)v45 + 1);
    uint64_t v16 = v45;
  }
  uint64_t v15 = v35;
  uint64_t v16 = v45;
LABEL_120:
  LODWORD(v11) = v127;
  int v9 = v129;
  unsigned int v13 = v125;
LABEL_121:
  size_t v109 = v13 - v15;
  if ((unint64_t)&v16[v13 - v15 + 1 + (v13 - v15 + 240) / 0xFFuLL] > v14) {
    return 0;
  }
  unint64_t v111 = v109 - 15;
  if (v109 < 0xF)
  {
    unsigned char *v16 = 16 * v109;
  }
  else
  {
    unsigned char *v16 = -16;
    __int16 v112 = v16 + 1;
    if (v111 >= 0xFF)
    {
      unint64_t v113 = (char *)v12 + v9 - v15 - 270;
      memset(v112, 255, v113 / 0xFF + 1);
      unint64_t v111 = v113 % 0xFF;
      __int16 v112 = &v16[v113 / 0xFF + 2];
    }
    *__int16 v112 = v111;
    uint64_t v16 = v112;
  }
  memcpy(v16 + 1, v15, v109);
  return (v16 + 1 + v109 - v11);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_destSize(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3, int *a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](this, a2, a3);
  signed int v6 = v5;
  int v8 = v7;
  uint64_t v10 = v9;
  signed int v11 = (char *)v4;
  bzero(v124, 0x4020uLL);
  float v12 = (char *)*v8;
  signed int v13 = v12 + v12 / 0xFF + 16;
  if (v12 > 0x7E000000) {
    signed int v13 = 0;
  }
  if (v13 <= v6) {
    return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)v124, v11, (char *)v10, v12, v6, 1);
  }
  unint64_t v14 = v10 + v6;
  unint64_t v123 = v14;
  uint64_t result = 0;
  if ((int)v12 <= 65546)
  {
    if (v6 < 1 || v12 > 0x7E000000) {
      return result;
    }
    unint64_t v117 = &v11[(int)v12];
    unint64_t v119 = v8;
    int v127 = *v8;
    int v125 = (int)v12;
    __int16 v126 = 3;
    uint64_t v16 = v11;
    int v121 = v10;
    if (v12 < 0xD) {
      goto LABEL_8;
    }
    unint64_t v71 = (unint64_t)(v117 - 11);
    v124[(-1640531535 * *(_DWORD *)v11) >> 19] = 0;
    unint64_t v72 = (unint64_t)(v117 - 12);
    uint64_t v73 = v11;
LABEL_87:
    uint64_t v74 = v73 + 1;
    int v75 = *(_DWORD *)(v73 + 1);
    uint64_t v76 = 1;
    unint64_t v77 = 64;
    do
    {
      int v78 = v74;
      v74 += v76;
      if ((unint64_t)v74 > v71) {
        goto LABEL_149;
      }
      uint64_t v76 = v77++ >> 6;
      unsigned int v79 = (-1640531535 * v75) >> 19;
      uint64_t v80 = v124[v79];
      int v75 = *(_DWORD *)v74;
      v124[v79] = (_WORD)v78 - (_WORD)v11;
    }
    while (*(_DWORD *)&v11[v80] != *(_DWORD *)v78);
    uint64_t v81 = 0;
    int v82 = &v11[v80];
    int v83 = v78 - v73;
    int v84 = v78 - v73 - 15;
    do
    {
      int v85 = v84;
      int v86 = v81;
      unsigned int v87 = &v82[v81];
      uint64_t v16 = &v78[v81];
      if (&v82[v81] <= v11 || v16 <= v73) {
        break;
      }
      --v84;
      --v81;
    }
    while (*(v16 - 1) == *(v87 - 1));
    unsigned int v89 = v16 - v73;
    int v90 = (void *)(v10 + 1);
    if (v10 + 1 + (v83 + v86 + 240) / 0xFFuLL + (v16 - v73) + 11 > v14) {
      goto LABEL_149;
    }
    if ((v83 + v86) < 0xF)
    {
      *(unsigned char *)uint64_t v10 = 16 * v89;
    }
    else
    {
      int v91 = v86 + v78 - v73 - 15;
      *(unsigned char *)uint64_t v10 = -16;
      if (v91 > 254)
      {
        if (v85 >= 509) {
          int v85 = 509;
        }
        unsigned int v92 = v83 - v85 + v86 + 239;
        memset(v90, 255, v92 / 0xFF + 1);
        unint64_t v14 = v123;
        int v90 = (void *)(v10 + v92 / 0xFFuLL + 2);
        unsigned int v89 = v16 - v73;
        LOBYTE(v91) = v92 / 0xFF + (_BYTE)v78 - (_BYTE)v73 - 14 + v86;
      }
      *(unsigned char *)int v90 = v91;
      int v90 = (void *)((char *)v90 + 1);
    }
    unint64_t v93 = (_WORD *)((char *)v90 + v89);
    unsigned int v94 = v73;
    do
    {
      uint64_t v95 = *(void *)v94;
      v94 += 8;
      *v90++ = v95;
    }
    while (v90 < (void *)v93);
    if ((unint64_t)v93 + 11 > v14)
    {
LABEL_149:
      uint64_t v16 = v73;
LABEL_8:
      size_t v17 = v117 - v16;
      if (v10 + v117 - v16 + (v117 - v16 + 240) / 0xFFuLL + 1 > v14) {
        size_t v17 = ~v10 + v14 - (~v10 + v14 + 240) / 0xFF;
      }
      unint64_t v18 = v17 - 15;
      if (v17 < 0xF)
      {
        *(unsigned char *)uint64_t v10 = 16 * v17;
        int v20 = v121;
      }
      else
      {
        *(unsigned char *)uint64_t v10 = -16;
        unint64_t v19 = (unsigned char *)(v10 + 1);
        if (v18 >= 0xFF)
        {
          memset(v19, 255, (v17 - 270) / 0xFF + 1);
          unint64_t v18 = (v17 - 270) % 0xFF;
          unint64_t v19 = (unsigned char *)(v10 + (v17 - 270) / 0xFF + 2);
        }
        int v20 = v121;
        *unint64_t v19 = v18;
        uint64_t v10 = (uint64_t)v19;
      }
      memcpy((void *)(v10 + 1), v16, v17);
      *unint64_t v119 = v16 + v17 - v11;
      return (v10 + 1 + v17 - v20);
    }
    while (1)
    {
      *unint64_t v93 = (_WORD)v16 - (_WORD)v87;
      int v96 = v93 + 1;
      unint64_t v97 = v16 + 4;
      char v98 = v87 + 4;
      if (v72 <= (unint64_t)(v16 + 4))
      {
        uint64_t v101 = v16 + 4;
      }
      else
      {
        unint64_t v99 = *v97 ^ *v98;
        if (v99)
        {
          unsigned int v100 = __clz(__rbit64(v99)) >> 3;
          goto LABEL_127;
        }
        uint64_t v101 = v16 + 12;
        char v98 = v87 + 12;
      }
      if ((unint64_t)v101 >= v72)
      {
LABEL_116:
        if (v101 < v117 - 8 && *(_DWORD *)v98 == *(_DWORD *)v101)
        {
          v101 += 4;
          char v98 = (void *)((char *)v98 + 4);
        }
        if (v101 < v117 - 6 && *(unsigned __int16 *)v98 == *(unsigned __int16 *)v101)
        {
          v101 += 2;
          char v98 = (void *)((char *)v98 + 2);
        }
        if (v101 < v117 - 5 && *(unsigned __int8 *)v98 == *v101) {
          LODWORD(v101) = v101 + 1;
        }
        unsigned int v100 = v101 - v97;
      }
      else
      {
        int v102 = v101 - v16 - 4;
        while (1)
        {
          unint64_t v103 = *(void *)v101 ^ *v98;
          if (v103) {
            break;
          }
          v101 += 8;
          ++v98;
          v102 += 8;
          if ((unint64_t)v101 >= v72) {
            goto LABEL_116;
          }
        }
        unsigned int v100 = (__clz(__rbit64(v103)) >> 3) + v102;
      }
LABEL_127:
      v16 += v100 + 4;
      if ((unint64_t)v93 + (v100 + 240) / 0xFFuLL + 8 > v14)
      {
        v16 -= v100 - (255 * (v14 - v96) - 1516);
        if (v16 <= v78)
        {
          __int16 v112 = v16;
          do
          {
            int v113 = *(_DWORD *)v112++;
            v124[(-1640531535 * v113) >> 19] = 0;
          }
          while (v112 <= v78);
          unsigned int v100 = 255 * (v14 - v96) - 1516;
          unint64_t v14 = v123;
        }
        else
        {
          unsigned int v100 = 255 * (v14 - v96) - 1516;
        }
      }
      char v104 = *(unsigned char *)v10;
      unsigned int v105 = v100 - 15;
      if (v100 < 0xF)
      {
        *(unsigned char *)uint64_t v10 = v104 + v100;
        uint64_t v10 = (uint64_t)(v93 + 1);
      }
      else
      {
        *(unsigned char *)uint64_t v10 = v104 + 15;
        *int v96 = -1;
        if (v105 >= 0x3FC)
        {
          unint64_t v106 = v93 + 3;
          __int16 v107 = v100 - 1035;
          unsigned int v108 = (v100 - 1035) / 0x3FC;
          uint64_t v109 = 2 * v108;
          memset(v93 + 3, 255, v109 * 2 + 4);
          unint64_t v14 = v123;
          LOWORD(v105) = v107 - 1020 * v108;
          int v96 = &v106[v109];
        }
        uint64_t v110 = (unsigned __int16)v105 / 0xFFu;
        *((unsigned char *)v96 + v110) = v105 + (unsigned __int16)v105 / 0xFFu;
        uint64_t v10 = (uint64_t)v96 + v110 + 1;
      }
      if ((unint64_t)v16 >= v71) {
        goto LABEL_8;
      }
      v124[(-1640531535 * *(_DWORD *)(v16 - 2)) >> 19] = (_WORD)v16 - 2 - (_WORD)v11;
      unsigned int v111 = (-1640531535 * *(_DWORD *)v16) >> 19;
      unsigned int v87 = &v11[v124[v111]];
      v124[v111] = (_WORD)v16 - (_WORD)v11;
      if (*(_DWORD *)v87 != *(_DWORD *)v16)
      {
        uint64_t v73 = v16;
        goto LABEL_87;
      }
      unint64_t v93 = (_WORD *)(v10 + 1);
      *(unsigned char *)uint64_t v10 = 0;
      if (v10 + 12 > v14) {
        goto LABEL_8;
      }
    }
  }
  if (v6 < 1 || v12 > 0x7E000000) {
    return result;
  }
  char v120 = v8;
  unint64_t v21 = (unint64_t)&v12[(void)v11 - 11];
  unint64_t v116 = (unint64_t)&v12[(void)v11 - 5];
  unint64_t v118 = &v12[(void)v11];
  int v127 = *v8;
  int v125 = (int)v12;
  int v22 = v11 + 2;
  unint64_t v23 = 0xCF1BBCDCBB000000 * *(void *)v11;
  __int16 v126 = 2;
  *(_DWORD *)((char *)v124 + ((v23 >> 50) & 0x3FFC)) = 0;
  unint64_t v24 = (unint64_t)&v12[(void)v11 - 12];
  unint64_t v114 = (unint64_t)&v12[(void)v11 - 6];
  unint64_t v115 = (unint64_t)&v12[(void)v11 - 8];
  int v122 = v10;
  unsigned int v25 = (uint64_t *)v11;
LABEL_18:
  uint64_t v27 = (uint64_t *)((char *)v25 + 1);
  uint64_t v26 = *(uint64_t *)((char *)v25 + 1);
  uint64_t v28 = 1;
  unint64_t v29 = 65;
  while (1)
  {
    int v30 = (uint64_t *)v22;
    unint64_t v31 = ((0xCF1BBCDCBB000000 * v26) >> 50) & 0x3FFC;
    uint64_t v32 = *(unsigned int *)((char *)v124 + v31);
    uint64_t v26 = *v30;
    *(_DWORD *)((char *)v124 + v31) = v27 - v11;
    if ((int)v32 + 0xFFFF >= (v27 - v11) && *(_DWORD *)&v11[v32] == *(_DWORD *)v27) {
      break;
    }
    int v22 = (char *)v30 + v28;
    uint64_t v28 = v29++ >> 6;
    uint64_t v27 = v30;
    if ((unint64_t)v22 > v21) {
      goto LABEL_80;
    }
  }
  uint64_t v33 = 0;
  uint64_t v34 = &v11[v32];
  int v35 = v27 - v25;
  int v36 = v27 - v25 - 15;
  do
  {
    int v37 = v36;
    int v38 = v33;
    char v39 = &v34[v33];
    int v40 = (uint64_t *)((char *)v27 + v33);
    if (&v34[v33] <= v11 || v40 <= v25) {
      break;
    }
    --v36;
    --v33;
  }
  while (*((unsigned __int8 *)v40 - 1) == *(v39 - 1));
  int v42 = v40 - v25;
  uint64_t v43 = (unsigned char *)(v10 + 1);
  if (v10 + 1 + (v35 + v38 + 240) / 0xFFuLL + (v40 - v25) + 11 <= v14)
  {
    if ((v35 + v38) < 0xF)
    {
      *(unsigned char *)uint64_t v10 = 16 * v42;
    }
    else
    {
      int v44 = v38 + v27 - v25 - 15;
      *(unsigned char *)uint64_t v10 = -16;
      if (v44 > 254)
      {
        if (v37 >= 509) {
          int v45 = 509;
        }
        else {
          int v45 = v37;
        }
        unsigned int v46 = v35 - v45 + v38 + 239;
        memset(v43, 255, v46 / 0xFF + 1);
        unint64_t v14 = v123;
        uint64_t v43 = (unsigned char *)(v10 + v46 / 0xFFuLL + 2);
        int v42 = v40 - v25;
        LOBYTE(v44) = v46 / 0xFF + (_BYTE)v27 - (_BYTE)v25 - 14 + v38;
      }
      *v43++ = v44;
    }
    uint64_t v47 = 0;
    unint64_t v48 = &v43[v42];
    do
    {
      *(void *)&v43[v47 * 8] = v25[v47];
      ++v47;
    }
    while (&v43[v47 * 8] < (unsigned char *)v48);
    if ((unint64_t)v48 + 11 <= v14)
    {
      unsigned int v25 = v40;
      do
      {
        *unint64_t v48 = (_WORD)v25 - (_WORD)v39;
        unsigned int v49 = v48 + 1;
        int v50 = (uint64_t *)((char *)v25 + 4);
        unint64_t v51 = v39 + 4;
        if (v24 <= (unint64_t)v25 + 4)
        {
          int v54 = (_DWORD *)v25 + 1;
        }
        else
        {
          unint64_t v52 = *v50 ^ *v51;
          if (v52)
          {
            unsigned int v53 = __clz(__rbit64(v52)) >> 3;
            goto LABEL_62;
          }
          int v54 = (_DWORD *)v25 + 3;
          unint64_t v51 = v39 + 12;
        }
        if ((unint64_t)v54 >= v24)
        {
LABEL_51:
          if ((unint64_t)v54 < v115 && *(_DWORD *)v51 == *v54)
          {
            ++v54;
            unint64_t v51 = (void *)((char *)v51 + 4);
          }
          if ((unint64_t)v54 < v114 && *(unsigned __int16 *)v51 == *(unsigned __int16 *)v54)
          {
            int v54 = (_DWORD *)((char *)v54 + 2);
            unint64_t v51 = (void *)((char *)v51 + 2);
          }
          if ((unint64_t)v54 < v116 && *(unsigned __int8 *)v51 == *(unsigned __int8 *)v54) {
            LODWORD(v54) = v54 + 1;
          }
          unsigned int v53 = v54 - v50;
        }
        else
        {
          int v55 = v54 - v25 - 4;
          while (1)
          {
            unint64_t v56 = *(void *)v54 ^ *v51;
            if (v56) {
              break;
            }
            v54 += 2;
            ++v51;
            v55 += 8;
            if ((unint64_t)v54 >= v24) {
              goto LABEL_51;
            }
          }
          unsigned int v53 = (__clz(__rbit64(v56)) >> 3) + v55;
        }
LABEL_62:
        unsigned int v25 = (uint64_t *)((char *)v25 + v53 + 4);
        if ((unint64_t)v48 + (v53 + 240) / 0xFFuLL + 8 > v14)
        {
          unsigned int v25 = (uint64_t *)((char *)v25 - (v53 - (255 * (v14 - v49) - 1516)));
          if (v25 <= v27)
          {
            unint64_t v66 = v25;
            do
            {
              uint64_t v67 = *v66;
              unint64_t v66 = (uint64_t *)((char *)v66 + 1);
              *(_DWORD *)((char *)v124 + (((0xCF1BBCDCBB000000 * v67) >> 50) & 0x3FFC)) = 0;
            }
            while (v66 <= v27);
            unsigned int v53 = 255 * (v14 - v49) - 1516;
            unint64_t v14 = v123;
          }
          else
          {
            unsigned int v53 = 255 * (v14 - v49) - 1516;
          }
        }
        char v57 = *(unsigned char *)v10;
        unsigned int v58 = v53 - 15;
        if (v53 < 0xF)
        {
          *(unsigned char *)uint64_t v10 = v57 + v53;
          uint64_t v10 = (uint64_t)(v48 + 1);
        }
        else
        {
          *(unsigned char *)uint64_t v10 = v57 + 15;
          _DWORD *v49 = -1;
          if (v58 >= 0x3FC)
          {
            unsigned int v59 = v48 + 3;
            __int16 v60 = v53 - 1035;
            unsigned int v61 = (v53 - 1035) / 0x3FC;
            uint64_t v62 = 2 * v61;
            memset(v48 + 3, 255, v62 * 2 + 4);
            unint64_t v14 = v123;
            LOWORD(v58) = v60 - 1020 * v61;
            unsigned int v49 = &v59[v62];
          }
          uint64_t v63 = (unsigned __int16)v58 / 0xFFu;
          *((unsigned char *)v49 + v63) = v58 + (unsigned __int16)v58 / 0xFFu;
          uint64_t v10 = (uint64_t)v49 + v63 + 1;
        }
        if ((unint64_t)v25 >= v21) {
          break;
        }
        *(_DWORD *)((char *)v124 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v25 - 2)) >> 50) & 0x3FFC)) = v25 - 2 - v11;
        unint64_t v64 = ((0xCF1BBCDCBB000000 * *v25) >> 50) & 0x3FFC;
        uint64_t v65 = *(unsigned int *)((char *)v124 + v64);
        *(_DWORD *)((char *)v124 + v64) = v25 - v11;
        if ((int)v65 + 0xFFFF < (v25 - v11)
          || (char v39 = &v11[v65], *(_DWORD *)&v11[v65] != *(_DWORD *)v25))
        {
          int v22 = (char *)v25 + 2;
          if ((unint64_t)v25 + 2 > v21) {
            break;
          }
          goto LABEL_18;
        }
        unint64_t v48 = (_WORD *)(v10 + 1);
        *(unsigned char *)uint64_t v10 = 0;
      }
      while (v10 + 12 <= v14);
    }
  }
LABEL_80:
  size_t v68 = v118 - (char *)v25;
  if (v10 + v118 - (char *)v25 + (v118 - (char *)v25 + 240) / 0xFFuLL + 1 > v14) {
    size_t v68 = ~v10 + v14 - (~v10 + v14 + 240) / 0xFF;
  }
  unint64_t v69 = v68 - 15;
  if (v68 < 0xF)
  {
    *(unsigned char *)uint64_t v10 = 16 * v68;
  }
  else
  {
    *(unsigned char *)uint64_t v10 = -16;
    int v70 = (unsigned char *)(v10 + 1);
    if (v69 >= 0xFF)
    {
      memset(v70, 255, (v68 - 270) / 0xFF + 1);
      unint64_t v69 = (v68 - 270) % 0xFF;
      int v70 = (unsigned char *)(v10 + (v68 - 270) / 0xFF + 2);
    }
    unsigned char *v70 = v69;
    uint64_t v10 = (uint64_t)v70;
  }
  memcpy((void *)(v10 + 1), v25, v68);
  *char v120 = v25 + v68 - v11;
  return (v10 + 1 + v68 - v122);
}

void *pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_createStream(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  uint64_t v1 = malloc(0x4020uLL);
  unint64_t v2 = v1;
  if (v1 && (v1 & 7) == 0) {
    bzero(v1, 0x4020uLL);
  }
  return v2;
}

void pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_resetStream(void *a1)
{
}

double pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_resetStream_fast(char *a1)
{
  unint64_t v2 = (int *)(a1 + 0x4000);
  if (!*((_WORD *)a1 + 8194))
  {
    if (*((_WORD *)a1 + 8195) == 2)
    {
      int v4 = *v2;
      if (*v2 < 0x40000001)
      {
LABEL_10:
        if (v4) {
          *unint64_t v2 = v4 + 0x10000;
        }
        goto LABEL_12;
      }
    }
    else if (!*((_WORD *)a1 + 8195))
    {
      int v4 = *v2;
      goto LABEL_10;
    }
    *((_WORD *)a1 + 8195) = 0;
    bzero(a1, 0x4004uLL);
LABEL_12:
    *((_DWORD *)a1 + 4102) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 16392) = 0u;
    return result;
  }

  bzero(a1, 0x4020uLL);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_freeStream(void *a1)
{
  if (a1) {
    free(a1);
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_loadDict(void *a1, char *a2, unsigned int a3)
{
  signed int v6 = a1 + 2048;
  bzero(a1, 0x4020uLL);
  *(_DWORD *)signed int v6 = 0x10000;
  if ((int)a3 < 8) {
    return 0;
  }
  int v8 = &a2[a3];
  uint64_t v9 = v8 - 0x10000;
  if (a3 <= 0x10000) {
    uint64_t v9 = a2;
  }
  a1[2049] = v9;
  uint64_t result = (v8 - v9);
  *((_DWORD *)v6 + 6) = result;
  *((_WORD *)v6 + 3) = 2;
  unint64_t v10 = (unint64_t)(v8 - 8);
  if ((unint64_t)v9 <= v10)
  {
    int v11 = a3;
    if (a3 <= 0x10000uLL) {
      int v11 = 0x10000;
    }
    unsigned int v12 = v11 - a3;
    do
    {
      uint64_t v13 = *(void *)v9;
      v9 += 3;
      *(_DWORD *)((char *)a1 + (((0xCF1BBCDCBB000000 * v13) >> 50) & 0x3FFC)) = v12;
      v12 += 3;
    }
    while ((unint64_t)v9 <= v10);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_attach_dictionary(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_resetStream_fast((char *)a1);
  if (a2)
  {
    if (!*(_DWORD *)(a1 + 0x4000)) {
      *(_DWORD *)(a1 + 0x4000) = 0x10000;
    }
    if (*(_DWORD *)(a2 + 16408)) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(void *)(a1 + 16400) = v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_continue(uint64_t a1, char *a2, unsigned char *a3, int a4, int a5, int a6)
{
  if (*(_WORD *)(a1 + 16388)) {
    return 0;
  }
  int v9 = a4;
  int v11 = (char *)(*(void *)(a1 + 16392) + *(unsigned int *)(a1 + 16408));
  v528 = (unsigned int *)(a1 + 0x4000);
  sub_21684A788(a1, a4);
  uint64_t v13 = v528;
  unsigned int v12 = a2;
  if (a6 <= 1) {
    int v14 = 1;
  }
  else {
    int v14 = a6;
  }
  LODWORD(v15) = v528[6];
  if ((v15 - 4) < 0xFFFFFFFD || v11 == a2)
  {
    size_t v17 = *(char **)(a1 + 16392);
  }
  else
  {
    LODWORD(v15) = 0;
    v528[6] = 0;
    *(void *)(a1 + 16392) = a2;
    size_t v17 = a2;
    int v11 = a2;
  }
  unint64_t v18 = &a2[v9];
  if (v18 > v17 && v18 < v11)
  {
    LODWORD(v15) = v11 - v18;
    if ((v11 - v18) >= 0x10000) {
      LODWORD(v15) = 0x10000;
    }
    if (v15 >= 4) {
      uint64_t v15 = v15;
    }
    else {
      uint64_t v15 = 0;
    }
    v528[6] = v15;
    size_t v17 = &v11[-v15];
    *(void *)(a1 + 16392) = &v11[-v15];
  }
  uint64_t v524 = v9;
  if (v11 == a2)
  {
    uint64_t v21 = *v528;
    int v22 = &a2[-v21];
    if (!WORD1(v15))
    {
      uint64_t v23 = (v21 - v15);
      if (v21 > v15)
      {
        if (v9 > 0x7E000000) {
          return 0;
        }
        unint64_t v526 = (unint64_t)&a3[a5];
        v528[6] = v15 + v9;
        unsigned int *v528 = v21 + v9;
        *((_WORD *)v528 + 3) = 2;
        unint64_t v24 = (uint64_t *)a2;
        int v503 = (int)a3;
        if (v9 >= 0xD)
        {
          unint64_t v25 = (unint64_t)&a2[v9 - 11];
          unint64_t v483 = (unint64_t)(v18 - 5);
          uint64_t v26 = &a2[-v15];
          uint64_t v27 = a2 + 2;
          *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(void *)a2) >> 50) & 0x3FFC)) = v21;
          int v28 = v14 << 6;
          unint64_t v29 = (unint64_t)(v18 - 12);
          unint64_t v477 = (unint64_t)(v18 - 6);
          unint64_t v479 = (unint64_t)(v18 - 8);
          unint64_t v24 = (uint64_t *)a2;
          v507 = &a2[v9];
          unint64_t v529 = v25;
          int v518 = v28;
LABEL_30:
          int v30 = (_DWORD *)((char *)v24 + 1);
          uint64_t v31 = *(uint64_t *)((char *)v24 + 1);
          int v32 = v28;
          while (1)
          {
            uint64_t v33 = v27;
            unint64_t v34 = ((0xCF1BBCDCBB000000 * v31) >> 50) & 0x3FFC;
            uint64_t v35 = *(unsigned int *)(a1 + v34);
            uint64_t v31 = *v33;
            *(_DWORD *)(a1 + v34) = v30 - v22;
            BOOL v36 = v35 >= v23
               && (int)v35 + 0xFFFF >= (v30 - v22);
            if (v36 && *(_DWORD *)&v22[v35] == *v30) {
              break;
            }
            uint64_t v27 = (char *)v33 + (v32++ >> 6);
            int v30 = v33;
            if ((unint64_t)v27 > v25) {
              goto LABEL_284;
            }
          }
          uint64_t v37 = 0;
          int v38 = &v22[v35];
          int v39 = v30 - v24;
          int v40 = v30 - v24 - 15;
          int v41 = v40;
          do
          {
            int v42 = v41;
            int v43 = v37;
            int v44 = &v38[v37];
            int v45 = (uint64_t *)((char *)v30 + v37);
            if (&v38[v37] <= v26 || v45 <= v24) {
              break;
            }
            --v41;
            --v37;
          }
          while (*((unsigned __int8 *)v45 - 1) == *(v44 - 1));
          unsigned int v47 = v45 - v24;
          unint64_t v48 = a3 + 1;
          if ((unint64_t)&a3[(v45 - v24) + 9 + (v39 + v43) / 0xFFuLL] <= v526)
          {
            if ((v39 + v43) < 0xF)
            {
              *a3 = 16 * v47;
            }
            else
            {
              char v49 = v43 + v40;
              *a3 = -16;
              if (v43 + v40 > 254)
              {
                if (v42 >= 509) {
                  int v50 = 509;
                }
                else {
                  int v50 = v42;
                }
                unsigned int v51 = v39 - v50 + v43 + 239;
                unsigned int v513 = v23;
                char v488 = v39 - 14;
                memset(v48, 255, v51 / 0xFF + 1);
                unsigned int v47 = v45 - v24;
                uint64_t v23 = v513;
                unsigned int v12 = a2;
                unint64_t v48 = &a3[v51 / 0xFFuLL + 2];
                char v49 = v51 / 0xFF + v488 + v43;
              }
              *(unsigned char *)unint64_t v48 = v49;
              unint64_t v48 = (void *)((char *)v48 + 1);
            }
            unint64_t v52 = (_WORD *)((char *)v48 + v47);
            do
            {
              uint64_t v53 = *v24++;
              *v48++ = v53;
            }
            while (v48 < (void *)v52);
            int v54 = a3;
            unint64_t v24 = v45;
            while (1)
            {
              _WORD *v52 = (_WORD)v24 - (_WORD)v44;
              a3 = v52 + 1;
              int v55 = (uint64_t *)((char *)v24 + 4);
              unint64_t v56 = v44 + 4;
              if (v29 <= (unint64_t)v24 + 4)
              {
                unsigned int v59 = (_DWORD *)v24 + 1;
              }
              else
              {
                unint64_t v57 = *v55 ^ *v56;
                if (v57)
                {
                  unsigned int v58 = __clz(__rbit64(v57)) >> 3;
                  goto LABEL_77;
                }
                unsigned int v59 = (_DWORD *)v24 + 3;
                unint64_t v56 = v44 + 12;
              }
              if ((unint64_t)v59 >= v29)
              {
LABEL_66:
                if ((unint64_t)v59 < v479 && *(_DWORD *)v56 == *v59)
                {
                  ++v59;
                  unint64_t v56 = (void *)((char *)v56 + 4);
                }
                if ((unint64_t)v59 < v477 && *(unsigned __int16 *)v56 == *(unsigned __int16 *)v59)
                {
                  unsigned int v59 = (_DWORD *)((char *)v59 + 2);
                  unint64_t v56 = (void *)((char *)v56 + 2);
                }
                if ((unint64_t)v59 < v483 && *(unsigned __int8 *)v56 == *(unsigned __int8 *)v59) {
                  LODWORD(v59) = v59 + 1;
                }
                unsigned int v58 = v59 - v55;
              }
              else
              {
                int v60 = v59 - v24 - 4;
                while (1)
                {
                  unint64_t v61 = *(void *)v59 ^ *v56;
                  if (v61) {
                    break;
                  }
                  v59 += 2;
                  ++v56;
                  v60 += 8;
                  if ((unint64_t)v59 >= v29) {
                    goto LABEL_66;
                  }
                }
                unsigned int v58 = (__clz(__rbit64(v61)) >> 3) + v60;
              }
LABEL_77:
              if ((unint64_t)v52 + (v58 + 240) / 0xFFuLL + 8 > v526) {
                return 0;
              }
              char v62 = *v54;
              unsigned int v63 = v58 - 15;
              if (v58 < 0xF)
              {
                char *v54 = v62 + v58;
              }
              else
              {
                char *v54 = v62 + 15;
                *(_DWORD *)a3 = -1;
                if (v63 >= 0x3FC)
                {
                  unint64_t v64 = v52 + 3;
                  uint64_t v65 = 2 * ((v58 - 1035) / 0x3FC);
                  unint64_t v66 = v26;
                  uint64_t v67 = v23;
                  memset(v52 + 3, 255, v65 * 2 + 4);
                  uint64_t v23 = v67;
                  uint64_t v26 = v66;
                  unint64_t v25 = v529;
                  unsigned int v12 = a2;
                  LOWORD(v63) = (v58 - 1035) % 0x3FC;
                  a3 = &v64[v65];
                  unint64_t v18 = v507;
                }
                size_t v68 = &a3[(unsigned __int16)v63 / 0xFFu];
                unsigned char *v68 = v63 + (unsigned __int16)v63 / 0xFFu;
                a3 = v68 + 1;
              }
              unint64_t v24 = (uint64_t *)((char *)v24 + v58 + 4);
              if ((unint64_t)v24 >= v25) {
                goto LABEL_284;
              }
              *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v24 - 2)) >> 50) & 0x3FFC)) = v24 - 2 - v22;
              unint64_t v69 = ((0xCF1BBCDCBB000000 * *v24) >> 50) & 0x3FFC;
              uint64_t v70 = *(unsigned int *)(a1 + v69);
              *(_DWORD *)(a1 + v69) = v24 - v22;
              BOOL v71 = v70 >= v23
                 && (int)v70 + 0xFFFF >= (v24 - v22);
              if (!v71 || (int v44 = &v22[v70], *(_DWORD *)&v22[v70] != *(_DWORD *)v24))
              {
                uint64_t v27 = (char *)v24 + 2;
                int v28 = v518;
                if ((unint64_t)v24 + 2 > v25) {
                  goto LABEL_284;
                }
                goto LABEL_30;
              }
              *a3 = 0;
              unint64_t v52 = a3 + 1;
              int v54 = a3;
            }
          }
          return 0;
        }
LABEL_284:
        unint64_t v198 = v18 - (char *)v24;
        if ((unint64_t)&a3[v18 - (char *)v24 + 1 + (v18 - (char *)v24 + 240) / 0xFFuLL] <= v526)
        {
          unint64_t v199 = v198 - 15;
          if (v198 < 0xF)
          {
            *a3 = 16 * v198;
          }
          else
          {
            *a3 = -16;
            unint64_t v200 = a3 + 1;
            if (v199 >= 0xFF)
            {
              unint64_t v201 = &v12[v524] - (char *)v24 - 270;
              memset(v200, 255, v201 / 0xFF + 1);
              unint64_t v199 = v201 % 0xFF;
              unint64_t v200 = &a3[v201 / 0xFF + 2];
            }
            *unint64_t v200 = v199;
            a3 = v200;
          }
          memcpy(a3 + 1, v24, v18 - (char *)v24);
          return (a3 + 1 + v198 - v503);
        }
        return 0;
      }
    }
    if (v9 > 0x7E000000) {
      return 0;
    }
    unint64_t v526 = (unint64_t)&a3[a5];
    v528[6] = v15 + v9;
    unsigned int *v528 = v21 + v9;
    *((_WORD *)v528 + 3) = 2;
    unint64_t v24 = (uint64_t *)a2;
    int v503 = (int)a3;
    if (v9 < 0xD) {
      goto LABEL_284;
    }
    unint64_t v153 = (unint64_t)&a2[v9 - 11];
    unint64_t v494 = (unint64_t)(v18 - 5);
    unint64_t v154 = &a2[-v15];
    unint64_t v155 = a2 + 2;
    *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(void *)a2) >> 50) & 0x3FFC)) = v21;
    int v156 = v14 << 6;
    uint64_t v157 = &a2[v9];
    unint64_t v158 = (unint64_t)(v18 - 12);
    v509 = v157;
    unint64_t v485 = (unint64_t)(v157 - 6);
    unint64_t v490 = (unint64_t)(v157 - 8);
    unint64_t v24 = (uint64_t *)a2;
    int v530 = v14 << 6;
LABEL_228:
    unint64_t v159 = (_DWORD *)((char *)v24 + 1);
    uint64_t v160 = *(uint64_t *)((char *)v24 + 1);
    int v161 = v156;
    while (1)
    {
      uint64_t v162 = v155;
      unint64_t v163 = ((0xCF1BBCDCBB000000 * v160) >> 50) & 0x3FFC;
      uint64_t v164 = *(unsigned int *)(a1 + v163);
      uint64_t v160 = *v162;
      *(_DWORD *)(a1 + v163) = v159 - v22;
      if ((int)v164 + 0xFFFF >= (v159 - v22) && *(_DWORD *)&v22[v164] == *v159) {
        break;
      }
      unint64_t v155 = (char *)v162 + (v161++ >> 6);
      unint64_t v159 = v162;
      if ((unint64_t)v155 > v153)
      {
LABEL_283:
        unint64_t v18 = v509;
        goto LABEL_284;
      }
    }
    uint64_t v165 = 0;
    unsigned int v166 = &v22[v164];
    int v167 = v159 - v24;
    int v168 = v159 - v24 - 15;
    int v169 = v168;
    do
    {
      int v170 = v169;
      int v171 = v165;
      int v172 = &v166[v165];
      unint64_t v173 = (uint64_t *)((char *)v159 + v165);
      if (&v166[v165] <= v154 || v173 <= v24) {
        break;
      }
      --v169;
      --v165;
    }
    while (*((unsigned __int8 *)v173 - 1) == *(v172 - 1));
    unsigned int v175 = v173 - v24;
    int v176 = a3 + 1;
    if ((unint64_t)&a3[(v173 - v24) + 9 + (v167 + v171) / 0xFFuLL] > v526) {
      return 0;
    }
    if ((v167 + v171) < 0xF)
    {
      *a3 = 16 * v175;
    }
    else
    {
      char v177 = v171 + v168;
      *a3 = -16;
      if (v171 + v168 > 254)
      {
        if (v170 >= 509) {
          int v178 = 509;
        }
        else {
          int v178 = v170;
        }
        unsigned int v179 = v167 - v178 + v171 + 239;
        char v498 = v167 - 14;
        memset(v176, 255, v179 / 0xFF + 1);
        unsigned int v175 = v173 - v24;
        unsigned int v12 = a2;
        int v176 = &a3[v179 / 0xFFuLL + 2];
        char v177 = v179 / 0xFF + v498 + v171;
      }
      *(unsigned char *)int v176 = v177;
      int v176 = (void *)((char *)v176 + 1);
    }
    int v180 = (_WORD *)((char *)v176 + v175);
    do
    {
      uint64_t v181 = *v24++;
      *v176++ = v181;
    }
    while (v176 < (void *)v180);
    char v182 = a3;
    unint64_t v24 = v173;
    while (1)
    {
      *int v180 = (_WORD)v24 - (_WORD)v172;
      a3 = v180 + 1;
      unsigned int v183 = (uint64_t *)((char *)v24 + 4);
      uint64_t v184 = v172 + 4;
      if (v158 <= (unint64_t)v24 + 4)
      {
        int v187 = (_DWORD *)v24 + 1;
      }
      else
      {
        unint64_t v185 = *v183 ^ *v184;
        if (v185)
        {
          unsigned int v186 = __clz(__rbit64(v185)) >> 3;
          goto LABEL_271;
        }
        int v187 = (_DWORD *)v24 + 3;
        uint64_t v184 = v172 + 12;
      }
      if ((unint64_t)v187 >= v158)
      {
LABEL_260:
        if ((unint64_t)v187 < v490 && *(_DWORD *)v184 == *v187)
        {
          ++v187;
          uint64_t v184 = (void *)((char *)v184 + 4);
        }
        if ((unint64_t)v187 < v485 && *(unsigned __int16 *)v184 == *(unsigned __int16 *)v187)
        {
          int v187 = (_DWORD *)((char *)v187 + 2);
          uint64_t v184 = (void *)((char *)v184 + 2);
        }
        if ((unint64_t)v187 < v494 && *(unsigned __int8 *)v184 == *(unsigned __int8 *)v187) {
          LODWORD(v187) = v187 + 1;
        }
        unsigned int v186 = v187 - v183;
      }
      else
      {
        int v188 = v187 - v24 - 4;
        while (1)
        {
          unint64_t v189 = *(void *)v187 ^ *v184;
          if (v189) {
            break;
          }
          v187 += 2;
          ++v184;
          v188 += 8;
          if ((unint64_t)v187 >= v158) {
            goto LABEL_260;
          }
        }
        unsigned int v186 = (__clz(__rbit64(v189)) >> 3) + v188;
      }
LABEL_271:
      if ((unint64_t)v180 + (v186 + 240) / 0xFFuLL + 8 > v526) {
        return 0;
      }
      char v190 = *v182;
      unsigned int v191 = v186 - 15;
      if (v186 < 0xF)
      {
        *char v182 = v190 + v186;
      }
      else
      {
        *char v182 = v190 + 15;
        *(_DWORD *)a3 = -1;
        if (v191 >= 0x3FC)
        {
          v192 = v180 + 3;
          unint64_t v193 = v154;
          uint64_t v194 = 2 * ((v186 - 1035) / 0x3FC);
          memset(v180 + 3, 255, v194 * 2 + 4);
          unsigned int v12 = a2;
          LOWORD(v191) = (v186 - 1035) % 0x3FC;
          a3 = &v192[v194];
          unint64_t v154 = v193;
        }
        char v195 = &a3[(unsigned __int16)v191 / 0xFFu];
        unsigned char *v195 = v191 + (unsigned __int16)v191 / 0xFFu;
        a3 = v195 + 1;
      }
      unint64_t v24 = (uint64_t *)((char *)v24 + v186 + 4);
      if ((unint64_t)v24 >= v153) {
        goto LABEL_283;
      }
      *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v24 - 2)) >> 50) & 0x3FFC)) = v24 - 2 - v22;
      unint64_t v196 = ((0xCF1BBCDCBB000000 * *v24) >> 50) & 0x3FFC;
      uint64_t v197 = *(unsigned int *)(a1 + v196);
      *(_DWORD *)(a1 + v196) = v24 - v22;
      if ((int)v197 + 0xFFFF < (v24 - v22)
        || (int v172 = &v22[v197], *(_DWORD *)&v22[v197] != *(_DWORD *)v24))
      {
        unint64_t v155 = (char *)v24 + 2;
        int v156 = v530;
        if ((unint64_t)v24 + 2 > v153) {
          goto LABEL_283;
        }
        goto LABEL_228;
      }
      *a3 = 0;
      int v180 = a3 + 1;
      char v182 = a3;
    }
  }
  uint64_t v19 = *(void *)(a1 + 16400);
  if (!v19)
  {
    uint64_t v72 = *v528;
    uint64_t v73 = &a2[-v72];
    unsigned int v527 = *v528;
    if (!WORD1(v15))
    {
      uint64_t v74 = (v72 - v15);
      if (v72 > v15)
      {
        if (v9 > 0x7E000000) {
          goto LABEL_642;
        }
        unint64_t v75 = (unint64_t)&a3[a5];
        v528[6] = v15 + v9;
        unsigned int *v528 = v72 + v9;
        *((_WORD *)v528 + 3) = 2;
        unsigned int v76 = v9;
        unint64_t v77 = (uint64_t *)a2;
        int v504 = (int)a3;
        int v497 = v76;
        if (v76 < 0xD) {
          goto LABEL_650;
        }
        uint64_t v78 = v15;
        unint64_t v79 = (unint64_t)&a2[v524 - 11];
        v514 = &v17[v15];
        v519 = v18 - 5;
        uint64_t v80 = &v514[-v72];
        *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(void *)a2) >> 50) & 0x3FFC)) = v72;
        int v81 = v14 << 6;
        int v82 = a2 + 2;
        int v83 = a2 + 1;
        unsigned int v84 = v72 + 1;
        unint64_t v85 = (unint64_t)(v18 - 12);
        unint64_t v459 = (unint64_t)(v18 - 6);
        unint64_t v461 = (unint64_t)(v18 - 8);
        v480 = &v17[v78];
        unint64_t v77 = (uint64_t *)a2;
        v499 = &a3[a5];
        v489 = v17;
        unint64_t v493 = (unint64_t)(v18 - 12);
        v508 = v18;
        int v484 = v14 << 6;
LABEL_99:
        uint64_t v86 = *(uint64_t *)((char *)v77 + 1);
        int v87 = v81;
        while (1)
        {
          int v88 = v82;
          unint64_t v89 = ((0xCF1BBCDCBB000000 * v86) >> 50) & 0x3FFC;
          uint64_t v90 = *(unsigned int *)(a1 + v89);
          uint64_t v86 = *v88;
          *(_DWORD *)(a1 + v89) = v84;
          if (v90 >= v74 && (int)v90 + 0xFFFF >= v84)
          {
            unsigned int v92 = v90 >= v72 ? v73 : v80;
            if (*(_DWORD *)&v92[v90] == *v83) {
              break;
            }
          }
          unsigned int v84 = v88 - v73;
          int v82 = (char *)v88 + (v87++ >> 6);
          int v83 = v88;
          if ((unint64_t)v82 > v79) {
            goto LABEL_650;
          }
        }
        uint64_t v93 = 0;
        unsigned int v94 = &v92[v90];
        if (v90 >= v72) {
          uint64_t v95 = v12;
        }
        else {
          uint64_t v95 = v17;
        }
        __int16 v96 = v84 - v90;
        int v97 = v83 - v77;
        int v98 = v83 - v77 - 15;
        char v99 = (_BYTE)v83 - (_BYTE)v77 - 14;
        int v100 = v98;
        do
        {
          int v101 = v100;
          int v102 = v93;
          unint64_t v103 = &v94[v93];
          char v104 = (uint64_t *)((char *)v83 + v93);
          if (&v94[v93] <= v95 || v104 <= v77) {
            break;
          }
          --v100;
          --v93;
        }
        while (*((unsigned __int8 *)v104 - 1) == *(v103 - 1));
        unsigned int v106 = v104 - v77;
        __int16 v107 = a3 + 1;
        if ((unint64_t)&a3[(v104 - v77) + 9 + (v97 + v102) / 0xFFuLL] > v75) {
          goto LABEL_657;
        }
        if ((v97 + v102) < 0xF)
        {
          *a3 = 16 * v106;
          size_t v17 = v489;
        }
        else
        {
          char v108 = v102 + v98;
          *a3 = -16;
          if (v102 + v98 > 254)
          {
            if (v101 >= 509) {
              int v109 = 509;
            }
            else {
              int v109 = v101;
            }
            unsigned int v110 = v97 - v109 + v102 + 239;
            unsigned int v473 = v74;
            unint64_t v471 = v79;
            unsigned int v111 = v80;
            char v463 = v99;
            memset(v107, 255, v110 / 0xFF + 1);
            unsigned int v106 = v104 - v77;
            unint64_t v79 = v471;
            unint64_t v85 = v493;
            uint64_t v80 = v111;
            uint64_t v74 = v473;
            unint64_t v75 = (unint64_t)v499;
            LODWORD(v72) = v527;
            unsigned int v12 = a2;
            __int16 v107 = &a3[v110 / 0xFFuLL + 2];
            char v108 = v110 / 0xFF + v463 + v102;
          }
          size_t v17 = v489;
          *(unsigned char *)__int16 v107 = v108;
          __int16 v107 = (void *)((char *)v107 + 1);
        }
        __int16 v112 = (_WORD *)((char *)v107 + v106);
        do
        {
          uint64_t v113 = *v77++;
          *v107++ = v113;
        }
        while (v107 < (void *)v112);
        unint64_t v114 = a3;
        unint64_t v77 = v104;
        while (1)
        {
          *__int16 v112 = v96;
          a3 = v112 + 1;
          if (v95 != v17)
          {
            unint64_t v115 = (uint64_t *)((char *)v77 + 4);
            unint64_t v116 = v103 + 4;
            if (v85 <= (unint64_t)v77 + 4)
            {
              int v124 = (_DWORD *)v77 + 1;
            }
            else
            {
              unint64_t v117 = *v115 ^ *v116;
              if (v117)
              {
                unsigned int v118 = __clz(__rbit64(v117)) >> 3;
LABEL_158:
                unint64_t v77 = (uint64_t *)((char *)v77 + v118 + 4);
                goto LABEL_199;
              }
              int v124 = (_DWORD *)v77 + 3;
              unint64_t v116 = v103 + 12;
            }
            if ((unint64_t)v124 >= v85)
            {
LABEL_147:
              if ((unint64_t)v124 < v461 && *(_DWORD *)v116 == *v124)
              {
                ++v124;
                unint64_t v116 = (void *)((char *)v116 + 4);
              }
              if ((unint64_t)v124 < v459 && *(unsigned __int16 *)v116 == *(unsigned __int16 *)v124)
              {
                int v124 = (_DWORD *)((char *)v124 + 2);
                unint64_t v116 = (void *)((char *)v116 + 2);
              }
              if (v124 < (_DWORD *)v519 && *(unsigned __int8 *)v116 == *(unsigned __int8 *)v124) {
                LODWORD(v124) = v124 + 1;
              }
              unsigned int v118 = v124 - v115;
            }
            else
            {
              int v125 = v124 - v77 - 4;
              while (1)
              {
                unint64_t v126 = *(void *)v124 ^ *v116;
                if (v126) {
                  break;
                }
                v124 += 2;
                ++v116;
                v125 += 8;
                if ((unint64_t)v124 >= v85) {
                  goto LABEL_147;
                }
              }
              unsigned int v118 = (__clz(__rbit64(v126)) >> 3) + v125;
            }
            goto LABEL_158;
          }
          unint64_t v119 = (char *)v77 + v514 - v103;
          if (v119 > v519) {
            unint64_t v119 = v519;
          }
          char v120 = (uint64_t *)((char *)v77 + 4);
          int v121 = v103 + 4;
          int v122 = v119 - 7;
          if (v119 - 7 <= (char *)v77 + 4)
          {
            int v127 = (char *)v77 + 4;
          }
          else
          {
            unint64_t v123 = *v120 ^ *v121;
            if (v123)
            {
              unsigned int v118 = __clz(__rbit64(v123)) >> 3;
              goto LABEL_175;
            }
            int v127 = (char *)v77 + 12;
            int v121 = v103 + 12;
          }
          if (v127 >= v122)
          {
LABEL_164:
            if (v127 < v119 - 3 && *(_DWORD *)v121 == *(_DWORD *)v127)
            {
              v127 += 4;
              int v121 = (void *)((char *)v121 + 4);
            }
            if (v127 < v119 - 1 && *(unsigned __int16 *)v121 == *(unsigned __int16 *)v127)
            {
              v127 += 2;
              int v121 = (void *)((char *)v121 + 2);
            }
            if (v127 < v119 && *(unsigned __int8 *)v121 == *v127) {
              LODWORD(v127) = v127 + 1;
            }
            unsigned int v118 = v127 - v120;
          }
          else
          {
            int v128 = v127 - v77 - 4;
            while (1)
            {
              unint64_t v129 = *(void *)v127 ^ *v121;
              if (v129) {
                break;
              }
              v127 += 8;
              ++v121;
              v128 += 8;
              if (v127 >= v122) {
                goto LABEL_164;
              }
            }
            unsigned int v118 = (__clz(__rbit64(v129)) >> 3) + v128;
          }
LABEL_175:
          if ((char *)v77 + v118 + 4 != v119)
          {
            unint64_t v77 = (uint64_t *)((char *)v77 + v118 + 4);
            goto LABEL_199;
          }
          unint64_t v130 = v119;
          int v131 = v12;
          if (v85 <= (unint64_t)v119) {
            goto LABEL_181;
          }
          unint64_t v132 = *(void *)v119 ^ *(void *)v12;
          if (!v132)
          {
            unint64_t v130 = v119 + 8;
            int v131 = a2 + 8;
LABEL_181:
            if ((unint64_t)v130 >= v85)
            {
LABEL_187:
              if ((unint64_t)v130 < v461 && *v131 == *v130)
              {
                ++v130;
                ++v131;
              }
              if ((unint64_t)v130 < v459 && *(unsigned __int16 *)v131 == *(unsigned __int16 *)v130)
              {
                unint64_t v130 = (_DWORD *)((char *)v130 + 2);
                int v131 = (_DWORD *)((char *)v131 + 2);
              }
              if (v130 < (_DWORD *)v519 && *(unsigned __int8 *)v131 == *(unsigned __int8 *)v130) {
                LODWORD(v130) = v130 + 1;
              }
              unsigned int v133 = v130 - v119;
            }
            else
            {
              unint64_t v134 = (char *)v77 + (void)v480 - v103;
              if (v134 >= (unint64_t)&a2[v524 - 5]) {
                LODWORD(v134) = a2 + v524 - 5;
              }
              int v135 = v130 - v134;
              while (1)
              {
                unint64_t v136 = *(void *)v130 ^ *(void *)v131;
                if (v136) {
                  break;
                }
                v130 += 2;
                v131 += 2;
                v135 += 8;
                if ((unint64_t)v130 >= v85) {
                  goto LABEL_187;
                }
              }
              unsigned int v133 = (__clz(__rbit64(v136)) >> 3) + v135;
            }
            goto LABEL_198;
          }
          unsigned int v133 = __clz(__rbit64(v132)) >> 3;
LABEL_198:
          v118 += v133;
          unint64_t v77 = (uint64_t *)&v119[v133];
LABEL_199:
          if ((unint64_t)v112 + (v118 + 240) / 0xFFuLL + 8 > v75) {
            goto LABEL_657;
          }
          char v137 = *v114;
          unsigned int v138 = v118 - 15;
          if (v118 < 0xF)
          {
            *unint64_t v114 = v137 + v118;
          }
          else
          {
            *unint64_t v114 = v137 + 15;
            *(_DWORD *)a3 = -1;
            if (v138 >= 0x3FC)
            {
              int v139 = v112 + 3;
              __int16 v140 = v118 - 1035;
              unsigned int v141 = (v118 - 1035) / 0x3FC;
              uint64_t v142 = 2 * v141;
              uint64_t v143 = v74;
              unint64_t v144 = v79;
              int v145 = v17;
              char v146 = v80;
              memset(v112 + 3, 255, v142 * 2 + 4);
              unint64_t v85 = v493;
              uint64_t v80 = v146;
              size_t v17 = v145;
              unint64_t v79 = v144;
              uint64_t v74 = v143;
              unint64_t v75 = (unint64_t)v499;
              LODWORD(v72) = v527;
              unsigned int v12 = a2;
              LOWORD(v138) = v140 - 1020 * v141;
              a3 = &v139[v142];
            }
            char v147 = &a3[(unsigned __int16)v138 / 0xFFu];
            *char v147 = v138 + (unsigned __int16)v138 / 0xFFu;
            a3 = v147 + 1;
          }
          if ((unint64_t)v77 >= v79)
          {
            unint64_t v18 = v508;
            goto LABEL_650;
          }
          *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v77 - 2)) >> 50) & 0x3FFC)) = v77 - 2 - v73;
          unsigned int v148 = v77 - v73;
          unint64_t v149 = ((0xCF1BBCDCBB000000 * *v77) >> 50) & 0x3FFC;
          uint64_t v150 = *(unsigned int *)(a1 + v149);
          if (v150 >= v72) {
            uint64_t v95 = v12;
          }
          else {
            uint64_t v95 = v17;
          }
          if (v150 >= v72) {
            uint64_t v151 = v73;
          }
          else {
            uint64_t v151 = v80;
          }
          *(_DWORD *)(a1 + v149) = v148;
          BOOL v152 = v150 >= v74 && (int)v150 + 0xFFFF >= v148;
          if (!v152 || (unint64_t v103 = &v151[v150], *(_DWORD *)&v151[v150] != *(_DWORD *)v77))
          {
            int v83 = (_DWORD *)((char *)v77 + 1);
            unsigned int v84 = v77 + 1 - v73;
            int v82 = (char *)v77 + 2;
            unint64_t v18 = v508;
            int v81 = v484;
            if ((unint64_t)v77 + 2 > v79)
            {
LABEL_650:
              size_t v445 = v18 - (char *)v77;
              if ((unint64_t)&a3[v18 - (char *)v77 + 1 + (v18 - (char *)v77 + 240) / 0xFFuLL] <= v75)
              {
                unint64_t v446 = v445 - 15;
                if (v445 < 0xF)
                {
                  *a3 = 16 * v445;
                }
                else
                {
                  *a3 = -16;
                  v447 = a3 + 1;
                  if (v446 >= 0xFF)
                  {
                    unint64_t v448 = &v12[v524] - (char *)v77 - 270;
                    memset(v447, 255, v448 / 0xFF + 1);
                    unint64_t v446 = v448 % 0xFF;
                    v447 = &a3[v448 / 0xFF + 2];
                  }
                  unsigned char *v447 = v446;
                  a3 = v447;
                }
                int v455 = a3 + 1;
                v456 = a3 + 1;
                v457 = v77;
                goto LABEL_672;
              }
LABEL_657:
              uint64_t result = 0;
LABEL_673:
              int v9 = v497;
              goto LABEL_674;
            }
            goto LABEL_99;
          }
          *a3 = 0;
          __int16 v112 = a3 + 1;
          __int16 v96 = v148 - v150;
          unint64_t v114 = a3;
        }
      }
    }
    if (v9 > 0x7E000000) {
      goto LABEL_642;
    }
    unint64_t v202 = (unint64_t)&a3[a5];
    v528[6] = v15 + v9;
    unsigned int *v528 = v72 + v9;
    *((_WORD *)v528 + 3) = 2;
    unsigned int v203 = v9;
    unint64_t v204 = a3;
    unsigned int v205 = (uint64_t *)a2;
    int v504 = (int)v204;
    int v497 = v203;
    if (v203 < 0xD)
    {
LABEL_656:
      size_t v445 = v18 - (char *)v205;
      if ((unint64_t)&v204[v18 - (char *)v205 + 1 + (v18 - (char *)v205 + 240) / 0xFFuLL] > v202) {
        goto LABEL_657;
      }
      unint64_t v449 = v445 - 15;
      if (v445 < 0xF)
      {
        *unint64_t v204 = 16 * v445;
      }
      else
      {
        *unint64_t v204 = -16;
        v450 = v204 + 1;
        if (v449 >= 0xFF)
        {
          unint64_t v451 = &v12[v524] - (char *)v205 - 270;
          memset(v450, 255, v451 / 0xFF + 1);
          unint64_t v449 = v451 % 0xFF;
          v450 = &v204[v451 / 0xFF + 2];
        }
        char *v450 = v449;
        unint64_t v204 = v450;
      }
      int v455 = v204 + 1;
      v456 = v204 + 1;
      v457 = v205;
LABEL_672:
      memcpy(v456, v457, v445);
      uint64_t result = (v455 + v445 - v504);
      unsigned int v12 = a2;
      goto LABEL_673;
    }
    uint64_t v206 = v15;
    unint64_t v207 = (unint64_t)&a2[v524 - 11];
    v515 = &v17[v15];
    v520 = v18 - 5;
    char v208 = &v515[-v72];
    *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(void *)a2) >> 50) & 0x3FFC)) = v72;
    int v209 = v14 << 6;
    v210 = a2 + 2;
    uint64_t v211 = a2 + 1;
    unsigned int v212 = v72 + 1;
    unint64_t v213 = (unint64_t)(v18 - 12);
    unint64_t v464 = (unint64_t)(v18 - 6);
    unint64_t v466 = (unint64_t)(v18 - 8);
    v486 = &v17[v206];
    v491 = v17;
    unsigned int v205 = (uint64_t *)a2;
    unint64_t v500 = v202;
    v510 = v18;
    int v495 = v14 << 6;
LABEL_292:
    uint64_t v214 = *(uint64_t *)((char *)v205 + 1);
    int v215 = v209;
    while (1)
    {
      unint64_t v216 = ((0xCF1BBCDCBB000000 * v214) >> 50) & 0x3FFC;
      uint64_t v217 = *(unsigned int *)(a1 + v216);
      v218 = v210;
      uint64_t v214 = *v210;
      *(_DWORD *)(a1 + v216) = v212;
      if ((int)v217 + 0xFFFF >= v212)
      {
        int v219 = v217 >= v72 ? v73 : v208;
        if (*(_DWORD *)&v219[v217] == *v211) {
          break;
        }
      }
      unsigned int v212 = v218 - v73;
      v210 = (void *)((char *)v218 + (v215++ >> 6));
      uint64_t v211 = v218;
      if ((unint64_t)v210 > v207) {
        goto LABEL_656;
      }
    }
    uint64_t v220 = 0;
    v221 = &v219[v217];
    if (v217 >= v72) {
      int v222 = v12;
    }
    else {
      int v222 = v17;
    }
    __int16 v223 = v212 - v217;
    int v224 = v211 - v205;
    int v225 = v211 - v205 - 15;
    char v226 = (_BYTE)v211 - (_BYTE)v205 - 14;
    int v227 = v225;
    do
    {
      int v228 = v227;
      int v229 = v220;
      int v230 = &v221[v220];
      char v231 = (uint64_t *)((char *)v211 + v220);
      if (&v221[v220] <= v222 || v231 <= v205) {
        break;
      }
      --v227;
      --v220;
    }
    while (*((unsigned __int8 *)v231 - 1) == *(v230 - 1));
    unsigned int v233 = v231 - v205;
    int v234 = v204 + 1;
    if ((unint64_t)&v204[(v231 - v205) + 9 + (v224 + v229) / 0xFFuLL] > v202) {
      goto LABEL_657;
    }
    if ((v224 + v229) < 0xF)
    {
      *unint64_t v204 = 16 * v233;
      size_t v17 = v491;
    }
    else
    {
      char v235 = v229 + v225;
      *unint64_t v204 = -16;
      if (v229 + v225 > 254)
      {
        if (v228 >= 509) {
          int v236 = 509;
        }
        else {
          int v236 = v228;
        }
        unsigned int v237 = v224 - v236 + v229 + 239;
        unint64_t v238 = v207;
        v475 = v208;
        char v468 = v226;
        memset(v234, 255, v237 / 0xFF + 1);
        unsigned int v233 = v231 - v205;
        char v208 = v475;
        unint64_t v207 = v238;
        unint64_t v202 = v500;
        LODWORD(v72) = v527;
        unsigned int v12 = a2;
        int v234 = &v204[v237 / 0xFFuLL + 2];
        char v235 = v237 / 0xFF + v468 + v229;
      }
      size_t v17 = v491;
      *v234++ = v235;
    }
    int v239 = &v234[v233];
    do
    {
      uint64_t v240 = *v205++;
      *(void *)int v234 = v240;
      v234 += 8;
    }
    while (v234 < v239);
    int v241 = v204;
    unsigned int v205 = v231;
    while (1)
    {
      *(_WORD *)int v239 = v223;
      unint64_t v204 = v239 + 2;
      if (v222 != v17)
      {
        unsigned int v242 = (uint64_t *)((char *)v205 + 4);
        int v243 = v230 + 4;
        if (v213 <= (unint64_t)v205 + 4)
        {
          unint64_t v251 = (_DWORD *)v205 + 1;
        }
        else
        {
          unint64_t v244 = *v242 ^ *v243;
          if (v244)
          {
            unsigned int v245 = __clz(__rbit64(v244)) >> 3;
LABEL_347:
            unsigned int v205 = (uint64_t *)((char *)v205 + v245 + 4);
            goto LABEL_388;
          }
          unint64_t v251 = (_DWORD *)v205 + 3;
          int v243 = v230 + 12;
        }
        if ((unint64_t)v251 >= v213)
        {
LABEL_336:
          if ((unint64_t)v251 < v466 && *(_DWORD *)v243 == *v251)
          {
            ++v251;
            int v243 = (void *)((char *)v243 + 4);
          }
          if ((unint64_t)v251 < v464 && *(unsigned __int16 *)v243 == *(unsigned __int16 *)v251)
          {
            unint64_t v251 = (_DWORD *)((char *)v251 + 2);
            int v243 = (void *)((char *)v243 + 2);
          }
          if (v251 < (_DWORD *)v520 && *(unsigned __int8 *)v243 == *(unsigned __int8 *)v251) {
            LODWORD(v251) = v251 + 1;
          }
          unsigned int v245 = v251 - v242;
        }
        else
        {
          int v252 = v251 - v205 - 4;
          while (1)
          {
            unint64_t v253 = *(void *)v251 ^ *v243;
            if (v253) {
              break;
            }
            v251 += 2;
            ++v243;
            v252 += 8;
            if ((unint64_t)v251 >= v213) {
              goto LABEL_336;
            }
          }
          unsigned int v245 = (__clz(__rbit64(v253)) >> 3) + v252;
        }
        goto LABEL_347;
      }
      v246 = (char *)v205 + v515 - v230;
      if (v246 > v520) {
        v246 = v520;
      }
      int v247 = (uint64_t *)((char *)v205 + 4);
      unint64_t v248 = v230 + 4;
      unsigned int v249 = v246 - 7;
      if (v246 - 7 <= (char *)v205 + 4)
      {
        __int16 v254 = (char *)v205 + 4;
      }
      else
      {
        unint64_t v250 = *v247 ^ *v248;
        if (v250)
        {
          unsigned int v245 = __clz(__rbit64(v250)) >> 3;
          goto LABEL_364;
        }
        __int16 v254 = (char *)v205 + 12;
        unint64_t v248 = v230 + 12;
      }
      if (v254 >= v249)
      {
LABEL_353:
        if (v254 < v246 - 3 && *(_DWORD *)v248 == *(_DWORD *)v254)
        {
          v254 += 4;
          unint64_t v248 = (void *)((char *)v248 + 4);
        }
        if (v254 < v246 - 1 && *(unsigned __int16 *)v248 == *(unsigned __int16 *)v254)
        {
          v254 += 2;
          unint64_t v248 = (void *)((char *)v248 + 2);
        }
        if (v254 < v246 && *(unsigned __int8 *)v248 == *v254) {
          LODWORD(v254) = v254 + 1;
        }
        unsigned int v245 = v254 - v247;
      }
      else
      {
        int v255 = v254 - v205 - 4;
        while (1)
        {
          unint64_t v256 = *(void *)v254 ^ *v248;
          if (v256) {
            break;
          }
          v254 += 8;
          ++v248;
          v255 += 8;
          if (v254 >= v249) {
            goto LABEL_353;
          }
        }
        unsigned int v245 = (__clz(__rbit64(v256)) >> 3) + v255;
      }
LABEL_364:
      if ((char *)v205 + v245 + 4 != v246)
      {
        unsigned int v205 = (uint64_t *)((char *)v205 + v245 + 4);
        goto LABEL_388;
      }
      v257 = v246;
      unsigned int v258 = v12;
      if (v213 <= (unint64_t)v246) {
        goto LABEL_370;
      }
      unint64_t v259 = *(void *)v246 ^ *(void *)v12;
      if (!v259)
      {
        v257 = v246 + 8;
        unsigned int v258 = a2 + 8;
LABEL_370:
        if ((unint64_t)v257 >= v213)
        {
LABEL_376:
          if ((unint64_t)v257 < v466 && *v258 == *v257)
          {
            ++v257;
            ++v258;
          }
          if ((unint64_t)v257 < v464 && *(unsigned __int16 *)v258 == *(unsigned __int16 *)v257)
          {
            v257 = (_DWORD *)((char *)v257 + 2);
            unsigned int v258 = (_DWORD *)((char *)v258 + 2);
          }
          if (v257 < (_DWORD *)v520 && *(unsigned __int8 *)v258 == *(unsigned __int8 *)v257) {
            LODWORD(v257) = v257 + 1;
          }
          unsigned int v260 = v257 - v246;
        }
        else
        {
          unint64_t v261 = (char *)v205 + (void)v486 - v230;
          if (v261 >= (unint64_t)&a2[v524 - 5]) {
            LODWORD(v261) = a2 + v524 - 5;
          }
          int v262 = v257 - v261;
          while (1)
          {
            unint64_t v263 = *(void *)v257 ^ *(void *)v258;
            if (v263) {
              break;
            }
            v257 += 2;
            v258 += 2;
            v262 += 8;
            if ((unint64_t)v257 >= v213) {
              goto LABEL_376;
            }
          }
          unsigned int v260 = (__clz(__rbit64(v263)) >> 3) + v262;
        }
        goto LABEL_387;
      }
      unsigned int v260 = __clz(__rbit64(v259)) >> 3;
LABEL_387:
      v245 += v260;
      unsigned int v205 = (uint64_t *)&v246[v260];
LABEL_388:
      if ((unint64_t)&v239[(v245 + 240) / 0xFFuLL + 8] > v202) {
        goto LABEL_657;
      }
      char v264 = *v241;
      unsigned int v265 = v245 - 15;
      if (v245 < 0xF)
      {
        *int v241 = v264 + v245;
      }
      else
      {
        *int v241 = v264 + 15;
        *(_DWORD *)unint64_t v204 = -1;
        if (v265 >= 0x3FC)
        {
          unint64_t v266 = v239 + 6;
          __int16 v267 = v245 - 1035;
          unsigned int v268 = (v245 - 1035) / 0x3FC;
          uint64_t v269 = 2 * v268;
          unint64_t v270 = v207;
          v271 = v208;
          memset(v239 + 6, 255, v269 * 2 + 4);
          char v208 = v271;
          unint64_t v207 = v270;
          unint64_t v202 = v500;
          LODWORD(v72) = v527;
          unsigned int v12 = a2;
          LOWORD(v265) = v267 - 1020 * v268;
          unint64_t v204 = (char *)&v266[v269];
        }
        unsigned int v272 = &v204[(unsigned __int16)v265 / 0xFFu];
        *unsigned int v272 = v265 + (unsigned __int16)v265 / 0xFFu;
        unint64_t v204 = v272 + 1;
      }
      if ((unint64_t)v205 >= v207)
      {
        unint64_t v18 = v510;
        goto LABEL_656;
      }
      *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v205 - 2)) >> 50) & 0x3FFC)) = v205 - 2 - v73;
      unsigned int v273 = v205 - v73;
      unint64_t v274 = ((0xCF1BBCDCBB000000 * *v205) >> 50) & 0x3FFC;
      uint64_t v275 = *(unsigned int *)(a1 + v274);
      if (v275 >= v72) {
        int v222 = v12;
      }
      else {
        int v222 = v17;
      }
      if (v275 >= v72) {
        int v276 = v73;
      }
      else {
        int v276 = v208;
      }
      *(_DWORD *)(a1 + v274) = v273;
      if ((int)v275 + 0xFFFF < v273 || (int v230 = &v276[v275], *(_DWORD *)&v276[v275] != *(_DWORD *)v205))
      {
        uint64_t v211 = (_DWORD *)((char *)v205 + 1);
        unsigned int v212 = v205 + 1 - v73;
        v210 = (uint64_t *)((char *)v205 + 2);
        unint64_t v18 = v510;
        int v209 = v495;
        if ((unint64_t)v205 + 2 > v207) {
          goto LABEL_656;
        }
        goto LABEL_292;
      }
      *unint64_t v204 = 0;
      int v239 = v204 + 1;
      __int16 v223 = v273 - v275;
      int v241 = v204;
    }
  }
  unint64_t v20 = (unint64_t)&a3[a5];
  unint64_t v525 = v20;
  if (v9 <= 4096)
  {
    if (v9 > 0x7E000000)
    {
      uint64_t result = 0;
      goto LABEL_675;
    }
    int v363 = v14;
    v512 = &a2[v9];
    uint64_t v364 = *v528;
    v365 = *(char **)(v19 + 16392);
    uint64_t v366 = *(unsigned int *)(v19 + 16408);
    uint64_t v367 = *(unsigned int *)(v19 + 0x4000);
    *(void *)(a1 + 16400) = 0;
    v528[6] = v9;
    unsigned int *v528 = v364 + v9;
    *((_WORD *)v528 + 3) = 2;
    v368 = a2;
    v369 = a3;
    if (v9 >= 0xD)
    {
      int v497 = v9;
      v369 = a3;
      v370 = &a2[-v364];
      uint64_t v371 = (v364 - v367);
      unint64_t v372 = (unint64_t)&a2[v524 - 11];
      unint64_t v517 = (unint64_t)(v512 - 5);
      v502 = &v365[v366];
      v373 = &v365[v366 - v367];
      *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(void *)a2) >> 50) & 0x3FFC)) = v364;
      int v374 = v363 << 6;
      v375 = a2 + 2;
      v376 = a2 + 1;
      unsigned int v377 = v364 + 1;
      unint64_t v458 = (unint64_t)(v512 - 6);
      unint64_t v460 = (unint64_t)(v512 - 8);
      v482 = &v365[v366];
      int v506 = (int)v369;
      v368 = a2;
      v492 = &a2[-v364];
      int v487 = v363 << 6;
LABEL_531:
      uint64_t v378 = *(void *)(v368 + 1);
      int v379 = v374;
      while (1)
      {
        v380 = v375;
        unint64_t v381 = (0xCF1BBCDCBB000000 * v378) >> 52;
        uint64_t v382 = *(unsigned int *)(a1 + 4 * v381);
        if (v382 >= v364)
        {
          v384 = &v370[v382];
          v385 = v12;
        }
        else
        {
          uint64_t v383 = *(unsigned int *)(v19 + 4 * v381);
          v384 = &v373[v383];
          LODWORD(v382) = v383 + v371;
          v385 = v365;
        }
        uint64_t v378 = *v380;
        *(_DWORD *)(a1 + 4 * v381) = v377;
        if ((int)v382 + 0xFFFF >= v377 && *(_DWORD *)v384 == *v376) {
          break;
        }
        unsigned int v377 = v380 - v370;
        v375 = (char *)v380 + (v379++ >> 6);
        v376 = v380;
        if ((unint64_t)v375 > v372)
        {
LABEL_640:
          LODWORD(a3) = v506;
          int v9 = v497;
          goto LABEL_641;
        }
      }
      uint64_t v386 = 0;
      __int16 v387 = v377 - v382;
      int v388 = v376 - v368;
      int v389 = v376 - v368 - 15;
      char v390 = (_BYTE)v376 - (_BYTE)v368 - 14;
      int v391 = v389;
      do
      {
        int v392 = v391;
        int v393 = v386;
        v394 = &v384[v386];
        v395 = (char *)v376 + v386;
        if (&v384[v386] <= v385 || v395 <= v368) {
          break;
        }
        --v391;
        --v386;
      }
      while (*(v395 - 1) == *(v394 - 1));
      unsigned int v397 = v395 - v368;
      v398 = v369 + 1;
      if ((unint64_t)&v369[(v395 - v368)
                                 + 9
                                 + (v388 + v393) / 0xFFuLL] > v20)
        goto LABEL_657;
      if ((v388 + v393) < 0xF)
      {
        unsigned char *v369 = 16 * v397;
        unint64_t v402 = (unint64_t)(v512 - 12);
      }
      else
      {
        char v399 = v393 + v389;
        unsigned char *v369 = -16;
        if (v393 + v389 > 254)
        {
          if (v392 >= 509) {
            int v400 = 509;
          }
          else {
            int v400 = v392;
          }
          unsigned int v401 = v388 - v400 + v393 + 239;
          uint64_t v522 = v19;
          v472 = v365;
          uint64_t v474 = v364;
          unint64_t v470 = v372;
          char v462 = v390;
          memset(v398, 255, v401 / 0xFF + 1);
          unsigned int v397 = v395 - v368;
          unint64_t v372 = v470;
          v365 = v472;
          uint64_t v364 = v474;
          uint64_t v19 = v522;
          unint64_t v20 = v525;
          unsigned int v12 = a2;
          v398 = &v369[v401 / 0xFFuLL + 2];
          char v399 = v401 / 0xFF + v462 + v393;
        }
        unint64_t v402 = (unint64_t)(v512 - 12);
        *(unsigned char *)v398 = v399;
        v398 = (void *)((char *)v398 + 1);
      }
      v403 = (_WORD *)((char *)v398 + v397);
      do
      {
        uint64_t v404 = *(void *)v368;
        v368 += 8;
        *v398++ = v404;
      }
      while (v398 < (void *)v403);
      v405 = v369;
      v368 = v395;
      while (1)
      {
        _WORD *v403 = v387;
        v369 = v403 + 1;
        if (v385 != v365)
        {
          v406 = v368 + 4;
          v407 = v394 + 4;
          if (v402 <= (unint64_t)(v368 + 4))
          {
            v415 = v368 + 4;
          }
          else
          {
            unint64_t v408 = *v406 ^ *v407;
            if (v408)
            {
              unsigned int v409 = __clz(__rbit64(v408)) >> 3;
LABEL_583:
              v368 += v409 + 4;
              goto LABEL_624;
            }
            v415 = v368 + 12;
            v407 = v394 + 12;
          }
          if ((unint64_t)v415 >= v402)
          {
LABEL_572:
            if ((unint64_t)v415 < v460 && *(_DWORD *)v407 == *v415)
            {
              ++v415;
              v407 = (void *)((char *)v407 + 4);
            }
            if ((unint64_t)v415 < v458 && *(unsigned __int16 *)v407 == *(unsigned __int16 *)v415)
            {
              v415 = (_DWORD *)((char *)v415 + 2);
              v407 = (void *)((char *)v407 + 2);
            }
            if ((unint64_t)v415 < v517 && *(unsigned __int8 *)v407 == *(unsigned __int8 *)v415) {
              LODWORD(v415) = v415 + 1;
            }
            unsigned int v409 = v415 - v406;
          }
          else
          {
            int v416 = v415 - v368 - 4;
            while (1)
            {
              unint64_t v417 = *(void *)v415 ^ *v407;
              if (v417) {
                break;
              }
              v415 += 2;
              ++v407;
              v416 += 8;
              if ((unint64_t)v415 >= v402) {
                goto LABEL_572;
              }
            }
            unsigned int v409 = (__clz(__rbit64(v417)) >> 3) + v416;
          }
          goto LABEL_583;
        }
        v410 = &v368[v502 - v394];
        if ((unint64_t)v410 > v517) {
          v410 = v512 - 5;
        }
        v411 = v368 + 4;
        v412 = v394 + 4;
        v413 = v410 - 7;
        if (v410 - 7 <= v368 + 4)
        {
          v418 = v368 + 4;
        }
        else
        {
          unint64_t v414 = *v411 ^ *v412;
          if (v414)
          {
            unsigned int v409 = __clz(__rbit64(v414)) >> 3;
            goto LABEL_600;
          }
          v418 = v368 + 12;
          v412 = v394 + 12;
        }
        if (v418 >= v413)
        {
LABEL_589:
          if (v418 < v410 - 3 && *(_DWORD *)v412 == *(_DWORD *)v418)
          {
            v418 += 4;
            v412 = (void *)((char *)v412 + 4);
          }
          if (v418 < v410 - 1 && *(unsigned __int16 *)v412 == *(unsigned __int16 *)v418)
          {
            v418 += 2;
            v412 = (void *)((char *)v412 + 2);
          }
          if (v418 < v410 && *(unsigned __int8 *)v412 == *v418) {
            LODWORD(v418) = v418 + 1;
          }
          unsigned int v409 = v418 - v411;
        }
        else
        {
          int v419 = v418 - v368 - 4;
          while (1)
          {
            unint64_t v420 = *(void *)v418 ^ *v412;
            if (v420) {
              break;
            }
            v418 += 8;
            ++v412;
            v419 += 8;
            if (v418 >= v413) {
              goto LABEL_589;
            }
          }
          unsigned int v409 = (__clz(__rbit64(v420)) >> 3) + v419;
        }
LABEL_600:
        if (&v368[v409 + 4] != v410)
        {
          v368 += v409 + 4;
          goto LABEL_624;
        }
        v421 = v410;
        v422 = v12;
        if (v402 <= (unint64_t)v410) {
          goto LABEL_606;
        }
        unint64_t v423 = *(void *)v410 ^ *(void *)v12;
        if (!v423)
        {
          v421 = v410 + 8;
          v422 = a2 + 8;
LABEL_606:
          if ((unint64_t)v421 >= v402)
          {
LABEL_612:
            if ((unint64_t)v421 < v460 && *v422 == *v421)
            {
              ++v421;
              ++v422;
            }
            if ((unint64_t)v421 < v458 && *(unsigned __int16 *)v422 == *(unsigned __int16 *)v421)
            {
              v421 = (_DWORD *)((char *)v421 + 2);
              v422 = (_DWORD *)((char *)v422 + 2);
            }
            if ((unint64_t)v421 < v517 && *(unsigned __int8 *)v422 == *(unsigned __int8 *)v421) {
              LODWORD(v421) = v421 + 1;
            }
            unsigned int v424 = v421 - v410;
          }
          else
          {
            unint64_t v425 = &v368[(void)v482] - v394;
            if (v425 >= (unint64_t)&a2[v524 - 5]) {
              LODWORD(v425) = a2 + v524 - 5;
            }
            int v426 = v421 - v425;
            while (1)
            {
              unint64_t v427 = *(void *)v421 ^ *(void *)v422;
              if (v427) {
                break;
              }
              v421 += 2;
              v422 += 2;
              v426 += 8;
              if ((unint64_t)v421 >= v402) {
                goto LABEL_612;
              }
            }
            unsigned int v424 = (__clz(__rbit64(v427)) >> 3) + v426;
          }
          goto LABEL_623;
        }
        unsigned int v424 = __clz(__rbit64(v423)) >> 3;
LABEL_623:
        v409 += v424;
        v368 = &v410[v424];
LABEL_624:
        if ((unint64_t)v403 + (v409 + 240) / 0xFFuLL + 8 > v20) {
          goto LABEL_657;
        }
        char v428 = *v405;
        unsigned int v429 = v409 - 15;
        if (v409 < 0xF)
        {
          char *v405 = v428 + v409;
        }
        else
        {
          char *v405 = v428 + 15;
          *(_DWORD *)v369 = -1;
          if (v429 >= 0x3FC)
          {
            v523 = v403 + 3;
            __int16 v430 = v409 - 1035;
            unsigned int v431 = (v409 - 1035) / 0x3FC;
            uint64_t v432 = 2 * v431;
            uint64_t v433 = v19;
            uint64_t v434 = v364;
            uint64_t v435 = v371;
            v436 = v365;
            unint64_t v437 = v372;
            memset(v403 + 3, 255, v432 * 2 + 4);
            unint64_t v372 = v437;
            v365 = v436;
            uint64_t v371 = v435;
            uint64_t v364 = v434;
            uint64_t v19 = v433;
            unint64_t v20 = v525;
            unsigned int v12 = a2;
            LOWORD(v429) = v430 - 1020 * v431;
            v370 = v492;
            unint64_t v402 = (unint64_t)(v512 - 12);
            v369 = &v523[v432];
          }
          v438 = &v369[(unsigned __int16)v429 / 0xFFu];
          unsigned char *v438 = v429 + (unsigned __int16)v429 / 0xFFu;
          v369 = v438 + 1;
        }
        if ((unint64_t)v368 >= v372) {
          goto LABEL_640;
        }
        *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(void *)(v368 - 2)) >> 50) & 0x3FFC)) = v368
                                                                                            - 2
                                                                                            - v370;
        unint64_t v439 = (0xCF1BBCDCBB000000 * *(void *)v368) >> 52;
        uint64_t v440 = *(unsigned int *)(a1 + 4 * v439);
        if (v440 >= v364)
        {
          v394 = &v370[v440];
          v385 = v12;
        }
        else
        {
          uint64_t v440 = *(unsigned int *)(v19 + 4 * v439);
          v394 = &v373[v440];
          LODWORD(v440) = v440 + v371;
          v385 = v365;
        }
        *(_DWORD *)(a1 + 4 * v439) = v368 - v370;
        if ((int)v440 + 0xFFFF < (v368 - v370) || *(_DWORD *)v394 != *(_DWORD *)v368)
        {
          v376 = v368 + 1;
          unsigned int v377 = v368 + 1 - v370;
          v375 = v368 + 2;
          int v374 = v487;
          if ((unint64_t)(v368 + 2) > v372) {
            goto LABEL_640;
          }
          goto LABEL_531;
        }
        unsigned char *v369 = 0;
        v403 = v369 + 1;
        __int16 v387 = (_WORD)v368 - (_WORD)v370 - v440;
        v405 = v369;
      }
    }
LABEL_641:
    size_t v441 = v512 - v368;
    if ((unint64_t)&v369[v512 - v368 + 1 + (v512 - v368 + 240) / 0xFFuLL] <= v20)
    {
      unint64_t v442 = v441 - 15;
      if (v441 < 0xF)
      {
        unsigned char *v369 = 16 * v441;
      }
      else
      {
        unsigned char *v369 = -16;
        v443 = v369 + 1;
        if (v442 >= 0xFF)
        {
          unint64_t v444 = &v12[v524] - v368 - 270;
          memset(v443, 255, v444 / 0xFF + 1);
          unint64_t v442 = v444 % 0xFF;
          v443 = &v369[v444 / 0xFF + 2];
        }
        unsigned char *v443 = v442;
        v369 = v443;
      }
      v452 = v369 + 1;
      memcpy(v452, v368, v441);
      int v453 = v452 + v441;
      goto LABEL_666;
    }
LABEL_642:
    uint64_t result = 0;
    goto LABEL_674;
  }
  memcpy((void *)a1, (const void *)v19, 0x4020uLL);
  if (v9 > 0x7E000000)
  {
    uint64_t result = 0;
    goto LABEL_667;
  }
  unsigned int v12 = a2;
  uint64_t v277 = *v528;
  int v278 = v9;
  int v279 = &a2[-v277];
  int v280 = *(char **)(a1 + 16392);
  uint64_t v281 = v528[6];
  unint64_t v282 = (unint64_t)&a2[v524 - 11];
  v516 = v18 - 5;
  v521 = &v280[v281];
  v283 = &v280[v281 - v277];
  v528[6] = v281 + v278;
  int v497 = v278;
  unsigned int *v528 = v277 + v278;
  *((_WORD *)v528 + 3) = 2;
  *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(void *)a2) >> 50) & 0x3FFC)) = v277;
  int v284 = v14 << 6;
  unsigned int v285 = a2 + 2;
  v286 = a2 + 1;
  unsigned int v287 = v277 + 1;
  int v288 = v18;
  unsigned int v289 = a3;
  unint64_t v290 = (unint64_t)(v288 - 12);
  int v505 = (int)v289;
  v511 = v288;
  unint64_t v465 = (unint64_t)(v288 - 6);
  unint64_t v467 = (unint64_t)(v288 - 8);
  uint64_t v291 = (uint64_t *)a2;
  unint64_t v292 = v525;
  int v496 = v14 << 6;
  v501 = &a2[-v277];
LABEL_409:
  uint64_t v293 = *(uint64_t *)((char *)v291 + 1);
  int v294 = v284;
  do
  {
    unint64_t v295 = ((0xCF1BBCDCBB000000 * v293) >> 50) & 0x3FFC;
    uint64_t v296 = *(unsigned int *)(a1 + v295);
    unsigned int v297 = v285;
    uint64_t v293 = *v285;
    *(_DWORD *)(a1 + v295) = v287;
    if ((int)v296 + 0xFFFF >= v287)
    {
      unint64_t v298 = v296 >= v277 ? v279 : v283;
      if (*(_DWORD *)&v298[v296] == *v286)
      {
        uint64_t v299 = 0;
        v300 = &v298[v296];
        if (v296 >= v277) {
          __int16 v301 = v12;
        }
        else {
          __int16 v301 = v280;
        }
        __int16 v302 = v287 - v296;
        int v303 = v286 - v291;
        int v304 = v286 - v291 - 15;
        char v305 = (_BYTE)v286 - (_BYTE)v291 - 14;
        int v306 = v304;
        do
        {
          int v307 = v306;
          int v308 = v299;
          v309 = &v300[v299];
          v310 = (uint64_t *)((char *)v286 + v299);
          if (&v300[v299] <= v301 || v310 <= v291) {
            break;
          }
          --v306;
          --v299;
        }
        while (*((unsigned __int8 *)v310 - 1) == *(v309 - 1));
        unsigned int v312 = v310 - v291;
        v313 = v289 + 1;
        if ((unint64_t)&v289[(v310 - v291)
                                   + 9
                                   + (v303 + v308) / 0xFFuLL] > v292)
          goto LABEL_657;
        if ((v303 + v308) < 0xF)
        {
          *unsigned int v289 = 16 * v312;
        }
        else
        {
          char v314 = v308 + v304;
          *unsigned int v289 = -16;
          if (v308 + v304 > 254)
          {
            if (v307 >= 509) {
              int v315 = 509;
            }
            else {
              int v315 = v307;
            }
            unsigned int v316 = v303 - v315 + v308 + 239;
            v478 = v280;
            uint64_t v481 = v277;
            unint64_t v476 = v282;
            char v469 = v305;
            memset(v313, 255, v316 / 0xFF + 1);
            unsigned int v312 = v310 - v291;
            unint64_t v282 = v476;
            int v280 = v478;
            uint64_t v277 = v481;
            unint64_t v292 = v525;
            unsigned int v12 = a2;
            v313 = &v289[v316 / 0xFFuLL + 2];
            char v314 = v316 / 0xFF + v469 + v308;
          }
          *(unsigned char *)v313 = v314;
          v313 = (void *)((char *)v313 + 1);
        }
        v317 = (_WORD *)((char *)v313 + v312);
        do
        {
          uint64_t v318 = *v291++;
          *v313++ = v318;
        }
        while (v313 < (void *)v317);
        char v319 = v289;
        uint64_t v291 = v310;
        while (1)
        {
          _WORD *v317 = v302;
          unsigned int v289 = v317 + 1;
          if (v301 != v280)
          {
            v320 = (uint64_t *)((char *)v291 + 4);
            char v321 = v309 + 4;
            if (v290 <= (unint64_t)v291 + 4)
            {
              v329 = (_DWORD *)v291 + 1;
            }
            else
            {
              unint64_t v322 = *v320 ^ *v321;
              if (v322)
              {
                unsigned int v323 = __clz(__rbit64(v322)) >> 3;
LABEL_464:
                uint64_t v291 = (uint64_t *)((char *)v291 + v323 + 4);
                goto LABEL_505;
              }
              v329 = (_DWORD *)v291 + 3;
              char v321 = v309 + 12;
            }
            if ((unint64_t)v329 >= v290)
            {
LABEL_453:
              if ((unint64_t)v329 < v467 && *(_DWORD *)v321 == *v329)
              {
                ++v329;
                char v321 = (void *)((char *)v321 + 4);
              }
              if ((unint64_t)v329 < v465 && *(unsigned __int16 *)v321 == *(unsigned __int16 *)v329)
              {
                v329 = (_DWORD *)((char *)v329 + 2);
                char v321 = (void *)((char *)v321 + 2);
              }
              if (v329 < (_DWORD *)v516 && *(unsigned __int8 *)v321 == *(unsigned __int8 *)v329) {
                LODWORD(v329) = v329 + 1;
              }
              unsigned int v323 = v329 - v320;
            }
            else
            {
              int v330 = v329 - v291 - 4;
              while (1)
              {
                unint64_t v331 = *(void *)v329 ^ *v321;
                if (v331) {
                  break;
                }
                v329 += 2;
                ++v321;
                v330 += 8;
                if ((unint64_t)v329 >= v290) {
                  goto LABEL_453;
                }
              }
              unsigned int v323 = (__clz(__rbit64(v331)) >> 3) + v330;
            }
            goto LABEL_464;
          }
          v324 = (uint64_t *)((char *)v291 + v521 - v309);
          if (v324 > (void *)v516) {
            v324 = v516;
          }
          v325 = (uint64_t *)((char *)v291 + 4);
          uint64_t v326 = v309 + 4;
          v327 = (char *)v324 - 7;
          if ((char *)v324 - 7 <= (char *)v291 + 4)
          {
            v332 = (char *)v291 + 4;
          }
          else
          {
            unint64_t v328 = *v325 ^ *v326;
            if (v328)
            {
              unsigned int v323 = __clz(__rbit64(v328)) >> 3;
              goto LABEL_481;
            }
            v332 = (char *)v291 + 12;
            uint64_t v326 = v309 + 12;
          }
          if (v332 >= v327)
          {
LABEL_470:
            if (v332 < (char *)v324 - 3 && *(_DWORD *)v326 == *(_DWORD *)v332)
            {
              v332 += 4;
              uint64_t v326 = (void *)((char *)v326 + 4);
            }
            if (v332 < (char *)v324 - 1 && *(unsigned __int16 *)v326 == *(unsigned __int16 *)v332)
            {
              v332 += 2;
              uint64_t v326 = (void *)((char *)v326 + 2);
            }
            if (v332 < (char *)v324 && *(unsigned __int8 *)v326 == *v332) {
              LODWORD(v332) = v332 + 1;
            }
            unsigned int v323 = v332 - v325;
          }
          else
          {
            int v333 = v332 - v291 - 4;
            while (1)
            {
              unint64_t v334 = *(void *)v332 ^ *v326;
              if (v334) {
                break;
              }
              v332 += 8;
              ++v326;
              v333 += 8;
              if (v332 >= v327) {
                goto LABEL_470;
              }
            }
            unsigned int v323 = (__clz(__rbit64(v334)) >> 3) + v333;
          }
LABEL_481:
          if ((uint64_t *)((char *)v291 + v323 + 4) != v324)
          {
            uint64_t v291 = (uint64_t *)((char *)v291 + v323 + 4);
            goto LABEL_505;
          }
          char v335 = v324;
          int v336 = v12;
          if (v290 <= (unint64_t)v324) {
            goto LABEL_487;
          }
          unint64_t v337 = *v324 ^ *(void *)v12;
          if (!v337)
          {
            char v335 = v324 + 1;
            int v336 = a2 + 8;
LABEL_487:
            if ((unint64_t)v335 >= v290)
            {
LABEL_493:
              if ((unint64_t)v335 < v467 && *v336 == *v335)
              {
                ++v335;
                ++v336;
              }
              if ((unint64_t)v335 < v465 && *(unsigned __int16 *)v336 == *(unsigned __int16 *)v335)
              {
                char v335 = (_DWORD *)((char *)v335 + 2);
                int v336 = (_DWORD *)((char *)v336 + 2);
              }
              if (v335 < (_DWORD *)v516 && *(unsigned __int8 *)v336 == *(unsigned __int8 *)v335) {
                LODWORD(v335) = v335 + 1;
              }
              unsigned int v338 = v335 - v324;
            }
            else
            {
              unint64_t v339 = (char *)v291 + (void)v521 - v309;
              if (v339 >= (unint64_t)&a2[v524 - 5]) {
                LODWORD(v339) = a2 + v524 - 5;
              }
              int v340 = v335 - v339;
              while (1)
              {
                unint64_t v341 = *(void *)v335 ^ *(void *)v336;
                if (v341) {
                  break;
                }
                v335 += 2;
                v336 += 2;
                v340 += 8;
                if ((unint64_t)v335 >= v290) {
                  goto LABEL_493;
                }
              }
              unsigned int v338 = (__clz(__rbit64(v341)) >> 3) + v340;
            }
            goto LABEL_504;
          }
          unsigned int v338 = __clz(__rbit64(v337)) >> 3;
LABEL_504:
          v323 += v338;
          uint64_t v291 = (void *)((char *)v324 + v338);
LABEL_505:
          if ((unint64_t)v317 + (v323 + 240) / 0xFFuLL + 8 > v292) {
            goto LABEL_657;
          }
          char v342 = *v319;
          unsigned int v343 = v323 - 15;
          if (v323 < 0xF)
          {
            *char v319 = v342 + v323;
          }
          else
          {
            *char v319 = v342 + 15;
            *(_DWORD *)unsigned int v289 = -1;
            if (v343 >= 0x3FC)
            {
              v344 = v317 + 3;
              __int16 v345 = v323 - 1035;
              unsigned int v346 = (v323 - 1035) / 0x3FC;
              uint64_t v347 = 2 * v346;
              uint64_t v348 = v277;
              int v349 = v280;
              unint64_t v350 = v290;
              v351 = v283;
              unint64_t v352 = v282;
              memset(v317 + 3, 255, v347 * 2 + 4);
              unint64_t v282 = v352;
              v283 = v351;
              unint64_t v290 = v350;
              int v279 = v501;
              int v280 = v349;
              uint64_t v277 = v348;
              unint64_t v292 = v525;
              unsigned int v12 = a2;
              LOWORD(v343) = v345 - 1020 * v346;
              unsigned int v289 = &v344[v347];
            }
            int v353 = &v289[(unsigned __int16)v343 / 0xFFu];
            *int v353 = v343 + (unsigned __int16)v343 / 0xFFu;
            unsigned int v289 = v353 + 1;
          }
          if ((unint64_t)v291 >= v282) {
            goto LABEL_524;
          }
          *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v291 - 2)) >> 50) & 0x3FFC)) = v291 - 2 - v279;
          unsigned int v354 = v291 - v279;
          unint64_t v355 = ((0xCF1BBCDCBB000000 * *v291) >> 50) & 0x3FFC;
          uint64_t v356 = *(unsigned int *)(a1 + v355);
          if (v356 >= v277) {
            __int16 v301 = v12;
          }
          else {
            __int16 v301 = v280;
          }
          if (v356 >= v277) {
            int v357 = v279;
          }
          else {
            int v357 = v283;
          }
          *(_DWORD *)(a1 + v355) = v354;
          if ((int)v356 + 0xFFFF < v354 || (v309 = &v357[v356], *(_DWORD *)&v357[v356] != *(_DWORD *)v291))
          {
            v286 = (_DWORD *)((char *)v291 + 1);
            unsigned int v287 = v291 + 1 - v279;
            unsigned int v285 = (uint64_t *)((char *)v291 + 2);
            int v284 = v496;
            if ((unint64_t)v291 + 2 > v282) {
              goto LABEL_524;
            }
            goto LABEL_409;
          }
          *unsigned int v289 = 0;
          v317 = v289 + 1;
          __int16 v302 = v354 - v356;
          char v319 = v289;
        }
      }
    }
    unsigned int v287 = v297 - v279;
    unsigned int v285 = (void *)((char *)v297 + (v294++ >> 6));
    v286 = v297;
  }
  while ((unint64_t)v285 <= v282);
LABEL_524:
  LODWORD(a3) = v505;
  size_t v358 = v511 - (char *)v291;
  int v9 = v497;
  if ((unint64_t)&v289[v511 - (char *)v291 + 1 + (v511 - (char *)v291 + 240) / 0xFFuLL] > v292) {
    goto LABEL_642;
  }
  unint64_t v359 = v358 - 15;
  if (v358 < 0xF)
  {
    *unsigned int v289 = 16 * v358;
  }
  else
  {
    *unsigned int v289 = -16;
    v360 = v289 + 1;
    if (v359 >= 0xFF)
    {
      unint64_t v361 = &v12[v524] - (char *)v291 - 270;
      memset(v360, 255, v361 / 0xFF + 1);
      v362 = &v289[v361 / 0xFF];
      LODWORD(a3) = v505;
      unint64_t v359 = v361 % 0xFF;
      int v9 = v497;
      v360 = v362 + 2;
    }
    unsigned char *v360 = v359;
    unsigned int v289 = v360;
  }
  v454 = v289 + 1;
  memcpy(v454, v291, v358);
  int v453 = v454 + v358;
LABEL_666:
  uint64_t result = (v453 - a3);
LABEL_667:
  unsigned int v12 = a2;
LABEL_674:
  uint64_t v13 = v528;
LABEL_675:
  *(void *)(a1 + 16392) = v12;
  v13[6] = v9;
  return result;
}

uint64_t sub_21684A788(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 0x4000);
  if ((v2 + a2) >= 0x80000001)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(result + 16392);
    uint64_t v5 = *(unsigned int *)(result + 16408);
    uint32x4_t v6 = (uint32x4_t)vdupq_n_s32(v2 - 0x10000);
    do
    {
      *(uint32x4_t *)(result + v3) = vqsubq_u32(*(uint32x4_t *)(result + v3), v6);
      v3 += 16;
    }
    while (v3 != 0x4000);
    uint64_t v7 = v4 + v5;
    *(_DWORD *)(result + 0x4000) = 0x10000;
    unsigned int v8 = *(_DWORD *)(result + 16408);
    if (v8 > 0x10000)
    {
      *(_DWORD *)(result + 16408) = 0x10000;
      unsigned int v8 = 0x10000;
    }
    *(void *)(result + 16392) = v7 - v8;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_forceExtDict(uint64_t a1, void *a2, char *a3, int a4)
{
  signed int v4 = a4;
  uint64_t v6 = a1;
  uint64_t v7 = (unsigned int *)(a1 + 0x4000);
  sub_21684A788(a1, a4);
  uint64_t v8 = v7[6];
  uint64_t v9 = *v7;
  unint64_t v10 = (char *)a2 - v9;
  int v11 = *(char **)(v6 + 16392);
  if (WORD1(v8)) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = v9 > v8;
  }
  int v210 = *v7;
  uint64_t v211 = a2;
  int v209 = *(char **)(v6 + 16392);
  if (v12)
  {
    if (v4 > 0x7E000000) {
      goto LABEL_127;
    }
    uint64_t v198 = v4;
    int v91 = (char *)a2 + v4;
    v7[6] = v8 + v4;
    *uint64_t v7 = v9 + v4;
    *((_WORD *)v7 + 3) = 2;
    unsigned int v92 = a2;
    unsigned int v93 = v4;
    unsigned int v94 = a3;
    unsigned int v202 = v93;
    if (v93 < 0xD)
    {
LABEL_252:
      size_t v171 = v91 - (char *)v92;
      unint64_t v172 = v91 - (char *)v92 - 15;
      if ((unint64_t)(v91 - (char *)v92) < 0xF)
      {
        *unsigned int v94 = 16 * v171;
      }
      else
      {
        *unsigned int v94 = -16;
        unint64_t v173 = v94 + 1;
        if (v172 >= 0xFF)
        {
          int v174 = v7;
          unint64_t v175 = (char *)a2 + v198 - (char *)v92 - 270;
          memset(v173, 255, v175 / 0xFF + 1);
          int v176 = &v94[v175 / 0xFF];
          a2 = v211;
          unint64_t v172 = v175 % 0xFF;
          uint64_t v7 = v174;
          unint64_t v173 = v176 + 2;
        }
        *unint64_t v173 = v172;
        unsigned int v94 = v173;
      }
      memcpy(v94 + 1, v92, v171);
      uint64_t result = (v94 + 1 + v171 - a3);
      signed int v4 = v202;
      goto LABEL_260;
    }
    unint64_t v200 = v7;
    uint64_t v95 = (v9 - v8);
    unint64_t v96 = (unint64_t)(v91 - 11);
    unsigned int v205 = &v11[v8];
    unint64_t v207 = v91 - 5;
    int v97 = &v11[v8 - v9];
    v192 = a2 + 1;
    *(_DWORD *)(v6 + (((0xCF1BBCDCBB000000 * *a2) >> 50) & 0x3FFC)) = v9;
    int v98 = v91;
    char v99 = (char *)a2 + 2;
    int v100 = (_DWORD *)((char *)a2 + 1);
    unsigned int v101 = v9 + 1;
    unint64_t v102 = (unint64_t)(v98 - 12);
    char v190 = v98;
    unint64_t v177 = (unint64_t)(v98 - 6);
    unint64_t v178 = (unint64_t)(v98 - 8);
    unint64_t v196 = &v11[v8];
    unint64_t v194 = (unint64_t)a2 + v198 - 5;
    unsigned int v94 = a3;
    unsigned int v92 = a2;
    uint64_t v203 = v6;
LABEL_130:
    uint64_t v103 = *(uint64_t *)((char *)v92 + 1);
    uint64_t v104 = 1;
    unint64_t v105 = 65;
    while (1)
    {
      unsigned int v106 = v99;
      unint64_t v107 = ((0xCF1BBCDCBB000000 * v103) >> 50) & 0x3FFC;
      uint64_t v108 = *(unsigned int *)(v6 + v107);
      uint64_t v103 = *v106;
      *(_DWORD *)(v6 + v107) = v101;
      if (v108 >= v95 && (int)v108 + 0xFFFF >= v101)
      {
        unsigned int v110 = v108 >= v9 ? v10 : v97;
        if (*(_DWORD *)&v110[v108] == *v100) {
          break;
        }
      }
      unsigned int v101 = v106 - v10;
      char v99 = (char *)v106 + v104;
      uint64_t v104 = v105++ >> 6;
      int v100 = v106;
      if ((unint64_t)v99 > v96)
      {
LABEL_251:
        int v91 = v190;
        uint64_t v7 = v200;
        goto LABEL_252;
      }
    }
    uint64_t v111 = 0;
    __int16 v112 = &v110[v108];
    if (v108 >= v9) {
      uint64_t v113 = (char *)a2;
    }
    else {
      uint64_t v113 = v11;
    }
    __int16 v114 = v101 - v108;
    int v115 = v100 - v92;
    int v116 = v100 - v92 - 15;
    char v117 = (_BYTE)v100 - (_BYTE)v92 - 14;
    int v118 = v116;
    do
    {
      int v119 = v118;
      int v120 = v111;
      int v121 = &v112[v111];
      int v122 = (uint64_t *)((char *)v100 + v111);
      if (&v112[v111] <= v113 || v122 <= v92) {
        break;
      }
      --v118;
      --v111;
    }
    while (*((unsigned __int8 *)v122 - 1) == *(v121 - 1));
    unsigned int v124 = v122 - v92;
    int v125 = v94 + 1;
    if ((v115 + v120) < 0xF)
    {
      *unsigned int v94 = 16 * v124;
    }
    else
    {
      char v126 = v120 + v116;
      *unsigned int v94 = -16;
      if (v120 + v116 > 254)
      {
        if (v119 >= 509) {
          int v127 = 509;
        }
        else {
          int v127 = v119;
        }
        unsigned int v128 = v115 - v127 + v120 + 239;
        unsigned int v188 = v95;
        uint64_t v184 = v97;
        unint64_t v186 = v96;
        unint64_t v183 = v102;
        char v180 = v117;
        memset(v125, 255, v128 / 0xFF + 1);
        unsigned int v124 = v122 - v92;
        unint64_t v102 = v183;
        int v97 = v184;
        unint64_t v96 = v186;
        uint64_t v95 = v188;
        int v11 = v209;
        LODWORD(v9) = v210;
        int v125 = &v94[v128 / 0xFFuLL + 2];
        char v126 = v128 / 0xFF + v180 + v120;
      }
      *v125++ = v126;
    }
    unint64_t v129 = &v125[v124];
    do
    {
      uint64_t v130 = *v92++;
      *(void *)int v125 = v130;
      v125 += 8;
    }
    while (v125 < v129);
    int v131 = v94;
    unsigned int v92 = v122;
    a2 = v211;
    while (1)
    {
      *(_WORD *)unint64_t v129 = v114;
      unsigned int v94 = v129 + 2;
      if (v113 != v11)
      {
        unint64_t v132 = (uint64_t *)((char *)v92 + 4);
        unsigned int v133 = v121 + 4;
        if (v102 <= (unint64_t)v92 + 4)
        {
          unsigned int v141 = (_DWORD *)v92 + 1;
        }
        else
        {
          unint64_t v134 = *v132 ^ *v133;
          if (v134)
          {
            unsigned int v135 = __clz(__rbit64(v134)) >> 3;
LABEL_188:
            unsigned int v92 = (uint64_t *)((char *)v92 + v135 + 4);
            goto LABEL_229;
          }
          unsigned int v141 = (_DWORD *)v92 + 3;
          unsigned int v133 = v121 + 12;
        }
        if ((unint64_t)v141 >= v102)
        {
LABEL_177:
          if ((unint64_t)v141 < v178 && *(_DWORD *)v133 == *v141)
          {
            ++v141;
            unsigned int v133 = (void *)((char *)v133 + 4);
          }
          if ((unint64_t)v141 < v177 && *(unsigned __int16 *)v133 == *(unsigned __int16 *)v141)
          {
            unsigned int v141 = (_DWORD *)((char *)v141 + 2);
            unsigned int v133 = (void *)((char *)v133 + 2);
          }
          if (v141 < (_DWORD *)v207 && *(unsigned __int8 *)v133 == *(unsigned __int8 *)v141) {
            LODWORD(v141) = v141 + 1;
          }
          unsigned int v135 = v141 - v132;
        }
        else
        {
          int v142 = v141 - v92 - 4;
          while (1)
          {
            unint64_t v143 = *(void *)v141 ^ *v133;
            if (v143) {
              break;
            }
            v141 += 2;
            ++v133;
            v142 += 8;
            if ((unint64_t)v141 >= v102) {
              goto LABEL_177;
            }
          }
          unsigned int v135 = (__clz(__rbit64(v143)) >> 3) + v142;
        }
        goto LABEL_188;
      }
      unint64_t v136 = (uint64_t *)((char *)v92 + v205 - v121);
      if (v136 > (void *)v207) {
        unint64_t v136 = v207;
      }
      char v137 = (uint64_t *)((char *)v92 + 4);
      unsigned int v138 = v121 + 4;
      int v139 = (char *)v136 - 7;
      if ((char *)v136 - 7 <= (char *)v92 + 4)
      {
        unint64_t v144 = (char *)v92 + 4;
      }
      else
      {
        unint64_t v140 = *v137 ^ *v138;
        if (v140)
        {
          unsigned int v135 = __clz(__rbit64(v140)) >> 3;
          goto LABEL_205;
        }
        unint64_t v144 = (char *)v92 + 12;
        unsigned int v138 = v121 + 12;
      }
      if (v144 >= v139)
      {
LABEL_194:
        if (v144 < (char *)v136 - 3 && *(_DWORD *)v138 == *(_DWORD *)v144)
        {
          v144 += 4;
          unsigned int v138 = (void *)((char *)v138 + 4);
        }
        if (v144 < (char *)v136 - 1 && *(unsigned __int16 *)v138 == *(unsigned __int16 *)v144)
        {
          v144 += 2;
          unsigned int v138 = (void *)((char *)v138 + 2);
        }
        if (v144 < (char *)v136 && *(unsigned __int8 *)v138 == *v144) {
          LODWORD(v144) = v144 + 1;
        }
        unsigned int v135 = v144 - v137;
      }
      else
      {
        int v145 = v144 - v92 - 4;
        while (1)
        {
          unint64_t v146 = *(void *)v144 ^ *v138;
          if (v146) {
            break;
          }
          v144 += 8;
          ++v138;
          v145 += 8;
          if (v144 >= v139) {
            goto LABEL_194;
          }
        }
        unsigned int v135 = (__clz(__rbit64(v146)) >> 3) + v145;
      }
LABEL_205:
      if ((uint64_t *)((char *)v92 + v135 + 4) != v136)
      {
        unsigned int v92 = (uint64_t *)((char *)v92 + v135 + 4);
        goto LABEL_229;
      }
      char v147 = v136;
      unsigned int v148 = a2;
      if (v102 <= (unint64_t)v136) {
        goto LABEL_211;
      }
      unint64_t v149 = *v136 ^ *a2;
      if (!v149)
      {
        char v147 = v136 + 1;
        unsigned int v148 = v192;
LABEL_211:
        if ((unint64_t)v147 >= v102)
        {
LABEL_217:
          if ((unint64_t)v147 < v178 && *v148 == *v147)
          {
            ++v147;
            ++v148;
          }
          if ((unint64_t)v147 < v177 && *(unsigned __int16 *)v148 == *(unsigned __int16 *)v147)
          {
            char v147 = (_DWORD *)((char *)v147 + 2);
            unsigned int v148 = (_DWORD *)((char *)v148 + 2);
          }
          if (v147 < (_DWORD *)v207 && *(unsigned __int8 *)v148 == *(unsigned __int8 *)v147) {
            LODWORD(v147) = v147 + 1;
          }
          unsigned int v150 = v147 - v136;
        }
        else
        {
          uint64_t v151 = (char *)((char *)v92 + (void)v196 - v121);
          if ((unint64_t)v151 >= v194) {
            LODWORD(v151) = v194;
          }
          int v152 = v147 - v151;
          while (1)
          {
            unint64_t v153 = *(void *)v147 ^ *(void *)v148;
            if (v153) {
              break;
            }
            v147 += 2;
            v148 += 2;
            v152 += 8;
            if ((unint64_t)v147 >= v102) {
              goto LABEL_217;
            }
          }
          unsigned int v150 = (__clz(__rbit64(v153)) >> 3) + v152;
        }
        goto LABEL_228;
      }
      unsigned int v150 = __clz(__rbit64(v149)) >> 3;
LABEL_228:
      v135 += v150;
      unsigned int v92 = (void *)((char *)v136 + v150);
LABEL_229:
      char v154 = *v131;
      unsigned int v155 = v135 - 15;
      if (v135 < 0xF)
      {
        *int v131 = v154 + v135;
      }
      else
      {
        *int v131 = v154 + 15;
        *(_DWORD *)unsigned int v94 = -1;
        if (v155 >= 0x3FC)
        {
          int v156 = v129 + 6;
          __int16 v157 = v135 - 1035;
          unsigned int v158 = (v135 - 1035) / 0x3FC;
          uint64_t v159 = 2 * v158;
          uint64_t v160 = v95;
          unint64_t v161 = v96;
          uint64_t v162 = v97;
          unint64_t v163 = v10;
          unint64_t v164 = v102;
          memset(v129 + 6, 255, v159 * 2 + 4);
          unint64_t v102 = v164;
          unint64_t v10 = v163;
          uint64_t v6 = v203;
          int v97 = v162;
          unint64_t v96 = v161;
          uint64_t v95 = v160;
          int v11 = v209;
          LODWORD(v9) = v210;
          LOWORD(v155) = v157 - 1020 * v158;
          a2 = v211;
          unsigned int v94 = (char *)&v156[v159];
        }
        uint64_t v165 = &v94[(unsigned __int16)v155 / 0xFFu];
        *uint64_t v165 = v155 + (unsigned __int16)v155 / 0xFFu;
        unsigned int v94 = v165 + 1;
      }
      if ((unint64_t)v92 >= v96) {
        goto LABEL_251;
      }
      *(_DWORD *)(v6 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v92 - 2)) >> 50) & 0x3FFC)) = v92 - 2 - v10;
      unsigned int v166 = v92 - v10;
      unint64_t v167 = ((0xCF1BBCDCBB000000 * *v92) >> 50) & 0x3FFC;
      uint64_t v168 = *(unsigned int *)(v6 + v167);
      if (v168 >= v9) {
        uint64_t v113 = (char *)a2;
      }
      else {
        uint64_t v113 = v11;
      }
      if (v168 >= v9) {
        int v169 = v10;
      }
      else {
        int v169 = v97;
      }
      *(_DWORD *)(v6 + v167) = v166;
      BOOL v170 = v168 >= v95 && (int)v168 + 0xFFFF >= v166;
      if (!v170 || (int v121 = &v169[v168], *(_DWORD *)&v169[v168] != *(_DWORD *)v92))
      {
        int v100 = (_DWORD *)((char *)v92 + 1);
        unsigned int v101 = v92 + 1 - v10;
        char v99 = (char *)v92 + 2;
        if ((unint64_t)v92 + 2 > v96) {
          goto LABEL_251;
        }
        goto LABEL_130;
      }
      *unsigned int v94 = 0;
      unint64_t v129 = v94 + 1;
      __int16 v114 = v166 - v168;
      int v131 = v94;
    }
  }
  if (v4 > 0x7E000000)
  {
LABEL_127:
    uint64_t result = 0;
    goto LABEL_260;
  }
  uint64_t v197 = v4;
  unint64_t v199 = v7;
  uint64_t v13 = (char *)a2 + v4;
  v7[6] = v8 + v4;
  *uint64_t v7 = v9 + v4;
  *((_WORD *)v7 + 3) = 2;
  int v14 = a2;
  uint64_t v15 = a3;
  if (v4 < 0xD) {
    goto LABEL_122;
  }
  signed int v201 = v4;
  unint64_t v16 = (unint64_t)(v13 - 11);
  unint64_t v204 = &v11[v8];
  uint64_t v206 = v13 - 5;
  size_t v17 = &v11[v8 - v9];
  unsigned int v191 = a2 + 1;
  *(_DWORD *)(v6 + (((0xCF1BBCDCBB000000 * *a2) >> 50) & 0x3FFC)) = v9;
  unint64_t v18 = (char *)a2 + v4;
  uint64_t v19 = (void *)((char *)a2 + 2);
  unint64_t v20 = (_DWORD *)((char *)a2 + 1);
  unsigned int v21 = v9 + 1;
  unint64_t v22 = (unint64_t)(v18 - 12);
  unint64_t v189 = v18;
  unint64_t v179 = (unint64_t)(v18 - 6);
  unint64_t v181 = (unint64_t)(v18 - 8);
  char v195 = &v11[v8];
  unint64_t v193 = (unint64_t)a2 + v197 - 5;
  uint64_t v15 = a3;
  int v14 = a2;
LABEL_8:
  uint64_t v23 = *(uint64_t *)((char *)v14 + 1);
  uint64_t v24 = 1;
  unint64_t v25 = 65;
  do
  {
    unint64_t v26 = ((0xCF1BBCDCBB000000 * v23) >> 50) & 0x3FFC;
    uint64_t v27 = *(unsigned int *)(v6 + v26);
    int v28 = v19;
    uint64_t v23 = *v19;
    *(_DWORD *)(v6 + v26) = v21;
    if ((int)v27 + 0xFFFF >= v21)
    {
      unint64_t v29 = v27 >= v9 ? v10 : v17;
      if (*(_DWORD *)&v29[v27] == *v20)
      {
        uint64_t v30 = 0;
        uint64_t v31 = &v29[v27];
        if (v27 >= v9) {
          int v32 = (char *)a2;
        }
        else {
          int v32 = v11;
        }
        __int16 v33 = v21 - v27;
        int v34 = v20 - v14;
        int v35 = v20 - v14 - 15;
        char v36 = (_BYTE)v20 - (_BYTE)v14 - 14;
        int v37 = v35;
        do
        {
          int v38 = v37;
          int v39 = v30;
          int v40 = &v31[v30];
          int v41 = (uint64_t *)((char *)v20 + v30);
          if (&v31[v30] <= v32 || v41 <= v14) {
            break;
          }
          --v37;
          --v30;
        }
        while (*((unsigned __int8 *)v41 - 1) == *(v40 - 1));
        unsigned int v43 = v41 - v14;
        int v44 = v15 + 1;
        if ((v34 + v39) < 0xF)
        {
          *uint64_t v15 = 16 * v43;
        }
        else
        {
          char v45 = v39 + v35;
          *uint64_t v15 = -16;
          if (v39 + v35 > 254)
          {
            if (v38 >= 509) {
              int v46 = 509;
            }
            else {
              int v46 = v38;
            }
            unsigned int v47 = v34 - v46 + v39 + 239;
            unint64_t v185 = v17;
            unint64_t v187 = v16;
            char v182 = v36;
            memset(v44, 255, v47 / 0xFF + 1);
            unsigned int v43 = v41 - v14;
            size_t v17 = v185;
            unint64_t v16 = v187;
            int v11 = v209;
            LODWORD(v9) = v210;
            int v44 = &v15[v47 / 0xFFuLL + 2];
            char v45 = v47 / 0xFF + v182 + v39;
          }
          *v44++ = v45;
        }
        unint64_t v48 = &v44[v43];
        do
        {
          uint64_t v49 = *v14++;
          *(void *)int v44 = v49;
          v44 += 8;
        }
        while (v44 < v48);
        int v50 = v15;
        int v14 = v41;
        a2 = v211;
        while (1)
        {
          *(_WORD *)unint64_t v48 = v33;
          uint64_t v15 = v48 + 2;
          if (v32 != v11)
          {
            unsigned int v51 = (uint64_t *)((char *)v14 + 4);
            unint64_t v52 = v40 + 4;
            if (v22 <= (unint64_t)v14 + 4)
            {
              int v60 = (_DWORD *)v14 + 1;
            }
            else
            {
              unint64_t v53 = *v51 ^ *v52;
              if (v53)
              {
                unsigned int v54 = __clz(__rbit64(v53)) >> 3;
LABEL_62:
                int v14 = (uint64_t *)((char *)v14 + v54 + 4);
                goto LABEL_103;
              }
              int v60 = (_DWORD *)v14 + 3;
              unint64_t v52 = v40 + 12;
            }
            if ((unint64_t)v60 >= v22)
            {
LABEL_51:
              if ((unint64_t)v60 < v181 && *(_DWORD *)v52 == *v60)
              {
                ++v60;
                unint64_t v52 = (void *)((char *)v52 + 4);
              }
              if ((unint64_t)v60 < v179 && *(unsigned __int16 *)v52 == *(unsigned __int16 *)v60)
              {
                int v60 = (_DWORD *)((char *)v60 + 2);
                unint64_t v52 = (void *)((char *)v52 + 2);
              }
              if (v60 < (_DWORD *)v206 && *(unsigned __int8 *)v52 == *(unsigned __int8 *)v60) {
                LODWORD(v60) = v60 + 1;
              }
              unsigned int v54 = v60 - v51;
            }
            else
            {
              int v61 = v60 - v14 - 4;
              while (1)
              {
                unint64_t v62 = *(void *)v60 ^ *v52;
                if (v62) {
                  break;
                }
                v60 += 2;
                ++v52;
                v61 += 8;
                if ((unint64_t)v60 >= v22) {
                  goto LABEL_51;
                }
              }
              unsigned int v54 = (__clz(__rbit64(v62)) >> 3) + v61;
            }
            goto LABEL_62;
          }
          int v55 = (uint64_t *)((char *)v14 + v204 - v40);
          if (v55 > (void *)v206) {
            int v55 = v206;
          }
          unint64_t v56 = (uint64_t *)((char *)v14 + 4);
          unint64_t v57 = v40 + 4;
          unsigned int v58 = (char *)v55 - 7;
          if ((char *)v55 - 7 <= (char *)v14 + 4)
          {
            unsigned int v63 = (char *)v14 + 4;
          }
          else
          {
            unint64_t v59 = *v56 ^ *v57;
            if (v59)
            {
              unsigned int v54 = __clz(__rbit64(v59)) >> 3;
              goto LABEL_79;
            }
            unsigned int v63 = (char *)v14 + 12;
            unint64_t v57 = v40 + 12;
          }
          if (v63 >= v58)
          {
LABEL_68:
            if (v63 < (char *)v55 - 3 && *(_DWORD *)v57 == *(_DWORD *)v63)
            {
              v63 += 4;
              unint64_t v57 = (void *)((char *)v57 + 4);
            }
            if (v63 < (char *)v55 - 1 && *(unsigned __int16 *)v57 == *(unsigned __int16 *)v63)
            {
              v63 += 2;
              unint64_t v57 = (void *)((char *)v57 + 2);
            }
            if (v63 < (char *)v55 && *(unsigned __int8 *)v57 == *v63) {
              LODWORD(v63) = v63 + 1;
            }
            unsigned int v54 = v63 - v56;
          }
          else
          {
            int v64 = v63 - v14 - 4;
            while (1)
            {
              unint64_t v65 = *(void *)v63 ^ *v57;
              if (v65) {
                break;
              }
              v63 += 8;
              ++v57;
              v64 += 8;
              if (v63 >= v58) {
                goto LABEL_68;
              }
            }
            unsigned int v54 = (__clz(__rbit64(v65)) >> 3) + v64;
          }
LABEL_79:
          if ((uint64_t *)((char *)v14 + v54 + 4) != v55)
          {
            int v14 = (uint64_t *)((char *)v14 + v54 + 4);
            goto LABEL_103;
          }
          unint64_t v66 = v55;
          uint64_t v67 = a2;
          if (v22 <= (unint64_t)v55) {
            goto LABEL_85;
          }
          unint64_t v68 = *v55 ^ *a2;
          if (!v68)
          {
            unint64_t v66 = v55 + 1;
            uint64_t v67 = v191;
LABEL_85:
            if ((unint64_t)v66 >= v22)
            {
LABEL_91:
              if ((unint64_t)v66 < v181 && *v67 == *v66)
              {
                ++v66;
                ++v67;
              }
              if ((unint64_t)v66 < v179 && *(unsigned __int16 *)v67 == *(unsigned __int16 *)v66)
              {
                unint64_t v66 = (_DWORD *)((char *)v66 + 2);
                uint64_t v67 = (_DWORD *)((char *)v67 + 2);
              }
              if (v66 < (_DWORD *)v206 && *(unsigned __int8 *)v67 == *(unsigned __int8 *)v66) {
                LODWORD(v66) = v66 + 1;
              }
              unsigned int v69 = v66 - v55;
            }
            else
            {
              uint64_t v70 = (char *)((char *)v14 + (void)v195 - v40);
              if ((unint64_t)v70 >= v193) {
                LODWORD(v70) = v193;
              }
              int v71 = v66 - v70;
              while (1)
              {
                unint64_t v72 = *(void *)v66 ^ *(void *)v67;
                if (v72) {
                  break;
                }
                v66 += 2;
                v67 += 2;
                v71 += 8;
                if ((unint64_t)v66 >= v22) {
                  goto LABEL_91;
                }
              }
              unsigned int v69 = (__clz(__rbit64(v72)) >> 3) + v71;
            }
            goto LABEL_102;
          }
          unsigned int v69 = __clz(__rbit64(v68)) >> 3;
LABEL_102:
          v54 += v69;
          int v14 = (void *)((char *)v55 + v69);
LABEL_103:
          char v73 = *v50;
          unsigned int v74 = v54 - 15;
          if (v54 < 0xF)
          {
            char *v50 = v73 + v54;
          }
          else
          {
            char *v50 = v73 + 15;
            *(_DWORD *)uint64_t v15 = -1;
            if (v74 >= 0x3FC)
            {
              unint64_t v75 = v48 + 6;
              __int16 v76 = v54 - 1035;
              unsigned int v77 = (v54 - 1035) / 0x3FC;
              uint64_t v78 = 2 * v77;
              unint64_t v79 = v16;
              uint64_t v80 = v17;
              memset(v48 + 6, 255, v78 * 2 + 4);
              size_t v17 = v80;
              unint64_t v16 = v79;
              int v11 = v209;
              LODWORD(v9) = v210;
              LOWORD(v74) = v76 - 1020 * v77;
              uint64_t v15 = (char *)&v75[v78];
              a2 = v211;
            }
            int v81 = &v15[(unsigned __int16)v74 / 0xFFu];
            *int v81 = v74 + (unsigned __int16)v74 / 0xFFu;
            uint64_t v15 = v81 + 1;
          }
          if ((unint64_t)v14 >= v16) {
            goto LABEL_121;
          }
          *(_DWORD *)(v6 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v14 - 2)) >> 50) & 0x3FFC)) = v14 - 2 - v10;
          unsigned int v82 = v14 - v10;
          unint64_t v83 = ((0xCF1BBCDCBB000000 * *v14) >> 50) & 0x3FFC;
          uint64_t v84 = *(unsigned int *)(v6 + v83);
          if (v84 >= v9) {
            int v32 = (char *)a2;
          }
          else {
            int v32 = v11;
          }
          if (v84 >= v9) {
            unint64_t v85 = v10;
          }
          else {
            unint64_t v85 = v17;
          }
          *(_DWORD *)(v6 + v83) = v82;
          if ((int)v84 + 0xFFFF < v82 || (int v40 = &v85[v84], *(_DWORD *)&v85[v84] != *(_DWORD *)v14))
          {
            unint64_t v20 = (_DWORD *)((char *)v14 + 1);
            unsigned int v21 = v14 + 1 - v10;
            uint64_t v19 = (uint64_t *)((char *)v14 + 2);
            if ((unint64_t)v14 + 2 > v16) {
              goto LABEL_121;
            }
            goto LABEL_8;
          }
          *uint64_t v15 = 0;
          unint64_t v48 = v15 + 1;
          __int16 v33 = v82 - v84;
          int v50 = v15;
        }
      }
    }
    unsigned int v21 = v28 - v10;
    uint64_t v19 = (void *)((char *)v28 + v24);
    uint64_t v24 = v25++ >> 6;
    unint64_t v20 = v28;
  }
  while ((unint64_t)v19 <= v16);
LABEL_121:
  signed int v4 = v201;
  uint64_t v13 = v189;
LABEL_122:
  size_t v86 = v13 - (char *)v14;
  unint64_t v87 = v13 - (char *)v14 - 15;
  if ((unint64_t)(v13 - (char *)v14) < 0xF)
  {
    *uint64_t v15 = 16 * v86;
  }
  else
  {
    *uint64_t v15 = -16;
    int v88 = v15 + 1;
    if (v87 >= 0xFF)
    {
      unint64_t v89 = (char *)a2 + v197 - (char *)v14 - 270;
      memset(v88, 255, v89 / 0xFF + 1);
      a2 = v211;
      unint64_t v87 = v89 % 0xFF;
      int v88 = &v15[v89 / 0xFF + 2];
    }
    *int v88 = v87;
    uint64_t v15 = v88;
  }
  memcpy(v15 + 1, v14, v86);
  uint64_t result = (v15 + 1 + v86 - a3);
  uint64_t v7 = v199;
LABEL_260:
  *(void *)(v6 + 16392) = a2;
  v7[6] = v4;
  return result;
}

size_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_saveDict(uint64_t a1, void *__dst, unsigned int a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16408);
  if (a3 >= v5) {
    unsigned int v6 = *(_DWORD *)(a1 + 16408);
  }
  else {
    unsigned int v6 = a3;
  }
  if (v6 >= 0x10000) {
    size_t v7 = 0x10000;
  }
  else {
    size_t v7 = v6;
  }
  memmove(__dst, (const void *)(*(void *)(a1 + 16392) + v5 - v7), v7);
  *(void *)(a1 + 16392) = __dst;
  *(_DWORD *)(a1 + 16408) = v7;
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *__dst, char *a3, int a4)
{
  if (!this) {
    return 0xFFFFFFFFLL;
  }
  if (!a4)
  {
    if (a3 == 1)
    {
      if (*(unsigned char *)this) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 0;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = (unsigned __int16 *)((char *)this + (int)a3);
  unsigned int v6 = &__dst[a4];
  size_t v7 = (char *)v5 - 15;
  uint64_t v8 = v6 - 12;
  uint64_t v9 = v6 - 7;
  unint64_t v10 = this;
  int v11 = __dst;
  while (1)
  {
    while (1)
    {
      uint64_t v13 = (_OWORD *)((char *)v10 + 1);
      unint64_t v12 = *(unsigned __int8 *)v10;
      size_t v14 = v12 >> 4;
      if ((v12 >> 4) == 15) {
        break;
      }
      if (v13 >= (_OWORD *)v5 - 1 || v11 > v6 - 32)
      {
        unint64_t v10 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v10 + 1);
        goto LABEL_12;
      }
      *(_OWORD *)int v11 = *v13;
      uint64_t v19 = &v11[v14];
      unint64_t v27 = v12 & 0xF;
      unint64_t v10 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + v14 + 2);
      unint64_t v24 = *(unsigned __int16 *)((char *)v13 + v14);
      unint64_t v26 = (unint64_t)&v19[-v24];
      if (v27 == 15 || v24 < 8 || v26 < (unint64_t)__dst)
      {
        uint64_t v23 = v10;
        goto LABEL_28;
      }
      *(void *)uint64_t v19 = *(void *)v26;
      *((void *)v19 + 1) = *(void *)(v26 + 8);
      *((_WORD *)v19 + 8) = *(_WORD *)(v26 + 16);
      int v11 = &v19[v27 + 4];
    }
    if (v13 >= (_OWORD *)v7)
    {
      LODWORD(v10) = v10 + 1;
      return (~v10 + this);
    }
    LODWORD(v15) = 0;
    uint64_t v16 = (uint64_t)v10 + 2;
    unint64_t v10 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v10 + 1);
    do
    {
      int v18 = *(unsigned __int8 *)v10;
      unint64_t v10 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v10 + 1);
      int v17 = v18;
      uint64_t v15 = (v15 + v18);
      ++v16;
    }
    while (v10 < (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)v7 && v17 == 255);
    size_t v14 = v15 + 15;
    if (__CFADD__(v11, v14) || v14 > -v16) {
      return (~v10 + this);
    }
LABEL_12:
    uint64_t v19 = &v11[v14];
    unint64_t v20 = (unsigned __int16 *)((char *)v10 + v14);
    if (&v11[v14] > v8 || v20 > v5 - 4) {
      break;
    }
    do
    {
      uint64_t v22 = *(void *)v10;
      unint64_t v10 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v10 + 8);
      *(void *)int v11 = v22;
      v11 += 8;
    }
    while (v11 < v19);
    unsigned int v25 = *v20;
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v20 + 1);
    unint64_t v24 = v25;
    unint64_t v26 = (unint64_t)&v19[-v25];
    unint64_t v27 = v12 & 0xF;
LABEL_28:
    if (v27 == 15)
    {
      LODWORD(v30) = 0;
      while (1)
      {
        unint64_t v10 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v23 + 1);
        if ((char *)v23 + 1 >= (char *)(v5 - 2)) {
          return (~v10 + this);
        }
        int v31 = *(unsigned __int8 *)v23;
        uint64_t v30 = (v30 + v31);
        uint64_t v23 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v23 + 1);
        if (v31 != 255)
        {
          unint64_t v27 = v30 + 15;
          if (__CFADD__(v19, v27)) {
            return (~v10 + this);
          }
          goto LABEL_36;
        }
      }
    }
    unint64_t v10 = v23;
LABEL_36:
    if (v26 < (unint64_t)__dst) {
      return (~v10 + this);
    }
    if (v24 <= 7)
    {
      *(_DWORD *)uint64_t v19 = 0;
      *uint64_t v19 = *(unsigned char *)v26;
      v19[1] = *(unsigned char *)(v26 + 1);
      v19[2] = *(unsigned char *)(v26 + 2);
      v19[3] = *(unsigned char *)(v26 + 3);
      int v38 = (_DWORD *)(v26 + dword_21740C7D8[v24]);
      *((_DWORD *)v19 + 1) = *v38;
      int v32 = (char *)v38 - dword_21740C7F8[v24];
    }
    else
    {
      uint64_t v33 = *(void *)v26;
      int v32 = (char *)(v26 + 8);
      *(void *)uint64_t v19 = v33;
    }
    int v11 = &v19[v27 + 4];
    int v34 = v19 + 8;
    if (v11 > v8)
    {
      if (v11 > v6 - 5) {
        return (~v10 + this);
      }
      if (v34 < v9)
      {
        int v39 = v19 + 8;
        int v40 = (uint64_t *)v32;
        do
        {
          uint64_t v41 = *v40++;
          *(void *)int v39 = v41;
          v39 += 8;
        }
        while (v39 < v9);
        v32 += v9 - v34;
        int v34 = (char *)(v6 - 7);
      }
      while (v34 < v11)
      {
        char v42 = *v32++;
        *v34++ = v42;
      }
    }
    else
    {
      *(void *)int v34 = *(void *)v32;
      if (v27 >= 0xD)
      {
        int v35 = v19 + 16;
        char v36 = (uint64_t *)(v32 + 8);
        do
        {
          uint64_t v37 = *v36++;
          *(void *)int v35 = v37;
          v35 += 8;
        }
        while (v35 < v11);
      }
    }
  }
  if (v20 == v5 && v19 <= v6)
  {
    memmove(v11, v10, v14);
    return (v19 - __dst);
  }
  return (~v10 + this);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_partial(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *__dst, char *a3, int a4, int a5)
{
  if (!this) {
    return 0xFFFFFFFFLL;
  }
  if (a4 >= a5) {
    int v5 = a5;
  }
  else {
    int v5 = a4;
  }
  if (!v5) {
    return 0;
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  size_t v7 = (unsigned __int16 *)((char *)this + (int)a3);
  uint64_t v8 = &__dst[v5];
  int v50 = (char *)(v7 - 8);
  uint64_t v9 = (char *)v7 - 15;
  unint64_t v10 = v8 - 12;
  int v11 = (char *)(v7 - 4);
  unint64_t v48 = (char *)(v7 - 4);
  uint64_t v49 = v7;
  unint64_t v12 = (unint64_t)(v7 - 2);
  int v47 = (int)this;
  uint64_t v13 = this;
  size_t v14 = __dst;
  while (1)
  {
    while (1)
    {
      uint64_t v15 = (_OWORD *)((char *)v13 + 1);
      unint64_t v16 = *(unsigned __int8 *)v13;
      size_t v17 = v16 >> 4;
      if ((v16 >> 4) == 15)
      {
        if (v15 >= (_OWORD *)v9)
        {
          LODWORD(v13) = v13 + 1;
          return (~v13 + v47);
        }
        LODWORD(v18) = 0;
        uint64_t v19 = (uint64_t)v13 + 2;
        uint64_t v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 1);
        do
        {
          int v21 = *(unsigned __int8 *)v13;
          uint64_t v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 1);
          int v20 = v21;
          uint64_t v18 = (v18 + v21);
          ++v19;
        }
        while (v13 < (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)v9 && v20 == 255);
        size_t v17 = v18 + 15;
        if (__CFADD__(v14, v18 + 15) || v17 > -v19) {
          return (~v13 + v47);
        }
        goto LABEL_15;
      }
      if (v15 >= (_OWORD *)v50 || v14 > v8 - 32) {
        break;
      }
      *(_OWORD *)size_t v14 = *v15;
      uint64_t v22 = &v14[v17];
      int v32 = (unsigned __int16 *)((char *)v15 + v17);
      unint64_t v31 = v16 & 0xF;
      unsigned int v33 = *v32;
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v32 + 1);
      unint64_t v27 = v33;
      uint64_t v30 = &v14[v17 - v33];
      if ((v16 & 0xF) == 0xF || v27 < 8 || v30 < __dst)
      {
        int v28 = v13;
        goto LABEL_41;
      }
      *(void *)uint64_t v22 = *(void *)v30;
      *((void *)v22 + 1) = *((void *)v30 + 1);
      *((_WORD *)v22 + 8) = *((_WORD *)v30 + 8);
      size_t v14 = &v22[v31 + 4];
    }
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 1);
LABEL_15:
    uint64_t v22 = &v14[v17];
    uint64_t v23 = (unsigned __int16 *)((char *)v13 + v17);
    if (&v14[v17] > v10 || v23 > (unsigned __int16 *)v11)
    {
      if (v23 > (unsigned __int16 *)v11 && v23 != v49) {
        return (~v13 + v47);
      }
      if (v22 > v8)
      {
        memmove(v14, v13, v8 - v14);
LABEL_72:
        LODWORD(v22) = v8;
        return (v22 - __dst);
      }
      memmove(v14, v13, v17);
      if (v22 == v8) {
        return (v22 - __dst);
      }
      int v11 = v48;
      if (v23 == v49) {
        return (v22 - __dst);
      }
    }
    else
    {
      do
      {
        uint64_t v26 = *(void *)v13;
        uint64_t v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 8);
        *(void *)size_t v14 = v26;
        v14 += 8;
      }
      while (v14 < v22);
    }
    unsigned int v29 = *v23;
    int v28 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v23 + 1);
    unint64_t v27 = v29;
    uint64_t v30 = &v22[-v29];
    unint64_t v31 = v16 & 0xF;
LABEL_41:
    if (v31 == 15) {
      break;
    }
    uint64_t v13 = v28;
LABEL_49:
    if (v30 < __dst) {
      return (~v13 + v47);
    }
    size_t v14 = &v22[v31 + 4];
    if (v14 <= v10)
    {
      if (v27 <= 7)
      {
        *(_DWORD *)uint64_t v22 = 0;
        char *v22 = *v30;
        v22[1] = v30[1];
        v22[2] = v30[2];
        v22[3] = v30[3];
        char v45 = &v30[dword_21740C7D8[v27]];
        *((_DWORD *)v22 + 1) = *(_DWORD *)v45;
        int v40 = &v45[-dword_21740C7F8[v27]];
      }
      else
      {
        uint64_t v41 = *(void *)v30;
        int v40 = v30 + 8;
        *(void *)uint64_t v22 = v41;
      }
      *((void *)v22 + 1) = *(void *)v40;
      if (v31 >= 0xD)
      {
        char v42 = v22 + 16;
        unsigned int v43 = (uint64_t *)(v40 + 8);
        do
        {
          uint64_t v44 = *v43++;
          *(void *)char v42 = v44;
          v42 += 8;
        }
        while (v42 < v14);
      }
    }
    else
    {
      if (v31 + 4 >= v8 - v22) {
        size_t v38 = v8 - v22;
      }
      else {
        size_t v38 = v31 + 4;
      }
      size_t v14 = &v22[v38];
      if (&v30[v38] <= v22)
      {
        memcpy(v22, v30, v38);
        int v11 = v48;
      }
      else if (v38)
      {
        do
        {
          char v39 = *v30++;
          *v22++ = v39;
        }
        while (v22 < v14);
      }
      if (v14 == v8) {
        goto LABEL_72;
      }
    }
  }
  LODWORD(v36) = 0;
  while (1)
  {
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v28 + 1);
    if ((unint64_t)v28 + 1 >= v12) {
      return (~v13 + v47);
    }
    int v37 = *(unsigned __int8 *)v28;
    uint64_t v36 = (v36 + v37);
    int v28 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v28 + 1);
    if (v37 != 255)
    {
      unint64_t v31 = v36 + 15;
      if (__CFADD__(v22, v31)) {
        return (~v13 + v47);
      }
      goto LABEL_49;
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_fast(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *__dst, char *a3)
{
  if (!this) {
    return 0xFFFFFFFFLL;
  }
  int v3 = (int)this;
  if (!a3)
  {
    if (*(unsigned char *)this) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  signed int v4 = &__dst[(int)a3];
  int v5 = v4 - 7;
  unsigned int v6 = this;
  while (1)
  {
    while (1)
    {
      unsigned int v8 = *(unsigned __int8 *)v6;
      unsigned int v6 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v6 + 1);
      char v7 = v8;
      size_t v9 = (unint64_t)v8 >> 4;
      if (v8 > 0x8FuLL || __dst > v4 - 26) {
        break;
      }
      *(void *)long long __dst = *(void *)v6;
      uint64_t v13 = &__dst[v9];
      int v21 = (unsigned __int16 *)((char *)v6 + v9);
      unint64_t v20 = v7 & 0xF;
      unsigned int v22 = *v21;
      unsigned int v6 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v21 + 1);
      unint64_t v17 = v22;
      uint64_t v19 = &v13[-v22];
      if (v20 == 15 || v17 < 8) {
        goto LABEL_21;
      }
      *(void *)uint64_t v13 = *(void *)v19;
      *((void *)v13 + 1) = *((void *)v19 + 1);
      *((_WORD *)v13 + 8) = *((_WORD *)v19 + 8);
      long long __dst = &v13[v20 + 4];
    }
    if (v9 == 15)
    {
      LODWORD(v11) = 0;
      do
      {
        int v12 = *(unsigned __int8 *)v6;
        unsigned int v6 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v6 + 1);
        uint64_t v11 = (v11 + v12);
      }
      while (v12 == 255);
      size_t v9 = v11 + 15;
    }
    uint64_t v13 = &__dst[v9];
    if (&__dst[v9] > v4 - 8) {
      break;
    }
    size_t v14 = v6;
    do
    {
      uint64_t v15 = *(void *)v14;
      size_t v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v14 + 8);
      *(void *)long long __dst = v15;
      __dst += 8;
    }
    while (__dst < v13);
    unint64_t v16 = (unsigned __int16 *)((char *)v6 + v9);
    unsigned int v18 = *v16;
    unsigned int v6 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v16 + 1);
    unint64_t v17 = v18;
    uint64_t v19 = &v13[-v18];
    unint64_t v20 = v7 & 0xF;
LABEL_21:
    if (v20 == 15)
    {
      LODWORD(v24) = 0;
      do
      {
        int v25 = *(unsigned __int8 *)v6;
        unsigned int v6 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v6 + 1);
        uint64_t v24 = (v24 + v25);
      }
      while (v25 == 255);
      unint64_t v20 = v24 + 15;
    }
    if (v17 <= 7)
    {
      *(_DWORD *)uint64_t v13 = 0;
      char *v13 = *v19;
      v13[1] = v19[1];
      v13[2] = v19[2];
      v13[3] = v19[3];
      int v32 = &v19[dword_21740C7D8[v17]];
      *((_DWORD *)v13 + 1) = *(_DWORD *)v32;
      uint64_t v26 = &v32[-dword_21740C7F8[v17]];
    }
    else
    {
      uint64_t v27 = *(void *)v19;
      uint64_t v26 = v19 + 8;
      *(void *)uint64_t v13 = v27;
    }
    long long __dst = &v13[v20 + 4];
    int v28 = v13 + 8;
    if (__dst > v4 - 12)
    {
      if (__dst > v4 - 5) {
        return (~v6 + v3);
      }
      if (v28 < v5)
      {
        unsigned int v33 = v13 + 8;
        int v34 = (uint64_t *)v26;
        do
        {
          uint64_t v35 = *v34++;
          *(void *)unsigned int v33 = v35;
          v33 += 8;
        }
        while (v33 < v5);
        v26 += v5 - v28;
        int v28 = (char *)(v4 - 7);
      }
      while (v28 < __dst)
      {
        char v36 = *v26++;
        *v28++ = v36;
      }
    }
    else
    {
      *(void *)int v28 = *(void *)v26;
      if (v20 >= 0xD)
      {
        unsigned int v29 = v13 + 16;
        uint64_t v30 = (uint64_t *)(v26 + 8);
        do
        {
          uint64_t v31 = *v30++;
          *(void *)unsigned int v29 = v31;
          v29 += 8;
        }
        while (v29 < __dst);
      }
    }
  }
  if (v13 != v4) {
    return (~v6 + v3);
  }
  memmove(__dst, v6, v9);
  return (v6 + v9 - v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_withPrefix64k(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3, int a4)
{
  if (!this) {
    return 0xFFFFFFFFLL;
  }
  if (!a4)
  {
    if (a3 == 1)
    {
      if (*(unsigned char *)this) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 0;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = 0;
  int v5 = (unsigned __int16 *)((char *)this + (int)a3);
  unsigned int v6 = &a2[a4];
  int64_t v7 = a4;
  unsigned int v8 = v6 - 32;
  size_t v9 = (char *)v5 - 15;
  unint64_t v10 = v6 - 12;
  uint64_t v11 = v6 - 7;
  int v12 = v6 - 5;
  uint64_t v13 = this;
  while (1)
  {
    while (1)
    {
      size_t v14 = (char *)&a2[v4];
      unint64_t v16 = (_OWORD *)((char *)v13 + 1);
      unint64_t v15 = *(unsigned __int8 *)v13;
      size_t v17 = v15 >> 4;
      if ((v15 >> 4) == 15) {
        break;
      }
      if (v16 >= (_OWORD *)v5 - 1 || v14 > v8)
      {
        uint64_t v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 1);
        goto LABEL_12;
      }
      *(_OWORD *)size_t v14 = *v16;
      int64_t v22 = v4 + v17;
      unint64_t v31 = v15 & 0xF;
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v16 + v17 + 2);
      unint64_t v27 = *(unsigned __int16 *)((char *)v16 + v17);
      uint64_t v30 = v22 - v27;
      if ((v15 & 0xF) == 0xF || v27 < 8)
      {
        int v28 = v13;
        goto LABEL_24;
      }
      int v32 = (char *)&a2[v22];
      unsigned int v33 = &a2[v30];
      *(void *)int v32 = *(void *)v33;
      *((void *)v32 + 1) = *((void *)v33 + 1);
      *((_WORD *)v32 + 8) = *((_WORD *)v33 + 8);
      uint64_t v4 = v31 + v22 + 4;
    }
    if (v16 >= (_OWORD *)v9)
    {
      LODWORD(v13) = v13 + 1;
      return (~v13 + this);
    }
    LODWORD(v18) = 0;
    uint64_t v19 = (uint64_t)v13 + 2;
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 1);
    do
    {
      int v21 = *(unsigned __int8 *)v13;
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 1);
      int v20 = v21;
      uint64_t v18 = (v18 + v21);
      ++v19;
    }
    while (v13 < (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)v9 && v20 == 255);
    size_t v17 = v18 + 15;
    if (__CFADD__(v14, v17) || v17 > -v19) {
      return (~v13 + this);
    }
LABEL_12:
    int64_t v22 = v17 + v4;
    uint64_t v23 = &a2[v17 + v4];
    uint64_t v24 = (unsigned __int16 *)((char *)v13 + v17);
    if (v23 > v10 || v24 > v5 - 4) {
      break;
    }
    do
    {
      uint64_t v26 = *(void *)v13;
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 8);
      *(void *)size_t v14 = v26;
      v14 += 8;
    }
    while (v14 < v23);
    unsigned int v29 = *v24;
    int v28 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v24 + 1);
    unint64_t v27 = v29;
    uint64_t v30 = v22 - v29;
    unint64_t v31 = v15 & 0xF;
LABEL_24:
    int v34 = (char *)&a2[v22];
    if (v31 == 15)
    {
      LODWORD(v35) = 0;
      while (1)
      {
        uint64_t v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v28 + 1);
        if ((char *)v28 + 1 >= (char *)(v5 - 2)) {
          return (~v13 + this);
        }
        int v36 = *(unsigned __int8 *)v28;
        uint64_t v35 = (v35 + v36);
        int v28 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v28 + 1);
        if (v36 != 255)
        {
          unint64_t v31 = v35 + 15;
          if (__CFADD__(v34, v31)) {
            return (~v13 + this);
          }
          goto LABEL_32;
        }
      }
    }
    uint64_t v13 = v28;
LABEL_32:
    if (v30 < -65536) {
      return (~v13 + this);
    }
    int v37 = &a2[v30];
    if (v27 <= 7)
    {
      *(_DWORD *)int v34 = 0;
      *int v34 = *v37;
      v34[1] = v37[1];
      v34[2] = v37[2];
      v34[3] = v37[3];
      char v45 = &v37[dword_21740C7D8[v27]];
      *((_DWORD *)v34 + 1) = *(_DWORD *)v45;
      size_t v38 = &v45[-dword_21740C7F8[v27]];
    }
    else
    {
      uint64_t v39 = *(void *)v37;
      size_t v38 = v37 + 8;
      *(void *)int v34 = v39;
    }
    uint64_t v4 = v22 + v31 + 4;
    int v40 = &a2[v4];
    uint64_t v41 = v34 + 8;
    if (&a2[v4] > v10)
    {
      if (v40 > v12) {
        return (~v13 + this);
      }
      if (v41 < v11)
      {
        int v46 = v34 + 8;
        int v47 = v38;
        do
        {
          uint64_t v48 = *(void *)v47;
          v47 += 8;
          *(void *)int v46 = v48;
          v46 += 8;
        }
        while (v46 < v11);
        v38 += v11 - v41;
        uint64_t v41 = (char *)v11;
      }
      while (v41 < v40)
      {
        char v49 = *v38++;
        *v41++ = v49;
      }
    }
    else
    {
      *(void *)uint64_t v41 = *(void *)v38;
      if (v31 >= 0xD)
      {
        char v42 = v34 + 16;
        unsigned int v43 = (uint64_t *)(v38 + 8);
        do
        {
          uint64_t v44 = *v43++;
          *(void *)char v42 = v44;
          v42 += 8;
        }
        while (v42 < v40);
      }
    }
  }
  if (v24 != v5 || v22 > v7) {
    return (~v13 + this);
  }
  memmove(v14, v13, v17);
  return v22;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_forceExtDict(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *__dst, char *a3, int a4, uint64_t a5, unint64_t a6)
{
  if (!this) {
    return 0xFFFFFFFFLL;
  }
  int64_t v7 = (char *)(a5 + a6);
  if (!a5) {
    int64_t v7 = 0;
  }
  int v60 = v7;
  if (!a4)
  {
    if (a3 == 1)
    {
      if (*(unsigned char *)this) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 0;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  size_t v9 = (unsigned __int16 *)((char *)this + (int)a3);
  unint64_t v10 = &__dst[a4];
  unsigned int v63 = v10 - 32;
  int v64 = (char *)(v9 - 8);
  uint64_t v11 = (char *)v9 - 15;
  int v12 = v10 - 12;
  unint64_t v56 = v10;
  unint64_t v57 = v9;
  unint64_t v13 = (unint64_t)(v9 - 2);
  int v55 = v10 - 7;
  int v61 = v10 - 5;
  unint64_t v62 = (char *)(v9 - 4);
  int v58 = (int)this;
  unint64_t v59 = (char *)v9 - 15;
  size_t v14 = this;
  unint64_t v15 = __dst;
  while (1)
  {
    size_t v17 = (_OWORD *)((char *)v14 + 1);
    unint64_t v16 = *(unsigned __int8 *)v14;
    size_t v18 = v16 >> 4;
    if ((v16 >> 4) == 15) {
      break;
    }
    if (v17 >= (_OWORD *)v64 || v15 > v63)
    {
      size_t v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v14 + 1);
      goto LABEL_14;
    }
    *(_OWORD *)unint64_t v15 = *v17;
    uint64_t v23 = &v15[v18];
    unint64_t v31 = v16 & 0xF;
    size_t v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v17 + v18 + 2);
    unint64_t v27 = *(unsigned __int16 *)((char *)v17 + v18);
    unint64_t v30 = (unint64_t)&v15[v18 - v27];
    if (v31 != 15 && v27 >= 8 && v30 >= (unint64_t)__dst)
    {
      *(void *)uint64_t v23 = *(void *)v30;
      *((void *)v23 + 1) = *(void *)(v30 + 8);
      *((_WORD *)v23 + 8) = *(_WORD *)(v30 + 16);
      unint64_t v15 = &v23[v31 + 4];
    }
    else
    {
      int v28 = v14;
LABEL_30:
      if (v31 == 15)
      {
        LODWORD(v34) = 0;
        while (1)
        {
          size_t v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v28 + 1);
          if ((unint64_t)v28 + 1 >= v13) {
            return (~v14 + v58);
          }
          int v35 = *(unsigned __int8 *)v28;
          uint64_t v34 = (v34 + v35);
          int v28 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v28 + 1);
          if (v35 != 255)
          {
            unint64_t v31 = v34 + 15;
            if (__CFADD__(v23, v31)) {
              return (~v14 + v58);
            }
            goto LABEL_38;
          }
        }
      }
      size_t v14 = v28;
LABEL_38:
      if (!(a6 >> 16) && v30 + a6 < (unint64_t)__dst) {
        return (~v14 + v58);
      }
      int64_t v36 = v31 + 4;
      int v37 = &v23[v31 + 4];
      if (v30 >= (unint64_t)__dst)
      {
        if (v27 <= 7)
        {
          *(_DWORD *)uint64_t v23 = 0;
          *uint64_t v23 = *(unsigned char *)v30;
          v23[1] = *(unsigned char *)(v30 + 1);
          v23[2] = *(unsigned char *)(v30 + 2);
          v23[3] = *(unsigned char *)(v30 + 3);
          uint64_t v48 = (_DWORD *)(v30 + dword_21740C7D8[v27]);
          *((_DWORD *)v23 + 1) = *v48;
          char v42 = (char *)v48 - dword_21740C7F8[v27];
        }
        else
        {
          uint64_t v43 = *(void *)v30;
          char v42 = (char *)(v30 + 8);
          *(void *)uint64_t v23 = v43;
        }
        uint64_t v44 = v23 + 8;
        if (v37 > v12)
        {
          if (v37 > v61) {
            return (~v14 + v58);
          }
          if (v44 < (void *)v55)
          {
            char v49 = v23 + 8;
            int v50 = (uint64_t *)v42;
            do
            {
              uint64_t v51 = *v50++;
              *(void *)char v49 = v51;
              v49 += 8;
            }
            while (v49 < v55);
            v42 += v55 - (const char *)v44;
            uint64_t v44 = v55;
          }
          unint64_t v15 = v37;
          if (v44 < (void *)v37)
          {
            do
            {
              char v52 = *v42++;
              *(unsigned char *)uint64_t v44 = v52;
              uint64_t v44 = (void *)((char *)v44 + 1);
            }
            while (v44 < (void *)v37);
LABEL_54:
            unint64_t v15 = v37;
          }
        }
        else
        {
          void *v44 = *(void *)v42;
          unint64_t v15 = &v23[v31 + 4];
          if (v31 >= 0xD)
          {
            char v45 = v23 + 16;
            int v46 = (uint64_t *)(v42 + 8);
            do
            {
              uint64_t v47 = *v46++;
              *(void *)char v45 = v47;
              v45 += 8;
            }
            while (v45 < v37);
            goto LABEL_54;
          }
        }
      }
      else
      {
        if (v37 > v61) {
          return (~v14 + v58);
        }
        size_t v38 = &__dst[-v30];
        size_t v39 = v36 - (void)&__dst[-v30];
        if (v36 <= (unint64_t)&__dst[-v30])
        {
          memmove(v23, (const void *)(v60 - v38), v36);
          goto LABEL_58;
        }
        memcpy(v23, (const void *)(v60 - v38), (size_t)v38);
        unint64_t v15 = (char *)&v38[(void)v23];
        if (v39 <= &v38[(void)v23] - (const char *)__dst)
        {
          memcpy(v15, __dst, v39);
LABEL_58:
          unint64_t v15 = v37;
          uint64_t v11 = v59;
        }
        else
        {
          uint64_t v11 = v59;
          if ((uint64_t)v36 > (uint64_t)v38)
          {
            int v40 = __dst;
            do
            {
              char v41 = *v40++;
              *v15++ = v41;
            }
            while (v15 < v37);
          }
        }
      }
    }
  }
  if (v17 >= (_OWORD *)v11)
  {
    LODWORD(v14) = v14 + 1;
    return (~v14 + v58);
  }
  LODWORD(v19) = 0;
  uint64_t v20 = (uint64_t)v14 + 2;
  size_t v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v14 + 1);
  do
  {
    int v22 = *(unsigned __int8 *)v14;
    size_t v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v14 + 1);
    int v21 = v22;
    uint64_t v19 = (v19 + v22);
    ++v20;
  }
  while (v14 < (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)v11 && v21 == 255);
  size_t v18 = v19 + 15;
  if (__CFADD__(v15, v19 + 15) || v18 > -v20) {
    return (~v14 + v58);
  }
LABEL_14:
  uint64_t v23 = &v15[v18];
  uint64_t v24 = (unsigned __int16 *)((char *)v14 + v18);
  if (&v15[v18] <= v12 && v24 <= (unsigned __int16 *)v62)
  {
    do
    {
      uint64_t v26 = *(void *)v14;
      size_t v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v14 + 8);
      *(void *)unint64_t v15 = v26;
      v15 += 8;
    }
    while (v15 < v23);
    unsigned int v29 = *v24;
    int v28 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v24 + 1);
    unint64_t v27 = v29;
    unint64_t v30 = (unint64_t)&v23[-v29];
    unint64_t v31 = v16 & 0xF;
    goto LABEL_30;
  }
  if (v24 == v57 && v23 <= v56)
  {
    memmove(v15, v14, v18);
    return (v23 - __dst);
  }
  return (~v14 + v58);
}

void *pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_createStreamDecode(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  return calloc(1uLL, 0x20uLL);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_freeStreamDecode(void *a1)
{
  if (a1) {
    free(a1);
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_setStreamDecode(void *a1, uint64_t a2, int a3)
{
  a1[2] = a2 + a3;
  a1[3] = a3;
  *a1 = 0;
  a1[1] = 0;
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decoderRingBufferSize(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  if ((int)this <= 16) {
    int v1 = 16;
  }
  else {
    int v1 = (int)this;
  }
  unsigned int v2 = v1 + 65550;
  if (this <= 0x7E000000) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_continue(uint64_t *a1, pxrInternal__aapl__pxrReserved__::pxr_lz4 *a2, char *__dst, char *a4, int a5)
{
  unsigned int v6 = a1;
  unint64_t v7 = a1[3];
  if (!v7)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe(a2, __dst, a4, a5);
LABEL_5:
    if ((int)result >= 1)
    {
      uint64_t v11 = result;
      int v12 = &__dst[result];
      goto LABEL_89;
    }
    return result;
  }
  unsigned int v8 = (char *)a1[2];
  if (v8 != __dst)
  {
    uint64_t v9 = (uint64_t)&v8[-v7];
    *a1 = v9;
    a1[1] = v7;
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_forceExtDict(a2, __dst, a4, a5, v9, v7);
    goto LABEL_5;
  }
  if (v7 >= 0xFFFF)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_withPrefix64k(a2, __dst, a4, a5);
    goto LABEL_87;
  }
  unint64_t v13 = a1[1];
  if (!v13)
  {
    uint64_t result = sub_21684CD30((unsigned __int8 *)a2, __dst, (int)a4, a5, v7);
    goto LABEL_87;
  }
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  if (*a1) {
    unint64_t v14 = *a1 + v13;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v69 = v14;
  if (!a5)
  {
    if (a4 == 1)
    {
      if (*(unsigned char *)a2) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 0;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!a4) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v15 = (unsigned __int16 *)((char *)a2 + (int)a4);
  unint64_t v16 = &__dst[a5];
  size_t v17 = &__dst[-v7];
  unint64_t v72 = v16 - 32;
  unint64_t v73 = (unint64_t)(v15 - 8);
  unint64_t v18 = (unint64_t)v15 - 15;
  uint64_t v19 = v16 - 12;
  int v64 = v16;
  unint64_t v65 = v15;
  unint64_t v20 = (unint64_t)(v15 - 2);
  unint64_t v62 = v16 - 7;
  int v63 = (int)__dst;
  uint64_t v70 = v16 - 5;
  unint64_t v71 = (unint64_t)(v15 - 4);
  int v66 = (int)a2;
  int v21 = a2;
  int v22 = __dst;
  unint64_t v68 = v16 - 12;
  while (1)
  {
    uint64_t v24 = (_OWORD *)((char *)v21 + 1);
    unint64_t v23 = *(unsigned __int8 *)v21;
    size_t v25 = v23 >> 4;
    if ((v23 >> 4) == 15) {
      break;
    }
    if ((unint64_t)v24 >= v73 || v22 > (_OWORD *)v72)
    {
      int v21 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v21 + 1);
      goto LABEL_24;
    }
    _OWORD *v22 = *v24;
    unint64_t v30 = (void *)((char *)v22 + v25);
    unint64_t v38 = v23 & 0xF;
    int v21 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v24 + v25 + 2);
    unint64_t v34 = *(unsigned __int16 *)((char *)v24 + v25);
    unint64_t v37 = (unint64_t)v22 + v25 - v34;
    if (v38 != 15 && v34 >= 8 && v37 >= (unint64_t)v17)
    {
      *unint64_t v30 = *(void *)v37;
      v30[1] = *(void *)(v37 + 8);
      *((_WORD *)v30 + 8) = *(_WORD *)(v37 + 16);
      int v22 = (_OWORD *)((char *)v30 + v38 + 4);
    }
    else
    {
      int v35 = v21;
LABEL_40:
      if (v38 == 15)
      {
        LODWORD(v41) = 0;
        while (1)
        {
          int v21 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v35 + 1);
          if ((unint64_t)v35 + 1 >= v20) {
            goto LABEL_85;
          }
          int v42 = *(unsigned __int8 *)v35;
          uint64_t v41 = (v41 + v42);
          int v35 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v35 + 1);
          if (v42 != 255)
          {
            unint64_t v38 = v41 + 15;
            if (__CFADD__(v30, v38)) {
              goto LABEL_85;
            }
            goto LABEL_48;
          }
        }
      }
      int v21 = v35;
LABEL_48:
      if (!(v13 >> 16) && v37 + v13 < (unint64_t)v17) {
        goto LABEL_85;
      }
      size_t v43 = v38 + 4;
      uint64_t v44 = (char *)v30 + v38 + 4;
      if (v37 >= (unint64_t)v17)
      {
        if (v34 <= 7)
        {
          *(_DWORD *)unint64_t v30 = 0;
          *(unsigned char *)unint64_t v30 = *(unsigned char *)v37;
          *((unsigned char *)v30 + 1) = *(unsigned char *)(v37 + 1);
          *((unsigned char *)v30 + 2) = *(unsigned char *)(v37 + 2);
          *((unsigned char *)v30 + 3) = *(unsigned char *)(v37 + 3);
          unint64_t v56 = (_DWORD *)(v37 + dword_21740C7D8[v34]);
          *((_DWORD *)v30 + 1) = *v56;
          int v50 = (char *)v56 - dword_21740C7F8[v34];
        }
        else
        {
          uint64_t v51 = *(void *)v37;
          int v50 = (char *)(v37 + 8);
          *unint64_t v30 = v51;
        }
        char v52 = v30 + 1;
        if (v44 > v19)
        {
          if (v44 > v70) {
            goto LABEL_85;
          }
          if (v52 < (void *)v62)
          {
            unint64_t v57 = (char *)(v30 + 1);
            int v58 = (uint64_t *)v50;
            do
            {
              uint64_t v59 = *v58++;
              *(void *)unint64_t v57 = v59;
              v57 += 8;
            }
            while (v57 < v62);
            v50 += v62 - (char *)v52;
            char v52 = v62;
          }
          int v22 = v44;
          if (v52 < (void *)v44)
          {
            do
            {
              char v60 = *v50++;
              *(unsigned char *)char v52 = v60;
              char v52 = (void *)((char *)v52 + 1);
            }
            while (v52 < (void *)v44);
LABEL_64:
            int v22 = v44;
          }
        }
        else
        {
          void *v52 = *(void *)v50;
          int v22 = (_OWORD *)((char *)v30 + v38 + 4);
          if (v38 >= 0xD)
          {
            unint64_t v53 = (char *)(v30 + 2);
            unsigned int v54 = (uint64_t *)(v50 + 8);
            do
            {
              uint64_t v55 = *v54++;
              *(void *)unint64_t v53 = v55;
              v53 += 8;
            }
            while (v53 < v44);
            goto LABEL_64;
          }
        }
      }
      else
      {
        if (v44 > v70) {
          goto LABEL_85;
        }
        unint64_t v45 = v13;
        int64_t v46 = (int64_t)&v17[-v37];
        size_t v47 = v43 - (void)&v17[-v37];
        if (v43 <= (unint64_t)&v17[-v37])
        {
          memmove(v30, (const void *)(v69 - v46), v43);
          goto LABEL_68;
        }
        memcpy(v30, (const void *)(v69 - v46), v46);
        int v22 = (_OWORD *)((char *)v30 + v46);
        if (v47 <= (char *)v30 + v46 - v17)
        {
          memcpy(v22, v17, v47);
LABEL_68:
          int v22 = v44;
          unint64_t v13 = v45;
          uint64_t v19 = v68;
        }
        else
        {
          unint64_t v13 = v45;
          uint64_t v19 = v68;
          if ((uint64_t)v43 > v46)
          {
            uint64_t v48 = v17;
            do
            {
              char v49 = *v48++;
              *(unsigned char *)int v22 = v49;
              int v22 = (_OWORD *)((char *)v22 + 1);
            }
            while (v22 < (_OWORD *)v44);
          }
        }
      }
    }
  }
  if ((unint64_t)v24 >= v18)
  {
    LODWORD(v21) = v21 + 1;
    goto LABEL_85;
  }
  LODWORD(v26) = 0;
  uint64_t v27 = (uint64_t)v21 + 2;
  int v21 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v21 + 1);
  do
  {
    int v29 = *(unsigned __int8 *)v21;
    int v21 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v21 + 1);
    int v28 = v29;
    uint64_t v26 = (v26 + v29);
    ++v27;
  }
  while ((unint64_t)v21 < v18 && v28 == 255);
  size_t v25 = v26 + 15;
  if (__CFADD__(v22, v26 + 15) || v25 > -v27) {
    goto LABEL_85;
  }
LABEL_24:
  unint64_t v30 = (void *)((char *)v22 + v25);
  unint64_t v31 = (unsigned __int16 *)((char *)v21 + v25);
  if ((char *)v22 + v25 <= v19 && (unint64_t)v31 <= v71)
  {
    do
    {
      uint64_t v33 = *(void *)v21;
      int v21 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v21 + 8);
      *(void *)int v22 = v33;
      int v22 = (_OWORD *)((char *)v22 + 8);
    }
    while (v22 < (_OWORD *)v30);
    unsigned int v36 = *v31;
    int v35 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v31 + 1);
    unint64_t v34 = v36;
    unint64_t v37 = (unint64_t)v30 - v36;
    unint64_t v38 = v23 & 0xF;
    goto LABEL_40;
  }
  if (v31 == v65 && v30 <= (void *)v64)
  {
    memmove(v22, v21, v25);
    uint64_t result = (v30 - v63);
    goto LABEL_86;
  }
LABEL_85:
  uint64_t result = (~v21 + v66);
LABEL_86:
  unsigned int v6 = a1;
LABEL_87:
  if ((int)result >= 1)
  {
    uint64_t v11 = v6[3] + result;
    int v12 = (char *)(v6[2] + result);
LABEL_89:
    v6[2] = (uint64_t)v12;
    v6[3] = v11;
  }
  return result;
}

uint64_t sub_21684CD30(unsigned __int8 *a1, char *__dst, int a3, int a4, uint64_t a5)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!a4)
  {
    if (a3 == 1)
    {
      if (*a1) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 0;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v6 = (unsigned __int16 *)&a1[a3];
  unint64_t v7 = &__dst[a4];
  unsigned int v8 = &__dst[-a5];
  unint64_t v9 = (unint64_t)v6 - 15;
  unint64_t v10 = v7 - 12;
  uint64_t v11 = v7 - 7;
  int v12 = a1;
  unint64_t v13 = __dst;
  while (1)
  {
    while (1)
    {
      unint64_t v15 = v12 + 1;
      unint64_t v14 = *v12;
      size_t v16 = v14 >> 4;
      if ((v14 >> 4) == 15) {
        break;
      }
      if (v15 >= (_OWORD *)v6 - 1 || v13 > v7 - 32)
      {
        ++v12;
        goto LABEL_12;
      }
      *(_OWORD *)unint64_t v13 = *v15;
      int v21 = &v13[v16];
      unint64_t v29 = v14 & 0xF;
      int v12 = (unsigned __int8 *)v15 + v16 + 2;
      unint64_t v25 = *(unsigned __int16 *)((char *)v15 + v16);
      unint64_t v28 = (unint64_t)&v21[-v25];
      if (v29 == 15 || v25 < 8 || v28 < (unint64_t)v8)
      {
        uint64_t v26 = v12;
        goto LABEL_28;
      }
      *(void *)int v21 = *(void *)v28;
      *((void *)v21 + 1) = *(void *)(v28 + 8);
      *((_WORD *)v21 + 8) = *(_WORD *)(v28 + 16);
      unint64_t v13 = &v21[v29 + 4];
    }
    if ((unint64_t)v15 >= v9)
    {
      LODWORD(v12) = v12 + 1;
      return (~v12 + a1);
    }
    LODWORD(v17) = 0;
    uint64_t v18 = (uint64_t)(v12 + 2);
    ++v12;
    do
    {
      int v20 = *v12++;
      int v19 = v20;
      uint64_t v17 = (v17 + v20);
      ++v18;
    }
    while ((unint64_t)v12 < v9 && v19 == 255);
    size_t v16 = v17 + 15;
    if (__CFADD__(v13, v16) || v16 > -v18) {
      return (~v12 + a1);
    }
LABEL_12:
    int v21 = &v13[v16];
    int v22 = (unsigned __int16 *)&v12[v16];
    if (&v13[v16] > v10 || v22 > v6 - 4) {
      break;
    }
    do
    {
      uint64_t v24 = *(void *)v12;
      v12 += 8;
      *(void *)unint64_t v13 = v24;
      v13 += 8;
    }
    while (v13 < v21);
    unsigned int v27 = *v22;
    uint64_t v26 = (unsigned __int8 *)(v22 + 1);
    unint64_t v25 = v27;
    unint64_t v28 = (unint64_t)&v21[-v27];
    unint64_t v29 = v14 & 0xF;
LABEL_28:
    if (v29 == 15)
    {
      LODWORD(v32) = 0;
      while (1)
      {
        int v12 = v26 + 1;
        if (v26 + 1 >= (unsigned __int8 *)v6 - 4) {
          return (~v12 + a1);
        }
        int v33 = *v26;
        uint64_t v32 = (v32 + v33);
        ++v26;
        if (v33 != 255)
        {
          unint64_t v29 = v32 + 15;
          if (__CFADD__(v21, v29)) {
            return (~v12 + a1);
          }
          goto LABEL_36;
        }
      }
    }
    int v12 = v26;
LABEL_36:
    if (v28 < (unint64_t)v8) {
      return (~v12 + a1);
    }
    if (v25 <= 7)
    {
      *(_DWORD *)int v21 = 0;
      *int v21 = *(unsigned char *)v28;
      v21[1] = *(unsigned char *)(v28 + 1);
      v21[2] = *(unsigned char *)(v28 + 2);
      v21[3] = *(unsigned char *)(v28 + 3);
      int v40 = (_DWORD *)(v28 + dword_21740C7D8[v25]);
      *((_DWORD *)v21 + 1) = *v40;
      unint64_t v34 = (char *)v40 - dword_21740C7F8[v25];
    }
    else
    {
      uint64_t v35 = *(void *)v28;
      unint64_t v34 = (char *)(v28 + 8);
      *(void *)int v21 = v35;
    }
    unint64_t v13 = &v21[v29 + 4];
    unsigned int v36 = v21 + 8;
    if (v13 > v10)
    {
      if (v13 > v7 - 5) {
        return (~v12 + a1);
      }
      if (v36 < v11)
      {
        uint64_t v41 = v21 + 8;
        int v42 = (uint64_t *)v34;
        do
        {
          uint64_t v43 = *v42++;
          *(void *)uint64_t v41 = v43;
          v41 += 8;
        }
        while (v41 < v11);
        v34 += v11 - v36;
        unsigned int v36 = v7 - 7;
      }
      while (v36 < v13)
      {
        char v44 = *v34++;
        *v36++ = v44;
      }
    }
    else
    {
      *(void *)unsigned int v36 = *(void *)v34;
      if (v29 >= 0xD)
      {
        unint64_t v37 = v21 + 16;
        unint64_t v38 = (uint64_t *)(v34 + 8);
        do
        {
          uint64_t v39 = *v38++;
          *(void *)unint64_t v37 = v39;
          v37 += 8;
        }
        while (v37 < v13);
      }
    }
  }
  if (v22 == v6 && v21 <= v7)
  {
    memmove(v13, v12, v16);
    return (v21 - __dst);
  }
  return (~v12 + a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_fast_continue(void *a1, pxrInternal__aapl__pxrReserved__::pxr_lz4 *__src, char *__dst, char *a4)
{
  int v4 = (int)a4;
  int v5 = __dst;
  unint64_t v7 = a1[3];
  if (!v7)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_fast(__src, __dst, a4);
    if ((int)result < 1) {
      return result;
    }
    uint64_t v10 = v4;
LABEL_7:
    a1[2] = (char *)v5 + v4;
    a1[3] = v10;
    return result;
  }
  unsigned int v8 = (char *)a1[2];
  if (v8 != __dst)
  {
    *a1 = &v8[-v7];
    a1[1] = v7;
    uint64_t result = sub_21684D428((unsigned __int8 *)__src, __dst, (int)a4, (uint64_t)&v8[-v7], v7);
    if ((int)result < 1) {
      return result;
    }
    uint64_t v10 = v4;
    goto LABEL_7;
  }
  if (v7 > 0xFFFE || (uint64_t v11 = a1[1]) == 0)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_fast(__src, __dst, a4);
    goto LABEL_68;
  }
  if (!__src) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = *a1 + v11;
  if (!*a1) {
    uint64_t v12 = 0;
  }
  uint64_t v59 = v12;
  if (a4)
  {
    int v57 = (int)__src;
    int v58 = (int)a4;
    unint64_t v13 = &__dst[(int)a4];
    unint64_t v14 = &__dst[-v7];
    unint64_t v15 = v13 - 26;
    char v60 = v13 - 12;
    uint64_t v55 = v13 - 7;
    unint64_t v56 = v13;
    int v61 = v13 - 5;
    unint64_t v62 = v13 - 8;
    size_t v16 = __src;
    while (1)
    {
      unsigned int v18 = *(unsigned __int8 *)v16;
      size_t v16 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v16 + 1);
      char v17 = v18;
      size_t v19 = (unint64_t)v18 >> 4;
      if (v18 > 0x8FuLL || v5 > (void *)v15) {
        break;
      }
      void *v5 = *(void *)v16;
      unint64_t v23 = (void *)((char *)v5 + v19);
      unint64_t v31 = (unsigned __int16 *)((char *)v16 + v19);
      unint64_t v30 = v17 & 0xF;
      unsigned int v32 = *v31;
      size_t v16 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v31 + 1);
      unint64_t v27 = v32;
      unint64_t v29 = (unint64_t)v5 + v19 - v32;
      if (v30 != 15 && v27 >= 8 && v29 >= (unint64_t)v14)
      {
        *unint64_t v23 = *(void *)v29;
        v23[1] = *(void *)(v29 + 8);
        *((_WORD *)v23 + 8) = *(_WORD *)(v29 + 16);
        int v5 = (void *)((char *)v23 + v30 + 4);
      }
      else
      {
LABEL_35:
        if (v30 == 15)
        {
          LODWORD(v35) = 0;
          do
          {
            int v36 = *(unsigned __int8 *)v16;
            size_t v16 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v16 + 1);
            uint64_t v35 = (v35 + v36);
          }
          while (v36 == 255);
          unint64_t v30 = v35 + 15;
        }
        size_t v37 = v30 + 4;
        unint64_t v38 = (char *)v23 + v30 + 4;
        if (v29 >= (unint64_t)v14)
        {
          if (v27 <= 7)
          {
            *(_DWORD *)unint64_t v23 = 0;
            *(unsigned char *)unint64_t v23 = *(unsigned char *)v29;
            *((unsigned char *)v23 + 1) = *(unsigned char *)(v29 + 1);
            *((unsigned char *)v23 + 2) = *(unsigned char *)(v29 + 2);
            *((unsigned char *)v23 + 3) = *(unsigned char *)(v29 + 3);
            char v49 = (_DWORD *)(v29 + dword_21740C7D8[v27]);
            *((_DWORD *)v23 + 1) = *v49;
            uint64_t v43 = (char *)v49 - dword_21740C7F8[v27];
          }
          else
          {
            uint64_t v44 = *(void *)v29;
            uint64_t v43 = (char *)(v29 + 8);
            *unint64_t v23 = v44;
          }
          unint64_t v45 = v23 + 1;
          if (v38 > v60)
          {
            if (v38 > v61) {
              goto LABEL_73;
            }
            if (v45 < (void *)v55)
            {
              int v50 = (char *)(v23 + 1);
              uint64_t v51 = (uint64_t *)v43;
              do
              {
                uint64_t v52 = *v51++;
                *(void *)int v50 = v52;
                v50 += 8;
              }
              while (v50 < v55);
              v43 += v55 - (char *)v45;
              unint64_t v45 = v55;
            }
            int v5 = v38;
            if (v45 < (void *)v38)
            {
              do
              {
                char v53 = *v43++;
                *(unsigned char *)unint64_t v45 = v53;
                unint64_t v45 = (void *)((char *)v45 + 1);
              }
              while (v45 < (void *)v38);
LABEL_57:
              int v5 = v38;
            }
          }
          else
          {
            void *v45 = *(void *)v43;
            int v5 = (void *)((char *)v23 + v30 + 4);
            if (v30 >= 0xD)
            {
              int64_t v46 = (char *)(v23 + 2);
              size_t v47 = (uint64_t *)(v43 + 8);
              do
              {
                uint64_t v48 = *v47++;
                *(void *)int64_t v46 = v48;
                v46 += 8;
              }
              while (v46 < v38);
              goto LABEL_57;
            }
          }
        }
        else
        {
          if (v38 > v61) {
            goto LABEL_73;
          }
          int64_t v39 = (int64_t)&v14[-v29];
          size_t v40 = v37 - (void)&v14[-v29];
          if (v37 <= (unint64_t)&v14[-v29])
          {
            memmove(v23, (const void *)(v59 - v39), v37);
            goto LABEL_57;
          }
          memcpy(v23, (const void *)(v59 - v39), v39);
          int v5 = (void *)((char *)v23 + v39);
          if (v40 <= (char *)v23 + v39 - v14)
          {
            memcpy((char *)v23 + v39, v14, v40);
            goto LABEL_57;
          }
          if ((uint64_t)v37 > v39)
          {
            uint64_t v41 = v14;
            do
            {
              char v42 = *v41++;
              *(unsigned char *)int v5 = v42;
              int v5 = (void *)((char *)v5 + 1);
            }
            while (v5 < (void *)v38);
          }
        }
      }
    }
    if (v19 == 15)
    {
      LODWORD(v21) = 0;
      do
      {
        int v22 = *(unsigned __int8 *)v16;
        size_t v16 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v16 + 1);
        uint64_t v21 = (v21 + v22);
      }
      while (v22 == 255);
      size_t v19 = v21 + 15;
    }
    unint64_t v23 = (void *)((char *)v5 + v19);
    if ((char *)v5 + v19 > v62)
    {
      if (v23 != (void *)v56)
      {
LABEL_73:
        int v4 = v58;
        uint64_t result = (~v16 + v57);
        goto LABEL_68;
      }
      memmove(v5, v16, v19);
      int v4 = v58;
      uint64_t result = (v16 + v19 - v57);
LABEL_68:
      if ((int)result >= 1)
      {
        int v5 = (void *)a1[2];
        unint64_t v7 = a1[3];
        uint64_t v54 = v4;
        goto LABEL_70;
      }
      return result;
    }
    uint64_t v24 = v16;
    do
    {
      uint64_t v25 = *(void *)v24;
      uint64_t v24 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v24 + 8);
      *v5++ = v25;
    }
    while (v5 < v23);
    uint64_t v26 = (unsigned __int16 *)((char *)v16 + v19);
    unsigned int v28 = *v26;
    size_t v16 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v26 + 1);
    unint64_t v27 = v28;
    unint64_t v29 = (unint64_t)v23 - v28;
    unint64_t v30 = v17 & 0xF;
    goto LABEL_35;
  }
  if (*(unsigned char *)__src) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v54 = 0;
  uint64_t result = 1;
LABEL_70:
  a1[2] = (char *)v5 + v54;
  a1[3] = v7 + v54;
  return result;
}

uint64_t sub_21684D428(unsigned __int8 *__src, char *__dst, int a3, uint64_t a4, uint64_t a5)
{
  if (!__src) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = a4 + a5;
  if (!a4) {
    uint64_t v5 = 0;
  }
  uint64_t v54 = v5;
  if (!a3)
  {
    if (*__src) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  unint64_t v7 = &__dst[a3];
  unsigned int v8 = v7 - 8;
  unint64_t v9 = v7 - 26;
  uint64_t v55 = v7 - 12;
  uint64_t v51 = v7 - 7;
  uint64_t v52 = v7;
  uint64_t v10 = v7 - 5;
  int v53 = (int)__src;
  uint64_t v11 = __src;
  uint64_t v12 = __dst;
  while (1)
  {
    while (1)
    {
      unsigned int v14 = *v11++;
      char v13 = v14;
      size_t v15 = (unint64_t)v14 >> 4;
      if (v14 > 0x8FuLL || v12 > v9) {
        break;
      }
      *(void *)uint64_t v12 = *(void *)v11;
      size_t v19 = &v12[v15];
      unint64_t v27 = &v11[v15];
      unint64_t v26 = v13 & 0xF;
      unsigned int v28 = *(unsigned __int16 *)v27;
      uint64_t v11 = v27 + 2;
      unint64_t v23 = v28;
      unint64_t v25 = (unint64_t)&v12[v15 - v28];
      if (v26 == 15 || v23 < 8 || v25 < (unint64_t)__dst) {
        goto LABEL_26;
      }
      *(void *)size_t v19 = *(void *)v25;
      *((void *)v19 + 1) = *(void *)(v25 + 8);
      *((_WORD *)v19 + 8) = *(_WORD *)(v25 + 16);
      uint64_t v12 = &v19[v26 + 4];
    }
    if (v15 == 15)
    {
      LODWORD(v17) = 0;
      do
      {
        int v18 = *v11++;
        uint64_t v17 = (v17 + v18);
      }
      while (v18 == 255);
      size_t v15 = v17 + 15;
    }
    size_t v19 = &v12[v15];
    if (&v12[v15] > v8) {
      break;
    }
    int v20 = (uint64_t *)v11;
    do
    {
      uint64_t v21 = *v20++;
      *(void *)uint64_t v12 = v21;
      v12 += 8;
    }
    while (v12 < v19);
    int v22 = &v11[v15];
    unsigned int v24 = *(unsigned __int16 *)v22;
    uint64_t v11 = v22 + 2;
    unint64_t v23 = v24;
    unint64_t v25 = (unint64_t)&v19[-v24];
    unint64_t v26 = v13 & 0xF;
LABEL_26:
    if (v26 == 15)
    {
      LODWORD(v31) = 0;
      do
      {
        int v32 = *v11++;
        uint64_t v31 = (v31 + v32);
      }
      while (v32 == 255);
      unint64_t v26 = v31 + 15;
    }
    int v33 = (char *)(v26 + 4);
    unint64_t v34 = &v19[v26 + 4];
    if (v25 >= (unint64_t)__dst)
    {
      if (v23 <= 7)
      {
        *(_DWORD *)size_t v19 = 0;
        *size_t v19 = *(unsigned char *)v25;
        v19[1] = *(unsigned char *)(v25 + 1);
        v19[2] = *(unsigned char *)(v25 + 2);
        v19[3] = *(unsigned char *)(v25 + 3);
        unint64_t v45 = (_DWORD *)(v25 + dword_21740C7D8[v23]);
        *((_DWORD *)v19 + 1) = *v45;
        int64_t v39 = (char *)v45 - dword_21740C7F8[v23];
      }
      else
      {
        uint64_t v40 = *(void *)v25;
        int64_t v39 = (char *)(v25 + 8);
        *(void *)size_t v19 = v40;
      }
      uint64_t v41 = v19 + 8;
      if (v34 > v55)
      {
        if (v34 > v10) {
          return (~v11 + v53);
        }
        if (v41 < v51)
        {
          int64_t v46 = v19 + 8;
          size_t v47 = (uint64_t *)v39;
          do
          {
            uint64_t v48 = *v47++;
            *(void *)int64_t v46 = v48;
            v46 += 8;
          }
          while (v46 < v51);
          v39 += v51 - v41;
          uint64_t v41 = v51;
        }
        uint64_t v12 = v34;
        if (v41 < v34)
        {
          do
          {
            char v49 = *v39++;
            *v41++ = v49;
          }
          while (v41 < v34);
LABEL_48:
          uint64_t v12 = v34;
        }
      }
      else
      {
        *(void *)uint64_t v41 = *(void *)v39;
        uint64_t v12 = &v19[v26 + 4];
        if (v26 >= 0xD)
        {
          char v42 = v19 + 16;
          uint64_t v43 = (uint64_t *)(v39 + 8);
          do
          {
            uint64_t v44 = *v43++;
            *(void *)char v42 = v44;
            v42 += 8;
          }
          while (v42 < v34);
          goto LABEL_48;
        }
      }
    }
    else
    {
      if (v34 > v10) {
        return (~v11 + v53);
      }
      uint64_t v35 = &__dst[-v25];
      size_t v36 = v33 - &__dst[-v25];
      if (v33 <= &__dst[-v25])
      {
        memmove(v19, (const void *)(v54 - (void)v35), v26 + 4);
        goto LABEL_48;
      }
      memcpy(v19, (const void *)(v54 - (void)v35), (size_t)v35);
      uint64_t v12 = &v35[(void)v19];
      if (v36 <= &v35[(void)v19] - __dst)
      {
        memcpy(v12, __dst, v36);
        goto LABEL_48;
      }
      if ((uint64_t)v33 > (uint64_t)v35)
      {
        size_t v37 = __dst;
        do
        {
          char v38 = *v37++;
          *v12++ = v38;
        }
        while (v12 < v34);
      }
    }
  }
  if (v19 != v52) {
    return (~v11 + v53);
  }
  memmove(v12, v11, v15);
  return (v11 + v15 - v53);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_usingDict(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *a2, char *a3, int a4, uint64_t a5, const char *a6)
{
  if (!a6) {
    return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe(this, a2, a3, a4);
  }
  if ((char *)(a5 + (int)a6) != a2) {
    return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_forceExtDict(this, a2, a3, a4, a5, (int)a6);
  }
  if ((int)a6 < 0xFFFF) {
    return sub_21684CD30((unsigned __int8 *)this, a2, (int)a3, a4, (int)a6);
  }
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_withPrefix64k(this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_fast_usingDict(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *a2, char *a3, uint64_t a4, const char *a5)
{
  if (!a5 || (char *)(a4 + (int)a5) == a2) {
    return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_fast(this, a2, a3);
  }
  else {
    return sub_21684D428((unsigned __int8 *)this, a2, (int)a3, a4, (int)a5);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_limitedOutput(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3)
{
  int v3 = (char *)MEMORY[0x270FA5388](this, a2, a3);
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)&v8, v3, v4, v5, v6, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3)
{
  int v3 = (char *)MEMORY[0x270FA5388](this, a2, a3);
  if (v5 <= 0x7E000000) {
    signed int v6 = v5 + v5 / 0xFF + 16;
  }
  else {
    signed int v6 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)&v8, v3, v4, v5, v6, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_limitedOutput_withState(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *a2, char *a3, char *a4, signed int a5)
{
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState(this, a2, a3, a4, a5, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_withState(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *a2, char *a3, char *a4)
{
  if (a4 <= 0x7E000000) {
    signed int v4 = a4 + a4 / 0xFF + 16;
  }
  else {
    signed int v4 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState(this, a2, a3, a4, v4, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_limitedOutput_continue(uint64_t a1, char *a2, unsigned char *a3, int a4, int a5)
{
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_continue(a1, a2, a3, a4, a5, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_continue(uint64_t a1, char *a2, unsigned char *a3, unsigned int a4)
{
  if (a4 <= 0x7E000000) {
    int v4 = a4 + a4 / 0xFF + 16;
  }
  else {
    int v4 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_continue(a1, a2, a3, a4, v4, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_sizeofStreamState(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  return 16416;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_resetStreamState(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, void *a2, char *a3)
{
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_create(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *a2)
{
  unsigned int v2 = malloc(0x4020uLL);
  int v3 = v2;
  if (v2 && (v2 & 7) == 0) {
    bzero(v2, 0x4020uLL);
  }
  return v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_slideInputBuffer(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, void *a2)
{
  return *((void *)this + 2049);
}

void sub_21684D97C()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::TF_REQUIRE_FILESYSTEM_WRITE_PERMISSION)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Tf_AtomicRenameFileOver(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, uint64_t a3)
{
  int v4 = a2;
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    signed int v6 = (const char *)a2;
  }
  else {
    signed int v6 = (const char *)a2->__pn_.__r_.__value_.__r.__words[0];
  }
  if (stat(v6, &v30) == -1)
  {
    mode_t v8 = umask(0);
    umask(v8);
    mode_t v7 = 438 - v8;
  }
  else
  {
    mode_t v7 = v30.st_mode & 0x1B6;
  }
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v9 = (const char *)a1;
  }
  else {
    unint64_t v9 = (const char *)a1->__pn_.__r_.__value_.__r.__words[0];
  }
  if (chmod(v9, v7))
  {
    *(void *)&long long v26 = "tf/atomicRenameUtil.cpp";
    *((void *)&v26 + 1) = "Tf_AtomicRenameFileOver";
    uint64_t v27 = 107;
    unsigned int v28 = "BOOL pxrInternal__aapl__pxrReserved__::Tf_AtomicRenameFileOver(const std::string &, const std::string &, std::string *)";
    char v29 = 0;
    uint64_t v11 = (a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (uint64_t)a1
        : a1->__pn_.__r_.__value_.__r.__words[0];
    uint64_t v12 = __error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v12, __p);
    unsigned int v14 = v25 >= 0 ? __p : (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__ *)"Unable to set permissions for temporary file '%s': %s", v13, v11, v14);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v15 = a1;
  }
  else {
    size_t v15 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  }
  if ((v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v16 = v4;
  }
  else {
    size_t v16 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
  }
  rename(v15, v16, v10);
  int v18 = v17;
  if (v17)
  {
    if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
    }
    if ((v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v4 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
    }
    size_t v19 = __error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v19, __p);
    if (v25 >= 0) {
      int v22 = __p;
    }
    else {
      int v22 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to rename temporary file '%s' to '%s': %s", v20, v21, a1, v4, v22);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v26;
    *(void *)(a3 + 16) = v27;
    HIBYTE(v27) = 0;
    LOBYTE(v26) = 0;
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  return v18 == 0;
}

void sub_21684DBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_CreateSiblingTempFile(std::string *this, std::string *a2, std::string *a3, uint64_t a4)
{
  mode_t v7 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      goto LABEL_3;
    }
LABEL_10:
    MEMORY[0x21D4477E0](a4, "Empty fileName");
    return 0xFFFFFFFFLL;
  }
  if (!this->__r_.__value_.__l.__size_) {
    goto LABEL_10;
  }
LABEL_3:
  v39[0] = 0;
  v39[1] = 0;
  uint64_t v40 = 0;
  pxrInternal__aapl__pxrReserved__::TfRealPath(this, 1, (uint64_t)v39, &__str);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0) {
      mode_t v7 = (std::string *)v7->__r_.__value_.__r.__words[0];
    }
    char v13 = v39;
    if (v40 < 0) {
      char v13 = (void **)v39[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unable to determine the real path for '%s': %s", v8, v9, v7, v13);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = v36;
    *(void *)(a4 + 16) = v37;
    uint64_t TmpFile = 0xFFFFFFFFLL;
    goto LABEL_38;
  }
  TemporaryDirectoryAppropriateForURLPath = (char *)__DarwinGetTemporaryDirectoryAppropriateForURLPath((uint64_t *)&__str, a4);
  sub_216779094(&v36, TemporaryDirectoryAppropriateForURLPath);
  if (*(char *)(a4 + 23) < 0)
  {
    if (!*(void *)(a4 + 8)) {
      goto LABEL_19;
    }
  }
  else if (!*(unsigned char *)(a4 + 23))
  {
LABEL_19:
    uint64_t v14 = HIBYTE(v37);
    if (v37 < 0) {
      uint64_t v14 = *((void *)&v36 + 1);
    }
    if (!v14) {
      goto LABEL_35;
    }
    size_t v15 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::TF_REQUIRE_FILESYSTEM_WRITE_PERMISSION);
    if (!v15) {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
    }
    if (*v15)
    {
      if (v37 >= 0) {
        size_t v16 = (const char *)&v36;
      }
      else {
        size_t v16 = (const char *)v36;
      }
      if (access(v16, 2))
      {
        if (v37 >= 0) {
          size_t v19 = &v36;
        }
        else {
          size_t v19 = (long long *)v36;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Insufficient permissions to write to destination directory '%s'", v17, v18, v19);
LABEL_32:
        if (*(char *)(a4 + 23) < 0) {
          operator delete(*(void **)a4);
        }
        *(std::string *)a4 = v35;
        goto LABEL_35;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (access((const char *)p_str, 2) && *__error() != 2)
      {
        char v29 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v29 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Insufficient permissions to write to destination file '%s'", v22, v23, v29);
        goto LABEL_32;
      }
    }
    pxrInternal__aapl__pxrReserved__::TfGetBaseName(&__str, &__p);
    pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix((uint64_t)&__p, 46, &v35);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    memset(&__p, 0, sizeof(__p));
    uint64_t TmpFile = pxrInternal__aapl__pxrReserved__::ArchMakeTmpFile((uint64_t *)&v36, (const char *)&v35, (char *)&__p);
    if (TmpFile == -1)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      char v25 = __error();
      pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v25, v30);
      if (v31 >= 0) {
        unsigned int v28 = v30;
      }
      else {
        unsigned int v28 = (void **)v30[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unable to create temporary file '%s': %s", v26, v27, p_p, v28);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(_OWORD *)a4 = v32;
      *(void *)(a4 + 16) = v33;
      HIBYTE(v33) = 0;
      LOBYTE(v32) = 0;
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }
    else
    {
      std::string::operator=(a3, &__p);
      std::string::operator=(a2, &__str);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t TmpFile = 0xFFFFFFFFLL;
LABEL_36:
  if (SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
LABEL_38:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(v39[0]);
  }
  return TmpFile;
}

void sub_21684DF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 81) < 0) {
    operator delete(*(void **)(v32 - 104));
  }
  if (*(char *)(v32 - 57) < 0) {
    operator delete(*(void **)(v32 - 80));
  }
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_21684E008()
{
  sub_216779094(v8, "TF_SCRIPT_MODULE_LOADER");
  std::string __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B470, 5, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v0 = sub_21684E284();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0 + 20, "TF_SCRIPT_MODULE_LOADER", "show script module loading activity");
  sub_216779094(v8, "TF_TYPE_REGISTRY");
  std::string __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B470, 6, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v1 = sub_21684E284();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 24, "TF_TYPE_REGISTRY", "show changes to the TfType registry");
  sub_216779094(v8, "TF_ATTACH_DEBUGGER_ON_ERROR");
  std::string __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B470, 7, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v2 = sub_21684E284();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 28, "TF_ATTACH_DEBUGGER_ON_ERROR", "attach/stop in a debugger for all errors");
  sub_216779094(v8, "TF_ATTACH_DEBUGGER_ON_FATAL_ERROR");
  std::string __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B470, 8, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v3 = sub_21684E284();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 32, "TF_ATTACH_DEBUGGER_ON_FATAL_ERROR", "attach/stop in a debugger for fatal errors");
  sub_216779094(v8, "TF_ATTACH_DEBUGGER_ON_WARNING");
  std::string __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B470, 9, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v4 = sub_21684E284();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v4 + 36, "TF_ATTACH_DEBUGGER_ON_WARNING", "attach/stop in a debugger for all warnings");
}

void sub_21684E248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21684E284()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798AFB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798AFB8))
  {
    uint64_t v1 = operator new(0x28uLL);
    v1[4] = 0;
    *(_OWORD *)uint64_t v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;
    qword_26798AFB0 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798AFB8);
  }
  return qword_26798AFB0;
}

void sub_21684E2F0(_Unwind_Exception *a1)
{
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000021740C95ALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  uint64_t v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      char v9 = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)operator new(0x118uLL);
      pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::Tf_NoticeRegistry(v9);
      unint64_t v11 = atomic_load(a1);
      if (v11)
      {
        if (v9 != (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)v11)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          int v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegis"
                "try>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v10);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        int v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistr"
              "y>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v10, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v5;
}

void sub_21684E4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistr"
            "y>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

unint64_t sub_21684E5D4(unint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a2)
  {
    if (a2 == result)
    {
      return a2 + 1;
    }
    else
    {
      long long v3 = (unsigned __int8 *)(a2 - 1);
      if (a2 - 1 > result)
      {
        while (*v3 != a3)
        {
          if (--v3 == (unsigned __int8 *)result) {
            goto LABEL_10;
          }
        }
        unint64_t result = (unint64_t)v3;
      }
LABEL_10:
      ++result;
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::DeleteInstance()
{
  for (uint64_t i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
        i;
        uint64_t i = v1)
  {
    uint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance, (unint64_t *)&v1, 0);
    if (v1 == i)
    {
      sub_216850CD0((void *)(i + 184));
      sub_2168501D8(i + 128);
      sub_216850298(i + 80);
      long long v3 = (void **)(i + 48);
      sub_216850BF4(&v3);
      uint64_t v2 = (void *)sub_216850320(i);
      operator delete(v2);
      return;
    }
    sched_yield();
  }
}

uint64_t sub_21684E6B8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2 - 1;
  if (v2)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(*(void *)a1);
      int v3 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v3 - 1;
    }
    while (v3);
  }
  *(void *)a1 = 0;
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::Tf_NoticeRegistry(pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((_WORD *)this + 20) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(void *)((char *)this + 44) = 0;
  *(void *)((char *)this + 60) = 0;
  *(void *)((char *)this + 52) = 0;
  *(void *)((char *)this + 65) = 0;
  *((_DWORD *)this + 28) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((unsigned char *)this + 120) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *((unsigned char *)this + 168) = 0;
  *((void *)this + 22) = 0;
  sub_216851130((void *)this + 23);
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance, (unint64_t)this))
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistr"
            "y>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v2);
  }
  return this;
}

void sub_21684E7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  sub_216850CD0(v19);
  sub_2168501D8(v18);
  sub_216850298(v17);
  a16 = (void **)(v16 + 48);
  sub_216850BF4(&a16);
  sub_216850320(v16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_VerifyFailedCast(pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *this, const std::type_info *a2, const pxrInternal__aapl__pxrReserved__::TfNotice *a3, const pxrInternal__aapl__pxrReserved__::TfNotice *a4)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(*(void *)(*(void *)a3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v25);
  if (!a4)
  {
    int v19 = "tf/noticeRegistry.cpp";
    int v20 = "_VerifyFailedCast";
    uint64_t v21 = 102;
    int v22 = "void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_VerifyFailedCast(const type_info &, const TfNotice "
          "&, const TfNotice *)";
    char v23 = 0;
    int v24 = 4;
    int v8 = v26;
    char v9 = (void **)v25[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(a2->__type_name & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    unint64_t v11 = v25;
    if (v8 >= 0) {
      std::string v12 = v25;
    }
    else {
      std::string v12 = v9;
    }
    if (v18 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    if (v26 < 0) {
      unint64_t v11 = (void **)v25[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v19, (pxrInternal__aapl__pxrReserved__ *)"All attempts to cast notice of type '%s' to type '%s' failed.  One possibility is that '%s' has no non-inlined virtual functions and this system's C++ ABI is non-standard.  Verify that class '%s'has at least one non-inline virtual function.\n", v10, v12, v13, v11, v11);
  }
  sub_21685036C((uint64_t)&v19, (uint64_t)this + 72);
  if (sub_2168512B4((void *)this + 10, (unsigned __int8 *)v25))
  {
    uint64_t v7 = v19;
    if (v19)
    {
      __dmb(0xBu);
      *uint64_t v7 = 0;
    }
  }
  else
  {
    sub_2168514A0((uint64_t)this + 80, (unsigned __int8 *)v25, (uint64_t)v25);
    size_t v15 = v19;
    if (v19)
    {
      __dmb(0xBu);
      *size_t v15 = 0;
    }
    int v19 = "tf/noticeRegistry.cpp";
    int v20 = "_VerifyFailedCast";
    uint64_t v21 = 94;
    int v22 = "void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_VerifyFailedCast(const type_info &, const TfNotice "
          "&, const TfNotice *)";
    char v23 = 0;
    uint64_t v16 = v25;
    if (v26 < 0) {
      uint64_t v16 = (void **)v25[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v19, (pxrInternal__aapl__pxrReserved__ *)"Special handling of notice type '%s' invoked.\nMost likely, this class is missing a non-inlined virtual destructor.\nPlease request that someone modify class '%s' accordingly.", v14, v16, v16);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
}

void sub_21684E9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (*(char *)(v19 - 33) < 0) {
    operator delete(*(void **)(v19 - 56));
  }
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_InsertProbe(uint64_t a1, void *a2)
{
  sub_21685036C((uint64_t)&v7, a1 + 120);
  unint64_t result = (unint64_t)sub_21684EAD8(a2);
  if (v5 & 1 | result) {
    unint64_t result = (unint64_t)sub_216851894(a1 + 128, (uint64_t)a2, a2);
  }
  *(unsigned char *)(a1 + 168) = *(void *)(a1 + 152) != 0;
  int v6 = v7;
  if (v7)
  {
    __dmb(0xBu);
    *int v6 = 0;
  }
  return result;
}

void sub_21684EAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t (*sub_21684EAD8(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  int v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return sub_216851850;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_RemoveProbe(uint64_t a1, uint64_t a2)
{
  sub_21685036C((uint64_t)&v6, a1 + 120);
  unint64_t result = sub_216851C10((void *)(a1 + 128), a2);
  *(unsigned char *)(a1 + 168) = *(void *)(a1 + 152) != 0;
  BOOL v5 = v6;
  if (v6)
  {
    __dmb(0xBu);
    unsigned char *v5 = 0;
  }
  return result;
}

void sub_21684EB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BeginSend(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a5[1];
  uint64_t v15 = *a5;
  uint64_t v16 = v5;
  while (v15 != v16)
  {
    char v9 = (void *)sub_21684EC60(&v15, a2, a3);
    uint64_t v10 = sub_21684EAD8(v9);
    if (v11 & 1 | (unint64_t)v10)
    {
      uint64_t v13 = (uint64_t *)sub_21684EC60(&v15, v11, v12);
      uint64_t v14 = sub_21684ECE0(v13);
      (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v14 + 16))(v14, a2, a3, a4);
    }
    sub_21684ED88(&v15);
  }
}

uint64_t sub_21684EC60(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>>>::operator*() [T = const std::vector<pxrInterna"
            "l__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_21684ECD8()
{
}

uint64_t sub_21684ECE0(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  int v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (BOOL v6 = result == 0) : (BOOL v6 = 1), v6))
  {
    int v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::TfNotice::Probe>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrRes"
            "erved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::TfNotice::Probe]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000021740CA41 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void *sub_21684ED88(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>>>::operator++() [T = const std::ve"
            "ctor<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((int)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_EndSend(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v11 = *a2;
  uint64_t v12 = v4;
  while (v3 != v4)
  {
    uint64_t v5 = (void *)sub_21684EC60(&v11, (uint64_t)a2, a3);
    BOOL v6 = sub_21684EAD8(v5);
    if (v7 & 1 | (unint64_t)v6)
    {
      char v9 = (uint64_t *)sub_21684EC60(&v11, v7, v8);
      uint64_t v10 = sub_21684ECE0(v9);
      (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
    }
    sub_21684ED88(&v11);
    uint64_t v3 = v11;
    uint64_t v4 = v12;
  }
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BeginDelivery(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7 = a7[1];
  uint64_t v19 = *a7;
  uint64_t v20 = v7;
  while (v19 != v20)
  {
    uint64_t v13 = (void *)sub_21684EC60(&v19, a2, a3);
    uint64_t v14 = sub_21684EAD8(v13);
    if (v15 & 1 | (unint64_t)v14)
    {
      uint64_t v17 = (uint64_t *)sub_21684EC60(&v19, v15, v16);
      uint64_t v18 = sub_21684ECE0(v17);
      (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, a2, a3, a4, a5, a6);
    }
    sub_21684ED88(&v19);
  }
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_EndDelivery(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v11 = *a2;
  uint64_t v12 = v4;
  while (v3 != v4)
  {
    uint64_t v5 = (void *)sub_21684EC60(&v11, (uint64_t)a2, a3);
    BOOL v6 = sub_21684EAD8(v5);
    if (v7 & 1 | (unint64_t)v6)
    {
      char v9 = (uint64_t *)sub_21684EC60(&v11, v7, v8);
      uint64_t v10 = sub_21684ECE0(v9);
      (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    }
    sub_21684ED88(&v11);
    uint64_t v3 = v11;
    uint64_t v4 = v12;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Register@<X0>(pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *this@<X0>, pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *a2@<X1>, char **a3@<X8>)
{
  sub_216851EE4((uint64_t)&v22, "Tf", "Tf_NoticeRegistry::_Register");
  uint64_t v6 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *))(*(void *)a2 + 24))(a2);
  uint64_t v21 = v6;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v15);
  if (v15 == (char *)v6)
  {
    uint64_t v15 = "tf/noticeRegistry.cpp";
    uint64_t v16 = "_Register";
    uint64_t v17 = 181;
    uint64_t v18 = "TfNotice::Key pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Register(TfNotice::_DelivererBase *)";
    char v19 = 0;
    int v20 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v15, (pxrInternal__aapl__pxrReserved__ *)"notice type is undefined in the TfType system", v7);
  }
  sub_21685036C((uint64_t)&v15, (uint64_t)this + 41);
  ++*((_DWORD *)this + 11);
  int v8 = v15;
  if (v15)
  {
    __dmb(0xBu);
    *int v8 = 0;
  }
  char v9 = sub_21684F1FC(this, &v21);
  uint64_t v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *))(*(void *)a2 + 40))(a2);
  sub_21684F2C8((uint64_t)this, (uint64_t)v9, v10, (uint64_t)a2);
  sub_21685036C((uint64_t)&v15, (uint64_t)this + 41);
  --*((_DWORD *)this + 11);
  uint64_t v11 = v15;
  if (v15)
  {
    __dmb(0xBu);
    *uint64_t v11 = 0;
  }
  uint64_t result = (uint64_t)sub_216851F58(&v15, (uint64_t)a2);
  uint64_t v13 = v16;
  *a3 = v15;
  a3[1] = (char *)v13;
  if (v13)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)v13 + 2, 1u, memory_order_relaxed);
    uint64_t result = (uint64_t)v16;
    if (v16)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)v16 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  while (v23--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v22);
  return result;
}

void sub_21684F1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21684F1FC(void *a1, void *a2)
{
  sub_21685036C((uint64_t)&v8, (uint64_t)(a1 + 5));
  uint64_t v4 = sub_2168503EC(a1, a2);
  if (v4)
  {
    uint64_t v5 = (void *)v4[3];
  }
  else
  {
    uint64_t v5 = operator new(0x48uLL);
    sub_2168504B8((uint64_t)v5);
    char v9 = a2;
    sub_216850618((uint64_t)a1, a2, (uint64_t)&unk_2174BFD90, &v9)[3] = v5;
  }
  uint64_t v6 = v8;
  if (v8)
  {
    __dmb(0xBu);
    *uint64_t v6 = 0;
  }
  return v5;
}

void sub_21684F29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned char *a9)
{
  operator delete(v9);
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void *sub_21684F2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a3;
  sub_21685036C((uint64_t)&v12, a2);
  if (a3)
  {
    uint64_t v14 = &v13;
    uint64_t v7 = sub_216850850(a2 + 32, &v13, (uint64_t)&unk_2174BFD90, &v14) + 3;
  }
  else
  {
    uint64_t v7 = (void *)(a2 + 8);
  }
  *(void *)(a4 + 16) = v7;
  uint64_t result = operator new(0x18uLL);
  result[2] = a4;
  *uint64_t result = v7;
  char v9 = (void *)v7[1];
  result[1] = v9;
  *char v9 = result;
  uint64_t v10 = v7[2] + 1;
  v7[1] = result;
  v7[2] = v10;
  *(void *)(a4 + 24) = result;
  uint64_t v11 = v12;
  if (v12)
  {
    __dmb(0xBu);
    *uint64_t v11 = 0;
  }
  return result;
}

void sub_21684F380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned char *a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a10 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Revoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_21685036C((uint64_t)&v6, a1 + 41);
  if (*(_DWORD *)(a1 + 44)) {
    *(unsigned char *)(sub_21684F4EC(a2) + 32) = 0;
  }
  else {
    pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_FreeDeliverer(v4, a2);
  }
  uint64_t v5 = v6;
  if (v6)
  {
    __dmb(0xBu);
    unsigned char *v5 = 0;
  }
}

void sub_21684F3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_FreeDeliverer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_2168500F0(a2);
  if (v4 & 1 | (unint64_t)v3)
  {
    uint64_t v5 = *(void *)(sub_21684F4EC(a2) + 16);
    uint64_t v6 = *(uint64_t **)(sub_21684F4EC(a2) + 24);
    if (a2[1])
    {
      int v7 = *(unsigned __int8 *)(sub_216850B68(a2 + 1) + 14);
      uint64_t v8 = *a2;
      if (v7 && v8 != 0) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
    }
    uint64_t v10 = *v6;
    *(void *)(v10 + 8) = v6[1];
    *(void *)v6[1] = v10;
    --*(void *)(v5 + 16);
    operator delete(v6);
  }
}

uint64_t sub_21684F4EC(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  int v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (BOOL v6 = result == 0) : (BOOL v6 = 1), v6))
  {
    int v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::TfNotice::_DelivererBase>::operator->() const [PtrTemplate = pxrInternal__aap"
            "l__pxrReserved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000021740C85DLL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Send(pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *this, const pxrInternal__aapl__pxrReserved__::TfNotice *a2, const pxrInternal__aapl__pxrReserved__::TfType *a3, const pxrInternal__aapl__pxrReserved__::TfWeakBase *a4, uint64_t a5, const std::type_info *a6)
{
  if (atomic_load((unint64_t *)this + 22))
  {
    LOBYTE(v43) = 0;
    if (*(void *)sub_2168520EC((atomic_ullong *)this + 23, &v43)) {
      return 0;
    }
  }
  sub_21685036C((uint64_t)&v43, (uint64_t)this + 41);
  ++*((_DWORD *)this + 11);
  uint64_t v14 = v43;
  if (v43)
  {
    __dmb(0xBu);
    *uint64_t v14 = 0;
  }
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  if (*((unsigned char *)this + 168))
  {
    sub_21685036C((uint64_t)v46, (uint64_t)this + 120);
    uint64_t v15 = sub_21684F8E4((uint64_t *)&v43, *((void *)this + 19));
    uint64_t v41 = (void *)*((void *)this + 18);
    char v42 = 0;
    while (v41 != v42)
    {
      uint64_t v18 = (void *)sub_21684F978(&v41, v16, v17);
      char v19 = sub_21684EAD8(v18);
      if (v20 & 1 | (unint64_t)v19)
      {
        uint64_t v22 = (long long *)sub_21684F978(&v41, v20, v21);
        sub_21684F9F8((uint64_t *)&v43, v22);
      }
      uint64_t v15 = sub_21684FB14((uint64_t)&v41);
    }
    BOOL v23 = v43 != v44;
    if (v43 != v44) {
      pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BeginSend(v15, (uint64_t)a2, (char *)a4, (uint64_t)a6, (uint64_t *)&v43);
    }
    int v24 = v46[0];
    if (v46[0])
    {
      __dmb(0xBu);
      *(unsigned char *)int v24 = 0;
    }
  }
  else
  {
    BOOL v23 = 0;
  }
  uint64_t v13 = 0;
  uint64_t v40 = *(void *)a3;
  do
  {
    char v25 = sub_21684FB94(this, &v40);
    if (v25)
    {
      if (a4)
      {
        v46[0] = (void **)sub_21684FE94((uint64_t)this, (uint64_t)v25, (uint64_t)a4);
        v46[1] = v26;
        v13 += (int)pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Deliver((uint64_t *)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)&v43, (uint64_t *)v46);
      }
      sub_21685036C((uint64_t)v46, (uint64_t)v25);
      uint64_t v27 = (void *)v25[2];
      unsigned int v28 = v46[0];
      if (v46[0])
      {
        __dmb(0xBu);
        *(unsigned char *)unsigned int v28 = 0;
      }
      uint64_t v41 = v25 + 1;
      char v42 = v27;
      v13 += (int)pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Deliver((uint64_t *)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)&v43, (uint64_t *)&v41);
    }
    NBaseTypes = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)pxrInternal__aapl__pxrReserved__::TfType::GetNBaseTypes((pxrInternal__aapl__pxrReserved__::TfType *)&v40, (pxrInternal__aapl__pxrReserved__::TfType *)&v40, (char *)1);
    if (NBaseTypes != (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)1) {
      pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BadTypeFatalMsg(NBaseTypes, (const pxrInternal__aapl__pxrReserved__::TfType *)&v40, *(std::type_info **)(*(void *)a2 - 8));
    }
    Root = (void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot(NBaseTypes);
  }
  while (v40 != *Root);
  if (v23) {
    pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_EndSend((uint64_t)Root, (uint64_t *)&v43, v31);
  }
  uint64_t v32 = sub_21685036C((uint64_t)v46, (uint64_t)this + 41);
  int v33 = *((_DWORD *)this + 11);
  if (v33 == 1)
  {
    uint64_t v34 = *((void *)this + 6);
    uint64_t v35 = *((void *)this + 7);
    if (v34 == v35)
    {
      int v33 = 1;
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v37 = (v35 - v34) >> 4;
      do
      {
        pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_FreeDeliverer(v32, (uint64_t *)(*((void *)this + 6) + v36));
        v36 += 16;
        --v37;
      }
      while (v37);
      sub_216850C48((atomic_uint *)this + 12, *((void *)this + 6));
      int v33 = *((_DWORD *)this + 11);
    }
  }
  *((_DWORD *)this + 11) = v33 - 1;
  char v38 = v46[0];
  if (v46[0])
  {
    __dmb(0xBu);
    *(unsigned char *)char v38 = 0;
  }
  v46[0] = (void **)&v43;
  sub_216850BF4(v46);
  return v13;
}

void sub_21684F88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  a10 = (void **)&a12;
  sub_216850BF4(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_21684F8E4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_216787EE0(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    sub_216852358(a1, v7);
    return sub_216852520((uint64_t)v7);
  }
  return result;
}

void sub_21684F964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216852520((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21684F978(void *a1, uint64_t a2, char *a3)
{
  if (*a1 == a1[1])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator*";
    v4[2] = 271;
    v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrIntern"
            "al__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>, pxrInternal__aapl__px"
            "rReserved__::TfHash>>::operator*() [T = pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrRe"
            "served__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>, pxrInternal__aapl__pxrReserved__::Tf"
            "Hash>, Reverse = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return *a1 + 16;
}

void sub_21684F9F0()
{
}

uint64_t sub_21684F9F8(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_216787EE0(result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v17 + 1) + 8), 1u, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_216852358(a1, v18);
    char v9 = (void *)a1[1];
    uint64_t result = sub_216852520((uint64_t)v18);
  }
  else
  {
    *int v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
    }
    char v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_21684FB00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216852520((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21684FB14(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHas"
            "hSet<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>, pxrInte"
            "rnal__aapl__pxrReserved__::TfHash>>::operator++() [T = pxrInternal__aapl__pxrReserved__::TfHashSet<pxrIntern"
            "al__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>, pxrInternal__aapl__px"
            "rReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((int)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)a1 = **(void **)a1;
  }
  return a1;
}

void *sub_21684FB94(void *a1, void *a2)
{
  sub_21685036C((uint64_t)&v6, (uint64_t)(a1 + 5));
  uint64_t result = sub_2168503EC(a1, a2);
  if (result) {
    uint64_t result = (void *)result[3];
  }
  unint64_t v5 = v6;
  if (v6)
  {
    __dmb(0xBu);
    unsigned char *v5 = 0;
  }
  return result;
}

void sub_21684FBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Deliver(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v8 = *a8;
  if (!*a8) {
    return 0;
  }
  uint64_t v9 = a8[1];
  if (v8 == v9) {
    return 0;
  }
  uint64_t v15 = 0;
  uint64_t v16 = (uint64_t)a1 + 41;
  uint64_t v31 = (uint64_t)(a1 + 8);
  uint64_t v32 = a1 + 6;
  do
  {
    uint64_t v17 = *(void *)(v9 + 16);
    if (*(unsigned char *)(v17 + 32)
      && (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 16))(*(void *)(v9 + 16), a2, a3, a4, a5, a6, a7))
    {
      uint64_t v15 = (v15 + 1);
    }
    else
    {
      sub_21685036C((uint64_t)&v36, v16);
      if (!*(unsigned char *)(v17 + 33))
      {
        *(_WORD *)(v17 + 32) = 256;
        sub_216851F58(&v35, v17);
        char v19 = (_OWORD *)a1[7];
        unint64_t v18 = a1[8];
        if ((unint64_t)v19 >= v18)
        {
          uint64_t v20 = ((uint64_t)v19 - *v32) >> 4;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60) {
            sub_21677CB10();
          }
          uint64_t v22 = v18 - *v32;
          if (v22 >> 3 > v21) {
            unint64_t v21 = v22 >> 3;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          v37[4] = v31;
          int v24 = (char *)sub_216787EE0(v31, v23);
          char v25 = &v24[16 * v20];
          v37[0] = v24;
          v37[1] = v25;
          v37[3] = &v24[16 * v26];
          *(_OWORD *)char v25 = v35;
          long long v35 = 0uLL;
          v37[2] = v25 + 16;
          sub_2168525E4(v32, v37);
          uint64_t v27 = a1[7];
          sub_216852520((uint64_t)v37);
          unsigned int v28 = (atomic_uint *)*((void *)&v35 + 1);
          a1[7] = v27;
          if (v28 && atomic_fetch_add_explicit(v28 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v28 + 8))(v28);
          }
        }
        else
        {
          *char v19 = v35;
          a1[7] = (uint64_t)(v19 + 1);
        }
      }
      char v29 = v36;
      if (v36)
      {
        __dmb(0xBu);
        *char v29 = 0;
      }
    }
    uint64_t v9 = *(void *)(v9 + 8);
  }
  while (v9 != v8);
  return v15;
}

void sub_21684FE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, uint64_t a15, unsigned char *a16, uint64_t a17, char a18)
{
  if (a14 && atomic_fetch_add_explicit(a14 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a14 + 8))(a14);
  }
  if (a16)
  {
    __dmb(0xBu);
    *a16 = 0;
  }
  _Unwind_Resume(exception_object);
}

void *sub_21684FE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a3;
  sub_21685036C((uint64_t)&v7, a2);
  char v4 = sub_2168503EC((void *)(a2 + 32), &v8);
  if (v4) {
    uint64_t result = v4 + 3;
  }
  else {
    uint64_t result = 0;
  }
  unint64_t v6 = v7;
  if (v7)
  {
    __dmb(0xBu);
    *unint64_t v6 = 0;
  }
  return result;
}

void sub_21684FF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned char *a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a10 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BadTypeFatalMsg(pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, std::type_info *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType::GetBaseTypes(a2, (uint64_t)a2, (char *)a3, &v25);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v16);
  if (*(void *)a2 == (void)v16)
  {
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(a3->__type_name & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v22 >= 0) {
      unint64_t v11 = __p;
    }
    else {
      unint64_t v11 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Class %s (derived from TfNotice) is undefined in the TfType system", v9, v10, v11);
    long long v23 = v16;
    uint64_t v24 = v17;
    HIBYTE(v17) = 0;
    LOBYTE(v16) = 0;
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    if (v25 == v26)
    {
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
      if (*(char *)(TypeName + 23) >= 0) {
        uint64_t v15 = TypeName;
      }
      else {
        uint64_t v15 = *(void *)TypeName;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"TfNotice type '%s' has NO base types;\nthis should be impossible.",
        v13,
        v14,
        v15);
    }
    else
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
      if (*(char *)(v5 + 23) >= 0) {
        uint64_t v8 = v5;
      }
      else {
        uint64_t v8 = *(void *)v5;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"TfNotice type '%s' has multiple base types;\n"
                                            "it must have a unique parent in the TfType system",
        v6,
        v7,
        v8);
    }
    long long v23 = v16;
    uint64_t v24 = v17;
  }
  *(void *)&long long v16 = "tf/noticeRegistry.cpp";
  *((void *)&v16 + 1) = "_BadTypeFatalMsg";
  uint64_t v17 = 355;
  unint64_t v18 = "void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BadTypeFatalMsg(const TfType &, const std::type_info &)";
  char v19 = 0;
  int v20 = 4;
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((uint64_t)&v16, (uint64_t)&v23);
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)v23);
  }
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
}

void sub_21685009C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  long long v23 = *(void **)(v21 - 40);
  if (v23)
  {
    *(void *)(v21 - 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (*sub_2168500F0(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  int v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return sub_216850B24;
  }
}

void *pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_IncrementBlockCount(atomic_ullong *this)
{
  atomic_fetch_add(this + 22, 1uLL);
  char v2 = 0;
  uint64_t result = (void *)sub_2168520EC(this + 23, &v2);
  ++*result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_DecrementBlockCount(atomic_ullong *this)
{
  atomic_fetch_add(this + 22, 0xFFFFFFFFFFFFFFFFLL);
  char v2 = 0;
  uint64_t result = (void *)sub_2168520EC(this + 23, &v2);
  --*result;
  return result;
}

uint64_t sub_2168501D8(uint64_t a1)
{
  sub_216850214(a1, *(void **)(a1 + 16));
  char v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216850214(int a1, void *__p)
{
  if (__p)
  {
    char v2 = __p;
    do
    {
      uint64_t v3 = v2;
      char v2 = (void *)*v2;
      int v4 = (atomic_uint *)v3[3];
      if (v4)
      {
        if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
        }
      }
      operator delete(v3);
    }
    while (v2);
  }
}

uint64_t sub_216850298(uint64_t a1)
{
  sub_2168502D4(a1, *(void ***)(a1 + 16));
  char v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2168502D4(int a1, void **__p)
{
  if (__p)
  {
    char v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      char v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_216850320(uint64_t a1)
{
  char v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      char v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_21685036C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = a2;
  uint64_t v3 = (atomic_uint *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  int v4 = 1 << (8 * (a2 & 3));
  int v5 = ~(255 << (8 * (a2 & 3)));
LABEL_2:
  int v6 = *v3 & v5;
  while (1)
  {
    int v7 = v6;
    atomic_compare_exchange_strong(v3, (unsigned int *)&v7, v6 | v4);
    if (v7 == v6) {
      return a1;
    }
    if (*v3 != v6)
    {
      sched_yield();
      goto LABEL_2;
    }
  }
}

void *sub_2168503EC(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = bswap64(0x9E3779B97F4A7C55 * *a2);
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = v3;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = v3 & (*(void *)&v2 - 1);
  }
  int v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_2168504B8(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  sub_21678A04C(a1 + 32, 0);
  return a1;
}

void sub_216850518(_Unwind_Exception *a1)
{
  sub_216850534(v2);
  sub_2168505B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216850534(uint64_t a1)
{
  sub_216850570(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216850570(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_2168505B4(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *sub_2168505B4(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint8x8_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void *sub_216850618(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t i = *v20;
LABEL_38:
    *int v20 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_21685083C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216850850(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  float v14 = operator new(0x30uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *float v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  v14[3] = v14 + 3;
  v14[4] = v14 + 3;
  v14[5] = 0;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *unint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  unint64_t v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216850ACC((uint64_t)v24, 0);
  return v11;
}

void sub_216850AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216850ACC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_216850ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2168505B4(v2 + 3);
    }
    operator delete(v2);
  }
}

uint64_t sub_216850B24(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(sub_216850B68(v2) + 14)) {
    return *a1;
  }
  return 0;
}

uint64_t sub_216850B68(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->() co"
            "nst [T = pxrInternal__aapl__pxrReserved__::Tf_Remnant]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x80000002174A3DC8 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void sub_216850BF4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216850C48((atomic_uint *)v2, (uint64_t)*v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

atomic_uint *sub_216850C48(atomic_uint *result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *((void *)result + 1); i != a2; i -= 16)
  {
    uint64_t result = *(atomic_uint **)(i - 8);
    if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      uint64_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
    }
  }
  *((void *)v3 + 1) = a2;
  return result;
}

void *sub_216850CD0(void *a1)
{
  *a1 = &unk_26C74B490;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_216850D6C((uint64_t)a1);
  sub_216850EDC(a1 + 4);
  *a1 = &unk_26C74B518;
  return a1;
}

uint64_t sub_216850D6C(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(uint64_t **)(result + 8);
  __dmb(0xBu);
  while (v2)
  {
    uint64_t v3 = *v2;
    __dmb(0xBu);
    v1[1] = v3;
    uint64_t result = (*(uint64_t (**)(void *))(*v1 + 16))(v1);
    uint64_t v2 = (uint64_t *)v1[1];
    __dmb(0xBu);
  }
  __dmb(0xBu);
  v1[2] = 0;
  return result;
}

uint64_t sub_216850DF0(uint64_t a1)
{
  uint64_t v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((atomic_ullong *)(a1 + 40), 1uLL, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>>>::initialize_array, 0);
  unint64_t v3 = sub_216851020((unint64_t)v2);
  uint64_t v4 = *(void *)(a1 + 64);
  __dmb(0xBu);
  uint64_t v5 = *(void *)(v4 + 8 * v3) + (((void)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5);
  *(unsigned char *)(v5 + 8) = 1;
  return v5;
}

uint64_t sub_216850E98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_216850EAC(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_216850EB4(void *a1)
{
  uint64_t v1 = sub_216850CD0(a1);

  operator delete(v1);
}

unint64_t *sub_216850EDC(unint64_t *a1)
{
  uint64_t v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  unint64_t v3 = (void *)a1[4];
  unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>>>::destroy_array);
  sub_216850F48((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

tbb::internal *sub_216850F48(uint64_t a1, void *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a3;
  if (a3 > a4)
  {
    unint64_t v7 = a2 - 1;
    do
    {
      unint64_t v8 = (tbb::internal *)v7[v4];
      v7[v4] = 0;
      if ((unint64_t)v8 >= 0x40) {
        tbb::internal::NFS_Free(v8, a2);
      }
      --v4;
    }
    while (v4 > a4);
    unint64_t v4 = a4;
  }
  uint64_t result = (tbb::internal *)*a2;
  if (*a2 >= 0x40uLL)
  {
    for (; v4; --v4)
      a2[v4 - 1] = 0;
    return (tbb::internal *)tbb::internal::NFS_Free(result, a2);
  }
  return result;
}

uint64_t tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>>>::destroy_array(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (unsigned char *)(result + (a2 << 7) - 120);
    do
    {
      if (*v2) {
        *uint64_t v2 = 0;
      }
      v2 -= 128;
      --a2;
    }
    while (a2);
  }
  return result;
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    bzero(a1, a3 << 7);
  }
}

unint64_t sub_216851020(unint64_t a1)
{
  unint64_t v1 = a1 | 1;
  if (HIDWORD(a1)) {
    unint64_t v1 = HIDWORD(a1);
  }
  uint64_t v2 = 32 * (HIDWORD(a1) != 0);
  if (v1 >= 0x10000)
  {
    v1 >>= 16;
    uint64_t v2 = (32 * (HIDWORD(a1) != 0)) | 0x10;
  }
  if (v1 >= 0x100)
  {
    v1 >>= 8;
    v2 |= 8uLL;
  }
  if (v1 >= 0x10)
  {
    v1 >>= 4;
    v2 |= 4uLL;
  }
  if (v1 >= 4)
  {
    v1 >>= 2;
    v2 += 2;
  }
  return ((v1 >> 1) & 1) + v2;
}

uint64_t sub_216851098(uint64_t a1, char *a2, char *a3, char *a4)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint8x8_t v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, 0, a3);
    *(void *)a1 = v9;
    if (v9)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a3, v9, v10);
      if (a4[23] >= 0) {
        unint64_t v12 = a4;
      }
      else {
        unint64_t v12 = *(char **)a4;
      }
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(v12, *(_DWORD **)a1, v11);
      int v6 = 3;
    }
    else
    {
      int v6 = 0;
    }
  }
  else
  {
    int v6 = 0;
    *(void *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v6;
  return a1;
}

void *sub_216851130(void *a1)
{
  *a1 = &unk_26C74B518;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_26C74B490;
  uint64_t v2 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *uint64_t v2 = &unk_26C74B550;
  a1[3] = v2;
  for (uint64_t i = 9; i != 12; ++i)
    a1[i] = 0;
  a1[7] = 0;
  a1[6] = 0;
  a1[8] = a1 + 9;
  a1[5] = sub_2168512A4;
  return a1;
}

void sub_2168511FC(_Unwind_Exception *a1)
{
  void *v1 = v2;
  _Unwind_Resume(a1);
}

void *sub_216851204()
{
  uint64_t result = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *uint64_t result = &unk_26C74B550;
  return result;
}

uint64_t sub_21685123C(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);

  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_21685129C(uint64_t a1, void *a2)
{
  *a2 = 0;
}

uint64_t sub_2168512A4(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

unsigned __int8 *sub_2168512B4(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v4 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    unsigned __int8 v5 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    unsigned __int8 v5 = v4;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v16, (pxrInternal__aapl__pxrReserved__ *)a2, v5);
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v16);
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v7;
    if (v7 >= *(void *)&v6) {
      unint64_t v10 = v7 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v6 - 1) & v7;
  }
  unint64_t v11 = *(unsigned __int8 ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  unint64_t v12 = *v11;
  if (*v11)
  {
    uint64_t v13 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v14 = *((void *)v12 + 1);
      if (v7 == v14)
      {
        if (sub_2168513F8(v13, v12 + 16, v2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v6) {
            v14 %= *(void *)&v6;
          }
        }
        else
        {
          v14 &= *(void *)&v6 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      unint64_t v12 = *(unsigned __int8 **)v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t sub_2168513F8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unsigned __int8 *sub_2168514A0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = a2;
  char v25 = 0;
  char v26 = 0;
  int v7 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    uint64_t v8 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    uint64_t v8 = v7;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, (pxrInternal__aapl__pxrReserved__ *)a2, v8);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * (void)v25);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v5)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_21685174C(a1, v9, a3, (uint64_t)&v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)char v25 = *v22;
    long long *v22 = v25;
  }
  else
  {
    *(void *)char v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25)
    {
      unint64_t v23 = *(void *)(*(void *)v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25;
    }
  }
  uint64_t i = v25;
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216851728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_2168517F0((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21685174C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    result[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2168517D4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_2168517F0(v3, v2);
  _Unwind_Resume(a1);
}

void sub_2168517F0(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_216851850(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(sub_216850B68(v2) + 14)) {
    return *a1;
  }
  return 0;
}

void *sub_216851894(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * sub_216851B24(a2));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    uint8x8_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v7)
        {
          uint64_t v14 = sub_216851B24((uint64_t)(i + 2));
          if (v14 == sub_216851B24(a2)) {
            return i;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  uint64_t v16 = a3[1];
  i[2] = *a3;
  i[3] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *uint64_t i = *v24;
LABEL_40:
    *uint64_t v24 = i;
    goto LABEL_41;
  }
  *uint64_t i = *v15;
  *unint64_t v15 = i;
  *(void *)(v23 + 8 * v3) = v15;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216851B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216851B80(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_216851B24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v1 = (uint64_t *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(uint64_t (**)(void))(*(void *)sub_216850B68(v1) + 16);

  return v3();
}

void sub_216851B80(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = (atomic_uint *)__p[3];
    if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *sub_216851C10(void *a1, uint64_t a2)
{
  uint64_t result = sub_216851C48(a1, a2);
  if (result)
  {
    sub_216851D64(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *sub_216851C48(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_216851B24(a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v4);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v6;
    if (v6 >= *(void *)&v5) {
      unint64_t v9 = v6 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = v6 & (*(void *)&v5 - 1);
  }
  unint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        uint64_t v13 = sub_216851B24((uint64_t)(v11 + 2));
        if (v13 == sub_216851B24(a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t sub_216851D64(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_216851DB0(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    sub_216851B80((uint64_t)&v6, v3);
  }
  return v2;
}

void *sub_216851DB0@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint8x8_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint8x8_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_216851EE4(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 v4 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v4)
  {
    uint8x8_t v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, 0, a3);
    *(void *)a1 = v7;
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a3, v7, v8);
      int v5 = 2;
    }
    else
    {
      int v5 = 0;
    }
  }
  else
  {
    int v5 = 0;
    *(void *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return a1;
}

void *sub_216851F58(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C((unint64_t *)(a2 + 8), &v6);
    int8x8_t v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_216852024(_Unwind_Exception *exception_object)
{
  int8x8_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3) {
    sub_217323F90(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_21685203C@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (_DWORD *)atomic_load(a1);
  if (!result)
  {
    uint64_t result = operator new(0x10uLL);
    int v5 = 0;
    result[2] = 1;
    *(void *)uint64_t result = &unk_26C74C458;
    *((_WORD *)result + 6) = 0;
    *((unsigned char *)result + 14) = 1;
    atomic_compare_exchange_strong((atomic_ullong *volatile)a1, (unint64_t *)&v5, (unint64_t)result);
    if (v5)
    {
      (*(void (**)(_DWORD *))(*(void *)result + 8))(result);
      uint64_t result = v5;
    }
  }
  *a2 = result;
  atomic_fetch_add_explicit(result + 2, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2168520EC(atomic_ullong *a1, unsigned char *a2)
{
  id_int8x8_t v3 = (unint64_t)tbb::internal::thread_get_id_v3();
  unint64_t v5 = id_v3;
  unint64_t v6 = id_v3 ^ (id_v3 >> 3);
  uint8x8_t v7 = (void *)a1[1];
  __dmb(0xBu);
  if (!v7)
  {
LABEL_7:
    *a2 = 0;
    uint64_t v13 = (*(uint64_t (**)(atomic_ullong *))*a1)(a1);
    unint64_t v14 = atomic_fetch_add(a1 + 2, 1uLL) + 1;
    atomic_ullong v15 = a1[1];
    __dmb(0xBu);
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 8);
      if (v14 <= (unint64_t)(1 << v16) >> 1)
      {
LABEL_24:
        atomic_ullong v23 = a1[1];
        __dmb(0xBu);
        uint64_t v24 = *(void *)(v23 + 8);
        uint64_t v25 = ~(-1 << v24);
        unint64_t v26 = v6 >> -(char)v24;
        atomic_ullong v27 = v23 + 16;
        while (1)
        {
          unsigned int v28 = (atomic_ullong *)(v27 + 16 * v26);
          if (!*v28) {
            break;
          }
LABEL_28:
          unint64_t v26 = (v26 + 1) & v25;
        }
        while (1)
        {
          uint64_t v29 = 0;
          atomic_compare_exchange_strong(v28, (unint64_t *)&v29, v5);
          if (!v29) {
            break;
          }
          if (atomic_fetch_add_explicit(v28, 0, memory_order_relaxed)) {
            goto LABEL_28;
          }
        }
        *(void *)(v27 + 16 * v26 + 8) = v13;
        return v13;
      }
    }
    else
    {
      uint64_t v16 = 2;
    }
    unint64_t v18 = v16 - 1;
    do
      unint64_t v19 = 1 << v18++;
    while (v14 > v19);
    unint64_t v20 = (atomic_ullong *)(*(uint64_t (**)(atomic_ullong *, uint64_t))(*a1 + 8))(a1, (16 << v18) + 16);
    v20[1] = v18;
    bzero(v20 + 2, 16 << v18);
    while (1)
    {
      *unint64_t v20 = v15;
      while (1)
      {
        atomic_ullong v21 = v15;
        atomic_compare_exchange_strong(a1 + 1, (unint64_t *)&v21, (unint64_t)v20);
        if (v21 == v15) {
          break;
        }
        unint64_t add_explicit = atomic_fetch_add_explicit(a1 + 1, 0, memory_order_relaxed);
        if (add_explicit != v15) {
          goto LABEL_21;
        }
      }
      unint64_t add_explicit = v15;
LABEL_21:
      if (v15 == add_explicit) {
        goto LABEL_24;
      }
      atomic_ullong v15 = add_explicit;
      if (*(void *)(add_explicit + 8) >= v18)
      {
        (*(void (**)(atomic_ullong *, atomic_ullong *, uint64_t))(*a1 + 16))(a1, v20, (16 << v20[1]) + 16);
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    uint64_t v8 = v7[1];
    unint64_t v9 = v6 >> -(char)v8;
    uint64_t v10 = v7 + 2;
    unint64_t v11 = (_opaque_pthread_t *)v7[2 * v9 + 2];
    if (v11) {
      break;
    }
LABEL_6:
    uint8x8_t v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_7;
    }
  }
  uint64_t v12 = ~(-1 << v8);
  while (v11 != (_opaque_pthread_t *)id_v3)
  {
    unint64_t v9 = (v9 + 1) & v12;
    unint64_t v11 = (_opaque_pthread_t *)v10[2 * v9];
    if (!v11) {
      goto LABEL_6;
    }
  }
  float v17 = (void *)a1[1];
  __dmb(0xBu);
  *a2 = 1;
  uint64_t v13 = v10[2 * v9 + 1];
  if (v7 != v17) {
    goto LABEL_24;
  }
  return v13;
}

uint64_t sub_216852358(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168523D0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2168523D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216852464((uint64_t)v12);
  return v10;
}

uint64_t sub_216852464(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21685249C(a1);
  }
  return a1;
}

uint64_t sub_21685249C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  for (uint64_t i = *(void *)(*(void *)(result + 8) + 8); v1 != i; v1 += 16)
  {
    uint64_t result = *(void *)(v1 + 8);
    if (result)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t sub_216852520(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216852558(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 16;
      uint64_t result = *(void *)(v2 - 8);
      if (result)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_2168525E4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21685265C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21685265C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_2168526F0((uint64_t)v12);
  return v10;
}

uint64_t sub_2168526F0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21685249C(a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfUnicodeXidStartFlagData *pxrInternal__aapl__pxrReserved__::TfUnicodeXidStartFlagData::TfUnicodeXidStartFlagData(pxrInternal__aapl__pxrReserved__::TfUnicodeXidStartFlagData *this)
{
  bzero(this, 0x22000uLL);
  uint64_t v2 = (int *)"A";
  do
  {
    unsigned int v3 = *v2;
    unsigned int v4 = v2[1];
    while (v3 <= v4)
    {
      *(void *)((char *)this + (((unint64_t)v3 >> 3) & 0x1FFFFFF8)) |= 1 << v3;
      ++v3;
    }
    v2 += 2;
  }
  while (v2 != &dword_21740E1C0);
  return this;
}

{
  int *v2;
  unsigned int v3;
  unsigned int v4;

  bzero(this, 0x22000uLL);
  uint64_t v2 = (int *)"A";
  do
  {
    unsigned int v3 = *v2;
    unsigned int v4 = v2[1];
    while (v3 <= v4)
    {
      *(void *)((char *)this + (((unint64_t)v3 >> 3) & 0x1FFFFFF8)) |= 1 << v3;
      ++v3;
    }
    v2 += 2;
  }
  while (v2 != &dword_21740E1C0);
  return this;
}

pxrInternal__aapl__pxrReserved__::TfUnicodeXidContinueFlagData *pxrInternal__aapl__pxrReserved__::TfUnicodeXidContinueFlagData::TfUnicodeXidContinueFlagData(pxrInternal__aapl__pxrReserved__::TfUnicodeXidContinueFlagData *this)
{
  bzero(this, 0x22000uLL);
  uint64_t v2 = &dword_21740E1C0;
  do
  {
    unsigned int v3 = *v2;
    unsigned int v4 = v2[1];
    while (v3 <= v4)
    {
      *(void *)((char *)this + (((unint64_t)v3 >> 3) & 0x1FFFFFF8)) |= 1 << v3;
      ++v3;
    }
    v2 += 2;
  }
  while (v2 != (int *)"N32pxrInternal__aapl__pxrReserved__12TfAnyWeakPtr12_EmptyHolderE");
  return this;
}

{
  int *v2;
  unsigned int v3;
  unsigned int v4;

  bzero(this, 0x22000uLL);
  uint64_t v2 = &dword_21740E1C0;
  do
  {
    unsigned int v3 = *v2;
    unsigned int v4 = v2[1];
    while (v3 <= v4)
    {
      *(void *)((char *)this + (((unint64_t)v3 >> 3) & 0x1FFFFFF8)) |= 1 << v3;
      ++v3;
    }
    v2 += 2;
  }
  while (v2 != (int *)"N32pxrInternal__aapl__pxrReserved__12TfAnyWeakPtr12_EmptyHolderE");
  return this;
}

char *pxrInternal__aapl__pxrReserved__::TfUnicodeGetXidStartFlagData(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t result = (char *)atomic_load((unint64_t *)&qword_26798E348);
  if (!result) {
    return sub_216852968(&qword_26798E348);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::TfUnicodeGetXidContinueFlagData(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t result = (char *)atomic_load((unint64_t *)&qword_26798E350);
  if (!result) {
    return sub_216852A38(&qword_26798E350);
  }
  return result;
}

char *sub_216852968(atomic_ullong *a1)
{
  uint64_t result = sub_2168529AC();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result) {
      operator delete(result);
    }
    return (char *)atomic_load((unint64_t *)a1);
  }
  return result;
}

char *sub_2168529AC()
{
  unint64_t v0 = (char *)operator new(0x22000uLL);
  bzero(v0, 0x22000uLL);
  uint64_t v1 = (int *)"A";
  do
  {
    unsigned int v2 = *v1;
    unsigned int v3 = v1[1];
    while (v2 <= v3)
    {
      *(void *)&v0[((unint64_t)v2 >> 3) & 0x1FFFFFF8] |= 1 << v2;
      ++v2;
    }
    v1 += 2;
  }
  while (v1 != &dword_21740E1C0);
  return v0;
}

char *sub_216852A38(atomic_ullong *a1)
{
  uint64_t result = sub_216852A7C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result) {
      operator delete(result);
    }
    return (char *)atomic_load((unint64_t *)a1);
  }
  return result;
}

char *sub_216852A7C()
{
  unint64_t v0 = (char *)operator new(0x22000uLL);
  bzero(v0, 0x22000uLL);
  uint64_t v1 = &dword_21740E1C0;
  do
  {
    unsigned int v2 = *v1;
    unsigned int v3 = v1[1];
    while (v2 <= v3)
    {
      *(void *)&v0[((unint64_t)v2 >> 3) & 0x1FFFFFF8] |= 1 << v2;
      ++v2;
    }
    v1 += 2;
  }
  while (v1 != (int *)"N32pxrInternal__aapl__pxrReserved__12TfAnyWeakPtr12_EmptyHolderE");
  return v0;
}

void pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::Clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C74B5E8;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::IsInvalid(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::GetUniqueIdentifier(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::GetWeakBase(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::operator BOOL()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::_IsConst(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::GetPythonObject(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::GetTypeInfo(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::_GetMostDerivedPtr(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::_IsPolymorphic(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 24))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetUniqueIdentifier(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 32))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 40))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator BOOL(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator!(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) ^ 1;
}

BOOL pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return v3 == (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
}

BOOL pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator<(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return v3 < (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetTypeInfo(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 72))();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetType(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 80))();
}

char *pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper::TfAtomicOfstreamWrapper(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  *((void *)__dst + 3) = 0;
  *((void *)__dst + 4) = 0;
  *((void *)__dst + 5) = 0;
  uint64_t v4 = MEMORY[0x263F8C310] + 64;
  *((void *)__dst + 58) = MEMORY[0x263F8C310] + 64;
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *((void *)__dst + 6) = v6;
  *(void *)&__dst[*(void *)(v6 - 24) + 48] = v5;
  uint64_t v7 = (std::ios_base *)&__dst[*(void *)(*((void *)__dst + 6) - 24) + 48];
  std::ios_base::init(v7, __dst + 56);
  uint64_t v8 = MEMORY[0x263F8C310] + 24;
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *((void *)__dst + 6) = v8;
  *((void *)__dst + 58) = v4;
  MEMORY[0x21D447900](__dst + 56);
  return __dst;
}

void sub_216852F1C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x21D447E60](v2);
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper::~TfAtomicOfstreamWrapper(pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper *this)
{
  pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper::Cancel((uint64_t)this, 0);
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *((void *)this + 6) = *MEMORY[0x263F8C2B0];
  *(void *)((char *)this + *(void *)(v3 - 24) + 48) = *(void *)(v2 + 24);
  MEMORY[0x21D447910]((char *)this + 56);
  std::ostream::~ostream();
  MEMORY[0x21D447E60]((char *)this + 464);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper::Cancel(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 176))
  {
    if (!std::filebuf::close())
    {
      uint64_t v4 = (std::ios_base *)(a1 + 48 + *(void *)(*(void *)(a1 + 48) - 24));
      std::ios_base::clear(v4, v4->__rdstate_ | 4);
    }
    uint64_t v5 = (const char **)(a1 + 24);
    uint64_t v6 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      uint64_t v6 = *v5;
    }
    if (!unlink(v6) || *__error() == 2) {
      return 1;
    }
    if (a2)
    {
      if (*(char *)(a1 + 47) < 0) {
        uint64_t v5 = (const char **)*v5;
      }
      uint64_t v8 = __error();
      pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v8, __p);
      if (v13 >= 0) {
        unint64_t v11 = __p;
      }
      else {
        unint64_t v11 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unable to remove temporary file '%s': %s", v9, v10, v5, v11);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(_OWORD *)a2 = v14;
      *(void *)(a2 + 16) = v15;
      HIBYTE(v15) = 0;
      LOBYTE(v14) = 0;
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else if (a2)
  {
    MEMORY[0x21D4477E0](a2, "Buffer is not open");
  }
  return 0;
}

void sub_2168531AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper::Open(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 176))
  {
    if (a2) {
      MEMORY[0x21D4477E0](a2, "Stream is already open");
    }
    return 0;
  }
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v19 = 0;
  if (*(char *)(a1 + 23) < 0) {
    sub_216778F24(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  if (a2) {
    uint64_t v5 = (void **)a2;
  }
  else {
    uint64_t v5 = v18;
  }
  uint64_t v6 = (void *)(a1 + 24);
  int v7 = pxrInternal__aapl__pxrReserved__::Tf_CreateSiblingTempFile(&__p, (std::string *)a1, (std::string *)(a1 + 24), (uint64_t)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7 == -1) {
    goto LABEL_25;
  }
  close(v7);
  std::ofstream::open();
  int v8 = *(_DWORD *)(a1 + 48 + *(void *)(*(void *)(a1 + 48) - 24) + 32) & 5;
  BOOL v3 = v8 == 0;
  if (a2 && v8)
  {
    if (*(char *)(a1 + 47) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    pxrInternal__aapl__pxrReserved__::ArchStrerror(v13);
    if (v14 >= 0) {
      unint64_t v11 = v13;
    }
    else {
      unint64_t v11 = (void **)v13[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unable to open '%s' for writing: %s", v9, v10, v6, v11);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v15;
    *(void *)(a2 + 16) = v16;
    HIBYTE(v16) = 0;
    LOBYTE(v15) = 0;
    if (v14 < 0) {
      operator delete(v13[0]);
    }
LABEL_25:
    BOOL v3 = 0;
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  return v3;
}

void sub_216853374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper::Commit(const std::__fs::filesystem::path *a1, BOOL a2)
{
  BOOL v2 = a2;
  if (a1[7].__pn_.__r_.__value_.__l.__size_)
  {
    if (!std::filebuf::close())
    {
      uint64_t v4 = (std::ios_base *)((char *)&a1[2] + *(void *)(a1[2].__pn_.__r_.__value_.__r.__words[0] - 24));
      std::ios_base::clear(v4, v4->__rdstate_ | 4);
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v8 = 0;
    if (v2) {
      uint64_t v5 = (void **)v2;
    }
    else {
      uint64_t v5 = __p;
    }
    BOOL v2 = pxrInternal__aapl__pxrReserved__::Tf_AtomicRenameFileOver(a1 + 1, a1, (uint64_t)v5);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  else if (a2)
  {
    MEMORY[0x21D4477E0](a2, "Stream is not open");
    return 0;
  }
  return v2;
}

void sub_21685347C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::TfBigRWMutex *pxrInternal__aapl__pxrReserved__::TfBigRWMutex::TfBigRWMutex(pxrInternal__aapl__pxrReserved__::TfBigRWMutex *this)
{
  BOOL v2 = operator new[](0x800uLL);
  bzero(v2, 0x800uLL);
  *(void *)this = v2;
  *((unsigned char *)this + 8) = 0;
  return this;
}

{
  void *v2;

  BOOL v2 = operator new[](0x800uLL);
  bzero(v2, 0x800uLL);
  *(void *)this = v2;
  *((unsigned char *)this + 8) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfBigRWMutex::_AcquireReadContended(uint64_t this, int a2)
{
  uint64_t v2 = this;
  uint64_t v3 = a2;
  while (1)
  {
    while (1)
    {
      unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v2 + 8));
      if ((v4 & 1) == 0) {
        break;
      }
      this = sched_yield();
    }
    uint64_t v5 = (atomic_uint *)(*(void *)v2 + (v3 << 7));
    if ((atomic_fetch_add(v5, 2u) & 1) == 0) {
      break;
    }
    atomic_fetch_add(v5, 0xFFFFFFFE);
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfBigRWMutex::_AcquireWrite(pxrInternal__aapl__pxrReserved__::TfBigRWMutex *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)this + 8;
  while ((atomic_exchange(v2, 1u) & 1) != 0)
  {
    do
    {
      sched_yield();
      uint64_t v2 = (char *)this + 8;
      unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 8);
    }
    while ((v3 & 1) != 0);
  }
  uint64_t v4 = 0;
  memset(v9, 0, sizeof(v9));
  char v5 = 1;
  do
  {
    uint64_t result = sub_216853658((unsigned int *)(*(void *)this + (v4 << 7)), *((_DWORD *)v9 + v4));
    *((_DWORD *)v9 + v4) = result;
    int v7 = v5 & (result == 2);
    BOOL v8 = v4 == 15;
    if (v4 == 15) {
      uint64_t v4 = 0;
    }
    else {
      ++v4;
    }
    if (v8) {
      char v5 = 1;
    }
    else {
      v5 &= result == 2;
    }
  }
  while (!v8 || !v7);
  return result;
}

void sub_21685364C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

uint64_t sub_216853658(unsigned int *a1, int a2)
{
  if (a2 == 1)
  {
    pxrInternal__aapl__pxrReserved__::TfSpinRWMutex::_WaitForReaders(a1);
    return 2;
  }
  if (a2) {
    return 2;
  }
  unsigned int v2 = atomic_fetch_or((atomic_uint *volatile)a1, 1u);
  if (v2) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = 2;
  }
  if (v2) {
    return 0;
  }
  else {
    return v3;
  }
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::TfBigRWMutex::_ReleaseWrite(unsigned __int8 *this)
{
  uint64_t v1 = 0;
  atomic_store(0, this + 8);
  uint64_t v2 = *(void *)this;
  do
  {
    atomic_fetch_and((atomic_uint *volatile)(v2 + v1), 0xFFFFFFFE);
    v1 += 128;
  }
  while (v1 != 2048);
  return this;
}

unint64_t sub_2168536C8(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__22Tf_DebugSymbolRegistryE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  uint64_t v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(byte_26798AFD8, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      long long v9 = operator new(0x68uLL);
      sub_2168555C8((unint64_t)v9);
      unint64_t v11 = atomic_load(a1);
      if (v11)
      {
        if (v9 != (void *)v11)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          float v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_DebugSymbol"
                "Registry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v10);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        float v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRe"
              "gistry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v10, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)byte_26798AFD8);
  }
  unint64_t v5 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v5;
}

void sub_216853884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::TimedScopeHelper<true>::TimedScopeHelper(uint64_t a1, int a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  va_start(va, this);
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)a1 = a2;
  if (a2)
  {
    va_copy(v11, va);
    pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&v9, this, va, (char *)this);
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)v4);
    }
    *(_OWORD *)uint64_t v4 = v9;
    *(void *)(v4 + 16) = v10;
    unint64_t v5 = (const char *)v4;
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v5 = *(const char **)v4;
    }
    sub_2168549C0();
    uint64_t v6 = (FILE *)atomic_load((unint64_t *)&qword_26798E360);
    unsigned int v7 = atomic_load((unsigned int *)&dword_26798E358);
    fprintf(v6, "%*s%s --{\n", 2 * v7, "", v5);
    atomic_fetch_add(&dword_26798E358, 1u);
    *(void *)(a1 + 40) = mach_absolute_time();
  }
  return a1;
}

{
  uint64_t v4;
  const char *v5;
  FILE *v6;
  unsigned int v7;
  long long v9;
  uint64_t v10;
  va_list v11;
  va_list va;

  va_start(va, this);
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)a1 = a2;
  if (a2)
  {
    va_copy(v11, va);
    pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&v9, this, va, (char *)this);
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)v4);
    }
    *(_OWORD *)uint64_t v4 = v9;
    *(void *)(v4 + 16) = v10;
    unint64_t v5 = (const char *)v4;
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v5 = *(const char **)v4;
    }
    sub_2168549C0();
    uint64_t v6 = (FILE *)atomic_load((unint64_t *)&qword_26798E360);
    unsigned int v7 = atomic_load((unsigned int *)&dword_26798E358);
    fprintf(v6, "%*s%s --{\n", 2 * v7, "", v5);
    atomic_fetch_add(&dword_26798E358, 1u);
    *(void *)(a1 + 40) = mach_absolute_time();
  }
  return a1;
}

void sub_2168539CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::_ScopedOutput(pxrInternal__aapl__pxrReserved__::TfDebug *this, const char *a2, const char *a3)
{
  int v4 = (int)this;
  sub_2168549C0();
  unint64_t v5 = (FILE *)atomic_load((unint64_t *)&qword_26798E360);
  if (v4)
  {
    unsigned int v6 = atomic_load((unsigned int *)&dword_26798E358);
    uint64_t result = fprintf(v5, "%*s%s --{\n", 2 * v6, "", a2);
    atomic_fetch_add(&dword_26798E358, 1u);
  }
  else
  {
    atomic_fetch_add(&dword_26798E358, 0xFFFFFFFF);
    unsigned int v8 = atomic_load((unsigned int *)&dword_26798E358);
    return fprintf(v5, "%*s}-- %s\n", 2 * v8, "", a2);
  }
  return result;
}

void sub_216853B7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::TimedScopeHelper<true>::~TimedScopeHelper(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__ *)(mach_absolute_time() - *(void *)(a1 + 40) + *(void *)(a1 + 32));
    *(void *)(a1 + 32) = v2;
    ++*(void *)(a1 + 48);
    long long v3 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v3 = (void *)*v3;
    }
    double v4 = pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds(v2);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s: %.3f ms", v5, v6, v3, v4 * 1000.0);
    sub_2168549C0();
    if (v12 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    unsigned int v8 = (FILE *)atomic_load((unint64_t *)&qword_26798E360);
    atomic_fetch_add(&dword_26798E358, 0xFFFFFFFF);
    unsigned int v9 = atomic_load((unsigned int *)&dword_26798E358);
    fprintf(v8, "%*s}-- %s\n", 2 * v9, "", p_p);
    if (v12 < 0) {
      operator delete(__p);
    }
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfDebug::SetDebugSymbolsByName(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v6 = atomic_load(&qword_26798AFD0);
  if (!v6) {
    unint64_t v6 = sub_2168536C8(&qword_26798AFD0);
  }
  if (a2) {
    unsigned int v7 = "";
  }
  else {
    unsigned int v7 = "-";
  }
  sub_216779094(&v13, v7);
  int v8 = *(char *)(a1 + 23);
  if (v8 >= 0) {
    unsigned int v9 = (const std::string::value_type *)a1;
  }
  else {
    unsigned int v9 = *(const std::string::value_type **)a1;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a1 + 8);
  }
  va_list v11 = std::string::append(&v13, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v15 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  sub_216853DE4(v6, (uint64_t)__p, a3);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_216853D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void sub_216853DE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (sub_216855488(2))
  {
    sub_216779094(v41, "_SetByPattern");
    sub_216779094(&__p, "void pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry::_SetByPattern(std::string, std::vector<std::string> *)");
    pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)v41, &__p, &v43);
    unint64_t v6 = std::string::append(&v43, ": pattern = ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      unsigned int v9 = (const std::string::value_type *)a2;
    }
    else {
      unsigned int v9 = *(const std::string::value_type **)a2;
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v10 = *(void *)(a2 + 8);
    }
    va_list v11 = std::string::append(&v44, v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::string v13 = std::string::append(&v45, "\n");
    std::string v46 = *v13;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((uint64_t)&v46);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v15 = *(void *)(a2 + 8);
    if (!v15) {
      return;
    }
    if (v15 != 1) {
      goto LABEL_28;
    }
    int v14 = *(unsigned char **)a2;
LABEL_27:
    if (*v14 == 45) {
      return;
    }
    goto LABEL_28;
  }
  if (!*(unsigned char *)(a2 + 23)) {
    return;
  }
  int v14 = (unsigned char *)a2;
  if (*(unsigned char *)(a2 + 23) == 1) {
    goto LABEL_27;
  }
LABEL_28:
  sub_21685036C((uint64_t)&v43, a1);
  uint64_t v16 = *(void **)(a1 + 32);
  float v17 = (void *)(a1 + 40);
  if (v16 != (void *)(a1 + 40))
  {
    char v18 = 0;
    int v19 = (uint64_t **)(a1 + 8);
    do
    {
      unint64_t v20 = (char **)(v16 + 4);
      atomic_ullong v21 = (char *)(v16 + 4);
      if (*((char *)v16 + 55) < 0) {
        atomic_ullong v21 = *v20;
      }
      __int16 v22 = sub_216855B48(v21, (long long *)a2, 1);
      if (v22)
      {
        if (a3)
        {
          unint64_t v23 = a3[1];
          if (v23 >= a3[2])
          {
            uint64_t v24 = sub_2167E9A44(a3, (long long *)v16 + 2);
          }
          else
          {
            sub_2167E99E4(a3, (long long *)v16 + 2);
            uint64_t v24 = v23 + 24;
          }
          a3[1] = v24;
        }
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)(v16 + 4);
        int v25 = v22 & 0x100;
        *((unsigned char *)sub_216855CF4(v19, (const void **)v16 + 4, (uint64_t)&unk_2174BFD90, (long long **)&v46) + 56) = BYTE1(v25);
        if (v25) {
          unsigned int v26 = 2;
        }
        else {
          unsigned int v26 = 1;
        }
        atomic_ullong v27 = (void *)v16[7];
        if (v27 != v16 + 8)
        {
          do
          {
            atomic_store(v26, (unsigned int *)v27[4]);
            unsigned int v28 = (void *)v27[1];
            if (v28)
            {
              do
              {
                uint64_t v29 = v28;
                unsigned int v28 = (void *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                uint64_t v29 = (void *)v27[2];
                BOOL v30 = *v29 == (void)v27;
                atomic_ullong v27 = v29;
              }
              while (!v30);
            }
            atomic_ullong v27 = v29;
          }
          while (v29 != v16 + 8);
        }
        if (sub_216855488(2))
        {
          sub_216779094(&v45, "_SetByPattern");
          sub_216779094(&v44, "void pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry::_SetByPattern(std::string, std::vector<std::string> *)");
          pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)&v45, &v44, &v46);
          int v33 = &v46;
          if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v33 = (std::string *)v46.__r_.__value_.__r.__words[0];
          }
          if (*((char *)v16 + 55) < 0) {
            unint64_t v20 = (char **)*v20;
          }
          uint64_t v34 = "true";
          if (!v25) {
            uint64_t v34 = "false";
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s: set %s %s\n", v31, v32, v33, v20, v34);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v46.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v45.__r_.__value_.__l.__data_);
          }
        }
        char v18 = 1;
      }
      long long v35 = (void *)v16[1];
      if (v35)
      {
        do
        {
          uint64_t v36 = v35;
          long long v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          uint64_t v36 = (void *)v16[2];
          BOOL v30 = *v36 == (void)v16;
          uint64_t v16 = v36;
        }
        while (!v30);
      }
      uint64_t v16 = v36;
    }
    while (v36 != v17);
    if (v18)
    {
      unsigned __int8 v37 = atomic_load(byte_26798E35C);
      if (v37)
      {
        char v38 = (unsigned char *)v43.__r_.__value_.__r.__words[0];
        __dmb(0xBu);
        unsigned char *v38 = 0;
        v43.__r_.__value_.__r.__words[0] = 0;
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C74B710;
        pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&v46);
        pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice((pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *)&v46);
      }
    }
  }
  int64_t v39 = (unsigned char *)v43.__r_.__value_.__r.__words[0];
  if (v43.__r_.__value_.__r.__words[0])
  {
    __dmb(0xBu);
    *int64_t v39 = 0;
  }
}

void sub_216854200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,unsigned char *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice((pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *)(v42 - 112));
  if (a24)
  {
    __dmb(0xBu);
    *a24 = 0;
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfDebug::IsDebugSymbolNameEnabled(char *a1)
{
  unint64_t v2 = atomic_load(&qword_26798AFD0);
  if (!v2) {
    unint64_t v2 = sub_2168536C8(&qword_26798AFD0);
  }

  return sub_21685435C(v2, a1);
}

BOOL sub_21685435C(uint64_t a1, char *a2)
{
  sub_21685036C((uint64_t)&v7, a1);
  if (a2[23] >= 0) {
    double v4 = a2;
  }
  else {
    double v4 = *(char **)a2;
  }
  BOOL result = sub_216855E34(a1, v4);
  unint64_t v6 = v7;
  if (v7)
  {
    __dmb(0xBu);
    *unint64_t v6 = 0;
  }
  return result;
}

void sub_2168543BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfDebug::GetDebugSymbolDescriptions(std::string *a1@<X8>)
{
  unint64_t v3 = atomic_load(&qword_26798AFD0);
  if (!v3) {
    unint64_t v3 = sub_2168536C8(&qword_26798AFD0);
  }

  sub_216854420(v3, a1);
}

void sub_216854420(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_21685036C((uint64_t)&v29, a1);
  double v4 = *(void **)(a1 + 56);
  if (v4 != (void *)(a1 + 64))
  {
    do
    {
      unint64_t v5 = v4 + 4;
      if (*((char *)v4 + 55) < 0)
      {
        unint64_t v6 = v4[5];
        if (v6 >= 0x19)
        {
          unint64_t v5 = (void *)*v5;
LABEL_23:
          int v14 = operator new(0x20uLL);
          float v17 = v14;
          memset(v14, 32, 25);
          char v18 = v4 + 7;
          if (*((char *)v4 + 79) < 0) {
            char v18 = (void *)*v18;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s:\n%s  %s\n", v15, v16, v5, v14, v18);
          if ((v28 & 0x80u) == 0) {
            int v19 = __b;
          }
          else {
            int v19 = (void **)__b[0];
          }
          if ((v28 & 0x80u) == 0) {
            std::string::size_type v20 = v28;
          }
          else {
            std::string::size_type v20 = (std::string::size_type)__b[1];
          }
          std::string::append(a2, (const std::string::value_type *)v19, v20);
          if ((char)v28 < 0) {
            operator delete(__b[0]);
          }
          std::string v13 = v17;
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v6 = *((unsigned __int8 *)v4 + 55);
        if (v6 >= 0x19) {
          goto LABEL_23;
        }
      }
      sub_2167794AC(__b, 25 - v6, 32);
      if (*((char *)v4 + 55) < 0) {
        unint64_t v5 = (void *)*v5;
      }
      unsigned int v9 = (void **)__b[0];
      if ((v28 & 0x80u) == 0) {
        unsigned int v9 = __b;
      }
      std::string::size_type v10 = v4 + 7;
      if (*((char *)v4 + 79) < 0) {
        std::string::size_type v10 = (void *)*v10;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s: %s\n", v7, v8, v5, v9, v10);
      if ((v26 & 0x80u) == 0) {
        va_list v11 = __p;
      }
      else {
        va_list v11 = (void **)__p[0];
      }
      if ((v26 & 0x80u) == 0) {
        std::string::size_type v12 = v26;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)__p[1];
      }
      std::string::append(a2, (const std::string::value_type *)v11, v12);
      if ((char)v26 < 0) {
        operator delete(__p[0]);
      }
      if (((char)v28 & 0x80000000) == 0) {
        goto LABEL_35;
      }
      std::string v13 = __b[0];
LABEL_34:
      operator delete(v13);
LABEL_35:
      atomic_ullong v21 = (void *)v4[1];
      if (v21)
      {
        do
        {
          __int16 v22 = v21;
          atomic_ullong v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          __int16 v22 = (void *)v4[2];
          BOOL v23 = *v22 == (void)v4;
          double v4 = v22;
        }
        while (!v23);
      }
      double v4 = v22;
    }
    while (v22 != (void *)(a1 + 64));
  }
  uint64_t v24 = v29;
  if (v29)
  {
    __dmb(0xBu);
    *uint64_t v24 = 0;
  }
}

void sub_21685462C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (*(char *)(v25 + 23) < 0) {
    operator delete(*(void **)v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::GetDebugSymbolNames@<X0>(uint64_t *a1@<X8>)
{
  unint64_t v3 = atomic_load(&qword_26798AFD0);
  if (!v3) {
    unint64_t v3 = sub_2168536C8(&qword_26798AFD0);
  }

  return sub_216854708(v3, a1);
}

uint64_t sub_216854708@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_21685036C((uint64_t)&v13, a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = sub_21680BC90(a2, *(void *)(a1 + 48));
  unint64_t v5 = *(void **)(a1 + 32);
  unint64_t v6 = (void *)(a1 + 40);
  if (v5 != (void *)(a1 + 40))
  {
    unint64_t v7 = a2[1];
    do
    {
      int v8 = (long long *)(v5 + 4);
      if (v7 >= a2[2])
      {
        uint64_t result = sub_2167E9A44(a2, v8);
        unint64_t v7 = result;
      }
      else
      {
        uint64_t result = (uint64_t)sub_2167E99E4(a2, v8);
        v7 += 24;
      }
      a2[1] = v7;
      unsigned int v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          std::string::size_type v10 = v9;
          unsigned int v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          std::string::size_type v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          unint64_t v5 = v10;
        }
        while (!v11);
      }
      unint64_t v5 = v10;
    }
    while (v10 != v6);
  }
  std::string::size_type v12 = v13;
  if (v13)
  {
    __dmb(0xBu);
    unsigned char *v12 = 0;
  }
  return result;
}

void sub_2168547E8(_Unwind_Exception *a1, uint64_t a2, unsigned char *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216782F20((void ***)va);
  if (a3)
  {
    __dmb(0xBu);
    *a3 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::GetDebugSymbolDescription@<X0>(const void **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = atomic_load(&qword_26798AFD0);
  if (!v4) {
    unint64_t v4 = sub_2168536C8(&qword_26798AFD0);
  }

  return sub_21685486C(v4, a1, a2);
}

uint64_t sub_21685486C@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  sub_21685036C((uint64_t)&v9, a1);
  uint64_t result = sub_21678C2D8(a1 + 56, a2);
  if (a1 + 64 == result)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  else if (*(char *)(result + 79) < 0)
  {
    uint64_t result = (uint64_t)sub_216778F24((unsigned char *)a3, *(void **)(result + 56), *(void *)(result + 64));
  }
  else
  {
    long long v7 = *(_OWORD *)(result + 56);
    *(void *)(a3 + 16) = *(void *)(result + 72);
    *(_OWORD *)a3 = v7;
  }
  int v8 = v9;
  if (v9)
  {
    __dmb(0xBu);
    *int v8 = 0;
  }
  return result;
}

void sub_216854910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfDebug::SetOutputFile(pxrInternal__aapl__pxrReserved__::TfDebug *this, __sFILE *a2)
{
  if ((pxrInternal__aapl__pxrReserved__::TfDebug *)*MEMORY[0x263EF8358] == this || *MEMORY[0x263EF8348] == (void)this)
  {
    sub_2168549C0();
    atomic_store((unint64_t)this, (unint64_t *)&qword_26798E360);
  }
  else
  {
    v4[0] = "tf/debug.cpp";
    v4[1] = "SetOutputFile";
    v4[2] = 398;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfDebug::SetOutputFile(FILE *)";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"TfDebug output must go to either stdout or stderr");
  }
}

void sub_2168549C0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E368, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E368))
  {
    sub_216779094(v4, "TF_DEBUG_OUTPUT_FILE");
    sub_216779094(__p, "");
    pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v4, (uint64_t)__p, (uint64_t)v6);
    BOOL v0 = sub_216855A40(v6, "stderr");
    uint64_t v1 = (uint64_t *)MEMORY[0x263EF8348];
    if (!v0) {
      uint64_t v1 = (uint64_t *)MEMORY[0x263EF8358];
    }
    qword_26798E360 = *v1;
    if (v7 < 0) {
      operator delete(v6[0]);
    }
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (v5 < 0) {
      operator delete(v4[0]);
    }
    __cxa_guard_release(&qword_26798E368);
  }
}

void sub_216854AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  __cxa_guard_abort(&qword_26798E368);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfDebug::_SetNode(void *a1, char *a2, int a3)
{
  unint64_t v6 = atomic_load(&qword_26798AFD0);
  if (!v6) {
    unint64_t v6 = sub_2168536C8(&qword_26798AFD0);
  }

  sub_216854B58(v6, a1, a2, a3);
}

void sub_216854B58(uint64_t a1, void *a2, char *a3, int a4)
{
  sub_21685036C((uint64_t)&v19, a1);
  sub_216779094(__p, a3);
  std::string::size_type v20 = __p;
  int v8 = (uint64_t **)sub_216855EF0((uint64_t **)(a1 + 32), (const void **)__p, (uint64_t)&unk_2174BFD90, (_OWORD **)&v20);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = a2;
  sub_216856018(v8 + 7, (unint64_t *)__p, (uint64_t *)__p);
  unsigned int v9 = (uint64_t **)v8[7];
  if (v9 != v8 + 8)
  {
    if (a4) {
      unsigned int v10 = 2;
    }
    else {
      unsigned int v10 = 1;
    }
    do
    {
      atomic_store(v10, (unsigned int *)v9[4]);
      BOOL v11 = v9[1];
      if (v11)
      {
        do
        {
          std::string::size_type v12 = (uint64_t **)v11;
          BOOL v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          std::string::size_type v12 = (uint64_t **)v9[2];
          BOOL v13 = *v12 == (uint64_t *)v9;
          unsigned int v9 = v12;
        }
        while (!v13);
      }
      unsigned int v9 = v12;
    }
    while (v12 != v8 + 8);
  }
  sub_216779094(__p, a3);
  std::string::size_type v20 = __p;
  *((unsigned char *)sub_2168560D4((uint64_t **)(a1 + 8), (const void **)__p, (uint64_t)&unk_2174BFD90, (_OWORD **)&v20) + 56) = a4;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  unsigned __int8 v14 = atomic_load(byte_26798E35C);
  if (v14)
  {
    uint64_t v15 = v19;
    __dmb(0xBu);
    *uint64_t v15 = 0;
    int v19 = 0;
    __p[0] = &unk_26C74B710;
    pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)__p);
    pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice((pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *)__p);
  }
  uint64_t v16 = v19;
  if (v19)
  {
    __dmb(0xBu);
    unsigned char *v16 = 0;
  }
}

void sub_216854D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned char *a16)
{
  pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice((pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *)&__p);
  float v17 = a16;
  if (a16)
  {
    __dmb(0xBu);
    *float v17 = 0;
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode(void *a1, char *a2)
{
  unint64_t v4 = atomic_load(&qword_26798AFD0);
  if (!v4) {
    unint64_t v4 = sub_2168536C8(&qword_26798AFD0);
  }

  return sub_216854DAC(v4, a1, a2);
}

BOOL sub_216854DAC(uint64_t a1, void *a2, char *a3)
{
  sub_21685036C((uint64_t)&v16, a1);
  sub_216779094(__p, a3);
  float v17 = __p;
  unint64_t v6 = (uint64_t **)sub_216855EF0((uint64_t **)(a1 + 32), (const void **)__p, (uint64_t)&unk_2174BFD90, (_OWORD **)&v17);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = a2;
  sub_216856018(v6 + 7, (unint64_t *)__p, (uint64_t *)__p);
  BOOL result = sub_216855E34(a1, a3);
  int v8 = (uint64_t **)v6[7];
  if (v8 != v6 + 8)
  {
    if (result) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = 1;
    }
    do
    {
      atomic_store(v9, (unsigned int *)v8[4]);
      unsigned int v10 = v8[1];
      if (v10)
      {
        do
        {
          BOOL v11 = (uint64_t **)v10;
          unsigned int v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (uint64_t **)v8[2];
          BOOL v12 = *v11 == (uint64_t *)v8;
          int v8 = v11;
        }
        while (!v12);
      }
      int v8 = v11;
    }
    while (v11 != v6 + 8);
  }
  BOOL v13 = v16;
  if (v16)
  {
    __dmb(0xBu);
    unsigned char *v13 = 0;
  }
  return result;
}

void sub_216854ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned char *a16)
{
  if (a16)
  {
    __dmb(0xBu);
    *a16 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg(uint64_t a1)
{
  sub_2168549C0();
  unint64_t v2 = (FILE *)atomic_load((unint64_t *)&qword_26798E360);
  if (*(char *)(a1 + 23) >= 0) {
    char v3 = (const char *)a1;
  }
  else {
    char v3 = *(const char **)a1;
  }
  fputs(v3, v2);

  return fflush(v2);
}

void pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg(pxrInternal__aapl__pxrReserved__::TfDebug::Helper *this, const char *a2, char *a3, ...)
{
  va_start(va, a3);
  va_copy(v5, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216854FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(uint64_t a1, char *a2, char *a3)
{
  sub_216779094(v14, a2);
  if (!a3)
  {
    *(void *)&long long __p = "tf/debug.cpp";
    *((void *)&__p + 1) = "_RegisterDebugSymbolImpl";
    uint64_t v10 = 464;
    BOOL v11 = "static void pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(_Node *, const char *, const char *)";
    char v12 = 0;
    int v13 = 4;
    if (v15 >= 0) {
      char v7 = v14;
    }
    else {
      char v7 = (void **)v14[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"description argument for '%s' is NULL", v5, v7);
  }
  if (!*a3)
  {
    *(void *)&long long __p = "tf/debug.cpp";
    *((void *)&__p + 1) = "_RegisterDebugSymbolImpl";
    uint64_t v10 = 468;
    BOOL v11 = "static void pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(_Node *, const char *, const char *)";
    char v12 = 0;
    int v13 = 4;
    unint64_t v6 = v14;
    if (v15 < 0) {
      unint64_t v6 = (void **)v14[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"description argument for '%s' is empty -- add description!", v5, v6);
  }
  uint64_t v8 = atomic_load(&qword_26798AFD0);
  if (!v8) {
    uint64_t v8 = sub_2168536C8(&qword_26798AFD0);
  }
  sub_216779094(&__p, a3);
  sub_21685516C(v8, (std::string::size_type)v14, a1, &__p);
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)__p);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_21685512C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21685516C(uint64_t a1, std::string::size_type a2, uint64_t a3, long long *a4)
{
  uint64_t v29 = a3;
  if (sub_216855488(2))
  {
    sub_216779094(v27, "_Register");
    sub_216779094(&v26, "void pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry::_Register(const std::string &, TfDebug::_Node *, const std::string &)");
    pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)v27, &v26, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v10 = (const void *)a2;
    }
    else {
      uint64_t v10 = *(const void **)a2;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s: %s\n", v7, v8, p_p, v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
  }
  sub_21685036C((uint64_t)v27, a1);
  sub_216856170((uint64_t **)(a1 + 56), (const void **)a2, (long long *)a2, a4);
  if ((v12 & 1) == 0)
  {
    int v13 = v27[0];
    __dmb(0xBu);
    unsigned char *v13 = 0;
    v27[0] = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"tf/debug.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_Register";
    __p.__r_.__value_.__r.__words[2] = 139;
    BOOL v23 = "void pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry::_Register(const std::string &, TfDebug::_Node *"
          ", const std::string &)";
    char v24 = 0;
    int v25 = 4;
    if (*(char *)(a2 + 23) >= 0) {
      unsigned __int8 v14 = (const void *)a2;
    }
    else {
      unsigned __int8 v14 = *(const void **)a2;
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"[TF_DEBUG_ENVIRONMENT_SYMBOL] multiple debug symbol definitions for '%s'.  This is usually due to software misconfiguration, such as multiple versions of the same shared library loaded simultaneously in the process.  Please check your build configuration.", v11, v14);
  }
  __p.__r_.__value_.__r.__words[0] = a2;
  char v15 = sub_216856320((uint64_t **)(a1 + 32), (const void **)a2, (uint64_t)&unk_2174BFD90, (long long **)&__p);
  sub_216856018((uint64_t **)v15 + 7, (unint64_t *)&v29, &v29);
  if (v16)
  {
    unsigned __int8 v18 = atomic_load(byte_26798E35C);
    if (v18)
    {
      int v19 = v27[0];
      __dmb(0xBu);
      *int v19 = 0;
      v27[0] = 0;
      pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&__p);
      if (*v20 != __p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C74B710;
        pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice((pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *)&__p);
      }
    }
  }
  atomic_ullong v21 = v27[0];
  if (v27[0])
  {
    __dmb(0xBu);
    *atomic_ullong v21 = 0;
  }
}

void sub_21685538C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice((pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *)&__p);
  char v28 = *(unsigned char **)(v26 - 64);
  if (v28)
  {
    __dmb(0xBu);
    *char v28 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfDebug::_ComplainAboutInvalidSymbol(pxrInternal__aapl__pxrReserved__::TfDebug *this, const char *a2)
{
  v2[0] = "tf/debug.cpp";
  v2[1] = "_ComplainAboutInvalidSymbol";
  v2[2] = 479;
  v2[3] = "static void pxrInternal__aapl__pxrReserved__::TfDebug::_ComplainAboutInvalidSymbol(const char *)";
  char v3 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"TF_DEBUG_ENVIRONMENT_SYMBOL(): symbol '%s' invalid.  (Check the TF_DEBUG_CODES() macro.)", (const char *)this);
}

unint64_t sub_216855468()
{
  if (!atomic_load(&qword_26798AFD0)) {
    return sub_2168536C8(&qword_26798AFD0);
  }
  return result;
}

BOOL sub_216855488(int a1)
{
  uint64_t v2 = sub_21684E284();
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = a1;
    char v7 = (void *)(sub_21684E284() + 4 * a1);
    uint64_t v8 = off_264294268[a1];
    unint64_t v9 = atomic_load(&qword_26798AFD0);
    if (!v9) {
      unint64_t v9 = sub_2168536C8(&qword_26798AFD0);
    }
    sub_216854DAC(v9, v7, v8);
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 4 * v6));
  }
  return v3 == 2;
}

void sub_216855518(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216855518(a1, *a2);
    sub_216855518(a1, a2[1]);
    sub_216855574((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_216855574(uint64_t a1)
{
  sub_2167FB780(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

unint64_t sub_2168555C8(unint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v2 = (uint64_t *)(a1 + 80);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094(v14, "TF_DEBUG");
  sub_216779094(&v13, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v14, (uint64_t)&v13, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)&__p, " \t\n", &v18);
  sub_21680F80C(v2);
  *(std::string *)(a1 + 80) = v18;
  float v17 = &v18;
  memset(&v18, 0, sizeof(v18));
  sub_216782F20((void ***)&v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (sub_21685598C(*(unsigned __int8 **)(a1 + 80), *(unsigned __int8 **)(a1 + 88), "help") != *(unsigned __int8 **)(a1 + 88))
  {
    puts("Valid options for the TF_DEBUG environment variable are:\n\n      help               display this help message and exit\n      SYM1 [... SYMn]    enable SYM1 through SYMn for debugging\n\nTo disable a symbol for debugging, prepend a '-'; to match all symbols\n"
      "beginning with a prefix, use 'PREFIX*' (this is the only matching supported).\n"
      "Note that the order of processing matters.  For example, setting TF_DEBUG to\n"
      "\n"
      "      STAF_* SIC_* -SIC_REGISTRY_ENUMS GPT_IK\n"
      "\n"
      "enables debugging for any symbol in STAF, all symbols in SIC except for\n"
      "SIC_REGISTRY_ENUMS and the symbol GPT_IK.");
    exit(0);
  }
  if (atomic_exchange((atomic_ullong *volatile)&qword_26798AFD0, a1))
  {
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)"tf/instantiateSingleton.h";
    v18.__r_.__value_.__l.__size_ = (std::string::size_type)"SetInstanceConstructed";
    v18.__r_.__value_.__r.__words[2] = 56;
    int v19 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegi"
          "stry>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry]";
    char v20 = 0;
    int v21 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v18, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v3);
  }
  uint64_t v4 = sub_21684E284();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v4 + 8, "TF_DEBUG_REGISTRY", "debug the TfDebug registry");
  uint64_t v5 = sub_21684E284();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v5, "TF_DISCOVERY_TERSE", "coarse grain debugging of TfRegistryManager");
  uint64_t v6 = sub_21684E284();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v6 + 4, "TF_DISCOVERY_DETAILED", "detailed debugging of TfRegistryManager");
  uint64_t v7 = sub_21684E284();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v7 + 12, "TF_DLOPEN", "show files opened by TfDlopen");
  uint64_t v8 = sub_21684E284();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v8 + 16, "TF_DLCLOSE", "show files closed by TfDlclose");
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)sub_216855488(2);
  if (v9)
  {
    sub_216779094(v14, "Tf_DebugSymbolRegistry");
    sub_216779094(&v13, "pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry::Tf_DebugSymbolRegistry()");
    pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)v14, &v13, &__p);
    uint64_t v10 = std::string::append(&__p, "\n");
    std::string v18 = *v10;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((uint64_t)&v18);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }
  atomic_store(1u, byte_26798E35C);
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v9);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_26C74B6F0);
  return a1;
}

void sub_2168558DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_216782F20((void ***)&a21);
  sub_2167877AC(v35, *v38);
  sub_216855518(v34, *v37);
  sub_21678A498(v33, *v36);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21685598C(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned int v3 = a1;
  if (a1 != a2)
  {
    size_t v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            sub_216855AD4();
          uint64_t v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        uint64_t v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

BOOL sub_216855A40(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_216855AD4();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void sub_216855AD4()
{
}

void sub_216855AEC(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_216767A98(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264293930, MEMORY[0x263F8C068]);
}

void sub_216855B34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216855B48(char *__s2, long long *a2, uint64_t a3)
{
  if (a3)
  {
    int v5 = 0;
    unsigned __int8 v6 = 0;
    uint64_t v7 = 24 * a3;
    while (1)
    {
      if (*((char *)a2 + 23) < 0)
      {
        sub_216778F24(&__p, *(void **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v8 = *a2;
        __p.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
      }
      unsigned int v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!__p.__r_.__value_.__l.__size_) {
          goto LABEL_33;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
          goto LABEL_34;
        }
        p_p = &__p;
      }
      int v11 = p_p->__r_.__value_.__s.__data_[0];
      if (v11 == 45)
      {
        std::string::erase(&__p, 0, 1uLL);
        unsigned int v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if ((v9 & 0x80) != 0)
      {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
LABEL_17:
          std::string::size_type v13 = size - 1;
          if ((v9 & 0x80) != 0)
          {
            unsigned __int8 v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if (*(unsigned char *)(__p.__r_.__value_.__r.__words[0] + v13) != 42) {
              goto LABEL_29;
            }
            std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
LABEL_22:
            std::string::erase(&__p, v15 - 1, 0xFFFFFFFFFFFFFFFFLL);
            LOBYTE(v9) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v16 = &__p;
            }
            else {
              uint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
            }
            int v18 = strncmp(__s2, (const char *)v16, v17);
          }
          else
          {
            unsigned __int8 v14 = &__p;
            if (__p.__r_.__value_.__s.__data_[v13] == 42)
            {
              std::string::size_type v15 = v9;
              goto LABEL_22;
            }
LABEL_29:
            int v18 = strcmp((const char *)v14, __s2);
          }
          if (!v18)
          {
            unsigned __int8 v6 = 1;
            int v5 = v11 != 45;
          }
          if ((v9 & 0x80) == 0) {
            goto LABEL_34;
          }
        }
LABEL_33:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_34;
      }
      if (v9)
      {
        std::string::size_type size = v9;
        goto LABEL_17;
      }
LABEL_34:
      a2 = (long long *)((char *)a2 + 24);
      v7 -= 24;
      if (!v7) {
        return v6 | (v5 << 8);
      }
    }
  }
  unsigned __int8 v6 = 0;
  int v5 = 0;
  return v6 | (v5 << 8);
}

void sub_216855CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216855CF4(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unsigned __int8 v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v9, a2);
  unint64_t result = *v6;
  if (!*v6)
  {
    sub_216855D8C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_216855D8C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned __int8 v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t result = v6 + 32;
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    unint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)unint64_t result = v9;
  }
  v6[56] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216855E18(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_21678C278(v3, v2);
  _Unwind_Resume(a1);
}

BOOL sub_216855E34(uint64_t a1, char *a2)
{
  uint64_t v4 = a1 + 8;
  sub_216779094(__p, a2);
  uint64_t v5 = sub_21678C2D8(v4, (const void **)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 16 == v5) {
    return (sub_216855B48(a2, *(long long **)(a1 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3)) >> 8) & 1;
  }
  else {
    return *(unsigned char *)(v5 + 56) != 0;
  }
}

void sub_216855ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_216855EF0(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  unsigned __int8 v6 = (void **)sub_21677B220((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    char v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    long long v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *long long v9 = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 7) = v7 + 4;
    char v13 = 1;
    sub_21677B358(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_216855FC0((uint64_t)v12, 0);
  }
  return v7;
}

void sub_216855FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216855574((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *sub_216856018(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unsigned __int8 v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        char v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unsigned __int8 v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unsigned __int8 v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_21677B358(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

_OWORD *sub_2168560D4(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  unsigned __int8 v6 = (void **)sub_21677B220((uint64_t)a1, &v12, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    char v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x40uLL);
    unint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *unint64_t v9 = 0;
    *((unsigned char *)v7 + 56) = 0;
    sub_21677B358(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_216856170(uint64_t **a1, const void **a2, long long *a3, long long *a4)
{
  unint64_t v7 = (uint64_t **)sub_21677B220((uint64_t)a1, &v12, a2);
  char v8 = *v7;
  if (!*v7)
  {
    unint64_t v9 = v7;
    sub_216856214((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_21677B358(a1, v12, v9, v11[0]);
    char v8 = v11[0];
    v11[0] = 0;
    sub_21677B548((uint64_t)v11, 0);
  }
  return v8;
}

char *sub_216856214@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  char v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  unint64_t result = sub_216856288(v8 + 32, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216856270(_Unwind_Exception *a1)
{
  sub_21677B548(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_216856288(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  unsigned __int8 v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)unsigned __int8 v6 = v7;
  }
  return __dst;
}

void sub_216856304(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216856320(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unsigned __int8 v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    char v8 = v6;
    sub_2168563CC((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_216855FC0((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_2168563CC@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unsigned __int8 v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t result = v6 + 4;
  char v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    unint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)unint64_t result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_21685644C(_Unwind_Exception *a1)
{
  sub_216855FC0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_216856464()
{
  sub_2168564EC();

  return sub_216856618();
}

void pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice(pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *this)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::TfDebugSymbolEnableChangedNotice::~TfDebugSymbolEnableChangedNotice(pxrInternal__aapl__pxrReserved__::TfDebugSymbolEnableChangedNotice *this)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v1);
}

uint64_t *sub_2168564EC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216856744((unint64_t **)v5);
  BOOL v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2168565CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216856618()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216856744((unint64_t **)v5);
  BOOL v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2168566F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216856744(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2168567B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168567DC()
{
  sub_216779094(v2, "TF_DIAGNOSTIC_CODING_ERROR_TYPE");
  sub_216779094(__p, "Coding Error");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B770, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "TF_DIAGNOSTIC_FATAL_CODING_ERROR_TYPE");
  sub_216779094(__p, "Fatal Coding Error");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B770, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "TF_DIAGNOSTIC_RUNTIME_ERROR_TYPE");
  sub_216779094(__p, "Runtime Error");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B770, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "TF_DIAGNOSTIC_FATAL_ERROR_TYPE");
  sub_216779094(__p, "Fatal Error");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B770, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "TF_DIAGNOSTIC_NONFATAL_ERROR_TYPE");
  sub_216779094(__p, "Error");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B770, 5, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "TF_DIAGNOSTIC_WARNING_TYPE");
  sub_216779094(__p, "Warning");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B770, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "TF_DIAGNOSTIC_STATUS_TYPE");
  sub_216779094(__p, "Status");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B770, 7, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "TF_APPLICATION_EXIT_TYPE");
  sub_216779094(__p, "Application Exit");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B770, 8, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216856AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat(pxrInternal__aapl__pxrReserved__ *this, const char *a2, char *a3, ...)
{
  va_start(va, a3);
  va_copy(v8, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__s1, this, va, a3);
  if ((v7 & 0x80000000) == 0) {
    return strdup((const char *)__s1);
  }
  char v4 = __s1[0];
  char v3 = strdup(__s1[0]);
  operator delete(v4);
  return v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper(uint64_t a1, const std::string::value_type *a2, std::string::value_type *a3)
{
  sub_216779094(&v18, "Failed verification: ' ");
  uint64_t v6 = std::string::append(&v18, a2);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  *(void *)&long long v15 = *((void *)&v6->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  va_list v8 = std::string::append((std::string *)__p, " '");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v15) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if (!a3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    std::string::append(&v19, " -- ");
    std::string::append(&v19, a3);
    free(a3);
  }
LABEL_8:
  sub_216779094(__p, "TF_FATAL_VERIFY");
  BOOL v10 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
  BOOL v11 = v10;
  if (SBYTE7(v15) < 0)
  {
    operator delete(__p[0]);
    if (v11) {
      goto LABEL_10;
    }
  }
  else if (v10)
  {
LABEL_10:
    long long v12 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    long long v15 = v12;
    uint64_t v16 = *(void *)(a1 + 32);
    int v17 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((uint64_t)__p, (uint64_t)&v19);
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(a1, 1, (uint64_t *)&v19);
LABEL_13:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_216856D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 41) < 0) {
    operator delete(*(void **)(v24 - 64));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_TerminateHandler(pxrInternal__aapl__pxrReserved__ *this)
{
  sub_216779094(v2, "<unknown reason>");
  sub_216779094(v1, "<unknown type>");
  std::set_terminate((std::terminate_handler)sub_21685747C);
  __cxa_rethrow();
}

void sub_216857368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31)
{
  uint64_t v33 = *(void **)(v31 - 160);
  if (v33)
  {
    *(void *)(v31 - 152) = v33;
    operator delete(v33);
  }
  if (*(char *)(v31 - 105) < 0) {
    operator delete(*(void **)(v31 - 128));
  }
  if (*(char *)(v31 - 73) < 0) {
    operator delete(*(void **)(v31 - 96));
  }
  _Unwind_Resume(exception_object);
}

void sub_21685747C(uint64_t a1, uint64_t a2, char *a3)
{
  v3[0] = "tf/diagnostic.cpp";
  v3[1] = "_BadThrowHandler";
  v3[2] = 115;
  v3[3] = "void pxrInternal__aapl__pxrReserved__::_BadThrowHandler()";
  char v4 = 0;
  int v5 = 4;
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"std::terminate() called without a current exception", a3);
}

void pxrInternal__aapl__pxrReserved__::TfSetProgramNameForErrors(char *a1, const char *a2)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  pxrInternal__aapl__pxrReserved__::ArchSetProgramNameForErrors((pxrInternal__aapl__pxrReserved__ *)a1, a2);
}

void *pxrInternal__aapl__pxrReserved__::TfGetProgramNameForErrors@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, void *a2@<X8>)
{
  ProgramNameForErrors = (char *)pxrInternal__aapl__pxrReserved__::ArchGetProgramNameForErrors(this);

  return sub_216779094(a2, ProgramNameForErrors);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfInstallTerminateAndCrashHandlers(pxrInternal__aapl__pxrReserved__ *this)
{
  std::set_terminate((std::terminate_handler)pxrInternal__aapl__pxrReserved__::Tf_TerminateHandler);
  v2.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_2168575C4;
  *(void *)&v2.sa_masunsigned int k = 0x4000000688;
  sigaction(11, &v2, 0);
  sigaction(10, &v2, 0);
  sigaction(8, &v2, 0);
  sigaction(6, &v2, 0);
  return sigaction(4, &v2, 0);
}

void sub_2168575C4(int a1)
{
  if ((a1 - 4) > 7) {
    sigaction v2 = "unknown signal";
  }
  else {
    sigaction v2 = off_2642942B8[a1 - 4];
  }
  pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::Tf_ScopeDescriptionStackReportLock((pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *)&v4);
  pxrInternal__aapl__pxrReserved__::ArchLogFatalProcessState((pxrInternal__aapl__pxrReserved__ *)v2, 0, v4, v3);
  pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::~Tf_ScopeDescriptionStackReportLock((pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *)&v4);
  fflush((FILE *)*MEMORY[0x263EF8358]);
  fflush((FILE *)*MEMORY[0x263EF8348]);
  _exit(a1 + 128);
}

void sub_216857648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::~Tf_ScopeDescriptionStackReportLock((pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDiagnosticBase::TfDiagnosticBase(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, long long *a5, std::string *__str, void (**a7)(uint64_t), char a8)
{
  long long v14 = *a5;
  long long v15 = a5[1];
  *(void *)(a1 + 32) = *((void *)a5 + 4);
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v15;
  *(void *)(a1 + 40) = 0;
  uint64_t v16 = MEMORY[0x263F8C258];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v17 = a1 + 80;
  *(_DWORD *)(a1 + 72) = 0;
  std::string v18 = (unint64_t *)(a1 + 104);
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  std::string::operator=((std::string *)(a1 + 40), __str);
  *(void *)(a1 + 64) = a2;
  *(_DWORD *)(a1 + 72) = a3;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(a2, a3, (uint64_t)&v21);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)v17);
  }
  *(_OWORD *)uint64_t v17 = v21;
  *(void *)(v17 + 16) = v22;
  sub_2168577F4(v18, a7);
  *(unsigned char *)(a1 + 144) = a8;
  int v19 = *(char *)(a1 + 103);
  if (v19 < 0)
  {
    if (!*(void *)(a1 + 88)) {
      goto LABEL_7;
    }
  }
  else if (!*(unsigned char *)(a1 + 103))
  {
LABEL_7:
    if (a4)
    {
      sub_216779094(&v21, a4);
      if ((*(unsigned char *)(a1 + 103) & 0x80) == 0)
      {
LABEL_10:
        *(_OWORD *)uint64_t v17 = v21;
        *(void *)(v17 + 16) = v22;
        return a1;
      }
    }
    else
    {
      long long v21 = 0uLL;
      uint64_t v22 = 0;
      if ((v19 & 0x80) == 0) {
        goto LABEL_10;
      }
    }
    operator delete(*(void **)v17);
    goto LABEL_10;
  }
  return a1;
}

void sub_2168577B8(_Unwind_Exception *a1)
{
  sub_2168579F4(v3);
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

unint64_t *sub_2168577F4(unint64_t *a1, void (**a2)(uint64_t))
{
  v4[8] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  v4[0] = 0;
  v4[1] = 0;
  if (*a2) {
    (*a2)(1);
  }
  if (v4 != (uint64_t (**)(void, void, void, void, void))a1 && *a1 != (unsigned __int128)0) {
    ((void (*)(uint64_t, unint64_t *, uint64_t (**)(void, void, void, void, void), void, void))*a1)(2, a1, v4, 0, 0);
  }
  sub_2168579F4(v4);
  return a1;
}

void sub_216857924(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfDiagnosticBase::IsFatal(pxrInternal__aapl__pxrReserved__::TfDiagnosticBase *this)
{
  unsigned int v1 = *((_DWORD *)this + 18);
  BOOL v2 = v1 > 8;
  int v3 = (1 << v1) & 0x114;
  return !v2
      && v3 != 0
      && strcmp((const char *)(*(void *)(*((void *)this + 8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021746972CLL & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::TfDiagnosticBase::IsCodingError(pxrInternal__aapl__pxrReserved__::TfDiagnosticBase *this)
{
  return (*((_DWORD *)this + 18) - 1) <= 1
      && strcmp((const char *)(*(void *)(*((void *)this + 8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021746972CLL & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t (**sub_2168579F4(uint64_t (**result)(void, void, void, void, void)))(void, void, void, void, void)
{
  if (*result) {
    return (uint64_t (**)(void, void, void, void, void))(*result)(0, result, 0, 0, 0);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a2, v6, (uint64_t)__p);
  if (v10 >= 0) {
    long long v7 = __p;
  }
  else {
    long long v7 = (void **)__p[0];
  }
  long long v8 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v8;
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  long long v15 = v7;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(v11, a3);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216857AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(uint64_t a1, int a2, uint64_t *a3)
{
  int v3 = &unk_26C74B770;
  int v4 = a2;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(a1, (uint64_t *)&v3, a3);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  va_start(va, this);
  va_copy(v7, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, (char *)this);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(a1, a2, (uint64_t *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216857B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(uint64_t a1, int a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  va_start(va, this);
  va_copy(v7, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, (char *)this);
  long long v8 = &unk_26C74B770;
  int v9 = a2;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(a1, (uint64_t *)&v8, (uint64_t *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216857C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostQuietlyErrorHelper(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  v16[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a2, v6, (uint64_t)__p);
  if (v10 >= 0) {
    va_list v7 = __p;
  }
  else {
    va_list v7 = (void **)__p[0];
  }
  long long v8 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v8;
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  long long v15 = v7;
  v16[0] = 0;
  v16[1] = 0;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostQuietly(v11, a3, v16);
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))v16);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216857CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))(v15 - 88));
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostQuietlyErrorHelper(uint64_t a1, uint64_t *a2, void (**a3)(uint64_t, void, void, void, void), uint64_t *a4)
{
  v18[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a2, v8, (uint64_t)__p);
  if (v12 >= 0) {
    int v9 = __p;
  }
  else {
    int v9 = (void **)__p[0];
  }
  long long v10 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v10;
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  uint64_t v17 = v9;
  v18[0] = 0;
  v18[1] = 0;
  if (*a3) {
    (*a3)(1, a3, v18, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostQuietly(v13, a4, v18);
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))v18);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216857E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostQuietlyErrorHelper(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  va_start(va, this);
  va_copy(v7, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, (char *)this);
  pxrInternal__aapl__pxrReserved__::Tf_PostQuietlyErrorHelper(a1, a2, (uint64_t *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216857EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostQuietlyErrorHelper(uint64_t a1, uint64_t *a2, char *a3, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  va_start(va, this);
  va_copy(v9, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::Tf_PostQuietlyErrorHelper(a1, a2, (void (**)(uint64_t, void, void, void, void))a3, (uint64_t *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216857F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(uint64_t a1, void (**a2)(uint64_t, void, void, void, void), uint64_t *a3, uint64_t *a4)
{
  v18[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a3, v8, (uint64_t)__p);
  if (v12 >= 0) {
    va_list v9 = __p;
  }
  else {
    va_list v9 = (void **)__p[0];
  }
  long long v10 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v10;
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  uint64_t v17 = v9;
  v18[0] = 0;
  v18[1] = 0;
  if (*a2) {
    (*a2)(1, a2, v18, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostWithInfo(v13, a4, v18);
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))v18);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216858048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(uint64_t a1, void (**a2)(uint64_t, void, void, void, void), char *a3, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  va_start(va, this);
  va_copy(v9, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(a1, a2, (uint64_t *)a3, (uint64_t *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2168580F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, std::string *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C74B770, 6, (uint64_t)__p);
  if (v7 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  long long v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = &unk_26C74B770;
  uint64_t v11 = 6;
  char v12 = v4;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post((uint64_t)v8, a2);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2168581A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, pxrInternal__aapl__pxrReserved__ *this, char *a3, ...)
{
  va_start(va, a3);
  va_copy(v5, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216858224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, uint64_t *a2, std::string *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a2, v6, (uint64_t)__p);
  if (v10 >= 0) {
    char v7 = __p;
  }
  else {
    char v7 = (void **)__p[0];
  }
  long long v8 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v8;
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post((uint64_t)v11, a3);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2168582D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, int a2, std::string *a3)
{
  int v3 = &unk_26C74B770;
  int v4 = a2;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(a1, (uint64_t *)&v3, a3);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  va_start(va, this);
  va_copy(v6, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, (char *)this);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216858388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, int a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  va_start(va, this);
  va_copy(v6, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, (char *)this);
  char v7 = &unk_26C74B770;
  int v8 = a2;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(a1, (uint64_t *)&v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216858418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, void (**a2)(uint64_t, void, void, void, void), uint64_t *a3, std::string *a4)
{
  v18[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a3, v8, (uint64_t)__p);
  if (v12 >= 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  long long v10 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v10;
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  uint64_t v17 = v9;
  v18[0] = 0;
  v18[1] = 0;
  if (*a2) {
    (*a2)(1, a2, v18, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::PostWithInfo((uint64_t)v13, a4, v18);
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))v18);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216858528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, void (**a2)(uint64_t, void, void, void, void), char *a3, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  va_start(va, this);
  va_copy(v8, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(a1, a2, (uint64_t *)a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2168585D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(uint64_t a1, std::string *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C74B770, 7, (uint64_t)__p);
  if (v7 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  long long v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = &unk_26C74B770;
  uint64_t v11 = 7;
  char v12 = v4;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post((uint64_t)v8, a2);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216858688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(uint64_t a1, pxrInternal__aapl__pxrReserved__ *this, char *a3, ...)
{
  va_start(va, a3);
  va_copy(v5, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216858704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(uint64_t a1, uint64_t *a2, std::string *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a2, v6, (uint64_t)__p);
  if (v10 >= 0) {
    char v7 = __p;
  }
  else {
    char v7 = (void **)__p[0];
  }
  long long v8 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v8;
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = v5;
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post((uint64_t)v11, a3);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2168587B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  va_start(va, this);
  va_copy(v6, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, (char *)this);
  pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216858834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(uint64_t a1, void (**a2)(uint64_t, void, void, void, void), uint64_t *a3, std::string *a4)
{
  v18[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a3, v8, (uint64_t)__p);
  if (v12 >= 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  long long v10 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v10;
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  uint64_t v17 = v9;
  v18[0] = 0;
  v18[1] = 0;
  if (*a2) {
    (*a2)(1, a2, v18, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::PostWithInfo((uint64_t)v13, a4, v18);
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))v18);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216858944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(uint64_t a1, void (**a2)(uint64_t, void, void, void, void), char *a3, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  va_start(va, this);
  va_copy(v8, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(a1, a2, (uint64_t *)a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2168589EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueError(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, pxrInternal__aapl__pxrReserved__ *a2, ...)
{
  va_start(va, a2);
  va_copy(v17, va);
  uint64_t v4 = *((unsigned int *)this + 10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C74B770, v4, (uint64_t)v10);
  if (v11 >= 0) {
    va_list v6 = v10;
  }
  else {
    va_list v6 = (void **)v10[0];
  }
  long long v7 = *((_OWORD *)this + 1);
  v12[0] = *(_OWORD *)this;
  v12[1] = v7;
  uint64_t v13 = *((void *)this + 4);
  uint64_t v14 = &unk_26C74B770;
  uint64_t v15 = v4;
  uint64_t v16 = v6;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, a2, v17, v5);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(v12, (uint64_t *)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_216858ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3, ...)
{
  va_start(va, a3);
  va_copy(v10, va);
  uint64_t v3 = *((unsigned int *)this + 10);
  long long v4 = *((_OWORD *)this + 1);
  v6[0] = *(_OWORD *)this;
  v6[1] = v4;
  uint64_t v7 = *((void *)this + 4);
  va_list v8 = &unk_26C74B770;
  uint64_t v9 = v3;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf(v5, a2, va, a3);
  sub_216858B7C((uint64_t)v6, (uint64_t)v5);
  __break(1u);
}

void sub_216858B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216858B7C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_21685935C();
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostFatal(v4, a1, *(void *)(a1 + 40), *(void *)(a1 + 48), a2);
  return pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning(v5, v6);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, pxrInternal__aapl__pxrReserved__ *a2, ...)
{
  va_start(va, a2);
  va_copy(v16, va);
  uint64_t v4 = *((unsigned int *)this + 10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C74B770, v4, (uint64_t)v9);
  if (v10 >= 0) {
    va_list v6 = v9;
  }
  else {
    va_list v6 = (void **)v9[0];
  }
  long long v7 = *((_OWORD *)this + 1);
  v11[0] = *(_OWORD *)this;
  v11[1] = v7;
  uint64_t v12 = *((void *)this + 4);
  uint64_t v13 = &unk_26C74B770;
  uint64_t v14 = v4;
  uint64_t v15 = v6;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a2, v16, v5);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post((uint64_t)v11, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_216858C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueStatus(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, pxrInternal__aapl__pxrReserved__ *a2, ...)
{
  va_start(va, a2);
  va_copy(v16, va);
  uint64_t v4 = *((unsigned int *)this + 10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C74B770, v4, (uint64_t)v9);
  if (v10 >= 0) {
    va_list v6 = v9;
  }
  else {
    va_list v6 = (void **)v9[0];
  }
  long long v7 = *((_OWORD *)this + 1);
  v11[0] = *(_OWORD *)this;
  v11[1] = v7;
  uint64_t v12 = *((void *)this + 4);
  uint64_t v13 = &unk_26C74B770;
  uint64_t v14 = v4;
  uint64_t v15 = v6;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a2, v16, v5);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post((uint64_t)v11, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_216858D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueError(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C74B770, v4, (uint64_t)__p);
  if (v8 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  long long v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = &unk_26C74B770;
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(v9, a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216858E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  long long v3 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v3;
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = &unk_26C74B770;
  uint64_t v9 = v2;
  uint64_t v4 = sub_216858B7C((uint64_t)v6, a2);
  return pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning(v4);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning(uint64_t a1, std::string *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C74B770, v4, (uint64_t)__p);
  if (v8 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  long long v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = &unk_26C74B770;
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post((uint64_t)v9, a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216858F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueStatus(uint64_t a1, std::string *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C74B770, v4, (uint64_t)__p);
  if (v8 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  long long v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = &unk_26C74B770;
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post((uint64_t)v9, a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216858FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *this, pxrInternal__aapl__pxrReserved__ *a2, ...)
{
  va_start(va, a2);
  va_copy(v17, va);
  uint64_t v4 = *((unsigned int *)this + 10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C74B770, v4, (uint64_t)v10);
  if (v11 >= 0) {
    long long v6 = v10;
  }
  else {
    long long v6 = (void **)v10[0];
  }
  long long v7 = *((_OWORD *)this + 1);
  v12[0] = *(_OWORD *)this;
  v12[1] = v7;
  uint64_t v13 = *((void *)this + 4);
  uint64_t v14 = &unk_26C74B770;
  uint64_t v15 = v4;
  uint64_t v16 = v6;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, a2, v17, v5);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(v12, (uint64_t *)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_2168590BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3, ...)
{
  va_start(va, a3);
  va_copy(v10, va);
  uint64_t v3 = *((unsigned int *)this + 10);
  long long v4 = *((_OWORD *)this + 1);
  v6[0] = *(_OWORD *)this;
  v6[1] = v4;
  uint64_t v7 = *((void *)this + 4);
  char v8 = &unk_26C74B770;
  uint64_t v9 = v3;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf(v5, a2, va, a3);
  sub_216858B7C((uint64_t)v6, (uint64_t)v5);
  __break(1u);
}

void sub_216859150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueWarning(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *this, pxrInternal__aapl__pxrReserved__ *a2, ...)
{
  va_start(va, a2);
  va_copy(v16, va);
  uint64_t v4 = *((unsigned int *)this + 10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C74B770, v4, (uint64_t)v9);
  if (v10 >= 0) {
    long long v6 = v9;
  }
  else {
    long long v6 = (void **)v9[0];
  }
  long long v7 = *((_OWORD *)this + 1);
  v11[0] = *(_OWORD *)this;
  v11[1] = v7;
  uint64_t v12 = *((void *)this + 4);
  uint64_t v13 = &unk_26C74B770;
  uint64_t v14 = v4;
  uint64_t v15 = v6;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a2, v16, v5);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post((uint64_t)v11, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_216859230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueStatus(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *this, pxrInternal__aapl__pxrReserved__ *a2, ...)
{
  va_start(va, a2);
  va_copy(v16, va);
  uint64_t v4 = *((unsigned int *)this + 10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C74B770, v4, (uint64_t)v9);
  if (v10 >= 0) {
    long long v6 = v9;
  }
  else {
    long long v6 = (void **)v9[0];
  }
  long long v7 = *((_OWORD *)this + 1);
  v11[0] = *(_OWORD *)this;
  v11[1] = v7;
  uint64_t v12 = *((void *)this + 4);
  uint64_t v13 = &unk_26C74B770;
  uint64_t v14 = v4;
  uint64_t v15 = v6;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a2, v16, v5);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post((uint64_t)v11, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_216859328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_21685935C()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__15TfDiagnosticMgrE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  uint64_t v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)operator new(0x1C8uLL);
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::TfDiagnosticMgr(v9);
      unint64_t v11 = atomic_load(a1);
      if (v11)
      {
        if (v9 != (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v11)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          uint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMg"
                "r>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v10);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        uint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>"
              "::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v10, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v5;
}

void sub_216859558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::DeleteInstance()
{
  for (uint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        result;
        uint64_t result = v1)
  {
    uint64_t v1 = result;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance, (unint64_t *)&v1, 0);
    if (v1 == result)
    {
      uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v2();
    }
    sched_yield();
  }
  return result;
}

void sub_2168596CC()
{
  sub_216779094(v7, "TF_LOG_STACK_TRACE_ON_ERROR");
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B7D8, 0, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  uint64_t v0 = sub_21685BFCC();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "TF_LOG_STACK_TRACE_ON_ERROR", "log stack traces for all errors");
  sub_216779094(v7, "TF_LOG_STACK_TRACE_ON_WARNING");
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B7D8, 1, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  uint64_t v1 = sub_21685BFCC();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "TF_LOG_STACK_TRACE_ON_WARNING", "log stack traces for all warnings");
  sub_216779094(v7, "TF_ERROR_MARK_TRACKING");
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B7D8, 2, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  uint64_t v2 = sub_21685BFCC();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 8, "TF_ERROR_MARK_TRACKING", "capture stack traces at TfErrorMark ctor/dtor, enable TfReportActiveMarks debugging API.");
  sub_216779094(v7, "TF_PRINT_ALL_POSTED_ERRORS_TO_STDERR");
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74B7D8, 3, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  uint64_t v3 = sub_21685BFCC();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 12, "TF_PRINT_ALL_POSTED_ERRORS_TO_STDERR", "print all posted errors immediately, meaning that even errors that are expected and handled will be printed, producing possibly confusing output");
}

void sub_21685989C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::Delegate::_UnhandledAbort(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::Delegate *this, BOOL a2)
{
  uint64_t v2 = sub_2168598E4((uint64_t)this, a2);
  return sub_2168598E4(v2, v3);
}

uint64_t sub_2168598E4(uint64_t a1, BOOL a2)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)pxrInternal__aapl__pxrReserved__::ArchAbort(0, a2);
  return pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::TfDiagnosticMgr(v2);
}

pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::TfDiagnosticMgr(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26C74B790;
  sub_21685C690((void *)this + 2);
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  sub_21685C910((void *)this + 19);
  sub_21685CB94((void *)this + 31);
  v6[0] = 0;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)sub_21685C330((void *)this + 43, v6);
  *((unsigned char *)this + 448) = 0;
  atomic_store(0, (unint64_t *)this + 18);
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance, (unint64_t)this))
  {
    v6[0] = (uint64_t)"tf/instantiateSingleton.h";
    v6[1] = (uint64_t)"SetInstanceConstructed";
    _OWORD v6[2] = 56;
    v6[3] = (uint64_t)"static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagn"
                     "osticMgr>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr]";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v3);
  }
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v2);
  return this;
}

void sub_216859A14(_Unwind_Exception *a1)
{
  sub_21685D17C(v5);
  sub_21685CF50(v4);
  int v8 = *v6;
  if (*v6)
  {
    *(void *)(v2 + 120) = v8;
    operator delete(v8);
  }
  sub_21685CE20(v3);
  sub_216859A88(v1, v9);
  _Unwind_Resume(a1);
}

uint64_t *sub_216859A88(uint64_t *a1, const void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    *(unsigned char *)(v3 + 14) = 0;
    if (*(unsigned char *)(v3 + 13)) {
      pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::Invoke2(v3, a2);
    }
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::~TfDiagnosticMgr(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this)
{
  *(void *)this = &unk_26C74B790;
  sub_21685D318((void *)this + 43);
  sub_21685D17C((void *)this + 31);
  sub_21685CF50((void *)this + 19);
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  sub_21685CE20((void *)this + 2);
  sub_216859A88((uint64_t *)this + 1, v3);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::~TfDiagnosticMgr(this);

  operator delete(v1);
}

void *pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AddDelegate(void *this, pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::Delegate *a2)
{
  if (a2)
  {
    uint64_t v3 = this;
    char v19 = 1;
    char v18 = this + 17;
    tbb::spin_rw_mutex_v3::internal_acquire_writer(this + 17);
    unint64_t v4 = v3[16];
    uint64_t v5 = (void *)v3[15];
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v7 = v3[14];
      uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
      if ((unint64_t)(v8 + 1) >> 61) {
        sub_21677CB10();
      }
      uint64_t v9 = v4 - v7;
      uint64_t v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
        uint64_t v10 = v8 + 1;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11) {
        std::string v12 = (char *)sub_21677CB28((uint64_t)(v3 + 16), v11);
      }
      else {
        std::string v12 = 0;
      }
      uint64_t v13 = &v12[8 * v8];
      int v14 = &v12[8 * v11];
      *(void *)uint64_t v13 = a2;
      uint64_t v6 = v13 + 8;
      uint64_t v16 = (char *)v3[14];
      uint64_t v15 = (char *)v3[15];
      if (v15 != v16)
      {
        do
        {
          uint64_t v17 = *((void *)v15 - 1);
          v15 -= 8;
          *((void *)v13 - 1) = v17;
          v13 -= 8;
        }
        while (v15 != v16);
        uint64_t v15 = (char *)v3[14];
      }
      v3[14] = v13;
      v3[15] = v6;
      v3[16] = v14;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      void *v5 = a2;
      uint64_t v6 = v5 + 1;
    }
    v3[15] = v6;
    return sub_21685C048(&v18);
  }
  return this;
}

void sub_216859CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::RemoveDelegate(void *this, pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::Delegate *a2)
{
  uint64_t v6 = a2;
  if (a2)
  {
    uint64_t v2 = (uint64_t)this;
    char v5 = 1;
    unint64_t v4 = this + 17;
    tbb::spin_rw_mutex_v3::internal_acquire_writer(this + 17);
    uint64_t v3 = sub_216859D70(*(void **)(v2 + 112), *(void **)(v2 + 120), &v6);
    if (*(void **)(v2 + 120) != v3) {
      *(void *)(v2 + 120) = v3;
    }
    return sub_21685C048(&v4);
  }
  return this;
}

void sub_216859D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_216859D70(void *result, void *a2, void *a3)
{
  if (result == a2)
  {
LABEL_4:
    uint64_t result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2) {
        goto LABEL_4;
      }
    }
  }
  if (result != a2)
  {
    for (uint64_t i = result + 1; i != a2; ++i)
    {
      if (*i != *a3) {
        *result++ = *i;
      }
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AppendError(atomic_ullong *a1, long long *a2)
{
  char v9 = 0;
  if (*(void *)sub_21685C0E0((uint64_t)(a1 + 43), &v9))
  {
    char v10 = 0;
    unint64_t v4 = (uint64_t *)sub_2168520EC(a1 + 19, &v10);
    char v5 = sub_21685D3F4((uint64_t)v4, 0, 0, a2);
    uint64_t v6 = *v4;
    void *v5 = *v4;
    v5[1] = v4;
    *(void *)(v6 + 8) = v5;
    *unint64_t v4 = (uint64_t)v5;
    ++v4[2];
    unint64_t add = atomic_fetch_add(a1 + 18, 1uLL);
    uint64_t v8 = *v4;
    *(void *)(v8 + 152) = add;
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_AppendErrorsToLogText((uint64_t)a1, v8);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_ReportError(a1, (uint64_t)a2);
  }
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_ReportError(atomic_ullong *a1, uint64_t a2)
{
  LOBYTE(v11) = 0;
  unint64_t v4 = (unsigned char *)sub_2168520EC(a1 + 2, &v11);
  if (!*v4)
  {
    char v5 = v4;
    *unint64_t v4 = 1;
    BYTE8(v11) = 0;
    *(void *)&long long v11 = a1 + 17;
    tbb::spin_rw_mutex_v3::internal_acquire_reader(a1 + 17);
    uint64_t v6 = (void *)a1[14];
    uint64_t v7 = (void *)a1[15];
    if (v6 == v7)
    {
      uint64_t v8 = (void *)a1[14];
    }
    else
    {
      do
      {
        if (*v6) {
          (*(void (**)(void, uint64_t))(*(void *)*v6 + 16))(*v6, a2);
        }
        ++v6;
      }
      while (v6 != v7);
      uint64_t v8 = (void *)a1[14];
      uint64_t v6 = (void *)a1[15];
    }
    sub_21685C048(&v11);
    if (v8 == v6 && *(unsigned char *)(a2 + 144) == 0)
    {
      char v10 = (FILE *)*MEMORY[0x263EF8348];
      long long v11 = *(_OWORD *)(a2 + 64);
      sub_21685A38C(v10, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)&v11, a2, (uint64_t *)(a2 + 40));
    }
    unsigned char *v5 = 0;
  }
}

void sub_216859F8C(_Unwind_Exception *exception_object)
{
  unsigned char *v1 = 0;
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_AppendErrorsToLogText(uint64_t a1, uint64_t a2)
{
  char v6 = 0;
  uint64_t v4 = sub_2168520EC((atomic_ullong *)(a1 + 248), &v6);
  char v7 = 0;
  uint64_t v5 = sub_2168520EC((atomic_ullong *)(a1 + 152), &v7);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText::_AppendAndPublishImpl(v4, 0, a2, v5);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_SpliceErrors(atomic_ullong *a1, void *a2)
{
  char v9 = 0;
  if (*(void *)sub_21685C0E0((uint64_t)(a1 + 43), &v9))
  {
    unint64_t add = atomic_fetch_add(a1 + 18, a2[2]);
    for (uint64_t i = (void *)a2[1]; i != a2; uint64_t i = (void *)i[1])
      i[19] = add++;
    char v10 = 0;
    char v6 = (uint64_t *)sub_2168520EC(a1 + 19, &v10);
    uint64_t v7 = a2[1];
    sub_21685A0DC((uint64_t)v6, v6, a2);
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_AppendErrorsToLogText((uint64_t)a1, v7);
  }
  else
  {
    for (uint64_t j = (void *)a2[1]; j != a2; uint64_t j = (void *)j[1])
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_ReportError(a1, (uint64_t)(j + 2));
  }
}

uint64_t sub_21685A0DC(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    uint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    *uint64_t v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void (**a7)(void, void, void, void, void), unsigned __int8 a8)
{
  v27[6] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  BOOL v16 = sub_216855488(7);
  if (v16) {
    pxrInternal__aapl__pxrReserved__::ArchDebuggerTrap((pxrInternal__aapl__pxrReserved__ *)v16);
  }
  if (sub_21685A328(0))
  {
    sub_21685A38C((FILE *)*MEMORY[0x263EF8348], (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)&v18, a5, a6);
    sub_216779094(__p, "ERROR");
    pxrInternal__aapl__pxrReserved__::TfLogStackTrace((char *)__p, 0);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  else if (sub_21685A328(3))
  {
    sub_21685A38C((FILE *)*MEMORY[0x263EF8348], (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)&v18, a5, a6);
  }
  unsigned __int8 v17 = *(unsigned char *)(a1 + 448);
  v20[0] = 0;
  v20[1] = 0;
  if (*a7) {
    (*a7)(1, a7, v20, 0, 0);
  }
  ((void (*)(void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t (**)(void, void, void, void, void), BOOL, uint64_t, uint64_t))pxrInternal__aapl__pxrReserved__::TfError::TfError)(__p, a2, a3, a4, a5, a6, v20, (v17 | a8) != 0, v18, v19);
  sub_2168579F4(v20);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AppendError((atomic_ullong *)a1, (long long *)__p);
  sub_2168579F4(v27);
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
}

void sub_21685A2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21685A328(int a1)
{
  uint64_t v2 = sub_21685BFCC();
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = sub_21685BFCC();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_2642942F8[a1]);
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

void sub_21685A38C(FILE *a1, pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *a2, uint64_t a3, uint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::FormatDiagnostic(a2, a3, a4, (uint64_t)__p);
  if (v7 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  fputs((const char *)v5, a1);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

uint64_t sub_21685A3F4(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostError(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this, const pxrInternal__aapl__pxrReserved__::TfDiagnosticBase *a2))(void, void, void, void, void)
{
  v11[4] = *(void (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v4 = (char *)a2 + 80;
  uint64_t v5 = *((void *)a2 + 8);
  uint64_t v6 = *((void *)a2 + 9);
  if (*((char *)a2 + 103) >= 0) {
    char v7 = (char *)a2 + 80;
  }
  else {
    char v7 = (char *)*((void *)a2 + 10);
  }
  uint64_t v8 = (char *)a2 + 104;
  char v9 = (void (*)(uint64_t, char *, void, void, void))*((void *)v4 + 3);
  v11[0] = 0;
  v11[1] = 0;
  if (v9) {
    v9(1, v8, v11, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostError((uint64_t)this, v5, v6, (uint64_t)v7, (uint64_t)a2, (uint64_t *)v4 - 5, v11, *((unsigned char *)a2 + 144));
  return sub_2168579F4((uint64_t (**)(void, void, void, void, void))v11);
}

void sub_21685A510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostWarning(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, long long *a5, std::string *a6, void (**a7)(uint64_t, void, void, void, void), char a8)
{
  v37[6] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  v29[0] = a2;
  v29[1] = a3;
  LOBYTE(__p[0]) = 0;
  BOOL v16 = (unsigned char *)sub_2168520EC((atomic_ullong *)(a1 + 16), __p);
  unsigned __int8 v17 = v16;
  if (!*v16)
  {
    unsigned char *v16 = 1;
    BOOL v18 = sub_216855488(9);
    if (v18) {
      pxrInternal__aapl__pxrReserved__::ArchDebuggerTrap((pxrInternal__aapl__pxrReserved__ *)v18);
    }
    BOOL v19 = sub_21685A328(1);
    if (v19)
    {
      sub_21685A38C((FILE *)*MEMORY[0x263EF8348], (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v29, (uint64_t)a5, (uint64_t *)a6);
      sub_216779094(__p, "WARNING");
      pxrInternal__aapl__pxrReserved__::TfLogStackTrace((char *)__p, 0);
      if (v32 < 0) {
        operator delete(__p[0]);
      }
    }
    BOOL v26 = v19;
    char v20 = *(unsigned char *)(a1 + 448);
    v30[0] = 0;
    v30[1] = 0;
    if (*a7) {
      (*a7)(1, a7, v30, 0, 0);
    }
    char v21 = v20 | a8;
    sub_21685C148((uint64_t)__p, a2, a3, a4, a5, a6, v30, v21 != 0);
    sub_2168579F4((uint64_t (**)(void, void, void, void, void))v30);
    char v28 = 0;
    uint64_t v27 = a1 + 136;
    tbb::spin_rw_mutex_v3::internal_acquire_reader((atomic_ullong *)(a1 + 136));
    char v22 = *(void **)(a1 + 112);
    BOOL v23 = *(void **)(a1 + 120);
    if (v22 == v23)
    {
      char v24 = *(void **)(a1 + 112);
    }
    else
    {
      do
      {
        if (*v22) {
          (*(void (**)(void, void **))(*(void *)*v22 + 40))(*v22, __p);
        }
        ++v22;
      }
      while (v22 != v23);
      char v24 = *(void **)(a1 + 112);
      char v22 = *(void **)(a1 + 120);
    }
    sub_21685C048(&v27);
    char v25 = v26;
    if (v24 != v22) {
      char v25 = 1;
    }
    if (!v21 && (v25 & 1) == 0) {
      sub_21685A38C((FILE *)*MEMORY[0x263EF8348], (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v29, (uint64_t)a5, (uint64_t *)a6);
    }
    sub_2168579F4(v37);
    if (v36 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    *unsigned __int8 v17 = 0;
  }
}

void sub_21685A784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_21685A3F4((uint64_t)&__p);
  *BOOL v23 = 0;
  _Unwind_Resume(a1);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostWarning(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this, const pxrInternal__aapl__pxrReserved__::TfDiagnosticBase *a2))(void, void, void, void, void)
{
  v11[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v4 = (char *)a2 + 80;
  uint64_t v5 = *((void *)a2 + 8);
  uint64_t v6 = *((void *)a2 + 9);
  if (*((char *)a2 + 103) >= 0) {
    char v7 = (char *)a2 + 80;
  }
  else {
    char v7 = (char *)*((void *)a2 + 10);
  }
  uint64_t v8 = (char *)a2 + 104;
  char v9 = (void (*)(uint64_t, char *, void, void, void))*((void *)v4 + 3);
  v11[0] = 0;
  v11[1] = 0;
  if (v9) {
    v9(1, v8, v11, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostWarning((uint64_t)this, v5, v6, v7, (long long *)a2, (std::string *)(v4 - 40), v11, *((unsigned char *)a2 + 144));
  return sub_2168579F4((uint64_t (**)(void, void, void, void, void))v11);
}

void sub_21685A8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostStatus(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, long long *a5, std::string *a6, void (**a7)(uint64_t, void, void, void, void), char a8)
{
  v32[6] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  v25[0] = a2;
  v25[1] = a3;
  v27[0] = 0;
  BOOL v16 = (unsigned char *)sub_2168520EC((atomic_ullong *)(a1 + 16), v27);
  unsigned __int8 v17 = v16;
  if (!*v16)
  {
    unsigned char *v16 = 1;
    char v18 = *(unsigned char *)(a1 + 448);
    v26[0] = 0;
    v26[1] = 0;
    if (*a7) {
      (*a7)(1, a7, v26, 0, 0);
    }
    char v19 = v18 | a8;
    sub_21685C23C((uint64_t)v27, a2, a3, a4, a5, a6, v26, v19 != 0);
    sub_2168579F4((uint64_t (**)(void, void, void, void, void))v26);
    char v24 = 0;
    uint64_t v23 = a1 + 136;
    tbb::spin_rw_mutex_v3::internal_acquire_reader((atomic_ullong *)(a1 + 136));
    char v20 = *(void **)(a1 + 112);
    char v21 = *(void **)(a1 + 120);
    if (v20 == v21)
    {
      char v22 = *(void **)(a1 + 112);
    }
    else
    {
      do
      {
        if (*v20) {
          (*(void (**)(void, unsigned char *))(*(void *)*v20 + 32))(*v20, v27);
        }
        ++v20;
      }
      while (v20 != v21);
      char v22 = *(void **)(a1 + 112);
      char v20 = *(void **)(a1 + 120);
    }
    sub_21685C048(&v23);
    if (!v19 && v22 == v20) {
      sub_21685A38C((FILE *)*MEMORY[0x263EF8348], (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v25, (uint64_t)a5, (uint64_t *)a6);
    }
    sub_2168579F4(v32);
    if (v31 < 0) {
      operator delete(__p);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    *unsigned __int8 v17 = 0;
  }
}

void sub_21685AAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21685A3F4((uint64_t)va);
  unsigned char *v10 = 0;
  _Unwind_Resume(a1);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostStatus(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this, const pxrInternal__aapl__pxrReserved__::TfDiagnosticBase *a2))(void, void, void, void, void)
{
  v11[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v4 = (char *)a2 + 80;
  uint64_t v5 = *((void *)a2 + 8);
  uint64_t v6 = *((void *)a2 + 9);
  if (*((char *)a2 + 103) >= 0) {
    char v7 = (char *)a2 + 80;
  }
  else {
    char v7 = (char *)*((void *)a2 + 10);
  }
  uint64_t v8 = (char *)a2 + 104;
  char v9 = (void (*)(uint64_t, char *, void, void, void))*((void *)v4 + 3);
  v11[0] = 0;
  v11[1] = 0;
  if (v9) {
    v9(1, v8, v11, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostStatus((uint64_t)this, v5, v6, v7, (long long *)a2, (std::string *)(v4 - 40), v11, *((unsigned char *)a2 + 144));
  return sub_2168579F4((uint64_t (**)(void, void, void, void, void))v11);
}

void sub_21685ABDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseError(uint64_t a1, uint64_t *a2)
{
  char v7 = 0;
  uint64_t v3 = sub_2168520EC((atomic_ullong *)(a1 + 152), &v7);
  if ((uint64_t *)v3 != a2)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    *(void *)(v4 + 8) = v5;
    *(void *)a2[1] = v4;
    --*(void *)(v3 + 16);
    sub_21685D11C((uint64_t)(a2 + 2));
    operator delete(a2);
    return (uint64_t *)v5;
  }
  return a2;
}

void *pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_GetErrorMarkBegin(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this, unint64_t a2, unint64_t *a3)
{
  char v11 = 0;
  uint64_t result = (void *)sub_2168520EC((atomic_ullong *)this + 19, &v11);
  unint64_t v7 = atomic_load((unint64_t *)this + 18);
  if (v7 <= a2 || !result[2])
  {
    if (!a3) {
      return result;
    }
    unint64_t v9 = 0;
    goto LABEL_12;
  }
  uint64_t v8 = (void *)result[1];
  if (result == v8)
  {
    unint64_t v9 = 0;
    if (!a3) {
      return result;
    }
    goto LABEL_12;
  }
  unint64_t v9 = 0;
  while (1)
  {
    char v10 = (void *)*result;
    if (*(void *)(*result + 152) < a2) {
      break;
    }
    ++v9;
    uint64_t result = (void *)*result;
    if (v10 == v8)
    {
      uint64_t result = v8;
      break;
    }
  }
  if (a3) {
LABEL_12:
  }
    *a3 = v9;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(atomic_ullong *a1, void *a2, void *a3)
{
  uint64_t v3 = a3;
  if (a2 != a3)
  {
    char v8 = 0;
    uint64_t v6 = sub_2168520EC(a1 + 19, &v8);
    uint64_t v3 = sub_21685AD90(v6, a2, v3);
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_RebuildErrorLogText(a1);
  }
  return v3;
}

void *sub_21685AD90(uint64_t a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = *a3;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = *(void *)(*a3 + 8);
    **(void **)(v6 + 8) = v7;
    do
    {
      char v8 = (void *)v4[1];
      --*(void *)(a1 + 16);
      sub_21685D11C((uint64_t)(v4 + 2));
      operator delete(v4);
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_RebuildErrorLogText(atomic_ullong *this)
{
  uint64_t v1 = this;
  char v5 = 0;
  uint64_t v2 = sub_2168520EC(this + 31, &v5);
  v1 += 19;
  char v6 = 0;
  uint64_t v3 = *(void *)(sub_2168520EC(v1, &v6) + 8);
  char v7 = 0;
  uint64_t v4 = sub_2168520EC(v1, &v7);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText::_AppendAndPublishImpl(v2, 1, v3, v4);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostWithInfo(void *a1, uint64_t *a2, void (**a3)(uint64_t, void, void, void, void)))(void, void, void, void, void)
{
  v10[4] = *(void (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  v10[0] = 0;
  v10[1] = 0;
  if (*a3) {
    (*a3)(1, a3, v10, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostError(v5, v6, v7, v8, (uint64_t)a1, a2, v10, 0);
  return sub_2168579F4((uint64_t (**)(void, void, void, void, void))v10);
}

void sub_21685AF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(void *a1, uint64_t *a2))(void, void, void, void, void)
{
  _OWORD v9[4] = *(void (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  v9[0] = 0;
  v9[1] = 0;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostError(v4, v5, v6, v7, (uint64_t)a1, a2, v9, 0);
  return sub_2168579F4((uint64_t (**)(void, void, void, void, void))v9);
}

void sub_21685B034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))va);
  _Unwind_Resume(a1);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostQuietly(void *a1, uint64_t *a2, void (**a3)(uint64_t, void, void, void, void)))(void, void, void, void, void)
{
  v10[4] = *(void (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  v10[0] = 0;
  v10[1] = 0;
  if (*a3) {
    (*a3)(1, a3, v10, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostError(v5, v6, v7, v8, (uint64_t)a1, a2, v10, 1u);
  return sub_2168579F4((uint64_t (**)(void, void, void, void, void))v10);
}

void sub_21685B134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3, ...)
{
  va_start(va, a3);
  va_copy(v6, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, a2, va, a3);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(this, (uint64_t *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21685B1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostQuietly(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3, ...)
{
  va_start(va, a3);
  v7[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  va_copy(v6, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, a2, va, a3);
  v7[0] = 0;
  v7[1] = 0;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostQuietly(this, (uint64_t *)__p, v7);
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))v7);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21685B268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t (*a17)(void, void, void, void, void))
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3, ...)
{
  va_start(va, a3);
  va_copy(v5, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a2, va, a3);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21685B2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post(uint64_t a1, std::string *a2))(void, void, void, void, void)
{
  _OWORD v9[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(char **)(a1 + 56);
  v9[0] = 0;
  v9[1] = 0;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostWarning(v4, v5, v6, v7, (long long *)a1, a2, v9, 0);
  return sub_2168579F4((uint64_t (**)(void, void, void, void, void))v9);
}

void sub_21685B3AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))va);
  _Unwind_Resume(a1);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::PostWithInfo(uint64_t a1, std::string *a2, void (**a3)(uint64_t, void, void, void, void)))(void, void, void, void, void)
{
  v10[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(char **)(a1 + 56);
  v10[0] = 0;
  v10[1] = 0;
  if (*a3) {
    (*a3)(1, a3, v10, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostWarning(v5, v6, v7, v8, (long long *)a1, a2, v10, 0);
  return sub_2168579F4((uint64_t (**)(void, void, void, void, void))v10);
}

void sub_21685B4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3, ...)
{
  va_start(va, a3);
  va_copy(v5, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a2, va, a3);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21685B528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post(uint64_t a1, std::string *a2))(void, void, void, void, void)
{
  _OWORD v9[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(char **)(a1 + 56);
  v9[0] = 0;
  v9[1] = 0;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostStatus(v4, v5, v6, v7, (long long *)a1, a2, v9, 0);
  return sub_2168579F4((uint64_t (**)(void, void, void, void, void))v9);
}

void sub_21685B5E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))va);
  _Unwind_Resume(a1);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::PostWithInfo(uint64_t a1, std::string *a2, void (**a3)(uint64_t, void, void, void, void)))(void, void, void, void, void)
{
  v10[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(char **)(a1 + 56);
  v10[0] = 0;
  v10[1] = 0;
  if (*a3) {
    (*a3)(1, a3, v10, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostStatus(v5, v6, v7, v8, (long long *)a1, a2, v10, 0);
  return sub_2168579F4((uint64_t (**)(void, void, void, void, void))v10);
}

void sub_21685B6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::GetCodeName(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName(*(void *)this, *((void *)this + 1), a2);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (!v5)
  {
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(*(void *)this + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v10 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"(%s)%d", v6, v7, v8, *((unsigned int *)this + 2));
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v11;
    *(void *)(a2 + 16) = v12;
    HIBYTE(v12) = 0;
    LOBYTE(v11) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_21685B7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_SetLogInfoForErrors(uint64_t a1, void *a2)
{
  pthread_t v7 = pthread_self();
  sub_21685B8D0();
  if (v9 >= 0) {
    uint64_t v5 = &v8;
  }
  else {
    uint64_t v5 = v8;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Thread %s Pending Diagnostics", v3, v4, v5, v7);
  if (*a2 == a2[1]) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = a2;
  }
  pxrInternal__aapl__pxrReserved__::ArchSetExtraLogInfoForErrors((const void **)&__p, v6);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
}

void sub_21685B898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21685B8D0()
{
  sub_21677B834((uint64_t)v1);
  sub_21685D574(v1);
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v3);
}

void sub_21685BA04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText::AppendAndPublish(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText::_AppendAndPublishImpl(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v6 = (uint64_t *)(a1 + 24);
  }
  else {
    uint64_t v6 = (uint64_t *)a1;
  }
  if (*(unsigned char *)(a1 + 48)) {
    pthread_t v7 = (uint64_t *)a1;
  }
  else {
    pthread_t v7 = (uint64_t *)(a1 + 24);
  }
  if (a2) {
    sub_216782F74(v6);
  }
  if (a3 != a4)
  {
    uint64_t v8 = a3;
    do
    {
      *(_OWORD *)uint64_t v41 = *(_OWORD *)(v8 + 80);
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::FormatDiagnostic((pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v41, v8 + 16, (uint64_t *)(v8 + 56), (uint64_t)__p);
      unint64_t v10 = v6[1];
      unint64_t v9 = v6[2];
      if (v10 >= v9)
      {
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v6) >> 3);
        unint64_t v13 = v12 + 1;
        if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v6) >> 3);
        if (2 * v14 > v13) {
          unint64_t v13 = 2 * v14;
        }
        if (v14 >= 0x555555555555555) {
          unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v15 = v13;
        }
        std::string v44 = v6 + 2;
        if (v15) {
          uint64_t v16 = (char *)sub_216782ED8((uint64_t)(v6 + 2), v15);
        }
        else {
          uint64_t v16 = 0;
        }
        unsigned __int8 v17 = &v16[24 * v12];
        v41[0] = v16;
        v41[1] = v17;
        std::string v43 = &v16[24 * v15];
        long long v18 = *(_OWORD *)__p;
        *((void *)v17 + 2) = v40;
        *(_OWORD *)unsigned __int8 v17 = v18;
        __p[1] = 0;
        uint64_t v40 = 0;
        __p[0] = 0;
        uint64_t v42 = v17 + 24;
        sub_216790CCC(v6, v41);
        uint64_t v19 = v6[1];
        sub_216790E64((uint64_t)v41);
        int v20 = SHIBYTE(v40);
        v6[1] = v19;
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v11 = *(_OWORD *)__p;
        *(void *)(v10 + 16) = v40;
        *(_OWORD *)unint64_t v10 = v11;
        v6[1] = v10 + 24;
      }
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while (v8 != a4);
  }
  pthread_self();
  sub_21685B8D0();
  if (v40 >= 0) {
    uint64_t v23 = __p;
  }
  else {
    uint64_t v23 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Thread %s Pending Diagnostics", v21, v22, v23);
  if (*v6 == v6[1]) {
    char v24 = 0;
  }
  else {
    char v24 = v6;
  }
  pxrInternal__aapl__pxrReserved__::ArchSetExtraLogInfoForErrors((const void **)v41, v24);
  if (SHIBYTE(v42) < 0) {
    operator delete(v41[0]);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  if (a2) {
    sub_216782F74(v7);
  }
  for (; a3 != a4; a3 = *(void *)(a3 + 8))
  {
    *(_OWORD *)uint64_t v41 = *(_OWORD *)(a3 + 80);
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::FormatDiagnostic((pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v41, a3 + 16, (uint64_t *)(a3 + 56), (uint64_t)__p);
    unint64_t v26 = v7[1];
    unint64_t v25 = v7[2];
    if (v26 >= v25)
    {
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v7) >> 3);
      unint64_t v29 = v28 + 1;
      if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *v7) >> 3);
      if (2 * v30 > v29) {
        unint64_t v29 = 2 * v30;
      }
      if (v30 >= 0x555555555555555) {
        unint64_t v31 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v31 = v29;
      }
      std::string v44 = v7 + 2;
      if (v31) {
        char v32 = (char *)sub_216782ED8((uint64_t)(v7 + 2), v31);
      }
      else {
        char v32 = 0;
      }
      uint64_t v33 = &v32[24 * v28];
      v41[0] = v32;
      v41[1] = v33;
      std::string v43 = &v32[24 * v31];
      long long v34 = *(_OWORD *)__p;
      *((void *)v33 + 2) = v40;
      *(_OWORD *)uint64_t v33 = v34;
      __p[1] = 0;
      uint64_t v40 = 0;
      __p[0] = 0;
      uint64_t v42 = v33 + 24;
      sub_216790CCC(v7, v41);
      uint64_t v35 = v7[1];
      sub_216790E64((uint64_t)v41);
      int v36 = SHIBYTE(v40);
      v7[1] = v35;
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v27 = *(_OWORD *)__p;
      *(void *)(v26 + 16) = v40;
      *(_OWORD *)unint64_t v26 = v27;
      v7[1] = v26 + 24;
    }
  }
  *(unsigned char *)(a1 + 48) ^= 1u;
}

void sub_21685BD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText::RebuildAndPublish(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::FormatDiagnostic(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  v33[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::GetCodeName(a1, (uint64_t)__p);
  uint64_t v8 = *(unsigned char **)(a2 + 8);
  if (v8)
  {
    if (!*(unsigned char *)(a2 + 32) && *v8 && **(unsigned char **)a2)
    {
      int v20 = v32;
      char v21 = (void **)__p[0];
      BOOL IsMainThread = pxrInternal__aapl__pxrReserved__::ArchIsMainThread(v7);
      unint64_t v25 = __p;
      if (v20 < 0) {
        unint64_t v25 = v21;
      }
      unint64_t v26 = " (secondary thread)";
      if (IsMainThread) {
        unint64_t v26 = "";
      }
      if (*((char *)a3 + 23) >= 0) {
        long long v27 = a3;
      }
      else {
        long long v27 = (uint64_t *)*a3;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s: in %s at line %zu of %s -- %s\n", v23, v24, v25, v26, *(_OWORD *)(a2 + 8), *(void *)a2, v27);
    }
    else
    {
      if (v32 >= 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      BOOL v10 = pxrInternal__aapl__pxrReserved__::ArchIsMainThread(v7);
      BOOL v11 = v10;
      int v12 = *((char *)a3 + 23);
      unint64_t v13 = (uint64_t *)*a3;
      ProgramNameForErrors = pxrInternal__aapl__pxrReserved__::ArchGetProgramNameForErrors((pxrInternal__aapl__pxrReserved__ *)v10);
      if (v12 >= 0) {
        unsigned __int8 v17 = a3;
      }
      else {
        unsigned __int8 v17 = v13;
      }
      long long v18 = " (secondary thread)";
      if (v11) {
        long long v18 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s: %s [%s]\n", v15, v16, v9, v18, v17, ProgramNameForErrors);
    }
    v33[0] = *(void *)v29;
    *(void *)((char *)v33 + 7) = *(void *)&v29[7];
    uint64_t v19 = v33[0];
    *(void *)a4 = v28;
    *(void *)(a4 + 8) = v19;
    *(void *)(a4 + 15) = *(void *)((char *)v33 + 7);
    *(unsigned char *)(a4 + 23) = v30;
  }
  else
  {
    sub_216779094((void *)a4, "");
  }
  if (v32 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21685BFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21685BFCC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798AFF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798AFF8))
  {
    uint64_t v1 = operator new(0x10uLL);
    void *v1 = 0;
    v1[1] = 0;
    qword_26798AFF0 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798AFF8);
  }
  return qword_26798AFF0;
}

void sub_21685C030(_Unwind_Exception *a1)
{
}

void *sub_21685C048(void *a1)
{
  if (*a1) {
    sub_21685C080((uint64_t)a1);
  }
  return a1;
}

uint64_t sub_21685C080(uint64_t result)
{
  uint64_t v1 = *(atomic_ullong **)result;
  *(void *)uint64_t result = 0;
  if (*(unsigned char *)(result + 8))
  {
LABEL_2:
    atomic_ullong v2 = *v1;
    unint64_t v3 = *v1 & 0xFFFFFFFFFFFFFFFCLL;
    while (1)
    {
      atomic_ullong v4 = v2;
      atomic_compare_exchange_strong(v1, (unint64_t *)&v4, v3);
      if (v4 == v2) {
        break;
      }
      if (atomic_fetch_add_explicit(v1, 0, memory_order_relaxed) != v2)
      {
        uint64_t result = sched_yield();
        goto LABEL_2;
      }
    }
  }
  else
  {
    atomic_fetch_add(v1, 0xFFFFFFFFFFFFFFFCLL);
  }
  return result;
}

const void *sub_21685C0E0(uint64_t a1, unsigned char *a2)
{
  atomic_ullong v4 = pthread_getspecific(*(void *)(a1 + 24));
  if (v4)
  {
    uint64_t v5 = v4;
    *a2 = 1;
  }
  else
  {
    uint64_t v5 = (const void *)sub_2168520EC((atomic_ullong *)a1, a2);
    pthread_setspecific(*(void *)(a1 + 24), v5);
  }
  return v5;
}

uint64_t sub_21685C148(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, long long *a5, std::string *__str, void (**a7)(uint64_t, void, void (**)(uint64_t), void, void), char a8)
{
  v16[4] = *(void (**)(uint64_t))MEMORY[0x263EF8340];
  v16[0] = 0;
  v16[1] = 0;
  if (*a7) {
    (*a7)(1, a7, v16, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticBase::TfDiagnosticBase(a1, a2, a3, a4, a5, __str, v16, a8);
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))v16);
  return a1;
}

void sub_21685C220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_21685C23C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, long long *a5, std::string *__str, void (**a7)(uint64_t, void, void (**)(uint64_t), void, void), char a8)
{
  v16[4] = *(void (**)(uint64_t))MEMORY[0x263EF8340];
  v16[0] = 0;
  v16[1] = 0;
  if (*a7) {
    (*a7)(1, a7, v16, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticBase::TfDiagnosticBase(a1, a2, a3, a4, a5, __str, v16, a8);
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))v16);
  return a1;
}

void sub_21685C314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *sub_21685C330(void *a1, uint64_t *a2)
{
  *sub_21685C3EC(a1) = &unk_26C74B7F8;
  atomic_ullong v4 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x10);
  uint64_t v5 = *a2;
  *atomic_ullong v4 = &unk_26C74B8A8;
  v4[1] = v5;
  a1[4] = v4;
  for (uint64_t i = 10; i != 13; ++i)
    a1[i] = 0;
  a1[8] = 0;
  a1[7] = 0;
  a1[9] = a1 + 10;
  a1[6] = sub_2168512A4;
  return a1;
}

void sub_21685C3D8(_Unwind_Exception *a1)
{
  sub_21685C46C(v1);
  _Unwind_Resume(a1);
}

void *sub_21685C3EC(void *a1)
{
  *a1 = &unk_26C74B518;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_26C74B870;
  pthread_key_create(a1 + 3, 0);
  return a1;
}

void sub_21685C464(_Unwind_Exception *a1)
{
  void *v1 = v2;
  _Unwind_Resume(a1);
}

void *sub_21685C46C(void *a1)
{
  *a1 = &unk_26C74B870;
  pthread_key_delete(a1[3]);
  *a1 = &unk_26C74B518;
  return a1;
}

uint64_t sub_21685C4D4(uint64_t a1)
{
  uint64_t v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((atomic_ullong *)(a1 + 48), 1uLL, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>>>::initialize_array, 0);
  unint64_t v3 = sub_216851020((unint64_t)v2);
  uint64_t v4 = *(void *)(a1 + 72);
  __dmb(0xBu);
  uint64_t v5 = *(void *)(v4 + 8 * v3) + (((void)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32), v5);
  *(unsigned char *)(v5 + 8) = 1;
  return v5;
}

uint64_t sub_21685C57C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_21685C590(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_21685C598(void *a1)
{
  uint64_t v1 = sub_21685D318(a1);

  operator delete(v1);
}

void *sub_21685C5C0(uint64_t a1)
{
  uint64_t result = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x10);
  *uint64_t result = &unk_26C74B930;
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C74B8A8;
  result[1] = v3;
  return result;
}

uint64_t sub_21685C624(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);

  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

uint64_t sub_21685C684(uint64_t result, void *a2)
{
  *a2 = *(void *)(result + 8);
  return result;
}

void *sub_21685C690(void *a1)
{
  *a1 = &unk_26C74B518;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_26C74B968;
  uint64_t v2 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *uint64_t v2 = &unk_26C74B9C8;
  a1[3] = v2;
  for (uint64_t i = 9; i != 12; ++i)
    a1[i] = 0;
  a1[7] = 0;
  a1[6] = 0;
  a1[8] = a1 + 9;
  a1[5] = sub_21685C8F0;
  return a1;
}

void sub_21685C75C(_Unwind_Exception *a1)
{
  void *v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_21685C764(uint64_t a1)
{
  uint64_t v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((atomic_ullong *)(a1 + 40), 1uLL, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>>>::initialize_array, 0);
  unint64_t v3 = sub_216851020((unint64_t)v2);
  uint64_t v4 = *(void *)(a1 + 64);
  __dmb(0xBu);
  uint64_t v5 = *(void *)(v4 + 8 * v3) + (((void)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5);
  *(unsigned char *)(v5 + 1) = 1;
  return v5;
}

uint64_t sub_21685C80C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_21685C820(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_21685C828(void *a1)
{
  uint64_t v1 = sub_21685CE20(a1);

  operator delete(v1);
}

void *sub_21685C850()
{
  uint64_t result = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *uint64_t result = &unk_26C74B9C8;
  return result;
}

uint64_t sub_21685C888(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);

  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_21685C8E8(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t sub_21685C8F0(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    bzero(a1, a3 << 7);
  }
}

void *sub_21685C910(void *a1)
{
  *a1 = &unk_26C74B518;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_26C74BA60;
  uint64_t v2 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *uint64_t v2 = &unk_26C74BAC0;
  a1[3] = v2;
  for (uint64_t i = 9; i != 12; ++i)
    a1[i] = 0;
  a1[7] = 0;
  a1[6] = 0;
  a1[8] = a1 + 9;
  a1[5] = sub_21685CB74;
  return a1;
}

void sub_21685C9DC(_Unwind_Exception *a1)
{
  void *v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_21685C9E4(uint64_t a1)
{
  uint64_t v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((atomic_ullong *)(a1 + 40), 1uLL, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>>>::initialize_array, 0);
  unint64_t v3 = sub_216851020((unint64_t)v2);
  uint64_t v4 = *(void *)(a1 + 64);
  __dmb(0xBu);
  uint64_t v5 = *(void *)(v4 + 8 * v3) + (((void)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5);
  *(unsigned char *)(v5 + 24) = 1;
  return v5;
}

uint64_t sub_21685CA8C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_21685CAA0(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_21685CAA8(void *a1)
{
  uint64_t v1 = sub_21685CF50(a1);

  operator delete(v1);
}

void *sub_21685CAD0()
{
  uint64_t result = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *uint64_t result = &unk_26C74BAC0;
  return result;
}

uint64_t sub_21685CB08(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);

  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_21685CB68(uint64_t a1, void *a2)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
}

uint64_t sub_21685CB74(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    bzero(a1, a3 << 7);
  }
}

void *sub_21685CB94(void *a1)
{
  *a1 = &unk_26C74B518;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_26C74BB58;
  uint64_t v2 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *uint64_t v2 = &unk_26C74BBB8;
  a1[3] = v2;
  for (uint64_t i = 9; i != 12; ++i)
    a1[i] = 0;
  a1[7] = 0;
  a1[6] = 0;
  a1[8] = a1 + 9;
  a1[5] = sub_21685CE00;
  return a1;
}

void sub_21685CC60(_Unwind_Exception *a1)
{
  void *v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_21685CC68(uint64_t a1)
{
  uint64_t v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((atomic_ullong *)(a1 + 40), 1uLL, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>>>::initialize_array, 0);
  unint64_t v3 = sub_216851020((unint64_t)v2);
  uint64_t v4 = *(void *)(a1 + 64);
  __dmb(0xBu);
  uint64_t v5 = *(void *)(v4 + 8 * v3) + (((void)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5);
  *(unsigned char *)(v5 + 56) = 1;
  return v5;
}

uint64_t sub_21685CD10(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_21685CD24(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_21685CD2C(void *a1)
{
  uint64_t v1 = sub_21685D17C(a1);

  operator delete(v1);
}

void *sub_21685CD54()
{
  uint64_t result = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *uint64_t result = &unk_26C74BBB8;
  return result;
}

uint64_t sub_21685CD8C(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);

  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

double sub_21685CDEC(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t sub_21685CE00(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    bzero(a1, a3 << 7);
  }
}

void *sub_21685CE20(void *a1)
{
  *a1 = &unk_26C74B968;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_216850D6C((uint64_t)a1);
  sub_21685CEBC(a1 + 4);
  *a1 = &unk_26C74B518;
  return a1;
}

unint64_t *sub_21685CEBC(unint64_t *a1)
{
  uint64_t v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  unint64_t v3 = (void *)a1[4];
  unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>>>::destroy_array);
  sub_216850F48((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

uint64_t tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>>>::destroy_array(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (unsigned char *)(result + (a2 << 7) - 127);
    do
    {
      if (*v2) {
        *uint64_t v2 = 0;
      }
      v2 -= 128;
      --a2;
    }
    while (a2);
  }
  return result;
}

void *sub_21685CF50(void *a1)
{
  *a1 = &unk_26C74BA60;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_216850D6C((uint64_t)a1);
  sub_21685CFEC(a1 + 4);
  *a1 = &unk_26C74B518;
  return a1;
}

unint64_t *sub_21685CFEC(unint64_t *a1)
{
  uint64_t v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  unint64_t v3 = (void *)a1[4];
  unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>>>::destroy_array);
  sub_216850F48((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>>>::destroy_array(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = a1 + (a2 << 7) - 128;
    do
    {
      if (*(unsigned char *)(v3 + 24))
      {
        sub_21685D0A8((uint64_t *)v3);
        *(unsigned char *)(v3 + 24) = 0;
      }
      v3 -= 128;
      --v2;
    }
    while (v2);
  }
}

void sub_21685D0A8(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_21685D11C((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_21685D11C(uint64_t a1)
{
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))(a1 + 104));
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    operator delete(v2);
  }
}

void *sub_21685D17C(void *a1)
{
  *a1 = &unk_26C74BB58;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_216850D6C((uint64_t)a1);
  sub_21685D218(a1 + 4);
  *a1 = &unk_26C74B518;
  return a1;
}

unint64_t *sub_21685D218(unint64_t *a1)
{
  uint64_t v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  uint64_t v3 = (void *)a1[4];
  unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>>>::destroy_array);
  sub_216850F48((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

uint64_t tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>>>::destroy_array(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    double result = result + (a2 << 7) - 128;
    do
    {
      --v2;
      double result = sub_21685D2C4(result) - 128;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21685D2C4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v3 = (void **)(a1 + 24);
    sub_216782F20(&v3);
    uint64_t v3 = (void **)a1;
    sub_216782F20(&v3);
    *(unsigned char *)(a1 + 56) = 0;
  }
  return a1;
}

void *sub_21685D318(void *a1)
{
  *a1 = &unk_26C74B7F8;
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_21685D3A8((uint64_t)a1);
  sub_216850EDC(a1 + 5);

  return sub_21685C46C(a1);
}

uint64_t sub_21685D3A8(uint64_t a1)
{
  uint64_t v2 = (pthread_key_t *)(a1 + 24);
  pthread_key_delete(*(void *)(a1 + 24));
  pthread_key_create(v2, 0);

  return sub_216850D6C(a1);
}

void *sub_21685D3F4(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0xA8uLL);
  *uint64_t v8 = a2;
  v8[1] = a3;
  sub_21685D468(v7, (uint64_t)(v8 + 2), a4);
  return v8;
}

void sub_21685D454(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21685D468(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  long long v6 = a3[1];
  *(void *)(a2 + 32) = *((void *)a3 + 4);
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  uint64_t v7 = (unsigned char *)(a2 + 40);
  if (*((char *)a3 + 63) < 0)
  {
    double result = sub_216778F24(v7, *((void **)a3 + 5), *((void *)a3 + 6));
  }
  else
  {
    long long v8 = *(long long *)((char *)a3 + 40);
    *(void *)(a2 + 56) = *((void *)a3 + 7);
    *(_OWORD *)uint64_t v7 = v8;
  }
  *(_OWORD *)(a2 + 64) = a3[4];
  if (*((char *)a3 + 103) < 0)
  {
    double result = sub_216778F24((unsigned char *)(a2 + 80), *((void **)a3 + 10), *((void *)a3 + 11));
  }
  else
  {
    long long v10 = a3[5];
    *(void *)(a2 + 96) = *((void *)a3 + 12);
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  BOOL v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void))*((void *)a3 + 13);
  if (v11) {
    double result = (void *)v11(1, (uint64_t)a3 + 104, a2 + 104, 0, 0);
  }
  uint64_t v12 = *((void *)a3 + 17);
  *(unsigned char *)(a2 + 144) = *((unsigned char *)a3 + 144);
  *(void *)(a2 + 136) = v12;
  return result;
}

void sub_21685D540(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21685D574(void *a1)
{
  sub_21677B834((uint64_t)v13);
  uint64_t v2 = *(void *)(v13[0] - 24);
  uint64_t v3 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + v2));
  std::ios_base::imbue((std::ios_base *)((char *)v13 + v2), v3);
  std::locale::~locale((std::locale *)__p);
  unint64_t v4 = *(std::locale **)((char *)&v13[5] + v2);
  if (v4)
  {
    (*((void (**)(std::locale *, const std::locale *))v4->__locale_ + 2))(v4, v3);
    long long v5 = v4 + 1;
    std::locale::locale(&v16, v5);
    std::locale::operator=(v5, v3);
    std::locale::~locale(&v16);
  }
  std::locale::~locale(&v12);
  std::ostream::operator<<();
  std::stringbuf::str();
  if ((v11 & 0x80u) == 0) {
    long long v6 = __p;
  }
  else {
    long long v6 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v7 = v11;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  long long v8 = sub_216779180(a1, (uint64_t)v6, v7);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21D447E60](&v15);
  return v8;
}

void sub_21685D794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_21677B9CC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DlOpenIsActive(pxrInternal__aapl__pxrReserved__ *this)
{
  return byte_26798E370;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DlCloseIsActive(pxrInternal__aapl__pxrReserved__ *this)
{
  return byte_26798E371;
}

void *pxrInternal__aapl__pxrReserved__::TfDlopen(char *a1, uint64_t a2, void **a3)
{
  if (sub_216855488(3))
  {
    if (a1[23] >= 0) {
      long long v8 = a1;
    }
    else {
      long long v8 = *(char **)a1;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfDlopen: [opening] '%s' (flag=%x)...\n", v6, v7, v8, a2);
  }
  char v9 = byte_26798E370;
  byte_26798E370 = 1;
  if (a1[23] >= 0) {
    long long v10 = a1;
  }
  else {
    long long v10 = *(char **)a1;
  }
  sub_216779094(__p, v10);
  unsigned __int8 v11 = pxrInternal__aapl__pxrReserved__::ArchLibraryOpen((uint64_t)__p, a2);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  byte_26798E370 = v9;
  if (sub_216855488(3))
  {
    if (a1[23] >= 0) {
      char v14 = a1;
    }
    else {
      char v14 = *(char **)a1;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfDlopen: [opened] '%s' (handle=%p)\n", v12, v13, v14, v11);
  }
  pxrInternal__aapl__pxrReserved__::ArchLibraryError(__p);
  uint64_t v15 = (void *)HIBYTE(v22);
  if (SHIBYTE(v22) < 0) {
    uint64_t v15 = __p[1];
  }
  if (v15)
  {
    if (sub_216855488(3))
    {
      if (a1[23] >= 0) {
        long long v18 = a1;
      }
      else {
        long long v18 = *(char **)a1;
      }
      uint64_t v19 = __p;
      if (SHIBYTE(v22) < 0) {
        uint64_t v19 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfDlopen: [error on opening] '%s': %s\n", v16, v17, v18, v19);
    }
    if (a3)
    {
      if (*((char *)a3 + 23) < 0) {
        operator delete(*a3);
      }
      *(_OWORD *)a3 = *(_OWORD *)__p;
      a3[2] = v22;
      return v11;
    }
  }
  else if (a3)
  {
    if (*((char *)a3 + 23) < 0)
    {
      *(unsigned char *)*a3 = 0;
      a3[1] = 0;
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *((unsigned char *)a3 + 23) = 0;
    }
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_21685D990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDlclose(pxrInternal__aapl__pxrReserved__ *this, void *a2)
{
  char v3 = byte_26798E371;
  byte_26798E371 = 1;
  if (sub_216855488(4)) {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfDlclose: handle = %p\n", v4, v5, this);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::ArchLibraryClose(this);
  byte_26798E371 = v3;
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174114AELL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  uint64_t v2 = std::string::insert(&v14, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      char v9 = operator new(0xF8uLL);
      sub_21685EE04((unint64_t)v9, v10, v11);
      unint64_t v13 = atomic_load(a1);
      if (v13)
      {
        if (v9 != (void *)v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v18 = 84;
          uint64_t v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistr"
                "y>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry]";
          char v20 = 0;
          int v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v12);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v18 = 88;
        uint64_t v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>"
              "::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry]";
        char v20 = 0;
        int v21 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v12, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v5;
}

void sub_21685DC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::DeleteInstance()
{
  for (uint64_t i = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
        i;
        uint64_t i = v1)
  {
    uint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance, (unint64_t *)&v1, 0);
    if (v1 == i)
    {
      uint64_t v2 = sub_21685EC4C(i);
      operator delete(v2);
      return;
    }
    sched_yield();
  }
}

void pxrInternal__aapl__pxrReserved__::TfEnum::_AddName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  sub_216851EE4((uint64_t)&v44, "Tf", "TfEnum::_AddName");
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v42);
  std::string::size_type v7 = std::string::rfind((const std::string *)a3, 58, 0xFFFFFFFFFFFFFFFFLL);
  if (v7 == -1)
  {
    if (*(char *)(a3 + 23) < 0) {
      sub_216778F24(&__str, *(void **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __str = *(std::string *)a3;
    }
  }
  else
  {
    std::string::basic_string(&__str, (const std::string *)a3, v7 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v49);
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v10 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
    if (!v10) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance();
    }
    sub_21685036C((uint64_t)&v40, v10);
    if ((v43 & 0x80u) == 0) {
      size_t v11 = v43;
    }
    else {
      size_t v11 = (size_t)v42[1];
    }
    std::locale v12 = &v49;
    sub_2167940B4((uint64_t)&v49, v11 + 2);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::locale v12 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if (v11)
    {
      if ((v43 & 0x80u) == 0) {
        unint64_t v13 = v42;
      }
      else {
        unint64_t v13 = (void **)v42[0];
      }
      memmove(v12, v13, v11);
    }
    strcpy((char *)v12 + v11, "::");
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = __str.__r_.__value_.__l.__size_;
    }
    int v16 = std::string::append(&v49, (const std::string::value_type *)p_str, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
    uint64_t v18 = sub_21685F418(v10 + 8, (int *)&v46, (uint64_t)&unk_2174BFD90, &v49);
    std::string::operator=((std::string *)(v18 + 4), &__str);
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
    uint64_t v19 = sub_21685F418(v10 + 48, (int *)&v46, (uint64_t)&unk_2174BFD90, &v49);
    std::string::operator=((std::string *)(v19 + 4), &__p);
    uint64_t v20 = *(unsigned __int8 *)(a4 + 23);
    uint64_t v21 = *(void *)(a4 + 8);
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
    char v22 = sub_21685F418(v10 + 88, (int *)&v46, (uint64_t)&unk_2174BFD90, &v49);
    if ((v20 & 0x80u) == 0) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = v21;
    }
    char v24 = (std::string *)(v22 + 4);
    if (v23) {
      unint64_t v25 = (std::string *)a4;
    }
    else {
      unint64_t v25 = &__str;
    }
    std::string::operator=(v24, v25);
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    unint64_t v26 = sub_21685F770(v10 + 128, (unsigned __int8 *)&__p, (uint64_t)&unk_2174BFD90, (long long **)&v49);
    uint64_t v27 = v46;
    *((void *)v26 + 5) = v46;
    *((_DWORD *)v26 + 12) = v47;
    sub_216779094(&v49, (char *)(*(void *)(v27 + 8) & 0x7FFFFFFFFFFFFFFFLL));
    uint64_t v48 = &v49;
    uint64_t v28 = (uint64_t *)sub_21685F054(v10 + 168, (unsigned __int8 *)&v49, (uint64_t)&unk_2174BFD90, (long long **)&v48);
    unint64_t v29 = v28;
    unint64_t v30 = v28[6];
    if (v30 >= v28[7])
    {
      uint64_t v32 = sub_2167E9A44(v28 + 5, (long long *)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_216778F24((unsigned char *)v28[6], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v31 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(void *)(v30 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v30 = v31;
      }
      uint64_t v32 = v30 + 24;
      v29[6] = v30 + 24;
    }
    v29[6] = v32;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    uint64_t v33 = v46;
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
    long long v34 = sub_21685FAEC(v10 + 208, (unsigned __int8 *)v42, (uint64_t)&unk_2174BFD90, (long long **)&v49);
    *((void *)v34 + 5) = v33;
    uint64_t Instance = pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance((pxrInternal__aapl__pxrReserved__::TfRegistryManager *)v34);
    int v36 = operator new(0x20uLL);
    void *v36 = &unk_26C74BC60;
    v36[1] = v10;
    v36[2] = v46;
    *((_DWORD *)v36 + 6) = v47;
    int v50 = v36;
    pxrInternal__aapl__pxrReserved__::TfRegistryManager::AddFunctionForUnload(Instance, (uint64_t)&v49);
    sub_21686060C(&v49);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unsigned __int8 v37 = v40;
    if (v40)
    {
      __dmb(0xBu);
      *unsigned __int8 v37 = 0;
    }
    char v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v9 < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if ((char)v43 < 0) {
    operator delete(v42[0]);
  }
  while (v45--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v44);
}

void sub_21685E194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, unsigned char *a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  *(void *)(v31 + 48) = v32;
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16)
  {
    __dmb(0xBu);
    *a16 = 0;
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_21684E6B8((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfEnum::GetName(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v12[0] = a1;
  v12[1] = a2;
  if (!strcmp((const char *)(*(void *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d", v5, v6, a2);
  }
  else
  {
    uint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
    if (!v7) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance();
    }
    sub_21685036C((uint64_t)&v11, v7);
    long long v8 = sub_21686049C((void *)(v7 + 8), (int *)v12);
    if (v8)
    {
      if (*((char *)v8 + 55) < 0)
      {
        sub_216778F24((unsigned char *)a3, (void *)v8[4], v8[5]);
      }
      else
      {
        long long v9 = *((_OWORD *)v8 + 2);
        *(void *)(a3 + 16) = v8[6];
        *(_OWORD *)a3 = v9;
      }
    }
    else
    {
      sub_216779094((void *)a3, "");
    }
    uint64_t v10 = v11;
    if (v11)
    {
      __dmb(0xBu);
      unsigned char *v10 = 0;
    }
  }
}

void sub_21685E36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfEnum::GetFullName(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v12[0] = a1;
  v12[1] = a2;
  if (!strcmp((const char *)(*(void *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"int::%d", v5, v6, a2);
  }
  else
  {
    uint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
    if (!v7) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance();
    }
    sub_21685036C((uint64_t)&v11, v7);
    long long v8 = sub_21686049C((void *)(v7 + 48), (int *)v12);
    if (v8)
    {
      if (*((char *)v8 + 55) < 0)
      {
        sub_216778F24((unsigned char *)a3, (void *)v8[4], v8[5]);
      }
      else
      {
        long long v9 = *((_OWORD *)v8 + 2);
        *(void *)(a3 + 16) = v8[6];
        *(_OWORD *)a3 = v9;
      }
    }
    else
    {
      sub_216779094((void *)a3, "");
    }
    uint64_t v10 = v11;
    if (v11)
    {
      __dmb(0xBu);
      unsigned char *v10 = 0;
    }
  }
}

void sub_21685E478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v12[0] = a1;
  v12[1] = a2;
  if (!strcmp((const char *)(*(void *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d", v5, v6, a2);
  }
  else
  {
    uint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
    if (!v7) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance();
    }
    sub_21685036C((uint64_t)&v11, v7);
    long long v8 = sub_21686049C((void *)(v7 + 88), (int *)v12);
    if (v8)
    {
      if (*((char *)v8 + 55) < 0)
      {
        sub_216778F24((unsigned char *)a3, (void *)v8[4], v8[5]);
      }
      else
      {
        long long v9 = *((_OWORD *)v8 + 2);
        *(void *)(a3 + 16) = v8[6];
        *(_OWORD *)a3 = v9;
      }
    }
    else
    {
      sub_216779094((void *)a3, "");
    }
    uint64_t v10 = v11;
    if (v11)
    {
      __dmb(0xBu);
      unsigned char *v10 = 0;
    }
  }
}

void sub_21685E584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfEnum::GetAllNames(pxrInternal__aapl__pxrReserved__::TfEnum *this@<X0>, uint64_t a2@<X8>)
{
  if (!strcmp((const char *)(*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return;
  }
  uint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance();
  }
  sub_21685036C((uint64_t)&v11, v5);
  sub_216779094(__p, (char *)(*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFLL));
  long long v6 = sub_2168602D4((void *)(v5 + 168), (unsigned __int8 *)__p);
  uint64_t v7 = v6;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7) {
      goto LABEL_6;
    }
  }
  else if (v6)
  {
LABEL_6:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_216812BD8((char *)a2, *((long long **)v7 + 5), *((long long **)v7 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v7 + 6) - *((void *)v7 + 5)) >> 3));
    goto LABEL_10;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
LABEL_10:
  long long v8 = v11;
  if (v11)
  {
    __dmb(0xBu);
    *long long v8 = 0;
  }
}

void sub_21685E6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, unsigned char *a16)
{
  if (a16)
  {
    __dmb(0xBu);
    *a16 = 0;
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::TfEnum::GetTypeFromName(unsigned __int8 *a1)
{
  uint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance();
  }
  sub_21685036C((uint64_t)&v5, v2);
  unint64_t result = sub_2168602D4((void *)(v2 + 208), a1);
  if (result) {
    unint64_t result = (unsigned __int8 *)*((void *)result + 5);
  }
  char v4 = v5;
  if (v5)
  {
    __dmb(0xBu);
    *char v4 = 0;
  }
  return result;
}

void sub_21685E754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfEnum::GetValueFromName(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  unsigned __int8 v20 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v16);
  long long v6 = std::string::append(&v16, "::");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    long long v9 = (const std::string::value_type *)a2;
  }
  else {
    long long v9 = *(const std::string::value_type **)a2;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a2 + 8);
  }
  size_t v11 = std::string::append(&v17, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v19 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t ValueFromFullName = pxrInternal__aapl__pxrReserved__::TfEnum::GetValueFromFullName((char *)__p, &v20);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  int v14 = v20;
  if (v20) {
    int v14 = strcmp((const char *)(*(void *)(ValueFromFullName + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  if (a3) {
    *a3 = v14;
  }
  if (v14) {
    return ValueFromFullName;
  }
  else {
    return MEMORY[0x263F8C258];
  }
}

void sub_21685E89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfEnum::GetValueFromFullName(char *a1, unsigned char *a2)
{
  uint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance();
  }
  sub_21685036C((uint64_t)&v17, v4);
  uint64_t v5 = sub_2168602D4((void *)(v4 + 128), (unsigned __int8 *)a1);
  if (v5)
  {
    if (a2) {
      *a2 = 1;
    }
    uint64_t result = *((void *)v5 + 5);
  }
  else
  {
    uint64_t v7 = a1[23];
    int v8 = (char)v7;
    long long v9 = *(char **)a1;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *((void *)a1 + 1);
    }
    if (v8 >= 0) {
      std::string::size_type v10 = a1;
    }
    else {
      std::string::size_type v10 = *(char **)a1;
    }
    if (v7 >= 5)
    {
      size_t v11 = &v10[v7];
      long long v12 = v10;
      do
      {
        unint64_t v13 = (char *)memchr(v12, 105, v7 - 4);
        if (!v13) {
          break;
        }
        if (*(_DWORD *)v13 == 980708969 && v13[4] == 58)
        {
          if (v13 == v11 || v13 != v10) {
            break;
          }
          if (a2)
          {
            *a2 = 1;
            LOBYTE(v8) = a1[23];
            long long v9 = *(char **)a1;
          }
          if ((v8 & 0x80u) == 0) {
            std::string::size_type v15 = a1;
          }
          else {
            std::string::size_type v15 = v9;
          }
          atoi(v15 + 5);
          uint64_t result = MEMORY[0x263F8C258];
          goto LABEL_32;
        }
        long long v12 = v13 + 1;
        uint64_t v7 = v11 - v12;
      }
      while (v11 - v12 >= 5);
    }
    if (a2) {
      *a2 = 0;
    }
    uint64_t result = MEMORY[0x263F8C258];
  }
LABEL_32:
  std::string v16 = v17;
  if (v17)
  {
    __dmb(0xBu);
    unsigned char *v16 = 0;
  }
  return result;
}

void sub_21685EA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfEnum::_FatalGetValueError(pxrInternal__aapl__pxrReserved__::TfEnum *this, const std::type_info *a2)
{
  v7[0] = "tf/enum.cpp";
  v7[1] = "_FatalGetValueError";
  v7[2] = 251;
  v7[3] = "void pxrInternal__aapl__pxrReserved__::TfEnum::_FatalGetValueError(const std::type_info &) const";
  char v8 = 0;
  int v9 = 4;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(a2->__type_name & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v5);
  if (v6 >= 0) {
    uint64_t v4 = v5;
  }
  else {
    uint64_t v4 = (void *)v5[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Attempted to get a '%s' from a TfEnum holding a '%s'.", v3, v4, *(void *)(*(void *)this + 8) & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_21685EAF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (v28 < 0) {
    operator delete(v27);
  }
}

void sub_21685EB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfEnum::IsKnownEnumType(unsigned __int8 *a1)
{
  uint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance();
  }
  sub_21685036C((uint64_t)&v6, v2);
  long long v3 = sub_2168602D4((void *)(v2 + 208), a1);
  uint64_t v4 = v6;
  if (v6)
  {
    __dmb(0xBu);
    *uint64_t v4 = 0;
  }
  return v3 != 0;
}

void sub_21685EBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetFullName(*a2, a2[1], (uint64_t)__p);
  if ((v8 & 0x80u) == 0) {
    long long v3 = __p;
  }
  else {
    long long v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = sub_216779180(a1, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  char v9;

  LOBYTE(v8) = 40;
  long long v3 = sub_216779180(a1, (uint64_t)&v8, 1);
  unsigned __int8 v8 = *a2;
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3);
  uint64_t v5 = sub_216779180(v4, (uint64_t)", ", 2);
  char v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5);
  int v9 = 41;
  return sub_216779180(v6, (uint64_t)&v9, 1);
}

{
  void *v3;
  int v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;

  LOBYTE(v12) = 91;
  long long v3 = sub_216779180(a1, (uint64_t)&v12, 1);
  uint64_t v4 = *((_DWORD *)a2 + 2);
  long long v12 = *a2;
  unint64_t v13 = v4;
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, (float *)&v12);
  char v6 = sub_216779180(v5, (uint64_t)"...", 3);
  uint64_t v7 = *((_DWORD *)a2 + 5);
  std::string::size_type v10 = *(uint64_t *)((char *)a2 + 12);
  size_t v11 = v7;
  unsigned __int8 v8 = pxrInternal__aapl__pxrReserved__::operator<<(v6, (float *)&v10);
  int v14 = 93;
  return sub_216779180(v8, (uint64_t)&v14, 1);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  char v9;

  LOBYTE(v8) = 91;
  long long v3 = sub_216779180(a1, (uint64_t)&v8, 1);
  unsigned __int8 v8 = *a2;
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3);
  uint64_t v5 = sub_216779180(v4, (uint64_t)":", 1);
  char v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5);
  int v9 = 93;
  return sub_216779180(v6, (uint64_t)&v9, 1);
}

{
  uint64_t (*v4)(uint64_t *);
  char v5;
  uint64_t *v6;
  uint64_t vars8;

  uint64_t v4 = sub_216BCA2D4(a2);
  if (v5 & 1 | (unint64_t)v4)
  {
    char v6 = (uint64_t *)(sub_216BBCEA8(a2) + 24);
    return pxrInternal__aapl__pxrReserved__::operator<<(a1, v6);
  }
  else
  {
    return sub_216779180(a1, (uint64_t)"@<expired>@", 11);
  }
}

{
  uint64_t *v3;
  uint64_t vars8;

  if (*a2)
  {
    long long v3 = (uint64_t *)(sub_216BBBFA8(a2) + 24);
    return pxrInternal__aapl__pxrReserved__::operator<<(a1, v3);
  }
  else
  {
    return sub_216779180(a1, (uint64_t)"@NULL@", 6);
  }
}

{
  uint64_t vars8;

  sub_216C0C7F0(a1, a2);

  return pxrInternal__aapl__pxrReserved__::PcpIdentifierFormatIdentifier(a1);
}

{
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  long long v3 = pxrInternal__aapl__pxrReserved__::operator<<(a1, a2);
  uint64_t v4 = sub_216779180(v3, (uint64_t)"<", 1);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::operator<<(v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 10));

  return sub_216779180(v5, (uint64_t)">", 1);
}

{
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  long long v3 = pxrInternal__aapl__pxrReserved__::operator<<(a1, a2);
  uint64_t v4 = sub_216779180(v3, (uint64_t)"<", 1);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::operator<<(v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 1));

  return sub_216779180(v5, (uint64_t)">", 1);
}

{
  void *v4;
  uint64_t *String;
  const char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  const char *v11;
  double v12;
  const char *p_p;
  void **v14;
  uint64_t v15;
  void *__p;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23[2];
  unsigned __int8 v24;

  uint64_t v4 = &v21;
  sub_2169C349C(*a2 + 40);
  if (v22 < 0) {
    uint64_t v4 = v21;
  }
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(*a2 + 88));
  if (*((char *)String + 23) >= 0) {
    unsigned __int8 v8 = (uint64_t)String;
  }
  else {
    unsigned __int8 v8 = *String;
  }
  int v9 = *a2;
  std::string::size_type v10 = *(double *)(*a2 + 104);
  if (v10 == -1.79769313e308)
  {
    size_t v11 = "-inf";
  }
  else
  {
    size_t v11 = (const char *)&v19;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%.3f", v6, v7, *(void *)(*a2 + 104));
    if (v20 < 0) {
      size_t v11 = (const char *)v19;
    }
    int v9 = *a2;
  }
  long long v12 = *(double *)(v9 + 112);
  if (v12 == 1.79769313e308)
  {
    p_p = "inf";
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%.3f", v6, v7, *(void *)&v12);
    if (v18 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s<%s> (start: %s end: %s)", v6, v7, v4, v8, v11, p_p);
  if ((v24 & 0x80u) == 0) {
    int v14 = v23;
  }
  else {
    int v14 = (void **)v23[0];
  }
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v15 = v24;
  }
  else {
    std::string::size_type v15 = (uint64_t)v23[1];
  }
  sub_216779180(a1, (uint64_t)v14, v15);
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
  if (v12 != 1.79769313e308 && v18 < 0) {
    operator delete(__p);
  }
  if (v10 != -1.79769313e308 && v20 < 0) {
    operator delete(v19);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  return a1;
}

{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t *EmptyString;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  uint64_t v13;
  atomic_uint *v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v24;

  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216779180(a1, (uint64_t)"(", 1);
  uint64_t v5 = v4;
  if ((a2[1] & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((a2[1] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  uint64_t v7 = *((char *)EmptyString + 23);
  if (v7 >= 0) {
    unsigned __int8 v8 = (uint64_t)EmptyString;
  }
  else {
    unsigned __int8 v8 = *EmptyString;
  }
  if (v7 >= 0) {
    int v9 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    int v9 = EmptyString[1];
  }
  std::string::size_type v10 = sub_216779180(v5, v8, v9);
  size_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216779180(v10, (uint64_t)", ", 2);
  long long v12 = v11;
  unint64_t v13 = *a2;
  if ((*a2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  int v14 = (atomic_uint *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0) {
    std::string::size_type v15 = (uint64_t *)(v14 + 4);
  }
  else {
    std::string::size_type v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  }
  std::string v16 = *((char *)v15 + 23);
  if (v16 >= 0) {
    std::string v17 = (uint64_t)v15;
  }
  else {
    std::string v17 = *v15;
  }
  if (v16 >= 0) {
    uint64_t v18 = *((unsigned __int8 *)v15 + 23);
  }
  else {
    uint64_t v18 = v15[1];
  }
  std::string::size_type v19 = sub_216779180(v12, v17, v18);
  unsigned __int8 v20 = sub_216779180(v19, (uint64_t)", (", 3);
  char v24 = a2[6];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v20, a2 + 2, (uint64_t)&v24, (void (*)(uint64_t, void *))sub_216908154);
  uint64_t v21 = sub_216779180(v20, (uint64_t)"), (", 4);
  char v24 = a2[11];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v21, a2 + 7, (uint64_t)&v24, (void (*)(uint64_t, void *))sub_216908154);
  char v22 = sub_216779180(v21, (uint64_t)"), (", 4);
  char v24 = a2[16];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v22, a2 + 12, (uint64_t)&v24, (void (*)(uint64_t, void *))sub_216908154);
  sub_216779180(v22, (uint64_t)"))", 2);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit(v14, 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t v6;
  atomic_uint *v7;
  uint64_t *EmptyString;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  pxrInternal__aapl__pxrReserved__::TfToken *v13;
  pxrInternal__aapl__pxrReserved__::TfToken *v14;
  uint64_t v15;
  atomic_uint *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  pxrInternal__aapl__pxrReserved__::TfToken *v22;
  pxrInternal__aapl__pxrReserved__::TfToken *v23;
  uint64_t v24;
  atomic_uint *v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v36;

  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216779180(a1, (uint64_t)"(", 1);
  uint64_t v5 = v4;
  char v6 = a2[2];
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)(v7 + 4);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  int v9 = *((char *)EmptyString + 23);
  if (v9 >= 0) {
    std::string::size_type v10 = (uint64_t)EmptyString;
  }
  else {
    std::string::size_type v10 = *EmptyString;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v11 = EmptyString[1];
  }
  long long v12 = sub_216779180(v5, v10, v11);
  unint64_t v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216779180(v12, (uint64_t)", ", 2);
  int v14 = v13;
  std::string::size_type v15 = a2[1];
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v15 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::string v16 = (atomic_uint *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 0xFFFFFFFFFFFFFFF8) != 0) {
    std::string v17 = (uint64_t *)(v16 + 4);
  }
  else {
    std::string v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
  }
  uint64_t v18 = *((char *)v17 + 23);
  if (v18 >= 0) {
    std::string::size_type v19 = (uint64_t)v17;
  }
  else {
    std::string::size_type v19 = *v17;
  }
  if (v18 >= 0) {
    unsigned __int8 v20 = *((unsigned __int8 *)v17 + 23);
  }
  else {
    unsigned __int8 v20 = v17[1];
  }
  uint64_t v21 = sub_216779180(v14, v19, v20);
  char v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216779180(v21, (uint64_t)", ", 2);
  uint64_t v23 = v22;
  char v24 = a2[3];
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v25 = (atomic_uint *)(v24 & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v26 = (uint64_t *)(v25 + 4);
  }
  else {
    unint64_t v26 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
  }
  uint64_t v27 = *((char *)v26 + 23);
  if (v27 >= 0) {
    char v28 = (uint64_t)v26;
  }
  else {
    char v28 = *v26;
  }
  if (v27 >= 0) {
    unint64_t v29 = *((unsigned __int8 *)v26 + 23);
  }
  else {
    unint64_t v29 = v26[1];
  }
  unint64_t v30 = sub_216779180(v23, v28, v29);
  uint64_t v31 = sub_216779180(v30, (uint64_t)", (", 3);
  int v36 = a2[8];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v31, a2 + 4, (uint64_t)&v36, (void (*)(uint64_t, void *))sub_216908154);
  uint64_t v32 = sub_216779180(v31, (uint64_t)"), (", 4);
  int v36 = a2[13];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v32, a2 + 9, (uint64_t)&v36, (void (*)(uint64_t, void *))sub_216908154);
  uint64_t v33 = sub_216779180(v32, (uint64_t)"), (", 4);
  int v36 = a2[18];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v33, a2 + 14, (uint64_t)&v36, (void (*)(uint64_t, void *))sub_216908154);
  long long v34 = sub_216779180(v33, (uint64_t)"), (", 4);
  int v36 = a2[23];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v34, a2 + 19, (uint64_t)&v36, (void (*)(uint64_t, void *))sub_216908154);
  sub_216779180(v34, (uint64_t)"))", 2);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit(v25, 0xFFFFFFFE, memory_order_release);
  }
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit(v16, 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_21685EC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::TfRegistryManager *sub_21685EC4C(pxrInternal__aapl__pxrReserved__::TfRegistryManager *a1)
{
  uint64_t Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(a1);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_UnsubscribeFrom(Instance, &stru_26C74BC40);
  sub_216850298((uint64_t)a1 + 208);
  sub_21685ECB4((uint64_t)a1 + 168);
  sub_216850298((uint64_t)a1 + 128);
  sub_21685ED7C((uint64_t)a1 + 88);
  sub_21685ED7C((uint64_t)a1 + 48);
  sub_21685ED7C((uint64_t)a1 + 8);
  return a1;
}

uint64_t sub_21685ECB4(uint64_t a1)
{
  sub_21685ECF0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_21685ECF0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      long long v3 = (void *)*v2;
      sub_21685ED34((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_21685ED34(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  sub_216782F20(&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t sub_21685ED7C(uint64_t a1)
{
  sub_21685EDB8(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_21685EDB8(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      long long v3 = (void **)*v2;
      if (*((char *)v2 + 55) < 0) {
        operator delete(v2[4]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unint64_t sub_21685EE04(unint64_t a1, uint64_t a2, char *a3)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 1065353216;
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance, a1))
  {
    v6[0] = "tf/instantiateSingleton.h";
    v6[1] = "SetInstanceConstructed";
    _OWORD v6[2] = 56;
    v6[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry]";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  uint64_t Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance((pxrInternal__aapl__pxrReserved__::TfRegistryManager *)a1);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_26C74BC40);
  return a1;
}

void sub_21685EF14(_Unwind_Exception *a1)
{
  sub_216850298(v6);
  sub_21685ECB4(v5);
  sub_216850298(v4);
  sub_21685ED7C(v3);
  sub_21685ED7C(v2);
  sub_21685ED7C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_21685EF50()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74BC40, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74BC40, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21685F010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21685F054(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = a2;
  unint64_t v26 = 0;
  char v27 = 0;
  uint64_t v8 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    int v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    int v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (void)v26);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    int v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v6)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_21685F31C(a1, v10, a4, (uint64_t)&v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)unint64_t v26 = *v23;
    *uint64_t v23 = v26;
  }
  else
  {
    *(void *)unint64_t v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26)
    {
      unint64_t v24 = *(void *)(*(void *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26;
    }
  }
  uint64_t i = v26;
  unint64_t v26 = 0;
  ++*(void *)(a1 + 24);
  sub_21685F3C0((uint64_t)&v26, 0);
  return i;
}

void sub_21685F304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21685F3C0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_21685F31C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_21685F3A8(_Unwind_Exception *a1)
{
  sub_21685F3C0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_21685F3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21685ED34((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_21685F418(uint64_t a1, int *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v26 = 0;
  LOBYTE(v27) = 0;
  sub_21685F6A4((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, a2);
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * v26);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint8x8_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_21685F720((_DWORD *)v13 + 4, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  std::string::size_type v15 = (void *)(a1 + 16);
  unint64_t v13 = operator new(0x38uLL);
  uint64_t v27 = a1 + 16;
  void *v13 = 0;
  v13[1] = v8;
  *((_OWORD *)v13 + 1) = **a4;
  v13[5] = 0;
  v13[6] = 0;
  v13[4] = 0;
  char v28 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    void *v13 = *v23;
LABEL_38:
    *uint64_t v23 = v13;
    goto LABEL_39;
  }
  void *v13 = *v15;
  *std::string::size_type v15 = v13;
  *(void *)(v22 + 8 * v4) = v15;
  if (*v13)
  {
    unint64_t v24 = *(void *)(*v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_21685F688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_21678C278(v11, v10);
  _Unwind_Resume(a1);
}

unint64_t sub_21685F6A4(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, int *a2)
{
  unint64_t v4 = (char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v5 = (char *)strlen(v4);
  unint64_t result = pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)v4, v5);
  uint64_t v7 = a2[2];
  if (*((unsigned char *)a1 + 8)) {
    v7 += (unint64_t)(*(void *)a1 + v7 + (*(void *)a1 + v7) * (*(void *)a1 + v7)) >> 1;
  }
  else {
    *((unsigned char *)a1 + 8) = 1;
  }
  *(void *)a1 = v7;
  return result;
}

BOOL sub_21685F720(_DWORD *a1, _DWORD *a2)
{
  return a2[2] == a1[2]
      && strcmp((const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)a1 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

unsigned __int8 *sub_21685F770(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = a2;
  uint64_t v26 = 0;
  char v27 = 0;
  unint64_t v8 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    unint64_t v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    unint64_t v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (void)v26);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v6)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_21685FA34(a1, v10, a4, (uint64_t)&v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)uint64_t v26 = *v23;
    *uint64_t v23 = v26;
  }
  else
  {
    *(void *)uint64_t v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26)
    {
      unint64_t v24 = *(void *)(*(void *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26;
    }
  }
  uint64_t i = v26;
  ++*(void *)(a1 + 24);
  return i;
}

void sub_21685FA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_2168517F0((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_21685FA34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t result = v8 + 16;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    unint64_t result = sub_216778F24(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)unint64_t result = v11;
  }
  *((void *)v8 + 5) = MEMORY[0x263F8C258];
  *((_DWORD *)v8 + 12) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_21685FAD0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_2168517F0(v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21685FAEC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = a2;
  uint64_t v26 = 0;
  char v27 = 0;
  unint64_t v8 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    unint64_t v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    unint64_t v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (void)v26);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v6)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_21685FDB0(a1, v10, a4, (uint64_t)&v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)uint64_t v26 = *v23;
    *uint64_t v23 = v26;
  }
  else
  {
    *(void *)uint64_t v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26)
    {
      unint64_t v24 = *(void *)(*(void *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26;
    }
  }
  uint64_t i = v26;
  ++*(void *)(a1 + 24);
  return i;
}

void sub_21685FD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    sub_2168517F0((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_21685FDB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    unint64_t result = sub_216778F24(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)unint64_t result = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_21685FE40(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_2168517F0(v3, v2);
  _Unwind_Resume(a1);
}

__n128 sub_21685FE64(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C74BC60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_21685FEB8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C74BC60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_21685FEF0(uint64_t a1)
{
}

uint64_t sub_21685FF00(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74BCD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21685FF40()
{
  return &unk_26C74BCD0;
}

void sub_21685FF4C(void *a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  v27[1] = a3;
  sub_21685036C((uint64_t)&v26, (uint64_t)a1);
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&__p);
  sub_21686029C(a1 + 26, (unsigned __int8 *)&__p);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p);
  }
  sub_216779094(&__p, (char *)(*(void *)(v27[0] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  __dst[0] = &__p;
  uint64_t v5 = sub_21685F054((uint64_t)(a1 + 21), (unsigned __int8 *)&__p, (uint64_t)&unk_2174BFD90, (long long **)__dst);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_216812BD8((char *)&__p, *((long long **)v5 + 5), *((long long **)v5 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 3));
  char v28 = v27;
  uint64_t v6 = sub_21685F418((uint64_t)(a1 + 1), (int *)v27, (uint64_t)&unk_2174BFD90, &v28);
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24(__dst, (void *)v6[4], v6[5]);
  }
  else
  {
    *(_OWORD *)long long __dst = *((_OWORD *)v6 + 2);
    uint64_t v22 = v6[6];
  }
  sub_216782F74((uint64_t *)v5 + 5);
  uint64_t v7 = (char *)__p;
  unint64_t v8 = v24;
  if (v24 != __p)
  {
    uint64_t v9 = 0;
    for (unint64_t i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3); ++i)
    {
      long long v11 = &v7[24 * i];
      uint64_t v12 = v11[23];
      if ((v12 & 0x80u) == 0) {
        unint64_t v13 = v11[23];
      }
      else {
        unint64_t v13 = *((void *)v11 + 1);
      }
      unint64_t v14 = (void *)HIBYTE(v22);
      if (v22 < 0) {
        unint64_t v14 = __dst[1];
      }
      if ((void *)v13 != v14) {
        goto LABEL_26;
      }
      if (v22 >= 0) {
        std::string::size_type v15 = __dst;
      }
      else {
        std::string::size_type v15 = (void **)__dst[0];
      }
      if ((v12 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v11, v15, *((void *)v11 + 1))) {
          goto LABEL_26;
        }
      }
      else if (v11[23])
      {
        uint64_t v16 = v9;
        while (v7[v16] == *(unsigned char *)v15)
        {
          std::string::size_type v15 = (void **)((char *)v15 + 1);
          ++v16;
          if (!--v12) {
            goto LABEL_30;
          }
        }
LABEL_26:
        unint64_t v17 = *((void *)v5 + 6);
        if (v17 >= *((void *)v5 + 7))
        {
          uint64_t v18 = sub_2167E9A44((uint64_t *)v5 + 5, (long long *)v11);
        }
        else
        {
          sub_2167E99E4((void *)v5 + 5, (long long *)v11);
          uint64_t v18 = v17 + 24;
        }
        *((void *)v5 + 6) = v18;
        uint64_t v7 = (char *)__p;
        unint64_t v8 = v24;
      }
LABEL_30:
      v9 += 24;
    }
  }
  char v28 = v27;
  BOOL v19 = (unsigned __int8 *)sub_21685F418((uint64_t)(a1 + 6), (int *)v27, (uint64_t)&unk_2174BFD90, &v28);
  sub_21686029C(a1 + 16, v19 + 32);
  sub_216860464(a1 + 6, (int *)v27);
  sub_216860464(a1 + 1, (int *)v27);
  sub_216860464(a1 + 11, (int *)v27);
  if (SHIBYTE(v22) < 0) {
    operator delete(__dst[0]);
  }
  __dst[0] = &__p;
  sub_216782F20((void ***)__dst);
  unint64_t v20 = v26;
  if (v26)
  {
    __dmb(0xBu);
    *unint64_t v20 = 0;
  }
}

void sub_216860228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,unsigned char *a23)
{
  if (a23)
  {
    __dmb(0xBu);
    *a23 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21686029C(void *a1, unsigned __int8 *a2)
{
  __n128 result = (uint64_t *)sub_2168602D4(a1, a2);
  if (result)
  {
    sub_216860418(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

unsigned __int8 *sub_2168602D4(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v4 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    uint64_t v5 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    uint64_t v5 = v4;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v16, (pxrInternal__aapl__pxrReserved__ *)a2, v5);
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v16);
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v7;
    if (v7 >= *(void *)&v6) {
      unint64_t v10 = v7 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v6 - 1) & v7;
  }
  long long v11 = *(unsigned __int8 ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *v11;
  if (*v11)
  {
    uint64_t v13 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v14 = *((void *)v12 + 1);
      if (v14 == v7)
      {
        if (sub_2168513F8(v13, v12 + 16, v2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v6) {
            v14 %= *(void *)&v6;
          }
        }
        else
        {
          v14 &= *(void *)&v6 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      uint64_t v12 = *(unsigned __int8 **)v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t sub_216860418(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_216851DB0(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (void **)__p;
  std::string __p = 0;
  if (v3) {
    sub_2168517F0((uint64_t)&v6, v3);
  }
  return v2;
}

uint64_t *sub_216860464(void *a1, int *a2)
{
  __n128 result = sub_21686049C(a1, a2);
  if (result)
  {
    sub_2168605C0(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t *sub_21686049C(void *a1, int *a2)
{
  uint64_t v13 = 0;
  char v14 = 0;
  sub_21685F6A4((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v13, a2);
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * v13);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  unint64_t v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v8 = v5;
    if (v5 >= *(void *)&v4) {
      unint64_t v8 = v5 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v4 - 1) & v5;
  }
  unint64_t v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (unint64_t i = *v9; i; unint64_t i = (uint64_t *)*i)
  {
    unint64_t v11 = i[1];
    if (v11 == v5)
    {
      if (sub_21685F720((_DWORD *)i + 4, a2)) {
        return i;
      }
    }
    else
    {
      if (v7 > 1)
      {
        if (v11 >= *(void *)&v4) {
          v11 %= *(void *)&v4;
        }
      }
      else
      {
        v11 &= *(void *)&v4 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t sub_2168605C0(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_216851DB0(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (void **)__p;
  std::string __p = 0;
  if (v3) {
    sub_21678C278((uint64_t)&v6, v3);
  }
  return v2;
}

void *sub_21686060C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217411631 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  uint64_t v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      unint64_t v5 = operator new(0x70uLL);
      sub_21686189C((unint64_t)v5);
      unint64_t v7 = atomic_load(a1);
      if (v7)
      {
        if (v5 != (void *)v7)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          char v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingR"
                "egistry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v6);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v5))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        char v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingReg"
              "istry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v6, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry*> &)::isInitializing);
  }
  unint64_t v9 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v9;
}

void sub_216860874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::SetInstanceConstructed(unint64_t result)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance, result))
  {
    uint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingReg"
            "istry>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::DeleteInstance()
{
  for (unint64_t i = (std::mutex *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
        i;
        unint64_t i = v1)
  {
    uint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance, (unint64_t *)&v1, 0);
    if (v1 == i)
    {
      sub_216861718((uint64_t)&i[1]);
      std::mutex::~mutex(i);
      operator delete(v2);
      return;
    }
    sched_yield();
  }
}

void pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>(uint64_t a1)
{
  sub_216779094(v27, *(char **)(a1 + 16));
  unsigned __int8 v26 = *(unsigned char *)(a1 + 8);
  int v2 = v28;
  long long v3 = (const char *)v27[0];
  if (v26) {
    char v4 = "true";
  }
  else {
    char v4 = "false";
  }
  sub_216779094(__p, v4);
  if (v2 >= 0) {
    int v5 = (const char *)v27;
  }
  else {
    int v5 = v3;
  }
  if ((v25 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  setenv(v5, (const char *)v6, 1);
  if ((char)v25 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = (std::mutex *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance();
  }
  if (sub_216860C84(v7, (uint64_t)v27, &v26, *(unint64_t **)a1) && *(unsigned __int8 *)(a1 + 8) != v26)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v26) {
      unint64_t v9 = "true";
    }
    else {
      unint64_t v9 = "false";
    }
    sub_216779094(__b, v9);
    int v10 = v23;
    unint64_t v11 = (void **)__b[0];
    if (*(unsigned char *)(a1 + 8)) {
      std::string v12 = "true";
    }
    else {
      std::string v12 = "false";
    }
    sub_216779094(v20, v12);
    std::string::size_type v15 = __b;
    if (v10 < 0) {
      std::string::size_type v15 = v11;
    }
    if (v21 >= 0) {
      uint64_t v16 = v20;
    }
    else {
      uint64_t v16 = (void **)v20[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"#  %s is overridden to '%s'.  Default is '%s'.  #", v13, v14, v8, v15, v16);
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v23 < 0) {
      operator delete(__b[0]);
    }
    if ((v25 & 0x80u) == 0) {
      size_t v17 = v25;
    }
    else {
      size_t v17 = (size_t)__p[1];
    }
    sub_2167794AC(__b, v17, 35);
    if (v23 >= 0) {
      char v18 = __b;
    }
    else {
      char v18 = (void **)__b[0];
    }
    int v19 = __p;
    if ((v25 & 0x80u) != 0) {
      int v19 = (void **)__p[0];
    }
    fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n%s\n%s\n", (const char *)v18, (const char *)v19, (const char *)v18);
    if (v23 < 0) {
      operator delete(__b[0]);
    }
    if ((char)v25 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
}

void sub_216860C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 65) < 0) {
    operator delete(*(void **)(v29 - 88));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216860C84(std::mutex *a1, uint64_t a2, unsigned char *a3, unint64_t *a4)
{
  std::mutex::lock(a1);
  if (atomic_load(a4))
  {
    std::mutex::unlock(a1);
    return 0;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 16);
  }
  LOBYTE(v17) = *a3;
  int v20 = 1;
  int v10 = sub_216861E1C((uint64_t)&a1[1], (unsigned __int8 *)__p, (long long *)__p);
  char v12 = v11;
  sub_216861824((uint64_t)&v17);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = (unint64_t)(v10 + 40);
  if (*((_DWORD *)v10 + 16) != 1) {
    unint64_t v13 = 0;
  }
  atomic_store(v13, a4);
  std::mutex::unlock(a1);
  if (!v12)
  {
    __p[0] = "tf/envSetting.cpp";
    __p[1] = "Define";
    uint64_t v16 = 148;
    size_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry::Define(const string &, const U &, std::atomic<U "
          "*> *) [U = BOOL]";
    char v18 = 0;
    int v19 = 1;
    if (*(char *)(a2 + 23) >= 0) {
      int v14 = (const char *)a2;
    }
    else {
      int v14 = *(const char **)a2;
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Multiple definitions of TfEnvSetting variable detected.  This is usually due to software misconfiguration.  Contact the build team for assistance.  (duplicate '%s')", v14);
    return 0;
  }
  return a1[1].__m_.__opaque[32] != 0;
}

void sub_216860DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>(uint64_t a1)
{
  sub_216779094(v30, *(char **)(a1 + 16));
  unsigned int v29 = *(_DWORD *)(a1 + 8);
  int v2 = v31;
  long long v3 = (const char *)v30[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d", v4, v5, v29);
  if (v2 >= 0) {
    uint64_t v6 = (const char *)v30;
  }
  else {
    uint64_t v6 = v3;
  }
  if ((v28 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  setenv(v6, (const char *)v7, 1);
  if ((char)v28 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (std::mutex *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance();
  }
  if (sub_216861070(v8, (uint64_t)v30, &v29, *(unint64_t **)a1) && *(_DWORD *)(a1 + 8) != v29)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d", v9, v10, v29);
    int v12 = v26;
    unint64_t v13 = (void **)__b[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d", v14, v15, *(unsigned int *)(a1 + 8));
    char v18 = __b;
    if (v12 < 0) {
      char v18 = v13;
    }
    if (v24 >= 0) {
      int v19 = &v23;
    }
    else {
      int v19 = v23;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"#  %s is overridden to '%s'.  Default is '%s'.  #", v16, v17, v11, v18, v19);
    if (v24 < 0) {
      operator delete(v23);
    }
    if (v26 < 0) {
      operator delete(__b[0]);
    }
    if ((v28 & 0x80u) == 0) {
      size_t v20 = v28;
    }
    else {
      size_t v20 = (size_t)__p[1];
    }
    sub_2167794AC(__b, v20, 35);
    if (v26 >= 0) {
      char v21 = __b;
    }
    else {
      char v21 = (void **)__b[0];
    }
    uint64_t v22 = __p;
    if ((v28 & 0x80u) != 0) {
      uint64_t v22 = (void **)__p[0];
    }
    fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n%s\n%s\n", (const char *)v21, (const char *)v22, (const char *)v21);
    if (v26 < 0) {
      operator delete(__b[0]);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
}

void sub_216861004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 49) < 0) {
    operator delete(*(void **)(v29 - 72));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216861070(std::mutex *a1, uint64_t a2, _DWORD *a3, unint64_t *a4)
{
  std::mutex::lock(a1);
  if (atomic_load(a4))
  {
    std::mutex::unlock(a1);
    return 0;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 16);
  }
  LODWORD(v17) = *a3;
  int v20 = 0;
  int v10 = sub_216861E1C((uint64_t)&a1[1], (unsigned __int8 *)__p, (long long *)__p);
  char v12 = v11;
  sub_216861824((uint64_t)&v17);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = (unint64_t)(v10 + 40);
  if (*((_DWORD *)v10 + 16)) {
    unint64_t v13 = 0;
  }
  atomic_store(v13, a4);
  std::mutex::unlock(a1);
  if (!v12)
  {
    __p[0] = "tf/envSetting.cpp";
    __p[1] = "Define";
    uint64_t v16 = 148;
    size_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry::Define(const string &, const U &, std::atomic<U *> *) [U = int]";
    char v18 = 0;
    int v19 = 1;
    if (*(char *)(a2 + 23) >= 0) {
      int v14 = (const char *)a2;
    }
    else {
      int v14 = *(const char **)a2;
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Multiple definitions of TfEnvSetting variable detected.  This is usually due to software misconfiguration.  Contact the build team for assistance.  (duplicate '%s')", v14);
    return 0;
  }
  return a1[1].__m_.__opaque[32] != 0;
}

void sub_2168611C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>(uint64_t a1)
{
  int v2 = (const char *)v29;
  sub_216779094(v29, *(char **)(a1 + 16));
  sub_216779094(&__s1, *(char **)(a1 + 8));
  if (v30 < 0) {
    int v2 = (const char *)v29[0];
  }
  if (SHIBYTE(v28) < 0)
  {
    sub_216778F24(__p, (void *)__s1, *((unint64_t *)&__s1 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __s1;
    uint64_t v26 = v28;
  }
  if (v26 >= 0) {
    long long v3 = __p;
  }
  else {
    long long v3 = (void **)__p[0];
  }
  setenv(v2, (const char *)v3, 1);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  char v4 = (std::mutex *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance();
  }
  BOOL v5 = sub_216861518(v4, (uint64_t)v29, &__s1, *(unint64_t **)a1);
  char v6 = HIBYTE(v28);
  if (!v5)
  {
LABEL_47:
    if ((v6 & 0x80) == 0) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  unint64_t v7 = *(char **)(a1 + 8);
  size_t v8 = strlen(v7);
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    if (v8 != HIBYTE(v28))
    {
LABEL_18:
      uint64_t v9 = *(void *)(a1 + 16);
      *(_OWORD *)__b = __s1;
      uint64_t v24 = v28;
LABEL_25:
      int v12 = SHIBYTE(v24);
      unint64_t v13 = (void **)__b[0];
      sub_216779094(v21, v7);
      uint64_t v16 = __b;
      if (v12 < 0) {
        uint64_t v16 = v13;
      }
      if (v22 >= 0) {
        size_t v17 = v21;
      }
      else {
        size_t v17 = (void **)v21[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"#  %s is overridden to '%s'.  Default is '%s'.  #", v14, v15, v9, v16, v17);
      if (v22 < 0) {
        operator delete(v21[0]);
      }
      if (SHIBYTE(v24) < 0) {
        operator delete(__b[0]);
      }
      if (v26 >= 0) {
        size_t v18 = HIBYTE(v26);
      }
      else {
        size_t v18 = (size_t)__p[1];
      }
      sub_2167794AC(__b, v18, 35);
      if (v24 >= 0) {
        int v19 = __b;
      }
      else {
        int v19 = (void **)__b[0];
      }
      int v20 = __p;
      if (v26 < 0) {
        int v20 = (void **)__p[0];
      }
      fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n%s\n%s\n", (const char *)v19, (const char *)v20, (const char *)v19);
      if (SHIBYTE(v24) < 0) {
        operator delete(__b[0]);
      }
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      char v6 = HIBYTE(v28);
      goto LABEL_47;
    }
    if (v8 != -1)
    {
      if (!memcmp(&__s1, v7, v8)) {
        goto LABEL_49;
      }
      goto LABEL_18;
    }
LABEL_52:
    sub_216855AD4();
  }
  unint64_t v10 = *((void *)&__s1 + 1);
  if (v8 != *((void *)&__s1 + 1))
  {
    uint64_t v9 = *(void *)(a1 + 16);
    char v11 = (void *)__s1;
    goto LABEL_24;
  }
  if (v8 == -1) {
    goto LABEL_52;
  }
  char v11 = (void *)__s1;
  if (memcmp((const void *)__s1, v7, v8))
  {
    uint64_t v9 = *(void *)(a1 + 16);
LABEL_24:
    sub_216778F24(__b, v11, v10);
    unint64_t v7 = *(char **)(a1 + 8);
    goto LABEL_25;
  }
LABEL_48:
  operator delete((void *)__s1);
LABEL_49:
  if (v30 < 0) {
    operator delete(v29[0]);
  }
}

void sub_216861490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v30 - 73) < 0) {
    operator delete(*(void **)(v30 - 96));
  }
  if (*(char *)(v30 - 49) < 0) {
    operator delete(*(void **)(v30 - 72));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216861518(std::mutex *a1, uint64_t a2, long long *a3, unint64_t *a4)
{
  std::mutex::lock(a1);
  if (atomic_load(a4))
  {
    std::mutex::unlock(a1);
    return 0;
  }
  sub_216862330((char *)&__p, (long long *)a2, a3);
  unint64_t v10 = sub_216861E1C((uint64_t)&a1[1], (unsigned __int8 *)&__p, &__p);
  char v12 = v11;
  sub_216861824((uint64_t)&v17);
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)__p);
  }
  unint64_t v13 = (unint64_t)(v10 + 40);
  if (*((_DWORD *)v10 + 16) != 2) {
    unint64_t v13 = 0;
  }
  atomic_store(v13, a4);
  std::mutex::unlock(a1);
  if (!v12)
  {
    *(void *)&long long __p = "tf/envSetting.cpp";
    *((void *)&__p + 1) = "Define";
    uint64_t v16 = 148;
    size_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry::Define(const string &, const U &, std::atomic<U "
          "*> *) [U = std::string]";
    char v18 = 0;
    int v19 = 1;
    if (*(char *)(a2 + 23) >= 0) {
      int v14 = (const char *)a2;
    }
    else {
      int v14 = *(const char **)a2;
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"Multiple definitions of TfEnvSetting variable detected.  This is usually due to software misconfiguration.  Contact the build team for assistance.  (duplicate '%s')", v14);
    return 0;
  }
  return a1[1].__m_.__opaque[32] != 0;
}

void sub_216861644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168617E8((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::Tf_GetEnvSettingByName(unsigned __int8 *a1)
{
  int v2 = (std::mutex *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance();
  }

  return sub_2168616B8(v2, a1);
}

unsigned __int8 *sub_2168616B8(std::mutex *a1, unsigned __int8 *a2)
{
  std::mutex::lock(a1);
  char v4 = sub_2168512B4(&a1[1].__m_.__sig, a2);
  if (v4) {
    BOOL v5 = v4 + 40;
  }
  else {
    BOOL v5 = 0;
  }
  std::mutex::unlock(a1);
  return v5;
}

void sub_216861704(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216861718(uint64_t a1)
{
  sub_216861754(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216861754(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      long long v3 = (void *)*v2;
      sub_216861798((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void sub_216861798(uint64_t a1)
{
  sub_216861824(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_2168617E8(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216861824(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C74BCE0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_216861888(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

unint64_t sub_21686189C(unint64_t a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  *(void *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1065353216;
  sub_216779094(v43, "PIXAR_TF_ENV_SETTING_FILE");
  sub_216779094(&__p, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v43, (uint64_t)&__p, (uint64_t)v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(v43[0]);
  }
  if (v41 >= 0) {
    uint64_t v2 = v40;
  }
  else {
    uint64_t v2 = (void **)v40[0];
  }
  long long v3 = pxrInternal__aapl__pxrReserved__::ArchOpenFile((const char *)v2, "r");
  if (v3)
  {
    int v38 = 0;
    v37[0] = (const char *)v40;
    v37[1] = (const char *)&v38;
    while (fgets((char *)v43, 1024, v3))
    {
      ++v38;
      sub_216779094(&__p, (char *)v43);
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (p_p->__r_.__value_.__s.__data_[size - 1] == 10)
      {
        pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", &__p, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__str.__r_.__value_.__l.__size_)
          {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            goto LABEL_22;
          }
LABEL_39:
          operator delete(__str.__r_.__value_.__l.__data_);
          goto LABEL_40;
        }
        if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
        {
          p_str = &__str;
LABEL_22:
          if (p_str->__r_.__value_.__s.__data_[0] != 35)
          {
            std::string::size_type v13 = std::string::find(&__str, 61, 0);
            if (v13 == -1)
            {
              sub_216861D74(v37, (pxrInternal__aapl__pxrReserved__ *)"no '=' found", v14, v15, v16, v17, v18, v19, v32);
            }
            else
            {
              std::string::size_type v20 = v13;
              std::string::basic_string(&v34, &__str, 0, v13, (std::allocator<char> *)&v33);
              pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", &v34, &v35);
              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v34.__r_.__value_.__l.__data_);
              }
              std::string::basic_string(&v33, &__str, v20 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v42);
              pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", &v33, &v34);
              if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v33.__r_.__value_.__l.__data_);
              }
              std::string::size_type v27 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
              if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v27 = v35.__r_.__value_.__l.__size_;
              }
              if (v27) {
                pxrInternal__aapl__pxrReserved__::ArchSetEnv((const char *)&v35, (const char *)&v34, 0);
              }
              else {
                sub_216861D74(v37, (pxrInternal__aapl__pxrReserved__ *)"empty key", v21, v22, v23, v24, v25, v26, v32);
              }
              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v34.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v35.__r_.__value_.__l.__data_);
              }
            }
          }
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_40;
          }
          goto LABEL_39;
        }
      }
      else
      {
        sub_216861D74(v37, (pxrInternal__aapl__pxrReserved__ *)"line too long; ignored", v4, v5, v6, v7, v8, v9, v32);
      }
LABEL_40:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    fclose(v3);
  }
  sub_216779094(v43, "TF_ENV_SETTING_ALERTS_ENABLED");
  BOOL v28 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)v43, 1);
  *(unsigned char *)(a1 + 104) = v28;
  if (SHIBYTE(v44) < 0) {
    operator delete(v43[0]);
  }
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance, a1))
  {
    v43[0] = "tf/instantiateSingleton.h";
    v43[1] = "SetInstanceConstructed";
    uint64_t v44 = 56;
    int v45 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegis"
          "try>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry]";
    char v46 = 0;
    int v47 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v43, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v29);
  }
  uint64_t Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance((pxrInternal__aapl__pxrReserved__::TfRegistryManager *)v28);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_26C74BCF8);
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  return a1;
}

void sub_216861C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  sub_216861718((uint64_t)&v55[1]);
  std::mutex::~mutex(v55);
  _Unwind_Resume(a1);
}

void sub_216861D74(const char **a1, pxrInternal__aapl__pxrReserved__ *this, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = (const char *)&a9;
  uint64_t v9 = (FILE *)*MEMORY[0x263EF8348];
  unint64_t v10 = *a1;
  if ((*a1)[23] < 0) {
    unint64_t v10 = *(const char **)v10;
  }
  int v11 = *(_DWORD *)a1[1];
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, v15, a3);
  if (v14 >= 0) {
    char v12 = __p;
  }
  else {
    char v12 = (void **)__p[0];
  }
  fprintf(v9, "File '%s' (From PIXAR_TF_ENV_SETTING_FILE) line %d: %s.\n", v10, v11, (const char *)v12);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
}

unsigned __int8 *sub_216861E1C(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v5 = a2;
  uint64_t v25 = 0;
  char v26 = 0;
  uint64_t v7 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    uint64_t v8 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    uint64_t v8 = v7;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, (pxrInternal__aapl__pxrReserved__ *)a2, v8);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * (void)v25);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
    std::string::size_type v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v5)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_2168620CC(a1, v9, a3, (uint64_t)&v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)uint64_t v25 = *v22;
    void *v22 = v25;
  }
  else
  {
    *(void *)uint64_t v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25)
    {
      unint64_t v23 = *(void *)(*(void *)v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25;
    }
  }
  unint64_t i = v25;
  uint64_t v25 = 0;
  ++*(void *)(a1 + 24);
  sub_2168622D8((uint64_t)&v25, 0);
  return i;
}

void sub_2168620B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168622D8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_2168620CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  unint64_t result = sub_216862144(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_21686212C(_Unwind_Exception *a1)
{
  sub_2168622D8(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_216862144(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_2168621BC((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_2168621A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168621BC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_216862204(a1, a2);
  return a1;
}

void sub_2168621F0(_Unwind_Exception *a1)
{
  sub_216861824(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216862204(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_26C74BCE0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26C74BD08[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void sub_216862294(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void sub_2168622A0(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void *sub_2168622AC(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0) {
    return sub_216778F24(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  long long v3 = *a3;
  __dst[2] = *((void *)a3 + 2);
  *(_OWORD *)long long __dst = v3;
  return result;
}

void sub_2168622D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216861798((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

char *sub_216862330(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  char v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)char v6 = v7;
  }
  *((_DWORD *)__dst + 12) = 2;
  return __dst;
}

void sub_2168623B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfError::TfError(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, long long *a5, std::string *__str, void (**a7)(uint64_t, void, void (**)(uint64_t), void, void), char a8)
{
  v17[4] = *(void (**)(uint64_t))MEMORY[0x263EF8340];
  v17[0] = 0;
  v17[1] = 0;
  if (*a7) {
    (*a7)(1, a7, v17, 0, 0);
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticBase::TfDiagnosticBase(a1, a2, a3, a4, a5, __str, v17, a8);
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))v17);
  unint64_t v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v15) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  *(void *)(a1 + 136) = atomic_fetch_add((atomic_ullong *volatile)(v15 + 144), 1uLL);
  return a1;
}

void sub_2168624D4(_Unwind_Exception *a1)
{
  sub_21685A3F4(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl(pxrInternal__aapl__pxrReserved__::TfErrorMark *this, atomic_ullong *a2)
{
  long long v3 = a2 + 19;
  char v7 = 0;
  uint64_t v4 = *(void *)(sub_2168520EC(a2 + 19, &v7) + 8);
  char v8 = 0;
  uint64_t v5 = sub_2168520EC(v3, &v8);
  return v4 == v5 || *(void *)(*(void *)v5 + 152) < *(void *)this;
}

void *pxrInternal__aapl__pxrReserved__::TfErrorMark::_ReportErrors(pxrInternal__aapl__pxrReserved__::TfErrorMark *this, atomic_ullong *a2)
{
  long long v3 = sub_216862604((unint64_t *)this, 0);
  char v7 = 0;
  uint64_t v4 = (void *)sub_2168520EC(a2 + 19, &v7);
  if (v4 != v3)
  {
    uint64_t v5 = v3;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_ReportError(a2, (uint64_t)(v5 + 2));
      uint64_t v5 = (void *)v5[1];
    }
    while (v5 != v4);
  }
  return pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(a2, v3, v4);
}

void *sub_216862604(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v5 = *a1;

  return pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_GetErrorMarkBegin(v4, v5, a2);
}

pxrInternal__aapl__pxrReserved__::TfErrorMark *pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark(pxrInternal__aapl__pxrReserved__::TfErrorMark *this)
{
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  char v7 = 0;
  long long v3 = sub_21685C0E0(v2 + 344, &v7);
  ++*v3;
  unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v5 = atomic_load((unint64_t *)(v4 + 144));
  *(void *)this = v5;
  return this;
}

void pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark(pxrInternal__aapl__pxrReserved__::TfErrorMark *this)
{
  unint64_t v2 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  char v8 = 0;
  long long v3 = sub_21685C0E0((uint64_t)(v2 + 43), &v8);
  if ((*v3)-- == 1)
  {
    unint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v5) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v6 = *(void *)this;
    unint64_t v7 = atomic_load((unint64_t *)(v5 + 144));
    if (v6 < v7 && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl(this, (atomic_ullong *)v5)) {
      pxrInternal__aapl__pxrReserved__::TfErrorMark::_ReportErrors(this, v2);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::TfReportActiveErrorMarks(pxrInternal__aapl__pxrReserved__ *this)
{
  memset(&v28, 0, sizeof(v28));
  std::string::append(&v28, "- Set _enableTfErrorMarkStackTraces and recompile tf/errorMark.cpp.\n");
  if (!sub_21685A328(2)) {
    std::string::append(&v28, "- Enable the TF_ERROR_MARK_TRACKING debug code.\n");
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v28.__r_.__value_.__l.__size_)
    {
      long long v3 = (std::string *)v28.__r_.__value_.__r.__words[0];
      goto LABEL_8;
    }
  }
  else if (*((unsigned char *)&v28.__r_.__value_.__s + 23))
  {
    long long v3 = &v28;
LABEL_8:
    printf("Active error mark stack traces are disabled.  To enable, please do the following:\n%s", (const char *)v3);
    goto LABEL_28;
  }
  long long v25 = 0u;
  long long v26 = 0u;
  int v27 = 1065353216;
LABEL_10:
  char v4 = 8 * (&dword_26798E378 & 3);
  int v5 = *(_DWORD *)((unint64_t)&dword_26798E378 & 0xFFFFFFFFFFFFFFFCLL) & ~(255 << v4);
  unsigned int v6 = v5 | (1 << v4);
  while (1)
  {
    int v7 = v5;
    atomic_compare_exchange_strong((atomic_uint *volatile)((unint64_t)&dword_26798E378 & 0xFFFFFFFFFFFFFFFCLL), (unsigned int *)&v7, v6);
    if (v7 == v5) {
      break;
    }
    if (*(_DWORD *)((unint64_t)&dword_26798E378 & 0xFFFFFFFFFFFFFFFCLL) != v5)
    {
      sched_yield();
      goto LABEL_10;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E388, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E388))
  {
    float v16 = operator new(0x28uLL);
    _OWORD *v16 = 0u;
    v16[1] = 0u;
    *((_DWORD *)v16 + 8) = 1065353216;
    qword_26798E380 = (uint64_t)v16;
    __cxa_guard_release(&qword_26798E388);
  }
  if (&v25 != (long long *)qword_26798E380)
  {
    int v27 = *(_DWORD *)(qword_26798E380 + 32);
    sub_216862CFC(&v25, *(void **)(qword_26798E380 + 16), 0);
  }
  __dmb(0xBu);
  LOBYTE(dword_26798E378) = 0;
  uint64_t v23 = v26;
  uint64_t v24 = 0;
  uint64_t v8 = *MEMORY[0x263F8C2B8];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  while (v23 != v24)
  {
    uint8x8_t v11 = sub_216862B78(&v23, v1, v2);
    printf("== TfErrorMark @ %p created from ===========================\n", *(const void **)(*v11 + 16));
    sub_216778A5C((uint64_t)v19);
    char v14 = sub_216862B78(&v23, v12, v13);
    pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames(v20, (uint64_t *)(*v14 + 24), 0);
    std::stringbuf::str();
    if (v18 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    puts(p_p);
    if (v18 < 0) {
      operator delete(__p);
    }
    v19[0] = v8;
    *(void *)((char *)v19 + *(void *)(v8 - 24)) = v9;
    v20[0] = v10;
    v20[1] = MEMORY[0x263F8C318] + 16;
    if (v21 < 0) {
      operator delete((void *)v20[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x21D447E60](&v22);
    sub_216862BF4((uint64_t)&v23);
  }
  sub_216862C74((uint64_t)&v25);
LABEL_28:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_216862B08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_26798E388);
  __dmb(0xBu);
  LOBYTE(dword_26798E378) = 0;
  sub_216862C74(v1 - 160);
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

void *sub_216862B78(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHashMap<const pxr"
            "Internal__aapl__pxrReserved__::TfErrorMark *, std::vector<unsigned long>, pxrInternal__aapl__pxrReserved__::"
            "TfHash>>::operator->() [T = pxrInternal__aapl__pxrReserved__::TfHashMap<const pxrInternal__aapl__pxrReserved"
            "__::TfErrorMark *, std::vector<unsigned long>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216862BF4(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHas"
            "hMap<const pxrInternal__aapl__pxrReserved__::TfErrorMark *, std::vector<unsigned long>, pxrInternal__aapl__p"
            "xrReserved__::TfHash>>::operator++() [T = pxrInternal__aapl__pxrReserved__::TfHashMap<const pxrInternal__aap"
            "l__pxrReserved__::TfErrorMark *, std::vector<unsigned long>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)a1 = **(void **)a1;
  }
  return a1;
}

uint64_t sub_216862C74(uint64_t a1)
{
  sub_216862CB0(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216862CB0(int a1, void *__p)
{
  if (__p)
  {
    unint64_t v2 = __p;
    do
    {
      long long v3 = (void *)*v2;
      char v4 = (void *)v2[3];
      if (v4)
      {
        void v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216862CFC(void *a1, void *a2, void *a3)
{
  char v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        v13[0] = v8 + 2;
        v13[1] = v8 + 3;
        sub_216862E44((uint64_t)v13, (uint64_t)(v4 + 2));
        uint64_t v10 = (void *)*v8;
        unint64_t v11 = bswap64(0x9E3779B97F4A7C55 * v8[2]);
        v8[1] = v11;
        uint64_t v12 = sub_216862E98((uint64_t)a1, v11, v8 + 2);
        sub_216862FF0(a1, v8, v12);
        char v4 = (void *)*v4;
        if (!v10) {
          break;
        }
        uint64_t v8 = v10;
      }
      while (v4 != a3);
    }
    sub_216862CB0((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_21686333C(a1, v4 + 2);
    char v4 = (void *)*v4;
  }
}

void sub_216862E14(void *a1)
{
  __cxa_begin_catch(a1);
  sub_216862CB0(v1, v2);
  __cxa_rethrow();
}

void sub_216862E30(_Unwind_Exception *a1)
{
}

uint64_t sub_216862E44(uint64_t a1, uint64_t a2)
{
  **(void **)a1 = *(void *)a2;
  long long v3 = *(char **)(a1 + 8);
  if (v3 != (char *)(a2 + 8)) {
    sub_21677CC7C(v3, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  }
  return a1;
}

void *sub_216862E98(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_2168630D8(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  float v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    unint64_t result = v16;
    float v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *sub_216862FF0(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void sub_2168630D8(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_2168631C8(a1, prime);
    }
  }
}

void sub_2168631C8(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_21677CA1C();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_21686333C(void *a1, void *a2)
{
  sub_2168633D4((uint64_t)a1, a2, (uint64_t)&v8);
  int8x8_t v3 = v8;
  int8x8_t v4 = v8 + 2;
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * v8[2]);
  v8[1] = v5;
  uint64_t v6 = sub_216862E98((uint64_t)a1, v5, v4);
  sub_216862FF0(a1, v3, v6);
  return v3;
}

void sub_2168633B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_21686350C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2168633D4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *uint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = (const void *)a2[1];
  _OWORD v6[2] = *a2;
  void v6[4] = 0;
  v6[5] = 0;
  v6[3] = 0;
  unint64_t result = sub_216863490(v6 + 3, v7, a2[2], (uint64_t)(a2[2] - (void)v7) >> 3);
  *(unsigned char *)(a3 + 16) = 1;
  v6[1] = bswap64(0x9E3779B97F4A7C55 * v6[2]);
  return result;
}

void sub_216863474(_Unwind_Exception *a1)
{
  *unint64_t v2 = 0;
  sub_21686350C(v3, v1);
  _Unwind_Resume(a1);
}

void *sub_216863490(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    unint64_t result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2168634F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21686350C(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void pxrInternal__aapl__pxrReserved__::TfErrorTransport::_PostImpl(pxrInternal__aapl__pxrReserved__::TfErrorTransport *this)
{
  unint64_t v2 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }

  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_SpliceErrors(v2, this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfBaseException::TfBaseException(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_26C74BD30;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v3 = a1 + 72;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  return a1;
}

void sub_216863644(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = (std::exception_vtbl *)*v3;
  if (*v3)
  {
    v1[7].__vftable = v5;
    operator delete(v5);
  }
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfBaseException::~TfBaseException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C74BD30;
  if (SHIBYTE(this[11].__vftable) < 0) {
    operator delete(this[9].__vftable);
  }
  unint64_t v2 = this[6].__vftable;
  if (v2)
  {
    this[7].__vftable = v2;
    operator delete(v2);
  }

  std::exception::~exception(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::TfBaseException::~TfBaseException(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfBaseException::_ThrowImpl(long long *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), int a5)
{
  sub_216779094(__p, "TF_FATAL_THROW");
  BOOL v10 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
  BOOL v11 = v10;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p[0]);
    if (!v11) {
      goto LABEL_9;
    }
LABEL_5:
    __p[0] = "tf/exception.cpp";
    __p[1] = "_ThrowImpl";
    uint64_t v23 = 52;
    uint64_t v24 = "static void pxrInternal__aapl__pxrReserved__::TfBaseException::_ThrowImpl(const TfCallContext &, TfBaseExcepti"
          "on &, TfFunctionRef<void ()>, int)";
    char v25 = 0;
    int v26 = 4;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(*(void *)(*(void *)a2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v20);
    if (v21 >= 0) {
      uint8x8_t v14 = v20;
    }
    else {
      uint8x8_t v14 = (void **)v20[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"%s (%s thrown)", v13, v12, v14);
  }
  if (v10) {
    goto LABEL_5;
  }
LABEL_9:
  if (*(void *)a1) {
    BOOL v15 = *((void *)a1 + 1) == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15) {
    int v16 = a5;
  }
  else {
    int v16 = a5 + 1;
  }
  pxrInternal__aapl__pxrReserved__::ArchGetStackFrames((pxrInternal__aapl__pxrReserved__ *)0x40, v16 + 2, (uint64_t *)(a2 + 48));
  long long v17 = *a1;
  long long v18 = a1[1];
  *(unsigned char *)(a2 + 40) = *((unsigned char *)a1 + 32);
  *(_OWORD *)(a2 + 24) = v18;
  *(_OWORD *)(a2 + 8) = v17;
  return a4(a3);
}

void sub_216863890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfBaseException::what(pxrInternal__aapl__pxrReserved__::TfBaseException *this)
{
  uint64_t result = (uint64_t)this + 72;
  if (*((char *)this + 95) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::Invoke(uint64_t this, const void *a2)
{
  if (pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func) {
    return pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func(this);
  }
  return this;
}

uint64_t (*pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::SetNotifier(uint64_t (*this)(void), void (*a2)(const void *), char *a3))(void)
{
  if (this && pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func)
  {
    v3[0] = "tf/expiryNotifier.cpp";
    v3[1] = "SetNotifier";
    v3[2] = 43;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::SetNotifier(void (*)(const void *))";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"cannot override already installed notification function", a3);
  }
  pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func = this;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::Invoke2(uint64_t this, const void *a2)
{
  if (pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func2) {
    return pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func2(this);
  }
  return this;
}

uint64_t (*pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::SetNotifier2(uint64_t (*this)(void), void (*a2)(const void *), char *a3))(void)
{
  if (this && pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func2)
  {
    v3[0] = "tf/expiryNotifier.cpp";
    v3[1] = "SetNotifier2";
    v3[2] = 57;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::SetNotifier2(void (*)(const void *))";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"cannot override already installed notification(2) function", a3);
  }
  pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func2 = this;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFastCompression::GetMaxInputSize(pxrInternal__aapl__pxrReserved__::TfFastCompression *this)
{
  return 0x3E82000000;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize(pxrInternal__aapl__pxrReserved__::TfFastCompression *this)
{
  if ((unint64_t)this > 0x3E82000000) {
    return 0;
  }
  if ((unint64_t)this <= 0x7E000000) {
    return (int)(pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compressBound(this) + 1);
  }
  uint64_t v2 = (((unint64_t)this >> 25) * (unsigned __int128)0x410410410410411uLL) >> 64;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)((char *)this - 2113929216 * v2);
  uint64_t v4 = ((int)pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compressBound((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)0x7E000000)
      + 4)
     * v2;
  if (v3) {
    return v4 + (int)pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compressBound(v3) + 5;
  }
  else {
    return v4 + 1;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer(pxrInternal__aapl__pxrReserved__::TfFastCompression *this, char *a2, unint64_t a3)
{
  if (a3 <= 0x3E82000000)
  {
    if (a3 > 0x7E000000)
    {
      uint64_t v8 = ((a3 >> 25) * (unsigned __int128)0x410410410410411uLL) >> 64;
      uint8x8_t v9 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(a3 - 2113929216 * v8);
      if (v9) {
        char v10 = v8 + 1;
      }
      else {
        char v10 = ((a3 >> 25) * (unsigned __int128)0x410410410410411uLL) >> 64;
      }
      *a2 = v10;
      uint64_t v7 = a2 + 1;
      do
      {
        pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compressBound((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)0x7E000000);
        int v11 = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_default(this, v7 + 4, (char *)0x7E000000);
        *(_DWORD *)uint64_t v7 = v11;
        v7 += v11 + 4;
        this = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)((char *)this + 2113929216);
        --v8;
      }
      while (v8);
      if (v9)
      {
        pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compressBound(v9);
        int v12 = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_default(this, v7 + 4, (char *)v9);
        *(_DWORD *)uint64_t v7 = v12;
        v7 += v12 + 4;
      }
    }
    else
    {
      *a2 = 0;
      pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)a3);
      uint64_t v7 = &a2[(int)(pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_default(this, a2 + 1, (char *)a3) + 1)];
    }
    return v7 - a2;
  }
  else
  {
    v13[0] = "tf/fastCompression.cpp";
    v13[1] = "CompressToBuffer";
    void v13[2] = 72;
    v13[3] = "static size_t pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer(const char *, char *, size_t)";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to compress a buffer of %zu bytes, more than the maximum supported %zu", a3, 0x3E82000000uLL);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(pxrInternal__aapl__pxrReserved__::TfFastCompression *this, char *__dst, char *a3, unint64_t a4)
{
  uint64_t v4 = 0;
  if (a3)
  {
    unint64_t v5 = a4;
    if (a4)
    {
      uint64_t v7 = __dst;
      uint64_t v8 = (char *)this + 1;
      int v9 = *(unsigned __int8 *)this;
      if (*(unsigned char *)this)
      {
        uint64_t v4 = 0;
        uint64_t v10 = 1;
        while (1)
        {
          uint64_t v11 = v10 + 4;
          if (v10 + 4 > (unint64_t)a3)
          {
            unint64_t v20 = "tf/fastCompression.cpp";
            char v21 = "DecompressFromBuffer";
            uint64_t v22 = 143;
            uint64_t v23 = "static size_t pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(const char *, "
                  "char *, size_t, size_t)";
            char v24 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to decompress data. Couldn't read chunk size.");
            return 0;
          }
          unsigned int v14 = *(_DWORD *)v8;
          int v12 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v8 + 4);
          size_t v13 = (char *)v14;
          if ((v14 & 0x80000000) != 0) {
            break;
          }
          uint64_t v10 = (uint64_t)&v13[v11];
          if (&v13[v11] > a3)
          {
            unint64_t v20 = "tf/fastCompression.cpp";
            char v21 = "DecompressFromBuffer";
            uint64_t v22 = 157;
            uint64_t v23 = "static size_t pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(const char *, "
                  "char *, size_t, size_t)";
            char v24 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to decompress data. Chunk too large.");
            return 0;
          }
          if (v5 >= 0x7E000000) {
            int v15 = 2113929216;
          }
          else {
            int v15 = v5;
          }
          unsigned int v16 = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe(v12, v7, v13, v15);
          if ((v16 & 0x80000000) != 0)
          {
            unint64_t v20 = "tf/fastCompression.cpp";
            char v21 = "DecompressFromBuffer";
            uint64_t v18 = 165;
            goto LABEL_20;
          }
          uint64_t v8 = &v13[(void)v12];
          v7 += v16;
          v5 -= v16;
          v4 += v16;
          if (!--v9) {
            return v4;
          }
        }
        unint64_t v20 = "tf/fastCompression.cpp";
        char v21 = "DecompressFromBuffer";
        uint64_t v22 = 151;
        uint64_t v23 = "static size_t pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(const char *, char"
              " *, size_t, size_t)";
        char v24 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to decompress data. Invalid chunk size.");
        return 0;
      }
      unsigned int v17 = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe((pxrInternal__aapl__pxrReserved__::TfFastCompression *)((char *)this + 1), __dst, (char *)(a3 - 1), a4);
      if ((v17 & 0x80000000) != 0)
      {
        unint64_t v20 = "tf/fastCompression.cpp";
        char v21 = "DecompressFromBuffer";
        uint64_t v18 = 131;
LABEL_20:
        uint64_t v22 = v18;
        uint64_t v23 = "static size_t pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(const char *, char"
              " *, size_t, size_t)";
        char v24 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to decompress data, possibly corrupt? LZ4 error code: %d");
        return 0;
      }
      return v17;
    }
  }
  return v4;
}

BOOL pxrInternal__aapl__pxrReserved__::TfPathExists(const char *a1, int a2)
{
  BOOL v2 = sub_216863E50(a1, a2, 0);
  if (!v2 && *__error() == 2) {
    *__error() = 0;
  }
  return v2;
}

BOOL sub_216863E50(const char *a1, int a2, stat *a3)
{
  uint64_t v3 = *((unsigned __int8 *)a1 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)a1 + 1);
  }
  if (!v3) {
    return 0;
  }
  unint64_t v5 = (stat *)&v8;
  if (a3) {
    unint64_t v5 = a3;
  }
  if (v4 < 0) {
    a1 = *(const char **)a1;
  }
  if (a2) {
    int v6 = stat(a1, v5);
  }
  else {
    int v6 = lstat(a1, v5);
  }
  return v6 == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsDir(const char *a1, int a2)
{
  LODWORD(result) = sub_216863E50(a1, a2, &v3);
  if ((v3.st_mode & 0xF000) == 0x4000) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsFile(const char *a1, int a2)
{
  LODWORD(result) = sub_216863E50(a1, a2, &v3);
  if ((v3.st_mode & 0xF000) == 0x8000) {
    return result;
  }
  else {
    return 0;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::TfIsLink(const char *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (!v1) {
    return 0;
  }
  if (v2 < 0) {
    a1 = *(const char **)a1;
  }
  return !lstat(a1, &v5) && (v5.st_mode & 0xF000) == 40960;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsWritable(const char *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  if (!v1) {
    return 0;
  }
  if (v2 < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &v5)) {
    return pxrInternal__aapl__pxrReserved__::ArchStatIsWritable((uint64_t)&v5, v3);
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsDirEmpty(const char *a1)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a1 + 1);
  }
  if (!v2) {
    return 0;
  }
  int v4 = a1;
  if (v3 < 0) {
    a1 = *(const char **)a1;
  }
  int v5 = lstat(a1, &v12);
  uint64_t result = 0;
  if (!v5 && (v12.st_mode & 0xF000) == 0x4000)
  {
    if (v4[23] >= 0) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = *(const char **)v4;
    }
    uint64_t v8 = opendir(v7);
    int v9 = v8;
    if (v8)
    {
      uint64_t v10 = readdir(v8);
      if (v10)
      {
        while (1)
        {
          if (v10->d_ino)
          {
            d_name = v10->d_name;
            if (strcmp(v10->d_name, "."))
            {
              if (strcmp(d_name, "..")) {
                break;
              }
            }
          }
          uint64_t v10 = readdir(v9);
          if (!v10) {
            goto LABEL_17;
          }
        }
        char v1 = 0;
      }
      else
      {
LABEL_17:
        char v1 = 1;
      }
      closedir(v9);
    }
    return (v9 != 0) & v1;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TfSymlink(const char *a1, const char *a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  return symlink(a1, a2) != -1;
}

BOOL pxrInternal__aapl__pxrReserved__::TfDeleteFile(const char *a1)
{
  char v1 = a1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v2 = unlink(a1);
  if (v2)
  {
    v8[0] = "tf/fileUtils.cpp";
    v8[1] = "TfDeleteFile";
    _OWORD v8[2] = 281;
    v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::TfDeleteFile(const std::string &)";
    char v9 = 0;
    if (v1[23] < 0) {
      char v1 = *(const char **)v1;
    }
    int v3 = __error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v3, __p);
    if (v7 >= 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to delete '%s': %s", v1, (const char *)v4);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  return v2 == 0;
}

void sub_216864218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfMakeDir(const char *a1, int a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (a2 == -1) {
    mode_t v2 = 511;
  }
  else {
    mode_t v2 = a2;
  }
  return mkdir(a1, v2) != -1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMakeDirs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (!v3) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::TfNormPath(&__p, a1, 0);
  uint64_t v6 = sub_216864310(&__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_2168642F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216864310(std::string *a1, uint64_t a2, uint64_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E3A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E3A8))
  {
    sub_216779094(&qword_26798E390, "/");
    __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26798E390, &dword_216758000);
    __cxa_guard_release(&qword_26798E3A8);
  }
  pxrInternal__aapl__pxrReserved__::TfGetPathName(a1, (std::string *)&__p);
  if (byte_26798E3A7 >= 0) {
    uint64_t v6 = (char *)&qword_26798E390;
  }
  else {
    uint64_t v6 = (char *)qword_26798E390;
  }
  pxrInternal__aapl__pxrReserved__::TfStringTrimRight(v6, (const std::string *)&__p, &__s1);
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  pxrInternal__aapl__pxrReserved__::TfGetBaseName(a1, &v22);
  std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::size_type v8 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v8 = v22.__r_.__value_.__l.__size_;
    }
    if (v8 && !pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)&__s1, 0))
    {
      uint64_t v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v10 = __s1.__r_.__value_.__l.__size_;
      }
      std::string::size_type v11 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        std::string::size_type v11 = a1->__r_.__value_.__l.__size_;
      }
      if (v10 == v11)
      {
        if (v12 >= 0) {
          size_t v13 = a1;
        }
        else {
          size_t v13 = (std::string *)a1->__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v13, __s1.__r_.__value_.__l.__size_)) {
            goto LABEL_32;
          }
        }
        else
        {
          if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
            goto LABEL_32;
          }
          p_s1 = &__s1;
          while (p_s1->__r_.__value_.__s.__data_[0] == v13->__r_.__value_.__s.__data_[0])
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            size_t v13 = (std::string *)((char *)v13 + 1);
            if (!--v9) {
              goto LABEL_32;
            }
          }
        }
      }
      if ((sub_216864310(&__s1, a2, a3) & 1) == 0 && *__error() != 17)
      {
LABEL_50:
        uint64_t v17 = 0;
        goto LABEL_51;
      }
    }
  }
LABEL_32:
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v15 = (const char *)a1;
  }
  else {
    int v15 = (const char *)a1->__r_.__value_.__r.__words[0];
  }
  if (a2 == -1) {
    mode_t v16 = 511;
  }
  else {
    mode_t v16 = a2;
  }
  if (mkdir(v15, v16) != -1) {
    goto LABEL_39;
  }
  if (!a3) {
    goto LABEL_50;
  }
  std::string::size_type v18 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    std::string::size_type v18 = a1->__r_.__value_.__l.__size_;
  }
  if (!v18) {
    goto LABEL_50;
  }
  if (v19 >= 0) {
    unint64_t v20 = (const char *)a1;
  }
  else {
    unint64_t v20 = (const char *)a1->__r_.__value_.__r.__words[0];
  }
  uint64_t v17 = 0;
  if (!lstat(v20, &__p) && (__p.st_mode & 0xF000) == 0x4000) {
LABEL_39:
  }
    uint64_t v17 = 1;
LABEL_51:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return v17;
}

void sub_21686457C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfReadDir(const char *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  char v60 = 0;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t v9 = opendir(a1);
  std::string::size_type v10 = v9;
  if (v9)
  {
    int v11 = readdir_r(v9, &v66, &v60);
    if (v60 && !v11)
    {
      do
      {
        if (*(unsigned __int16 *)v66.d_name != 46)
        {
          if (*(unsigned __int16 *)v66.d_name ^ 0x2E2E | v66.d_name[2])
          {
            int v12 = dirfd(v10);
            if (!fstatat(v12, v66.d_name, &v59, 32))
            {
              int v15 = v59.st_mode & 0xF000;
              if (v15 == 40960)
              {
                if (a4)
                {
                  sub_216779094(__p, v66.d_name);
                  unint64_t v20 = a4[1];
                  unint64_t v19 = a4[2];
                  if (v20 >= v19)
                  {
                    unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a4) >> 3);
                    unint64_t v31 = v30 + 1;
                    if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      sub_21677CB10();
                    }
                    unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a4) >> 3);
                    if (2 * v32 > v31) {
                      unint64_t v31 = 2 * v32;
                    }
                    if (v32 >= 0x555555555555555) {
                      unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v33 = v31;
                    }
                    unint64_t v65 = a4 + 2;
                    if (v33) {
                      std::string v34 = (char *)sub_216782ED8((uint64_t)(a4 + 2), v33);
                    }
                    else {
                      std::string v34 = 0;
                    }
                    uint64_t v44 = &v34[24 * v30];
                    int v61 = v34;
                    unint64_t v62 = v44;
                    int v64 = &v34[24 * v33];
                    long long v45 = *(_OWORD *)__p;
                    *((void *)v44 + 2) = v58;
                    *(_OWORD *)uint64_t v44 = v45;
                    __p[1] = 0;
                    uint64_t v58 = 0;
                    __p[0] = 0;
                    int v63 = v44 + 24;
                    sub_216790CCC(a4, &v61);
                    uint64_t v46 = a4[1];
                    sub_216790E64((uint64_t)&v61);
                    int v47 = SHIBYTE(v58);
                    a4[1] = v46;
                    if ((v47 & 0x80000000) == 0) {
                      goto LABEL_9;
                    }
LABEL_57:
                    operator delete(__p[0]);
                    goto LABEL_9;
                  }
                  long long v21 = *(_OWORD *)__p;
                  *(void *)(v20 + 16) = v58;
                  *(_OWORD *)unint64_t v20 = v21;
                  a4[1] = v20 + 24;
                }
              }
              else if (v15 == 0x4000)
              {
                if (a2)
                {
                  sub_216779094(__p, v66.d_name);
                  unint64_t v17 = a2[1];
                  unint64_t v16 = a2[2];
                  if (v17 >= v16)
                  {
                    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
                    unint64_t v26 = v25 + 1;
                    if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      sub_21677CB10();
                    }
                    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
                    if (2 * v27 > v26) {
                      unint64_t v26 = 2 * v27;
                    }
                    if (v27 >= 0x555555555555555) {
                      unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v28 = v26;
                    }
                    unint64_t v65 = a2 + 2;
                    if (v28) {
                      uint64_t v29 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v28);
                    }
                    else {
                      uint64_t v29 = 0;
                    }
                    uint64_t v40 = &v29[24 * v25];
                    int v61 = v29;
                    unint64_t v62 = v40;
                    int v64 = &v29[24 * v28];
                    long long v41 = *(_OWORD *)__p;
                    *((void *)v40 + 2) = v58;
                    *(_OWORD *)uint64_t v40 = v41;
                    __p[1] = 0;
                    uint64_t v58 = 0;
                    __p[0] = 0;
                    int v63 = v40 + 24;
                    sub_216790CCC(a2, &v61);
                    uint64_t v42 = a2[1];
                    sub_216790E64((uint64_t)&v61);
                    int v43 = SHIBYTE(v58);
                    a2[1] = v42;
                    if ((v43 & 0x80000000) == 0) {
                      goto LABEL_9;
                    }
                    goto LABEL_57;
                  }
                  long long v18 = *(_OWORD *)__p;
                  *(void *)(v17 + 16) = v58;
                  *(_OWORD *)unint64_t v17 = v18;
                  a2[1] = v17 + 24;
                }
              }
              else if (a3)
              {
                sub_216779094(__p, v66.d_name);
                unint64_t v23 = a3[1];
                unint64_t v22 = a3[2];
                if (v23 >= v22)
                {
                  unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a3) >> 3);
                  unint64_t v36 = v35 + 1;
                  if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_21677CB10();
                  }
                  unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a3) >> 3);
                  if (2 * v37 > v36) {
                    unint64_t v36 = 2 * v37;
                  }
                  if (v37 >= 0x555555555555555) {
                    unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v38 = v36;
                  }
                  unint64_t v65 = a3 + 2;
                  if (v38) {
                    int64_t v39 = (char *)sub_216782ED8((uint64_t)(a3 + 2), v38);
                  }
                  else {
                    int64_t v39 = 0;
                  }
                  uint64_t v48 = &v39[24 * v35];
                  int v61 = v39;
                  unint64_t v62 = v48;
                  int v64 = &v39[24 * v38];
                  long long v49 = *(_OWORD *)__p;
                  *((void *)v48 + 2) = v58;
                  *(_OWORD *)uint64_t v48 = v49;
                  __p[1] = 0;
                  uint64_t v58 = 0;
                  __p[0] = 0;
                  int v63 = v48 + 24;
                  sub_216790CCC(a3, &v61);
                  uint64_t v50 = a3[1];
                  sub_216790E64((uint64_t)&v61);
                  int v51 = SHIBYTE(v58);
                  a3[1] = v50;
                  if ((v51 & 0x80000000) == 0) {
                    goto LABEL_9;
                  }
                  goto LABEL_57;
                }
                long long v24 = *(_OWORD *)__p;
                *(void *)(v23 + 16) = v58;
                *(_OWORD *)unint64_t v23 = v24;
                a3[1] = v23 + 24;
              }
            }
          }
        }
LABEL_9:
        int v13 = readdir_r(v10, &v66, &v60);
        if (v60) {
          BOOL v14 = v13 == 0;
        }
        else {
          BOOL v14 = 0;
        }
      }
      while (v14);
    }
    closedir(v10);
  }
  else if (a5)
  {
    int v53 = __error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v53, &v61);
    if (SHIBYTE(v63) >= 0) {
      unint64_t v56 = &v61;
    }
    else {
      unint64_t v56 = v61;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"opendir failed: %s", v54, v55, v56);
    if (*(char *)(a5 + 23) < 0) {
      operator delete(*(void **)a5);
    }
    *(_OWORD *)a5 = *(_OWORD *)&v59.st_dev;
    *(void *)(a5 + 16) = *(void *)&v59.st_uid;
    HIBYTE(v59.st_gid) = 0;
    LOBYTE(v59.st_dev) = 0;
    if (SHIBYTE(v63) < 0) {
      operator delete(v61);
    }
  }
  return v10 != 0;
}

void sub_216864AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfWalkDirs(const char *a1, const char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (uint64_t *)a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 23);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a1 + 1);
  }
  if (!v7) {
    goto LABEL_22;
  }
  if (v8 < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &v16) && (v16.st_mode & 0xF000) == 0x4000)
  {
    memset(&v16, 0, 32);
    LODWORD(v16.st_atimespec.tv_sec) = 1065353216;
    pxrInternal__aapl__pxrReserved__::TfNormPath(__p, v6, 0);
    sub_216864CBC((uint64_t)__p, (uint64_t)a2, (uint64_t)a3, a4, a5, &v16);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    sub_216850320((uint64_t)&v16);
  }
  else
  {
LABEL_22:
    if (*(void *)(a4 + 24))
    {
      if (*((char *)v6 + 23) >= 0) {
        int v12 = v6;
      }
      else {
        int v12 = (uint64_t *)*v6;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s is not a directory", a2, a3, v12);
      uint64_t v13 = *(void *)(a4 + 24);
      if (!v13) {
        sub_21683A7CC();
      }
      (*(void (**)(uint64_t, uint64_t *, stat *))(*(void *)v13 + 48))(v13, v6, &v16);
      if (SHIBYTE(v16.st_gid) < 0) {
        operator delete(*(void **)&v16.st_dev);
      }
    }
  }
}

void sub_216864C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_216850320((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_216864CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a6
    || (*(void *)&v50.st_dev = "tf/fileUtils.cpp",
        v50.st_ino = (__darwin_ino64_t)"Tf_WalkDirsRec",
        *(void *)&v50.st_uid = 507,
        *(void *)&v50.st_rdev = "BOOL pxrInternal__aapl__pxrReserved__::Tf_WalkDirsRec(const string &, const TfWalkFunc"
                                  "tion &, BOOL, const TfWalkErrorHandler &, BOOL, Tf_FileIdSet *)",
        LOBYTE(v50.st_atimespec.tv_sec) = 0,
        uint64_t v42 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v50, "linkTargets", 0) & 1) != 0))
  {
    int v57 = 0;
    uint64_t v58 = 0;
    unint64_t v59 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    unint64_t v56 = 0;
    int v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    memset(&v50, 0, 24);
    if (!pxrInternal__aapl__pxrReserved__::TfReadDir((const char *)a1, (uint64_t *)&v57, &v54, (uint64_t *)&v51, (uint64_t)&v50))
    {
      uint64_t v10 = *(void *)(a4 + 24);
      if (v10) {
        (*(void (**)(uint64_t, uint64_t, stat *))(*(void *)v10 + 48))(v10, a1, &v50);
      }
    }
    if (SHIBYTE(v50.st_gid) < 0)
    {
      operator delete(*(void **)&v50.st_dev);
      if (a5)
      {
LABEL_7:
        int v11 = v51;
        int v12 = v52;
        while (v11 != (std::string *)v12)
        {
          if (*(char *)(a1 + 23) >= 0) {
            size_t v13 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v13 = *(void *)(a1 + 8);
          }
          sub_2167940B4((uint64_t)&v46, v13 + 1);
          if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v14 = &v46;
          }
          else {
            BOOL v14 = (std::string *)v46.__r_.__value_.__r.__words[0];
          }
          if (v13)
          {
            if (*(char *)(a1 + 23) >= 0) {
              char v15 = (const void *)a1;
            }
            else {
              char v15 = *(const void **)a1;
            }
            memmove(v14, v15, v13);
          }
          *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 47;
          int v16 = SHIBYTE(v11->__r_.__value_.__r.__words[2]);
          if (v16 >= 0) {
            unint64_t v17 = (const std::string::value_type *)v11;
          }
          else {
            unint64_t v17 = (const std::string::value_type *)v11->__r_.__value_.__r.__words[0];
          }
          if (v16 >= 0) {
            std::string::size_type size = HIBYTE(v11->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v11->__r_.__value_.__l.__size_;
          }
          unint64_t v19 = std::string::append(&v46, v17, size);
          long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          int64_t v48 = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)int v47 = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          if (v48 >= 0) {
            long long v21 = (char *)v47;
          }
          else {
            long long v21 = (char *)v47[0];
          }
          sub_216779094(&__p, v21);
          std::string::size_type v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
          }
          if (v22)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            BOOL v24 = stat((const char *)p_p, &v50) == 0;
            if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_35:
            }
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            BOOL v24 = 0;
            if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
              goto LABEL_35;
            }
          }
          if (SHIBYTE(v48) < 0) {
            operator delete(v47[0]);
          }
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v46.__r_.__value_.__l.__data_);
            if (!v24)
            {
LABEL_48:
              unint64_t v27 = v55;
              if ((unint64_t)v55 >= v56) {
                goto LABEL_55;
              }
              if ((SHIBYTE(v11->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_53;
              }
              goto LABEL_50;
            }
          }
          else if (!v24)
          {
            goto LABEL_48;
          }
          if ((v50.st_mode & 0xF000) == 0x4000)
          {
            LODWORD(__p.__r_.__value_.__l.__data_) = v50.st_dev;
            __p.__r_.__value_.__l.__size_ = v50.st_ino;
            if (!sub_216865EC4(a6, (int *)&__p))
            {
              sub_216865FB0((uint64_t)a6, (int *)&__p, &__p);
              unint64_t v25 = v58;
              if ((unint64_t)v58 >= v59)
              {
                unint64_t v30 = (long long *)sub_2167E9A44((uint64_t *)&v57, (long long *)v11);
              }
              else
              {
                if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_216778F24(v58, v11->__r_.__value_.__l.__data_, v11->__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v26 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
                  *((void *)v58 + 2) = *((void *)&v11->__r_.__value_.__l + 2);
                  *unint64_t v25 = v26;
                }
                unint64_t v30 = (long long *)((char *)v25 + 24);
              }
              uint64_t v58 = v30;
            }
            goto LABEL_57;
          }
          unint64_t v27 = v55;
          if ((unint64_t)v55 >= v56)
          {
LABEL_55:
            uint64_t v29 = (std::string *)sub_2167E9A44(&v54, (long long *)v11);
            goto LABEL_56;
          }
          if ((SHIBYTE(v11->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_53:
            long long v28 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
            v27->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
            goto LABEL_54;
          }
LABEL_50:
          sub_216778F24(v55, v11->__r_.__value_.__l.__data_, v11->__r_.__value_.__l.__size_);
LABEL_54:
          uint64_t v29 = v27 + 1;
LABEL_56:
          uint64_t v55 = v29;
LABEL_57:
          ++v11;
        }
LABEL_66:
        if (!a3 || sub_216865E70(a2, a1, (uint64_t)&v57))
        {
          unint64_t v31 = v57;
          unint64_t v32 = v58;
          if (v57 == v58)
          {
LABEL_92:
            if ((a3 & 1) != 0 || sub_216865E70(a2, a1, (uint64_t)&v57))
            {
              uint64_t v42 = 1;
LABEL_96:
              *(void *)&v50.st_dev = &v51;
              sub_216782F20((void ***)&v50);
              *(void *)&v50.st_dev = &v54;
              sub_216782F20((void ***)&v50);
              *(void *)&v50.st_dev = &v57;
              sub_216782F20((void ***)&v50);
              return v42;
            }
          }
          else
          {
            while (1)
            {
              if (*(char *)(a1 + 23) >= 0) {
                size_t v33 = *(unsigned __int8 *)(a1 + 23);
              }
              else {
                size_t v33 = *(void *)(a1 + 8);
              }
              sub_2167940B4((uint64_t)&__p, v33 + 1);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string v34 = &__p;
              }
              else {
                std::string v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if (v33)
              {
                if (*(char *)(a1 + 23) >= 0) {
                  unint64_t v35 = (const void *)a1;
                }
                else {
                  unint64_t v35 = *(const void **)a1;
                }
                memmove(v34, v35, v33);
              }
              *(_WORD *)((char *)&v34->__r_.__value_.__l.__data_ + v33) = 47;
              int v36 = *((char *)v31 + 23);
              if (v36 >= 0) {
                unint64_t v37 = (const std::string::value_type *)v31;
              }
              else {
                unint64_t v37 = *(const std::string::value_type **)v31;
              }
              if (v36 >= 0) {
                std::string::size_type v38 = *((unsigned __int8 *)v31 + 23);
              }
              else {
                std::string::size_type v38 = *((void *)v31 + 1);
              }
              int64_t v39 = std::string::append(&__p, v37, v38);
              long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
              *(void *)&v50.st_uid = *((void *)&v39->__r_.__value_.__l + 2);
              *(_OWORD *)&v50.st_dev = v40;
              v39->__r_.__value_.__l.__size_ = 0;
              v39->__r_.__value_.__r.__words[2] = 0;
              v39->__r_.__value_.__r.__words[0] = 0;
              char v41 = sub_216864CBC(&v50, a2, a3, a4, a5, a6);
              if (SHIBYTE(v50.st_gid) < 0) {
                operator delete(*(void **)&v50.st_dev);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if ((v41 & 1) == 0) {
                break;
              }
              unint64_t v31 = (long long *)((char *)v31 + 24);
              if (v31 == v32) {
                goto LABEL_92;
              }
            }
          }
        }
        uint64_t v42 = 0;
        goto LABEL_96;
      }
    }
    else if (a5)
    {
      goto LABEL_7;
    }
    sub_216866204(&v54, v55, v51, v52, 0xAAAAAAAAAAAAAAABLL * (((char *)v52 - (char *)v51) >> 3));
    goto LABEL_66;
  }
  return v42;
}

void sub_2168651D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  *(void *)(v36 - 112) = v35;
  std::string __p = (void *)(v36 - 168);
  sub_216782F20((void ***)&__p);
  std::string __p = (void *)(v36 - 144);
  sub_216782F20((void ***)&__p);
  std::string __p = (void *)(v36 - 120);
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::TfRmTree(const char *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  void v6[4] = sub_216865444;
  sub_2168665B8((uint64_t)v7, a2);
  uint64_t v9 = 0;
  int v4 = operator new(0x30uLL);
  *int v4 = &unk_26C74BE20;
  v4[1] = sub_216865444;
  sub_21686681C((uint64_t)(v4 + 2), (uint64_t)v7);
  uint64_t v9 = v4;
  if (*(void *)(a2 + 24))
  {
    sub_2168665B8((uint64_t)v6, a2);
  }
  else
  {
    v6[0] = &unk_26C74BD70;
    v6[1] = sub_21686577C;
    v6[3] = v6;
  }
  pxrInternal__aapl__pxrReserved__::TfWalkDirs(a1, (const char *)v8, 0, (uint64_t)v6, 0);
  sub_21686645C(v6);
  sub_216866950(v8);
  return sub_21686645C(v7);
}

void sub_216865408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_216866950((uint64_t *)va);
  sub_21686645C(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_216865444(const void **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  for (uint64_t i = *a3; i != a3[1]; i += 24)
  {
    if (*((char *)a1 + 23) >= 0) {
      size_t v8 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v8 = (size_t)a1[1];
    }
    sub_2167940B4((uint64_t)&v33, v8 + 1);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v33;
    }
    else {
      uint64_t v9 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v10 = a1;
      }
      else {
        uint64_t v10 = *a1;
      }
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 47;
    int v11 = *(char *)(i + 23);
    if (v11 >= 0) {
      int v12 = (const std::string::value_type *)i;
    }
    else {
      int v12 = *(const std::string::value_type **)i;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(i + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(i + 8);
    }
    BOOL v14 = std::string::append(&v33, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    int64_t v35 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string v34 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (v35 >= 0) {
      int v16 = v34;
    }
    else {
      int v16 = (void **)v34[0];
    }
    if (unlink((const char *)v16) && *(void *)(a4 + 24))
    {
      if (v35 >= 0) {
        unint64_t v17 = v34;
      }
      else {
        unint64_t v17 = (void **)v34[0];
      }
      long long v18 = __error();
      pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v18, __p);
      long long v21 = __p;
      if (v32 < 0) {
        long long v21 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"ArchUnlinkFile failed for '%s': %s", v19, v20, v17, v21);
      uint64_t v22 = *(void *)(a4 + 24);
      if (!v22) {
        sub_21683A7CC();
      }
      (*(void (**)(uint64_t, const void **, std::string *))(*(void *)v22 + 48))(v22, a1, &v33);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (v32 < 0) {
        operator delete(__p[0]);
      }
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)a1 + 23) >= 0) {
    unint64_t v23 = (const char *)a1;
  }
  else {
    unint64_t v23 = (const char *)*a1;
  }
  if (rmdir(v23) && *(void *)(a4 + 24))
  {
    if (*((char *)a1 + 23) >= 0) {
      BOOL v24 = a1;
    }
    else {
      BOOL v24 = *a1;
    }
    unint64_t v25 = __error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v25, &v33);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v28 = &v33;
    }
    else {
      long long v28 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"rmdir failed for '%s': %s", v26, v27, v24, v28);
    uint64_t v29 = *(void *)(a4 + 24);
    if (!v29) {
      sub_21683A7CC();
    }
    (*(void (**)(uint64_t, const void **, void **))(*(void *)v29 + 48))(v29, a1, v34);
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
  }
  return 1;
}

void sub_2168656FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21686577C(uint64_t a1, uint64_t a2)
{
  v4[0] = "tf/fileUtils.cpp";
  v4[1] = "Tf_RmTreeRaiseErrors";
  v4[2] = 617;
  v4[3] = "void pxrInternal__aapl__pxrReserved__::Tf_RmTreeRaiseErrors(const string &, const string &)";
  char v5 = 0;
  if (*(char *)(a1 + 23) >= 0) {
    mode_t v2 = (const char *)a1;
  }
  else {
    mode_t v2 = *(const char **)a1;
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v3 = (const char *)a2;
  }
  else {
    uint64_t v3 = *(const char **)a2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 3, (pxrInternal__aapl__pxrReserved__ *)"failed to remove '%s': %s", v2, v3);
}

void *pxrInternal__aapl__pxrReserved__::TfListDir@<X0>(const char *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  _OWORD v9[4] = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_26C74BEC8;
  v6[1] = sub_216865900;
  _OWORD v6[2] = a3;
  *((unsigned char *)v6 + 24) = a2;
  v9[3] = v6;
  void v8[3] = 0;
  pxrInternal__aapl__pxrReserved__::TfWalkDirs(a1, (const char *)v9, (char *)1, (uint64_t)v8, 0);
  sub_21686645C(v8);
  return sub_216866950(v9);
}

void sub_2168658D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t sub_216865900(const void **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned int a5)
{
  v60[2] = *MEMORY[0x263EF8340];
  for (uint64_t i = *a2; i != a2[1]; i += 24)
  {
    if (*((char *)a1 + 23) >= 0) {
      size_t v10 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v10 = (size_t)a1[1];
    }
    sub_2167940B4((uint64_t)&v59, v10 + 1);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v11 = &v59;
    }
    else {
      int v11 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    if (v10)
    {
      if (*((char *)a1 + 23) >= 0) {
        int v12 = a1;
      }
      else {
        int v12 = *a1;
      }
      memmove(v11, v12, v10);
    }
    *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
    int v13 = *(char *)(i + 23);
    if (v13 >= 0) {
      BOOL v14 = (const std::string::value_type *)i;
    }
    else {
      BOOL v14 = *(const std::string::value_type **)i;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(i + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(i + 8);
    }
    int v16 = std::string::append(&v59, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    long long v18 = std::string::append(&v53, "/");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v60[0] = v18->__r_.__value_.__l.__size_;
    *(void *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    unint64_t v21 = a4[1];
    unint64_t v22 = a4[2];
    if (v21 >= v22)
    {
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a4) >> 3);
      unint64_t v26 = v25 + 1;
      if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a4) >> 3);
      if (2 * v27 > v26) {
        unint64_t v26 = 2 * v27;
      }
      if (v27 >= 0x555555555555555) {
        unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v28 = v26;
      }
      uint64_t v58 = a4 + 2;
      if (v28) {
        uint64_t v29 = (char *)sub_216782ED8((uint64_t)(a4 + 2), v28);
      }
      else {
        uint64_t v29 = 0;
      }
      unint64_t v30 = &v29[24 * v25];
      uint64_t v54 = v29;
      uint64_t v55 = v30;
      int v57 = &v29[24 * v28];
      uint64_t v31 = v60[0];
      *(void *)unint64_t v30 = v19;
      *((void *)v30 + 1) = v31;
      *(void *)(v30 + 15) = *(void *)((char *)v60 + 7);
      v30[23] = v20;
      unint64_t v56 = v30 + 24;
      sub_216790CCC(a4, &v54);
      uint64_t v24 = a4[1];
      sub_216790E64((uint64_t)&v54);
    }
    else
    {
      uint64_t v23 = v60[0];
      *(void *)unint64_t v21 = v19;
      *(void *)(v21 + 8) = v23;
      *(void *)(v21 + 15) = *(void *)((char *)v60 + 7);
      *(unsigned char *)(v21 + 23) = v20;
      uint64_t v24 = v21 + 24;
      a4[1] = v21 + 24;
    }
    a4[1] = v24;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
  }
  for (uint64_t j = *a3; j != a3[1]; j += 24)
  {
    if (*((char *)a1 + 23) >= 0) {
      size_t v33 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v33 = (size_t)a1[1];
    }
    sub_2167940B4((uint64_t)&v53, v33 + 1);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v34 = &v53;
    }
    else {
      std::string v34 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if (v33)
    {
      if (*((char *)a1 + 23) >= 0) {
        int64_t v35 = a1;
      }
      else {
        int64_t v35 = *a1;
      }
      memmove(v34, v35, v33);
    }
    *(_WORD *)((char *)&v34->__r_.__value_.__l.__data_ + v33) = 47;
    int v36 = *(char *)(j + 23);
    if (v36 >= 0) {
      unint64_t v37 = (const std::string::value_type *)j;
    }
    else {
      unint64_t v37 = *(const std::string::value_type **)j;
    }
    if (v36 >= 0) {
      std::string::size_type v38 = *(unsigned __int8 *)(j + 23);
    }
    else {
      std::string::size_type v38 = *(void *)(j + 8);
    }
    int64_t v39 = std::string::append(&v53, v37, v38);
    std::string::size_type v40 = v39->__r_.__value_.__r.__words[0];
    v59.__r_.__value_.__r.__words[0] = v39->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v39->__r_.__value_.__r.__words[1] + 7);
    char v41 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    unint64_t v42 = a4[1];
    unint64_t v43 = a4[2];
    if (v42 >= v43)
    {
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *a4) >> 3);
      unint64_t v46 = v45 + 1;
      if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *a4) >> 3);
      if (2 * v47 > v46) {
        unint64_t v46 = 2 * v47;
      }
      if (v47 >= 0x555555555555555) {
        unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v48 = v46;
      }
      uint64_t v58 = a4 + 2;
      if (v48) {
        long long v49 = (char *)sub_216782ED8((uint64_t)(a4 + 2), v48);
      }
      else {
        long long v49 = 0;
      }
      stat v50 = &v49[24 * v45];
      uint64_t v54 = v49;
      uint64_t v55 = v50;
      int v57 = &v49[24 * v48];
      *(void *)stat v50 = v40;
      *((void *)v50 + 1) = v59.__r_.__value_.__r.__words[0];
      *(void *)(v50 + 15) = *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 7);
      v50[23] = v41;
      unint64_t v56 = v50 + 24;
      sub_216790CCC(a4, &v54);
      uint64_t v44 = a4[1];
      sub_216790E64((uint64_t)&v54);
    }
    else
    {
      *(void *)unint64_t v42 = v40;
      *(void *)(v42 + 8) = v59.__r_.__value_.__r.__words[0];
      *(void *)(v42 + 15) = *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 7);
      *(unsigned char *)(v42 + 23) = v41;
      uint64_t v44 = v42 + 24;
      a4[1] = v42 + 24;
    }
    a4[1] = v44;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
  }
  return a5;
}

void sub_216865D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (v28 < 0) {
    operator delete(v27);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfTouchFile(const char *a1, int a2)
{
  mode_t v2 = a1;
  if (a2)
  {
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
    int v3 = open(a1, 131589, 438);
    if (v3 == -1) {
      return 0;
    }
    close(v3);
  }
  if (v2[23] >= 0) {
    int v4 = v2;
  }
  else {
    int v4 = *(const char **)v2;
  }
  return utimes(v4, 0) == 0;
}

uint64_t sub_216865E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t *sub_216865EC4(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = *((void *)a2 + 1);
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55 * (v4 + ((unint64_t)(v4 + v3 + (v4 + v3) * (v4 + v3)) >> 1))));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  size_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (uint64_t result = *v8; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v10 = result[1];
    if (v10 == v5)
    {
      if (*((_DWORD *)result + 4) == v3 && result[3] == v4) {
        return result;
      }
    }
    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v2) {
          v10 %= *(void *)&v2;
        }
      }
      else
      {
        v10 &= *(void *)&v2 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return result;
}

void *sub_216865FB0(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *((void *)a2 + 1);
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55 * (v7 + ((unint64_t)(v7 + v6 + (v7 + v6) * (v7 + v6)) >> 1))));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      int v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v6 && v12[3] == v7) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          int v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  int v12 = operator new(0x20uLL);
  void *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    void *v12 = *v22;
LABEL_42:
    void *v22 = v12;
    goto LABEL_43;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v23 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_2168661F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *sub_216866204(uint64_t *a1, std::string *a2, std::string *a3, long long *a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        uint64_t v21 = (long long *)&a3[a5];
      }
      else
      {
        uint64_t v21 = (long long *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (void)a2) >> 3));
        a1[1] = (uint64_t)sub_21680F848(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_21680F12C((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
      sub_21680F908(a3, (std::string *)v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        unint64_t v19 = (char *)sub_216782ED8(v9, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      unint64_t v23 = v19;
      uint64_t v24 = &v19[24 * v15];
      unint64_t v25 = v24;
      unint64_t v26 = &v19[24 * v18];
      sub_2168663C8(&v23, (long long *)a3, a5);
      unint64_t v5 = (std::string *)sub_21680F250((uint64_t)a1, &v23, (long long *)v5);
      sub_216790E64((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_2168663A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *sub_2168663C8(void *result, long long *a2, uint64_t a3)
{
  unint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = v4 + 24 * a3;
    uint64_t v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        uint64_t result = sub_216778F24((unsigned char *)v4, *(void **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v8 = *a2;
        *(void *)(v4 + 16) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v4 = v8;
      }
      v4 += 24;
      a2 = (long long *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_216866454(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void *sub_21686645C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_2168664E8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C74BD70;
  result[1] = v3;
  return result;
}

uint64_t sub_216866530(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C74BD70;
  a2[1] = v2;
  return result;
}

uint64_t sub_21686655C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_21686656C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74BDF0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2168665AC()
{
  return &unk_26C74BDF0;
}

uint64_t sub_2168665B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_216866650(void *a1)
{
  *a1 = &unk_26C74BE20;
  sub_21686645C(a1 + 2);
  return a1;
}

void sub_216866694(void *a1)
{
  *a1 = &unk_26C74BE20;
  sub_21686645C(a1 + 2);

  operator delete(a1);
}

void *sub_2168666E8(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = &unk_26C74BE20;
  v2[1] = v3;
  sub_2168665B8((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_216866740(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216866754(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26C74BE20;
  a2[1] = v2;
  return sub_2168665B8((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_216866784(uint64_t a1)
{
  return sub_21686645C((void *)(a1 + 16));
}

void sub_21686678C(void *a1)
{
  sub_21686645C(a1 + 2);

  operator delete(a1);
}

uint64_t sub_2168667C8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_21686689C((uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(a1 + 8), a2, a3, a4);
}

uint64_t sub_2168667D0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74BEA0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216866810()
{
  return &unk_26C74BEA0;
}

uint64_t sub_21686681C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t sub_21686689C(uint64_t (**a1)(uint64_t, uint64_t, uint64_t, void *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  uint64_t v7 = *a3;
  sub_2168665B8((uint64_t)v10, (uint64_t)(a1 + 1));
  uint64_t v8 = v6(a2, v7, a4, v10);
  sub_21686645C(v10);
  return v8;
}

void sub_216866934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21686645C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_216866950(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 sub_2168669DC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C74BEC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216866A30(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C74BEC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216866A68(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, void, void))(a1 + 8))(a2, *a3, a4, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
}

uint64_t sub_216866A88(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74BF38)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216866AC8()
{
  return &unk_26C74BF38;
}

void pxrInternal__aapl__pxrReserved__::TfGetenv(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::ArchGetEnv(a1, __p);
  unint64_t v5 = (void *)HIBYTE(v8);
  char v6 = HIBYTE(v8);
  if (v8 < 0) {
    unint64_t v5 = __p[1];
  }
  if (v5)
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v8;
    return;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
    if ((v6 & 0x80) == 0) {
      return;
    }
    goto LABEL_7;
  }
  sub_216778F24((unsigned char *)a3, *(void **)a2, *(void *)(a2 + 8));
  if (v8 < 0) {
LABEL_7:
  }
    operator delete(__p[0]);
}

void sub_216866B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetenvInt(const char *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::ArchGetEnv(a1, &__str);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    a2 = std::stoi(&__str, 0, 10);
    char v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v4 < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a2;
}

void sub_216866BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfGetenvBool(const char *a1, BOOL a2)
{
  pxrInternal__aapl__pxrReserved__::ArchGetEnv(a1, &__p);
  if ((char)v12 < 0)
  {
    uint64_t v3 = v11;
    if (!v11) {
      goto LABEL_40;
    }
    p_p = __p;
  }
  else
  {
    uint64_t v3 = v12;
    if (!v12) {
      return a2;
    }
    p_p = &__p;
  }
  do
  {
    unsigned char *p_p = __tolower((char)*p_p);
    ++p_p;
    --v3;
  }
  while (v3);
  if ((char)v12 < 0)
  {
    uint64_t v6 = v11;
    if (v11 == 3)
    {
      if (*(_WORD *)__p == 25977 && *((unsigned char *)__p + 2) == 115) {
        goto LABEL_36;
      }
      uint64_t v6 = v11;
    }
    else if (v11 == 4 && *(_DWORD *)__p == 1702195828)
    {
LABEL_33:
      a2 = 1;
      if ((v12 & 0x80) != 0) {
        goto LABEL_40;
      }
      return a2;
    }
    if (v6 != 2)
    {
LABEL_24:
      if (v6 == 1)
      {
        unint64_t v5 = (unsigned __int8 *)__p;
        goto LABEL_39;
      }
      a2 = 0;
LABEL_40:
      operator delete(__p);
      return a2;
    }
    if (*(_WORD *)__p != 28271)
    {
      uint64_t v6 = v11;
      goto LABEL_24;
    }
LABEL_36:
    a2 = 1;
    goto LABEL_40;
  }
  unint64_t v5 = (unsigned __int8 *)&__p;
  switch(v12)
  {
    case 1u:
      break;
    case 2u:
      goto LABEL_9;
    case 3u:
      if ((unsigned __int16)__p == 25977 && BYTE2(__p) == 115) {
        goto LABEL_33;
      }
      if (v12 == 1) {
        goto LABEL_38;
      }
      if (v12 != 2) {
        return 0;
      }
LABEL_9:
      if ((unsigned __int16)__p == 28271) {
        goto LABEL_33;
      }
      if (v12 != 1) {
        return 0;
      }
LABEL_38:
      unint64_t v5 = (unsigned __int8 *)&__p;
      break;
    case 4u:
      return __p == 1702195828;
    default:
      return 0;
  }
LABEL_39:
  a2 = *v5 == 49;
  if ((v12 & 0x80) != 0) {
    goto LABEL_40;
  }
  return a2;
}

void sub_216866DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::TfGetenvDouble(const char *a1, double a2)
{
  pxrInternal__aapl__pxrReserved__::ArchGetEnv(a1, &__str);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  char v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    a2 = std::stod(&__str, 0);
    char v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v4 < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a2;
}

void sub_216866E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(pxrInternal__aapl__pxrReserved__::Tf_HashState *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3)
{
  unint64_t result = pxrInternal__aapl__pxrReserved__::ArchHash64(a2, a3, *(void *)this);
  *(void *)this = result;
  *((unsigned char *)this + 8) = 1;
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHashCharPtr::operator()(uint64_t a1, uint64_t a2)
{
  return bswap64(0x9E3779B97F4A7C55 * a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHashCString::operator()(int a1, char *__s)
{
  if (!__s) {
    return 0;
  }
  uint64_t v3 = (const char *)strlen(__s);
  return pxrInternal__aapl__pxrReserved__::ArchHash((pxrInternal__aapl__pxrReserved__ *)__s, v3);
}

BOOL pxrInternal__aapl__pxrReserved__::TfEqualCString::operator()(int a1, char *__s1, char *__s2)
{
  return strcmp(__s1, __s2) == 0;
}

std::string *pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::_MatchString::_MatchString(std::string *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
  }
  LOWORD(__dst[1].__r_.__value_.__l.__data_) = 1;
  std::string::size_type v4 = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __dst->__r_.__value_.__l.__size_;
    if (!size) {
      return __dst;
    }
  }
  else
  {
    if (!*((unsigned char *)&__dst->__r_.__value_.__s + 23)) {
      return __dst;
    }
    std::string::size_type size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
  }
  std::string::size_type v6 = size - 1;
  if ((v4 & 0x80) != 0)
  {
    if (*(unsigned char *)(__dst->__r_.__value_.__r.__words[0] + v6) != 42) {
      goto LABEL_16;
    }
    __dst[1].__r_.__value_.__s.__data_[1] = 1;
    std::string::size_type v4 = __dst->__r_.__value_.__l.__size_;
LABEL_13:
    std::string::resize(__dst, v4 - 1, 0);
    if ((SHIBYTE(__dst->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!*((unsigned char *)&__dst->__r_.__value_.__s + 23)) {
        return __dst;
      }
      goto LABEL_15;
    }
LABEL_16:
    if (!__dst->__r_.__value_.__l.__size_) {
      return __dst;
    }
    int v7 = *(unsigned __int8 *)__dst->__r_.__value_.__l.__data_;
    goto LABEL_18;
  }
  if (__dst->__r_.__value_.__s.__data_[v6] == 42)
  {
    __dst[1].__r_.__value_.__s.__data_[1] = 1;
    goto LABEL_13;
  }
LABEL_15:
  int v7 = __dst->__r_.__value_.__s.__data_[0];
LABEL_18:
  if (v7 == 45)
  {
    __dst[1].__r_.__value_.__s.__data_[0] = 0;
LABEL_21:
    std::string::erase(__dst, 0, 1uLL);
    return __dst;
  }
  if (v7 == 43) {
    goto LABEL_21;
  }
  return __dst;
}

void sub_216867080(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Tf_MallocTagStringMatchTable(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

void *pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Tf_MallocTagStringMatchTable(void *a1, unsigned __int8 *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::SetMatchList((uint64_t)a1, a2);
  return a1;
}

void sub_2168670F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168706D8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::SetMatchList(uint64_t a1, unsigned __int8 *a2)
{
  sub_21687072C((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::TfStringTokenize(a2, ",\t\n", &v24);
  for (long long i = v24; (void)i != *((void *)&i + 1); sub_21686739C(&i))
  {
    std::string::size_type v6 = (const std::string *)sub_21686731C((uint64_t *)&i, v4, v5);
    pxrInternal__aapl__pxrReserved__::TfStringTrim(" ", v6, &v20);
    pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::_MatchString::_MatchString(&__p, (long long *)&v20);
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = *(void *)(a1 + 16);
    if (v7 >= v8)
    {
      uint64_t v10 = (uint64_t)(v7 - *(void *)a1) >> 5;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 59) {
        sub_21677CB10();
      }
      uint64_t v12 = v8 - *(void *)a1;
      if (v12 >> 4 > v11) {
        unint64_t v11 = v12 >> 4;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      v25[4] = (void **)(a1 + 16);
      unint64_t v14 = (void **)sub_2168707F4(a1 + 16, v13);
      unint64_t v15 = &v14[4 * v10];
      v25[0] = v14;
      v25[1] = v15;
      v25[3] = &v14[4 * v16];
      long long v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v15[2] = (void *)__p.__r_.__value_.__r.__words[2];
      *(_OWORD *)unint64_t v15 = v17;
      memset(&__p, 0, sizeof(__p));
      *((_WORD *)v15 + 12) = v22;
      void v25[2] = v15 + 4;
      sub_21687077C((uint64_t *)a1, v25);
      uint64_t v18 = *(void *)(a1 + 8);
      sub_216870958((uint64_t)v25);
      int v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(void *)(a1 + 8) = v18;
      if (v19 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v7 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v7 = v9;
      memset(&__p, 0, sizeof(__p));
      *(_WORD *)(v7 + 24) = v22;
      *(void *)(a1 + 8) = v7 + 32;
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  v25[0] = (void **)&v24;
  sub_216782F20(v25);
}

void sub_2168672B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_216870958(v25 - 88);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::string __p = &a25;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_21686731C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::string>>::operator*() [T = std::vect"
            "or<std::string>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216867394()
{
}

void *sub_21686739C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::string>>::operator++()"
            " [T = std::vector<std::string>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match(pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *this, const char *a2, char *a3)
{
  uint64_t v3 = *(void *)this;
  uint64_t v18 = *((void *)this + 1);
  uint64_t v19 = v18;
  uint64_t v20 = v3;
  uint64_t v21 = v3;
  if (v18 != v3)
  {
    char v4 = a2;
    do
    {
      int v5 = *(unsigned __int8 *)(*(void *)(sub_21686755C((uint64_t)&v18, (uint64_t)a2, a3) + 8) - 7);
      uint64_t v10 = *(void *)(sub_21686755C((uint64_t)&v18, v6, v7) + 8);
      unint64_t v11 = (unsigned __int8 *)(v10 - 32);
      if (v5)
      {
        if (*(char *)(v10 - 9) < 0) {
          unint64_t v11 = *(unsigned __int8 **)v11;
        }
        int v12 = *v11;
        if (!*v11)
        {
LABEL_21:
          LODWORD(v3) = *(unsigned char *)(*(void *)(sub_21686755C((uint64_t)&v18, v8, v9) + 8) - 8) != 0;
          int v16 = 1;
          return v16 & v3;
        }
        unint64_t v13 = v11 + 1;
        while (v12 == *(unsigned __int8 *)v4)
        {
          ++v4;
          int v14 = *v13++;
          int v12 = v14;
          if (!v14) {
            goto LABEL_21;
          }
        }
      }
      else
      {
        size_t v15 = strlen(v4);
        if (*(char *)(v10 - 9) < 0)
        {
          if (v15 != *(void *)(v10 - 24)) {
            goto LABEL_19;
          }
          if (v15 == -1) {
LABEL_23:
          }
            sub_216855AD4();
          unint64_t v11 = *(unsigned __int8 **)v11;
        }
        else
        {
          if (v15 != *(unsigned __int8 *)(v10 - 9)) {
            goto LABEL_19;
          }
          if (v15 == -1) {
            goto LABEL_23;
          }
        }
        if (!memcmp(v11, v4, v15)) {
          goto LABEL_21;
        }
      }
LABEL_19:
      sub_2168675DC((uint64_t)&v18);
      LODWORD(v3) = v21;
    }
    while (v19 != v21);
  }
  int v16 = 0;
  return v16 & v3;
}

uint64_t sub_21686755C(uint64_t result, uint64_t a2, char *a3)
{
  if (*(void *)(result + 8) == *(void *)(result + 24))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "f_MallocTagStringMatchTable::_MatchString>, true>::operator->() [T = const std::vector<pxrInternal__aapl__px"
            "rReserved__::Tf_MallocTagStringMatchTable::_MatchString>, Reverse = true]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_2168675DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::Tf_MallocTagStringMatchTable::_MatchString>, true>::operator++() [T = const std::vector<pxrInte"
            "rnal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::_MatchString>, Reverse = true]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((int)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)(a1 + 8) = v2 - 32;
  }
  return a1;
}

char *pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_GetStackTrace(uint64_t a1, uint64_t a2, char *a3, unint64_t *a4)
{
  __src[64] = *MEMORY[0x263EF8340];
  unint64_t StackFrames = pxrInternal__aapl__pxrReserved__::ArchGetStackFrames((pxrInternal__aapl__pxrReserved__ *)0x40, a2, (uint64_t)__src, a4);
  return sub_21677CC7C(a3, (char *)__src, (uint64_t)&__src[StackFrames], StackFrames);
}

unint64_t pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_SetTraceNames(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  sub_21686C194(&v18, 0, a3);
  pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::SetMatchList(a1 + 1816, a2);
  for (unint64_t result = sub_2168677D0(a1 + 624, v14); v15 != v17 || v14[0] != v16; unint64_t result = (unint64_t)sub_2168678C8(v14))
  {
    sub_216867840(v14, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match((pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *)(a1 + 1816), **(const char ***)(v15 + 24), v9))
    {
      sub_216867840(v14, v10, v11);
      uint64_t v12 = *(void *)(v15 + 24);
      unsigned int v13 = *(_DWORD *)(v12 + 16) | 1;
    }
    else
    {
      sub_216867840(v14, v10, v11);
      uint64_t v12 = *(void *)(v15 + 24);
      unsigned int v13 = *(_DWORD *)(v12 + 16) & 0xFFFFFFFE;
    }
    *(_DWORD *)(v12 + 16) = v13;
  }
  _DWORD *v18 = 0;
  return result;
}

void sub_2168677C0(_Unwind_Exception *a1)
{
  **(_DWORD **)(v1 - 40) = 0;
  _Unwind_Resume(a1);
}

unint64_t sub_2168677D0@<X0>(unint64_t result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2 = result;
  unint64_t v4 = *(void *)(result + 544);
  unint64_t v5 = result + 528;
  unint64_t v8 = result;
  unint64_t v9 = 0;
  unint64_t v10 = result + 528;
  unint64_t v11 = v4;
  if (v4 <= 0x3F)
  {
    unint64_t result = sub_216870B44((unint64_t)&v8);
    unint64_t v7 = v8;
    unint64_t v6 = v9;
    unint64_t v5 = v10;
    unint64_t v4 = v11;
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = result;
  }
  *a2 = v7;
  a2[1] = v6;
  a2[2] = v5;
  a2[3] = v4;
  a2[4] = v2;
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  return result;
}

void *sub_216867840(void *result, uint64_t a2, char *a3)
{
  if (result[3] == result[7] && *result == result[4])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator->";
    v4[2] = 287;
    v4[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<tbb::interface5::concurrent_hash_map<const char *, px"
            "rInternal__aapl__pxrReserved__::Tf_MallocCallSite *, pxrInternal__aapl__pxrReserved__::(anonymous namespace)"
            "::_HashEqCStr>>::operator->() [T = tbb::interface5::concurrent_hash_map<const char *, pxrInternal__aapl__pxr"
            "Reserved__::Tf_MallocCallSite *, pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_HashEqCStr>, Reverse = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_2168678C8(void *a1)
{
  unint64_t v2 = (uint64_t *)a1[3];
  if (v2 == (uint64_t *)a1[7] && *a1 == a1[4])
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator++";
    _OWORD v6[2] = 250;
    v6[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<tbb::interface5::concurrent_hash_map<co"
            "nst char *, pxrInternal__aapl__pxrReserved__::Tf_MallocCallSite *, pxrInternal__aapl__pxrReserved__::(anonym"
            "ous namespace)::_HashEqCStr>>::operator++() [T = tbb::interface5::concurrent_hash_map<const char *, pxrInter"
            "nal__aapl__pxrReserved__::Tf_MallocCallSite *, pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Has"
            "hEqCStr>, Reverse = false]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v4 = *v2;
    a1[3] = v4;
    if (!v4) {
      sub_216870B44((unint64_t)a1);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_MatchesTraceName(uint64_t a1, const char *a2, char *a3)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *)(a1 + 1816);
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  return pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match(v3, a2, a3);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_CaptureStackOrDebug(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __src[64] = *MEMORY[0x263EF8340];
  uint64_t v13 = a3;
  int v4 = *(_DWORD *)(*(void *)a2 + 16);
  if (v4)
  {
    uint64_t v10 = 0;
    char v11 = 0;
    uint64_t v12 = 0;
    sub_216867A80(result + 230, (uint64_t)&v10, &v13);
    uint64_t v7 = v12;
    unint64_t StackFrames = pxrInternal__aapl__pxrReserved__::ArchGetStackFrames((pxrInternal__aapl__pxrReserved__ *)0x40, 3, (uint64_t)__src, v8);
    sub_21677CC7C((char *)(v7 + 24), (char *)__src, (uint64_t)&__src[StackFrames], StackFrames);
    *(void *)(v7 + 48) = a4;
    *(void *)(v7 + 56) = 1;
    uint64_t v12 = 0;
    unint64_t result = sub_21685C048(&v10);
    int v4 = *(_DWORD *)(*(void *)a2 + 16);
  }
  if ((v4 & 2) != 0) {
    return (uint64_t *)sub_216867B00((pxrInternal__aapl__pxrReserved__ *)result);
  }
  return result;
}

void sub_216867A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t sub_216867A80(uint64_t *a1, uint64_t a2, void *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216870BD4(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, void *, uint64_t))sub_216870ECC, 0);
}

uint64_t sub_216867B00(pxrInternal__aapl__pxrReserved__ *a1)
{
  return pxrInternal__aapl__pxrReserved__::ArchDebuggerTrap(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_ReleaseStackOrDebug(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  int v3 = *(_DWORD *)(*(void *)a2 + 16);
  if (v3)
  {
    unint64_t result = (uint64_t *)sub_216867B6C(result + 230, &v5);
    int v3 = *(_DWORD *)(*(void *)a2 + 16);
  }
  if ((v3 & 2) != 0) {
    return (uint64_t *)sub_216867B00((pxrInternal__aapl__pxrReserved__ *)result);
  }
  return result;
}

uint64_t sub_216867B6C(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a2 ^ (*a2 >> 3);
  uint64_t v5 = *a1;
  __dmb(0xBu);
  while (2)
  {
    sub_2168710D8((uint64_t)&v12, (uint64_t)a1, v5 & v4, 0);
    while (1)
    {
      int v6 = (void *)(v14 + 16);
      while (1)
      {
        uint64_t v7 = v6;
        int v6 = (void *)*v6;
        if ((unint64_t)v6 < 0x40) {
          break;
        }
        if (*a2 == v6[2]) {
          goto LABEL_8;
        }
      }
      if (!v6) {
        break;
      }
LABEL_8:
      if (v13 || (char v13 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v12) & 1) != 0))
      {
        *uint64_t v7 = *v6;
        atomic_fetch_add(a1 + 65, 0xFFFFFFFFFFFFFFFFLL);
        sub_21685C048(&v12);
        uint64_t v10 = 1;
        char v13 = 1;
        uint64_t v12 = (tbb::spin_rw_mutex_v3 *)(v6 + 1);
        tbb::spin_rw_mutex_v3::internal_acquire_writer(v6 + 1);
        sub_21685C048(&v12);
        sub_216870AB8((int)a1, (tbb::internal *)v6);
        return v10;
      }
      uint64_t v8 = *a1;
      __dmb(0xBu);
      if (v5 != v8)
      {
        BOOL v9 = sub_21686CF40((uint64_t)a1, v4, v5, v8);
        uint64_t v5 = v8;
        if (v9) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v8 = *a1;
    __dmb(0xBu);
    if (v5 != v8 && sub_21686CF40((uint64_t)a1, v4, v5, v8))
    {
LABEL_15:
      sub_21685C048(&v12);
      uint64_t v5 = v8;
      continue;
    }
    break;
  }
  sub_21685C048(&v12);
  return 0;
}

void sub_216867CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_SetDebugNames(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  sub_21686C194(&v18, 0, a3);
  pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::SetMatchList(a1 + 1792, a2);
  for (unint64_t result = sub_2168677D0(a1 + 624, v14); v15 != v17 || v14[0] != v16; unint64_t result = (unint64_t)sub_2168678C8(v14))
  {
    sub_216867840(v14, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match((pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *)(a1 + 1792), **(const char ***)(v15 + 24), v9))
    {
      sub_216867840(v14, v10, v11);
      uint64_t v12 = *(void *)(v15 + 24);
      unsigned int v13 = *(_DWORD *)(v12 + 16) | 2;
    }
    else
    {
      sub_216867840(v14, v10, v11);
      uint64_t v12 = *(void *)(v15 + 24);
      unsigned int v13 = *(_DWORD *)(v12 + 16) & 0xFFFFFFFD;
    }
    *(_DWORD *)(v12 + 16) = v13;
  }
  _DWORD *v18 = 0;
  return result;
}

void sub_216867DE0(_Unwind_Exception *a1)
{
  **(_DWORD **)(v1 - 40) = 0;
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_MatchesDebugName(uint64_t a1, const char *a2, char *a3)
{
  int v3 = (pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *)(a1 + 1792);
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  return pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match(v3, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_BuildUniqueMallocStacks(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 2360);
  __dmb(0xBu);
  if (!v3) {
    return;
  }
  long long v92 = 0u;
  long long v93 = 0u;
  float v94 = 1.0;
  sub_216871370((uint64_t)&v86, a1 + 1840);
  uint64_t v6 = &v93;
  while (v89 != v91 || (char *)v86 != (char *)v90)
  {
    uint64_t v8 = (int64x2_t *)sub_216868734(&v86, v4, v5)[3];
    BOOL v9 = (const void *)v8[1].i64[1];
    std::string __p = 0;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    sub_216863490(&__p, v9, v8[2].i64[0], (v8[2].i64[0] - (uint64_t)v9) >> 3);
    uint64_t v83 = 0;
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__ *)__p;
    uint64_t v11 = (uint64_t)v80;
    std::string __p = 0;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    long long v82 = (unint64_t)&v8[1].u64[1];
    long long v84 = v82;
    uint64_t v85 = 0;
    uint64_t v12 = v11 - (void)v10;
    unsigned int v13 = pxrInternal__aapl__pxrReserved__::ArchHash(v10, (const char *)(v11 - (void)v10));
    unint64_t v14 = v13;
    unint64_t v15 = *((void *)&v92 + 1);
    if (*((void *)&v92 + 1))
    {
      uint64_t v78 = v8;
      uint64_t v16 = v6;
      uint8x8_t v17 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v92 + 8));
      v17.i16[0] = vaddlv_u8(v17);
      unint64_t v18 = v17.u32[0];
      if (v17.u32[0] > 1uLL)
      {
        unint64_t v2 = v13;
        if (*((void *)&v92 + 1) <= (unint64_t)v13) {
          unint64_t v2 = (unint64_t)v13 % *((void *)&v92 + 1);
        }
      }
      else
      {
        unint64_t v2 = (DWORD2(v92) - 1) & v13;
      }
      uint64_t v19 = *(int64x2_t ***)(v92 + 8 * v2);
      if (v19)
      {
        for (long long i = *v19; i; long long i = (int64x2_t *)i->i64[0])
        {
          unint64_t v21 = i->u64[1];
          if (v21 == v14)
          {
            __int16 v22 = (const void *)i[1].i64[0];
            if (i[1].i64[1] - (void)v22 == v12 && !memcmp(v22, v10, v11 - (void)v10))
            {
              uint64_t v6 = v16;
              uint64_t v8 = v78;
              if (!v10) {
                goto LABEL_81;
              }
LABEL_80:
              operator delete(v10);
              goto LABEL_81;
            }
          }
          else
          {
            if (v18 > 1)
            {
              if (v21 >= v15) {
                v21 %= v15;
              }
            }
            else
            {
              v21 &= v15 - 1;
            }
            if (v21 != v2) {
              break;
            }
          }
        }
      }
      uint64_t v6 = v16;
      uint64_t v8 = v78;
    }
    unint64_t v23 = (char *)operator new(0x40uLL);
    v95[0] = v23;
    v95[1] = v6;
    char v96 = 0;
    *(void *)unint64_t v23 = 0;
    *((void *)v23 + 1) = v14;
    *((void *)v23 + 3) = 0;
    *((void *)v23 + 4) = 0;
    *((void *)v23 + 2) = 0;
    sub_216863490((void *)v23 + 2, v10, v11, v12 >> 3);
    *(_OWORD *)(v23 + 40) = v84;
    *((void *)v23 + 7) = v85;
    char v96 = 1;
    float v24 = (float)(unint64_t)(*((void *)&v93 + 1) + 1);
    if (!v15 || (float)(v94 * (float)v15) < v24)
    {
      BOOL v25 = (v15 & (v15 - 1)) == 0;
      if (v15 < 3) {
        BOOL v25 = 0;
      }
      unint64_t v26 = (2 * v15) | !v25;
      unint64_t v27 = vcvtps_u32_f32(v24 / v94);
      if (v26 <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      else {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v15 = *((void *)&v92 + 1);
      if (*(void *)&prime <= *((void *)&v92 + 1))
      {
        if (*(void *)&prime < *((void *)&v92 + 1))
        {
          unint64_t v35 = vcvtps_u32_f32((float)*((unint64_t *)&v93 + 1) / v94);
          if (*((void *)&v92 + 1) < 3uLL
            || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v92 + 8)), v36.i16[0] = vaddlv_u8(v36),
                                                                           v36.u32[0] > 1uLL))
          {
            unint64_t v35 = std::__next_prime(v35);
          }
          else
          {
            uint64_t v37 = 1 << -(char)__clz(v35 - 1);
            if (v35 >= 2) {
              unint64_t v35 = v37;
            }
          }
          if (*(void *)&prime <= v35) {
            int8x8_t prime = (int8x8_t)v35;
          }
          if (*(void *)&prime >= v15)
          {
            unint64_t v15 = *((void *)&v92 + 1);
          }
          else
          {
            if (prime) {
              goto LABEL_37;
            }
            unint64_t v42 = (void *)v92;
            *(void *)&long long v92 = 0;
            if (v42) {
              operator delete(v42);
            }
            unint64_t v15 = 0;
            *((void *)&v92 + 1) = 0;
          }
        }
      }
      else
      {
LABEL_37:
        if (*(void *)&prime >> 61) {
          sub_21677CA1C();
        }
        uint64_t v29 = operator new(8 * *(void *)&prime);
        unint64_t v30 = (void *)v92;
        *(void *)&long long v92 = v29;
        if (v30) {
          operator delete(v30);
        }
        uint64_t v31 = 0;
        *((int8x8_t *)&v92 + 1) = prime;
        do
          *(void *)(v92 + 8 * v31++) = 0;
        while (*(void *)&prime != v31);
        char v32 = (void **)v93;
        if ((void)v93)
        {
          unint64_t v33 = *(void *)(v93 + 8);
          uint8x8_t v34 = (uint8x8_t)vcnt_s8(prime);
          v34.i16[0] = vaddlv_u8(v34);
          if (v34.u32[0] > 1uLL)
          {
            if (v33 >= *(void *)&prime) {
              v33 %= *(void *)&prime;
            }
          }
          else
          {
            v33 &= *(void *)&prime - 1;
          }
          *(void *)(v92 + 8 * v33) = v6;
          for (j = *v32; j; unint64_t v33 = v39)
          {
            unint64_t v39 = j[1];
            if (v34.u32[0] > 1uLL)
            {
              if (v39 >= *(void *)&prime) {
                v39 %= *(void *)&prime;
              }
            }
            else
            {
              v39 &= *(void *)&prime - 1;
            }
            if (v39 != v33)
            {
              if (!*(void *)(v92 + 8 * v39))
              {
                *(void *)(v92 + 8 * v39) = v32;
                goto LABEL_62;
              }
              *char v32 = (void *)*j;
              *uint64_t j = **(void **)(v92 + 8 * v39);
              **(void **)(v92 + 8 * v39) = j;
              uint64_t j = v32;
            }
            unint64_t v39 = v33;
LABEL_62:
            char v32 = (void **)j;
            uint64_t j = (void *)*j;
          }
        }
        unint64_t v15 = (unint64_t)prime;
      }
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v15 <= v14) {
          unint64_t v2 = v14 % v15;
        }
        else {
          unint64_t v2 = v14;
        }
      }
      else
      {
        unint64_t v2 = (v15 - 1) & v14;
      }
    }
    std::string::size_type v40 = *(void **)(v92 + 8 * v2);
    if (v40)
    {
      *(void *)v95[0] = *v40;
      *std::string::size_type v40 = v95[0];
    }
    else
    {
      *(void *)v95[0] = v93;
      *(void *)&long long v93 = v95[0];
      *(void *)(v92 + 8 * v2) = v6;
      if (*(void *)v95[0])
      {
        unint64_t v41 = *(void *)(*(void *)v95[0] + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v41 >= v15) {
            v41 %= v15;
          }
        }
        else
        {
          v41 &= v15 - 1;
        }
        *(void *)(v92 + 8 * v41) = v95[0];
      }
    }
    long long i = (int64x2_t *)v95[0];
    v95[0] = 0;
    ++*((void *)&v93 + 1);
    sub_2168713F0((uint64_t)v95);
    if (v10) {
      goto LABEL_80;
    }
LABEL_81:
    if (__p)
    {
      uint64_t v80 = __p;
      operator delete(__p);
    }
    i[3] = vaddq_s64(i[3], v8[3]);
    sub_2168687BC(&v86);
  }
  uint64_t v43 = *((void *)&v93 + 1);
  if (*((void *)&v93 + 1))
  {
    if (*((void *)&v93 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v44 = (int8x16_t *)operator new(8 * *((void *)&v93 + 1));
    unint64_t v45 = (int8x16_t *)((char *)v44 + 8 * v43);
    unint64_t v46 = v44;
  }
  else
  {
    unint64_t v46 = 0;
    unint64_t v45 = 0;
  }
  unint64_t v47 = (void *)v93;
  if ((void)v93)
  {
    unint64_t v48 = v46;
    do
    {
      long long v49 = v47 + 5;
      if (v48 >= v45)
      {
        uint64_t v51 = ((char *)v48 - (char *)v46) >> 3;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 61) {
          sub_21677CB10();
        }
        if (((char *)v45 - (char *)v46) >> 2 > v52) {
          unint64_t v52 = ((char *)v45 - (char *)v46) >> 2;
        }
        if ((unint64_t)((char *)v45 - (char *)v46) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          if (v53 >> 61) {
            sub_21677CA1C();
          }
          uint64_t v54 = (char *)operator new(8 * v53);
        }
        else
        {
          uint64_t v54 = 0;
        }
        uint64_t v55 = &v54[8 * v51];
        *(void *)uint64_t v55 = v49;
        stat v50 = (int8x16_t *)(v55 + 8);
        if (v48 != v46)
        {
          do
          {
            uint64_t v56 = v48[-1].i64[1];
            unint64_t v48 = (int8x16_t *)((char *)v48 - 8);
            *((void *)v55 - 1) = v56;
            v55 -= 8;
          }
          while (v48 != v46);
          unint64_t v48 = v46;
        }
        unint64_t v46 = (int8x16_t *)v55;
        unint64_t v45 = (int8x16_t *)&v54[8 * v53];
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        v48->i64[0] = (uint64_t)v49;
        stat v50 = (int8x16_t *)&v48->u64[1];
      }
      unint64_t v47 = (void *)*v47;
      unint64_t v48 = v50;
    }
    while (v47);
  }
  else
  {
    stat v50 = v46;
  }
  unint64_t v57 = 126 - 2 * __clz(((char *)v50 - (char *)v46) >> 3);
  size_t v86 = sub_216868854;
  if (v50 == v46) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = v57;
  }
  sub_216871440((uint64_t)v46, v50, (unsigned int (**)(uint64_t, uint64_t))&v86, v58, 1);
  std::string v59 = (uint64_t *)(a2 + 96);
  sub_216868868((uint64_t *)(a2 + 96), ((char *)v50 - (char *)v46) >> 3);
  uint64_t v60 = a2;
  if (v50 != v46)
  {
    int v61 = v50;
    while (1)
    {
      uint64_t v63 = v61[-1].i64[1];
      int v61 = (int8x16_t *)((char *)v61 - 8);
      uint64_t v62 = v63;
      unint64_t v64 = *(void *)(v60 + 104);
      unint64_t v65 = *(void *)(v60 + 112);
      if (v64 >= v65)
      {
        unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v64 - *v59) >> 3);
        unint64_t v68 = v67 + 1;
        if (v67 + 1 > 0x666666666666666) {
          sub_21677CB10();
        }
        unint64_t v69 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - *v59) >> 3);
        if (2 * v69 > v68) {
          unint64_t v68 = 2 * v69;
        }
        unint64_t v70 = v69 >= 0x333333333333333 ? 0x666666666666666 : v68;
        uint64_t v90 = (unsigned int (*)(uint64_t, uint64_t))(a2 + 112);
        unint64_t v71 = v70 ? (unsigned int (*)(uint64_t, uint64_t))sub_2168720A4(a2 + 112, v70) : 0;
        unint64_t v72 = (char *)v71 + 40 * v67;
        size_t v86 = (BOOL (*)(uint64_t, uint64_t))v71;
        unint64_t v87 = v72;
        unint64_t v89 = (char *)v71 + 40 * v70;
        *((void *)v72 + 4) = 0;
        *(_OWORD *)unint64_t v72 = 0u;
        *((_OWORD *)v72 + 1) = 0u;
        uint64_t v88 = (uint64_t)(v72 + 40);
        sub_21687202C(v59, &v86);
        unint64_t v66 = *(void *)(a2 + 104);
        sub_216872218((uint64_t)&v86);
        uint64_t v60 = a2;
      }
      else
      {
        unint64_t v66 = v64 + 40;
        *(void *)(v64 + 32) = 0;
        *(_OWORD *)unint64_t v64 = 0u;
        *(_OWORD *)(v64 + 16) = 0u;
      }
      *(void *)(v60 + 104) = v66;
      if (v66 - 40 != *(void *)v62)
      {
        sub_21677CC7C((char *)(v66 - 40), **(char ***)v62, *(void *)(*(void *)v62 + 8), (uint64_t)(*(void *)(*(void *)v62 + 8) - **(void **)v62) >> 3);
        uint64_t v60 = a2;
      }
      *(_OWORD *)(v66 - 16) = *(_OWORD *)(v62 + 8);
      if (v50 == v46) {
        break;
      }
      stat v50 = v61;
      if (v61 == v46) {
        goto LABEL_144;
      }
    }
    size_t v86 = (BOOL (*)(uint64_t, uint64_t))"tf/iterator.h";
    unint64_t v87 = "operator++";
    uint64_t v88 = 250;
    unint64_t v89 = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<const pxrInternal__aapl__pxrR"
          "eserved__::(anonymous namespace)::_MallocStackData *>, true>::operator++() [T = std::vector<const pxrInternal_"
          "_aapl__pxrReserved__::(anonymous namespace)::_MallocStackData *>, Reverse = true]";
    LOBYTE(v90) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v86, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
LABEL_144:
  if (v46) {
    operator delete(v46);
  }
  unint64_t v73 = (void *)v93;
  if ((void)v93)
  {
    do
    {
      unsigned int v74 = (void *)*v73;
      unint64_t v75 = (void *)v73[2];
      if (v75)
      {
        v73[3] = v75;
        operator delete(v75);
      }
      operator delete(v73);
      unint64_t v73 = v74;
    }
    while (v74);
  }
  __int16 v76 = (void *)v92;
  *(void *)&long long v92 = 0;
  if (v76) {
    operator delete(v76);
  }
}

void sub_2168686A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (v23) {
    operator delete(v23);
  }
  sub_21686891C(v24 - 160);
  _Unwind_Resume(a1);
}

void *sub_216868734(void *result, uint64_t a2, char *a3)
{
  if (result[3] == result[7] && *result == result[4])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator->";
    v4[2] = 287;
    v4[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<tbb::interface5::concurrent_hash_map<const void *, px"
            "rInternal__aapl__pxrReserved__::TfMallocTag::CallStackInfo>>::operator->() [T = tbb::interface5::concurrent_"
            "hash_map<const void *, pxrInternal__aapl__pxrReserved__::TfMallocTag::CallStackInfo>, Reverse = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_2168687BC(void *a1)
{
  unint64_t v2 = (uint64_t *)a1[3];
  if (v2 == (uint64_t *)a1[7] && *a1 == a1[4])
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator++";
    _OWORD v6[2] = 250;
    v6[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<tbb::interface5::concurrent_hash_map<co"
            "nst void *, pxrInternal__aapl__pxrReserved__::TfMallocTag::CallStackInfo>>::operator++() [T = tbb::interface"
            "5::concurrent_hash_map<const void *, pxrInternal__aapl__pxrReserved__::TfMallocTag::CallStackInfo>, Reverse = false]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v4 = *v2;
    a1[3] = v4;
    if (!v4) {
      sub_216870B44((unint64_t)a1);
    }
  }
  return a1;
}

BOOL sub_216868854(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) < *(void *)(a2 + 8);
}

uint64_t sub_216868868(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_2168720A4(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 40 * v6;
    sub_21687202C(a1, v7);
    return sub_216872218((uint64_t)v7);
  }
  return result;
}

void sub_216868908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216872218((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21686891C(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[2];
      if (v4)
      {
        v2[3] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_BuildPathNodeChildrenTable(pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData *this@<X0>, uint64_t *a2@<X8>)
{
  sub_2168722AC((uint64_t)a2, 0, 0.0, 0.5);
  uint64_t v4 = (char *)this + 1208;
  unint64_t v5 = *((void *)this + 219);
  v23[0] = (char *)this + 1208;
  v23[1] = 0;
  v23[2] = (char *)this + 1736;
  uint64_t v24 = (unint64_t *)v5;
  if (v5 <= 0x3F)
  {
    sub_216870B44((unint64_t)v23);
    unint64_t v5 = (unint64_t)v24;
    uint64_t v6 = (char *)v23[0];
  }
  else
  {
    uint64_t v6 = (char *)this + 1208;
  }
  if (v5) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v6 == v4;
  }
  if (!v7)
  {
    do
    {
      BOOL v25 = (uint64_t *)(v5 + 16);
      uint64_t v8 = (void *)sub_21687253C(a2, (void *)(v5 + 16), (uint64_t)&unk_2174BFD90, &v25);
      BOOL v9 = (void *)v8[3];
      unint64_t v10 = v8[4];
      if ((unint64_t)v9 >= v10)
      {
        uint64_t v12 = v8[2];
        uint64_t v13 = ((uint64_t)v9 - v12) >> 3;
        if ((unint64_t)(v13 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v14 = v10 - v12;
        uint64_t v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          uint8x8_t v17 = (char *)sub_21677CB28((uint64_t)(v8 + 4), v16);
        }
        else {
          uint8x8_t v17 = 0;
        }
        unint64_t v18 = &v17[8 * v13];
        *(void *)unint64_t v18 = *(void *)(v5 + 32);
        uint64_t v11 = v18 + 8;
        uint64_t v20 = (char *)v8[2];
        uint64_t v19 = (char *)v8[3];
        if (v19 != v20)
        {
          do
          {
            uint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          uint64_t v19 = (char *)v8[2];
        }
        _OWORD v8[2] = v18;
        void v8[3] = v11;
        void v8[4] = &v17[8 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *BOOL v9 = *(void *)(v5 + 32);
        uint64_t v11 = v9 + 1;
      }
      void v8[3] = v11;
      unint64_t v5 = *v24;
      uint64_t v24 = (unint64_t *)v5;
      if (!v5)
      {
        sub_216870B44((unint64_t)v23);
        unint64_t v5 = (unint64_t)v24;
      }
      if (v5) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v23[0] == (void)v4;
      }
    }
    while (!v22);
  }
}

void sub_216868B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 + 8);
  sub_21686C230(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_MallocPathNode::_BuildTree(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)&v21[0] = a1;
  if (sub_216872B78(a2, v21))
  {
    BOOL v25 = (void **)a1;
    uint64_t v8 = sub_216872C54(a2, &v25);
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    BOOL v22 = 0;
    sub_216872C94(&v22, *(const void **)(v8 + 16), *(void *)(v8 + 24), (uint64_t)(*(void *)(v8 + 24) - *(void *)(v8 + 16)) >> 3);
    unint64_t v9 = v23 - v22;
  }
  else
  {
    unint64_t v9 = 0;
    BOOL v22 = 0;
    unint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  sub_216868E1C((uint64_t *)(a3 + 48), v9);
  unint64_t v10 = atomic_load((unint64_t *)a1 + 1);
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v10;
  unint64_t v11 = atomic_load((unint64_t *)a1 + 2);
  *(void *)(a3 + 16) = v11;
  MEMORY[0x21D4477E0](a3 + 24, **a1);
  uint64_t v12 = v22;
  uint64_t v13 = v23;
  if (v22 != v23)
  {
    do
    {
      uint64_t v14 = *v12;
      if a4 && (unsigned __int8 v15 = atomic_load((unsigned __int8 *)(v14 + 24)), (v15))
      {
        memset((char *)&v21[1] + 8, 0, 48);
        pxrInternal__aapl__pxrReserved__::Tf_MallocPathNode::_BuildTree(v14, a2, v21, 1);
        long long v20 = v21[3];
        *(void *)(a3 + 8) += *((void *)&v21[0] + 1);
        if ((void)v20 != *((void *)&v20 + 1)) {
          sub_216872F68((uint64_t *)(a3 + 48), *(std::string **)(a3 + 56), (uint64_t *)v20, *((uint64_t *)&v20 + 1), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)&v20 + 1) - v20) >> 3));
        }
        *(void *)a3 += *(void *)&v21[0];
        BOOL v25 = (void **)&v21[3];
        sub_21686C338(&v25);
        if (SHIBYTE(v21[2]) < 0) {
          operator delete(*((void **)&v21[1] + 1));
        }
      }
      else
      {
        memset(v21, 0, 72);
        unint64_t v16 = *(void *)(a3 + 56);
        if (v16 >= *(void *)(a3 + 64))
        {
          uint64_t v18 = sub_216873A3C((uint64_t *)(a3 + 48), (uint64_t)v21);
        }
        else
        {
          *(void *)(v16 + 8) = 0;
          *(void *)(v16 + 16) = 0;
          *(void *)unint64_t v16 = 0;
          long long v17 = *(_OWORD *)((char *)&v21[1] + 8);
          *(void *)(v16 + 40) = *((void *)&v21[2] + 1);
          *(void *)(v16 + 48) = 0;
          *(_OWORD *)(v16 + 24) = v17;
          memset((char *)&v21[1] + 8, 0, 24);
          *(void *)(v16 + 56) = 0;
          *(void *)(v16 + 64) = 0;
          *(_OWORD *)(v16 + 48) = v21[3];
          *(void *)(v16 + 64) = *(void *)&v21[4];
          memset(&v21[3], 0, 24);
          uint64_t v18 = v16 + 72;
        }
        *(void *)(a3 + 56) = v18;
        BOOL v25 = (void **)&v21[3];
        sub_21686C338(&v25);
        if (SHIBYTE(v21[2]) < 0) {
          operator delete(*((void **)&v21[1] + 1));
        }
        uint64_t v19 = (void *)(*(void *)(a3 + 56) - 72);
        pxrInternal__aapl__pxrReserved__::Tf_MallocPathNode::_BuildTree(v14, a2, v19, a4);
        *(void *)a3 += *v19;
      }
      ++v12;
    }
    while (v12 != v13);
    uint64_t v12 = v22;
  }
  if (v12)
  {
    unint64_t v23 = v12;
    operator delete(v12);
  }
}

void sub_216868DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216868E1C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_216815D10(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 72 * v6;
    sub_216872D10(a1, v7);
    return sub_216872EE8((uint64_t)v7);
  }
  return result;
}

void sub_216868EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216872EE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216868EDC(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  sub_21686C338(&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::SetDebugMatchList(uint64_t result, uint64_t a2, char *a3)
{
  unsigned __int8 v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v3)
  {
    uint64_t v4 = (unsigned __int8 *)result;
    uint64_t v8 = qword_26798E3C0;
    int v9 = -1;
    sub_21686C480((uint64_t)&v8, a2, a3);
    pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_SetDebugNames(qword_26798E3C0, v4, v5);
    return sub_216869774((uint64_t)&v8, v6, v7);
  }
  return result;
}

void sub_216868F94(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::SetCapturedMallocStacksMatchList(uint64_t result, uint64_t a2, char *a3)
{
  unsigned __int8 v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v3)
  {
    uint64_t v4 = (unsigned __int8 *)result;
    uint64_t v8 = qword_26798E3C0;
    int v9 = -1;
    sub_21686C480((uint64_t)&v8, a2, a3);
    pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_SetTraceNames(qword_26798E3C0, v4, v5);
    return sub_216869774((uint64_t)&v8, v6, v7);
  }
  return result;
}

void sub_216869018(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::GetCapturedMallocStacks(uint64_t *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unsigned __int8 v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v3)
  {
    sub_216873C34((uint64_t)&v56, "Tf", "TfMallocTag::GetCapturedMallocStacks");
    for (uint64_t i = 536; i != 584; i += 24)
      *(uint64_t *)((char *)&v21 + i) = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v37 = 0u;
    long long v36 = 0u;
    long long v35 = 0u;
    long long v34 = 0u;
    long long v33 = 0u;
    long long v32 = 0u;
    long long v31 = 0u;
    long long v30 = 0u;
    long long v29 = 0u;
    long long v28 = 0u;
    long long v27 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    __dmb(0xBu);
    uint64_t v21 = 0;
    __dmb(0xBu);
    uint64_t v54 = 0;
    memset(v55, 0, 48);
    *(void *)&long long v22 = v55;
    __dmb(0xBu);
    uint64_t v21 = 1;
    uint64_t v16 = qword_26798E3C0;
    int v17 = -1;
    sub_21686C480((uint64_t)&v16, v4, v5);
    uint64_t v8 = (uint64_t *)(qword_26798E3C0 + 1840);
    if (&v21 != (uint64_t *)(qword_26798E3C0 + 1840)) {
      sub_216873CA8(&v21, v8);
    }
    sub_216869774((uint64_t)&v16, (uint64_t)v8, v7);
    sub_216871370((uint64_t)&v16, (uint64_t)&v21);
    while (v18 != v20 || v16 != v19)
    {
      uint64_t v12 = sub_216868734(&v16, v9, v10)[3] + 24;
      unint64_t v13 = a1[1];
      if (v13 >= a1[2])
      {
        uint64_t v14 = sub_216873D90(a1, v12);
      }
      else
      {
        sub_216873D3C((uint64_t)a1, v12);
        uint64_t v14 = v13 + 24;
      }
      a1[1] = v14;
      sub_2168687BC(&v16);
    }
    sub_2168709E8((unint64_t *)&v21);
    while (v57--)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v56);
  }
}

void sub_216869204(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_216869774((uint64_t)va, a2, a3);
  sub_2168709E8((unint64_t *)va1);
  sub_21684E6B8(v4 - 48);
  sub_216873B88((void ***)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::_MallocWrapper(pxrInternal__aapl__pxrReserved__::TfMallocTag *this, unint64_t a2, const void *a3)
{
}

uint64_t sub_216869290(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(_DWORD *)a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v3 == 0;
  }
  if (!v6)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 8) == v7) {
      uint64_t v8 = (atomic_ullong **)(qword_26798E3C0 + 16);
    }
    else {
      uint64_t v8 = (atomic_ullong **)(v7 - 8);
    }
    uint64_t v9 = *v8;
    uint64_t v18 = qword_26798E3C0;
    int v19 = -1;
    sub_21686C510((uint64_t)&v18, a2, a3);
    uint64_t v10 = (uint64_t *)qword_26798E3C0;
    uint64_t v22 = v3;
    sub_21686C194(&v21, 0, v11);
    if (*(_DWORD *)(*v9 + 16)) {
      pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_CaptureStackOrDebug(v10, (uint64_t)v9, v3, v4);
    }
    *(void *)&long long v20 = v4;
    *((void *)&v20 + 1) = v9;
    sub_21686C5E4(v10 + 5, v5 - 33, &v22, &v20);
    atomic_fetch_add_explicit(v9 + 1, v4, memory_order_relaxed);
    atomic_ullong v15 = *v9;
    uint64_t v14 = v9 + 2;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), v4, memory_order_relaxed);
    int64_t v16 = atomic_fetch_add_explicit(v10 + 3, v4, memory_order_relaxed) + v4;
    if (v16 <= v10[4]) {
      int64_t v16 = v10[4];
    }
    v10[4] = v16;
    atomic_fetch_add(v14, 1uLL);
    *uint64_t v21 = 0;
    sub_216869774((uint64_t)&v18, v12, v13);
  }
  return v3;
}

void sub_216869384(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  *a14 = 0;
  sub_216869774((uint64_t)&a10, a2, a3);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::_ReallocWrapper(pxrInternal__aapl__pxrReserved__::TfMallocTag *this, pxrInternal__aapl__pxrReserved__::TfMallocTag *a2, const void *a3, const void *a4)
{
  if (!this)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_MallocWrapper(a2, (unint64_t)a2, a3);
  }
  sub_217323FEC();
}

uint64_t sub_216869404(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(_DWORD *)a1)
  {
    BOOL v6 = (uint64_t (*)(uint64_t, unint64_t))off_26798E3D0;
    return v6(v4, v3);
  }
  else
  {
    uint64_t v22 = qword_26798E3C0;
    int v23 = -1;
    sub_21686C510((uint64_t)&v22, a2, a3);
    sub_216869588((uint64_t *)qword_26798E3C0, v4, v9);
    uint64_t v10 = ((uint64_t (*)(uint64_t, unint64_t))off_26798E3D0)(v4, v3);
    uint64_t v13 = v10;
    if (v10)
    {
      uint64_t v14 = *(void *)(a1 + 8);
      uint64_t v15 = *(void *)(a1 + 16);
      int64_t v16 = (uint64_t *)qword_26798E3C0;
      if (v14 == v15) {
        int v17 = (atomic_ullong **)(qword_26798E3C0 + 16);
      }
      else {
        int v17 = (atomic_ullong **)(v15 - 8);
      }
      uint64_t v18 = *v17;
      uint64_t v26 = v10;
      sub_21686C194(&v25, 0, v12);
      if (*(_DWORD *)(*v18 + 16)) {
        pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_CaptureStackOrDebug(v16, (uint64_t)v18, v13, v3);
      }
      *(void *)&long long v24 = v3;
      *((void *)&v24 + 1) = v18;
      sub_21686C5E4(v16 + 5, v5 - 33, &v26, &v24);
      atomic_fetch_add_explicit(v18 + 1, v3, memory_order_relaxed);
      atomic_ullong v20 = *v18;
      int v19 = v18 + 2;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), v3, memory_order_relaxed);
      int64_t v21 = atomic_fetch_add_explicit(v16 + 3, v3, memory_order_relaxed) + v3;
      if (v21 <= v16[4]) {
        int64_t v21 = v16[4];
      }
      v16[4] = v21;
      atomic_fetch_add(v19, 1uLL);
      *long long v25 = 0;
    }
    sub_216869774((uint64_t)&v22, v11, v12);
    return v13;
  }
}

void sub_216869550(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  *a14 = 0;
  sub_216869774((uint64_t)&a10, a2, a3);
  _Unwind_Resume(a1);
}

void *sub_216869588(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v16 = a2;
  sub_21686C194(&v15, 0, a3);
  uint64_t v12 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  if (sub_21686CF9C(a1 + 5, (uint64_t)&v12, &v16))
  {
    uint64_t v5 = *(void *)(v14 + 24);
    uint64_t v4 = *(atomic_ullong **)(v14 + 32);
    sub_21686D01C(a1 + 5, (uint64_t)&v12);
    if (v14)
    {
      BOOL v6 = v12;
      uint64_t v12 = 0;
      if (v13)
      {
LABEL_4:
        atomic_ullong v7 = *v6;
        unint64_t v8 = *v6 & 0xFFFFFFFFFFFFFFFCLL;
        while (1)
        {
          atomic_ullong v9 = v7;
          atomic_compare_exchange_strong(v6, (unint64_t *)&v9, v8);
          if (v9 == v7) {
            break;
          }
          if (atomic_fetch_add_explicit(v6, 0, memory_order_relaxed) != v7)
          {
            sched_yield();
            goto LABEL_4;
          }
        }
      }
      else
      {
        atomic_fetch_add(v6, 0xFFFFFFFFFFFFFFFCLL);
      }
      uint64_t v14 = 0;
    }
    atomic_ullong v10 = *v4;
    if (*(_DWORD *)(*v4 + 16))
    {
      pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_ReleaseStackOrDebug(a1, (uint64_t)v4, v16);
      atomic_ullong v10 = *v4;
    }
    atomic_fetch_add_explicit(v4 + 1, -v5, memory_order_relaxed);
    atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), -v5, memory_order_relaxed);
    atomic_fetch_add_explicit(a1 + 3, -v5, memory_order_relaxed);
  }
  uint64_t v14 = 0;
  uint64_t result = sub_21685C048(&v12);
  *uint64_t v15 = 0;
  return result;
}

void sub_2168696B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  a11 = 0;
  sub_21685C048(&a9);
  *a13 = 0;
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_FreeWrapper(uint64_t this, void *a2, const void *a3)
{
  if (this) {
    sub_2173241B0();
  }
  return this;
}

void sub_216869708(char a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  if (a1)
  {
    a9 = qword_26798E3C0;
    a10 = -1;
    sub_21686C510((uint64_t)&a9, a2, a3);
    sub_216869588((uint64_t *)qword_26798E3C0, v10, v11);
    sub_216869774((uint64_t)&a9, v12, v13);
    off_26798E3E0(v10);
    sub_216869774((uint64_t)&a9, v14, v15);
  }
  JUMPOUT(0x2168696F0);
}

void sub_21686975C(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216869774(uint64_t a1, uint64_t a2, char *a3)
{
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 != -1)
  {
    if (v3 == -2) {
      return (uint64_t)sub_21686D16C(a1, a2, a3);
    }
    else {
      return sub_21686D1FC(a1, a2, a3);
    }
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::Initialize(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E3B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E3B8))
  {
    byte_26798E3B0 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Initialize(a1, v2, v3);
    __cxa_guard_release(&qword_26798E3B8);
  }
  return byte_26798E3B0;
}

void sub_216869808(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_Initialize(uint64_t a1, uint64_t a2, char *a3)
{
  if (qword_26798E3C0)
  {
    v10[0] = "tf/mallocTag.cpp";
    v10[1] = "_Initialize";
    v10[2] = 1173;
    v10[3] = "static BOOL pxrInternal__aapl__pxrReserved__::TfMallocTag::_Initialize(std::string *)";
    char v11 = 0;
    int v12 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v10, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "!_mallocGlobalData");
  }
  uint64_t v4 = (uint64_t *)operator new(0x978uLL);
  sub_21686DC7C((pxrInternal__aapl__pxrReserved__::TfBigRWMutex *)v4);
  qword_26798E3C0 = (uint64_t)v4;
  uint64_t v5 = sub_21686D288(v4 + 78, "__root");
  BOOL v6 = operator new(0x20uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *BOOL v6 = v5;
  uint64_t v7 = qword_26798E3C0;
  *((unsigned char *)v6 + 24) = 0;
  *(void *)(v7 + 16) = v6;
  atomic_store(1u, pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  sub_21686C194(v10, 0, v8);
  uint64_t result = pxrInternal__aapl__pxrReserved__::ArchMallocHook::Initialize((uint64_t)&off_26798E3C8, (uint64_t)pxrInternal__aapl__pxrReserved__::TfMallocTag::_MallocWrapper, (uint64_t)pxrInternal__aapl__pxrReserved__::TfMallocTag::_ReallocWrapper, (uint64_t)pxrInternal__aapl__pxrReserved__::TfMallocTag::_MemalignWrapper, (uint64_t)pxrInternal__aapl__pxrReserved__::TfMallocTag::_FreeWrapper, a1);
  *(_DWORD *)v10[0] = 0;
  return result;
}

void sub_216869964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  *a11 = 0;
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfMallocTag::GetCallTree(uint64_t a1, uint64_t a2)
{
  sub_21687072C((uint64_t *)a1);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (*(char *)(a1 + 71) < 0)
  {
    **(unsigned char **)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 71) = 0;
  }
  sub_21686C3C4(a1 + 72, *(void ***)(a1 + 72));
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData *)qword_26798E3C0;
  if (qword_26798E3C0)
  {
    sub_21686C194(&v40, 0, v4);
    long long v38 = v5;
    int v39 = -1;
    sub_21686C480((uint64_t)&v38, v6, v7);
    unint64_t v8 = (void **)*((void *)v5 + 2);
    pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_BuildPathNodeChildrenTable(v5, &v34);
    pxrInternal__aapl__pxrReserved__::Tf_MallocPathNode::_BuildTree(v8, &v34, a1 + 24, a2);
    v30[0] = (void **)v35;
    sub_21686C230(v30);
    for (uint64_t i = 536; i != 584; i += 24)
      *(uint64_t *)((char *)&v34 + i) = 0;
    memset(v35, 0, sizeof(v35));
    __dmb(0xBu);
    uint64_t v34 = 0;
    __dmb(0xBu);
    unint64_t v36 = 0;
    memset(v37, 0, 48);
    *(void *)&v35[0] = v37;
    __dmb(0xBu);
    uint64_t v34 = 1;
    sub_216869CB0(a1 + 24, &v34, v9);
    unint64_t v11 = v36;
    __dmb(0xBu);
    sub_216869DC0((uint64_t *)a1, v11);
    sub_2168677D0((unint64_t)&v34, (unint64_t *)v30);
    while (v31 != v33 || v30[0] != v32)
    {
      sub_216867840(v30, v12, v13);
      sub_216779094(__p, **(char ***)(v31 + 24));
      sub_216867840(v30, v15, v16);
      unint64_t v17 = atomic_load((unint64_t *)(*(void *)(v31 + 24) + 8));
      unint64_t v29 = v17;
      unint64_t v18 = *(void *)(a1 + 8);
      if (v18 >= *(void *)(a1 + 16))
      {
        uint64_t v21 = sub_2168742A8((uint64_t *)a1, (long long *)__p);
      }
      else
      {
        sub_216874238((void *)a1, (long long *)__p);
        uint64_t v21 = v18 + 32;
      }
      *(void *)(a1 + 8) = v21;
      sub_216867840(v30, v19, v20);
      uint64_t v22 = *(void ***)(v31 + 24);
      if (v22)
      {
        int v23 = *v22;
        void *v22 = 0;
        if (v23) {
          operator delete[](v23);
        }
        operator delete(v22);
      }
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      sub_2168678C8(v30);
    }
    pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_BuildUniqueMallocStacks((uint64_t)v5, a1);
    sub_216869E54((unint64_t *)&v34);
    sub_216869774((uint64_t)&v38, v24, v25);
    *long long v40 = 0;
  }
  return v5 != 0;
}

void sub_216869C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  a16 = v24 + 8;
  sub_21686C230((void ***)&a16);
  sub_216869774(v25 - 88, v27, v28);
  **(_DWORD **)(v25 - 72) = 0;
  _Unwind_Resume(a1);
}

atomic_ullong *sub_216869CB0(uint64_t a1, uint64_t *a2, char *a3)
{
  if (!a1)
  {
    char v13 = "tf/mallocTag.cpp";
    uint64_t v14 = "_GetCallSites";
    uint64_t v15 = 1092;
    uint64_t v16 = "void pxrInternal__aapl__pxrReserved__::_GetCallSites(TfMallocTag::CallTree::PathNode *, Tf_MallocCallSiteTable *)";
    char v17 = 0;
    int v18 = 4;
    uint64_t v12 = "node";
    goto LABEL_11;
  }
  if (!a2)
  {
    char v13 = "tf/mallocTag.cpp";
    uint64_t v14 = "_GetCallSites";
    uint64_t v15 = 1093;
    uint64_t v16 = "void pxrInternal__aapl__pxrReserved__::_GetCallSites(TfMallocTag::CallTree::PathNode *, Tf_MallocCallSiteTable *)";
    char v17 = 0;
    int v18 = 4;
    uint64_t v12 = "table";
LABEL_11:
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v13, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, v12);
  }
  uint64_t v5 = (char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v5 = *(char **)v5;
  }
  uint64_t result = (atomic_ullong *)sub_21686D288(a2, v5);
  atomic_fetch_add(result + 1, *(void *)(a1 + 8));
  atomic_ullong v9 = *(char **)(a1 + 48);
  uint64_t v10 = *(const char **)(a1 + 56);
  char v13 = v9;
  uint64_t v14 = v10;
  while (v9 != v10)
  {
    uint64_t v11 = sub_21686D428((uint64_t *)&v13, v7, v8);
    sub_216869CB0(v11, a2);
    uint64_t result = sub_21686D4A8(&v13);
    atomic_ullong v9 = v13;
    uint64_t v10 = v14;
  }
  return result;
}

uint64_t sub_216869DC0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_2168707F4(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_2168740D8(a1, v7);
    return sub_216870958((uint64_t)v7);
  }
  return result;
}

void sub_216869E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216870958((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_216869E54(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  for (unint64_t i = sub_216851020(v2); ; --i)
  {
    unint64_t v5 = 0;
    uint64_t v6 = &a1[i];
    unint64_t v9 = v6[1];
    uint64_t v7 = (uint64_t *)(v6 + 1);
    unint64_t v8 = v9;
    char v10 = i <= 1 ? 1 : i;
    do
    {
      uint64_t v11 = (void **)(v8 + 24 * v5 + 16);
      while (1)
      {
        uint64_t v12 = *v11;
        if ((unint64_t)*v11 <= 0x3F) {
          break;
        }
        *uint64_t v11 = (void *)*v12;
        tbb::internal::deallocate_via_handler_v3((uint64_t)v12, v3);
      }
      ++v5;
    }
    while (!(v5 >> v10));
    if (i < 8 && i != 1) {
      break;
    }
    tbb::internal::deallocate_via_handler_v3(*v7, v3);
LABEL_14:
    *uint64_t v7 = 0;
  }
  if (i) {
    goto LABEL_14;
  }
  __dmb(0xBu);
  *a1 = 1;
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::GetTotalBytes(pxrInternal__aapl__pxrReserved__::TfMallocTag *this)
{
  if (qword_26798E3C0) {
    return atomic_load((unint64_t *)(qword_26798E3C0 + 24));
  }
  else {
    return 0;
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::GetMaxTotalBytes(pxrInternal__aapl__pxrReserved__::TfMallocTag *this)
{
  if (qword_26798E3C0) {
    return atomic_load((unint64_t *)(qword_26798E3C0 + 32));
  }
  else {
    return 0;
  }
}

void *pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(char *a1, _DWORD *a2, char *a3)
{
  if (!a1 || !*a1) {
    return 0;
  }
  uint64_t v4 = a2;
  if (!a2) {
    sub_217323FEC();
  }
  sub_21686C194(&v18, a2, a3);
  uint64_t v16 = qword_26798E3C0;
  int v17 = -1;
  sub_21686C510((uint64_t)&v16, v5, v6);
  uint64_t v7 = sub_21686D288((uint64_t *)(qword_26798E3C0 + 624), a1);
  uint64_t v8 = v4[2];
  if (v4[1] == v8) {
    unint64_t v9 = (uint64_t *)(qword_26798E3C0 + 16);
  }
  else {
    unint64_t v9 = (uint64_t *)(v8 - 8);
  }
  char v10 = sub_21686A0A4(qword_26798E3C0, *v9, (uint64_t)v7);
  sub_216869774((uint64_t)&v16, v11, v12);
  sub_21686A1E4(v4, (uint64_t)v7, (uint64_t)v10);
  sub_216869774((uint64_t)&v16, v13, v14);
  _DWORD *v18 = 0;
  return v4;
}

void sub_21686A068()
{
}

void sub_21686A074(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, _DWORD *a12)
{
  *a12 = 0;
  _Unwind_Resume(a1);
}

void *sub_21686A0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v12 = a2;
  *((void *)&v12 + 1) = a3;
  uint64_t v4 = (uint64_t *)(a1 + 1208);
  uint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  if (sub_21686DF40((uint64_t *)(a1 + 1208), 0, &v12, (uint64_t)&v9, 0, 0))
  {
    uint64_t v5 = *(void **)(v11 + 32);
  }
  else
  {
    uint64_t v11 = 0;
    sub_21685C048(&v9);
    uint64_t v5 = operator new(0x20uLL);
    v5[1] = 0;
    void v5[2] = 0;
    void *v5 = a3;
    *((unsigned char *)v5 + 24) = 0;
    uint64_t v9 = 0;
    char v10 = 0;
    uint64_t v11 = 0;
    uint64_t v6 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x28);
    *uint64_t v6 = 0;
    v6[1] = 0;
    *((_OWORD *)v6 + 1) = v12;
    void v6[4] = v5;
    if (!sub_21686DF40(v4, 1, v6 + 2, (uint64_t)&v9, 1, v6))
    {
      uint64_t v7 = *(void *)(v11 + 32);
      uint64_t v11 = 0;
      sub_21685C048(&v9);
      operator delete(v5);
      return (void *)v7;
    }
  }
  uint64_t v11 = 0;
  sub_21685C048(&v9);
  return v5;
}

void sub_21686A1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_21685C048(&a9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_21686A1E4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a2;
  sub_21686E594(a1 + 4, &v33, &v33);
  if (v5)
  {
    uint64_t v8 = (void *)a1[2];
  }
  else
  {
    atomic_store(1u, (unsigned __int8 *)(a3 + 24));
    unint64_t v6 = a1[3];
    uint64_t v7 = (void *)a1[2];
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = a1[1];
      uint64_t v10 = ((uint64_t)v7 - v9) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
        goto LABEL_37;
      }
      uint64_t v11 = v6 - v9;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13) {
        uint64_t v14 = (char *)sub_21677CB28((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = &v14[8 * v10];
      uint64_t v16 = &v14[8 * v13];
      *(void *)uint64_t v15 = 0;
      uint64_t v8 = v15 + 8;
      int v18 = (char *)a1[1];
      int v17 = (char *)a1[2];
      if (v17 != v18)
      {
        do
        {
          uint64_t v19 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v15 - 1) = v19;
          v15 -= 8;
        }
        while (v17 != v18);
        int v17 = (char *)a1[1];
      }
      a1[1] = v15;
      a1[2] = v8;
      a1[3] = v16;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *uint64_t v7 = 0;
      uint64_t v8 = v7 + 1;
    }
    a1[2] = v8;
  }
  unint64_t v20 = a1[3];
  if ((unint64_t)v8 < v20)
  {
    *uint64_t v8 = a3;
    uint64_t v21 = v8 + 1;
    goto LABEL_36;
  }
  uint64_t v22 = a1[1];
  uint64_t v23 = ((uint64_t)v8 - v22) >> 3;
  if ((unint64_t)(v23 + 1) >> 61) {
LABEL_37:
  }
    sub_21677CB10();
  uint64_t v24 = v20 - v22;
  uint64_t v25 = v24 >> 2;
  if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
    uint64_t v25 = v23 + 1;
  }
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v26 = v25;
  }
  if (v26) {
    uint64_t v27 = (char *)sub_21677CB28((uint64_t)(a1 + 3), v26);
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = &v27[8 * v23];
  unint64_t v29 = &v27[8 * v26];
  *(void *)char v28 = a3;
  uint64_t v21 = v28 + 8;
  uint64_t v31 = (char *)a1[1];
  long long v30 = (char *)a1[2];
  if (v30 != v31)
  {
    do
    {
      uint64_t v32 = *((void *)v30 - 1);
      v30 -= 8;
      *((void *)v28 - 1) = v32;
      v28 -= 8;
    }
    while (v30 != v31);
    long long v30 = (char *)a1[1];
  }
  a1[1] = v28;
  a1[2] = v21;
  a1[3] = v29;
  if (v30) {
    operator delete(v30);
  }
LABEL_36:
  a1[2] = v21;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(uint64_t result)
{
  if (!result) {
    sub_217323FEC();
  }
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  int v3 = *(void **)(v1 - 8);
  *(void *)(result + 16) = v1 - 8;
  if (v2 == v1 - 8 || (v5 = *(void *)(v1 - 16), uint64_t v4 = v1 - 16, v5))
  {
    uint64_t v6 = result + 32;
    uint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *v3);
    return sub_21686EE94(v6, v3, v7);
  }
  else
  {
    *(void *)(result + 16) = v4;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::CallTree::GetPrettyPrintString(uint64_t a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  uint64_t v8 = operator new(0x58uLL);
  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  *(_OWORD *)&v99.__r_.__value_.__r.__words[1] = xmmword_217411D00;
  *(void *)&long long v9 = 0x2D2D2D2D2D2D2D2DLL;
  *((void *)&v9 + 1) = 0x2D2D2D2D2D2D2D2DLL;
  *uint64_t v8 = v9;
  v8[1] = v9;
  _OWORD v8[2] = v9;
  void v8[3] = v9;
  void v8[4] = v9;
  *((unsigned char *)v8 + 80) = 0;
  uint64_t v10 = std::string::insert(&v99, 0, "\n");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v100, "\n");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t v88 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v88 >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if (v88 >= 0) {
    std::string::size_type v15 = HIBYTE(v88);
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  std::string::append(a4, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(v88) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\nMalloc Tag Report\n\n\n", v16, v17);
  if (v88 >= 0) {
    int v18 = __p;
  }
  else {
    int v18 = (void **)__p[0];
  }
  if (v88 >= 0) {
    std::string::size_type v19 = HIBYTE(v88);
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  std::string::append(a4, (const std::string::value_type *)v18, v19);
  if (SHIBYTE(v88) < 0) {
    operator delete(__p[0]);
  }
  if (qword_26798E3C0) {
    uint64_t v22 = atomic_load((unint64_t *)(qword_26798E3C0 + 24));
  }
  else {
    uint64_t v22 = 0;
  }
  sub_21686EFE4(v22, v20, v21, &v100);
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v25 = &v100;
  }
  else {
    uint64_t v25 = (std::string *)v100.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Total bytes = %s\n\n\n", v23, v24, v25);
  if (v88 >= 0) {
    unint64_t v26 = __p;
  }
  else {
    unint64_t v26 = (void **)__p[0];
  }
  if (v88 >= 0) {
    std::string::size_type v27 = HIBYTE(v88);
  }
  else {
    std::string::size_type v27 = (std::string::size_type)__p[1];
  }
  std::string::append(a4, (const std::string::value_type *)v26, v27);
  if (SHIBYTE(v88) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if ((a2 & 0xFFFFFFFD) == 0)
  {
    v100.__r_.__value_.__r.__words[0] = 0;
    unint64_t v30 = sub_21686AE5C(a4, (const std::string *)(a1 + 24), 0, 0, 0, (unint64_t *)&v100, a3);
    if (v100.__r_.__value_.__r.__words[0] >= a3)
    {
      unint64_t v31 = qword_26798E3C0;
      if (qword_26798E3C0) {
        unint64_t v31 = atomic_load((unint64_t *)(qword_26798E3C0 + 24));
      }
      if (v30 != v31)
      {
        unint64_t v32 = qword_26798E3C0;
        if (qword_26798E3C0) {
          unint64_t v32 = atomic_load((unint64_t *)(qword_26798E3C0 + 24));
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\nWARNING: limit of %zu nodes visted, but only %zu bytes of %zu accounted for.  Running with a larger maxPrintedNodes will produce more accurate results.\n", v28, v29, a3, v30, v32);
        if (v88 >= 0) {
          uint64_t v33 = __p;
        }
        else {
          uint64_t v33 = (void **)__p[0];
        }
        if (v88 >= 0) {
          std::string::size_type v34 = HIBYTE(v88);
        }
        else {
          std::string::size_type v34 = (std::string::size_type)__p[1];
        }
        std::string::append(a4, (const std::string::value_type *)v33, v34);
        if (SHIBYTE(v88) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  if ((a2 - 1) <= 1)
  {
    unint64_t v86 = *(void *)(a1 + 24);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\nCall Sites\n\n", v28, v29);
    if (v88 >= 0) {
      long long v35 = __p;
    }
    else {
      long long v35 = (void **)__p[0];
    }
    if (v88 >= 0) {
      std::string::size_type v36 = HIBYTE(v88);
    }
    else {
      std::string::size_type v36 = (std::string::size_type)__p[1];
    }
    std::string::append(a4, (const std::string::value_type *)v35, v36);
    if (SHIBYTE(v88) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)&v100.__r_.__value_.__r.__words[1] = 0uLL;
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100.__r_.__value_.__l.__size_;
    *(_OWORD *)std::string __p = *(_OWORD *)a1;
    while (__p[0] != __p[1])
    {
      uint64_t v39 = *sub_21686F210(__p, (uint64_t)v37, v38);
      std::string::size_type v42 = *sub_21686F210(__p, v40, v41);
      v99.__r_.__value_.__r.__words[0] = *(void *)(v39 + 24);
      v99.__r_.__value_.__l.__size_ = v42;
      sub_21686F438((uint64_t **)&v100, (unint64_t *)&v99, (uint64_t *)&v99);
      sub_21686F28C(__p);
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%%-%lds %%%lds %%%lds\n", v37, v38, 72, 15, 15);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v45 = &v99;
    }
    else {
      long long v45 = (std::string *)v99.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v45, v43, v44, "NAME", "BYTES", "%ROOT");
    if (v88 >= 0) {
      long long v46 = __p;
    }
    else {
      long long v46 = (void **)__p[0];
    }
    if (v88 >= 0) {
      std::string::size_type v47 = HIBYTE(v88);
    }
    else {
      std::string::size_type v47 = (std::string::size_type)__p[1];
    }
    std::string::append(a4, (const std::string::value_type *)v46, v47);
    if (SHIBYTE(v88) < 0) {
      operator delete(__p[0]);
    }
    long long v48 = operator new(0x50uLL);
    v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
    *(_OWORD *)&v94.__r_.__value_.__r.__words[1] = xmmword_217411D10;
    *(void *)&long long v49 = 0x2D2D2D2D2D2D2D2DLL;
    *((void *)&v49 + 1) = 0x2D2D2D2D2D2D2D2DLL;
    *(_OWORD *)long long v48 = v49;
    *((_OWORD *)v48 + 1) = v49;
    *((_OWORD *)v48 + 2) = v49;
    *((_OWORD *)v48 + 3) = v49;
    strcpy((char *)v48 + 64, "--------");
    std::string::push_back(&v94, 32);
    std::string v95 = v94;
    memset(&v94, 0, sizeof(v94));
    char v93 = 15;
    strcpy(__s, "---------------");
    long long v50 = std::string::append(&v95, __s, 0xFuLL);
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&v96, 32);
    std::string v97 = v96;
    memset(&v96, 0, sizeof(v96));
    char v91 = 15;
    strcpy((char *)v90, "---------------");
    long long v52 = std::string::append(&v97, (const std::string::value_type *)v90, 0xFuLL);
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    uint64_t v54 = std::string::append(&v98, "\n\n");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    int64_t v88 = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    if (v88 >= 0) {
      uint64_t v56 = __p;
    }
    else {
      uint64_t v56 = (void **)__p[0];
    }
    if (v88 >= 0) {
      std::string::size_type v57 = HIBYTE(v88);
    }
    else {
      std::string::size_type v57 = (std::string::size_type)__p[1];
    }
    std::string::append(a4, (const std::string::value_type *)v56, v57);
    if (SHIBYTE(v88) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v98.__r_.__value_.__l.__data_);
    }
    if (v91 < 0) {
      operator delete(v90[0]);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v96.__r_.__value_.__l.__data_);
    }
    if (v93 < 0) {
      operator delete(*(void **)__s);
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    __p[0] = &v100.__r_.__value_.__r.__words[1];
    __p[1] = &v100.__r_.__value_.__r.__words[1];
    int64_t v88 = v100.__r_.__value_.__r.__words[0];
    unint64_t v89 = (void *)v100.__r_.__value_.__r.__words[0];
    double v60 = (double)v86;
    while (__p[1] != v89)
    {
      uint64_t v63 = *(void **)(sub_21686F30C((uint64_t)__p, v58, v59) + 8);
      unint64_t v64 = (void *)*v63;
      if (*v63)
      {
        do
        {
          unint64_t v65 = v64;
          unint64_t v64 = (void *)v64[1];
        }
        while (v64);
      }
      else
      {
        do
        {
          unint64_t v65 = (void *)v63[2];
          BOOL v66 = *v65 == (void)v63;
          uint64_t v63 = v65;
        }
        while (v66);
      }
      uint64_t v67 = v65[4];
      unint64_t v70 = *(void **)(sub_21686F30C((uint64_t)__p, v61, v62) + 8);
      unint64_t v71 = (void *)*v70;
      if (*v70)
      {
        do
        {
          unint64_t v72 = v71;
          unint64_t v71 = (void *)v71[1];
        }
        while (v71);
      }
      else
      {
        do
        {
          unint64_t v72 = (void *)v70[2];
          BOOL v66 = *v72 == (void)v70;
          unint64_t v70 = v72;
        }
        while (v66);
      }
      unint64_t v73 = (const std::string *)v72[5];
      memset(&v98, 0, sizeof(v98));
      if (v86)
      {
        if ((double)(unint64_t)v67 * 100.0 / v60 < 0.1) {
          break;
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%.1f%%", v68, v69, (double)(unint64_t)v67 * 100.0 / v60);
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v98.__r_.__value_.__l.__data_);
        }
        std::string v98 = v97;
      }
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v74 = &v99;
      }
      else {
        unsigned int v74 = (std::string *)v99.__r_.__value_.__r.__words[0];
      }
      std::string::basic_string(&v96, v73, 0, 0x48uLL, (std::allocator<char> *)&v95);
      int v75 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
      std::string::size_type v76 = v96.__r_.__value_.__r.__words[0];
      sub_21686EFE4(v67, v77, v78, &v95);
      if (v75 >= 0) {
        uint64_t v81 = &v96;
      }
      else {
        uint64_t v81 = (std::string *)v76;
      }
      long long v82 = (std::string *)v95.__r_.__value_.__r.__words[0];
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v82 = &v95;
      }
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v83 = &v98;
      }
      else {
        uint64_t v83 = (std::string *)v98.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v74, v79, v80, v81, v82, v83);
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v84 = &v97;
      }
      else {
        long long v84 = (std::string *)v97.__r_.__value_.__r.__words[0];
      }
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v97.__r_.__value_.__l.__size_;
      }
      std::string::append(a4, (const std::string::value_type *)v84, size);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      sub_21686F38C((uint64_t)__p);
    }
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    sub_2167FB780((uint64_t)&v100, (void *)v100.__r_.__value_.__l.__size_);
  }
}

void sub_21686AC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v58 + 23) < 0) {
    operator delete(*(void **)v58);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_21686AE5C(std::string *a1, const std::string *a2, char *a3, unint64_t a4, size_t a5, unint64_t *a6, unint64_t a7)
{
  unint64_t v11 = (unint64_t)a3;
  if (!a5)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%-72s %15s%15s %5s %5s %5s\n", (const char *)a2, a3, "TAGNAME", "BytesIncl", "BytesExcl", "%Prnt", "% Exc", "%Totl");
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &v64;
    }
    else {
      uint64_t v14 = (std::string *)v64.__r_.__value_.__r.__words[0];
    }
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v64.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v14, size);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    uint64_t v16 = operator new(0x50uLL);
    *(void *)&long long v17 = 0x2D2D2D2D2D2D2D2DLL;
    *((void *)&v17 + 1) = 0x2D2D2D2D2D2D2D2DLL;
    *(_OWORD *)uint64_t v16 = v17;
    *((_OWORD *)v16 + 1) = v17;
    *((_OWORD *)v16 + 2) = v17;
    *((_OWORD *)v16 + 3) = v17;
    strcpy((char *)v16 + 64, "--------");
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%-72s %12s%12s %5s %5s %5s\n\n", v18, v19, v16, " --------------", " --------------", "-----", "-----", "-----");
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v20 = &v64;
    }
    else {
      unint64_t v20 = (std::string *)v64.__r_.__value_.__r.__words[0];
    }
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = v64.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v20, v21);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    operator delete(v16);
    unint64_t v11 = a2->__r_.__value_.__r.__words[0];
  }
  if (*a6 >= a7) {
    return 0;
  }
  ++*a6;
  sub_2167794AC(&__b, a5, 32);
  std::string::basic_string(&v62, a2 + 1, 0, 72 - a5, (std::allocator<char> *)&__p);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v22 = &v62;
  }
  else {
    uint64_t v22 = (std::string *)v62.__r_.__value_.__r.__words[0];
  }
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = v62.__r_.__value_.__l.__size_;
  }
  uint64_t v24 = std::string::append(&__b, (const std::string::value_type *)v22, v23);
  long long v26 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__b.__r_.__value_.__l.__data_);
  }
  int v27 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  char v28 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v27 = v64.__r_.__value_.__r.__words[1];
  }
  size_t v29 = (72 - v27);
  size_t v59 = a5;
  if ((int)v29 >= 1)
  {
    sub_2167794AC(&__b, v29, 32);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_b = &__b;
    }
    else {
      p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
    }
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = __b.__r_.__value_.__l.__size_;
    }
    std::string::append(&v64, (const std::string::value_type *)p_b, v31);
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__b.__r_.__value_.__l.__data_);
    }
    char v28 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  }
  unint64_t v32 = a4;
  if (v28 >= 0) {
    uint64_t v33 = &v64;
  }
  else {
    uint64_t v33 = (std::string *)v64.__r_.__value_.__r.__words[0];
  }
  sub_21686EFE4(a2->__r_.__value_.__r.__words[0], (const char *)v29, v25, &v62);
  int v34 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
  std::string::size_type v35 = v62.__r_.__value_.__r.__words[0];
  sub_21686EFE4(a2->__r_.__value_.__l.__size_, v36, v37, &__p);
  uint64_t v40 = &v62;
  if (v34 < 0) {
    uint64_t v40 = (std::string *)v35;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s %15s%15s ", v38, v39, v33, v40, p_p);
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = &__b;
  }
  else {
    std::string::size_type v42 = (std::string *)__b.__r_.__value_.__r.__words[0];
  }
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v43 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v43 = __b.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v42, v43);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__b.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  memset(&__b, 0, sizeof(__b));
  memset(&v62, 0, sizeof(v62));
  memset(&__p, 0, sizeof(__p));
  if (v32)
  {
    float v46 = (float)a2->__r_.__value_.__r.__words[0];
    float v47 = (float)(v46 / (float)v32) * 100.0;
    if (v47 > 0.5)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" %.0f%%", v44, v45, v47);
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__b.__r_.__value_.__l.__data_);
      }
      std::string __b = v60;
      float v46 = (float)a2->__r_.__value_.__r.__words[0];
    }
    float v48 = (float)a2->__r_.__value_.__l.__size_;
    float v49 = (float)(v48 / v46) * 100.0;
    if (v49 > 0.5)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" %.0f%%", v44, v45, v49);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      std::string v62 = v60;
      float v48 = (float)a2->__r_.__value_.__l.__size_;
    }
    float v50 = (float)(v48 / (float)v11) * 100.0;
    if (v50 > 0.5)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" %.0f%%", v44, v45, v50);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v60;
    }
  }
  if (!v59)
  {
    float v51 = (float)(100 * a2->__r_.__value_.__l.__size_) / (float)v11;
    if (v51 > 0.5)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" %.0f%%", v44, v45, v51);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v60;
    }
  }
  long long v52 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v52 = (std::string *)__b.__r_.__value_.__r.__words[0];
  }
  long long v53 = &v62;
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v53 = (std::string *)v62.__r_.__value_.__r.__words[0];
  }
  uint64_t v54 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%5s %5s %5s\n", v44, v45, v52, v53, v54);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v55 = &v60;
  }
  else {
    long long v55 = (std::string *)v60.__r_.__value_.__r.__words[0];
  }
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v56 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v56 = v60.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v55, v56);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  for (std::string::pointer i = a2[2].__r_.__value_.__l.__data_; i != (std::string::pointer)a2[2].__r_.__value_.__l.__size_; i += 72)
    sub_21686AE5C(a1, i, v11, a2->__r_.__value_.__r.__words[0], v59 + 1, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__b.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_21686B464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::CallTree::Report(uint64_t a1, void *a2)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfMallocTag::CallTree::Report(a1, a2, (uint64_t)__p);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
}

void sub_21686B5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::CallTree::Report(uint64_t a1, void *a2, uint64_t a3)
{
  sub_216779180(a2, (uint64_t)"\nTree view  ==============\n", 27);
  sub_216779180(a2, (uint64_t)"      inclusive       exclusive\n", 32);
  sub_21686BD14(a2, a1 + 24, 0, a3);
  uint64_t v95 = a1;
  pxrInternal__aapl__pxrReserved__::TfMallocTag::CallTree::GetPrettyPrintString(a1, 1, 0x186A0uLL, &v103);
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v103;
  }
  else {
    uint64_t v6 = (std::string *)v103.__r_.__value_.__r.__words[0];
  }
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v103.__r_.__value_.__l.__size_;
  }
  sub_216779180(a2, (uint64_t)v6, size);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 104);
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = (unsigned __int128)((v8 - v9) * (__int128)0x6666666666666667) >> 64;
    unint64_t v16 = (v15 >> 4) + ((unint64_t)v15 >> 63);
    if (v16 >= 0x64) {
      unint64_t v17 = 100;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v16 <= 1) {
      unint64_t v16 = 1;
    }
    int v18 = (uint64_t *)(v9 + 32);
    do
    {
      uint64_t v19 = *(v18 - 1);
      v10 += v19;
      v14 += *v18;
      if (v11 >= v17) {
        uint64_t v19 = 0;
      }
      v13 += v19;
      if (v11 >= v17) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = *v18;
      }
      v12 += v20;
      ++v11;
      v18 += 5;
    }
    while (v16 != v11);
    std::string::size_type v21 = sub_216779180(a2, (uint64_t)"\n\n\n", 3);
    uint64_t v22 = sub_216779180(v21, (uint64_t)"Captured Malloc Stacks\n", 23);
    std::string::size_type v23 = sub_216779180(v22, (uint64_t)"\n", 1);
    uint64_t v24 = sub_216779180(v23, (uint64_t)"Number of unique captured malloc stacks:          ", 50);
    sub_21686EFE4(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v95 + 104) - *(void *)(v95 + 96)) >> 3), v25, v26, &v103);
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v27 = &v103;
    }
    else {
      int v27 = (std::string *)v103.__r_.__value_.__r.__words[0];
    }
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = v103.__r_.__value_.__l.__size_;
    }
    size_t v29 = sub_216779180(v24, (uint64_t)v27, v28);
    unint64_t v30 = sub_216779180(v29, (uint64_t)"\n", 1);
    std::string::size_type v31 = sub_216779180(v30, (uint64_t)"Total allocated memory by captured mallocs:       ", 50);
    sub_21686EFE4(v10, v32, v33, &v102);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v34 = &v102;
    }
    else {
      int v34 = (std::string *)v102.__r_.__value_.__r.__words[0];
    }
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = v102.__r_.__value_.__l.__size_;
    }
    std::string::size_type v36 = sub_216779180(v31, (uint64_t)v34, v35);
    long long v37 = sub_216779180(v36, (uint64_t)"\n", 1);
    long long v38 = sub_216779180(v37, (uint64_t)"Total number of allocations by captured mallocs:  ", 50);
    sub_21686EFE4(v14, v39, v40, &v101);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v41 = &v101;
    }
    else {
      uint64_t v41 = (std::string *)v101.__r_.__value_.__r.__words[0];
    }
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v42 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v42 = v101.__r_.__value_.__l.__size_;
    }
    std::string::size_type v43 = sub_216779180(v38, (uint64_t)v41, v42);
    long long v44 = sub_216779180(v43, (uint64_t)"\n", 1);
    long long v45 = sub_216779180(v44, (uint64_t)"\n", 1);
    float v46 = sub_216779180(v45, (uint64_t)"Number of captured malloc stacks in report:       ", 50);
    sub_21686EFE4(v17, v47, v48, &v100);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v49 = &v100;
    }
    else {
      float v49 = (std::string *)v100.__r_.__value_.__r.__words[0];
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v50 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v50 = v100.__r_.__value_.__l.__size_;
    }
    float v51 = sub_216779180(v46, (uint64_t)v49, v50);
    long long v52 = sub_216779180(v51, (uint64_t)"\n", 1);
    long long v53 = sub_216779180(v52, (uint64_t)"Allocated memory by mallocs in report:            ", 50);
    sub_21686EFE4(v13, v54, v55, &v99);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v56 = &v99;
    }
    else {
      std::string::size_type v56 = (std::string *)v99.__r_.__value_.__r.__words[0];
    }
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v57 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v57 = v99.__r_.__value_.__l.__size_;
    }
    uint64_t v58 = sub_216779180(v53, (uint64_t)v56, v57);
    size_t v59 = sub_216779180(v58, (uint64_t)"\n", 1);
    std::string v60 = sub_216779180(v59, (uint64_t)"Number of allocations by mallocs in report:       ", 50);
    sub_21686EFE4(v12, v61, v62, &v98);
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v63 = &v98;
    }
    else {
      uint64_t v63 = (std::string *)v98.__r_.__value_.__r.__words[0];
    }
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v64 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v64 = v98.__r_.__value_.__l.__size_;
    }
    unint64_t v65 = sub_216779180(v60, (uint64_t)v63, v64);
    BOOL v66 = sub_216779180(v65, (uint64_t)"\n", 1);
    uint64_t v67 = sub_216779180(v66, (uint64_t)"Percentage of allocated memory covered by report: ", 50);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%.1f%%", v68, v69, (double)(unint64_t)v13 * 100.0 / (double)(unint64_t)v10);
    if ((v97 & 0x80u) == 0) {
      unint64_t v70 = __p;
    }
    else {
      unint64_t v70 = (void **)__p[0];
    }
    if ((v97 & 0x80u) == 0) {
      uint64_t v71 = v97;
    }
    else {
      uint64_t v71 = (uint64_t)__p[1];
    }
    unint64_t v72 = sub_216779180(v67, (uint64_t)v70, v71);
    sub_216779180(v72, (uint64_t)"\n\n", 2);
    if ((char)v97 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v98.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v100.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v102.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v103.__r_.__value_.__l.__data_);
      if (!v17) {
        return;
      }
    }
    else if (!v17)
    {
      return;
    }
    uint64_t v73 = 0;
    for (uint64_t i = 0; i != v17; ++i)
    {
      uint64_t v75 = *(void *)(v95 + 96);
      std::string::size_type v76 = operator new(0x68uLL);
      *(void *)&long long v77 = 0x2D2D2D2D2D2D2D2DLL;
      *((void *)&v77 + 1) = 0x2D2D2D2D2D2D2D2DLL;
      *(_OWORD *)std::string::size_type v76 = v77;
      *((_OWORD *)v76 + 1) = v77;
      *((_OWORD *)v76 + 2) = v77;
      *((_OWORD *)v76 + 3) = v77;
      *((_OWORD *)v76 + 4) = v77;
      *((_OWORD *)v76 + 5) = v77;
      strcpy((char *)v76 + 96, "----");
      uint64_t v78 = sub_216779180(a2, (uint64_t)v76, 100);
      unint64_t v79 = sub_216779180(v78, (uint64_t)"\n", 1);
      sub_216779180(v79, (uint64_t)"Captured malloc stack #", 23);
      uint64_t v80 = (void *)std::ostream::operator<<();
      uint64_t v81 = sub_216779180(v80, (uint64_t)"\n", 1);
      long long v82 = sub_216779180(v81, (uint64_t)"Size:            ", 17);
      sub_21686EFE4(*(void *)(v75 + v73 + 24), v83, v84, &v103);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v85 = &v103;
      }
      else {
        uint64_t v85 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v86 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v86 = v103.__r_.__value_.__l.__size_;
      }
      unint64_t v87 = sub_216779180(v82, (uint64_t)v85, v86);
      int64_t v88 = sub_216779180(v87, (uint64_t)"\n", 1);
      unint64_t v89 = sub_216779180(v88, (uint64_t)"Num allocations: ", 17);
      sub_21686EFE4(*(void *)(v75 + v73 + 32), v90, v91, &v102);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v92 = &v102;
      }
      else {
        long long v92 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v93 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v93 = v102.__r_.__value_.__l.__size_;
      }
      std::string v94 = sub_216779180(v89, (uint64_t)v92, v93);
      sub_216779180(v94, (uint64_t)"\n", 1);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v102.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v103.__r_.__value_.__l.__data_);
      }
      operator delete(v76);
      pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames(a2, (uint64_t *)(v75 + v73), 0);
      v73 += 40;
    }
  }
}

void sub_21686BC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (*(char *)(v46 - 89) < 0) {
    operator delete(*(void **)(v46 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_21686BD14(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)a2) {
    return;
  }
  sub_2167794AC(__b, 2 * a3, 32);
  unint64_t v10 = a3 + 1;
  if (v10 >= 2)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 1;
    do
    {
      uint64_t v13 = (void **)__b[0];
      if ((v56 & 0x80u) == 0) {
        uint64_t v13 = __b;
      }
      *((unsigned char *)v13 + v11) = 124;
      v11 += 4;
      --v12;
    }
    while (v12);
  }
  sub_21686EFE4(*(void *)a2, v8, v9, &v52);
  int v14 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
  std::string::size_type v15 = v52.__r_.__value_.__r.__words[0];
  sub_21686EFE4(*(void *)(a2 + 8), v16, v17, &v51);
  uint64_t v20 = &v52;
  if (v14 < 0) {
    uint64_t v20 = (std::string *)v15;
  }
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = &v51;
  }
  else {
    std::string::size_type v21 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%13s B %13s B %7ld samples    ", v18, v19, v20, v21, *(void *)(a2 + 16));
  if (SHIBYTE(v54) >= 0) {
    uint64_t v22 = __p;
  }
  else {
    uint64_t v22 = (void **)__p[0];
  }
  if (SHIBYTE(v54) >= 0) {
    uint64_t v23 = HIBYTE(v54);
  }
  else {
    uint64_t v23 = (uint64_t)__p[1];
  }
  sub_216779180(a1, (uint64_t)v22, v23);
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if ((v56 & 0x80u) == 0) {
    uint64_t v24 = __b;
  }
  else {
    uint64_t v24 = (void **)__b[0];
  }
  if ((v56 & 0x80u) == 0) {
    uint64_t v25 = v56;
  }
  else {
    uint64_t v25 = (uint64_t)__b[1];
  }
  long long v26 = sub_216779180(a1, (uint64_t)v24, v25);
  if (!a4) {
    goto LABEL_33;
  }
  int v27 = *(char *)(a4 + 23);
  if ((v27 & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a4 + 23)) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (!*(void *)(a4 + 8))
  {
LABEL_33:
    a4 = a2 + 24;
    LOBYTE(v27) = *(unsigned char *)(a2 + 47);
  }
LABEL_34:
  if ((v27 & 0x80u) == 0) {
    uint64_t v28 = a4;
  }
  else {
    uint64_t v28 = *(void *)a4;
  }
  if ((v27 & 0x80u) == 0) {
    uint64_t v29 = v27;
  }
  else {
    uint64_t v29 = *(void *)(a4 + 8);
  }
  unint64_t v30 = sub_216779180(v26, v28, v29);
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(void *)(*v30 - 24)));
  std::string::size_type v31 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v54 = 0;
  sub_2168265D4(__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 48);
  while (v52.__r_.__value_.__r.__words[0] != v52.__r_.__value_.__l.__size_)
  {
    uint64_t v34 = sub_21686F4F4((uint64_t *)&v52, v32, v33);
    uint64_t v35 = v34;
    std::string::size_type v36 = (char *)__p[1];
    if (__p[1] >= v54)
    {
      int64_t v38 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      if ((unint64_t)(v38 + 1) >> 61) {
        sub_21677CB10();
      }
      unint64_t v39 = (v54 - (char *)__p[0]) >> 2;
      if (v39 <= v38 + 1) {
        unint64_t v39 = v38 + 1;
      }
      if ((unint64_t)(v54 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v39;
      }
      if (v40) {
        uint64_t v41 = (char *)sub_21677CB28((uint64_t)&v54, v40);
      }
      else {
        uint64_t v41 = 0;
      }
      std::string::size_type v42 = (uint64_t *)&v41[8 * v38];
      uint64_t *v42 = v35;
      long long v37 = v42 + 1;
      long long v44 = (char *)__p[0];
      std::string::size_type v43 = (char *)__p[1];
      if (__p[1] != __p[0])
      {
        do
        {
          uint64_t v45 = *((void *)v43 - 1);
          v43 -= 8;
          *--std::string::size_type v42 = v45;
        }
        while (v43 != v44);
        std::string::size_type v43 = (char *)__p[0];
      }
      __p[0] = v42;
      __p[1] = v37;
      uint64_t v54 = &v41[8 * v40];
      if (v43) {
        operator delete(v43);
      }
    }
    else
    {
      *(void *)__p[1] = v34;
      long long v37 = v36 + 8;
    }
    __p[1] = v37;
    sub_21686F574(&v52);
  }
  unint64_t v46 = 126 - 2 * __clz(((char *)__p[1] - (char *)__p[0]) >> 3);
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_21686F5F4;
  if (__p[1] == __p[0]) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = v46;
  }
  sub_21686F768((uint64_t)__p[0], (char *)__p[1], (uint64_t (**)(uint64_t, uint64_t))&v52, v47, 1);
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  while (v52.__r_.__value_.__r.__words[0] != v52.__r_.__value_.__l.__size_)
  {
    std::string::size_type v50 = (void *)sub_21686F668((uint64_t *)&v52, v48, v49);
    sub_21686BD14(a1, *v50, v10, 0);
    sub_21686F6E8(&v52);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((char)v56 < 0) {
    operator delete(__b[0]);
  }
}

void sub_21686C0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v30 - 65) < 0) {
    operator delete(*(void **)(v30 - 88));
  }
  _Unwind_Resume(exception_object);
}

void *sub_21686C194(void *result, _DWORD *a2, char *a3)
{
  if (!a2) {
    sub_217323FEC();
  }
  *uint64_t result = a2;
  if (*a2)
  {
    v3[0] = "tf/mallocTag.cpp";
    v3[1] = "_TemporaryDisabler";
    v3[2] = 603;
    v3[3] = "pxrInternal__aapl__pxrReserved__::_TemporaryDisabler::_TemporaryDisabler(TfMallocTag::_ThreadData *)";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_tls._taggingState == _TaggingEnabled");
  }
  *a2 = 1;
  return result;
}

void sub_21686C230(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_21686C284((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_21686C284(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 40)
  {
    if (*(__int16 *)(i - 36) != -1)
    {
      int v5 = *(void **)(i - 24);
      if (v5)
      {
        *(void *)(i - 16) = v5;
        operator delete(v5);
      }
      *(_WORD *)(i - 36) = -1;
    }
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_21686C2F0(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    uint64_t v2 = *(void **)(a1 + 16);
    if (v2)
    {
      *(void *)(a1 + 24) = v2;
      operator delete(v2);
    }
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

void sub_21686C338(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    char v4 = v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)v4 - 24;
      do
      {
        uint64_t v8 = v6;
        sub_21686C338(&v8);
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        uint64_t v7 = (void *)(v6 - 48);
        v6 -= 72;
      }
      while (v7 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_21686C3C4(uint64_t a1, void **a2)
{
  char v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    int v5 = v4 - 3;
    do
    {
      uint64_t v7 = v5;
      sub_21686C338(&v7);
      if (*((char *)v5 - 1) < 0) {
        operator delete(*(v5 - 3));
      }
      uint64_t v6 = v5 - 6;
      v5 -= 9;
    }
    while (v6 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void sub_21686C438(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 48);
  sub_21686C338(&v3);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
}

uint64_t sub_21686C480(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(_DWORD *)(a1 + 8) != -1)
  {
    v5[0] = "tf/bigRWMutex.h";
    v5[1] = "AcquireWrite";
    void v5[2] = 159;
    uint64_t v5[3] = "void pxrInternal__aapl__pxrReserved__::TfBigRWMutex::ScopedLock::AcquireWrite()";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_acqState == NotAcquired");
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfBigRWMutex::_AcquireWrite(*(pxrInternal__aapl__pxrReserved__::TfBigRWMutex **)a1);
  *(_DWORD *)(a1 + 8) = -2;
  return result;
}

uint64_t sub_21686C510(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(_DWORD *)(a1 + 8) != -1)
  {
    v8[0] = "tf/bigRWMutex.h";
    v8[1] = "AcquireRead";
    _OWORD v8[2] = 152;
    void v8[3] = "void pxrInternal__aapl__pxrReserved__::TfBigRWMutex::ScopedLock::AcquireRead()";
    char v9 = 0;
    int v10 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v8, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_acqState == NotAcquired");
  }
  uint64_t result = *(void *)a1;
  unint64_t v5 = ((unint64_t)(0x779B97F4A7C55 * a1) >> 48) & 0xF;
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(result + 8));
  if (v6) {
    goto LABEL_7;
  }
  int v7 = (atomic_uint *)(*(void *)result + (v5 << 7));
  if (atomic_fetch_add(v7, 2u))
  {
    atomic_fetch_add(v7, 0xFFFFFFFE);
LABEL_7:
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfBigRWMutex::_AcquireReadContended(result, (((unint64_t)(0x779B97F4A7C55 * a1) >> 32) >> 16) & 0xF);
  }
  *(_DWORD *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_21686C5E4(uint64_t *a1, uint64_t a2, void *a3, _OWORD *a4)
{
  uint64_t v7 = (uint64_t)(a1 + 72);
  uint64_t v8 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x28);
  v11[1] = v7;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  *(void *)(v8 + 16) = *a3;
  *(_OWORD *)(v8 + 24) = *a4;
  v11[0] = 0;
  sub_21686C998(v11, v9);
  return sub_21686C698(a1, 1, (void *)(v8 + 16), 0, 0, 0, (uint64_t (*)(uint64_t, void *, uint64_t))sub_21686C990, (void *)v8);
}

uint64_t sub_21686C698(uint64_t *a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, void *, uint64_t), void *a8)
{
  unint64_t v30 = 0;
  uint64_t v13 = *a3 ^ (*a3 >> 3);
  uint64_t v14 = *a1;
  __dmb(0xBu);
  uint64_t v29 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_21686CC8C((uint64_t)&v32, (uint64_t)a1, v14 & v13, 0);
    std::string::size_type v15 = (void *)(v34 + 16);
    do
      std::string::size_type v15 = (void *)*v15;
    while ((unint64_t)v15 >= 0x40 && *a3 != v15[2]);
    if (a2) {
      break;
    }
    if (v15)
    {
      uint64_t v16 = 1;
LABEL_10:
      uint64_t v17 = (uint64_t)a8;
      if (!a5) {
        goto LABEL_46;
      }
      goto LABEL_11;
    }
    unint64_t v24 = *a1;
    __dmb(0xBu);
    if (v14 == v24 || !sub_21686CF40((uint64_t)a1, v13, v14, v24))
    {
      sub_21685C048(&v32);
      return 0;
    }
LABEL_31:
    sub_21685C048(&v32);
    uint64_t v14 = v24;
  }
  if (v15)
  {
LABEL_7:
    uint64_t v16 = 0;
    goto LABEL_10;
  }
  if (!a8) {
    a8 = (void *)a7(v29, a3, a4);
  }
  if (!v33)
  {
    char v33 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v32) & 1) == 0)
    {
      std::string::size_type v15 = (void *)(v34 + 16);
      while (1)
      {
        std::string::size_type v15 = (void *)*v15;
        if ((unint64_t)v15 < 0x40) {
          break;
        }
        if (*a3 == v15[2])
        {
          if (!v33) {
            goto LABEL_7;
          }
          uint64_t v16 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v32, 3uLL);
          char v33 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  unint64_t v24 = *a1;
  __dmb(0xBu);
  if (v14 != v24)
  {
    if (!sub_21686CF40((uint64_t)a1, v13, v14, v24)) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  unint64_t v24 = v14;
LABEL_33:
  unint64_t v30 = sub_21686C9CC((uint64_t)a1, v34, a8, v24);
  uint64_t v17 = 0;
  uint64_t v16 = 1;
  std::string::size_type v15 = a8;
  if (!a5)
  {
LABEL_46:
    sub_21685C048(&v32);
    goto LABEL_41;
  }
LABEL_11:
  if ((sub_21686CAA4(a5, v15 + 1, a6) & 1) == 0)
  {
    sched_yield();
    int v18 = 2;
    while ((sub_21686CAA4(a5, v15 + 1, a6) & 1) == 0)
    {
      sched_yield();
      BOOL v19 = v18 < 16;
      v18 *= 2;
      if (!v19)
      {
        uint64_t v20 = (atomic_ullong *)v32;
        uint64_t v32 = 0;
        if (v33)
        {
LABEL_16:
          atomic_ullong v21 = *v20;
          unint64_t v22 = *v20 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v23 = v21;
            atomic_compare_exchange_strong(v20, (unint64_t *)&v23, v22);
            if (v23 == v21) {
              break;
            }
            if (atomic_fetch_add_explicit(v20, 0, memory_order_relaxed) != v21)
            {
              sched_yield();
              goto LABEL_16;
            }
          }
        }
        else
        {
          atomic_fetch_add(v20, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v24 = *a1;
        __dmb(0xBu);
        a8 = (void *)v17;
        goto LABEL_31;
      }
    }
  }
  sub_21685C048(&v32);
  *(void *)(a5 + 16) = v15;
  *(void *)(a5 + 24) = v13;
LABEL_41:
  uint64_t v25 = (void *)v30;
  if (v30) {
    sub_21686CAF4(a1, v30, v29, 0);
  }
  if (v17) {
    tbb::internal::deallocate_via_handler_v3(v17, v25);
  }
  return v16;
}

void sub_21686C96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21686C990()
{
  return 0;
}

uint64_t *sub_21686C998(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

uint64_t sub_21686C9CC(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  unint64_t v4 = atomic_fetch_add((atomic_ullong *volatile)(a1 + 520), 1uLL) + 1;
  *a3 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = a3;
  if (v4 < a4) {
    return 0;
  }
  unint64_t v5 = a4 + 1;
  if (a4 == -1)
  {
    uint64_t v6 = -1;
  }
  else
  {
    BOOL v7 = HIDWORD(v5) != 0;
    if (HIDWORD(v5)) {
      v5 >>= 32;
    }
    uint64_t v8 = 32 * v7;
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      uint64_t v8 = (32 * v7) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v8 |= 8uLL;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v8 |= 4uLL;
    }
    if (v5 >= 4)
    {
      v5 >>= 2;
      v8 += 2;
    }
    uint64_t v6 = ((v5 >> 1) & 1) + v8;
  }
  uint64_t v9 = a1 + 8 * v6;
  uint64_t v11 = *(void *)(v9 + 8);
  int v10 = (atomic_ullong *)(v9 + 8);
  if (v11) {
    return 0;
  }
  while (1)
  {
    uint64_t v12 = 0;
    atomic_compare_exchange_strong(v10, (unint64_t *)&v12, 2uLL);
    if (!v12) {
      break;
    }
    if (atomic_fetch_add_explicit(v10, 0, memory_order_relaxed)) {
      return 0;
    }
  }
  return v6;
}

uint64_t sub_21686CAA4(uint64_t a1, atomic_ullong *this, int a3)
{
  *(unsigned char *)(a1 + 8) = a3;
  if (a3)
  {
    if (!tbb::spin_rw_mutex_v3::internal_try_acquire_writer(this)) {
      return 0;
    }
  }
  else
  {
    uint64_t result = tbb::spin_rw_mutex_v3::internal_try_acquire_reader(this);
    if (!result) {
      return result;
    }
  }
  *(void *)a1 = this;
  return 1;
}

void sub_21686CAF4(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    uint64_t v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    int v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        std::string::size_type v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    int v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    BOOL v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    uint64_t v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      uint64_t v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        void *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_21686CC7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_21686CC8C(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (int v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3) {
      sub_21686CDB8(a2, v11, a3);
    }
  }
  else
  {
    uint64_t v12 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v12;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v12);
    }
  }
  return a1;
}

void sub_21686CD54(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_21686CD68(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = sub_216851020(a2);
  return *(void *)(a1 + 8 * v4 + 8) + 24 * (a2 - ((1 << v4) & 0xFFFFFFFFFFFFFFFELL));
}

void *sub_21686CDB8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_21686CC8C(&v15, a1, v10 & a3, 0);
  uint64_t v11 = (void *)(v17 + 16);
  uint64_t v12 = *(void **)(v17 + 16);
  __dmb(0xBu);
  if ((unint64_t)v12 >= 0x40)
  {
    int v13 = (2 * v10) | 1;
    while ((((v12[2] >> 3) ^ v12[2]) & v13) == a3)
    {
      if (v16 || (char v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v15) & 1) != 0))
      {
        *uint64_t v11 = *v12;
        void *v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_24:
        uint64_t v12 = (void *)*v11;
        if (*v11 <= 0x3FuLL) {
          return sub_21685C048(&v15);
        }
      }
      else
      {
        uint64_t v11 = (void *)(v17 + 16);
        uint64_t v12 = *(void **)(v17 + 16);
        __dmb(0xBu);
        if ((unint64_t)v12 < 0x40) {
          return sub_21685C048(&v15);
        }
      }
    }
    uint64_t v11 = v12;
    goto LABEL_24;
  }
  return sub_21685C048(&v15);
}

void sub_21686CF2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_21686CF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((a4 ^ a3) & a2) == 0) {
    return 0;
  }
  uint64_t v4 = a3 + 1;
  do
  {
    BOOL v5 = (v4 & a2) == 0;
    v4 *= 2;
  }
  while (v5);
  uint64_t v6 = *(void *)(sub_21686CD68(a1, (v4 - 1) & a2) + 16);
  __dmb(0xBu);
  return v6 != 3;
}

uint64_t sub_21686CF9C(uint64_t *a1, uint64_t a2, void *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_21686C698(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, void *, uint64_t))sub_21686C990, 0);
}

BOOL sub_21686D01C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *a1;
  __dmb(0xBu);
  while (1)
  {
    sub_21686CC8C((uint64_t)v13, (uint64_t)a1, v6 & v5, 1);
    BOOL v7 = (void *)(v13[2] + 16);
    do
    {
      unsigned int v8 = v7;
      BOOL v7 = (void *)*v7;
      if (v7) {
        BOOL v9 = v7 == v4;
      }
      else {
        BOOL v9 = 1;
      }
    }
    while (!v9);
    if (v7) {
      break;
    }
    uint64_t v10 = *a1;
    __dmb(0xBu);
    if (v6 == v10 || !sub_21686CF40((uint64_t)a1, v5, v6, v10))
    {
      if (*(void *)(a2 + 16))
      {
        sub_21685C080(a2);
        *(void *)(a2 + 16) = 0;
      }
      sub_21685C048(v13);
      return v7 != 0;
    }
    sub_21685C048(v13);
    uint64_t v6 = v10;
  }
  *unsigned int v8 = *v4;
  atomic_fetch_add(a1 + 65, 0xFFFFFFFFFFFFFFFFLL);
  sub_21685C048(v13);
  if (!*(unsigned char *)(a2 + 8))
  {
    *(unsigned char *)(a2 + 8) = 1;
    tbb::spin_rw_mutex_v3::internal_upgrade(*(atomic_ullong **)a2);
  }
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }
  tbb::internal::deallocate_via_handler_v3((uint64_t)v4, v11);
  return v7 != 0;
}

void sub_21686D154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21686D16C(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(_DWORD *)(a1 + 8) != -2)
  {
    v5[0] = "tf/bigRWMutex.h";
    v5[1] = "_ReleaseWrite";
    void v5[2] = 186;
    uint64_t v5[3] = "void pxrInternal__aapl__pxrReserved__::TfBigRWMutex::ScopedLock::_ReleaseWrite()";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_acqState == WriteAcquired");
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfBigRWMutex::_ReleaseWrite(*(unsigned __int8 **)a1);
  *(_DWORD *)(a1 + 8) = -1;
  return result;
}

uint64_t sub_21686D1FC(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if ((v3 & 0x80000000) != 0)
  {
    v4[0] = "tf/bigRWMutex.h";
    v4[1] = "_ReleaseRead";
    v4[2] = 180;
    v4[3] = "void pxrInternal__aapl__pxrReserved__::TfBigRWMutex::ScopedLock::_ReleaseRead()";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_acqState >= 0");
  }
  atomic_fetch_add((atomic_uint *volatile)(**(void **)result + (v3 << 7)), 0xFFFFFFFE);
  *(_DWORD *)(result + 8) = -1;
  return result;
}

void *sub_21686D288(uint64_t *a1, char *a2)
{
  uint64_t v14 = a2;
  std::string __p = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  if (sub_21686D528(a1, 0, &v14, (uint64_t)&__p, 0, 0))
  {
    uint64_t v4 = *(void **)(v13 + 24);
    uint64_t v13 = 0;
    sub_21685C048(&__p);
  }
  else
  {
    uint64_t v13 = 0;
    sub_21685C048(&__p);
    char v5 = (uint64_t *)operator new(0x18uLL);
    sub_216779094(&__p, a2);
    sub_21686DB48((uint64_t)v5, (uint64_t)&__p);
    uint64_t v10 = v5;
    if (SHIBYTE(v13) < 0) {
      operator delete(__p);
    }
    std::string __p = 0;
    char v12 = 0;
    uint64_t v13 = 0;
    uint64_t v6 = *v5;
    uint64_t v7 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = v6;
    *(void *)(v7 + 24) = v5;
    if (sub_21686D528(a1, 1, (char **)(v7 + 16), (uint64_t)&__p, 1, (void *)v7))
    {
      uint64_t v4 = v10;
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v4 = *(void **)(v13 + 24);
    }
    uint64_t v13 = 0;
    sub_21685C048(&__p);
    unsigned int v8 = (void **)v10;
    uint64_t v10 = 0;
    if (v8) {
      sub_21686DC30((int)&v10, v8);
    }
  }
  return v4;
}

void sub_21686D3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_21686D428(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfMallo"
            "cTag::CallTree::PathNode>>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfMallocTag::Call"
            "Tree::PathNode>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_21686D4A0()
{
}

void *sub_21686D4A8(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::TfMallocTag::CallTree::PathNode>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::Tf"
            "MallocTag::CallTree::PathNode>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

uint64_t sub_21686D528(uint64_t *a1, int a2, char **a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::TfHashCString::operator()((int)&v44, *a3);
  unint64_t v12 = 0;
  uint64_t v13 = *a1;
  __dmb(0xBu);
  while (1)
  {
    sub_21686D934((uint64_t)&v44, (uint64_t)a1, v13 & v11);
    unint64_t v14 = v46 + 16;
    std::string::size_type v15 = *a3;
    do
      unint64_t v14 = *(void *)v14;
    while (v14 >= 0x40 && strcmp(v15, *(const char **)(v14 + 16)));
    if (a2) {
      break;
    }
    if (v14)
    {
      unsigned int v42 = 1;
LABEL_10:
      uint64_t v16 = (uint64_t)a6;
      if (!a4) {
        goto LABEL_56;
      }
      goto LABEL_11;
    }
    unint64_t v23 = *a1;
    __dmb(0xBu);
    if (v13 == v23 || !sub_21686CF40((uint64_t)a1, v11, v13, v23))
    {
      sub_21685C048(&v44);
      return 0;
    }
LABEL_29:
    sub_21685C048(&v44);
    uint64_t v13 = v23;
  }
  if (v14)
  {
LABEL_7:
    unsigned int v42 = 0;
    goto LABEL_10;
  }
  if (!v45)
  {
    char v45 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v44) & 1) == 0)
    {
      unint64_t v14 = v46 + 16;
      int8x16_t v24 = *a3;
      while (1)
      {
        unint64_t v14 = *(void *)v14;
        if (v14 < 0x40) {
          break;
        }
        if (!strcmp(v24, *(const char **)(v14 + 16)))
        {
          if (!v45) {
            goto LABEL_7;
          }
          unsigned int v42 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v44, 3uLL);
          char v45 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  unint64_t v23 = *a1;
  __dmb(0xBu);
  if (v13 != v23)
  {
    if (!sub_21686CF40((uint64_t)a1, v11, v13, v23)) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }
  unint64_t v23 = v13;
LABEL_31:
  unint64_t v12 = sub_21686C9CC((uint64_t)a1, v46, a6, v23);
  uint64_t v16 = 0;
  unsigned int v42 = 1;
  unint64_t v14 = (unint64_t)a6;
  if (!a4)
  {
LABEL_56:
    sub_21685C048(&v44);
    if (!v12) {
      goto LABEL_52;
    }
    goto LABEL_39;
  }
LABEL_11:
  if ((sub_21686CAA4(a4, (atomic_ullong *)(v14 + 8), a5) & 1) == 0)
  {
    sched_yield();
    int v17 = 2;
    while ((sub_21686CAA4(a4, (atomic_ullong *)(v14 + 8), a5) & 1) == 0)
    {
      sched_yield();
      BOOL v18 = v17 < 16;
      v17 *= 2;
      if (!v18)
      {
        uint64x2_t v19 = (atomic_ullong *)v44;
        long long v44 = 0;
        if (v45)
        {
LABEL_16:
          atomic_ullong v20 = *v19;
          unint64_t v21 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v22 = v20;
            atomic_compare_exchange_strong(v19, (unint64_t *)&v22, v21);
            if (v22 == v20) {
              break;
            }
            if (atomic_fetch_add_explicit(v19, 0, memory_order_relaxed) != v20)
            {
              sched_yield();
              goto LABEL_16;
            }
          }
        }
        else
        {
          atomic_fetch_add(v19, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v23 = *a1;
        __dmb(0xBu);
        a6 = (void *)v16;
        goto LABEL_29;
      }
    }
  }
  sub_21685C048(&v44);
  *(void *)(a4 + 16) = v14;
  *(void *)(a4 + 24) = v11;
  if (v12)
  {
LABEL_39:
    if (v12 < 8)
    {
      uint64_t v30 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
      unint64_t v31 = -6096;
      do
      {
        unint64_t v32 = v30 + v31;
        *(void *)(v32 + 6104) = 0;
        *(void *)(v32 + 6112) = 3;
        v31 += 24;
      }
      while (v31);
      int64x2_t v33 = (int64x2_t)xmmword_217411D20;
      uint64_t v34 = v30 - 48;
      uint64x2_t v35 = (uint64x2_t)vdupq_n_s64(7uLL);
      uint64x2_t v36 = (uint64x2_t)vdupq_n_s64(1uLL);
      int8x16_t v37 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
      int64x2_t v38 = vdupq_n_s64(2uLL);
      uint64_t v29 = 255;
      do
      {
        uint64x2_t v39 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v31), (int8x16_t)xmmword_217411D30);
        int8x16_t v40 = vandq_s8((int8x16_t)vshlq_u64(v36, (uint64x2_t)v33), v37);
        if (vmovn_s64((int64x2_t)vcgtq_u64(v35, v39)).u8[0]) {
          a1[v31 + 2] = v34 + 24 * v40.i64[0];
        }
        if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v39)).i32[1]) {
          a1[v31 + 3] = v34 + 24 * v40.i64[1];
        }
        v31 += 2;
        int64x2_t v33 = vaddq_s64(v33, v38);
      }
      while (v31 != 8);
    }
    else
    {
      uint64_t v26 = tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << v12));
      uint64_t v27 = 1 << v12;
      uint64_t v28 = (void *)(v26 + 16);
      do
      {
        *(v28 - 1) = 0;
        *uint64_t v28 = 3;
        v28 += 3;
        --v27;
      }
      while (v27);
      a1[v12 + 1] = v26;
      uint64_t v29 = (2 << v12) - 1;
    }
    __dmb(0xBu);
    *a1 = v29;
  }
LABEL_52:
  if (v16) {
    tbb::internal::deallocate_via_handler_v3(v16, v25);
  }
  return v42;
}

void sub_21686D8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8 * v11 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_21686D934(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v6 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v6 + 16);
  __dmb(0xBu);
  if (v7 == 3
    && (unsigned int v8 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v8)))
  {
    *(void *)a1 = v8;
    uint64_t v9 = *(void *)(a1 + 16);
    if (*(void *)(v9 + 16) == 3)
    {
      __dmb(0xBu);
      *(void *)(v9 + 16) = 0;
      if (a3)
      {
        unint64_t v10 = HIDWORD(a3);
        if (!HIDWORD(a3)) {
          unint64_t v10 = a3;
        }
        char v11 = 32 * (HIDWORD(a3) != 0);
        if (v10 >= 0x10000)
        {
          v10 >>= 16;
          char v11 = (32 * (HIDWORD(a3) != 0)) | 0x10;
        }
        if (v10 >= 0x100)
        {
          v10 >>= 8;
          v11 |= 8u;
        }
        if (v10 >= 0x10)
        {
          v10 >>= 4;
          v11 |= 4u;
        }
        BOOL v12 = v10 >= 4;
        if (v10 >= 4) {
          LODWORD(v10) = v10 >> 2;
        }
        unsigned int v13 = (v10 >> 1) & 1;
        if (v12) {
          v11 += 2;
        }
        char v14 = v13 + v11;
      }
      else
      {
        char v14 = -1;
      }
      uint64_t v17 = ~(-1 << v14);
      sub_21686D934(&v21, a2, v17 & a3);
      BOOL v18 = (unint64_t *)(v23 + 16);
      unint64_t v19 = *(void *)(v23 + 16);
      __dmb(0xBu);
      if (v19 >= 0x40)
      {
        uint64_t v20 = (2 * v17) | 1;
        while ((pxrInternal__aapl__pxrReserved__::TfHashCString::operator()((int)&v24, *(char **)(v19 + 16)) & v20) == a3)
        {
          if (v22 || (char v22 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v21) & 1) != 0))
          {
            unint64_t *v18 = *(void *)v19;
            *(void *)unint64_t v19 = *(void *)(v9 + 16);
            *(void *)(v9 + 16) = v19;
LABEL_29:
            unint64_t v19 = *v18;
            if (*v18 <= 0x3F) {
              goto LABEL_32;
            }
          }
          else
          {
            BOOL v18 = (unint64_t *)(v23 + 16);
            unint64_t v19 = *(void *)(v23 + 16);
            __dmb(0xBu);
            if (v19 < 0x40) {
              goto LABEL_32;
            }
          }
        }
        BOOL v18 = (unint64_t *)v19;
        goto LABEL_29;
      }
LABEL_32:
      sub_21685C048(&v21);
    }
  }
  else
  {
    std::string::size_type v15 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = 0;
    *(void *)a1 = v15;
    tbb::spin_rw_mutex_v3::internal_acquire_reader(v15);
  }
  return a1;
}

void sub_21686DB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21685C048(&a9);
  sub_21685C048(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_21686DB48(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    char v4 = (const char *)a2;
  }
  else {
    char v4 = *(const char **)a2;
  }
  size_t v5 = strlen(v4) + 1;
  unint64_t v6 = operator new[](v5);
  bzero(v6, v5);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    unsigned int v8 = (const char *)a2;
  }
  else {
    unsigned int v8 = *(const char **)a2;
  }
  int v10 = pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match((pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *)(qword_26798E3C0 + 1792), v8, v7);
  if (*(char *)(a2 + 23) >= 0) {
    char v11 = (const char *)a2;
  }
  else {
    char v11 = *(const char **)a2;
  }
  int v12 = pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match((pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *)(qword_26798E3C0 + 1816), v11, v9);
  if (v10) {
    int v13 = 2;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a1 + 16) = v13 | v12;
  if (*(char *)(a2 + 23) >= 0) {
    char v14 = (const char *)a2;
  }
  else {
    char v14 = *(const char **)a2;
  }
  strcpy(*(char **)a1, v14);
  return a1;
}

void sub_21686DC14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  void *v1 = 0;
  if (v3) {
    operator delete[](v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21686DC30(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v3 = *__p;
    *std::string __p = 0;
    if (v3) {
      operator delete[](v3);
    }
    operator delete(__p);
  }
}

double sub_21686DC7C(pxrInternal__aapl__pxrReserved__::TfBigRWMutex *a1)
{
  uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfBigRWMutex::TfBigRWMutex(a1);
  uint64_t v2 = (_OWORD *)((char *)v1 + 568);
  *((void *)v1 + 2) = 0;
  *((void *)v1 + 3) = 0;
  uint64_t v3 = 576;
  *((void *)v1 + 4) = 0;
  do
  {
    *(void *)((char *)v1 + v3) = 0;
    v3 += 24;
  }
  while (v3 != 624);
  *((_OWORD *)v1 + 33) = 0u;
  *((_OWORD *)v1 + 34) = 0u;
  *((_OWORD *)v1 + 31) = 0u;
  *((_OWORD *)v1 + 32) = 0u;
  *((_OWORD *)v1 + 29) = 0u;
  *((_OWORD *)v1 + 30) = 0u;
  *((_OWORD *)v1 + 27) = 0u;
  *((_OWORD *)v1 + 28) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  *((_OWORD *)v1 + 26) = 0u;
  *((_OWORD *)v1 + 23) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 21) = 0u;
  *((_OWORD *)v1 + 22) = 0u;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 20) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 18) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  __dmb(0xBu);
  *((void *)v1 + 5) = 0;
  __dmb(0xBu);
  *((void *)v1 + 70) = 0;
  *uint64_t v2 = 0u;
  *(_OWORD *)((char *)v1 + 584) = 0u;
  *(_OWORD *)((char *)v1 + 600) = 0u;
  *((void *)v1 + 6) = v2;
  __dmb(0xBu);
  char v4 = (_OWORD *)((char *)v1 + 1152);
  *((void *)v1 + 5) = 1;
  for (uint64_t i = 1160; i != 1208; i += 24)
    *(void *)((char *)v1 + i) = 0;
  *(_OWORD *)((char *)v1 + 872) = 0u;
  *(_OWORD *)((char *)v1 + 856) = 0u;
  *(_OWORD *)((char *)v1 + 840) = 0u;
  *(_OWORD *)((char *)v1 + 824) = 0u;
  *(_OWORD *)((char *)v1 + 808) = 0u;
  *(_OWORD *)((char *)v1 + 792) = 0u;
  *(_OWORD *)((char *)v1 + 776) = 0u;
  *(_OWORD *)((char *)v1 + 760) = 0u;
  *(_OWORD *)((char *)v1 + 744) = 0u;
  *(_OWORD *)((char *)v1 + 728) = 0u;
  *(_OWORD *)((char *)v1 + 712) = 0u;
  *(_OWORD *)((char *)v1 + 696) = 0u;
  *(_OWORD *)((char *)v1 + 680) = 0u;
  *(_OWORD *)((char *)v1 + 664) = 0u;
  *(_OWORD *)((char *)v1 + 648) = 0u;
  *(_OWORD *)((char *)v1 + 632) = 0u;
  *(_OWORD *)((char *)v1 + 1112) = 0u;
  *(_OWORD *)((char *)v1 + 1128) = 0u;
  *(_OWORD *)((char *)v1 + 1080) = 0u;
  *(_OWORD *)((char *)v1 + 1096) = 0u;
  *(_OWORD *)((char *)v1 + 1048) = 0u;
  *(_OWORD *)((char *)v1 + 1064) = 0u;
  *(_OWORD *)((char *)v1 + 1016) = 0u;
  *(_OWORD *)((char *)v1 + 1032) = 0u;
  *(_OWORD *)((char *)v1 + 984) = 0u;
  *(_OWORD *)((char *)v1 + 1000) = 0u;
  *(_OWORD *)((char *)v1 + 952) = 0u;
  *(_OWORD *)((char *)v1 + 968) = 0u;
  *(_OWORD *)((char *)v1 + 920) = 0u;
  *(_OWORD *)((char *)v1 + 936) = 0u;
  *(_OWORD *)((char *)v1 + 888) = 0u;
  *(_OWORD *)((char *)v1 + 904) = 0u;
  __dmb(0xBu);
  *((void *)v1 + 78) = 0;
  __dmb(0xBu);
  *((void *)v1 + 143) = 0;
  *char v4 = 0u;
  *((_OWORD *)v1 + 73) = 0u;
  *((_OWORD *)v1 + 74) = 0u;
  *((void *)v1 + 79) = v4;
  __dmb(0xBu);
  unint64_t v6 = (_OWORD *)((char *)v1 + 1736);
  *((void *)v1 + 78) = 1;
  for (uint64_t j = 1744; j != 1792; j += 24)
    *(void *)((char *)v1 + j) = 0;
  *((_OWORD *)v1 + 107) = 0u;
  *((_OWORD *)v1 + 106) = 0u;
  *((_OWORD *)v1 + 105) = 0u;
  *((_OWORD *)v1 + 104) = 0u;
  *((_OWORD *)v1 + 103) = 0u;
  *((_OWORD *)v1 + 102) = 0u;
  *((_OWORD *)v1 + 101) = 0u;
  *((_OWORD *)v1 + 100) = 0u;
  *((_OWORD *)v1 + 99) = 0u;
  *((_OWORD *)v1 + 98) = 0u;
  *((_OWORD *)v1 + 97) = 0u;
  *((_OWORD *)v1 + 96) = 0u;
  *((_OWORD *)v1 + 95) = 0u;
  *((_OWORD *)v1 + 94) = 0u;
  *((_OWORD *)v1 + 93) = 0u;
  *((_OWORD *)v1 + 92) = 0u;
  *((_OWORD *)v1 + 91) = 0u;
  *((_OWORD *)v1 + 90) = 0u;
  *((_OWORD *)v1 + 89) = 0u;
  *((_OWORD *)v1 + 88) = 0u;
  *((_OWORD *)v1 + 87) = 0u;
  *((_OWORD *)v1 + 86) = 0u;
  *((_OWORD *)v1 + 85) = 0u;
  *((_OWORD *)v1 + 84) = 0u;
  *((_OWORD *)v1 + 83) = 0u;
  *((_OWORD *)v1 + 82) = 0u;
  *((_OWORD *)v1 + 81) = 0u;
  *((_OWORD *)v1 + 80) = 0u;
  *((_OWORD *)v1 + 79) = 0u;
  *((_OWORD *)v1 + 78) = 0u;
  *((_OWORD *)v1 + 77) = 0u;
  *((_OWORD *)v1 + 76) = 0u;
  __dmb(0xBu);
  *((void *)v1 + 151) = 0;
  __dmb(0xBu);
  *((void *)v1 + 216) = 0;
  *unint64_t v6 = 0u;
  *(_OWORD *)((char *)v1 + 1752) = 0u;
  *(_OWORD *)((char *)v1 + 1768) = 0u;
  *((void *)v1 + 152) = v6;
  __dmb(0xBu);
  *((void *)v1 + 151) = 1;
  unsigned int v8 = (_OWORD *)((char *)v1 + 2368);
  *((_OWORD *)v1 + 112) = 0u;
  *((_OWORD *)v1 + 113) = 0u;
  uint64_t v9 = 2376;
  *((_OWORD *)v1 + 114) = 0u;
  do
  {
    *(void *)((char *)v1 + v9) = 0;
    v9 += 24;
  }
  while (v9 != 2424);
  double result = 0.0;
  *(_OWORD *)((char *)v1 + 2088) = 0u;
  *(_OWORD *)((char *)v1 + 2072) = 0u;
  *(_OWORD *)((char *)v1 + 2056) = 0u;
  *(_OWORD *)((char *)v1 + 2040) = 0u;
  *(_OWORD *)((char *)v1 + 2024) = 0u;
  *(_OWORD *)((char *)v1 + 2008) = 0u;
  *(_OWORD *)((char *)v1 + 1992) = 0u;
  *(_OWORD *)((char *)v1 + 1976) = 0u;
  *(_OWORD *)((char *)v1 + 1960) = 0u;
  *(_OWORD *)((char *)v1 + 1944) = 0u;
  *(_OWORD *)((char *)v1 + 1928) = 0u;
  *(_OWORD *)((char *)v1 + 1912) = 0u;
  *(_OWORD *)((char *)v1 + 1896) = 0u;
  *(_OWORD *)((char *)v1 + 1880) = 0u;
  *(_OWORD *)((char *)v1 + 1864) = 0u;
  *(_OWORD *)((char *)v1 + 1848) = 0u;
  *(_OWORD *)((char *)v1 + 2328) = 0u;
  *(_OWORD *)((char *)v1 + 2344) = 0u;
  *(_OWORD *)((char *)v1 + 2296) = 0u;
  *(_OWORD *)((char *)v1 + 2312) = 0u;
  *(_OWORD *)((char *)v1 + 2264) = 0u;
  *(_OWORD *)((char *)v1 + 2280) = 0u;
  *(_OWORD *)((char *)v1 + 2232) = 0u;
  *(_OWORD *)((char *)v1 + 2248) = 0u;
  *(_OWORD *)((char *)v1 + 2200) = 0u;
  *(_OWORD *)((char *)v1 + 2216) = 0u;
  *(_OWORD *)((char *)v1 + 2168) = 0u;
  *(_OWORD *)((char *)v1 + 2184) = 0u;
  *(_OWORD *)((char *)v1 + 2136) = 0u;
  *(_OWORD *)((char *)v1 + 2152) = 0u;
  *(_OWORD *)((char *)v1 + 2104) = 0u;
  *(_OWORD *)((char *)v1 + 2120) = 0u;
  __dmb(0xBu);
  *((void *)v1 + 230) = 0;
  __dmb(0xBu);
  *((void *)v1 + 295) = 0;
  *unsigned int v8 = 0u;
  *((_OWORD *)v1 + 149) = 0u;
  *((_OWORD *)v1 + 150) = 0u;
  *((void *)v1 + 231) = v8;
  __dmb(0xBu);
  *((void *)v1 + 230) = 1;
  return result;
}

uint64_t sub_21686DF40(uint64_t *a1, int a2, void *a3, uint64_t a4, int a5, void *a6)
{
  unint64_t v11 = 0;
  uint64_t v12 = bswap64(0x9E3779B97F4A7C55 * (a3[1] + ((a3[1] + *a3 + (a3[1] + *a3) * (a3[1] + *a3)) >> 1)));
  uint64_t v13 = *a1;
  __dmb(0xBu);
  while (1)
  {
    sub_21686E364((uint64_t)&v44, (uint64_t)a1, v13 & v12);
    char v14 = (void *)(v46 + 16);
    do
    {
      char v14 = (void *)*v14;
      if ((unint64_t)v14 < 0x40) {
        break;
      }
    }
    while (*a3 != v14[2] || a3[1] != v14[3]);
    if (a2) {
      break;
    }
    if (v14)
    {
      unsigned int v42 = 1;
LABEL_14:
      uint64_t v16 = (uint64_t)a6;
      if (!a4) {
        goto LABEL_64;
      }
      goto LABEL_15;
    }
    unint64_t v23 = *a1;
    __dmb(0xBu);
    if (v13 == v23 || !sub_21686CF40((uint64_t)a1, v12, v13, v23))
    {
      sub_21685C048(&v44);
      return 0;
    }
LABEL_33:
    sub_21685C048(&v44);
    uint64_t v13 = v23;
  }
  if (v14)
  {
LABEL_11:
    unsigned int v42 = 0;
    goto LABEL_14;
  }
  if (!v45)
  {
    char v45 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v44) & 1) == 0)
    {
      char v14 = (void *)(v46 + 16);
      while (1)
      {
        char v14 = (void *)*v14;
        if ((unint64_t)v14 < 0x40) {
          break;
        }
        if (*a3 == v14[2] && a3[1] == v14[3])
        {
          if (!v45) {
            goto LABEL_11;
          }
          unsigned int v42 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v44, 3uLL);
          char v45 = 0;
          goto LABEL_14;
        }
      }
    }
  }
  unint64_t v23 = *a1;
  __dmb(0xBu);
  if (v13 != v23)
  {
    if (!sub_21686CF40((uint64_t)a1, v12, v13, v23)) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  unint64_t v23 = v13;
LABEL_35:
  unint64_t v11 = sub_21686C9CC((uint64_t)a1, v46, a6, v23);
  uint64_t v16 = 0;
  unsigned int v42 = 1;
  char v14 = a6;
  if (!a4)
  {
LABEL_64:
    sub_21685C048(&v44);
    if (!v11) {
      goto LABEL_60;
    }
    goto LABEL_47;
  }
LABEL_15:
  if ((sub_21686CAA4(a4, v14 + 1, a5) & 1) == 0)
  {
    sched_yield();
    int v17 = 2;
    while ((sub_21686CAA4(a4, v14 + 1, a5) & 1) == 0)
    {
      sched_yield();
      BOOL v18 = v17 < 16;
      v17 *= 2;
      if (!v18)
      {
        unint64_t v19 = (atomic_ullong *)v44;
        long long v44 = 0;
        if (v45)
        {
LABEL_20:
          atomic_ullong v20 = *v19;
          unint64_t v21 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v22 = v20;
            atomic_compare_exchange_strong(v19, (unint64_t *)&v22, v21);
            if (v22 == v20) {
              break;
            }
            if (atomic_fetch_add_explicit(v19, 0, memory_order_relaxed) != v20)
            {
              sched_yield();
              goto LABEL_20;
            }
          }
        }
        else
        {
          atomic_fetch_add(v19, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v23 = *a1;
        __dmb(0xBu);
        a6 = (void *)v16;
        goto LABEL_33;
      }
    }
  }
  sub_21685C048(&v44);
  *(void *)(a4 + 16) = v14;
  *(void *)(a4 + 24) = v12;
  if (v11)
  {
LABEL_47:
    if (v11 < 8)
    {
      uint64_t v30 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
      unint64_t v31 = -6096;
      do
      {
        unint64_t v32 = v30 + v31;
        *(void *)(v32 + 6104) = 0;
        *(void *)(v32 + 6112) = 3;
        v31 += 24;
      }
      while (v31);
      int64x2_t v33 = (int64x2_t)xmmword_217411D20;
      uint64_t v34 = v30 - 48;
      uint64x2_t v35 = (uint64x2_t)vdupq_n_s64(7uLL);
      uint64x2_t v36 = (uint64x2_t)vdupq_n_s64(1uLL);
      int8x16_t v37 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
      int64x2_t v38 = vdupq_n_s64(2uLL);
      uint64_t v29 = 255;
      do
      {
        uint64x2_t v39 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v31), (int8x16_t)xmmword_217411D30);
        int8x16_t v40 = vandq_s8((int8x16_t)vshlq_u64(v36, (uint64x2_t)v33), v37);
        if (vmovn_s64((int64x2_t)vcgtq_u64(v35, v39)).u8[0]) {
          a1[v31 + 2] = v34 + 24 * v40.i64[0];
        }
        if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v39)).i32[1]) {
          a1[v31 + 3] = v34 + 24 * v40.i64[1];
        }
        v31 += 2;
        int64x2_t v33 = vaddq_s64(v33, v38);
      }
      while (v31 != 8);
    }
    else
    {
      uint64_t v26 = tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << v11));
      uint64_t v27 = 1 << v11;
      uint64_t v28 = (void *)(v26 + 16);
      do
      {
        *(v28 - 1) = 0;
        *uint64_t v28 = 3;
        v28 += 3;
        --v27;
      }
      while (v27);
      a1[v11 + 1] = v26;
      uint64_t v29 = (2 << v11) - 1;
    }
    __dmb(0xBu);
    *a1 = v29;
  }
LABEL_60:
  if (v16) {
    tbb::internal::deallocate_via_handler_v3(v16, v25);
  }
  return v42;
}

void sub_21686E32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8 * v11 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_21686E364(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v6 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v6 + 16);
  __dmb(0xBu);
  if (v7 == 3
    && (unsigned int v8 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v8)))
  {
    *(void *)a1 = v8;
    uint64_t v9 = *(void *)(a1 + 16);
    if (*(void *)(v9 + 16) == 3)
    {
      __dmb(0xBu);
      *(void *)(v9 + 16) = 0;
      if (a3)
      {
        unint64_t v10 = HIDWORD(a3);
        if (!HIDWORD(a3)) {
          unint64_t v10 = a3;
        }
        char v11 = 32 * (HIDWORD(a3) != 0);
        if (v10 >= 0x10000)
        {
          v10 >>= 16;
          char v11 = (32 * (HIDWORD(a3) != 0)) | 0x10;
        }
        if (v10 >= 0x100)
        {
          v10 >>= 8;
          v11 |= 8u;
        }
        if (v10 >= 0x10)
        {
          v10 >>= 4;
          v11 |= 4u;
        }
        BOOL v12 = v10 >= 4;
        if (v10 >= 4) {
          LODWORD(v10) = v10 >> 2;
        }
        unsigned int v13 = (v10 >> 1) & 1;
        if (v12) {
          v11 += 2;
        }
        char v14 = v13 + v11;
      }
      else
      {
        char v14 = -1;
      }
      uint64_t v17 = ~(-1 << v14);
      sub_21686E364(&v21, a2, v17 & a3);
      BOOL v18 = (void *)(v23 + 16);
      unint64_t v19 = *(void **)(v23 + 16);
      __dmb(0xBu);
      if ((unint64_t)v19 >= 0x40)
      {
        uint64_t v20 = (2 * v17) | 1;
        while ((bswap64(0x9E3779B97F4A7C55 * (v19[3]
                                               + ((v19[3] + v19[2] + (v19[3] + v19[2]) * (v19[3] + v19[2])) >> 1))) & v20) == a3)
        {
          if (v22 || (char v22 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v21) & 1) != 0))
          {
            void *v18 = *v19;
            *unint64_t v19 = *(void *)(v9 + 16);
            *(void *)(v9 + 16) = v19;
LABEL_29:
            unint64_t v19 = (void *)*v18;
            if (*v18 <= 0x3FuLL) {
              goto LABEL_32;
            }
          }
          else
          {
            BOOL v18 = (void *)(v23 + 16);
            unint64_t v19 = *(void **)(v23 + 16);
            __dmb(0xBu);
            if ((unint64_t)v19 < 0x40) {
              goto LABEL_32;
            }
          }
        }
        BOOL v18 = v19;
        goto LABEL_29;
      }
LABEL_32:
      sub_21685C048(&v21);
    }
  }
  else
  {
    std::string::size_type v15 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = 0;
    *(void *)a1 = v15;
    tbb::spin_rw_mutex_v3::internal_acquire_reader(v15);
  }
  return a1;
}

void sub_21686E570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  sub_21685C048(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_21686E594(uint64_t *a1, void *a2, void *a3)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * *a2);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[4];
  uint64_t v8 = v5 & *a1;
  if (*(__int16 *)(v7 + 16 * v8 + 4) < 0)
  {
    LOWORD(v9) = 0;
LABEL_7:
    char v11 = sub_21686E704((uint64_t)a1);
    uint64_t v12 = a1[4];
    if (v11)
    {
      uint64_t v8 = v5 & *a1;
      int v13 = *(__int16 *)(v12 + 16 * v8 + 4);
      if (v13 < 0)
      {
        LOWORD(v9) = 0;
      }
      else
      {
        LOWORD(v9) = 0;
        do
        {
          int v9 = (__int16)(v9 + 1);
          uint64_t v8 = (v8 + 1) & *a1;
          int v13 = *(__int16 *)(v12 + 16 * v8 + 4);
        }
        while (v9 <= v13);
      }
      int v14 = (unsigned __int16)v13;
    }
    else
    {
      int v14 = *(unsigned __int16 *)(v12 + 16 * v8 + 4);
    }
    if (v14 == 0xFFFF)
    {
      uint64_t v15 = v12 + 16 * v8;
      *(void *)(v15 + 8) = *a3;
      *(_DWORD *)uint64_t v15 = v5;
      *(_WORD *)(v15 + 4) = v9;
    }
    else
    {
      uint64_t v16 = *a3;
      sub_21686EDBC(a1, v8, v9, v5, &v16);
    }
    ++a1[6];
    return a1[4] + 16 * v8;
  }
  else
  {
    LOWORD(v9) = 0;
    while (1)
    {
      uint64_t result = v7 + 16 * v8;
      if (*(void *)(result + 8) == *a2) {
        break;
      }
      int v9 = (__int16)(v9 + 1);
      uint64_t v8 = (v8 + 1) & v6;
      if (v9 > *(__int16 *)(v7 + 16 * v8 + 4)) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t sub_21686E704(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || (unint64_t v2 = *(void *)(a1 + 48), v2 >= *(void *)(a1 + 56)))
  {
    unint64_t v6 = sub_21686E8DC((void *)a1);
    sub_21686E7CC(a1, v6);
    *(unsigned char *)(a1 + 72) = 0;
    return 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = 0;
    float v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      unint64_t v4 = *(void *)(a1 + 40);
      float v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        float v8 = *(float *)(a1 + 68);
        unint64_t v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        unint64_t v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        sub_21686E7CC(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_21686E7CC(uint64_t a1, unint64_t a2)
{
  sub_21686EA78((uint64_t)&v8, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  float v3 = *(uint64_t **)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 16);
  if (v3 != v4)
  {
    float v5 = v3 + 1;
    unint64_t v6 = (unint64_t)(v9[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        if (v6) {
          unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *v5);
        }
        else {
          unint64_t v7 = *((unsigned int *)v5 - 2);
        }
        sub_21686E968(&v8, v8 & v7, 0, v7, v5);
      }
      v5 += 2;
    }
    while (v5 - 1 != v4);
  }
  void v9[5] = *(void *)(a1 + 48);
  sub_21686E9D4(&v8, (uint64_t *)a1);
  unint64_t v10 = (void **)v9;
  sub_21686ED60(&v10);
}

void sub_21686E8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 56) = &a11;
  sub_21686ED60((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_21686E8DC(void *a1)
{
  if ((unint64_t)(*a1 - 0x4000000000000000) <= 0xBFFFFFFFFFFFFFFELL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The hash table exceeds its maximum size.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  return 2 * *a1 + 2;
}

void sub_21686E954(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_21686E968(void *result, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  while (1)
  {
    uint64_t v5 = result[4] + 16 * a2;
    unint64_t v6 = (_WORD *)(v5 + 4);
    int v7 = *(__int16 *)(v5 + 4);
    if (v7 >= a3) {
      goto LABEL_4;
    }
    uint64_t v8 = (uint64_t *)(v5 + 8);
    uint64_t v9 = *a5;
    if (v7 == -1) {
      break;
    }
    *a5 = *v8;
    *uint64_t v8 = v9;
    *unint64_t v6 = a3;
    int v10 = *(_DWORD *)v5;
    *(_DWORD *)uint64_t v5 = a4;
    a3 = v7;
    a4 = v10;
LABEL_4:
    ++a3;
    a2 = *result & (a2 + 1);
  }
  *uint64_t v8 = v9;
  *(_DWORD *)uint64_t v5 = a4;
  *unint64_t v6 = a3;
  return result;
}

float sub_21686E9D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *a2 = v2;
  a2[1] = v3;
  uint64_t v5 = a1[2];
  a1[2] = a2[2];
  a2[2] = v5;
  uint64_t v6 = a1[3];
  a1[3] = a2[3];
  a2[3] = v6;
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  a2[4] = v7;
  a2[5] = v8;
  uint64_t v10 = a1[6];
  a1[6] = a2[6];
  a2[6] = v10;
  uint64_t v11 = a1[7];
  a1[7] = a2[7];
  a2[7] = v11;
  int v12 = *((_DWORD *)a1 + 16);
  *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  float result = *((float *)a1 + 17);
  *((_DWORD *)a1 + 17) = *((_DWORD *)a2 + 17);
  *((float *)a2 + 17) = result;
  LOBYTE(v11) = *((unsigned char *)a1 + 72);
  *((unsigned char *)a1 + 72) = *((unsigned char *)a2 + 72);
  *((unsigned char *)a2 + 72) = v11;
  LOBYTE(v11) = *((unsigned char *)a1 + 73);
  *((unsigned char *)a1 + 73) = *((unsigned char *)a2 + 73);
  *((unsigned char *)a2 + 73) = v11;
  return result;
}

uint64_t sub_21686EA78(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v12 = a2;
  sub_21686EB98((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >> 60)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  sub_21686ECD8((void *)(a1 + 8), v12);
  uint64_t v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16)) {
    uint64_t v7 = sub_21686EC54();
  }
  unint64_t v8 = v12;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8) {
    *(unsigned char *)(*(void *)(a1 + 16) - 10) = 1;
  }
  float v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(void *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_21686EB84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_21686EB98(unint64_t *result, uint64_t *a2)
{
  unint64_t v2 = *a2;
  if ((unint64_t)*a2 >= 0x8000000000000001)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The hash table exceeds its maximum size.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  if (v2)
  {
    unint64_t v3 = v2 - 1;
    if ((v2 & (v2 - 1)) != 0)
    {
      unint64_t v4 = 1;
      do
      {
        v3 |= v3 >> v4;
        BOOL v5 = v4 >= 0x20;
        v4 *= 2;
      }
      while (!v5);
      unint64_t v2 = v3 + 1;
    }
    *a2 = v2;
    unint64_t v6 = v2 - 1;
  }
  else
  {
    unint64_t v6 = 0;
  }
  *float result = v6;
  return result;
}

void sub_21686EC40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_21686EC54()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798B030, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798B030))
  {
    dword_26798B020 = 0;
    word_26798B024 = -1;
    byte_26798B026 = 1;
    __cxa_atexit((void (*)(void *))sub_21686EDA4, &dword_26798B020, &dword_216758000);
    __cxa_guard_release(&qword_26798B030);
  }
  return &dword_26798B020;
}

void *sub_21686ECD8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21682BF78(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 16 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(unsigned char *)(v4 + 6) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_21686ED4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_21686ED60(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    for (uint64_t i = (char *)v1[1]; i != v2; i -= 16)
    {
      if (*((__int16 *)i - 6) != -1) {
        *((_WORD *)i - 6) = -1;
      }
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_21686EDA4(uint64_t result)
{
  if (*(__int16 *)(result + 4) != -1) {
    *(_WORD *)(result + 4) = -1;
  }
  return result;
}

uint64_t *sub_21686EDBC(uint64_t *result, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5 = result[4] + 16 * a2;
  uint64_t v6 = *a5;
  *a5 = *(void *)(v5 + 8);
  *(void *)(v5 + 8) = v6;
  int v7 = *(unsigned __int16 *)(v5 + 4);
  *(_WORD *)(v5 + 4) = a3;
  int v8 = *(_DWORD *)v5;
  *(_DWORD *)uint64_t v5 = a4;
  uint64_t v9 = *result;
  uint64_t v10 = (a2 + 1) & *result;
  int v11 = v7 + 1;
  uint64_t v12 = result[4];
  int v13 = (int *)(v12 + 16 * v10);
  int v14 = v13 + 1;
  for (int i = *((unsigned __int16 *)v13 + 2); i != 0xFFFF; int i = *((unsigned __int16 *)v13 + 2))
  {
    if ((__int16)v11 <= (__int16)i)
    {
      int i = v11;
    }
    else
    {
      if ((__int16)v11 >= 4096) {
        *((unsigned char *)result + 72) = 1;
      }
      uint64_t v16 = v12 + 16 * v10;
      uint64_t v17 = *a5;
      *a5 = *(void *)(v16 + 8);
      *(void *)(v16 + 8) = v17;
      *int v14 = v11;
      int v18 = *v13;
      int *v13 = v8;
      uint64_t v12 = result[4];
      int v8 = v18;
    }
    uint64_t v10 = (v10 + 1) & v9;
    int v11 = i + 1;
    int v13 = (int *)(v12 + 16 * v10);
    int v14 = v13 + 1;
  }
  *(void *)(v12 + 16 * v10 + 8) = *a5;
  int *v13 = v8;
  *int v14 = v11;
  return result;
}

uint64_t sub_21686EE94(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = sub_21686EF88((void *)a1, a2, a3);
  if (*(void *)(a1 + 32) + 16 * *(void *)(a1 + 40) == v4) {
    return 0;
  }
  sub_21686EEE4((uint64_t *)a1, v4);
  uint64_t result = 1;
  *(unsigned char *)(a1 + 73) = 1;
  return result;
}

uint64_t *sub_21686EEE4(uint64_t *result, uint64_t a2)
{
  if (*(__int16 *)(a2 + 4) != -1) {
    *(_WORD *)(a2 + 4) = -1;
  }
  --result[6];
  uint64_t v2 = result[4];
  uint64_t v3 = (a2 - v2) >> 4;
  uint64_t v4 = *result;
  uint64_t v5 = (v3 + 1) & *result;
  int v6 = *(__int16 *)(v2 + 16 * v5 + 4);
  if (v6 >= 1)
  {
    do
    {
      uint64_t v7 = v2 + 16 * v3;
      uint64_t v3 = v5;
      int v8 = (int *)(v2 + 16 * v5);
      __int16 v9 = v6 - 1;
      int v10 = *v8;
      *(void *)(v7 + 8) = *((void *)v8 + 1);
      *(_DWORD *)uint64_t v7 = v10;
      *(_WORD *)(v7 + 4) = v9;
      uint64_t v2 = result[4];
      uint64_t v11 = v2 + 16 * v3;
      int v13 = *(__int16 *)(v11 + 4);
      uint64_t v12 = (_WORD *)(v11 + 4);
      if (v13 != -1) {
        _WORD *v12 = -1;
      }
      uint64_t v5 = (v3 + 1) & v4;
      int v6 = *(__int16 *)(v2 + 16 * v5 + 4);
    }
    while (v6 > 0);
  }
  return result;
}

uint64_t sub_21686EF88(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = *a1 & a3;
  if (*(__int16 *)(v3 + 16 * v4 + 4) < 0)
  {
LABEL_5:
    uint64_t v4 = a1[5];
  }
  else
  {
    LOWORD(v5) = 0;
    while (*(void *)(v3 + 16 * v4 + 8) != *a2)
    {
      int v5 = (__int16)(v5 + 1);
      uint64_t v4 = (v4 + 1) & *a1;
      if (v5 > *(__int16 *)(v3 + 16 * v4 + 4)) {
        goto LABEL_5;
      }
    }
  }
  return v3 + 16 * v4;
}

void sub_21686EFE4(uint64_t a1@<X0>, const char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%ld", a2, a3, a1);
  if ((v16 & 0x80u) == 0) {
    unint64_t v7 = v16;
  }
  else {
    unint64_t v7 = v15;
  }
  if ((v16 & 0x80u) == 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  uint64_t v12 = p_p;
  int v13 = &p_p[v7];
  while (v12 != v13)
  {
    unint64_t v9 = v16;
    if ((v16 & 0x80u) != 0) {
      unint64_t v9 = v15;
    }
    if (v7 % 3) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = v7 >= v9;
    }
    if (!v10) {
      std::string::push_back(a4, 44);
    }
    uint64_t v11 = (std::string::value_type *)sub_21686F110((uint64_t *)&v12, v5, v6);
    std::string::push_back(a4, *v11);
    --v7;
    sub_21686F190(&v12);
  }
  if ((char)v16 < 0) {
    operator delete(__p);
  }
}

void sub_21686F0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21686F110(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::string>::operator*() [T = std::string, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_21686F188()
{
}

void *sub_21686F190(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::string>::operator++() [T = std::st"
            "ring, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    ++*a1;
  }
  return a1;
}

void *sub_21686F210(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fMallocTag::CallTree::CallSite>>::operator->() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TfMa"
            "llocTag::CallTree::CallSite>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_21686F28C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfMallocTag::CallTree::CallSite>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrRe"
            "served__::TfMallocTag::CallTree::CallSite>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

uint64_t sub_21686F30C(uint64_t result, uint64_t a2, char *a3)
{
  if (*(void *)(result + 8) == *(void *)(result + 24))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<unsigned long, const std::string *>, true>::"
            "operator->() [T = std::map<unsigned long, const std::string *>, Reverse = true]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_21686F38C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 == *(void **)(a1 + 24))
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<unsigned long, const std::stri"
            "ng *>, true>::operator++() [T = std::map<unsigned long, const std::string *>, Reverse = true]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)*v2;
    if (*v2)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)v3[1];
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (v5);
    }
    *(void *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t *sub_21686F438(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  char v6 = a1 + 1;
  BOOL v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        char v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        BOOL v5 = *v8;
        char v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      BOOL v5 = v8[1];
      if (!v5)
      {
        char v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v8 = a1 + 1;
LABEL_10:
    BOOL v10 = (uint64_t *)operator new(0x30uLL);
    uint64_t v11 = a3[1];
    void v10[4] = *a3;
    void v10[5] = v11;
    sub_21677B358(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_21686F4F4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fMallocTag::CallTree::PathNode>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TfMal"
            "locTag::CallTree::PathNode>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_21686F56C()
{
}

void *sub_21686F574(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfMallocTag::CallTree::PathNode>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrRe"
            "served__::TfMallocTag::CallTree::PathNode>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

BOOL sub_21686F5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v2 = a2 + 24;
  uint64_t v3 = v4;
  int v5 = *(char *)(v2 + 23);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v6 = a1 + 24;
  uint64_t v7 = v8;
  int v9 = *(char *)(v6 + 23);
  if (v9 >= 0) {
    size_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    size_t v10 = *(void *)(v6 + 8);
  }
  if (v9 < 0) {
    uint64_t v6 = v7;
  }
  if (v5 >= 0) {
    size_t v11 = *(unsigned __int8 *)(v2 + 23);
  }
  else {
    size_t v11 = *(void *)(v2 + 8);
  }
  if (v5 < 0) {
    uint64_t v2 = v3;
  }
  if (v11 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v11;
  }
  int v13 = memcmp((const void *)v6, (const void *)v2, v12);
  if (v13) {
    return v13 < 0;
  }
  else {
    return v10 < v11;
  }
}

uint64_t sub_21686F668(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<const pxrInternal__aapl__pxrReserved__::T"
            "fMallocTag::CallTree::PathNode *>>::operator*() [T = std::vector<const pxrInternal__aapl__pxrReserved__::TfM"
            "allocTag::CallTree::PathNode *>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_21686F6E0()
{
}

void *sub_21686F6E8(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<const pxrInternal__aapl__px"
            "rReserved__::TfMallocTag::CallTree::PathNode *>>::operator++() [T = std::vector<const pxrInternal__aapl__pxr"
            "Reserved__::TfMallocTag::CallTree::PathNode *>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_21686F768(uint64_t result, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  size_t v10 = (char *)result;
LABEL_2:
  size_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    size_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)(*((void *)a2 - 1), *(void *)v11);
          if (result)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)size_t v11 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = sub_21686FC90(v11, (void *)v11 + 1, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 4uLL:
          uint64_t result = sub_216870174(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 5uLL:
          uint64_t result = sub_216870228(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)v11 + 3, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)sub_216870304(v11, a2, (uint64_t *)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_21686FC90(v11, &v11[8 * (v15 >> 1)], (void *)a2 - 1, (unsigned int (**)(void))a3);
      sub_21686FC90((void *)v11 + 1, (void *)v17 - 1, (void *)a2 - 2, (unsigned int (**)(void))a3);
      sub_21686FC90((void *)v11 + 2, &v11[8 * v16 + 8], (void *)a2 - 3, (unsigned int (**)(void))a3);
      sub_21686FC90((void *)v17 - 1, v17, &v11[8 * v16 + 8], (unsigned int (**)(void))a3);
      uint64_t v18 = *(void *)v11;
      *(void *)size_t v11 = *(void *)v17;
      *(void *)uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_21686FC90(&v11[8 * (v15 >> 1)], v11, (void *)a2 - 1, (unsigned int (**)(void))a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(*((void *)v11 - 1), *(void *)v11) & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_21686FD80((uint64_t *)v11, (uint64_t *)a2, a3);
      size_t v11 = (char *)result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v19 = sub_21686FE90((uint64_t *)v11, (uint64_t *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = sub_21686FFAC(v11, v19, (unsigned int (**)(void))a3);
    size_t v11 = (char *)(v19 + 1);
    uint64_t result = sub_21686FFAC(v19 + 1, a2, (unsigned int (**)(void))a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = sub_21686F768(v10, v19, a3, -v13, a5 & 1);
      size_t v11 = (char *)(v19 + 1);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_21686FB2C((uint64_t)v11, (uint64_t *)a2, a3);
  }
  else
  {
    return sub_21686FBF4((uint64_t)v11, a2, a3);
  }
}

uint64_t sub_21686FB2C(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((uint64_t *)result != a2)
  {
    char v4 = (void *)result;
    char v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t result = (*a3)(v9, v10);
        if (result)
        {
          uint64_t v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(void *)((char *)v4 + v12 + 8) = *(void *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            uint64_t result = (*a3)(v11, *(void *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              uint64_t v13 = (void *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          void *v13 = v11;
        }
        char v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_21686FBF4(uint64_t result, void *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((void *)result != a2)
  {
    char v4 = (void *)result;
    for (int i = (void *)(result + 8); v4 + 1 != a2; int i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      char v4 = i;
      uint64_t result = (*a3)(v7, v8);
      if (result)
      {
        uint64_t v9 = *v4;
        uint64_t v10 = v4;
        do
        {
          uint64_t v11 = v10;
          uint64_t v12 = *--v10;
          *uint64_t v11 = v12;
          uint64_t result = (*a3)(v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        void *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t sub_21686FC90(void *a1, void *a2, void *a3, unsigned int (**a4)(void))
{
  char v8 = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
  uint64_t result = ((uint64_t (*)(void, void))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(void, void))*a4)(*a2, *a1)) {
      return 1;
    }
    uint64_t v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  uint64_t v10 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3)) {
      return 1;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *sub_21686FD80(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  char v4 = a2;
  uint64_t v6 = *a1;
  if ((*a3)(*a1, *(a2 - 1)))
  {
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    uint64_t v9 = a1 + 1;
    do
    {
      uint64_t v7 = v9;
      if (v9 >= v4) {
        break;
      }
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      uint64_t v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    uint64_t v11 = *v7;
    *uint64_t v7 = *v4;
    *char v4 = v11;
    do
    {
      uint64_t v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      uint64_t v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1) {
    *a1 = *(v7 - 1);
  }
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *sub_21686FE90(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    char v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  uint64_t v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      uint64_t v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      uint64_t v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    uint64_t v13 = &a1[v6];
    uint64_t v14 = a2;
    do
    {
      uint64_t v15 = *v13;
      uint64_t *v13 = *v14;
      *uint64_t v14 = v15;
      do
      {
        uint64_t v16 = v13[1];
        ++v13;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        uint64_t v17 = *--v14;
      while (!(*a3)(v17, v7));
    }
    while (v13 < v14);
    uint64_t v10 = v13 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  uint64_t *v10 = v7;
  return v10;
}

BOOL sub_21686FFAC(void *a1, void *a2, unsigned int (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_21686FC90(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_216870174(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_216870228(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      sub_21686FC90(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          uint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      void *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t sub_216870174(void *a1, void *a2, void *a3, void *a4, unsigned int (**a5)(void))
{
  sub_21686FC90(a1, a2, a3, a5);
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_216870228(void *a1, void *a2, void *a3, void *a4, void *a5, unsigned int (**a6)(void))
{
  sub_216870174(a1, a2, a3, a4, a6);
  uint64_t result = ((uint64_t (*)(void, void))*a6)(*a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = ((uint64_t (*)(void, void))*a6)(*a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = ((uint64_t (*)(void, void))*a6)(*a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = ((uint64_t (*)(void, void))*a6)(*a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_216870304(char *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        sub_21687045C((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != (char *)a3)
    {
      uint64_t v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(*v14, *(void *)a1))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          sub_21687045C((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = (char *)a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      uint64_t v17 = a2 - 8;
      do
      {
        uint64_t v18 = *(void *)a1;
        unint64_t v19 = (char *)sub_216870584(a1, (unsigned int (**)(void, void))a4, v16);
        if (v17 == v19)
        {
          *(void *)unint64_t v19 = v18;
        }
        else
        {
          *(void *)unint64_t v19 = *(void *)v17;
          *(void *)uint64_t v17 = v18;
          sub_216870634((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
        v17 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t sub_21687045C(uint64_t result, unsigned int (**a2)(void, void), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (void *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = ((uint64_t (*)(void, void))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        uint64_t v14 = *v5;
        do
        {
          uint64_t v15 = v12;
          void *v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = (void *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              uint64_t v16 = 2 * v11 + 2;
            }
          }
          uint64_t result = ((uint64_t (*)(void, uint64_t))*a2)(*v12, v14);
          char v5 = v15;
          uint64_t v11 = v16;
        }
        while (!result);
        *uint64_t v15 = v14;
      }
    }
  }
  return result;
}

void *sub_216870584(void *a1, unsigned int (**a2)(void, void), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t sub_216870634(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = (uint64_t *)(a2 - 8);
    uint64_t result = (*a3)(*v8, *(void *)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        uint64_t result = (*a3)(*v8, v10);
        uint64_t v9 = v11;
      }
      while ((result & 1) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

void sub_2168706D8(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_21687072C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_21687072C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

uint64_t sub_21687077C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21687082C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_2168707F4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_21677CA1C();
  }
  return operator new(32 * a2);
}

uint64_t sub_21687082C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(_WORD *)(v7 - 8) = *(_WORD *)(a3 - 8);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_2168708D8((uint64_t)v11);
  return v9;
}

uint64_t sub_2168708D8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216870910(a1);
  }
  return a1;
}

void sub_216870910(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 32;
  }
}

uint64_t sub_216870958(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216870990(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_2168709E8(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      uint64_t v11 = (tbb::internal **)(v9 + 16);
      uint64_t v10 = (tbb::internal *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *uint64_t v11 = *(tbb::internal **)v10;
          sub_216870AB8((int)a1, v10);
          uint64_t v10 = *v11;
        }
        while ((unint64_t)*v11 > 0x3F);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_216870AF4((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_216870AB8(int a1, tbb::internal *this)
{
  unint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

uint64_t sub_216870AF4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  unint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *unint64_t v4 = 0;
  return result;
}

unint64_t sub_216870B44(unint64_t result)
{
  uint64_t v1 = (uint64_t *)result;
  uint64_t v2 = (void *)(result + 16);
  uint64_t v3 = *(void *)(result + 8) - 1;
  while (1)
  {
    uint64_t v4 = v3;
    unint64_t v5 = v3 + 2;
    unint64_t v6 = *(void *)*v1;
    __dmb(0xBu);
    if (v5 > v6) {
      break;
    }
    if ((v5 & v4) != 0) {
      uint64_t result = *v2 + 24;
    }
    else {
      uint64_t result = sub_21686CD68(*v1, v5);
    }
    unint64_t v7 = *(void *)(result + 16);
    v1[2] = result;
    v1[3] = v7;
    uint64_t v3 = v4 + 1;
    if (v7 > 0x3F) {
      goto LABEL_9;
    }
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
LABEL_9:
  v1[1] = v4 + 2;
  return result;
}

uint64_t sub_216870BD4(uint64_t *a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, void *, uint64_t), tbb::internal *a8)
{
  unint64_t v29 = 0;
  uint64_t v13 = *a3 ^ (*a3 >> 3);
  uint64_t v14 = *a1;
  __dmb(0xBu);
  uint64_t v28 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_2168710D8((uint64_t)&v31, (uint64_t)a1, v14 & v13, 0);
    uint64_t v15 = (tbb::internal *)(v33 + 16);
    do
      uint64_t v15 = *(tbb::internal **)v15;
    while ((unint64_t)v15 >= 0x40 && *a3 != *((void *)v15 + 2));
    if (a2) {
      break;
    }
    if (v15)
    {
      uint64_t v16 = 1;
LABEL_10:
      uint64_t v17 = a8;
      if (!a5) {
        goto LABEL_46;
      }
      goto LABEL_11;
    }
    unint64_t v24 = *a1;
    __dmb(0xBu);
    if (v14 == v24 || !sub_21686CF40((uint64_t)a1, v13, v14, v24))
    {
      sub_21685C048(&v31);
      return 0;
    }
LABEL_31:
    sub_21685C048(&v31);
    uint64_t v14 = v24;
  }
  if (v15)
  {
LABEL_7:
    uint64_t v16 = 0;
    goto LABEL_10;
  }
  if (!a8) {
    a8 = (tbb::internal *)a7(v28, a3, a4);
  }
  if (!v32)
  {
    char v32 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v31) & 1) == 0)
    {
      uint64_t v15 = (tbb::internal *)(v33 + 16);
      while (1)
      {
        uint64_t v15 = *(tbb::internal **)v15;
        if ((unint64_t)v15 < 0x40) {
          break;
        }
        if (*a3 == *((void *)v15 + 2))
        {
          if (!v32) {
            goto LABEL_7;
          }
          uint64_t v16 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v31, 3uLL);
          char v32 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  unint64_t v24 = *a1;
  __dmb(0xBu);
  if (v14 != v24)
  {
    if (!sub_21686CF40((uint64_t)a1, v13, v14, v24)) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  unint64_t v24 = v14;
LABEL_33:
  unint64_t v29 = sub_21686C9CC((uint64_t)a1, v33, a8, v24);
  uint64_t v17 = 0;
  uint64_t v16 = 1;
  uint64_t v15 = a8;
  if (!a5)
  {
LABEL_46:
    sub_21685C048(&v31);
    goto LABEL_41;
  }
LABEL_11:
  if ((sub_21686CAA4(a5, (atomic_ullong *)v15 + 1, a6) & 1) == 0)
  {
    sched_yield();
    int v18 = 2;
    while ((sub_21686CAA4(a5, (atomic_ullong *)v15 + 1, a6) & 1) == 0)
    {
      sched_yield();
      BOOL v19 = v18 < 16;
      v18 *= 2;
      if (!v19)
      {
        char v20 = (atomic_ullong *)v31;
        unint64_t v31 = 0;
        if (v32)
        {
LABEL_16:
          atomic_ullong v21 = *v20;
          unint64_t v22 = *v20 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v23 = v21;
            atomic_compare_exchange_strong(v20, (unint64_t *)&v23, v22);
            if (v23 == v21) {
              break;
            }
            if (atomic_fetch_add_explicit(v20, 0, memory_order_relaxed) != v21)
            {
              sched_yield();
              goto LABEL_16;
            }
          }
        }
        else
        {
          atomic_fetch_add(v20, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v24 = *a1;
        __dmb(0xBu);
        a8 = v17;
        goto LABEL_31;
      }
    }
  }
  sub_21685C048(&v31);
  *(void *)(a5 + 16) = v15;
  *(void *)(a5 + 24) = v13;
LABEL_41:
  if (v29) {
    sub_216870F40(a1, v29, v28, 0);
  }
  if (v17) {
    sub_216870AB8((int)a1, v17);
  }
  return v16;
}

void sub_216870EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216870ECC(uint64_t a1, void *a2)
{
  uint64_t v4 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x40);
  v7[1] = a1;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(void *)(v4 + 16) = *a2;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(void *)(v4 + 56) = 0;
  v7[0] = 0;
  sub_21687133C(v7, v5);
  return v4;
}

void sub_216870F40(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    unint64_t v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    uint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        uint64_t v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    int v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    unint64_t v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    char v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      unint64_t v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        void *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_2168710C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_2168710D8(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (uint64_t v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3) {
      sub_2168711B4(a2, v11, a3);
    }
  }
  else
  {
    unint64_t v12 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v12;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v12);
    }
  }
  return a1;
}

void sub_2168711A0(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_2168711B4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_2168710D8(&v15, a1, v10 & a3, 0);
  uint64_t v11 = (void *)(v17 + 16);
  unint64_t v12 = *(void **)(v17 + 16);
  __dmb(0xBu);
  if ((unint64_t)v12 >= 0x40)
  {
    int v13 = (2 * v10) | 1;
    while ((((v12[2] >> 3) ^ v12[2]) & v13) == a3)
    {
      if (v16 || (char v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v15) & 1) != 0))
      {
        *uint64_t v11 = *v12;
        void *v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_24:
        unint64_t v12 = (void *)*v11;
        if (*v11 <= 0x3FuLL) {
          return sub_21685C048(&v15);
        }
      }
      else
      {
        uint64_t v11 = (void *)(v17 + 16);
        unint64_t v12 = *(void **)(v17 + 16);
        __dmb(0xBu);
        if ((unint64_t)v12 < 0x40) {
          return sub_21685C048(&v15);
        }
      }
    }
    uint64_t v11 = v12;
    goto LABEL_24;
  }
  return sub_21685C048(&v15);
}

void sub_216871328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_21687133C(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

uint64_t sub_216871370(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a2 + 528;
  unint64_t v5 = *(void *)(a2 + 544);
  uint64_t v9 = a2;
  uint64_t v10 = 0;
  uint64_t v11 = a2 + 528;
  unint64_t v12 = v5;
  if (v5 <= 0x3F)
  {
    sub_216870B44((unint64_t)&v9);
    uint64_t v7 = v9;
    uint64_t v6 = v10;
    uint64_t v4 = v11;
    unint64_t v5 = v12;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = a2;
  }
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return a1;
}

uint64_t sub_2168713F0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[2];
      if (v3)
      {
        v2[3] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_216871440(uint64_t result, int8x16_t *a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t v11 = (int8x16_t *)result;
  while (2)
  {
    unint64_t v12 = &a2[-1].i64[1];
    int64_t v88 = a2;
    unint64_t v89 = a2 - 1;
    std::string::size_type v86 = &a2[-2].i64[1];
    int v13 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          uint64_t v15 = ((char *)a2 - (char *)v13) >> 3;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v11->i64[0]);
                if (result)
                {
                  uint64_t v42 = v11->i64[0];
                  v11->i64[0] = a2[-1].i64[1];
                  a2[-1].i64[1] = v42;
                }
                break;
              case 3:
                uint64_t result = sub_216871C48(v11, &v11->i64[1], v12, (uint64_t (**)(void))a3);
                break;
              case 4:
                uint64_t result = sub_216871F78(v11, &v11->i64[1], (int8x16_t *)v11[1].i64, v12, (uint64_t (**)(void))a3);
                break;
              case 5:
                std::string::size_type v43 = v11 + 1;
                long long v44 = &v11[1].i64[1];
                sub_216871F78(v11, &v11->i64[1], (int8x16_t *)v11[1].i64, &v11[1].i64[1], (uint64_t (**)(void))a3);
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v11[1].i64[1]);
                if (result)
                {
                  uint64_t v45 = *v44;
                  uint64_t *v44 = a2[-1].i64[1];
                  a2[-1].i64[1] = v45;
                  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v44, v43->i64[0]);
                  if (result)
                  {
                    uint64_t v46 = v43->i64[0];
                    v43->i64[0] = *v44;
                    uint64_t *v44 = v46;
                    uint64_t result = ((uint64_t (*)(void))*a3)();
                    if (result)
                    {
                      uint64_t v47 = v11->i64[1];
                      v11->i64[1] = v11[1].i64[0];
                      v11[1].i64[0] = v47;
                      uint64_t result = ((uint64_t (*)(void))*a3)();
                      if (result) {
                        *uint64_t v11 = vextq_s8(*v11, *v11, 8uLL);
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 191)
          {
            uint64_t v48 = (int8x16_t *)&v11->u64[1];
            BOOL v50 = v11 == a2 || v48 == a2;
            if (a5)
            {
              if (!v50)
              {
                uint64_t v51 = 0;
                std::string v52 = (uint64_t *)v11;
                do
                {
                  uint64_t v54 = *v52;
                  uint64_t v53 = v52[1];
                  std::string v52 = (uint64_t *)v48;
                  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v53, v54);
                  if (result)
                  {
                    uint64_t v55 = *v52;
                    uint64_t v56 = v51;
                    while (1)
                    {
                      *(uint64_t *)((char *)&v11->i64[1] + v56) = *(uint64_t *)((char *)v11->i64 + v56);
                      if (!v56) {
                        break;
                      }
                      uint64_t result = ((uint64_t (*)(uint64_t, void))*a3)(v55, *(uint64_t *)((char *)&v11->i64[-1] + v56));
                      v56 -= 8;
                      if ((result & 1) == 0)
                      {
                        std::string::size_type v57 = (uint64_t *)((char *)&v11->i64[1] + v56);
                        goto LABEL_83;
                      }
                    }
                    std::string::size_type v57 = (uint64_t *)v11;
LABEL_83:
                    *std::string::size_type v57 = v55;
                  }
                  uint64_t v48 = (int8x16_t *)(v52 + 1);
                  v51 += 8;
                }
                while (v52 + 1 != (uint64_t *)a2);
              }
            }
            else if (!v50)
            {
              do
              {
                uint64_t v81 = v11->i64[0];
                uint64_t v80 = v11->i64[1];
                uint64_t v11 = v48;
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v80, v81);
                if (result)
                {
                  uint64_t v82 = v11->i64[0];
                  uint64_t v83 = (uint64_t *)v11;
                  do
                  {
                    long long v84 = v83;
                    uint64_t v85 = *--v83;
                    *long long v84 = v85;
                    uint64_t result = ((uint64_t (*)(uint64_t, void))*a3)(v82, *(v84 - 2));
                  }
                  while ((result & 1) != 0);
                  *uint64_t v83 = v82;
                }
                uint64_t v48 = (int8x16_t *)&v11->u64[1];
              }
              while (&v11->u64[1] != (unint64_t *)a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v58 = (unint64_t)(v15 - 2) >> 1;
              int64_t v90 = v58;
              do
              {
                int64_t v59 = v58;
                if (v90 >= v58)
                {
                  uint64_t v60 = (2 * v58) | 1;
                  uint64_t v61 = &v11->i64[v60];
                  if (2 * v58 + 2 < v15 && (*a3)(*v61, v61[1]))
                  {
                    ++v61;
                    uint64_t v60 = 2 * v59 + 2;
                  }
                  std::string v62 = &v11->i64[v59];
                  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v61, *v62);
                  if ((result & 1) == 0)
                  {
                    int64_t v87 = v59;
                    uint64_t v63 = *v62;
                    do
                    {
                      std::string::size_type v64 = v61;
                      *std::string v62 = *v61;
                      if (v90 < v60) {
                        break;
                      }
                      uint64_t v65 = (2 * v60) | 1;
                      uint64_t v61 = &v11->i64[v65];
                      if (2 * v60 + 2 < v15 && (*a3)(*v61, v61[1]))
                      {
                        ++v61;
                        uint64_t v65 = 2 * v60 + 2;
                      }
                      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v61, v63);
                      std::string v62 = v64;
                      uint64_t v60 = v65;
                    }
                    while (!result);
                    *std::string::size_type v64 = v63;
                    int64_t v59 = v87;
                    a2 = v88;
                  }
                }
                int64_t v58 = v59 - 1;
              }
              while (v59);
              uint64_t v66 = (unint64_t)v14 >> 3;
              do
              {
                uint64_t v67 = a2;
                uint64_t v68 = 0;
                uint64_t v91 = v11->i64[0];
                unint64_t v69 = (uint64_t *)v11;
                do
                {
                  unint64_t v70 = &v69[v68 + 1];
                  uint64_t v71 = (2 * v68) | 1;
                  uint64_t v72 = 2 * v68 + 2;
                  if (v72 < v66)
                  {
                    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v69[v68 + 1], v69[v68 + 2]);
                    if (result)
                    {
                      ++v70;
                      uint64_t v71 = v72;
                    }
                  }
                  *unint64_t v69 = *v70;
                  unint64_t v69 = v70;
                  uint64_t v68 = v71;
                }
                while (v71 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
                a2 = (int8x16_t *)((char *)v67 - 8);
                if (v70 == (uint64_t *)&v67[-1].u64[1])
                {
                  uint64_t *v70 = v91;
                }
                else
                {
                  uint64_t *v70 = a2->i64[0];
                  a2->i64[0] = v91;
                  uint64_t v73 = (char *)v70 - (char *)v11 + 8;
                  if (v73 >= 9)
                  {
                    unint64_t v74 = (((unint64_t)v73 >> 3) - 2) >> 1;
                    uint64_t v75 = &v11->i64[v74];
                    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v75, *v70);
                    if (result)
                    {
                      std::string::size_type v76 = (int8x16_t *)((char *)v67 - 8);
                      uint64_t v77 = *v70;
                      do
                      {
                        uint64_t v78 = v75;
                        uint64_t *v70 = *v75;
                        if (!v74) {
                          break;
                        }
                        unint64_t v74 = (v74 - 1) >> 1;
                        uint64_t v75 = &v11->i64[v74];
                        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v75, v77);
                        unint64_t v70 = v78;
                      }
                      while ((result & 1) != 0);
                      *uint64_t v78 = v77;
                      a2 = v76;
                    }
                  }
                }
              }
              while (v66-- > 2);
            }
            return result;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          uint64_t v17 = &v11->i64[(unint64_t)v15 >> 1];
          if ((unint64_t)v14 < 0x401)
          {
            sub_216871C48(v17, v11, v12, (uint64_t (**)(void))a3);
          }
          else
          {
            sub_216871C48(v11, v17, v12, (uint64_t (**)(void))a3);
            sub_216871C48(&v11->i64[1], v17 - 1, v89, (uint64_t (**)(void))a3);
            sub_216871C48((int8x16_t *)v11[1].i64, &v11->i64[v16 + 1], v86, (uint64_t (**)(void))a3);
            sub_216871C48(v17 - 1, v17, &v11->i64[v16 + 1], (uint64_t (**)(void))a3);
            uint64_t v18 = v11->i64[0];
            v11->i64[0] = *v17;
            *uint64_t v17 = v18;
          }
          --a4;
          if (a5 & 1) != 0 || (((uint64_t (*)(uint64_t, uint64_t))*a3)(v11[-1].i64[1], v11->i64[0])) {
            break;
          }
          uint64_t v33 = v11->i64[0];
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v11->i64[0], *v12);
          if (result)
          {
            int v13 = v11;
            do
            {
              uint64_t v34 = v13->i64[1];
              int v13 = (int8x16_t *)((char *)v13 + 8);
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v34);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64x2_t v35 = &v11->i64[1];
            do
            {
              int v13 = (int8x16_t *)v35;
              if (v35 >= (uint64_t *)a2) {
                break;
              }
              ++v35;
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v13->i64[0]);
            }
            while (!result);
          }
          uint64x2_t v36 = a2;
          if (v13 < a2)
          {
            uint64x2_t v36 = a2;
            do
            {
              uint64_t v37 = v36[-1].i64[1];
              uint64x2_t v36 = (int8x16_t *)((char *)v36 - 8);
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v37);
            }
            while ((result & 1) != 0);
          }
          while (v13 < v36)
          {
            uint64_t v38 = v13->i64[0];
            v13->i64[0] = v36->i64[0];
            v36->i64[0] = v38;
            do
            {
              uint64_t v39 = v13->i64[1];
              int v13 = (int8x16_t *)((char *)v13 + 8);
            }
            while (!(*a3)(v33, v39));
            do
            {
              uint64_t v40 = v36[-1].i64[1];
              uint64x2_t v36 = (int8x16_t *)((char *)v36 - 8);
              uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v33, v40);
            }
            while ((result & 1) != 0);
          }
          uint64_t v41 = &v13[-1].i64[1];
          BOOL v5 = &v13[-1].u64[1] >= (unint64_t *)v11;
          BOOL v6 = &v13[-1].u64[1] == (unint64_t *)v11;
          if (&v13[-1].u64[1] != (unint64_t *)v11) {
            v11->i64[0] = *v41;
          }
          a5 = 0;
          uint64_t *v41 = v33;
        }
        uint64_t v19 = 0;
        uint64_t v20 = v11->i64[0];
        do
          char v21 = (*a3)(v11->i64[++v19], v20);
        while ((v21 & 1) != 0);
        int64x2_t v22 = &v11->i64[v19];
        uint64x2_t v23 = (uint64_t *)v88;
        BOOL v6 = v19 == 1;
        a2 = v88;
        if (v6)
        {
          uint64x2_t v23 = (uint64_t *)v88;
          do
          {
            if (v22 >= v23) {
              break;
            }
            uint64_t v25 = *--v23;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v25, v20) & 1) == 0);
        }
        else
        {
          do
            uint64_t v24 = *--v23;
          while (!(*a3)(v24, v20));
        }
        if (v22 >= v23)
        {
          unint64_t v31 = (int8x16_t *)(v22 - 1);
        }
        else
        {
          uint64_t v26 = v22;
          uint64_t v27 = v23;
          do
          {
            uint64_t v28 = *v26;
            *uint64_t v26 = *v27;
            uint64_t *v27 = v28;
            do
            {
              uint64_t v29 = v26[1];
              ++v26;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v29, v20) & 1) != 0);
            do
              uint64_t v30 = *--v27;
            while (!(*a3)(v30, v20));
          }
          while (v26 < v27);
          unint64_t v31 = (int8x16_t *)(v26 - 1);
          a2 = v88;
        }
        if (v31 != v11) {
          v11->i64[0] = v31->i64[0];
        }
        v31->i64[0] = v20;
        if (v22 >= v23) {
          break;
        }
LABEL_33:
        uint64_t result = sub_216871440(v11, v31, a3, a4, a5 & 1);
        a5 = 0;
        int v13 = (int8x16_t *)&v31->u64[1];
      }
      BOOL v32 = sub_216871D2C(v11, v31, a3);
      int v13 = (int8x16_t *)&v31->u64[1];
      uint64_t result = sub_216871D2C((int8x16_t *)&v31->u64[1], a2, a3);
      if (result) {
        break;
      }
      if (!v32) {
        goto LABEL_33;
      }
    }
    a2 = v31;
    if (!v32) {
      continue;
    }
    return result;
  }
}

uint64_t sub_216871C48(void *a1, void *a2, void *a3, uint64_t (**a4)(void))
{
  char v8 = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
  uint64_t result = ((uint64_t (*)(void, void))*a4)(*a3, *a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      uint64_t result = (*a4)(*a3);
      if (result)
      {
        uint64_t v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
    if (result)
    {
      uint64_t v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_216871D2C(int8x16_t *a1, int8x16_t *a2, unsigned int (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2[-1].i64[1], a1->i64[0]))
      {
        uint64_t v8 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v8;
      }
      return 1;
    case 3:
      sub_216871C48(a1, &a1->i64[1], &a2[-1].i64[1], (uint64_t (**)(void))a3);
      return 1;
    case 4:
      sub_216871F78(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, &a2[-1].i64[1], (uint64_t (**)(void))a3);
      return 1;
    case 5:
      uint64_t v17 = a1 + 1;
      uint64_t v18 = &a1[1].i64[1];
      sub_216871F78(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, &a1[1].i64[1], (uint64_t (**)(void))a3);
      if ((*a3)(a2[-1].i64[1], a1[1].i64[1]))
      {
        uint64_t v19 = *v18;
        uint64_t *v18 = a2[-1].i64[1];
        a2[-1].i64[1] = v19;
        if ((*a3)(*v18, v17->i64[0]))
        {
          uint64_t v20 = v17->i64[0];
          v17->i64[0] = *v18;
          uint64_t *v18 = v20;
          if (((unsigned int (*)(void))*a3)())
          {
            uint64_t v21 = a1->i64[1];
            a1->i64[1] = a1[1].i64[0];
            a1[1].i64[0] = v21;
            if (((unsigned int (*)(void))*a3)()) {
              *a1 = vextq_s8(*a1, *a1, 8uLL);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 1;
      sub_216871C48(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, (uint64_t (**)(void))a3);
      uint64_t v10 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*v10, v9->i64[0]))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = &a1->i8[v14];
        *(uint64_t *)((char *)&a1[1].i64[1] + v14) = *(uint64_t *)((char *)a1[1].i64 + v14);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          unint64_t v16 = (uint64_t *)((char *)&a1[1].i64[1] + v14);
          goto LABEL_13;
        }
      }
      unint64_t v16 = (uint64_t *)a1;
LABEL_13:
      uint64_t *v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == (uint64_t *)a2;
      }
    }
    uint64_t v9 = (int8x16_t *)v10;
    v11 += 8;
    if (++v10 == (uint64_t *)a2) {
      return 1;
    }
  }
}

uint64_t sub_216871F78(void *a1, void *a2, void *a3, void *a4, uint64_t (**a5)(void))
{
  sub_216871C48(a1, a2, a3, a5);
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_21687202C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168720EC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_2168720A4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_21677CA1C();
  }
  return operator new(40 * a2);
}

uint64_t sub_2168720EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      long long v8 = *(_OWORD *)(a3 - 40);
      a3 -= 40;
      *(_OWORD *)(v7 - 40) = v8;
      *(void *)(v7 - 24) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 40;
      *((void *)&v14 + 1) -= 40;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216872198((uint64_t)v11);
  return v9;
}

uint64_t sub_216872198(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168721D0(a1);
  }
  return a1;
}

void sub_2168721D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 40;
  }
}

uint64_t sub_216872218(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216872250(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 40);
    *(void *)(a1 + 16) = v2 - 40;
    if (v5)
    {
      *(void *)(v2 - 32) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
}

uint64_t sub_2168722AC(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v12 = a2;
  sub_21686EB98((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0x666666666666667)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  sub_21687245C((void *)(a1 + 8), v12);
  uint64_t v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16)) {
    uint64_t v7 = sub_2168723D8();
  }
  unint64_t v8 = v12;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8) {
    *(unsigned char *)(*(void *)(a1 + 16) - 34) = 1;
  }
  float v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(void *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_2168723C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_2168723D8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798B060, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798B060))
  {
    dword_26798B038 = 0;
    word_26798B03C = -1;
    byte_26798B03E = 1;
    __cxa_atexit((void (*)(void *))sub_21686C2F0, &dword_26798B038, &dword_216758000);
    __cxa_guard_release(&qword_26798B060);
  }
  return &dword_26798B038;
}

void *sub_21687245C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2168724E8(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 40 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(unsigned char *)(v4 + 6) = 0;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_2168724D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_2168724E8(void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_21677CB10();
  }
  uint64_t result = (char *)sub_2168720A4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t sub_21687253C(uint64_t *a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  uint64_t v10 = a1[4];
  uint64_t v11 = v9 & *a1;
  if (*(__int16 *)(v10 + 40 * v11 + 4) < 0)
  {
    LOWORD(v12) = 0;
LABEL_7:
    char v13 = sub_216872704((uint64_t)a1);
    uint64_t v14 = a1[4];
    if (v13)
    {
      uint64_t v11 = v9 & *a1;
      if (*(__int16 *)(v14 + 40 * v11 + 4) < 0)
      {
        LOWORD(v12) = 0;
        int v15 = *(unsigned __int16 *)(v14 + 40 * v11 + 4);
      }
      else
      {
        LOWORD(v12) = 0;
        do
        {
          int v12 = (__int16)(v12 + 1);
          uint64_t v11 = (v11 + 1) & *a1;
        }
        while (v12 <= *(__int16 *)(v14 + 40 * v11 + 4));
        int v15 = *(unsigned __int16 *)(v14 + 40 * v11 + 4);
      }
    }
    else
    {
      int v15 = *(unsigned __int16 *)(v14 + 40 * v11 + 4);
    }
    if (v15 == 0xFFFF)
    {
      uint64_t v17 = v14 + 40 * v11;
      *(void *)(v17 + 8) = **a4;
      *(void *)(v17 + 16) = 0;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0;
      *(_DWORD *)uint64_t v17 = v9;
      *(_WORD *)(v17 + 4) = v12;
    }
    else
    {
      sub_2168727CC(a1, v11, v12, v9, a3, a4);
    }
    ++a1[6];
    return a1[4] + 40 * v11;
  }
  else
  {
    LOWORD(v12) = 0;
    while (*(void *)(v10 + 40 * v11 + 8) != *a2)
    {
      int v12 = (__int16)(v12 + 1);
      uint64_t v11 = (v11 + 1) & *a1;
      if (v12 > *(__int16 *)(v10 + 40 * v11 + 4)) {
        goto LABEL_7;
      }
    }
    return v10 + 40 * v11;
  }
}

uint64_t sub_216872704(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || (unint64_t v2 = *(void *)(a1 + 48), v2 >= *(void *)(a1 + 56)))
  {
    unint64_t v6 = sub_21686E8DC((void *)a1);
    sub_216872810(a1, v6);
    *(unsigned char *)(a1 + 72) = 0;
    return 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = 0;
    float v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      unint64_t v4 = *(void *)(a1 + 40);
      float v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        float v8 = *(float *)(a1 + 68);
        unint64_t v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        unint64_t v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        sub_216872810(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_2168727CC(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5, uint64_t **a6)
{
  uint64_t v6 = **a6;
  std::string __p = 0;
  float v8 = 0;
  uint64_t v9 = 0;
  sub_216872A14(a1, a2, a3, a4, &v6);
  if (__p)
  {
    float v8 = __p;
    operator delete(__p);
  }
}

void sub_216872810(uint64_t a1, unint64_t a2)
{
  sub_2168722AC((uint64_t)&v9, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  float v3 = *(void **)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 16);
  if (v3 != v4)
  {
    float v5 = v3 + 1;
    unint64_t v6 = (unint64_t)(v10[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        if (v6)
        {
          unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *v5 + 8) ^ HIDWORD(*v5));
          unint64_t v7 = 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69 * (HIDWORD(*v5) ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69
                                                                            * (HIDWORD(*v5) ^ (v8 >> 47) ^ v8)) >> 47));
        }
        else
        {
          unint64_t v7 = *((unsigned int *)v5 - 2);
        }
        sub_216872940(&v9, v9 & v7, 0, v7, v5);
      }
      v5 += 5;
    }
    while (v5 - 1 != v4);
  }
  void v10[5] = *(void *)(a1 + 48);
  sub_21686E9D4(&v9, (uint64_t *)a1);
  unint64_t v11 = (void **)v10;
  sub_21686C230(&v11);
}

void sub_216872920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 56) = &a11;
  sub_21686C230((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

__n128 sub_216872940(void *a1, uint64_t a2, __int16 a3, int a4, void *a5)
{
  while (1)
  {
    uint64_t v5 = a1[4];
    unint64_t v6 = (int *)(v5 + 40 * a2);
    unint64_t v7 = v6 + 1;
    int v8 = *((__int16 *)v6 + 2);
    if (v8 >= a3) {
      goto LABEL_4;
    }
    uint64_t v9 = (void *)(v5 + 40 * a2 + 8);
    uint64_t v10 = *a5;
    if (v8 == -1) {
      break;
    }
    *a5 = *v9;
    *uint64_t v9 = v10;
    uint64_t v11 = (void *)(v5 + 40 * a2);
    uint64_t v12 = a5[1];
    a5[1] = v11[2];
    uint64_t v11[2] = v12;
    uint64_t v13 = a5[2];
    a5[2] = v11[3];
    void v11[3] = v13;
    uint64_t v14 = a5[3];
    a5[3] = v11[4];
    v11[4] = v14;
    *unint64_t v7 = a3;
    int v15 = *v6;
    *unint64_t v6 = a4;
    a3 = v8;
    a4 = v15;
LABEL_4:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  *uint64_t v9 = v10;
  unint64_t v16 = (__n128 *)(v5 + 40 * a2);
  v16[1].n128_u64[1] = 0;
  v16[2].n128_u64[0] = 0;
  v16[1].n128_u64[0] = 0;
  __n128 result = *(__n128 *)(a5 + 1);
  v16[1] = result;
  v16[2].n128_u64[0] = a5[3];
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = 0;
  *unint64_t v6 = a4;
  *unint64_t v7 = a3;
  return result;
}

__n128 sub_216872A14(uint64_t *a1, uint64_t a2, __int16 a3, int a4, void *a5)
{
  uint64_t v5 = a1[4] + 40 * a2;
  unint64_t v6 = *a5;
  *a5 = *(void *)(v5 + 8);
  *(void *)(v5 + 8) = v6;
  uint64_t v7 = a5[1];
  a5[1] = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = v7;
  uint64_t v8 = a5[2];
  a5[2] = *(void *)(v5 + 24);
  *(void *)(v5 + 24) = v8;
  uint64_t v9 = a5[3];
  a5[3] = *(void *)(v5 + 32);
  *(void *)(v5 + 32) = v9;
  int v10 = *(unsigned __int16 *)(v5 + 4);
  *(_WORD *)(v5 + 4) = a3;
  int v11 = *(_DWORD *)v5;
  *(_DWORD *)uint64_t v5 = a4;
  uint64_t v12 = *a1;
  uint64_t v13 = (a2 + 1) & *a1;
  int v14 = v10 + 1;
  uint64_t v15 = a1[4];
  unint64_t v16 = (int *)(v15 + 40 * v13);
  uint64_t v18 = v16 + 1;
  for (int i = *((unsigned __int16 *)v16 + 2); i != 0xFFFF; int i = *((unsigned __int16 *)v16 + 2))
  {
    if ((__int16)v14 <= (__int16)i)
    {
      int i = v14;
    }
    else
    {
      if ((__int16)v14 >= 4096) {
        *((unsigned char *)a1 + 72) = 1;
      }
      uint64_t v19 = (void *)(v15 + 40 * v13);
      unint64_t v20 = *a5;
      *a5 = v19[1];
      v19[1] = v20;
      uint64_t v21 = a5[1];
      a5[1] = v19[2];
      void v19[2] = v21;
      uint64_t v22 = a5[2];
      a5[2] = v19[3];
      v19[3] = v22;
      uint64_t v23 = a5[3];
      a5[3] = v19[4];
      v19[4] = v23;
      _WORD *v18 = v14;
      int v24 = *v16;
      int *v16 = v11;
      uint64_t v15 = a1[4];
      int v11 = v24;
    }
    uint64_t v13 = (v13 + 1) & v12;
    int v14 = i + 1;
    unint64_t v16 = (int *)(v15 + 40 * v13);
    uint64_t v18 = v16 + 1;
  }
  uint64_t v25 = (__n128 *)(v15 + 40 * v13);
  v25->n128_u64[1] = *a5;
  v25[1].n128_u64[0] = 0;
  v25[1].n128_u64[1] = 0;
  v25[2].n128_u64[0] = 0;
  __n128 result = *(__n128 *)(a5 + 1);
  v25[1] = result;
  v25[2].n128_u64[0] = a5[3];
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = 0;
  int *v16 = v11;
  _WORD *v18 = v14;
  return result;
}

BOOL sub_216872B78(void *a1, void *a2)
{
  unint64_t v2 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  return a1[4] + 40 * a1[5] != sub_216872BEC(a1, a2, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) ^ ((0x9DDFEA08EB382D69* (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) >> 47)));
}

uint64_t sub_216872BEC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = *a1 & a3;
  if (*(__int16 *)(v3 + 40 * v4 + 4) < 0)
  {
LABEL_5:
    uint64_t v4 = a1[5];
  }
  else
  {
    LOWORD(v5) = 0;
    while (*(void *)(v3 + 40 * v4 + 8) != *a2)
    {
      int v5 = (__int16)(v5 + 1);
      uint64_t v4 = (v4 + 1) & *a1;
      if (v5 > *(__int16 *)(v3 + 40 * v4 + 4)) {
        goto LABEL_5;
      }
    }
  }
  return v3 + 40 * v4;
}

uint64_t sub_216872C54(void *a1, void *a2)
{
  unint64_t v2 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  return sub_216872BEC(a1, a2, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) ^ ((0x9DDFEA08EB382D69* (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) >> 47)));
}

void *sub_216872C94(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216872CF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216872D10(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216872D88((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216872D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 72);
      *(void *)(v7 - 56) = *(void *)(a3 - 56);
      *(_OWORD *)(v7 - 72) = v8;
      long long v9 = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v9;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 72;
      *((void *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216872E5C((uint64_t)v12);
  return v10;
}

uint64_t sub_216872E5C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216872E94((uint64_t *)a1);
  }
  return a1;
}

void sub_216872E94(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_21686C438(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

uint64_t sub_216872EE8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216872F20(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = v4 - 72;
    sub_21686C438(v5, v4 - 72);
  }
}

std::string *sub_216872F68(uint64_t *a1, std::string *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        uint64_t v21 = &a3[9 * a5];
      }
      else
      {
        uint64_t v21 = &a3[(uint64_t)(v12 - (void)a2) >> 3];
        a1[1] = sub_2168732D8(v9, (uint64_t)v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_21687317C((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[3 * a5]);
      sub_216873730((uint64_t)v27, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x71C71C71C71C71C7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x38E38E38E38E38ELL) {
        sub_21677CB10();
      }
      unint64_t v15 = 0x8E38E38E38E38E39 * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0x8E38E38E38E38E39 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x1C71C71C71C71C7) {
        unint64_t v18 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v30 = v9;
      if (v18) {
        uint64_t v19 = (char *)sub_216815D10(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v22 = (uint64_t)&v19[72 * v15];
      v27[0] = v19;
      v27[1] = v22;
      uint64_t v28 = v22;
      uint64_t v29 = &v19[72 * v18];
      uint64_t v23 = 9 * a5;
      uint64_t v24 = v22 + 72 * a5;
      uint64_t v25 = 8 * v23;
      do
      {
        sub_216873404(v30, v22, (long long *)v7);
        v22 += 72;
        v7 += 9;
        v25 -= 72;
      }
      while (v25);
      uint64_t v28 = v24;
      uint64_t v5 = (std::string *)sub_216873224((uint64_t)a1, v27, (long long *)v5);
      sub_216872EE8((uint64_t)v27);
    }
  }
  return v5;
}

void sub_216873150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_21687317C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = v10;
      long long v11 = *(_OWORD *)(v9 + 24);
      *(void *)(v8 + 40) = *(void *)(v9 + 40);
      *(_OWORD *)(v8 + 24) = v11;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 64) = 0;
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
      *(void *)(v8 + 64) = *(void *)(v9 + 64);
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(void *)(v9 + 64) = 0;
      v8 += 72;
      v9 += 72;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_216873628((uint64_t)&v13, a2, v7, v6);
}

uint64_t sub_216873224(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_216872D88(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216873984(v7, a3, *(long long **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_2168732D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)(a2 + 24);
    do
    {
      long long v7 = *(long long *)((char *)v6 - 24);
      *(void *)(v4 + 16) = *((void *)v6 - 1);
      *(_OWORD *)uint64_t v4 = v7;
      if (*((char *)v6 + 23) < 0)
      {
        sub_216778F24((unsigned char *)(v4 + 24), *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        *(void *)(v4 + 40) = *((void *)v6 + 2);
        *(_OWORD *)(v4 + 24) = v8;
      }
      uint64_t v9 = (uint64_t)v6 - 24;
      *(void *)(v4 + 48) = 0;
      *(void *)(v4 + 56) = 0;
      *(void *)(v4 + 64) = 0;
      sub_2168734BC((void *)(v4 + 48), *((void *)v6 + 3), *((void *)v6 + 4), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)v6 + 4) - *((void *)v6 + 3)) >> 3));
      uint64_t v4 = v14 + 72;
      v14 += 72;
      uint64_t v6 = (long long *)((char *)v6 + 72);
    }
    while (v9 + 72 != a3);
  }
  char v12 = 1;
  sub_21687359C((uint64_t)v11);
  return v4;
}

void sub_2168733D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216873404(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v5;
  uint64_t v6 = (unsigned char *)(a2 + 24);
  if (*((char *)a3 + 47) < 0)
  {
    sub_216778F24(v6, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    *(void *)(a2 + 40) = *((void *)a3 + 5);
    *(_OWORD *)uint64_t v6 = v7;
  }
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  return sub_2168734BC((void *)(a2 + 48), *((void *)a3 + 6), *((void *)a3 + 7), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a3 + 7) - *((void *)a3 + 6)) >> 3));
}

void sub_2168734A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2168734BC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_216873544(result, a4);
    uint64_t result = (void *)sub_2168732D8(v6 + 2, a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216873524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_21686C338(&a9);
  _Unwind_Resume(a1);
}

char *sub_216873544(void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_21677CB10();
  }
  uint64_t result = (char *)sub_216815D10((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t sub_21687359C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168735D4((uint64_t *)a1);
  }
  return a1;
}

void sub_2168735D4(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 72;
      sub_21686C438(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_216873628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 72);
      *(void *)(v9 - 56) = *(void *)(a3 + v7 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      uint64_t v11 = (void **)(a4 + v7 - 48);
      if (*(char *)(a4 + v7 - 25) < 0) {
        operator delete(*v11);
      }
      long long v12 = *(_OWORD *)(v8 - 48);
      *(void *)(a4 + v7 - 32) = *(void *)(v8 - 32);
      *(_OWORD *)uint64_t v11 = v12;
      *(unsigned char *)(v8 - 25) = 0;
      *(unsigned char *)(v8 - 48) = 0;
      sub_2168736F4(v9 - 24);
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(v8 - 24);
      *(void *)(v9 - 8) = *(void *)(v8 - 8);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      v7 -= 72;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void sub_2168736F4(uint64_t a1)
{
  if (*(void *)a1)
  {
    sub_21686C3C4(a1, *(void ***)a1);
    operator delete(*(void **)a1);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t *sub_216873730(uint64_t a1, uint64_t *a2, uint64_t *a3, std::string *a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 7;
  do
  {
    uint64_t v7 = v6 - 7;
    long long v8 = *(_OWORD *)(v6 - 7);
    a4->__r_.__value_.__r.__words[2] = *(v6 - 5);
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v8;
    std::string::operator=(a4 + 1, (const std::string *)(v6 - 4));
    if (a4 != (std::string *)(v6 - 7)) {
      sub_2168737E4(a4[2].__r_.__value_.__r.__words, *(v6 - 1), *v6, 0x8E38E38E38E38E39 * ((*v6 - *(v6 - 1)) >> 3));
    }
    a4 += 3;
    v6 += 9;
  }
  while (v7 + 9 != v5);
  return v5;
}

void sub_2168737E4(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 3) < a4)
  {
    sub_2168736F4((uint64_t)a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      sub_21677CB10();
    }
    unint64_t v9 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 3);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
      unint64_t v10 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v10 = v9;
    }
    sub_216873544(a1, v10);
    uint64_t v11 = sub_2168732D8(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 3) < a4)
  {
    uint64_t v12 = a2 + 8 * ((uint64_t)(a1[1] - *a1) >> 3);
    sub_216873730(&v14, a2, v12);
    uint64_t v11 = sub_2168732D8(v8, v12, a3, a1[1]);
LABEL_11:
    a1[1] = v11;
    return;
  }
  sub_216873730(&v15, a2, a3);

  sub_21686C3C4((uint64_t)a1, v13);
}

void sub_216873974(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_21687397C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_216873984(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _OWORD v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      long long v6 = *(long long *)((char *)a2 + 24);
      *(void *)(v4 + 40) = *((void *)a2 + 5);
      *(_OWORD *)(v4 + 24) = v6;
      *((void *)a2 + 4) = 0;
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 3) = 0;
      *(void *)(v4 + 48) = 0;
      *(void *)(v4 + 56) = 0;
      *(void *)(v4 + 64) = 0;
      *(_OWORD *)(v4 + 48) = a2[3];
      *(void *)(v4 + 64) = *((void *)a2 + 8);
      *((void *)a2 + 6) = 0;
      *((void *)a2 + 7) = 0;
      *((void *)a2 + 8) = 0;
      v4 += 72;
      a2 = (long long *)((char *)a2 + 72);
    }
    while (a2 != a3);
    uint64_t v11 = v4;
  }
  char v9 = 1;
  sub_21687359C((uint64_t)v8);
  return v4;
}

uint64_t sub_216873A3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  v17[4] = a1 + 2;
  uint64_t v10 = (char *)sub_216815D10(v7, v9);
  uint64_t v11 = &v10[72 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[72 * v12];
  uint64_t v13 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = v13;
  uint64_t v14 = *(void *)(a2 + 40);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = v14;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 6) = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((void *)v11 + 8) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  v17[2] = v11 + 72;
  sub_216872D10(a1, v17);
  uint64_t v15 = a1[1];
  sub_216872EE8((uint64_t)v17);
  return v15;
}

void sub_216873B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216872EE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216873B88(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216873BDC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_216873BDC(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      long long v6 = *(void **)(v4 - 24);
      v4 -= 24;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_216873C34(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 v4 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v4)
  {
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, 0, a3);
    *(void *)a1 = v7;
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a3, v7, v8);
      int v5 = 2;
    }
    else
    {
      int v5 = 0;
    }
  }
  else
  {
    int v5 = 0;
    *(void *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t *sub_216873CA8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v12 = *result;
  uint64_t v3 = *a2;
  __dmb(0xBu);
  *uint64_t result = v3;
  uint64_t v4 = v12;
  __dmb(0xBu);
  *a2 = v4;
  uint64_t v13 = result[65];
  uint64_t v5 = a2[65];
  __dmb(0xBu);
  result[65] = v5;
  uint64_t v6 = v13;
  __dmb(0xBu);
  a2[65] = v6;
  uint64_t v7 = result[68];
  result[68] = a2[68];
  a2[68] = v7;
  uint64_t v8 = result[71];
  result[71] = a2[71];
  a2[71] = v8;
  unint64_t v9 = result + 2;
  uint64_t v10 = a2 + 2;
  do
  {
    uint64_t v11 = v9[v2];
    v9[v2] = v10[v2];
    v10[v2++] = v11;
  }
  while (v2 != 63);
  return result;
}

void *sub_216873D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = sub_216863490(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_216873D88(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_216873D90(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_216863490(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  sub_216873EA8(a1, v14);
  uint64_t v12 = a1[1];
  sub_216874044((uint64_t)v14);
  return v12;
}

void sub_216873E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216874044((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216873EA8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216873F20((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216873F20(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216873FC4((uint64_t)v11);
  return v9;
}

uint64_t sub_216873FC4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216873FFC(a1);
  }
  return a1;
}

void sub_216873FFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_216874044(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_21687407C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t sub_2168740D8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216874150((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216874150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v8 - 8) = *(void *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216874200((uint64_t)v12);
  return v10;
}

uint64_t sub_216874200(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216870910(a1);
  }
  return a1;
}

void *sub_216874238(void *result, long long *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(void *)(v4 + 24) = *((void *)a2 + 3);
  v3[1] = v4 + 32;
  return result;
}

void sub_2168742A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2168742A8(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = sub_2168707F4(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (char *)&v10[4 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  uint64_t v17 = (char *)&v10[4 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  v10[4 * v4 + 3] = *((void *)a2 + 3);
  unint64_t v16 = v11 + 32;
  sub_2168740D8(a1, v15);
  uint64_t v13 = a1[1];
  sub_216870958((uint64_t)v15);
  return v13;
}

void sub_2168743A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216870958((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *this, const void *a2)
{
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_BeginDelivery(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance();
  }

  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BeginDelivery(v7, a2, a3, a4, a5, a6, a7);
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance();
  }

  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_EndDelivery(v3, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::TfNotice::Probe::~Probe(pxrInternal__aapl__pxrReserved__::TfNotice::Probe *this, const void *a2)
{
}

unint64_t pxrInternal__aapl__pxrReserved__::TfNotice::InsertProbe(void *a1)
{
  uint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance();
  }

  return pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_InsertProbe(v2, a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfNotice::RemoveProbe(uint64_t a1)
{
  uint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance();
  }

  return pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_RemoveProbe(v2, a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_Register@<X0>(pxrInternal__aapl__pxrReserved__::TfNotice *this@<X0>, char **a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance();
  }

  return pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Register(v4, this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_Send(pxrInternal__aapl__pxrReserved__::TfNotice *this, const std::type_info *a2, char *a3, const std::type_info *a4)
{
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v10 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)(*(void *)this - 8), a2, a3);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance();
  }
  return pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Send(v8, this, (const pxrInternal__aapl__pxrReserved__::TfType *)&v10, (const pxrInternal__aapl__pxrReserved__::TfWeakBase *)a2, (uint64_t)a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_SendWithType(pxrInternal__aapl__pxrReserved__::TfNotice *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, const pxrInternal__aapl__pxrReserved__::TfWeakBase *a3, uint64_t a4, const std::type_info *a5)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance();
  }

  return pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Send(v6, this, a2, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::Send(pxrInternal__aapl__pxrReserved__::TfNotice *this)
{
  return pxrInternal__aapl__pxrReserved__::TfNotice::_Send(this, 0, 0, MEMORY[0x263F8C288]);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::SendWithWeakBase(pxrInternal__aapl__pxrReserved__::TfNotice *this, const std::type_info *a2, char *a3, const std::type_info *a4)
{
  if (!a2) {
    a4 = (const std::type_info *)MEMORY[0x263F8C288];
  }
  return pxrInternal__aapl__pxrReserved__::TfNotice::_Send(this, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::TfNotice::Revoke(uint64_t *a1)
{
  BOOL v2 = sub_2168749F0(a1);
  if (v2)
  {
    uint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
    if (!v3) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance();
    }
    pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Revoke(v3, a1);
  }
  return v2;
}

atomic_uint *pxrInternal__aapl__pxrReserved__::TfNotice::Revoke(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v8 = v4;
  uint64_t v9 = v5;
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = (uint64_t *)sub_2168747F4(&v8, v4, a3);
      pxrInternal__aapl__pxrReserved__::TfNotice::Revoke(v6);
      sub_216874874(&v8);
    }
    while (v8 != v9);
    uint64_t v4 = *a1;
  }
  return sub_216850C48((atomic_uint *)a1, v4);
}

uint64_t sub_2168747F4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    uint64_t v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfNotic"
            "e::Key>>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfNotice::Key>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_21687486C()
{
}

void *sub_216874874(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::TfNotice::Key>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfNotice::Key>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_VerifyFailedCast(std::type_info *this, const std::type_info *a2, const pxrInternal__aapl__pxrReserved__::TfNotice *a3, const pxrInternal__aapl__pxrReserved__::TfNotice *a4)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance();
  }

  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_VerifyFailedCast(v5, this, (const pxrInternal__aapl__pxrReserved__::TfNotice *)a2, a3);
}

pxrInternal__aapl__pxrReserved__::TfNotice::Block *pxrInternal__aapl__pxrReserved__::TfNotice::Block::Block(pxrInternal__aapl__pxrReserved__::TfNotice::Block *this)
{
  BOOL v2 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_IncrementBlockCount(v2);
  return this;
}

void pxrInternal__aapl__pxrReserved__::TfNotice::Block::~Block(pxrInternal__aapl__pxrReserved__::TfNotice::Block *this)
{
  uint64_t v1 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_DecrementBlockCount(v1);
}

BOOL sub_2168749F0(uint64_t *a1)
{
  BOOL v2 = sub_2168500F0(a1);
  return v3 & 1 | (unint64_t)v2 && *(unsigned char *)(sub_21684F4EC(a1) + 32) != 0;
}

void pxrInternal__aapl__pxrReserved__::TfRealPath(std::string *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v17 = 0;
  if (a3)
  {
    int v7 = (void **)a3;
    if (*(char *)(a3 + 23) < 0)
    {
      **(unsigned char **)a3 = 0;
      *(void *)(a3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 23) = 0;
    }
  }
  else
  {
    int v7 = v16;
  }
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&this->__r_.__value_.__s + 23))
    {
      memset(&v15, 0, sizeof(v15));
      std::string __p = *this;
      goto LABEL_11;
    }
LABEL_15:
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_39;
  }
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  if (!size) {
    goto LABEL_15;
  }
  memset(&v15, 0, sizeof(v15));
  sub_216778F24(&__p, this->__r_.__value_.__l.__data_, size);
LABEL_11:
  if (!a2) {
    goto LABEL_22;
  }
  std::string::size_type LongestAccessiblePrefix = pxrInternal__aapl__pxrReserved__::TfFindLongestAccessiblePrefix(this, (uint64_t)v7);
  if ((*((char *)v7 + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)v7 + 23)) {
      goto LABEL_17;
    }
LABEL_34:
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_35;
  }
  if (v7[1]) {
    goto LABEL_34;
  }
LABEL_17:
  std::string::basic_string(&__dst, this, 0, LongestAccessiblePrefix, (std::allocator<char> *)v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = __dst;
  sub_2168757E0(&__dst, (uint64_t *)this, LongestAccessiblePrefix);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  std::string v15 = __dst;
LABEL_22:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_27;
    }
  }
  else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
    p_p = &__p;
LABEL_27:
    if (realpath_DARWIN_EXTSN((const char *)p_p, (char *)&__dst))
    {
      std::operator+<char>();
      pxrInternal__aapl__pxrReserved__::ArchAbsPath((uint64_t)v12, a4);
      if (SHIBYTE(v13) < 0) {
        operator delete(v12[0]);
      }
      goto LABEL_35;
    }
    uint64_t v11 = __error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v11, v12);
    if (*((char *)v7 + 23) < 0) {
      operator delete(*v7);
    }
    *(_OWORD *)int v7 = *(_OWORD *)v12;
    uint64_t v7[2] = v13;
    goto LABEL_34;
  }
  pxrInternal__aapl__pxrReserved__::ArchAbsPath((uint64_t)&v15, a4);
LABEL_35:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
LABEL_39:
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
}

void sub_216874CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type pxrInternal__aapl__pxrReserved__::TfFindLongestAccessiblePrefix(std::string *this, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v42 = 0;
  std::string::size_type v43 = 0;
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v5 = this;
  }
  else {
    uint64_t v5 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::size_type v6 = 0;
    while (v5->__r_.__value_.__s.__data_[v6] == 47)
    {
      if (size == ++v6) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    std::string::size_type v6 = -1;
  }
  std::string::size_type v7 = std::string::find(this, 47, v6);
  if (v7 == -1)
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = this->__r_.__value_.__l.__size_;
    }
  }
  else
  {
    for (std::string::size_type i = v7; i != -1; std::string::size_type i = std::string::find(this, 47, i + 1))
    {
      uint64_t v9 = v42;
      if (v42 >= v43)
      {
        uint64_t v11 = (char *)__p;
        uint64_t v12 = (v42 - (unsigned char *)__p) >> 3;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v14 = v43 - (unsigned char *)__p;
        if ((v43 - (unsigned char *)__p) >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          unint64_t v16 = (char *)sub_21677CB28((uint64_t)&v43, v15);
          uint64_t v11 = (char *)__p;
          uint64_t v9 = v42;
        }
        else
        {
          unint64_t v16 = 0;
        }
        uint64_t v17 = (std::string::size_type *)&v16[8 * v12];
        *uint64_t v17 = i;
        uint64_t v10 = (char *)(v17 + 1);
        while (v9 != v11)
        {
          std::string::size_type v18 = *((void *)v9 - 1);
          v9 -= 8;
          *--uint64_t v17 = v18;
        }
        std::string __p = v17;
        uint64_t v42 = v10;
        std::string::size_type v43 = &v16[8 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(void *)uint64_t v42 = i;
        uint64_t v10 = v9 + 8;
      }
      uint64_t v42 = v10;
    }
    uint64_t v20 = v42;
    uint64_t v19 = v43;
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = this->__r_.__value_.__l.__size_;
    }
    if (v42 < v43)
    {
      *(void *)uint64_t v42 = v21;
      uint64_t v22 = v20 + 8;
      goto LABEL_52;
    }
  }
  uint64_t v23 = (char *)__p;
  uint64_t v24 = (v20 - (unsigned char *)__p) >> 3;
  unint64_t v25 = v24 + 1;
  if ((unint64_t)(v24 + 1) >> 61) {
    sub_21677CB10();
  }
  uint64_t v26 = v19 - (unsigned char *)__p;
  if (v26 >> 2 > v25) {
    unint64_t v25 = v26 >> 2;
  }
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v27 = v25;
  }
  if (v27)
  {
    uint64_t v28 = (char *)sub_21677CB28((uint64_t)&v43, v27);
    uint64_t v23 = (char *)__p;
    uint64_t v20 = v42;
  }
  else
  {
    uint64_t v28 = 0;
  }
  uint64_t v29 = (std::string::size_type *)&v28[8 * v24];
  uint64_t v30 = &v28[8 * v27];
  *uint64_t v29 = v21;
  uint64_t v22 = (char *)(v29 + 1);
  while (v20 != v23)
  {
    std::string::size_type v31 = *((void *)v20 - 1);
    v20 -= 8;
    *--uint64_t v29 = v31;
  }
  std::string __p = v29;
  uint64_t v42 = v22;
  std::string::size_type v43 = v30;
  if (v23) {
    operator delete(v23);
  }
LABEL_52:
  uint64_t v42 = v22;
  BOOL v32 = (char *)__p;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_216778F24(&v38, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v38 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
    std::string::size_type v39 = this->__r_.__value_.__r.__words[2];
  }
  uint64_t v40 = a2;
  if (v22 != v32)
  {
    unint64_t v33 = (v22 - v32) >> 3;
    uint64_t v22 = v32;
    do
    {
      uint64_t v34 = &v22[8 * (v33 >> 1)];
      int v35 = ((uint64_t (*)(long long *, void, uint64_t, uint64_t))sub_2168750B0)(&v38, *(void *)v34, -1, v40);
      if (v35) {
        v33 += ~(v33 >> 1);
      }
      else {
        v33 >>= 1;
      }
      if (v35) {
        uint64_t v22 = v34 + 8;
      }
    }
    while (v33);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v22 == __p)
  {
    std::string::size_type v36 = 0;
    if (!__p) {
      return v36;
    }
    goto LABEL_73;
  }
  if (v22 != v42)
  {
    std::string::size_type v36 = *((void *)v22 - 1);
    if (!__p) {
      return v36;
    }
    goto LABEL_73;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v36 = this->__r_.__value_.__l.__size_;
    if (!__p) {
      return v36;
    }
    goto LABEL_73;
  }
  std::string::size_type v36 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (__p)
  {
LABEL_73:
    uint64_t v42 = (char *)__p;
    operator delete(__p);
  }
  return v36;
}

void sub_21687506C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2168750B0(std::string *a1, std::string::size_type a2, std::string::size_type __n, uint64_t a4)
{
  if (a2 == __n) {
    return 0;
  }
  if (a2 == -1) {
    return !sub_216875634(a1, __n, a4);
  }
  if (__n != -1) {
    return a2 < __n;
  }
  return sub_216875634(a1, a2, a4);
}

void pxrInternal__aapl__pxrReserved__::TfGetExtension(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E400, memory_order_acquire) & 1) == 0)
  {
    uint64_t v7 = a1;
    int v6 = __cxa_guard_acquire(&qword_26798E400);
    a1 = v7;
    if (v6)
    {
      xmmword_26798E3E8 = 0uLL;
      unk_26798E3F8 = 0;
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26798E3E8, &dword_216758000);
      __cxa_guard_release(&qword_26798E400);
      a1 = v7;
    }
  }
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::TfGetBaseName((std::string *)a1, &__p);
    pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix((uint64_t)&__p, 46, &v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = v8.__r_.__value_.__l.__size_;
      operator delete(v8.__r_.__value_.__l.__data_);
      if (size) {
        goto LABEL_7;
      }
    }
    else if (*((unsigned char *)&v8.__r_.__value_.__s + 23))
    {
LABEL_7:
      pxrInternal__aapl__pxrReserved__::TfStringGetSuffix(&__p, 46, a2);
LABEL_17:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return;
    }
    if (byte_26798E3FF < 0)
    {
      sub_216778F24(a2, (void *)xmmword_26798E3E8, *((unint64_t *)&xmmword_26798E3E8 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = xmmword_26798E3E8;
      a2->__r_.__value_.__r.__words[2] = unk_26798E3F8;
    }
    goto LABEL_17;
  }
  if (byte_26798E3FF < 0)
  {
    long long v5 = xmmword_26798E3E8;
    sub_216778F24(a2, (void *)v5, *((unint64_t *)&v5 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = xmmword_26798E3E8;
    a2->__r_.__value_.__r.__words[2] = unk_26798E3F8;
  }
}

void sub_2168752B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfReadLink(char *a1@<X0>, void *a2@<X8>)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  pxrInternal__aapl__pxrReserved__::ArchReadLink((pxrInternal__aapl__pxrReserved__ *)a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::TfIsRelativePath(unsigned __int8 *a1)
{
  if (((char)a1[23] & 0x80000000) == 0)
  {
    if (!a1[23]) {
      return 1;
    }
    return *a1 != 47;
  }
  if (*((void *)a1 + 1))
  {
    a1 = *(unsigned __int8 **)a1;
    return *a1 != 47;
  }
  return 1;
}

void pxrInternal__aapl__pxrReserved__::TfGlob(const char **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  long long v5 = *a1;
  if (v5 == a1[1])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    unsigned int v7 = a2 & 0xFFFFFFFE;
    if (v5[23] < 0) {
      long long v5 = *(const char **)v5;
    }
    glob(v5, v7, 0, &v31);
    std::string v8 = *a1;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) >= 2)
    {
      uint64_t v9 = 0;
      int v10 = a2 | 1;
      unint64_t v11 = 1;
      do
      {
        uint64_t v12 = (uint64_t *)&v8[v9];
        unint64_t v13 = (const char *)(v12 + 3);
        if (*((char *)v12 + 47) < 0) {
          unint64_t v13 = *(const char **)v13;
        }
        glob(v13, v10, 0, &v31);
        ++v11;
        std::string v8 = *a1;
        v9 += 24;
      }
      while (v11 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    size_t gl_pathc = v31.gl_pathc;
    if (v31.gl_pathc)
    {
      size_t v15 = 0;
      do
      {
        unint64_t v16 = v31.gl_pathv[v15];
        if (v16)
        {
          sub_216779094(__p, v16);
          unint64_t v18 = a3[1];
          unint64_t v17 = a3[2];
          if (v18 >= v17)
          {
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a3) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a3) >> 3);
            if (2 * v22 > v21) {
              unint64_t v21 = 2 * v22;
            }
            if (v22 >= 0x555555555555555) {
              unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v23 = v21;
            }
            v32[4] = a3 + 2;
            if (v23) {
              uint64_t v24 = (char *)sub_216782ED8((uint64_t)(a3 + 2), v23);
            }
            else {
              uint64_t v24 = 0;
            }
            unint64_t v25 = &v24[24 * v20];
            v32[0] = v24;
            v32[1] = v25;
            v32[3] = &v24[24 * v23];
            long long v26 = *(_OWORD *)__p;
            *((void *)v25 + 2) = v30;
            *(_OWORD *)unint64_t v25 = v26;
            __p[1] = 0;
            uint64_t v30 = 0;
            __p[0] = 0;
            v32[2] = v25 + 24;
            sub_216790CCC(a3, v32);
            uint64_t v27 = a3[1];
            sub_216790E64((uint64_t)v32);
            int v28 = SHIBYTE(v30);
            a3[1] = v27;
            if (v28 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v19 = *(_OWORD *)__p;
            *(void *)(v18 + 16) = v30;
            *(_OWORD *)unint64_t v18 = v19;
            a3[1] = v18 + 24;
          }
          size_t gl_pathc = v31.gl_pathc;
        }
        ++v15;
      }
      while (v15 < gl_pathc);
    }
    globfree(&v31);
  }
}

void sub_21687554C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void pxrInternal__aapl__pxrReserved__::TfGlob(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    sub_2168758C4(v6, 1uLL, (long long *)a1);
    pxrInternal__aapl__pxrReserved__::TfGlob(v6, a2, a3);
    unsigned int v7 = v6;
    sub_216782F20((void ***)&v7);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_21687561C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_216875634(std::string *__str, std::string::size_type __n, uint64_t a3)
{
  std::string::basic_string(&v9, __str, 0, __n, (std::allocator<char> *)&v8);
  *__error() = 0;
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)&v9, 0))
  {
    if (!pxrInternal__aapl__pxrReserved__::TfIsLink((const char *)&v9)
      || pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)&v9, 1))
    {
      sub_21687575C(a3);
LABEL_7:
      if (*(char *)(a3 + 23) < 0) {
        uint64_t v4 = *(void *)(a3 + 8);
      }
      else {
        uint64_t v4 = *(unsigned __int8 *)(a3 + 23);
      }
      BOOL v5 = v4 == 0;
      goto LABEL_12;
    }
    v7.n128_f64[0] = sub_21687575C(a3);
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8)) {
        goto LABEL_7;
      }
    }
    else if (*(unsigned char *)(a3 + 23))
    {
      goto LABEL_7;
    }
    MEMORY[0x21D4477E0](a3, "encountered dangling symbolic link", v7);
    goto LABEL_7;
  }
  sub_21687575C(a3);
  BOOL v5 = 0;
LABEL_12:
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_216875740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_21687575C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      return result;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
    return result;
  }
  if (*__error())
  {
    pxrInternal__aapl__pxrReserved__::ArchStrerror(&v3);
  }
  else
  {
    long long v3 = 0uLL;
    uint64_t v4 = 0;
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  return result;
}

void *sub_2168757E0(void *__dst, uint64_t *a2, unint64_t a3)
{
  uint64_t v4 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v6 = a2[1];
    if (v6 < a3) {
      goto LABEL_15;
    }
    uint64_t v4 = (uint64_t *)*a2;
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a2 + 23);
    if (v6 < a3) {
LABEL_15:
    }
      sub_216855AD4();
  }
  size_t v7 = v6 - a3;
  if (v6 - a3 >= 0x7FFFFFFFFFFFFFF8) {
    sub_216778FC4();
  }
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    char v8 = operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = v10 | 0x8000000000000000;
    *std::string __dst = v8;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v7;
    char v8 = __dst;
    if (v6 == a3) {
      goto LABEL_14;
    }
  }
  memmove(v8, (char *)v4 + a3, v7);
LABEL_14:
  *((unsigned char *)v8 + v7) = 0;
  return __dst;
}

void *sub_2168758C4(void *a1, unint64_t a2, long long *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216782E84(a1, a2);
    uint64_t v6 = a1[1];
    uint64_t v7 = 3 * a2;
    uint64_t v8 = v6 + 24 * a2;
    uint64_t v9 = 8 * v7;
    do
    {
      if (*((char *)a3 + 23) < 0)
      {
        sub_216778F24((unsigned char *)v6, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v10 = *a3;
        *(void *)(v6 + 16) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v6 = v10;
      }
      v6 += 24;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_21687596C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

double pxrInternal__aapl__pxrReserved__::TfPatternMatcher::TfPatternMatcher(pxrInternal__aapl__pxrReserved__::TfPatternMatcher *this)
{
  *(_WORD *)this = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 10) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  return result;
}

{
  double result;

  *(_WORD *)this = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 32) = 1;
  *((_DWORD *)this + 10) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfPatternMatcher::TfPatternMatcher(uint64_t a1, long long *a2, char a3, char a4)
{
  *(unsigned char *)a1 = a3;
  *(unsigned char *)(a1 + 1) = a4;
  uint64_t v5 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)v5, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(unsigned char *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfPatternMatcher::~TfPatternMatcher(void **this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void *pxrInternal__aapl__pxrReserved__::TfPatternMatcher::GetInvalidReason@<X0>(pxrInternal__aapl__pxrReserved__::TfPatternMatcher *this@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfPatternMatcher::_Compile(this);

  return pxrInternal__aapl__pxrReserved__::ArchRegex::GetError((void *)this + 5, a2);
}

void pxrInternal__aapl__pxrReserved__::TfPatternMatcher::_Compile(pxrInternal__aapl__pxrReserved__::TfPatternMatcher *this)
{
  if (*((unsigned char *)this + 32))
  {
    *((unsigned char *)this + 32) = 0;
    pxrInternal__aapl__pxrReserved__::ArchRegex::ArchRegex(v2, (char *)this + 8, (*(unsigned char *)this == 0) | (2 * *((unsigned __int8 *)this + 1)));
    sub_216875D50((uint64_t)this + 40, (uint64_t)v2);
    pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)v2);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::TfPatternMatcher::IsValid(pxrInternal__aapl__pxrReserved__::TfPatternMatcher *this)
{
  pxrInternal__aapl__pxrReserved__::TfPatternMatcher::_Compile(this);

  return pxrInternal__aapl__pxrReserved__::ArchRegex::operator BOOL((uint64_t)this + 40);
}

const regex_t *pxrInternal__aapl__pxrReserved__::TfPatternMatcher::Match(pxrInternal__aapl__pxrReserved__::TfPatternMatcher *a1, const char *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::TfPatternMatcher::_Compile(a1);
  long long v6 = (void *)((char *)a1 + 40);
  if (pxrInternal__aapl__pxrReserved__::ArchRegex::operator BOOL((uint64_t)v6))
  {
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(unsigned char **)a3 = 0;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 23) = 0;
      }
    }
    return pxrInternal__aapl__pxrReserved__::ArchRegex::Match((uint64_t)v6, a2);
  }
  else
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::ArchRegex::GetError(v6, &v8);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v8;
      *(void *)(a3 + 16) = v9;
    }
    return 0;
  }
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::TfPatternMatcher::SetIsCaseSensitive(unsigned __int8 *this, int a2)
{
  if (*this != a2)
  {
    this[32] = 1;
    *this = a2;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfPatternMatcher::SetIsGlobPattern(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 1) != a2)
  {
    *(unsigned char *)(this + 32) = 1;
    *(unsigned char *)(this + 1) = a2;
  }
  return this;
}

std::string *pxrInternal__aapl__pxrReserved__::TfPatternMatcher::SetPattern(std::string *result, std::string *__str)
{
  long long v3 = result;
  uint64_t v4 = (std::string *)&result->__r_.__value_.__r.__words[1];
  uint64_t v5 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  std::string::size_type size = __str->__r_.__value_.__l.__size_;
  if ((v5 & 0x80u) == 0) {
    std::string::size_type v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __str->__r_.__value_.__l.__size_;
  }
  std::string::size_type v8 = result[1].__r_.__value_.__s.__data_[7];
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    std::string::size_type v8 = result->__r_.__value_.__r.__words[2];
  }
  if (v7 == v8)
  {
    if (v9 >= 0) {
      long long v10 = &result->__r_.__value_.__s.__data_[8];
    }
    else {
      long long v10 = (std::string::value_type *)v4->__r_.__value_.__r.__words[0];
    }
    if ((v5 & 0x80) != 0)
    {
      double result = (std::string *)memcmp(__str->__r_.__value_.__l.__data_, v10, size);
      if (!result) {
        return result;
      }
    }
    else
    {
      if (!v5) {
        return result;
      }
      for (std::string::size_type i = __str; i->__r_.__value_.__s.__data_[0] == *v10; std::string::size_type i = (std::string *)((char *)i + 1))
      {
        ++v10;
        if (!--v5) {
          return result;
        }
      }
    }
  }
  v3[1].__r_.__value_.__s.__data_[8] = 1;

  return std::string::operator=(v4, __str);
}

uint64_t sub_216875D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v5);
  }
  long long v6 = *v4;
  *(void *)(v5 + 16) = *((void *)v4 + 2);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  std::string::size_type v8 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v7;
  if (v8) {
    sub_216784EC4(v8);
  }
  return a1;
}

__n128 pxrInternal__aapl__pxrReserved__::TfRefBase::SetUniqueChangedListener(__n128 *a1, uint64_t a2, char *a3)
{
  if (pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *(&pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener + 1) == 0;
  }
  if (!v3 || off_267B99A78 != 0)
  {
    v6[0] = "tf/refBase.cpp";
    v6[1] = "SetUniqueChangedListener";
    _OWORD v6[2] = 44;
    v6[3] = "static void pxrInternal__aapl__pxrReserved__::TfRefBase::SetUniqueChangedListener(UniqueChangedListener)";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"Setting an already set UniqueChangedListener", a3);
  }
  __n128 result = *a1;
  off_267B99A78 = (uint64_t (*)(void))a1[1].n128_u64[0];
  *(__n128 *)&pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked(uint64_t this, const pxrInternal__aapl__pxrReserved__::TfRefBase *a2)
{
  uint64_t v2 = this;
  if (a2 == -1)
  {
LABEL_5:
    pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener();
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF, memory_order_relaxed) == -1) {
      ((void (*)(uint64_t, void))*(&pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener + 1))(v2, 0);
    }
    uint64_t v4 = (uint64_t (*)(void))off_267B99A78;
    return v4();
  }
  else
  {
    int v3 = (int)a2;
    while (1)
    {
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(this + 8), (unsigned int *)&v3, a2 - 1, memory_order_relaxed, memory_order_relaxed);
      if (v3 == a2) {
        break;
      }
      LODWORD(a2) = v3;
      if (v3 == -1) {
        goto LABEL_5;
      }
    }
  }
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked(atomic_uint *this, const pxrInternal__aapl__pxrReserved__::TfRefBase *a2)
{
  if (a2 == -2)
  {
LABEL_5:
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener();
    unsigned int add_explicit = atomic_fetch_add_explicit(this + 2, 1u, memory_order_release);
    if (add_explicit == -2) {
      uint64_t v5 = ((uint64_t (*)(atomic_uint *, uint64_t))*(&pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener
    }
                                                            + 1))(this, 1);
    off_267B99A78(v5);
  }
  else
  {
    unsigned int add_explicit = a2;
    unsigned int v4 = a2;
    while (1)
    {
      atomic_compare_exchange_strong_explicit(this + 2, &v4, add_explicit + 1, memory_order_release, memory_order_relaxed);
      if (v4 == add_explicit) {
        break;
      }
      unsigned int add_explicit = v4;
      if (v4 == -2) {
        goto LABEL_5;
      }
    }
  }
  return add_explicit == -1;
}

BOOL pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::AddRefIfNonzero(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *this, const pxrInternal__aapl__pxrReserved__::TfRefBase *a2)
{
  int v3 = atomic_load((unsigned int *)this + 2);
  if (v3 >= 1)
  {
    int v4 = v3;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_uint *volatile)this + 2, (unsigned int *)&v4, v3 + 1);
      if (v4 == v3) {
        return 1;
      }
      int v3 = v4;
      if (v4 <= 0)
      {
        if ((v4 & 0x80000000) == 0) {
          return 0;
        }
        goto LABEL_9;
      }
    }
  }
  int v4 = v3;
  if ((v3 & 0x80000000) == 0) {
    return 0;
  }
LABEL_9:
  if (v4 != -1)
  {
    unsigned int v6 = v4 - 1;
    int v7 = v4;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_uint *volatile)this + 2, (unsigned int *)&v7, v6);
      if (v7 == v4) {
        return 1;
      }
      int v4 = v7;
      unsigned int v6 = v7 - 1;
      if ((v7 - 1) >= 0xFFFFFFFE)
      {
        if (!v7) {
          return 0;
        }
        break;
      }
    }
  }
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener();
  int v9 = -1;
  int v10 = -1;
  while (1)
  {
    atomic_compare_exchange_strong((atomic_uint *volatile)this + 2, (unsigned int *)&v10, v9 - 1);
    BOOL v5 = v10 == v9;
    if (v10 == v9) {
      break;
    }
    int v9 = v10;
    if (!v10) {
      goto LABEL_21;
    }
  }
  if (v9 == -1) {
    uint64_t v8 = ((uint64_t (*)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, void))*(&pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener + 1))(this, 0);
  }
LABEL_21:
  off_267B99A78(v8);
  return v5;
}

void pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError(uint64_t a1, pxrInternal__aapl__pxrReserved__ *this)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v2;
  uint64_t v8 = *(void *)(a1 + 32);
  int v9 = 4;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled(this, (uint64_t)v5);
  if (v6 >= 0) {
    int v4 = v5;
  }
  else {
    int v4 = (void *)v5[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"attempted member lookup on NULL %s", v3, v4);
}

void sub_21687612C(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::string::~string((std::string *)&a10);
  unint64_t v16 = (_Unwind_Exception *)pxrInternal__aapl__pxrReserved__::ArchAbort((pxrInternal__aapl__pxrReserved__ *)1, v15);
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(v16);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217411E26 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  long long v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      BOOL v5 = (char *)operator new(0xA0uLL);
      *(void *)BOOL v5 = 0;
      *((void *)v5 + 1) = 850045863;
      *((_OWORD *)v5 + 1) = 0u;
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *((void *)v5 + 8) = 0;
      *((void *)v5 + 9) = 20;
      *((_OWORD *)v5 + 5) = 0u;
      *((_OWORD *)v5 + 6) = 0u;
      *((_DWORD *)v5 + 28) = 1065353216;
      *(_OWORD *)(v5 + 120) = 0u;
      *(_OWORD *)(v5 + 136) = 0u;
      *((_DWORD *)v5 + 38) = 1065353216;
      unint64_t v7 = atomic_load(a1);
      if (v7)
      {
        if (v5 != (char *)v7)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          unint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracke"
                "r>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TfRefPtrTracker]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v6);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v5))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        unint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>"
              "::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TfRefPtrTracker]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v6, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker*> &)::isInitializing);
  }
  unint64_t v9 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v9;
}

void sub_216876364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::SetInstanceConstructed(unint64_t result)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_instance, result))
  {
    uint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TfRefPtrTracker]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::DeleteInstance()
{
  for (std::string::size_type i = (pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_instance);
        i;
        std::string::size_type i = v1)
  {
    uint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_instance, (unint64_t *)&v1, 0);
    if (v1 == i)
    {
      pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::~TfRefPtrTracker(i);
      operator delete(v2);
      return;
    }
    sched_yield();
  }
}

double pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::TfRefPtrTracker(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 850045863;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 20;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  return result;
}

{
  double result;

  *(void *)this = 0;
  *((void *)this + 1) = 850045863;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 20;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::~TfRefPtrTracker(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this)
{
  sub_216862C74((uint64_t)this + 120);
  sub_216850320((uint64_t)this + 80);
  std::mutex::~mutex((std::mutex *)((char *)this + 8));

  sub_216859A88((uint64_t *)this, v2);
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::_Watch(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this, const pxrInternal__aapl__pxrReserved__::TfRefBase *a2)
{
  char v4 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  long long v5 = (unint64_t)a2;
  sub_216877674((uint64_t)this + 80, &v5, &v5);
  std::mutex::unlock(v4);
}

void sub_2168765F0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::_Unwatch(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this, const pxrInternal__aapl__pxrReserved__::TfRefBase *a2)
{
  char v4 = a2;
  long long v3 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  sub_2168778A8((void *)this + 10, &v4);
  std::mutex::unlock(v3);
}

void sub_216876650(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::_AddTrace(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  char v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  unint64_t v7 = sub_2168503EC((void *)(a1 + 120), &v12);
  if (v7)
  {
    uint64_t v8 = sub_2168503EC((void *)(a1 + 80), v7 + 6);
    if (v8) {
      --v8[3];
    }
  }
  unint64_t v9 = sub_2168503EC((void *)(a1 + 80), &v11);
  if (v9)
  {
    ++v9[3];
    uint64_t v13 = &v12;
    int v10 = sub_216877924(a1 + 120, &v12, (uint64_t)&unk_2174BFD90, &v13);
    pxrInternal__aapl__pxrReserved__::ArchGetStackFrames(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 72), 2, (uint64_t *)v10 + 3);
    *((void *)v10 + 6) = v11;
    *((_DWORD *)v10 + 14) = a4;
  }
  else if (v7)
  {
    sub_216877B98((void *)(a1 + 120), v7);
  }
  std::mutex::unlock(v6);
}

void sub_216876760(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::_RemoveTraces(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this, const void *a2)
{
  char v6 = a2;
  long long v3 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  char v4 = sub_2168503EC((void *)this + 15, &v6);
  if (v4)
  {
    long long v5 = sub_2168503EC((void *)this + 10, v4 + 6);
    if (v5) {
      --v5[3];
    }
    sub_216877B98((void *)this + 15, v4);
  }
  std::mutex::unlock(v3);
}

void sub_216876808(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::GetWatchedCounts(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  sub_216877BE4(a2, (uint64_t)this + 80);

  std::mutex::unlock(v4);
}

void sub_216876878(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::GetAllTraces(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  sub_216877C5C(a2, (uint64_t)this + 120);

  std::mutex::unlock(v4);
}

void sub_2168768E4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::ReportAllWatchedCounts(uint64_t a1, void *a2)
{
  char v4 = sub_216779180(a2, (uint64_t)"TfRefPtrTracker watched counts:", 31);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  long long v5 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  uint64_t result = std::ostream::flush();
  uint64_t v19 = *(void *)(a1 + 96);
  uint64_t v20 = 0;
  if (v19)
  {
    unint64_t v7 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      sub_216779180(a2, (uint64_t)"  ", 2);
      sub_216876B8C(&v19);
      uint64_t v8 = (void *)std::ostream::operator<<();
      sub_216779180(v8, (uint64_t)": ", 2);
      sub_216876B8C(&v19);
      unint64_t v9 = (void *)std::ostream::operator<<();
      int v10 = sub_216779180(v9, (uint64_t)" (type ", 7);
      uint64_t v11 = sub_216876B8C(&v19);
      sub_216876C18(*(void **)(*v11 + 16), __p);
      if ((v18 & 0x80u) == 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      if ((v18 & 0x80u) == 0) {
        uint64_t v13 = v18;
      }
      else {
        uint64_t v13 = (uint64_t)__p[1];
      }
      int v14 = sub_216779180(v10, (uint64_t)v12, v13);
      BOOL v15 = sub_216779180(v14, (uint64_t)")", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
      uint64_t v16 = std::locale::use_facet(&v21, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v21);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v18 < 0) {
        operator delete(__p[0]);
      }
      uint64_t result = sub_216876C4C((uint64_t)&v19);
    }
    while (v19 != v20);
  }
  return result;
}

void sub_216876B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::locale a17)
{
}

void *sub_216876B8C(void *result)
{
  if (*result == result[1])
  {
    uint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TfHashMap<con"
            "st pxrInternal__aapl__pxrReserved__::TfRefBase *, unsigned long, pxrInternal__aapl__pxrReserved__::TfHash>>:"
            ":operator->() [T = const pxrInternal__aapl__pxrReserved__::TfHashMap<const pxrInternal__aapl__pxrReserved__:"
            ":TfRefBase *, unsigned long, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

void sub_216876C18(void *a1@<X0>, void *a2@<X8>)
{
  if (a1) {
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)a2);
  }
  else {
    sub_216779094(a2, "<unknown>");
  }
}

uint64_t sub_216876C4C(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TfHashMap<const pxrInternal__aapl__pxrReserved__::TfRefBase *, unsigned long, pxrInternal__aapl__pxrReserve"
            "d__::TfHash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::TfHashMap<const pxrInternal__aapl__"
            "pxrReserved__::TfRefBase *, unsigned long, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)a1 = **(void **)a1;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::ReportAllTraces(uint64_t a1, void *a2)
{
  char v4 = sub_216779180(a2, (uint64_t)"TfRefPtrTracker traces:", 23);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  int v5 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  std::ostream::flush();
  std::mutex::lock((std::mutex *)(a1 + 8));
  v18.__locale_ = *(std::locale::__imp **)(a1 + 136);
  uint64_t v19 = 0;
  char v6 = (std::locale::id *)MEMORY[0x263F8C108];
  while (v18.__locale_ != v19)
  {
    uint64_t v7 = *sub_21687705C(&v18);
    sub_216779180(a2, (uint64_t)"  Owner: ", 9);
    sub_21687705C(&v18);
    uint64_t v8 = (void *)std::ostream::operator<<();
    unint64_t v9 = sub_216779180(v8, (uint64_t)" ", 1);
    size_t v10 = strlen(off_264294318[*(unsigned int *)(v7 + 56)]);
    uint64_t v11 = sub_216779180(v9, (uint64_t)off_264294318[*(unsigned int *)(v7 + 56)], v10);
    sub_216779180(v11, (uint64_t)" ", 1);
    uint64_t v12 = (void *)std::ostream::operator<<();
    uint64_t v13 = sub_216779180(v12, (uint64_t)":", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    int v14 = std::locale::use_facet(&v20, v6);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v20);
    std::ostream::put();
    std::ostream::flush();
    BOOL v15 = sub_216779180(a2, (uint64_t)"==============================================================", 62);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    uint64_t v16 = std::locale::use_facet(&v20, v6);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v20);
    std::ostream::put();
    std::ostream::flush();
    pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames(a2, (uint64_t *)(v7 + 24), 0);
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    unint64_t v17 = std::locale::use_facet(&v20, v6);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v20);
    std::ostream::put();
    std::ostream::flush();
    sub_2168770E8((uint64_t)&v18);
  }
  std::mutex::unlock((std::mutex *)(a1 + 8));
}

void sub_21687701C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, std::locale a10, uint64_t a11, std::locale a12)
{
}

void *sub_21687705C(void *result)
{
  if (*result == result[1])
  {
    uint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TfHashMap<con"
            "st void *, pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::Trace, pxrInternal__aapl__pxrReserved__::TfHas"
            "h>>::operator->() [T = const pxrInternal__aapl__pxrReserved__::TfHashMap<const void *, pxrInternal__aapl__px"
            "rReserved__::TfRefPtrTracker::Trace, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

uint64_t sub_2168770E8(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TfHashMap<const void *, pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::Trace, pxrInternal__aapl__pxrRes"
            "erved__::TfHash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::TfHashMap<const void *, pxrInte"
            "rnal__aapl__pxrReserved__::TfRefPtrTracker::Trace, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)a1 = **(void **)a1;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::ReportTracesForWatched(uint64_t a1, void *a2, void *a3)
{
  unint64_t v33 = a3;
  int v5 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (sub_216877FD4((void *)(a1 + 80), &v33))
  {
    sub_216779180(a2, (uint64_t)"TfRefPtrTracker traces for ", 27);
    char v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_216779180(v6, (uint64_t)" (type ", 7);
    uint64_t v29 = v5;
    sub_216876C18(v33, &__p);
    if ((v32 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v32 & 0x80u) == 0) {
      uint64_t v9 = v32;
    }
    else {
      uint64_t v9 = (uint64_t)v31;
    }
    size_t v10 = sub_216779180(v7, (uint64_t)p_p, v9);
    uint64_t v11 = sub_216779180(v10, (uint64_t)")", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    uint64_t v12 = std::locale::use_facet(&v34, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v34);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v32 < 0) {
      operator delete(__p);
    }
    std::string __p = *(void **)(a1 + 136);
    glob_t v31 = 0;
    uint64_t v13 = (std::locale::id *)MEMORY[0x263F8C108];
    while (__p != v31)
    {
      int v14 = sub_21687705C(&__p);
      uint64_t v15 = *v14;
      if (*(void **)(*v14 + 48) == v33)
      {
        sub_216779180(a2, (uint64_t)"  Owner: ", 9);
        sub_21687705C(&__p);
        uint64_t v16 = (void *)std::ostream::operator<<();
        unint64_t v17 = sub_216779180(v16, (uint64_t)" ", 1);
        size_t v18 = strlen(off_264294318[*(unsigned int *)(v15 + 56)]);
        uint64_t v19 = sub_216779180(v17, (uint64_t)off_264294318[*(unsigned int *)(v15 + 56)], v18);
        std::locale v20 = sub_216779180(v19, (uint64_t)":", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        std::locale v21 = std::locale::use_facet(&v34, v13);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
        unint64_t v22 = sub_216779180(a2, (uint64_t)"==============================================================", 62);
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
        unint64_t v23 = std::locale::use_facet(&v34, v13);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
        pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames(a2, (uint64_t *)(v15 + 24), 0);
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
        uint64_t v24 = std::locale::use_facet(&v34, v13);
        ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
      }
      sub_2168770E8((uint64_t)&__p);
    }
    unint64_t v25 = "==============================================================";
    uint64_t v26 = 62;
    int v5 = v29;
  }
  else
  {
    sub_216779180(a2, (uint64_t)"TfRefPtrTracker traces for ", 27);
    a2 = (void *)std::ostream::operator<<();
    unint64_t v25 = ":  not watched";
    uint64_t v26 = 14;
  }
  uint64_t v27 = sub_216779180(a2, (uint64_t)v25, v26);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
  int v28 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  std::mutex::unlock(v5);
}

void sub_2168775FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::locale a17)
{
}

void *sub_216877674(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (std::string::size_type i = *v9; i; std::string::size_type i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  std::string::size_type i = operator new(0x20uLL);
  *std::string::size_type i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *std::string::size_type i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *std::string::size_type i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216877894(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168778A8(void *a1, void *a2)
{
  uint64_t result = sub_2168503EC(a1, a2);
  if (result)
  {
    sub_2168778E0(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_2168778E0(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_216851DB0(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

char *sub_216877924(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    size_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((void *)v11 + 2) == *a2) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  unint64_t v11 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = v7;
  *((void *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *((void *)v11 + 7) = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  std::locale v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)unint64_t v11 = *v21;
LABEL_38:
    *std::locale v21 = v11;
    goto LABEL_39;
  }
  *(void *)unint64_t v11 = *v13;
  void *v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*(void *)v11)
  {
    unint64_t v22 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    std::locale v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_216877B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_21686350C(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_216877B98(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_216851DB0(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    sub_21686350C((uint64_t)&v6, v3);
  }
  return v2;
}

uint64_t sub_216877BE4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_21678A04C(a1, *(void *)(a2 + 8));
  for (std::string::size_type i = *(void **)(a2 + 16); i; std::string::size_type i = (void *)*i)
    sub_216877674(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_216877C44(_Unwind_Exception *a1)
{
  sub_216850320(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216877C5C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_21678A04C(a1, *(void *)(a2 + 8));
  for (std::string::size_type i = *(void **)(a2 + 16); i; std::string::size_type i = (void *)*i)
    sub_216877CD4(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_216877CBC(_Unwind_Exception *a1)
{
  sub_216862C74(v1);
  _Unwind_Resume(a1);
}

void *sub_216877CD4(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = v5;
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = v5 & (v6 - 1);
    }
    unint64_t v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      uint64_t result = (void *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = result[1];
          if (v10 == v5)
          {
            if (result[2] == *a2) {
              return result;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216877F24(a1, v5, a3, (uint64_t)&v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_21678A04C(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  unint64_t v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *size_t v19 = *v17;
    *unint64_t v17 = v19;
  }
  else
  {
    *size_t v19 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v19)
    {
      unint64_t v18 = *(void *)(*v19 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v19;
    }
  }
  uint64_t result = v19;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216877F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_21686350C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216877F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint8x8_t v9 = *(const void **)(a3 + 8);
  _OWORD v8[2] = *(void *)a3;
  void v8[4] = 0;
  v8[5] = 0;
  void v8[3] = 0;
  uint64_t result = sub_216863490(v8 + 3, v9, *(void *)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - (void)v9) >> 3);
  v8[6] = *(void *)(a3 + 32);
  *((_DWORD *)v8 + 14) = *(_DWORD *)(a3 + 40);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216877FB8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_21686350C(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_216877FD4(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = bswap64(0x9E3779B97F4A7C55 * *a2);
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = v3;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = v3 & (*(void *)&v2 - 1);
  }
  unint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217411E5CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  int8x8_t v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfRegTest*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      uint8x8_t v9 = operator new(0x50uLL);
      *uint8x8_t v9 = 0u;
      v9[1] = 0u;
      *((_DWORD *)v9 + 8) = 1065353216;
      *(_OWORD *)((char *)v9 + 40) = 0u;
      *(_OWORD *)((char *)v9 + 56) = 0u;
      *((_DWORD *)v9 + 18) = 1065353216;
      unint64_t v11 = atomic_load(a1);
      if (v11)
      {
        if (v9 != (_OWORD *)v11)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          unint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_C"
                "reateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TfRegTest]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v10);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        unint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_Cre"
              "ateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TfRegTest]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v10, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfRegTest*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v5;
}

void sub_216878290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::SetI"
            "nstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TfRegTest]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::DeleteInstance()
{
  for (uint64_t i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance);
        i;
        uint64_t i = v1)
  {
    uint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance, (unint64_t *)&v1, 0);
    if (v1 == i)
    {
      sub_216850298(i + 40);
      int8x8_t v2 = (void *)sub_216850298(i);
      operator delete(v2);
      return;
    }
    sched_yield();
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::TfRegTest::GetInstance(pxrInternal__aapl__pxrReserved__::TfRegTest *this)
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_CreateInstance();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRegTest::Register(pxrInternal__aapl__pxrReserved__::TfRegTest *this, char *a2, BOOL (*a3)(void))
{
  sub_216779094(__p, a2);
  unint64_t v8 = __p;
  *((void *)sub_21685FAEC((uint64_t)this, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v8) + 5) = a3;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_216878484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRegTest::Register(pxrInternal__aapl__pxrReserved__::TfRegTest *this, char *a2, BOOL (*a3)(int, char **))
{
  char v4 = (char *)this + 40;
  sub_216779094(__p, a2);
  unint64_t v8 = __p;
  *((void *)sub_21685FAEC((uint64_t)v4, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v8) + 5) = a3;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_216878518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfRegTest::_PrintTestNames(pxrInternal__aapl__pxrReserved__::TfRegTest *this)
{
  int8x8_t v2 = (void *)MEMORY[0x263F8C0F8];
  sub_216779180(MEMORY[0x263F8C0F8], (uint64_t)"Valid tests are:", 16);
  std::locale v21 = 0;
  std::string __dst = 0;
  unint64_t v23 = 0;
  sub_21680BC90((uint64_t *)&v21, *((void *)this + 8) + *((void *)this + 3));
  long long v3 = (uint64_t *)*((void *)this + 2);
  if (v3)
  {
    unint64_t v4 = (unint64_t)__dst;
    do
    {
      int v5 = (long long *)(v3 + 2);
      if (v4 >= v23)
      {
        unint64_t v4 = sub_2167E9A44((uint64_t *)&v21, v5);
      }
      else
      {
        if (*((char *)v3 + 39) < 0)
        {
          sub_216778F24((unsigned char *)v4, (void *)v3[2], v3[3]);
        }
        else
        {
          long long v6 = *v5;
          *(void *)(v4 + 16) = v3[4];
          *(_OWORD *)unint64_t v4 = v6;
        }
        v4 += 24;
      }
      std::string __dst = (void *)v4;
      long long v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  char v7 = (uint64_t *)*((void *)this + 7);
  if (v7)
  {
    unint64_t v8 = (unint64_t)__dst;
    do
    {
      uint8x8_t v9 = (long long *)(v7 + 2);
      if (v8 >= v23)
      {
        unint64_t v8 = sub_2167E9A44((uint64_t *)&v21, v9);
      }
      else
      {
        if (*((char *)v7 + 39) < 0)
        {
          sub_216778F24((unsigned char *)v8, (void *)v7[2], v7[3]);
        }
        else
        {
          long long v10 = *v9;
          *(void *)(v8 + 16) = v7[4];
          *(_OWORD *)unint64_t v8 = v10;
        }
        v8 += 24;
      }
      std::string __dst = (void *)v8;
      char v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  else
  {
    unint64_t v8 = (unint64_t)__dst;
  }
  unint64_t v11 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v21) >> 3));
  if ((uint64_t *)v8 == v21) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  sub_216878D58((uint64_t)v21, (long long *)v8, (uint64_t)&v24, v12, 1);
  uint64_t v13 = v21;
  int v14 = (uint64_t *)__dst;
  if (v21 != __dst)
  {
    unint64_t v15 = (void *)MEMORY[0x263F8C0F8];
    do
    {
      uint64_t v16 = sub_216779180(v15, (uint64_t)"\n    ", 5);
      int v17 = *((char *)v13 + 23);
      if (v17 >= 0) {
        uint64_t v18 = (uint64_t)v13;
      }
      else {
        uint64_t v18 = *v13;
      }
      if (v17 >= 0) {
        uint64_t v19 = *((unsigned __int8 *)v13 + 23);
      }
      else {
        uint64_t v19 = v13[1];
      }
      sub_216779180(v16, v18, v19);
      v13 += 3;
    }
    while (v13 != v14);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  uint64_t v20 = std::locale::use_facet(&v24, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v24);
  std::ostream::put();
  std::ostream::flush();
  v24.__locale_ = (std::locale::__imp *)&v21;
  sub_216782F20((void ***)&v24);
}

void sub_216878794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, std::locale a14)
{
  a13 = &a10;
  sub_216782F20((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRegTest::_Main(pxrInternal__aapl__pxrReserved__::TfRegTest *this, int a2, char **a3)
{
  sub_216779094(&v39, *a3);
  if (a2 <= 1)
  {
    long long v6 = sub_216779180(MEMORY[0x263F8C0F8], (uint64_t)"Usage: ", 7);
    if ((v41 & 0x80u) == 0) {
      char v7 = &v39;
    }
    else {
      char v7 = v39;
    }
    if ((v41 & 0x80u) == 0) {
      uint64_t v8 = v41;
    }
    else {
      uint64_t v8 = v40;
    }
    uint8x8_t v9 = sub_216779180(v6, (uint64_t)v7, v8);
    sub_216779180(v9, (uint64_t)" testName [args]\n", 17);
    pxrInternal__aapl__pxrReserved__::TfRegTest::_PrintTestNames(this);
    uint64_t v10 = 2;
    goto LABEL_43;
  }
  uint64_t v12 = a3[1];
  unint64_t v11 = a3 + 1;
  sub_216779094(&__p, v12);
  if (sub_2168602D4(this, (unsigned __int8 *)&__p))
  {
    if (a2 >= 3)
    {
      if ((v41 & 0x80u) == 0) {
        uint64_t v13 = &v39;
      }
      else {
        uint64_t v13 = v39;
      }
      if ((v41 & 0x80u) == 0) {
        uint64_t v14 = v41;
      }
      else {
        uint64_t v14 = v40;
      }
      unint64_t v15 = sub_216779180(MEMORY[0x263F8C0F8], (uint64_t)v13, v14);
      uint64_t v16 = sub_216779180(v15, (uint64_t)": test function '", 17);
      if ((v38 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v38 & 0x80u) == 0) {
        uint64_t v18 = v38;
      }
      else {
        uint64_t v18 = v37;
      }
      uint64_t v19 = sub_216779180(v16, (uint64_t)p_p, v18);
      uint64_t v20 = sub_216779180(v19, (uint64_t)"' takes no arguments.", 21);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      std::locale v21 = std::locale::use_facet(&v42, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v42);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v10 = 2;
      goto LABEL_41;
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v35);
    v42.__locale_ = (std::locale::__imp *)&__p;
    unint64_t v25 = sub_21685FAEC((uint64_t)this, (unsigned __int8 *)&__p, (uint64_t)&unk_2174BFD90, (long long **)&v42);
    int v26 = (*((uint64_t (**)(void))v25 + 5))();
    uint64_t v24 = sub_216878B4C((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v35, v26);
LABEL_27:
    uint64_t v10 = v24;
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v35);
    goto LABEL_41;
  }
  if (sub_2168602D4((void *)this + 5, (unsigned __int8 *)&__p))
  {
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v35);
    v42.__locale_ = (std::locale::__imp *)&__p;
    unint64_t v22 = sub_21685FAEC((uint64_t)this + 40, (unsigned __int8 *)&__p, (uint64_t)&unk_2174BFD90, (long long **)&v42);
    int v23 = (*((uint64_t (**)(void, char **))v22 + 5))((a2 - 1), v11);
    uint64_t v24 = sub_216878B4C((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v35, v23);
    goto LABEL_27;
  }
  if ((v41 & 0x80u) == 0) {
    uint64_t v27 = &v39;
  }
  else {
    uint64_t v27 = v39;
  }
  if ((v41 & 0x80u) == 0) {
    uint64_t v28 = v41;
  }
  else {
    uint64_t v28 = v40;
  }
  uint64_t v29 = sub_216779180(MEMORY[0x263F8C0F8], (uint64_t)v27, v28);
  uint64_t v30 = sub_216779180(v29, (uint64_t)": unknown test function ", 24);
  if ((v38 & 0x80u) == 0) {
    glob_t v31 = &__p;
  }
  else {
    glob_t v31 = __p;
  }
  if ((v38 & 0x80u) == 0) {
    uint64_t v32 = v38;
  }
  else {
    uint64_t v32 = v37;
  }
  unint64_t v33 = sub_216779180(v30, (uint64_t)v31, v32);
  sub_216779180(v33, (uint64_t)".\n", 2);
  pxrInternal__aapl__pxrReserved__::TfRegTest::_PrintTestNames(this);
  uint64_t v10 = 3;
LABEL_41:
  if ((char)v38 < 0) {
    operator delete(__p);
  }
LABEL_43:
  if ((char)v41 < 0) {
    operator delete(v39);
  }
  return v10;
}

void sub_216878AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216878B4C(pxrInternal__aapl__pxrReserved__::TfErrorMark *this, int a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v4 = *(void *)this;
  unint64_t v5 = atomic_load((unint64_t *)(v3 + 144));
  if (v4 >= v5 || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl(this, (atomic_ullong *)v3)) {
    return 0;
  }
  uint64_t v8 = sub_216862604((unint64_t *)this, 0);
  uint64_t v6 = 100;
  if (v8 != (void *)sub_216878D10())
  {
    uint8x8_t v9 = (void *)MEMORY[0x263F8C0F8];
    do
    {
      uint64_t v10 = sub_216779180(v9, (uint64_t)"*** Error in ", 13);
      sub_216779094(__p, (char *)v8[2]);
      if ((v21 & 0x80u) == 0) {
        unint64_t v11 = __p;
      }
      else {
        unint64_t v11 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v12 = v21;
      }
      else {
        uint64_t v12 = (uint64_t)__p[1];
      }
      uint64_t v13 = sub_216779180(v10, (uint64_t)v11, v12);
      sub_216779180(v13, (uint64_t)"@line ", 6);
      uint64_t v14 = (void *)std::ostream::operator<<();
      unint64_t v15 = sub_216779180(v14, (uint64_t)"\n    ", 5);
      int v16 = *((char *)v8 + 79);
      if (v16 >= 0) {
        uint64_t v17 = (uint64_t)(v8 + 7);
      }
      else {
        uint64_t v17 = v8[7];
      }
      if (v16 >= 0) {
        uint64_t v18 = *((unsigned __int8 *)v8 + 79);
      }
      else {
        uint64_t v18 = v8[8];
      }
      uint64_t v19 = sub_216779180(v15, v17, v18);
      sub_216779180(v19, (uint64_t)"\n", 1);
      if ((char)v21 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v8 = (void *)v8[1];
      uint64_t v6 = (v6 + 1);
    }
    while (v8 != (void *)sub_216878D10());
  }
  return v6;
}

void sub_216878CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216878D10()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  char v2 = 0;
  return sub_2168520EC((atomic_ullong *)(v0 + 152), &v2);
}

void sub_216878D58(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_216879180(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    char v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (const void **)a1;
      do
      {
        unint64_t v11 = v10;
        uint64_t v10 = v7;
        if (sub_21677B108(a3, v7, v11))
        {
          long long v17 = *(_OWORD *)v10;
          uint64_t v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          void *v10 = 0;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            uint64_t v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0) {
              operator delete(*v14);
            }
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 40) = *(void *)(v13 + 16);
            *(unsigned char *)(v13 + 23) = 0;
            *(unsigned char *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (sub_21677B108(a3, (const void **)&v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }
        char v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_2168792A8(const void **a1, const void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    char v6 = a1;
    char v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        uint64_t v10 = v6;
        char v6 = v7;
        if (sub_21677B108(a3, v7, v10))
        {
          long long v16 = *(_OWORD *)v6;
          long long v17 = v6[2];
          v6[1] = 0;
          _OWORD v6[2] = 0;
          *char v6 = 0;
          unint64_t v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((unsigned char *)v11 + 47) = 0;
            *((unsigned char *)v11 + 24) = 0;
            BOOL v13 = sub_21677B108(a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = v11 + 6;
          if (v14 < 0) {
            operator delete((void *)*v15);
          }
          *(_OWORD *)int v15 = v16;
          void v15[2] = v17;
        }
        char v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t sub_2168793B4(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = sub_21677B108(a4, a2, a1);
  uint64_t result = sub_21677B108(a4, a3, a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    BOOL v13 = a2[2];
    long long v14 = *(_OWORD *)a2;
    int v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_21677B108(a4, a2, a1)) {
      return 1;
    }
    long long v16 = a1[2];
    long long v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = a1[2];
    long long v20 = *(_OWORD *)a1;
    unsigned __int8 v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_21677B108(a4, a3, a2)) {
      return 1;
    }
    unint64_t v22 = a2[2];
    long long v23 = *(_OWORD *)a2;
    unint64_t v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  uint64_t v10 = a1[2];
  long long v11 = *(_OWORD *)a1;
  uint64_t v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **sub_216879500(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v16 = *(_OWORD *)a1;
  long long v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (sub_21677B108(a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    char v6 = a1;
    do
      v6 += 3;
    while (!sub_21677B108(a3, (const void **)&v16, v6));
  }
  else
  {
    char v7 = a1 + 3;
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      BOOL v8 = sub_21677B108(a3, (const void **)&v16, v7);
      char v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (sub_21677B108(a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    long long v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    long long v18 = v9;
    long long v10 = *(_OWORD *)v4;
    _OWORD v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)char v6 = v10;
    long long v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!sub_21677B108(a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (sub_21677B108(a3, (const void **)&v16, (const void **)v4));
  }
  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0) {
      operator delete(*v12);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((unsigned char *)v6 - 1) = 0;
    *((unsigned char *)v6 - 24) = 0;
  }
  long long v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

unint64_t sub_216879694(long long *a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  do
    v6 += 24;
  while (sub_21677B108(a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while (!sub_21677B108(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!sub_21677B108(a3, a2, (const void **)&v17));
  }
  unint64_t v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    long long v9 = a2;
    do
    {
      long long v19 = *(_OWORD *)v8;
      long long v10 = v19;
      long long v20 = *(const void **)(v8 + 16);
      long long v11 = v20;
      uint64_t v12 = v9[2];
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = v12;
      _OWORD v9[2] = v11;
      *(_OWORD *)long long v9 = v10;
      do
        v8 += 24;
      while (sub_21677B108(a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_21677B108(a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  long long v13 = (void **)(v8 - 24);
  if ((long long *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0) {
      operator delete(*v13);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v14 = *(_OWORD *)v13;
    *((void *)a1 + 2) = *(void *)(v8 - 8);
    *a1 = v14;
    *(unsigned char *)(v8 - 1) = 0;
    *(unsigned char *)(v8 - 24) = 0;
  }
  long long v15 = v17;
  *(void *)(v8 - 8) = v18;
  *(_OWORD *)long long v13 = v15;
  return v8 - 24;
}

BOOL sub_216879824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      if (sub_21677B108(a3, (const void **)(a2 - 24), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)uint64_t v8 = v10;
        *(void *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      sub_2168793B4((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_216879A78(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_216879B64(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a1 + 72), (long long *)(a2 - 24), a3);
      return 1;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      sub_2168793B4((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (sub_21677B108(a3, (const void **)v13, v12))
    {
      long long v22 = *(_OWORD *)v13;
      uint64_t v23 = *(void *)(v13 + 16);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 88) = *(void *)(v17 + 64);
        *(unsigned char *)(v17 + 71) = 0;
        *(unsigned char *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }
        BOOL v19 = sub_21677B108(a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 sub_216879A78(uint64_t a1, const void **a2, const void **a3, long long *a4, uint64_t a5)
{
  sub_2168793B4((const void **)a1, a2, a3, a5);
  if (sub_21677B108(a5, (const void **)a4, a3))
  {
    uint64_t v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((void *)a4 + 2) = v11;
    if (sub_21677B108(a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_21677B108(a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 sub_216879B64(uint64_t a1, const void **a2, const void **a3, long long *a4, long long *a5, uint64_t a6)
{
  sub_216879A78(a1, a2, a3, a4, a6);
  if (sub_21677B108(a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    long long v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4 = *a5;
    *((void *)a4 + 2) = v15;
    *a5 = v14;
    *((void *)a5 + 2) = v13;
    if (sub_21677B108(a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      long long v17 = *(_OWORD *)a3;
      uint64_t v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((void *)a4 + 2) = v16;
      if (sub_21677B108(a6, a3, a2))
      {
        BOOL v19 = a2[2];
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_21677B108(a6, a2, (const void **)a1))
        {
          long long v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

long long *sub_216879C88(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_216879ED4(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (sub_21677B108(a4, (const void **)v14, (const void **)a1))
        {
          uint64_t v15 = *((void *)v14 + 2);
          long long v16 = *v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *long long v14 = *(_OWORD *)a1;
          *((void *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          sub_216879ED4(a1, a4, v9, (__n128 *)a1);
        }
        long long v14 = (long long *)((char *)v14 + 24);
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = (long long *)((char *)a2 - 24);
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)long long v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v22 = sub_21687A070(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (long long *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(unsigned char *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          long long v25 = *v19;
          *(void *)(v23 + 16) = *((void *)v19 + 2);
          *(_OWORD *)uint64_t v23 = v25;
          *(void *)BOOL v19 = v20;
          *((void *)v19 + 1) = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((unsigned char *)v19 + 23) = v21;
          sub_21687A14C(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        BOOL v19 = (long long *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_216879EBC(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216879ED4(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_21677B108(a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        uint64_t v12 = v14;
      }
      if (!sub_21677B108(a2, (const void **)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          long long v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          *unint64_t v7 = v17;
          *(unsigned char *)(v13 + 23) = 0;
          *(unsigned char *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_21677B108(a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            uint64_t v18 = v19;
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (sub_21677B108(a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        __n128 *v16 = result;
      }
    }
  }
  return result;
}

uint64_t sub_21687A070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_21677B108(a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      uint64_t v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(unsigned char *)(v9 + 23) = 0;
    *(unsigned char *)uint64_t v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double sub_21687A14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * v8);
    uint64_t v10 = (long long *)(a2 - 24);
    if (sub_21677B108(a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      long long v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      while (1)
      {
        long long v12 = v9;
        if (*((char *)v10 + 23) < 0) {
          operator delete(*(void **)v10);
        }
        long long v13 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        long long *v10 = v13;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!sub_21677B108(a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0) {
            operator delete(*(void **)v12);
          }
          break;
        }
      }
      double result = *(double *)&v14;
      long long *v12 = v14;
      *((void *)v12 + 2) = v15;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(pxrInternal__aapl__pxrReserved__::TfRegistryManager *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E418, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798E418))
  {
    qword_26798E410 = (uint64_t)operator new(1uLL);
    __cxa_guard_release(&qword_26798E418);
  }
  return qword_26798E410;
}

void sub_21687A2C0(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::TfRegistryManager::RunUnloadersAtExit(pxrInternal__aapl__pxrReserved__::TfRegistryManager *this)
{
  byte_26798E420 = 1;
}

BOOL pxrInternal__aapl__pxrReserved__::TfRegistryManager::AddFunctionForUnload(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = sub_21687A394();
  std::recursive_mutex::lock((std::recursive_mutex *)v3);
  char v9 = 0;
  uint64_t v4 = (uint64_t *)sub_2168520EC((atomic_ullong *)(v3 + 240), &v9);
  uint64_t v5 = (uint64_t *)*v4;
  if (*v4)
  {
    uint64_t v6 = sub_21687BA5C(*v4, 0, 0, a2);
    uint64_t v7 = *v5;
    *uint64_t v6 = *v5;
    v6[1] = v5;
    *(void *)(v7 + 8) = v6;
    uint64_t *v5 = (uint64_t)v6;
    ++v5[2];
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)v3);
  return v5 != 0;
}

void sub_21687A380(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_21687A394()
{
  unint64_t v0 = atomic_load((unint64_t *)&qword_26798E408);
  if (!v0)
  {
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_122Tf_RegistryManagerImplE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
    int v2 = std::string::insert(&v14, 0, "Create Singleton ");
    long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    uint64_t v18 = v2->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v3;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    v2->__r_.__value_.__r.__words[0] = 0;
    sub_216851098((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (atomic_exchange(byte_26798E421, 1u))
    {
      while (!atomic_load((unint64_t *)&qword_26798E408))
        sched_yield();
    }
    else
    {
      if (!atomic_load((unint64_t *)&qword_26798E408))
      {
        uint64_t v7 = operator new(0x1B0uLL);
        MEMORY[0x21D447BA0]();
        v7[9] = 0;
        BOOL v7[8] = v7 + 9;
        v7[12] = 0;
        v7[10] = 0;
        v7[11] = v7 + 12;
        v7[13] = 0;
        v7[14] = v7 + 14;
        v7[15] = v7 + 14;
        *((_OWORD *)v7 + 8) = 0u;
        *((_OWORD *)v7 + 9) = 0u;
        v7[20] = 0;
        *((_DWORD *)v7 + 42) = 1065353216;
        *((_OWORD *)v7 + 11) = 0u;
        *((_OWORD *)v7 + 12) = 0u;
        *((_DWORD *)v7 + 52) = 1065353216;
        v7[27] = v7 + 27;
        v7[28] = v7 + 27;
        v7[29] = 0;
        sub_21687B204(v7 + 30);
        v7[42] = &unk_26C74B518;
        __dmb(0xBu);
        v7[43] = 0;
        __dmb(0xBu);
        v7[44] = 0;
        v7[42] = &unk_26C74C160;
        unint64_t v8 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
        *unint64_t v8 = &unk_26C74C1C0;
        v7[45] = v8;
        for (uint64_t i = 51; i != 54; ++i)
          v7[i] = 0;
        v7[49] = 0;
        v7[48] = 0;
        v7[50] = v7 + 51;
        v7[47] = sub_21687B620;
        if (atomic_exchange(&qword_26798E408, (unint64_t)v7))
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "SetInstanceConstructed";
          uint64_t v18 = 56;
          uint64_t v19 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::(anonymous n"
                "amespace)::Tf_RegistryManagerImpl>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::("
                "anonymous namespace)::Tf_RegistryManagerImpl]";
          char v20 = 0;
          int v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v9);
        }
        if (sub_216855488(0)) {
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfRegistryManager: initialized\n", v11, v12);
        }
        unint64_t v13 = atomic_load((unint64_t *)&qword_26798E408);
        if (v13)
        {
          if (v7 != (void *)v13)
          {
            __p[0] = "tf/instantiateSingleton.h";
            __p[1] = "_CreateInstance";
            uint64_t v18 = 84;
            uint64_t v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::(anonymous n"
                  "amespace)::Tf_RegistryManagerImpl>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrRes"
                  "erved__::(anonymous namespace)::Tf_RegistryManagerImpl]";
            char v20 = 0;
            int v21 = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v12);
          }
        }
        else if (atomic_exchange(&qword_26798E408, (unint64_t)v7))
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v18 = 88;
          uint64_t v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::(anonymous nam"
                "espace)::Tf_RegistryManagerImpl>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserve"
                "d__::(anonymous namespace)::Tf_RegistryManagerImpl]";
          char v20 = 0;
          int v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v12, "instance.exchange(newInst) == nullptr");
        }
      }
      atomic_store(0, (unsigned __int8 *)byte_26798E421);
    }
    unint64_t v0 = atomic_load((unint64_t *)&qword_26798E408);
    while (v16--)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  }
  return v0;
}

void sub_21687A6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, int a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  while (a19--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(a18);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(pxrInternal__aapl__pxrReserved__::TfRegistryManager *this, const std::type_info *a2)
{
  unint64_t v3 = sub_21687A394();
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(a2->__type_name & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  std::recursive_mutex::lock((std::recursive_mutex *)v3);
  sub_21687BB54(v3);
  sub_21680EE0C((uint64_t **)(v3 + 88), (const void **)__p, (uint64_t)__p);
  if (v4)
  {
    uint64_t v5 = sub_21687C484(v3 + 112, 0, 0, (uint64_t)__p);
    v5[1] = v3 + 112;
    uint64_t v6 = *(void *)(v3 + 112);
    void *v5 = v6;
    *(void *)(v6 + 8) = v5;
    *(void *)(v3 + 112) = v5;
    ++*(void *)(v3 + 128);
    sub_21687BCC0(v3, (pxrInternal__aapl__pxrReserved__ *)__p);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)v3);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21687A8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::recursive_mutex::unlock(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfRegistryManager::_UnsubscribeFrom(pxrInternal__aapl__pxrReserved__::TfRegistryManager *this, const std::type_info *a2)
{
  unint64_t v3 = sub_21687A394();
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(a2->__type_name & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  std::recursive_mutex::lock((std::recursive_mutex *)v3);
  if (sub_216839B20((uint64_t **)(v3 + 88), (const void **)__p)) {
    sub_21687C7D4(v3 + 112, (unsigned __int8 **)__p);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)v3);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21687A988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *pxrInternal__aapl__pxrReserved__::Tf_RegistryInit::Tf_RegistryInit(const char **this, const char *a2)
{
  *this = a2;
  if (atomic_load((unint64_t *)&qword_26798E408))
  {
    unint64_t v4 = sub_21687A394();
    uint64_t v6 = *this;
    if (!*this || !*v6)
    {
      v13[0] = "tf/registryManager.cpp";
      v13[1] = "ClearActiveLibrary";
      void v13[2] = 310;
      void v13[3] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::ClearActiveLibrary(const char *)";
      char v14 = 0;
      v15[0] = *(_DWORD *)v12;
      *(_DWORD *)((char *)v15 + 3) = *(_DWORD *)&v12[3];
      *(_DWORD *)((char *)&v15[1] + 3) = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v13, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v5, "libraryName && libraryName[0]");
    }
    uint64_t v7 = (std::recursive_mutex *)v4;
    LOBYTE(v13[0]) = 0;
    uint64_t v8 = sub_2168520EC((atomic_ullong *)(v4 + 336), v13);
    char v9 = (void *)(v8 + 8);
    size_t v10 = strlen(v6);
    if (*(char *)(v8 + 31) < 0)
    {
      if (v10 != *(void *)(v8 + 16)) {
        return (pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *)this;
      }
      if (v10 == -1) {
        goto LABEL_15;
      }
      char v9 = (void *)*v9;
    }
    else
    {
      if (v10 != *(unsigned __int8 *)(v8 + 31)) {
        return (pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *)this;
      }
      if (v10 == -1) {
LABEL_15:
      }
        sub_216855AD4();
    }
    if (!memcmp(v9, v6, v10))
    {
      std::recursive_mutex::lock(v7);
      sub_21687BB54((uint64_t)v7);
      std::recursive_mutex::unlock(v7);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *)this;
}

void sub_21687AB04(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_RegistryInit::~Tf_RegistryInit(char **this)
{
  if (atomic_load((unint64_t *)&qword_26798E408))
  {
    unint64_t v3 = sub_21687A394();
    unint64_t v4 = *this;
    if ((pxrInternal__aapl__pxrReserved__::Tf_DlCloseIsActive((pxrInternal__aapl__pxrReserved__ *)v3) & 1) != 0
      || byte_26798E420 == 1)
    {
      std::recursive_mutex::lock((std::recursive_mutex *)v3);
      if (sub_216855488(0)) {
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfRegistryManager: unloading '%s'\n", v5, v6, v4);
      }
      if (!v4 || !*v4)
      {
        char v20 = "tf/registryManager.cpp";
        int v21 = "_UnloadNoLock";
        uint64_t v22 = 518;
        uint64_t v23 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::_UnloadNoLock(const char *)";
        char v24 = 0;
        *(_DWORD *)long long v25 = v16;
        *(_DWORD *)&v25[3] = *(_DWORD *)((char *)&v16 + 3);
        int v26 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v20, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v6, "libraryName && libraryName[0]");
      }
      uint64_t v19 = sub_21687C9F0(v3, v4);
      uint64_t v7 = sub_21687CB2C((void *)(v3 + 176), &v19);
      uint64_t v8 = v7;
      if (v7)
      {
        uint64_t v16 = (uint64_t)&v16;
        uint64_t v17 = &v16;
        uint64_t v18 = 0;
        sub_21687CBF8((long long *)(v7 + 3), &v16);
        if (v8[5])
        {
          char v20 = "tf/registryManager.cpp";
          int v21 = "_UnloadNoLock";
          uint64_t v22 = 527;
          uint64_t v23 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::_UnloadNoLock(const char *)";
          char v24 = 0;
          int v26 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v20, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v9, "i->second.empty()");
        }
        for (uint64_t i = v17; i != &v16; uint64_t i = (uint64_t *)i[1])
        {
          uint64_t v11 = i[5];
          if (!v11) {
            sub_21683A7CC();
          }
          (*(void (**)(uint64_t))(*(void *)v11 + 48))(v11);
        }
        sub_21687B864(&v16);
      }
      for (uint64_t j = *(void **)(v3 + 152); j; uint64_t j = (void *)*j)
      {
        unint64_t v13 = (uint64_t *)j[6];
        if (v13 != j + 5)
        {
          do
          {
            char v14 = (uint64_t *)v13[1];
            if (v13[3] == v19)
            {
              uint64_t v15 = *v13;
              *(void *)(v15 + 8) = v14;
              *(void *)v13[1] = v15;
              --j[7];
              operator delete(v13);
            }
            unint64_t v13 = v14;
          }
          while (v14 != j + 5);
        }
      }
      std::recursive_mutex::unlock((std::recursive_mutex *)v3);
    }
  }
}

void sub_21687AD70(void *a1)
{
}

void pxrInternal__aapl__pxrReserved__::Tf_RegistryInit::Add(pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *this, const char *a2, void (*a3)(void *, void *), const char *a4)
{
  unint64_t v9 = sub_21687A394();
  if (!this || !*(unsigned char *)this)
  {
    std::string __p = "tf/registryManager.cpp";
    int v26 = "AddRegistrationFunction";
    uint64_t v27 = 327;
    long long v28 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::AddRegistrationFunction("
          "const char *, RegistrationFunction, const char *)";
    char v29 = 0;
    uint64_t v23 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"TfRegistryManager: Ignoring library with no name", v7, v8);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "libraryName && libraryName[0]", v23) & 1) == 0) {
      return;
    }
  }
  if (!a3 || !*(unsigned char *)a3)
  {
    std::string __p = "tf/registryManager.cpp";
    int v26 = "AddRegistrationFunction";
    uint64_t v27 = 333;
    long long v28 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::AddRegistrationFunction("
          "const char *, RegistrationFunction, const char *)";
    char v29 = 0;
    char v24 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"TfRegistryManager: Ignoring registration with no type in %s", v7, v8, this);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "typeName && typeName[0]", v24) & 1) == 0) {
      return;
    }
  }
  LOBYTE(__p) = 0;
  uint64_t v10 = sub_2168520EC((atomic_ullong *)(v9 + 336), &__p);
  uint64_t v11 = (const void **)(v10 + 8);
  size_t v12 = strlen((const char *)this);
  size_t v13 = v12;
  if (*(char *)(v10 + 31) < 0)
  {
    if (v12 == *(void *)(v10 + 16))
    {
      if (v12 == -1) {
        goto LABEL_30;
      }
      char v14 = *v11;
      goto LABEL_12;
    }
LABEL_13:
    std::recursive_mutex::lock((std::recursive_mutex *)v9);
    sub_21687BB54(v9);
    std::recursive_mutex::unlock((std::recursive_mutex *)v9);
    goto LABEL_14;
  }
  if (v12 != *(unsigned __int8 *)(v10 + 31)) {
    goto LABEL_13;
  }
  char v14 = (const void *)(v10 + 8);
  if (v13 == -1) {
LABEL_30:
  }
    sub_216855AD4();
LABEL_12:
  if (memcmp(v14, this, v13)) {
    goto LABEL_13;
  }
LABEL_14:
  if (!*(void *)v10)
  {
    if (sub_216855488(0))
    {
      sub_216779094(&__p, (char *)this);
      pxrInternal__aapl__pxrReserved__::ArchGetAddressInfo(a2, (uint64_t)&__p, 0, 0, 0);
      uint64_t v17 = v27 >= 0 ? &__p : (void **)__p;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfRegistryManager: Library %s\n", v15, v16, v17);
      if (SHIBYTE(v27) < 0) {
        operator delete(__p);
      }
    }
    MEMORY[0x21D4477E0](v11, this);
    std::recursive_mutex::lock((std::recursive_mutex *)v9);
    *(void *)uint64_t v10 = sub_21687C9F0(v9, (char *)this);
    std::recursive_mutex::unlock((std::recursive_mutex *)v9);
    if (!*(void *)v10)
    {
      std::string __p = "tf/registryManager.cpp";
      int v26 = "AddRegistrationFunction";
      uint64_t v27 = 360;
      long long v28 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::AddRegistrationFunctio"
            "n(const char *, RegistrationFunction, const char *)";
      char v29 = 0;
      int v30 = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v18, "active.identifier");
    }
  }
  sub_216779094(&__p, (char *)a3);
  uint64_t v19 = sub_21687BF90(v10 + 32, (pxrInternal__aapl__pxrReserved__ *)&__p);
  uint64_t v20 = *(void *)v10;
  int v21 = operator new(0x20uLL);
  v21[2] = a2;
  v21[3] = v20;
  v21[1] = v19;
  uint64_t v22 = *(void *)v19;
  *int v21 = *(void *)v19;
  *(void *)(v22 + 8) = v21;
  *(void *)uint64_t v19 = v21;
  ++*((void *)v19 + 2);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
}

void sub_21687B090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21687B0D0(void *a1)
{
  *a1 = &unk_26C74C160;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_216850D6C((uint64_t)a1);
  unint64_t v3 = (tbb::internal **)a1[8];
  unint64_t v5 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 5), (void (*)(void *, unint64_t))sub_21687B640);
  unint64_t v6 = a1[6];
  if (v5 > v6)
  {
    uint64_t v7 = v3 - 1;
    do
    {
      uint64_t v8 = v7[v5];
      v7[v5] = 0;
      if ((unint64_t)v8 >= 0x40) {
        tbb::internal::NFS_Free(v8, v4);
      }
      --v5;
    }
    while (v5 > v6);
    unint64_t v5 = v6;
  }
  unint64_t v9 = *v3;
  if ((unint64_t)*v3 >= 0x40)
  {
    for (; v5; --v5)
      v3[v5 - 1] = 0;
    tbb::internal::NFS_Free(v9, v4);
  }
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3((tbb::internal::concurrent_vector_base_v3 *)(a1 + 5), v4);
  *a1 = &unk_26C74B518;
  return a1;
}

void *sub_21687B204(void *a1)
{
  *a1 = &unk_26C74B518;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_26C74C068;
  uint64_t v2 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *uint64_t v2 = &unk_26C74C0C8;
  a1[3] = v2;
  for (uint64_t i = 9; i != 12; ++i)
    a1[i] = 0;
  a1[7] = 0;
  a1[6] = 0;
  a1[8] = a1 + 9;
  a1[5] = sub_21687B464;
  return a1;
}

void sub_21687B2D0(_Unwind_Exception *a1)
{
  void *v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_21687B2D8(uint64_t a1)
{
  uint64_t v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((atomic_ullong *)(a1 + 40), 1uLL, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>>>::initialize_array, 0);
  unint64_t v3 = sub_216851020((unint64_t)v2);
  uint64_t v4 = *(void *)(a1 + 64);
  __dmb(0xBu);
  uint64_t v5 = *(void *)(v4 + 8 * v3) + (((void)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5);
  *(unsigned char *)(v5 + 8) = 1;
  return v5;
}

uint64_t sub_21687B380(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_21687B394(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_21687B39C(void *a1)
{
  uint64_t v1 = sub_21687B6B4(a1);

  operator delete(v1);
}

void *sub_21687B3C4()
{
  double result = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *double result = &unk_26C74C0C8;
  return result;
}

uint64_t sub_21687B3FC(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);

  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_21687B45C(uint64_t a1, void *a2)
{
  *a2 = 0;
}

uint64_t sub_21687B464(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    bzero(a1, a3 << 7);
  }
}

uint64_t sub_21687B484(uint64_t a1)
{
  uint64_t v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((atomic_ullong *)(a1 + 40), 1uLL, (void *)0x80, (void (*)(void *, const void *, unint64_t))sub_21687B630, 0);
  unint64_t v3 = sub_216851020((unint64_t)v2);
  uint64_t v4 = *(void *)(a1 + 64);
  __dmb(0xBu);
  uint64_t v5 = *(void *)(v4 + 8 * v3) + (((void)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5);
  *(unsigned char *)(v5 + 72) = 1;
  return v5;
}

uint64_t sub_21687B52C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_21687B540(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_21687B548(void *a1)
{
  uint64_t v1 = sub_21687B0D0(a1);

  operator delete(v1);
}

void *sub_21687B570()
{
  double result = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *double result = &unk_26C74C1C0;
  return result;
}

uint64_t sub_21687B5A8(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);

  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

double sub_21687B608(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  return result;
}

uint64_t sub_21687B620(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void sub_21687B630(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    bzero(a1, a3 << 7);
  }
}

void sub_21687B640(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    unint64_t v3 = (unsigned char *)(a1 + (a2 << 7) - 56);
    do
    {
      if (*v3)
      {
        sub_21687B8D8((uint64_t)(v3 - 40), *((void **)v3 - 3));
        uint64_t v4 = (void *)*((void *)v3 - 5);
        *((void *)v3 - 5) = 0;
        if (v4) {
          operator delete(v4);
        }
        if ((char)*(v3 - 41) < 0) {
          operator delete(*((void **)v3 - 8));
        }
        *unint64_t v3 = 0;
      }
      v3 -= 128;
      --v2;
    }
    while (v2);
  }
}

void *sub_21687B6B4(void *a1)
{
  *a1 = &unk_26C74C068;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_216850D6C((uint64_t)a1);
  sub_21687B750(a1 + 4);
  *a1 = &unk_26C74B518;
  return a1;
}

unint64_t *sub_21687B750(unint64_t *a1)
{
  uint64_t v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  unint64_t v3 = (void *)a1[4];
  unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>>>::destroy_array);
  sub_216850F48((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

uint64_t tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>>>::destroy_array(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (unsigned char *)(result + (a2 << 7) - 120);
    do
    {
      if (*v2) {
        *uint64_t v2 = 0;
      }
      v2 -= 128;
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t sub_21687B7E4(uint64_t a1)
{
  sub_21687B820(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_21687B820(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_21687B864(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_21687B864(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_21686060C(v3 + 2);
        operator delete(v3);
        unint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_21687B8D8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_21687B91C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_21687B91C(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v2 = (uint64_t *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 24);
    unint64_t v3 = *(uint64_t **)(a1 + 32);
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    *(void *)(a1 + 40) = 0;
    if (v3 != (uint64_t *)(a1 + 24))
    {
      do
      {
        unint64_t v6 = (uint64_t *)v3[1];
        operator delete(v3);
        unint64_t v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v7 = *(void **)a1;
    operator delete(v7);
  }
}

void sub_21687B9B4(void *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
    uint64_t v4 = *(void **)v2;
    v4[1] = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((void *)v2 != a1)
    {
      uint64_t v5 = *(void *)(v2 + 8);
      sub_21687BA18((int)a1, (void **)v2);
      uint64_t v2 = v5;
    }
  }
}

void sub_21687BA18(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

void *sub_21687BA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = operator new(0x30uLL);
  *uint64_t v7 = a2;
  v7[1] = a3;
  sub_21687BABC((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_21687BAA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21687BABC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_21687BB54(uint64_t a1)
{
  uint64_t v2 = (atomic_ullong *)(a1 + 336);
  char v10 = 0;
  if (*(void *)sub_2168520EC((atomic_ullong *)(a1 + 336), &v10))
  {
    char v11 = 0;
    uint64_t v3 = sub_2168520EC(v2, &v11);
    uint64_t v4 = *(const void ***)(v3 + 48);
    if (v4)
    {
      LOBYTE(v5) = 0;
      do
      {
        if (v5)
        {
          BOOL v5 = 1;
        }
        else if (v4[7])
        {
          BOOL v5 = sub_21677B088(a1 + 88, v4 + 2) != 0;
        }
        else
        {
          BOOL v5 = 0;
        }
        unint64_t v6 = (uint64_t *)sub_21687BF90(a1 + 136, (pxrInternal__aapl__pxrReserved__ *)(v4 + 2));
        sub_21685A0DC((uint64_t)v6, v6, v4 + 5);
        uint64_t v4 = (const void **)*v4;
      }
      while (v4);
    }
    else
    {
      BOOL v5 = 0;
    }
    *(void *)uint64_t v3 = 0;
    if (*(char *)(v3 + 31) < 0)
    {
      **(unsigned char **)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v3 + 8) = 0;
      *(unsigned char *)(v3 + 31) = 0;
    }
    if (*(void *)(v3 + 56))
    {
      sub_21687B8D8(v3 + 32, *(void **)(v3 + 48));
      *(void *)(v3 + 48) = 0;
      uint64_t v7 = *(void *)(v3 + 40);
      if (v7)
      {
        for (uint64_t i = 0; i != v7; ++i)
          *(void *)(*(void *)(v3 + 32) + 8 * i) = 0;
      }
      *(void *)(v3 + 56) = 0;
    }
    if (v5)
    {
      for (uint64_t j = *(void *)(a1 + 120); j != a1 + 112; uint64_t j = *(void *)(j + 8))
        sub_21687BCC0(a1, (pxrInternal__aapl__pxrReserved__ *)(j + 16));
    }
  }
}

void sub_21687BCC0(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2)
{
  uint64_t v2 = (unsigned __int8 *)a2;
  *(void *)&long long v27 = 0;
  BYTE8(v27) = 0;
  uint64_t v4 = (char *)*((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    BOOL v5 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    BOOL v5 = v4;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v27, a2, v5);
  int8x8_t v6 = *(int8x8_t *)(a1 + 144);
  if (v6)
  {
    unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v27);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v10 = v7;
      if (v7 >= *(void *)&v6) {
        unint64_t v10 = v7 % *(void *)&v6;
      }
    }
    else
    {
      unint64_t v10 = (*(void *)&v6 - 1) & v7;
    }
    char v11 = *(unsigned __int8 ***)(*(void *)(a1 + 136) + 8 * v10);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v13 = *((void *)i + 1);
        if (v13 == v7)
        {
          if (sub_2168513F8(a1 + 168, i + 16, v2))
          {
            if (sub_216855488(0))
            {
              if ((v2[23] & 0x80u) == 0) {
                uint64_t v20 = (uint64_t *)v2;
              }
              else {
                uint64_t v20 = *(uint64_t **)v2;
              }
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfRegistryManager: running %zd functions for %s\n", v18, v19, *((void *)i + 7), v20);
            }
            sub_21685A0DC(a1 + 216, *(uint64_t **)(a1 + 224), (void *)i + 5);
            if (*((void *)i + 7))
            {
              *(void *)&long long v27 = "tf/registryManager.cpp";
              *((void *)&v27 + 1) = "_RunRegistrationFunctionsNoLock";
              uint64_t v28 = 489;
              char v29 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::_RunRegistrati"
                    "onFunctionsNoLock(const string &)";
              char v30 = 0;
              int v31 = 4;
              pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v27, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v21, "i->second.empty()");
            }
            for (uint64_t j = *(void *)(a1 + 232); j; uint64_t j = *(void *)(a1 + 232))
            {
              uint64_t v23 = *(_OWORD **)(a1 + 224);
              long long v27 = v23[1];
              uint64_t v24 = *(void *)v23;
              *(void *)(v24 + 8) = *((void *)v23 + 1);
              **((void **)v23 + 1) = v24;
              *(void *)(a1 + 232) = j - 1;
              operator delete(v23);
              LOBYTE(v32) = 0;
              uint64_t v25 = *(void *)sub_2168520EC((atomic_ullong *)(a1 + 240), &v32);
              uint64_t v32 = (void *)&v27 + 1;
              int v26 = sub_21687C500(a1 + 176, (void *)&v27 + 1, (uint64_t)&unk_2174BFD90, &v32) + 3;
              LOBYTE(v32) = 0;
              *(void *)sub_2168520EC((atomic_ullong *)(a1 + 240), &v32) = v26;
              std::recursive_mutex::unlock((std::recursive_mutex *)a1);
              ((void (*)(void, void))v27)(0, 0);
              std::recursive_mutex::lock((std::recursive_mutex *)a1);
              LOBYTE(v32) = 0;
              *(void *)sub_2168520EC((atomic_ullong *)(a1 + 240), &v32) = v25;
            }
            return;
          }
        }
        else
        {
          if (v9 > 1)
          {
            if (v13 >= *(void *)&v6) {
              v13 %= *(void *)&v6;
            }
          }
          else
          {
            v13 &= *(void *)&v6 - 1;
          }
          if (v13 != v10) {
            break;
          }
        }
      }
    }
  }
  if (sub_216855488(0))
  {
    if ((v2[23] & 0x80u) == 0) {
      uint64_t v16 = (uint64_t *)v2;
    }
    else {
      uint64_t v16 = *(uint64_t **)v2;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfRegistryManager: no functions to run for %s\n", v14, v15, v16);
  }
}

unsigned __int8 *sub_21687BF90(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2)
{
  uint64_t v3 = a2;
  unsigned __int8 v38 = 0;
  LOBYTE(v39) = 0;
  BOOL v5 = (char *)*((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    int8x8_t v6 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    int8x8_t v6 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v38, a2, v6);
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * (void)v38);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
    char v11 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v13 = *((void *)i + 1);
        if (v13 == v7)
        {
          if (sub_2168513F8(a1 + 32, i + 16, (unsigned __int8 *)v3)) {
            return i + 40;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v2) {
            break;
          }
        }
      }
    }
  }
  char v14 = (void *)(a1 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x40uLL);
  unsigned __int8 v38 = v15;
  uint64_t v39 = a1 + 16;
  char v40 = 0;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v7;
  uint64_t v16 = v15 + 16;
  if (*((char *)v3 + 23) < 0)
  {
    sub_216778F24(v16, *(void **)v3, *((void *)v3 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v3;
    *((void *)v15 + 4) = *((void *)v3 + 2);
  }
  *((void *)v15 + 5) = v15 + 40;
  *((void *)v15 + 6) = v15 + 40;
  *((void *)v15 + 7) = 0;
  char v40 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3) {
      BOOL v19 = 0;
    }
    unint64_t v20 = (2 * v8) | !v19;
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if (*(void *)&prime > v8) {
      goto LABEL_36;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            sub_21677CA1C();
          }
          uint64_t v23 = operator new(8 * *(void *)&prime);
          uint64_t v24 = *(void **)a1;
          *(void *)a1 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          int v26 = (void *)*v14;
          if (*v14)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v27) = v14;
            uint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v33))
                  {
                    *(void *)(*(void *)a1 + 8 * v33) = v26;
                    goto LABEL_61;
                  }
                  *int v26 = *v32;
                  *uint64_t v32 = **(void **)(*(void *)a1 + 8 * v33);
                  **(void **)(*(void *)a1 + 8 * v33) = v32;
                  uint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_61:
                int v26 = v32;
                uint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_65;
        }
        uint64_t v37 = *(void **)a1;
        *(void *)a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v8 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_65:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v2 = v7 % v8;
      }
      else {
        unint64_t v2 = v7;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v7;
    }
  }
  std::locale v34 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
  if (v34)
  {
    *(void *)unsigned __int8 v38 = *v34;
    *std::locale v34 = v38;
  }
  else
  {
    *(void *)unsigned __int8 v38 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v38;
    *(void *)(*(void *)a1 + 8 * v2) = v14;
    if (*(void *)v38)
    {
      unint64_t v35 = *(void *)(*(void *)v38 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v35 >= v8) {
          v35 %= v8;
        }
      }
      else
      {
        v35 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v35) = v38;
    }
  }
  uint64_t i = v38;
  unsigned __int8 v38 = 0;
  ++*(void *)(a1 + 24);
  sub_21687C43C((uint64_t)&v38);
  return i + 40;
}

void sub_21687C424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21687C43C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21687C43C(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21687B91C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void *sub_21687C484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = operator new(0x28uLL);
  *unint64_t v7 = a2;
  v7[1] = a3;
  unint64_t v8 = v7 + 2;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_216778F24(v8, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a4;
    void v7[4] = *(void *)(a4 + 16);
  }
  return v7;
}

void sub_21687C4EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_21687C500(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      char v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          char v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  char v14 = operator new(0x30uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *char v14 = 0;
  v14[1] = v7;
  void v14[2] = **a4;
  unint64_t v14[3] = v14 + 3;
  v14[4] = v14 + 3;
  v14[5] = 0;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *unint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  char v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_21687C77C((uint64_t)v24, 0);
  return v11;
}

void sub_21687C764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21687C77C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_21687C77C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21687B864(v2 + 3);
    }
    operator delete(v2);
  }
}

void sub_21687C7D4(uint64_t a1, unsigned __int8 **a2)
{
  v16[0] = (uint64_t)v16;
  v16[1] = (uint64_t)v16;
  v16[2] = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != a1)
  {
    do
    {
      uint64_t v5 = *(unsigned __int8 *)(v2 + 39);
      if ((v5 & 0x80u) == 0) {
        int8x8_t v6 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 39);
      }
      else {
        int8x8_t v6 = *(unsigned __int8 **)(v2 + 24);
      }
      unint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
      int v8 = (char)v7;
      if ((char)v7 < 0) {
        unint64_t v7 = a2[1];
      }
      if (v6 == v7)
      {
        if (v8 >= 0) {
          uint8x8_t v9 = (unsigned __int8 *)a2;
        }
        else {
          uint8x8_t v9 = *a2;
        }
        if ((v5 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v2 + 16), v9, *(void *)(v2 + 24)))
          {
LABEL_22:
            for (uint64_t i = *(void *)(v2 + 8); i != a1; uint64_t i = *(void *)(i + 8))
            {
              uint64_t v12 = *(unsigned __int8 *)(i + 39);
              if ((v12 & 0x80u) == 0) {
                uint64_t v13 = (unsigned __int8 *)*(unsigned __int8 *)(i + 39);
              }
              else {
                uint64_t v13 = *(unsigned __int8 **)(i + 24);
              }
              if (v13 != v6) {
                goto LABEL_36;
              }
              if ((v12 & 0x80) != 0)
              {
                if (memcmp(*(const void **)(i + 16), v9, *(void *)(i + 24))) {
                  goto LABEL_36;
                }
              }
              else if (*(unsigned char *)(i + 39))
              {
                uint64_t v14 = 0;
                while (*(unsigned __int8 *)(i + v14 + 16) == v9[v14])
                {
                  if (v12 == ++v14) {
                    goto LABEL_35;
                  }
                }
LABEL_36:
                char v15 = 0;
                goto LABEL_38;
              }
LABEL_35:
              ;
            }
            char v15 = 1;
            uint64_t i = a1;
LABEL_38:
            sub_21687C978((uint64_t)v16, v16, a1, (void *)v2, (void *)i);
            if (v15) {
              goto LABEL_20;
            }
            goto LABEL_19;
          }
        }
        else
        {
          if (!*(unsigned char *)(v2 + 39)) {
            goto LABEL_22;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v2 + v10 + 16) == v9[v10])
          {
            if (v5 == ++v10) {
              goto LABEL_22;
            }
          }
        }
      }
      uint64_t i = v2;
LABEL_19:
      uint64_t i = *(void *)(i + 8);
LABEL_20:
      uint64_t v2 = i;
    }
    while (i != a1);
  }
  sub_21687B9B4(v16);
}

void sub_21687C964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21687B9B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21687C978(uint64_t result, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4 != a5)
  {
    uint64_t v5 = (void *)*a5;
    if (result != a3)
    {
      uint64_t v6 = 1;
      if (v5 != a4)
      {
        unint64_t v7 = a4;
        do
        {
          unint64_t v7 = (void *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(void *)(a3 + 16) -= v6;
      *(void *)(result + 16) += v6;
    }
    uint64_t v8 = *a4;
    *(void *)(v8 + 8) = v5[1];
    *(void *)v5[1] = v8;
    uint64_t v9 = *a2;
    *(void *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

uint64_t sub_21687C9F0(uint64_t a1, char *a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 64);
  sub_216779094(__p, a2);
  uint64_t v8 = __p;
  unint64_t v4 = sub_21687CA90(v3, (const void **)__p, (uint64_t)&unk_2174BFD90, (_OWORD **)&v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = *((void *)v4 + 7);
  if (!result)
  {
    uint64_t result = *(void *)(a1 + 80);
    *((void *)v4 + 7) = result;
  }
  return result;
}

void sub_21687CA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_21687CA90(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_21677B220((uint64_t)a1, &v12, a2);
  char v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    char v7 = operator new(0x40uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _OWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    _OWORD v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 7) = 0;
    sub_21677B358(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void *sub_21687CB2C(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = bswap64(0x9E3779B97F4A7C55 * *a2);
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = v3;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

long long *sub_21687CBF8(long long *result, uint64_t *a2)
{
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + 2) = a2[2];
  a2[2] = v2;
  long long v3 = *result;
  *uint64_t result = *(_OWORD *)a2;
  *(_OWORD *)a2 = v3;
  if (*((void *)result + 2))
  {
    **((void **)result + 1) = result;
    uint8x8_t v4 = *(long long **)result;
  }
  else
  {
    *(void *)uint64_t result = result;
    uint8x8_t v4 = result;
  }
  *((void *)v4 + 1) = result;
  if (a2[2])
  {
    *(void *)a2[1] = a2;
    unint64_t v5 = (uint64_t *)*a2;
  }
  else
  {
    *a2 = (uint64_t)a2;
    unint64_t v5 = a2;
  }
  v5[1] = (uint64_t)a2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Close(pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *this)
{
  uint64_t v2 = *(FILE **)this;
  if (v2)
  {
    fclose(v2);
    *(void *)this = 0;
    if (*((char *)this + 55) < 0)
    {
      if (!*((void *)this + 5)) {
        return;
      }
    }
    else if (!*((unsigned char *)this + 55))
    {
      return;
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v6 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_AtomicRenameFileOver((const std::__fs::filesystem::path *)((char *)this + 32), (const std::__fs::filesystem::path *)((char *)this + 8), (uint64_t)__p))
    {
      v3[0] = "tf/safeOutputFile.cpp";
      v3[1] = "Close";
      v3[2] = 86;
      v3[3] = "void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Close()";
      char v4 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 3, (uint64_t *)__p);
    }
    if (*((char *)this + 55) < 0)
    {
      **((unsigned char **)this + 4) = 0;
      *((void *)this + 5) = 0;
    }
    else
    {
      *((unsigned char *)this + 32) = 0;
      *((unsigned char *)this + 55) = 0;
    }
    if (*((char *)this + 31) < 0)
    {
      **((unsigned char **)this + 1) = 0;
      *((void *)this + 2) = 0;
    }
    else
    {
      *((unsigned char *)this + 8) = 0;
      *((unsigned char *)this + 31) = 0;
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_21687CDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::IsOpenForUpdate(pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *this)
{
  if (!*(void *)this) {
    return 0;
  }
  if (*((char *)this + 55) < 0) {
    uint64_t v1 = *((void *)this + 5);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 55);
  }
  return v1 == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::ReleaseUpdatedFile(pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *this)
{
  uint64_t result = *(void *)this;
  if (!result) {
    goto LABEL_6;
  }
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 55))
    {
      *(void *)this = 0;
      *((unsigned char *)this + 32) = 0;
      *((unsigned char *)this + 55) = 0;
      goto LABEL_9;
    }
LABEL_6:
    v3[0] = "tf/safeOutputFile.cpp";
    v3[1] = "ReleaseUpdatedFile";
    v3[2] = 60;
    v3[3] = "FILE *pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::ReleaseUpdatedFile()";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid output file (failed to open, or opened for replace)");
    return 0;
  }
  if (*((void *)this + 5)) {
    goto LABEL_6;
  }
  *(void *)this = 0;
  **((unsigned char **)this + 4) = 0;
  *((void *)this + 5) = 0;
LABEL_9:
  if (*((char *)this + 31) < 0)
  {
    **((unsigned char **)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
  else
  {
    *((unsigned char *)this + 8) = 0;
    *((unsigned char *)this + 31) = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Discard(pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *this)
{
  if (!*(void *)this) {
    goto LABEL_4;
  }
  if (*((char *)this + 55) < 0)
  {
    if (*((void *)this + 5)) {
      goto LABEL_4;
    }
LABEL_11:
    __p[0] = "tf/safeOutputFile.cpp";
    __p[1] = "Discard";
    uint64_t v4 = 98;
    unint64_t v5 = "void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Discard()";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid output file (failed to open, or opened for update)");
    return;
  }
  if (!*((unsigned char *)this + 55)) {
    goto LABEL_11;
  }
LABEL_4:
  *(_OWORD *)std::string __p = *((_OWORD *)this + 2);
  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Close(this);
  uint64_t v1 = (void *)HIBYTE(v4);
  char v2 = HIBYTE(v4);
  if (v4 < 0) {
    uint64_t v1 = __p[1];
  }
  if (v1)
  {
    pxrInternal__aapl__pxrReserved__::TfDeleteFile((const char *)__p);
    char v2 = HIBYTE(v4);
  }
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21687CF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Update(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::operator=((std::string *)(a2 + 8), __str);
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = __str;
  }
  else {
    uint64_t v4 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  unint64_t v5 = pxrInternal__aapl__pxrReserved__::ArchOpenFile((const char *)v4, "rb+");
  if (v5)
  {
    *(void *)a2 = v5;
  }
  else
  {
    v7[0] = "tf/safeOutputFile.cpp";
    v7[1] = "Update";
    _OWORD v7[2] = 121;
    v7[3] = "static TfSafeOutputFile pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Update(const std::string &)";
    char v8 = 0;
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v6 = __str;
    }
    else {
      char v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to open file '%s' for writing", (const char *)v6);
  }
}

void sub_21687D070(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Replace(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  if (*(char *)(a1 + 23) < 0) {
    sub_216778F24(&__dst, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __dst = *(std::string *)a1;
  }
  int v3 = pxrInternal__aapl__pxrReserved__::Tf_CreateSiblingTempFile(&__dst, (std::string *)(a2 + 8), (std::string *)(a2 + 32), (uint64_t)v15);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v3 == -1)
  {
    uint64_t v9 = "tf/safeOutputFile.cpp";
    uint64_t v10 = "Replace";
    uint64_t v11 = 138;
    uint64_t v12 = "static TfSafeOutputFile pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Replace(const std::string &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 3, (uint64_t *)v15);
  }
  else
  {
    uint64_t v4 = fdopen(v3, "wb");
    *(void *)a2 = v4;
    if (!v4)
    {
      uint64_t v9 = "tf/safeOutputFile.cpp";
      uint64_t v10 = "Replace";
      uint64_t v11 = 146;
      uint64_t v12 = "static TfSafeOutputFile pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Replace(const std::string &)";
      char v13 = 0;
      unint64_t v5 = __error();
      pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v5, __p);
      char v6 = v8 >= 0 ? (const char *)__p : (const char *)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to obtain writable FILE pointer: %s", v6);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_21687D1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 - 17) < 0) {
    operator delete(*(void **)(v17 - 40));
  }
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile(v16);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(uint64_t a1, uint64_t *a2, long long *a3)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  *(void *)(a1 + 32) = v4;
  long long v5 = *a3;
  long long v6 = a3[1];
  *(void *)(a1 + 72) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  sub_21687D2C8(a1);
  return a1;
}

void sub_21687D2AC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_2173241F8((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21687D2C8(uint64_t a1)
{
  char v2 = *(uint64_t **)off_26B4B19B0();
  if (!v2)
  {
    if ((*(unsigned char *)off_26B4B19E0() & 1) == 0)
    {
      uint8x8_t v30 = v6;
      char v8 = off_26B4B19C8;
      uint64_t v9 = off_26B4B19C8();
      *(void *)uint64_t v9 = 0;
      *(unsigned char *)(v9 + 8) = 0;
      uint64_t v10 = (void *)sub_21687E548();
      pthread_t v11 = pthread_self();
      v35[2] = v11;
      sub_21685036C((uint64_t)v35, (uint64_t)v10);
      pthread_t v31 = v11;
      sub_21685B8D0();
      uint64_t v34 = ((uint64_t (*)(uint64_t (**)(void)))v8)(&off_26B4B19C8);
      char v13 = (pthread_t *)v10[2];
      unint64_t v12 = v10[3];
      if ((unint64_t)v13 >= v12)
      {
        uint64_t v16 = (void *)v10[1];
        unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * (v13 - (pthread_t *)v16) + 1;
        if (v17 > 0x666666666666666) {
          sub_21677CB10();
        }
        unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (void)v16) >> 3);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0x333333333333333) {
          unint64_t v19 = 0x666666666666666;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19 > 0x666666666666666) {
          sub_21677CA1C();
        }
        size_t v20 = (char *)operator new(40 * v19) + 8 * (v13 - (pthread_t *)v16);
        *(void *)size_t v20 = v31;
        *(_OWORD *)(v20 + 8) = __p;
        *((void *)v20 + 3) = v33;
        long long __p = 0uLL;
        unint64_t v33 = 0;
        uint64_t v21 = ((uint64_t (*)(uint64_t (**)(void)))v8)(&off_26B4B19C8);
        *(void *)(v23 + 32) = v21;
        if (v13 == v16)
        {
          char v15 = (void *)(v23 + 40);
          v10[1] = v23;
          v10[2] = v23 + 40;
          v10[3] = v22 + 40 * v19;
        }
        else
        {
          uint64_t v24 = v23;
          do
          {
            uint64_t v25 = (uint64_t)*(v13 - 5);
            v13 -= 5;
            *(void *)(v24 - 40) = v25;
            v24 -= 40;
            long long v26 = *(_OWORD *)(v13 + 1);
            *(void *)(v24 + 24) = v13[3];
            *(_OWORD *)(v24 + 8) = v26;
            void v13[2] = 0;
            void v13[3] = 0;
            v13[1] = 0;
            *(void *)(v24 + 32) = v13[4];
          }
          while (v13 != v16);
          char v13 = (pthread_t *)v10[1];
          unint64_t v27 = (pthread_t *)v10[2];
          char v15 = (void *)(v23 + 40);
          v10[1] = v24;
          v10[2] = v23 + 40;
          v10[3] = v22 + 40 * v19;
          while (v27 != v13)
          {
            if (*((char *)v27 - 9) < 0) {
              operator delete(*(v27 - 4));
            }
            v27 -= 5;
          }
        }
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        pthread_t *v13 = v31;
        long long v14 = __p;
        void v13[3] = v33;
        *(_OWORD *)(v13 + 1) = v14;
        unint64_t v33 = 0;
        long long __p = 0uLL;
        void v13[4] = (pthread_t)v34;
        char v15 = v13 + 5;
      }
      v10[2] = v15;
      if (SHIBYTE(v33) < 0) {
        operator delete((void *)__p);
      }
      uint8x8_t v28 = (unsigned char *)v35[0];
      if (v35[0])
      {
        __dmb(0xBu);
        *uint8x8_t v28 = 0;
      }
      unint64_t v29 = (void *)((uint64_t (*)(uint64_t (**)(void)))v8)(&off_26B4B19C8);
      _tlv_atexit((void (__cdecl *)(void *))sub_21687E374, v29);
      *(unsigned char *)v30(&off_26B4B19E0) = 1;
    }
    char v2 = (uint64_t *)off_26B4B19C8();
    *char v7 = v2;
  }
  uint64_t v3 = *v2;
  *(void *)(a1 + 80) = v2;
  *(void *)(a1 + 88) = v3;
  uint64_t result = sub_21685036C((uint64_t)&v31, (uint64_t)(v2 + 1));
  *char v2 = a1;
  long long v5 = v31;
  if (v31)
  {
    __dmb(0xBu);
    unsigned char *v5 = 0;
  }
  return result;
}

void sub_21687D5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, unsigned char *a19)
{
  if (a19)
  {
    __dmb(0xBu);
    *a19 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(uint64_t a1, long long *a2, long long *a3)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a1 + 24) = 1;
  uint64_t v5 = a1;
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v5 = *(void *)a1;
  }
  *(void *)(a1 + 32) = v5;
  long long v6 = *a3;
  long long v7 = a3[1];
  *(void *)(a1 + 72) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  sub_21687D2C8(a1);
  return a1;
}

void sub_21687D68C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(uint64_t a1, uint64_t a2, long long *a3)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  long long v4 = *a3;
  long long v5 = a3[1];
  *(void *)(a1 + 72) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  sub_21687D2C8(a1);
  return a1;
}

void sub_21687D6FC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_2173241F8((void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription(pxrInternal__aapl__pxrReserved__::TfScopeDescription *this, uint64_t a2, char *a3)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TfScopeDescription **)*((void *)this + 10);
  if (*v3 != this)
  {
    v6[0] = "tf/scopeDescription.cpp";
    v6[1] = "_Pop";
    _OWORD v6[2] = 339;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::TfScopeDescription::_Pop() const";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "stack.head == this");
  }
  sub_21685036C((uint64_t)v6, (uint64_t)(v3 + 1));
  *uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TfScopeDescription *)*((void *)this + 11);
  long long v5 = (unsigned char *)v6[0];
  if (v6[0])
  {
    __dmb(0xBu);
    unsigned char *v5 = 0;
  }
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*(void **)this);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::TfScopeDescription::SetDescription(uint64_t a1, uint64_t *a2)
{
  sub_21685036C((uint64_t)&v6, *(void *)(a1 + 80) + 8);
  if (*((char *)a2 + 23) >= 0) {
    long long v4 = a2;
  }
  else {
    long long v4 = (uint64_t *)*a2;
  }
  *(void *)(a1 + 32) = v4;
  long long v5 = v6;
  if (v6)
  {
    __dmb(0xBu);
    unsigned char *v5 = 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfScopeDescription::SetDescription(uint64_t a1, long long *a2)
{
  sub_21685036C((uint64_t)&v7, *(void *)(a1 + 80) + 8);
  uint64_t result = sub_21687D8E8(a1, a2);
  uint64_t v5 = a1;
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v5 = *(void *)a1;
  }
  *(void *)(a1 + 32) = v5;
  long long v6 = v7;
  if (v7)
  {
    __dmb(0xBu);
    *long long v6 = 0;
  }
  return result;
}

void sub_21687D8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21687D8E8(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfScopeDescription::SetDescription(pxrInternal__aapl__pxrReserved__::TfScopeDescription *this, const char *a2)
{
  sub_21685036C((uint64_t)&v5, *((void *)this + 10) + 8);
  *((void *)this + 4) = a2;
  long long v4 = v5;
  if (v5)
  {
    __dmb(0xBu);
    *long long v4 = 0;
  }
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*(void **)this);
    }
    *((unsigned char *)this + 24) = 0;
  }
}

double pxrInternal__aapl__pxrReserved__::TfGetCurrentScopeDescriptionStack@<D0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t MainThreadId = pxrInternal__aapl__pxrReserved__::ArchGetMainThreadId(this);

  *(void *)&double result = sub_21687DA08(MainThreadId, a2).n128_u64[0];
  return result;
}

__n128 sub_21687DA08@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = sub_21687E548();
  sub_21687E5B4(v4);
  long long v6 = *(void **)(v4 + 8);
  char v7 = *(void **)(v4 + 16);
  if (v6 != v7)
  {
    while (1)
    {
      if (*v6)
      {
        if (a1 && *v6 == a1) {
          break;
        }
      }
      else if (!a1)
      {
        break;
      }
      v6 += 5;
      if (v6 == v7) {
        goto LABEL_19;
      }
    }
  }
  if (v6 != v7)
  {
    int v8 = (uint64_t *)v6[4];
    if (v8)
    {
      sub_21685036C((uint64_t)&v22, (uint64_t)(v8 + 1));
      uint64_t v9 = *v8;
      if (*v8)
      {
        uint64_t v10 = (void *)a2[1];
        do
        {
          pthread_t v11 = *(char **)(v9 + 32);
          uint64_t v21 = v11;
          if ((unint64_t)v10 >= a2[2])
          {
            uint64_t v10 = (void *)sub_21687E624(a2, &v21);
          }
          else
          {
            sub_216779094(v10, v11);
            v10 += 3;
            a2[1] = (uint64_t)v10;
          }
          a2[1] = (uint64_t)v10;
          uint64_t v9 = *(void *)(v9 + 88);
        }
        while (v9);
      }
      unint64_t v12 = v22;
      if (v22)
      {
        __dmb(0xBu);
        unsigned char *v12 = 0;
      }
    }
  }
LABEL_19:
  __dmb(0xBu);
  *(unsigned char *)uint64_t v4 = 0;
  unint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  unint64_t v15 = v14 - 24;
  if (*a2 != v14 && v15 > v13)
  {
    unint64_t v17 = v13 + 24;
    do
    {
      uint64_t v18 = *(void *)(v17 - 8);
      __n128 result = *(__n128 *)(v17 - 24);
      uint64_t v19 = *(void *)(v15 + 16);
      *(_OWORD *)(v17 - 24) = *(_OWORD *)v15;
      *(void *)(v17 - 8) = v19;
      *(__n128 *)unint64_t v15 = result;
      *(void *)(v15 + 16) = v18;
      v15 -= 24;
      BOOL v20 = v17 >= v15;
      v17 += 24;
    }
    while (!v20);
  }
  return result;
}

void sub_21687DB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  __dmb(0xBu);
  *uint64_t v3 = 0;
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::TfGetThisThreadScopeDescriptionStack@<D0>(uint64_t *a1@<X8>)
{
  pthread_t v3 = pthread_self();

  *(void *)&double result = sub_21687DA08((uint64_t)v3, a1).n128_u64[0];
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::Tf_ScopeDescriptionStackReportLock(pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *this, uint64_t a2, uint64_t a3)
{
  pthread_t v3 = (void *)MEMORY[0x270FA5388](this, a2, a3);
  uint64_t v87 = *MEMORY[0x263EF8340];
  sub_21687E5B4((uint64_t)&byte_26798E428);
  uint64_t v4 = sub_21687E548();
  long long v84 = 0;
  char v85 = 0;
  uint64_t v5 = sub_21687E72C(&v84, v4);
  if (v5)
  {
    memset(v86, 0, 512);
    uint64_t v6 = *(void *)(v4 + 8);
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v4 + 16) - v6) >> 3);
    if (v7 >= 0x400) {
      unint64_t v7 = 1024;
    }
    unint64_t v81 = v7;
    if (v7)
    {
      int v8 = v86;
      unint64_t v9 = v81;
      do
      {
        *v8++ = v6;
        v6 += 40;
        --v9;
      }
      while (v9);
    }
    uint64_t MainThreadId = (unsigned char *)pxrInternal__aapl__pxrReserved__::ArchGetMainThreadId((pxrInternal__aapl__pxrReserved__ *)v5);
    unint64_t v10 = 126 - 2 * __clz(v81);
    if (v81) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    sub_21687E858((unint64_t)v86, (unint64_t **)v86 + v81, (uint64_t *)&MainThreadId, v11, 1);
    if (v81)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0x1FFFFFu;
      uint64_t v14 = byte_26798E460;
      do
      {
        unint64_t v15 = (uint64_t *)*((void *)v86 + v12);
        uint64_t MainThreadId = 0;
        char v83 = 0;
        uint64_t v16 = sub_21687E72C(&MainThreadId, v15[4] + 8);
        if ((v16 & 1) == 0)
        {
          uint64_t v17 = 0;
          char v18 = 69;
          while (1)
          {
            uint64_t v19 = &byte_26798E460[v13];
            if (&v14[v17] == &byte_26798E460[v13]) {
              break;
            }
            v14[v17] = v18;
            char v18 = aErrorCannotWri[++v17];
            if (v17 == 56)
            {
              uint64_t v19 = v14 + 56;
              break;
            }
          }
          *uint64_t v19 = 0;
          BOOL v20 = v15 + 1;
          if (*((char *)v15 + 31) < 0) {
            BOOL v20 = (void *)*v20;
          }
          char v21 = *(unsigned char *)v20;
          if (*(unsigned char *)v20)
          {
            uint64_t v22 = (unsigned __int8 *)v20 + 1;
            while (v19 != &byte_26798E460[v13])
            {
              *v19++ = v21;
              int v23 = *v22++;
              char v21 = v23;
              if (!v23) {
                goto LABEL_25;
              }
            }
            uint64_t v19 = &byte_26798E460[v13];
          }
LABEL_25:
          uint64_t v24 = 0;
          *uint64_t v19 = 0;
          char v25 = 32;
          while (1)
          {
            uint64_t v14 = &byte_26798E460[v13];
            if (&v19[v24] == &byte_26798E460[v13]) {
              break;
            }
            v19[v24] = v25;
            char v25 = aFailedToAcquir[++v24];
            if (v24 == 34)
            {
              uint64_t v14 = v19 + 34;
              break;
            }
          }
          *uint64_t v14 = 0;
        }
        if (!*(void *)v15[4]) {
          goto LABEL_118;
        }
        uint64_t v26 = 0;
        char v27 = 84;
        while (1)
        {
          uint8x8_t v28 = &byte_26798E460[v13];
          if (&v14[v26] == &byte_26798E460[v13]) {
            break;
          }
          v14[v26] = v27;
          char v27 = aThread[++v26];
          if (v26 == 7)
          {
            uint8x8_t v28 = v14 + 7;
            break;
          }
        }
        *uint8x8_t v28 = 0;
        unint64_t v29 = v15 + 1;
        if (*((char *)v15 + 31) < 0) {
          unint64_t v29 = (void *)*v29;
        }
        char v30 = *(unsigned char *)v29;
        if (*(unsigned char *)v29)
        {
          pthread_t v31 = (unsigned __int8 *)v29 + 1;
          while (v28 != &byte_26798E460[v13])
          {
            *v28++ = v30;
            int v32 = *v31++;
            char v30 = v32;
            if (!v32) {
              goto LABEL_43;
            }
          }
          uint8x8_t v28 = &byte_26798E460[v13];
        }
LABEL_43:
        *uint8x8_t v28 = 0;
        uint64_t v33 = *v15;
        uint64_t v34 = pxrInternal__aapl__pxrReserved__::ArchGetMainThreadId((pxrInternal__aapl__pxrReserved__ *)v16);
        if (v33)
        {
          if (v34 && v33 == v34)
          {
LABEL_46:
            uint64_t v35 = 0;
            char v36 = 32;
            while (&v28[v35] != &byte_26798E460[v13])
            {
              v28[v35] = v36;
              char v36 = aMain[++v35];
              if (v35 == 7)
              {
                v28 += 7;
                goto LABEL_53;
              }
            }
            uint8x8_t v28 = &byte_26798E460[v13];
LABEL_53:
            *uint8x8_t v28 = 0;
          }
        }
        else if (!v34)
        {
          goto LABEL_46;
        }
        uint64_t v37 = 0;
        char v38 = 32;
        while (1)
        {
          uint64_t v39 = &byte_26798E460[v13];
          if (&v28[v37] == &byte_26798E460[v13]) {
            break;
          }
          v28[v37] = v38;
          char v38 = aScopeDescripti[++v37];
          if (v37 == 20)
          {
            uint64_t v39 = v28 + 20;
            break;
          }
        }
        *uint64_t v39 = 0;
        char v40 = *(void **)v15[4];
        if (v40)
        {
          uint64_t v41 = 1;
          while (2)
          {
            if (v39 == &byte_26798E460[v13])
            {
              std::locale v42 = &byte_26798E460[v13];
              byte_26798E460[v13] = 0;
            }
            else
            {
              *(_WORD *)uint64_t v39 = 35;
              std::locale v42 = &byte_26798E460[v13];
              if (v39 + 1 != &byte_26798E460[v13])
              {
                unint64_t v43 = 0;
                unint64_t v44 = v41;
                do
                {
                  uint64_t v45 = &v39[v43 + 2];
                  v39[++v43] = (v44 % 0xA) | 0x30;
                  if (v44 < 0xA) {
                    break;
                  }
                  v44 /= 0xAuLL;
                }
                while (v45 != &byte_26798E460[v13]);
                uint64_t v46 = &v39[v43];
                if (v43 >= 2)
                {
                  uint64_t v47 = v39 + 2;
                  uint64_t v48 = &v39[v43];
                  do
                  {
                    char v49 = *(v47 - 1);
                    *(v47 - 1) = *v48;
                    *v48-- = v49;
                    BOOL v50 = v47++ >= v48;
                  }
                  while (!v50);
                }
                std::locale v42 = &byte_26798E460[v13];
                v46[1] = 0;
                if (v45 != &byte_26798E460[v13])
                {
                  std::locale v42 = &v39[v43 + 2];
                  v46[1] = 32;
                }
              }
            }
            char *v42 = 0;
            uint64_t v51 = (unsigned char *)v40[4];
            char v52 = *v51;
            if (*v51)
            {
              uint64_t v53 = v51 + 1;
              while (v42 != &byte_26798E460[v13])
              {
                *v42++ = v52;
                int v54 = *v53++;
                char v52 = v54;
                if (!v54) {
                  goto LABEL_78;
                }
              }
              std::locale v42 = &byte_26798E460[v13];
            }
LABEL_78:
            char *v42 = 0;
            if (!v40[5] || !v40[6]) {
              goto LABEL_112;
            }
            uint64_t v55 = 0;
            char v56 = 32;
            while (1)
            {
              std::string::size_type v57 = &byte_26798E460[v13];
              if (&v42[v55] == &byte_26798E460[v13]) {
                break;
              }
              v42[v55] = v56;
              char v56 = aFrom[++v55];
              if (v55 == 7)
              {
                std::string::size_type v57 = v42 + 7;
                break;
              }
            }
            *std::string::size_type v57 = 0;
            int64_t v58 = (unsigned char *)v40[6];
            char v59 = *v58;
            if (*v58)
            {
              uint64_t v60 = v58 + 1;
              while (v57 != &byte_26798E460[v13])
              {
                *v57++ = v59;
                int v61 = *v60++;
                char v59 = v61;
                if (!v61) {
                  goto LABEL_90;
                }
              }
              std::string::size_type v57 = &byte_26798E460[v13];
            }
LABEL_90:
            uint64_t v62 = 0;
            *std::string::size_type v57 = 0;
            char v63 = 32;
            while (1)
            {
              std::string::size_type v64 = &byte_26798E460[v13];
              if (&v57[v62] == &byte_26798E460[v13]) {
                break;
              }
              v57[v62] = v63;
              char v63 = aIn[++v62];
              if (v62 == 4)
              {
                std::string::size_type v64 = v57 + 4;
                break;
              }
            }
            *std::string::size_type v64 = 0;
            uint64_t v65 = (unsigned char *)v40[5];
            char v66 = *v65;
            if (*v65)
            {
              uint64_t v67 = v65 + 1;
              while (v64 != &byte_26798E460[v13])
              {
                *v64++ = v66;
                int v68 = *v67++;
                char v66 = v68;
                if (!v68) {
                  goto LABEL_98;
                }
              }
              byte_26798E460[v13] = 0;
LABEL_110:
              std::locale v42 = &byte_26798E460[v13];
              byte_26798E460[v13] = 0;
            }
            else
            {
LABEL_98:
              *std::string::size_type v64 = 0;
              if (v64 == &byte_26798E460[v13]) {
                goto LABEL_110;
              }
              *(_WORD *)std::string::size_type v64 = 35;
              std::locale v42 = &byte_26798E460[v13];
              if (v64 + 1 != &byte_26798E460[v13])
              {
                unint64_t v69 = 0;
                unint64_t v70 = v40[7];
                do
                {
                  uint64_t v71 = &v64[v69 + 2];
                  v64[++v69] = (v70 % 0xA) | 0x30;
                  if (v70 < 0xA) {
                    break;
                  }
                  v70 /= 0xAuLL;
                }
                while (v71 != &byte_26798E460[v13]);
                uint64_t v72 = &v64[v69];
                if (v69 >= 2)
                {
                  uint64_t v73 = v64 + 2;
                  unint64_t v74 = &v64[v69];
                  do
                  {
                    char v75 = *(v73 - 1);
                    *(v73 - 1) = *v74;
                    *v74-- = v75;
                    BOOL v50 = v73++ >= v74;
                  }
                  while (!v50);
                }
                std::locale v42 = &byte_26798E460[v13];
                v72[1] = 0;
                if (v71 != &byte_26798E460[v13])
                {
                  std::locale v42 = &v64[v69 + 2];
                  v72[1] = 41;
                }
              }
            }
            char *v42 = 0;
LABEL_112:
            uint64_t v39 = &byte_26798E460[v13];
            if (v42 != &byte_26798E460[v13])
            {
              char *v42 = 10;
              uint64_t v39 = v42 + 1;
            }
            ++v41;
            *uint64_t v39 = 0;
            char v40 = (void *)v40[11];
            if (!v40) {
              break;
            }
            continue;
          }
        }
        uint64_t v14 = &byte_26798E460[v13];
        if (v39 != &byte_26798E460[v13])
        {
          *uint64_t v39 = 10;
          uint64_t v14 = v39 + 1;
        }
        *uint64_t v14 = 0;
LABEL_118:
        std::string::size_type v76 = MainThreadId;
        if (MainThreadId)
        {
          __dmb(0xBu);
          unsigned char *v76 = 0;
        }
        ++v12;
      }
      while (v12 != v81);
    }
  }
  else
  {
    uint64_t v77 = 0;
    char v78 = 69;
    do
    {
      byte_26798E460[v77] = v78;
      char v78 = aErrorCannotGen[++v77];
    }
    while (v77 != 99);
    unk_26798E4C3 = 0;
  }
  unint64_t v79 = v84;
  if (v84)
  {
    __dmb(0xBu);
    unsigned char *v79 = 0;
  }
  *pthread_t v3 = byte_26798E460;
  return v3;
}

void sub_21687E324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned char *a13)
{
  if (a13)
  {
    __dmb(0xBu);
    *a13 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::~Tf_ScopeDescriptionStackReportLock(pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *this)
{
  byte_26798E428 = 0;
}

{
  __dmb(0xBu);
  byte_26798E428 = 0;
}

uint64_t sub_21687E374(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_21687E548();
  sub_21685036C((uint64_t)&v15, v2);
  uint64_t v4 = *(uint64_t **)(v2 + 8);
  uint64_t v5 = *(uint64_t **)(v2 + 16);
  if (v4 != v5)
  {
    while (v4[4] != a1)
    {
      v4 += 5;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
  }
  if (v4 == v5)
  {
LABEL_4:
    *(void *)&long long v16 = "tf/scopeDescription.cpp";
    *((void *)&v16 + 1) = "Remove";
    uint64_t v17 = 143;
    char v18 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_StackRegistry::Remove(_Stack *)";
    char v19 = 0;
    v20[0] = *(_DWORD *)v14;
    *(_DWORD *)((char *)v20 + 3) = *(_DWORD *)&v14[3];
    *(_DWORD *)((char *)&v20[1] + 3) = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v16, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v3, "it != _stacks.end()");
  }
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  *(void *)((char *)&v16 + 7) = *(uint64_t *)((char *)v4 + 23);
  *(void *)&long long v16 = v4[2];
  char v8 = *((unsigned char *)v4 + 31);
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  uint64_t v9 = v4[4];
  *uint64_t v4 = *(v5 - 5);
  long long v10 = *((_OWORD *)v5 - 2);
  v4[3] = *(v5 - 2);
  *(_OWORD *)(v4 + 1) = v10;
  *((unsigned char *)v5 - 9) = 0;
  *((unsigned char *)v5 - 32) = 0;
  void v4[4] = *(v5 - 1);
  *(v5 - 5) = v6;
  if (*((char *)v5 - 9) < 0) {
    operator delete((void *)*(v5 - 4));
  }
  *(v5 - 4) = v7;
  *(v5 - 3) = v16;
  *(uint64_t *)((char *)v5 - 17) = *(void *)((char *)&v16 + 7);
  *((unsigned char *)v5 - 9) = v8;
  *(v5 - 1) = v9;
  uint64_t v11 = *(void *)(v2 + 16);
  if (*(char *)(v11 - 9) < 0) {
    operator delete(*(void **)(v11 - 32));
  }
  *(void *)(v2 + 16) = v11 - 40;
  uint64_t v12 = v15;
  if (v15)
  {
    __dmb(0xBu);
    unsigned char *v12 = 0;
  }
  return a1;
}

void sub_21687E524(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

uint64_t sub_21687E548()
{
  unint64_t v0 = &qword_26798E000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798E458, memory_order_acquire) & 1) == 0)
  {
    int v2 = __cxa_guard_acquire(&qword_26798E458);
    unint64_t v0 = &qword_26798E000;
    if (v2)
    {
      byte_26798E430 = 0;
      qword_26798E440 = 0;
      unk_26798E448 = 0;
      qword_26798E438 = 0;
      qword_26798E450 = (uint64_t)&byte_26798E430;
      __cxa_guard_release(&qword_26798E458);
      unint64_t v0 = &qword_26798E000;
    }
  }
  return v0[138];
}

uint64_t sub_21687E5B4(uint64_t result)
{
  uint64_t v1 = (atomic_uint *)(result & 0xFFFFFFFFFFFFFFFCLL);
  int v2 = 1 << (8 * (result & 3));
  int v3 = ~(255 << (8 * (result & 3)));
LABEL_2:
  int v4 = *v1 & v3;
  while (1)
  {
    int v5 = v4;
    atomic_compare_exchange_strong(v1, (unsigned int *)&v5, v4 | v2);
    if (v5 == v4) {
      return result;
    }
    if (*v1 != v4)
    {
      double result = sched_yield();
      goto LABEL_2;
    }
  }
}

uint64_t sub_21687E624(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[24 * v4];
  unint64_t v15 = v14;
  long long v16 = &v10[24 * v9];
  sub_216779094(v14, *a2);
  unint64_t v15 = v14 + 24;
  sub_216790CCC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216790E64((uint64_t)&v13);
  return v11;
}

void sub_21687E718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21687E72C(void *a1, uint64_t a2)
{
  if (sub_21687E7C8(a1, a2)) {
    return 1;
  }
  int rep = std::chrono::steady_clock::now().__d_.__rep_;
  do
  {
    sched_yield();
    BOOL v4 = sub_21687E7C8(a1, a2);
  }
  while (!v4 && (int)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000 < 10);
  return v4;
}

BOOL sub_21687E7C8(void *a1, uint64_t a2)
{
  BOOL v4 = (atomic_uint *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  int v5 = 255 << (8 * (a2 & 3));
  int v6 = 1 << (8 * (a2 & 3));
LABEL_2:
  int v7 = *v4 & ~v5;
  while (1)
  {
    int v8 = v7;
    atomic_compare_exchange_strong(v4, (unsigned int *)&v8, v7 | v6);
    BOOL result = v8 == v7;
    if (v8 == v7) {
      break;
    }
    if (*v4 != v7)
    {
      if ((*v4 & v5) != 0) {
        return result;
      }
      sched_yield();
      goto LABEL_2;
    }
  }
  *a1 = a2;
  return result;
}

unint64_t sub_21687E858(unint64_t result, unint64_t **a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unint64_t **)result;
LABEL_2:
  uint64_t v12 = a2 - 1;
  uint64_t j = v11;
  while (1)
  {
    uint64_t v11 = j;
    uint64_t v14 = (char *)a2 - (char *)j;
    unint64_t v15 = a2 - j;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v108 = *(a2 - 1);
          int v109 = *j;
          unint64_t v110 = *v108;
          unint64_t v111 = **j;
          if (*v108)
          {
            if (v111) {
              BOOL v112 = v110 == v111;
            }
            else {
              BOOL v112 = 0;
            }
            if (v112) {
              return result;
            }
            uint64_t v113 = *a3;
            if (!*a3 || v110 != v113)
            {
              if (!v111) {
                return result;
              }
              BOOL v114 = v113 && v111 == v113;
              BOOL v115 = v114;
              if (v110 >= v111 || v115) {
                return result;
              }
            }
          }
          else if (!v111 || *a3 && v111 == *a3)
          {
            return result;
          }
          *uint64_t j = v108;
          *(a2 - 1) = v109;
          return result;
        case 3uLL:
          return (unint64_t)sub_21687F904(j, j + 1, a2 - 1, a3);
        case 4uLL:
          return (unint64_t)sub_21687FDF8(j, j + 1, j + 2, a2 - 1, a3);
        case 5uLL:
          return (unint64_t)sub_21687F708(j, j + 1, j + 2, j + 3, a2 - 1, a3);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 191) {
      break;
    }
    if (!a4)
    {
      if (j == a2) {
        return result;
      }
      int64_t v143 = (v15 - 2) >> 1;
      int64_t v144 = v143;
      while (1)
      {
        int64_t v145 = v144;
        if (v143 < v144) {
          goto LABEL_509;
        }
        uint64_t v146 = (2 * v144) | 1;
        char v147 = &j[v146];
        if (2 * v145 + 2 >= (uint64_t)v15) {
          goto LABEL_439;
        }
        BOOL result = (unint64_t)v147[1];
        unint64_t v148 = **v147;
        unint64_t v149 = *(void *)result;
        if (v148)
        {
          if (v149) {
            BOOL v150 = v148 == v149;
          }
          else {
            BOOL v150 = 0;
          }
          if (v150) {
            goto LABEL_439;
          }
          BOOL result = *a3;
          if (!*a3 || v148 != result)
          {
            if (!v149) {
              goto LABEL_439;
            }
            BOOL v151 = result && v149 == result;
            BOOL result = v151;
            if (v148 >= v149 || (result & 1) != 0) {
              goto LABEL_439;
            }
          }
        }
        else if (!v149 || *a3 && v149 == *a3)
        {
          goto LABEL_439;
        }
        ++v147;
        uint64_t v146 = 2 * v145 + 2;
LABEL_439:
        int v152 = j[v145];
        unint64_t v153 = **v147;
        unint64_t v154 = *v152;
        if (v153)
        {
          if (v154) {
            BOOL v155 = v153 == v154;
          }
          else {
            BOOL v155 = 0;
          }
          if (!v155)
          {
            BOOL result = *a3;
            if (*a3)
            {
              if (v153 == result) {
                goto LABEL_509;
              }
            }
            if (v154)
            {
              BOOL v156 = result && v154 == result;
              BOOL result = v156;
              if (v153 < v154 && (result & 1) == 0) {
                goto LABEL_509;
              }
            }
          }
        }
        else if (v154 && (!*a3 || v154 != *a3))
        {
          goto LABEL_509;
        }
        j[v145] = *v147;
        while (1)
        {
          if (v143 < v146) {
            goto LABEL_508;
          }
          __int16 v157 = v147;
          uint64_t v158 = 2 * v146;
          uint64_t v146 = (2 * v146) | 1;
          char v147 = &j[v146];
          uint64_t v159 = v158 + 2;
          if (v159 < (uint64_t)v15)
          {
            unint64_t v160 = **v147;
            unint64_t v161 = *v147[1];
            if (v160)
            {
              if (v161) {
                BOOL v162 = v160 == v161;
              }
              else {
                BOOL v162 = 0;
              }
              if (!v162)
              {
                if ((uint64_t v163 = *a3) != 0 && v160 == v163
                  || v161
                  && (v163 ? (BOOL v164 = v161 == v163) : (BOOL v164 = 0),
                      !v164 ? (char v165 = 0) : (char v165 = 1),
                      v160 < v161 && (v165 & 1) == 0))
                {
LABEL_482:
                  ++v147;
                  uint64_t v146 = v159;
                }
              }
            }
            else if (v161 && (!*a3 || v161 != *a3))
            {
              goto LABEL_482;
            }
          }
          BOOL result = **v147;
          unint64_t v166 = *v152;
          if (result) {
            break;
          }
          if (v166)
          {
            BOOL result = *a3;
            if (!*a3 || v166 != result) {
              goto LABEL_507;
            }
          }
LABEL_506:
          *__int16 v157 = *v147;
        }
        if (v166) {
          BOOL v167 = result == v166;
        }
        else {
          BOOL v167 = 0;
        }
        if (v167) {
          goto LABEL_506;
        }
        uint64_t v168 = *a3;
        if (!*a3 || result != v168)
        {
          if (!v166) {
            goto LABEL_506;
          }
          BOOL v169 = v168 && v166 == v168;
          BOOL v170 = v169;
          if (result >= v166 || v170) {
            goto LABEL_506;
          }
        }
LABEL_507:
        char v147 = v157;
LABEL_508:
        *char v147 = v152;
LABEL_509:
        int64_t v144 = v145 - 1;
        if (!v145)
        {
          uint64_t v172 = (unint64_t)v14 >> 3;
          while (1)
          {
            uint64_t v173 = 0;
            int v174 = *j;
            unint64_t v175 = j;
            do
            {
              int v176 = v175;
              v175 += v173 + 1;
              uint64_t v177 = 2 * v173;
              uint64_t v173 = (2 * v173) | 1;
              uint64_t v178 = v177 + 2;
              if (v178 >= v172) {
                goto LABEL_534;
              }
              BOOL result = (unint64_t)v175[1];
              unint64_t v179 = **v175;
              unint64_t v180 = *(void *)result;
              if (v179)
              {
                if (v180) {
                  BOOL v181 = v179 == v180;
                }
                else {
                  BOOL v181 = 0;
                }
                if (!v181)
                {
                  if ((BOOL result = *a3) != 0 && v179 == result
                    || v180
                    && (result ? (BOOL v182 = v180 == result) : (BOOL v182 = 0),
                        !v182 ? (BOOL result = 0) : (BOOL result = 1),
                        v179 < v180 && (result & 1) == 0))
                  {
LABEL_533:
                    ++v175;
                    uint64_t v173 = v178;
                  }
                }
              }
              else if (v180 && (!*a3 || v180 != *a3))
              {
                goto LABEL_533;
              }
LABEL_534:
              char *v176 = *v175;
            }
            while (v173 <= (uint64_t)((unint64_t)(v172 - 2) >> 1));
            if (v175 == --a2) {
              goto LABEL_559;
            }
            *unint64_t v175 = *a2;
            *a2 = v174;
            uint64_t v183 = (char *)v175 - (char *)j + 8;
            if (v183 < 9) {
              goto LABEL_560;
            }
            unint64_t v184 = ((unint64_t)v183 >> 3) - 2;
            unint64_t v185 = v184 >> 1;
            unint64_t v186 = &j[v184 >> 1];
            int v174 = *v175;
            unint64_t v187 = **v186;
            unint64_t v188 = **v175;
            if (!v187)
            {
              if (!v188 || *a3 && v188 == *a3) {
                goto LABEL_560;
              }
LABEL_557:
              *unint64_t v175 = *v186;
              if (v184 >= 2)
              {
                while (1)
                {
                  unint64_t v194 = v185 - 1;
                  unint64_t v185 = (v185 - 1) >> 1;
                  unint64_t v175 = &j[v185];
                  unint64_t v195 = **v175;
                  unint64_t v196 = *v174;
                  if (v195)
                  {
                    if (v196) {
                      BOOL v197 = v195 == v196;
                    }
                    else {
                      BOOL v197 = 0;
                    }
                    if (v197) {
                      break;
                    }
                    uint64_t v198 = *a3;
                    if (!*a3 || v195 != v198)
                    {
                      if (!v196) {
                        break;
                      }
                      BOOL v200 = v198 && v196 == v198;
                      BOOL v201 = v200;
                      if (v195 >= v196 || v201) {
                        break;
                      }
                    }
                  }
                  else
                  {
                    if (!v196) {
                      break;
                    }
                    if (*a3 && v196 == *a3) {
                      break;
                    }
                  }
                  *unint64_t v186 = *v175;
                  unint64_t v186 = &j[v185];
                  if (v194 < 2) {
                    goto LABEL_559;
                  }
                }
              }
              unint64_t v175 = v186;
LABEL_559:
              *unint64_t v175 = v174;
              goto LABEL_560;
            }
            if (v188) {
              BOOL v189 = v187 == v188;
            }
            else {
              BOOL v189 = 0;
            }
            if (!v189)
            {
              uint64_t v190 = *a3;
              if (*a3)
              {
                if (v187 == v190) {
                  goto LABEL_557;
                }
              }
              if (v188)
              {
                BOOL v191 = v190 && v188 == v190;
                BOOL v192 = v191;
                if (v187 < v188 && !v192) {
                  goto LABEL_557;
                }
              }
            }
LABEL_560:
            if (v172-- <= 2) {
              return result;
            }
          }
        }
      }
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &j[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_21687F904(v11, &v11[v15 >> 1], a2 - 1, a3);
      sub_21687F904(v11 + 1, v17 - 1, a2 - 2, a3);
      sub_21687F904(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      BOOL result = (unint64_t)sub_21687F904(v17 - 1, v17, &v11[v16 + 1], a3);
      char v18 = *v11;
      *uint64_t v11 = *v17;
      *uint64_t v17 = v18;
    }
    else
    {
      BOOL result = (unint64_t)sub_21687F904(&v11[v15 >> 1], v11, a2 - 1, a3);
    }
    --a4;
    char v19 = *v11;
    unint64_t v20 = **v11;
    if (a5)
    {
      unint64_t v21 = *a3;
      goto LABEL_31;
    }
    unint64_t v21 = **(v11 - 1);
    if (v21)
    {
      if (v20) {
        BOOL v22 = v21 == v20;
      }
      else {
        BOOL v22 = 0;
      }
      if (v22) {
        goto LABEL_132;
      }
      uint64_t v23 = *a3;
      if (!*a3 || v21 != v23)
      {
        if (!v20) {
          goto LABEL_135;
        }
        if (v20 != v23 || v23 == 0)
        {
          BOOL v5 = v21 >= v20;
          unint64_t v21 = *a3;
          if (!v5) {
            goto LABEL_31;
          }
        }
        goto LABEL_132;
      }
LABEL_31:
      uint64_t v25 = 0;
      if (v21) {
        BOOL v26 = v20 == v21;
      }
      else {
        BOOL v26 = 0;
      }
      int v27 = v26;
      BOOL v28 = v26 || v20 == 0;
      while (1)
      {
        unint64_t v29 = v11[v25 + 1];
        unint64_t v30 = *v29;
        if (*v29) {
          break;
        }
        if (v28) {
          goto LABEL_53;
        }
LABEL_52:
        ++v25;
      }
      if (!v20 || v30 != v20)
      {
        if (v21 && v30 == v21) {
          goto LABEL_52;
        }
        char v31 = v30 >= v20 ? 1 : v27;
        if (v20 && (v31 & 1) == 0) {
          goto LABEL_52;
        }
      }
LABEL_53:
      int v32 = &v11[v25];
      unint64_t v33 = (unint64_t)&v11[v25 + 1];
      uint64_t i = a2 - 1;
      if (v25 * 8)
      {
        while (1)
        {
          unint64_t v35 = **i;
          if (v35)
          {
            if (!v20 || v35 != v20)
            {
              if (v21 && v35 == v21) {
                goto LABEL_88;
              }
              int v36 = v35 >= v20 ? 1 : v27;
              if (v20 && !v36) {
                goto LABEL_88;
              }
            }
          }
          else if (!v28)
          {
            goto LABEL_88;
          }
          --i;
        }
      }
      uint64_t i = a2;
      if (v33 < (unint64_t)a2)
      {
        for (uint64_t i = a2 - 1; ; --i)
        {
          unint64_t v37 = **i;
          if (v37)
          {
            if (v20 && v37 == v20) {
              goto LABEL_81;
            }
            if (v21 && v37 == v21) {
              break;
            }
            if (!v20)
            {
LABEL_81:
              if (v33 >= (unint64_t)i) {
                break;
              }
            }
            else
            {
              if (v37 >= v20) {
                char v38 = 1;
              }
              else {
                char v38 = v27;
              }
              if (v33 >= (unint64_t)i || (v38 & 1) == 0) {
                break;
              }
            }
          }
          else if (v33 >= (unint64_t)i || !v28)
          {
            break;
          }
        }
      }
LABEL_88:
      if (v33 >= (unint64_t)i) {
        goto LABEL_126;
      }
      char v40 = *i;
      uint64_t v41 = (unint64_t **)v33;
      std::locale v42 = i;
      while (2)
      {
        *v41++ = v40;
        char *v42 = v29;
        unint64_t v43 = *v19;
        uint64_t v44 = *a3;
        if (*a3) {
          BOOL v45 = v43 == v44;
        }
        else {
          BOOL v45 = 0;
        }
        int v46 = v45;
        BOOL v47 = v45 || *v19 == 0;
        while (2)
        {
          unint64_t v29 = *v41;
          unint64_t v48 = **v41;
          if (!v48)
          {
            if (v47) {
              goto LABEL_112;
            }
LABEL_111:
            ++v41;
            continue;
          }
          break;
        }
        if (!v43 || v48 != v43)
        {
          if (v44 && v48 == v44) {
            goto LABEL_111;
          }
          char v49 = v48 >= v43 ? 1 : v46;
          if (v43 && (v49 & 1) == 0) {
            goto LABEL_111;
          }
        }
        while (1)
        {
LABEL_112:
          while (1)
          {
            BOOL v50 = *--v42;
            char v40 = v50;
            unint64_t v51 = *v50;
            if (*v50) {
              break;
            }
            if (!v47) {
              goto LABEL_124;
            }
          }
          if (!v43 || v51 != v43)
          {
            if (v44 && v51 == v44) {
              break;
            }
            int v52 = v51 >= v43 ? 1 : v46;
            if (v43 && !v52) {
              break;
            }
          }
        }
LABEL_124:
        if (v41 < v42) {
          continue;
        }
        break;
      }
      int v32 = v41 - 1;
LABEL_126:
      if (v32 != v11) {
        *uint64_t v11 = *v32;
      }
      *int v32 = v19;
      if (v33 < (unint64_t)i)
      {
LABEL_131:
        BOOL result = sub_21687E858(v11, v32, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t j = v32 + 1;
      }
      else
      {
        BOOL v53 = sub_21687FB48(v11, v32, a3);
        uint64_t j = v32 + 1;
        BOOL result = sub_21687FB48(v32 + 1, a2, a3);
        if (result)
        {
          a2 = v32;
          if (v53) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v53) {
          goto LABEL_131;
        }
      }
    }
    else
    {
      if (!v20)
      {
LABEL_135:
        unint64_t v54 = **v12;
        if (!v54)
        {
          int v55 = 1;
          goto LABEL_186;
        }
        uint64_t v56 = *a3;
        int v55 = 1;
        if (*a3 && v54 == v56) {
          goto LABEL_186;
        }
        goto LABEL_151;
      }
      unint64_t v21 = *a3;
      if (!*a3 || v20 != v21) {
        goto LABEL_31;
      }
LABEL_132:
      unint64_t v54 = **v12;
      if (v54 && v20 == v54)
      {
        int v55 = 0;
        unint64_t v54 = **v11;
LABEL_186:
        uint64_t j = v11 + 1;
        if (v11 + 1 >= a2) {
          goto LABEL_222;
        }
        uint64_t v68 = *a3;
        if (*a3) {
          BOOL v69 = v20 == v68;
        }
        else {
          BOOL v69 = 0;
        }
        char v70 = v69;
        while (1)
        {
          unint64_t v71 = **j;
          if (v55)
          {
            if (v68) {
              BOOL v72 = v71 == v68;
            }
            else {
              BOOL v72 = 0;
            }
            char v73 = !v72;
            if (v71 && (v73 & 1) != 0)
            {
              int v55 = 1;
              goto LABEL_222;
            }
          }
          else
          {
            if (v71) {
              BOOL v74 = v20 == v71;
            }
            else {
              BOOL v74 = 0;
            }
            if (!v74)
            {
              if ((v70 & 1) != 0
                || v71
                && (v68 ? (BOOL v75 = v71 == v68) : (BOOL v75 = 0),
                    !v75 ? (int v76 = 0) : (int v76 = 1),
                    v20 < v71 ? (BOOL v77 = v76 == 0) : (BOOL v77 = 0),
                    v77))
              {
                int v55 = 0;
                goto LABEL_222;
              }
            }
          }
          if (++j >= a2) {
            goto LABEL_222;
          }
        }
      }
      uint64_t v56 = *a3;
      if (*a3 && v20 == v56)
      {
        int v55 = 0;
        uint64_t v56 = **v11;
      }
      else
      {
        int v55 = 0;
        if (!v54) {
          goto LABEL_186;
        }
        BOOL v57 = v56 && v54 == v56;
        BOOL v58 = v57;
        if (v20 >= v54 || v58) {
          goto LABEL_186;
        }
      }
LABEL_151:
      if (v56) {
        BOOL v59 = v20 == v56;
      }
      else {
        BOOL v59 = 0;
      }
      char v60 = v59;
      for (uint64_t j = v11 + 1; ; ++j)
      {
        unint64_t v61 = **j;
        if (!v55) {
          break;
        }
        if (v56) {
          BOOL v62 = v61 == v56;
        }
        else {
          BOOL v62 = 0;
        }
        char v63 = !v62;
        if (v61 && (v63 & 1) != 0) {
          goto LABEL_222;
        }
LABEL_184:
        ;
      }
      if (v61) {
        BOOL v64 = v20 == v61;
      }
      else {
        BOOL v64 = 0;
      }
      if (v64) {
        goto LABEL_184;
      }
      if ((v60 & 1) == 0)
      {
        if (!v61) {
          goto LABEL_184;
        }
        BOOL v65 = v56 && v61 == v56;
        BOOL v66 = v65;
        if (v20 >= v61 || v66) {
          goto LABEL_184;
        }
      }
LABEL_222:
      char v78 = a2;
      if (j >= a2) {
        goto LABEL_253;
      }
      uint64_t v79 = *a3;
      if (*a3) {
        BOOL v80 = v20 == v79;
      }
      else {
        BOOL v80 = 0;
      }
      char v81 = v80;
      char v78 = a2 - 1;
      if (!v55) {
        goto LABEL_239;
      }
LABEL_230:
      if (v79) {
        BOOL v82 = v54 == v79;
      }
      else {
        BOOL v82 = 0;
      }
      char v83 = !v82;
      if (v54 && (v83 & 1) != 0)
      {
        while (1)
        {
          std::string::size_type v86 = *--v78;
          unint64_t v54 = *v86;
          if (v55) {
            goto LABEL_230;
          }
LABEL_239:
          if (!v54 || v20 != v54)
          {
            if (v81) {
              continue;
            }
            if (v54)
            {
              BOOL v84 = v79 && v54 == v79;
              BOOL v85 = v84;
              if (v20 < v54 && !v85) {
                continue;
              }
            }
          }
          break;
        }
      }
LABEL_253:
      if (j >= v78) {
        goto LABEL_314;
      }
      uint64_t v87 = *j;
      int64_t v88 = *v78;
      while (2)
      {
        *j++ = v88;
        *char v78 = v87;
        unint64_t v89 = *v19;
        uint64_t v90 = *a3;
        if (*a3) {
          BOOL v91 = v89 == v90;
        }
        else {
          BOOL v91 = 0;
        }
        char v92 = v91;
        while (2)
        {
          uint64_t v87 = *j;
          unint64_t v93 = **j;
          if (v89)
          {
            if (v93) {
              BOOL v94 = v89 == v93;
            }
            else {
              BOOL v94 = 0;
            }
            if (!v94)
            {
              if (v92) {
                goto LABEL_289;
              }
              if (v93)
              {
                BOOL v95 = v90 && v93 == v90;
                BOOL v96 = v95;
                if (v89 < v93 && !v96) {
                  goto LABEL_289;
                }
              }
            }
            goto LABEL_288;
          }
          if (v90) {
            BOOL v98 = v93 == v90;
          }
          else {
            BOOL v98 = 0;
          }
          char v99 = !v98;
          if (!v93 || (v99 & 1) == 0)
          {
LABEL_288:
            ++j;
            continue;
          }
          break;
        }
        do
        {
LABEL_289:
          while (1)
          {
            std::string v100 = *--v78;
            int64_t v88 = v100;
            unint64_t v101 = *v100;
            if (!v89) {
              break;
            }
            if (v101) {
              BOOL v102 = v89 == v101;
            }
            else {
              BOOL v102 = 0;
            }
            if (!v102)
            {
              if (v92) {
                continue;
              }
              if (v101)
              {
                BOOL v103 = v90 && v101 == v90;
                BOOL v104 = v103;
                if (v89 < v101 && !v104) {
                  continue;
                }
              }
            }
            goto LABEL_313;
          }
          if (v90) {
            BOOL v105 = v101 == v90;
          }
          else {
            BOOL v105 = 0;
          }
          char v106 = !v105;
        }
        while (v101 && (v106 & 1) != 0);
LABEL_313:
        if (j < v78) {
          continue;
        }
        break;
      }
LABEL_314:
      unint64_t v107 = j - 1;
      BOOL v5 = j - 1 >= v11;
      BOOL v6 = j - 1 == v11;
      if (j - 1 != v11) {
        *uint64_t v11 = *v107;
      }
      a5 = 0;
      *unint64_t v107 = v19;
    }
  }
  int v116 = j + 1;
  BOOL v118 = j == a2 || v116 == a2;
  if ((a5 & 1) == 0)
  {
    if (v118) {
      return result;
    }
    while (1)
    {
      unint64_t v204 = v11;
      uint64_t v11 = v116;
      uint64_t v206 = *v204;
      unsigned int v205 = v204[1];
      unint64_t v207 = *v205;
      unint64_t v208 = **v204;
      if (*v205)
      {
        if (v208) {
          BOOL v209 = v207 == v208;
        }
        else {
          BOOL v209 = 0;
        }
        if (!v209)
        {
          uint64_t v210 = *a3;
          if (*a3 && v207 == v210) {
            goto LABEL_616;
          }
          if (v208)
          {
            BOOL v212 = v210 && v208 == v210;
            BOOL v213 = v212;
            if (v207 < v208 && !v213) {
              goto LABEL_616;
            }
          }
        }
      }
      else if (v208)
      {
        if (!*a3 || v208 != *a3)
        {
          do
          {
LABEL_616:
            while (1)
            {
              int v215 = v204;
              unint64_t v216 = *--v204;
              v204[2] = v206;
              uint64_t v206 = v216;
              unint64_t v217 = *v205;
              unint64_t v218 = *v216;
              if (!*v205) {
                break;
              }
              if (v218) {
                BOOL v219 = v217 == v218;
              }
              else {
                BOOL v219 = 0;
              }
              if (!v219)
              {
                uint64_t v220 = *a3;
                if (*a3 && v217 == v220) {
                  continue;
                }
                if (v218)
                {
                  BOOL v222 = v220 && v218 == v220;
                  BOOL v223 = v222;
                  if (v217 < v218 && !v223) {
                    continue;
                  }
                }
              }
              goto LABEL_643;
            }
            if (!v218) {
              break;
            }
          }
          while (!*a3 || v218 != *a3);
LABEL_643:
          *int v215 = v205;
        }
      }
      int v116 = v11 + 1;
      if (v11 + 1 == a2) {
        return result;
      }
    }
  }
  if (v118) {
    return result;
  }
  uint64_t v119 = 0;
  int v120 = j;
  while (2)
  {
    int v121 = v120;
    int v120 = v116;
    int v122 = v121[1];
    unint64_t v123 = *v122;
    unint64_t v124 = **v121;
    if (*v122)
    {
      if (v124) {
        BOOL v125 = v123 == v124;
      }
      else {
        BOOL v125 = 0;
      }
      if (v125) {
        goto LABEL_412;
      }
      uint64_t v126 = *a3;
      if (!*a3 || v123 != v126)
      {
        if (!v124) {
          goto LABEL_412;
        }
        BOOL v128 = v126 && v124 == v126;
        BOOL v129 = v128;
        if (v123 >= v124 || v129) {
          goto LABEL_412;
        }
      }
    }
    else
    {
      if (!v124) {
        goto LABEL_412;
      }
      if (*a3 && v124 == *a3) {
        goto LABEL_412;
      }
    }
    v121[1] = *v121;
    int v131 = j;
    if (v121 == j) {
      goto LABEL_411;
    }
    uint64_t v132 = v119;
    while (2)
    {
      unsigned int v133 = *(unint64_t **)((char *)j + v132 - 8);
      unint64_t v134 = *v122;
      unint64_t v135 = *v133;
      if (*v122)
      {
        if (v135) {
          BOOL v136 = v134 == v135;
        }
        else {
          BOOL v136 = 0;
        }
        if (v136) {
          break;
        }
        uint64_t v137 = *a3;
        if (*a3) {
          BOOL v138 = v134 == v137;
        }
        else {
          BOOL v138 = 0;
        }
        if (!v138)
        {
          if (!v135) {
            break;
          }
          if (v137) {
            BOOL v139 = v135 == v137;
          }
          else {
            BOOL v139 = 0;
          }
          int v140 = v139;
          if (v134 >= v135 || v140 != 0)
          {
            int v131 = (unint64_t **)((char *)j + v132);
            goto LABEL_411;
          }
        }
        goto LABEL_408;
      }
      if (v135)
      {
        if (!*a3 || v135 != *a3)
        {
LABEL_408:
          --v121;
          *(unint64_t **)((char *)j + v132) = v133;
          v132 -= 8;
          if (!v132)
          {
            int v131 = j;
            goto LABEL_411;
          }
          continue;
        }
      }
      break;
    }
    int v131 = v121;
LABEL_411:
    *int v131 = v122;
LABEL_412:
    int v116 = v120 + 1;
    v119 += 8;
    if (v120 + 1 != a2) {
      continue;
    }
    return result;
  }
}

unint64_t **sub_21687F708(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4, unint64_t **a5, uint64_t *a6)
{
  BOOL result = sub_21687FDF8(a1, a2, a3, a4, a6);
  uint64_t v13 = *a4;
  unint64_t v14 = **a5;
  unint64_t v15 = **a4;
  if (!v14)
  {
    if (!v15 || *a6 && v15 == *a6) {
      return result;
    }
LABEL_21:
    *a4 = *a5;
    *a5 = v13;
    unint64_t v20 = *a3;
    unint64_t v21 = **a4;
    unint64_t v22 = **a3;
    if (v21)
    {
      if (v22) {
        BOOL v23 = v21 == v22;
      }
      else {
        BOOL v23 = 0;
      }
      if (v23) {
        return result;
      }
      uint64_t v24 = *a6;
      if (!*a6 || v21 != v24)
      {
        if (!v22) {
          return result;
        }
        BOOL v25 = v24 && v22 == v24;
        BOOL v26 = v25;
        if (v21 >= v22 || v26) {
          return result;
        }
      }
    }
    else if (!v22 || *a6 && v22 == *a6)
    {
      return result;
    }
    *a3 = *a4;
    *a4 = v20;
    int v27 = *a2;
    unint64_t v28 = **a3;
    unint64_t v29 = **a2;
    if (v28)
    {
      if (v29 && v28 == v29) {
        return result;
      }
      uint64_t v30 = *a6;
      if (!*a6 || v28 != v30)
      {
        if (!v29) {
          return result;
        }
        BOOL v31 = v30 && v29 == v30;
        BOOL v32 = v31;
        if (v28 >= v29 || v32) {
          return result;
        }
      }
    }
    else if (!v29 || *a6 && v29 == *a6)
    {
      return result;
    }
    *a2 = *a3;
    *a3 = v27;
    unint64_t v33 = *a1;
    unint64_t v34 = **a2;
    unint64_t v35 = **a1;
    if (v34)
    {
      if (v35 && v34 == v35) {
        return result;
      }
      uint64_t v36 = *a6;
      if (!*a6 || v34 != v36)
      {
        if (!v35) {
          return result;
        }
        BOOL v37 = v36 && v35 == v36;
        BOOL v38 = v37;
        if (v34 >= v35 || v38) {
          return result;
        }
      }
    }
    else if (!v35 || *a6 && v35 == *a6)
    {
      return result;
    }
    *a1 = *a2;
    *a2 = v33;
    return result;
  }
  if (v15) {
    BOOL v16 = v14 == v15;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16)
  {
    uint64_t v17 = *a6;
    if (*a6)
    {
      if (v14 == v17) {
        goto LABEL_21;
      }
    }
    if (v15)
    {
      BOOL v18 = v17 && v15 == v17;
      BOOL v19 = v18;
      if (v14 < v15 && !v19) {
        goto LABEL_21;
      }
    }
  }
  return result;
}

unint64_t **sub_21687F904(unint64_t **result, unint64_t **a2, unint64_t **a3, uint64_t *a4)
{
  BOOL v4 = *a2;
  BOOL v5 = *result;
  unint64_t v6 = **a2;
  unint64_t v7 = **result;
  if (!v6)
  {
    if (!v7)
    {
      uint64_t v12 = *a3;
      unint64_t v13 = **a3;
      if (!v13) {
        return result;
      }
      uint64_t v17 = *a4;
      if (*a4 && v13 == v17) {
        goto LABEL_45;
      }
      if (!v17) {
        return result;
      }
      goto LABEL_44;
    }
    uint64_t v15 = *a4;
    uint64_t v12 = *a3;
    unint64_t v13 = **a3;
    if (*a4) {
      BOOL v16 = v7 == v15;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16)
    {
      if (!v13) {
        return result;
      }
      if (v13 == v7) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
    if (!v13) {
      goto LABEL_77;
    }
    if (v15 && v13 == v15) {
      goto LABEL_94;
    }
    if (!v15) {
      goto LABEL_77;
    }
LABEL_73:
    if (v13 < v6)
    {
LABEL_94:
      *BOOL result = v12;
LABEL_99:
      *a3 = v5;
      return result;
    }
    goto LABEL_77;
  }
  if (v7) {
    BOOL v8 = v6 == v7;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8) {
    goto LABEL_16;
  }
  uint64_t v9 = *a4;
  if (*a4) {
    BOOL v10 = v6 == v9;
  }
  else {
    BOOL v10 = 0;
  }
  char v11 = v10;
  if (!v10)
  {
    if (v7)
    {
      if (v9 && v7 == v9) {
        goto LABEL_16;
      }
    }
    else if (!v9)
    {
LABEL_16:
      uint64_t v12 = *a3;
      unint64_t v13 = **a3;
      if (v13)
      {
LABEL_17:
        if (v13 == v6) {
          return result;
        }
        uint64_t v14 = *a4;
        if (*a4 && v13 == v14) {
          goto LABEL_45;
        }
        if (v14 && v6 == v14) {
          return result;
        }
LABEL_44:
        if (v13 >= v6) {
          return result;
        }
        goto LABEL_45;
      }
      uint64_t v9 = *a4;
LABEL_34:
      if (v9 && v6 == v9) {
        return result;
      }
LABEL_45:
      *a2 = v12;
      *a3 = v4;
      BOOL v18 = *result;
      unint64_t v19 = **a2;
      unint64_t v20 = **result;
      if (v19)
      {
        if (v20) {
          BOOL v21 = v19 == v20;
        }
        else {
          BOOL v21 = 0;
        }
        if (v21) {
          return result;
        }
        uint64_t v22 = *a4;
        if (!*a4 || v19 != v22)
        {
          if (!v20) {
            return result;
          }
          BOOL v23 = v22 && v20 == v22;
          BOOL v24 = v23;
          if (v19 >= v20 || v24) {
            return result;
          }
        }
      }
      else if (!v20 || *a4 && v20 == *a4)
      {
        return result;
      }
      *BOOL result = *a2;
      *a2 = v18;
      return result;
    }
    if (v6 >= v7)
    {
      uint64_t v12 = *a3;
      unint64_t v13 = **a3;
      if (v13) {
        goto LABEL_17;
      }
      goto LABEL_34;
    }
  }
  uint64_t v12 = *a3;
  unint64_t v13 = **a3;
  if (!v13)
  {
    if (!v9 || v6 != v9) {
      goto LABEL_94;
    }
    goto LABEL_77;
  }
  if (v13 != v6)
  {
    if (v9 && v13 == v9) {
      goto LABEL_94;
    }
    if ((v11 & 1) == 0) {
      goto LABEL_73;
    }
  }
LABEL_77:
  *BOOL result = v4;
  *a2 = v5;
  unint64_t v25 = **a3;
  unint64_t v26 = *v5;
  if (!v25)
  {
    if (!v26 || *a4 && v26 == *a4) {
      return result;
    }
    goto LABEL_98;
  }
  if (v26) {
    BOOL v27 = v25 == v26;
  }
  else {
    BOOL v27 = 0;
  }
  if (!v27)
  {
    if ((uint64_t v28 = *a4) != 0 && v25 == v28
      || v26 && (v28 ? (BOOL v29 = v26 == v28) : (BOOL v29 = 0), !v29 ? (v30 = 0) : (v30 = 1), v25 < v26 && (v30 & 1) == 0))
    {
LABEL_98:
      *a2 = *a3;
      goto LABEL_99;
    }
  }
  return result;
}

BOOL sub_21687FB48(unint64_t **a1, unint64_t **a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      unint64_t v10 = *v8;
      unint64_t v11 = **a1;
      if (!*v8)
      {
        if (!v11 || *a3 && v11 == *a3) {
          return result;
        }
LABEL_86:
        *a1 = v8;
        *(a2 - 1) = v9;
        return result;
      }
      if (v11) {
        BOOL v12 = v10 == v11;
      }
      else {
        BOOL v12 = 0;
      }
      if (!v12)
      {
        uint64_t v13 = *a3;
        if (*a3)
        {
          if (v10 == v13) {
            goto LABEL_86;
          }
        }
        if (v11)
        {
          BOOL v14 = v13 && v11 == v13;
          BOOL v15 = v14;
          if (v10 < v11 && !v15) {
            goto LABEL_86;
          }
        }
      }
      return result;
    case 3:
      sub_21687F904(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_21687FDF8(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_21687F708(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      BOOL v16 = a1 + 2;
      sub_21687F904(a1, a1 + 1, a1 + 2, a3);
      uint64_t v17 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
LABEL_21:
  unint64_t v20 = *v17;
  unint64_t v21 = **v17;
  unint64_t v22 = **v16;
  if (v21)
  {
    if (v22) {
      BOOL v23 = v21 == v22;
    }
    else {
      BOOL v23 = 0;
    }
    if (v23) {
      goto LABEL_75;
    }
    uint64_t v24 = *a3;
    if (!*a3 || v21 != v24)
    {
      if (!v22) {
        goto LABEL_75;
      }
      BOOL v26 = v24 && v22 == v24;
      BOOL v27 = v26;
      if (v21 >= v22 || v27) {
        goto LABEL_75;
      }
    }
  }
  else
  {
    if (!v22) {
      goto LABEL_75;
    }
    if (*a3 && v22 == *a3) {
      goto LABEL_75;
    }
  }
  *uint64_t v17 = *v16;
  BOOL v29 = a1;
  if (v16 == a1) {
    goto LABEL_74;
  }
  uint64_t v30 = v18;
  while (1)
  {
    BOOL v31 = *(unint64_t **)((char *)a1 + v30 + 8);
    unint64_t v32 = *v20;
    unint64_t v33 = *v31;
    if (*v20)
    {
      if (v33) {
        BOOL v34 = v32 == v33;
      }
      else {
        BOOL v34 = 0;
      }
      if (v34
        || ((uint64_t v35 = *a3) != 0 ? (v36 = v32 == v35) : (v36 = 0),
            !v36
         && (!v33 || (v35 ? (BOOL v37 = v33 == v35) : (BOOL v37 = 0), !v37 ? (v38 = 0) : (v38 = 1), v32 >= v33 || (v38 & 1) != 0))))
      {
LABEL_73:
        BOOL v29 = v16;
        goto LABEL_74;
      }
    }
    else
    {
      if (!v33) {
        goto LABEL_73;
      }
      if (*a3) {
        BOOL v39 = v33 == *a3;
      }
      else {
        BOOL v39 = 0;
      }
      if (v39)
      {
        BOOL v29 = (unint64_t **)((char *)a1 + v30 + 16);
LABEL_74:
        *BOOL v29 = v20;
        if (++v19 == 8) {
          return v17 + 1 == a2;
        }
LABEL_75:
        BOOL v16 = v17;
        v18 += 8;
        if (++v17 == a2) {
          return 1;
        }
        goto LABEL_21;
      }
    }
    --v16;
    *(unint64_t **)((char *)a1 + v30 + 16) = v31;
    v30 -= 8;
    if (v30 == -16)
    {
      BOOL v29 = a1;
      goto LABEL_74;
    }
  }
}

unint64_t **sub_21687FDF8(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4, uint64_t *a5)
{
  BOOL result = sub_21687F904(a1, a2, a3, a5);
  unint64_t v11 = *a3;
  unint64_t v12 = **a4;
  unint64_t v13 = **a3;
  if (!v12)
  {
    if (!v13 || *a5 && v13 == *a5) {
      return result;
    }
LABEL_21:
    *a3 = *a4;
    *a4 = v11;
    uint64_t v18 = *a2;
    unint64_t v19 = **a3;
    unint64_t v20 = **a2;
    if (v19)
    {
      if (v20) {
        BOOL v21 = v19 == v20;
      }
      else {
        BOOL v21 = 0;
      }
      if (v21) {
        return result;
      }
      uint64_t v22 = *a5;
      if (!*a5 || v19 != v22)
      {
        if (!v20) {
          return result;
        }
        BOOL v23 = v22 && v20 == v22;
        BOOL v24 = v23;
        if (v19 >= v20 || v24) {
          return result;
        }
      }
    }
    else if (!v20 || *a5 && v20 == *a5)
    {
      return result;
    }
    *a2 = *a3;
    *a3 = v18;
    unint64_t v25 = *a1;
    unint64_t v26 = **a2;
    unint64_t v27 = **a1;
    if (v26)
    {
      if (v27 && v26 == v27) {
        return result;
      }
      uint64_t v28 = *a5;
      if (!*a5 || v26 != v28)
      {
        if (!v27) {
          return result;
        }
        BOOL v29 = v28 && v27 == v28;
        BOOL v30 = v29;
        if (v26 >= v27 || v30) {
          return result;
        }
      }
    }
    else if (!v27 || *a5 && v27 == *a5)
    {
      return result;
    }
    *a1 = *a2;
    *a2 = v25;
    return result;
  }
  if (v13) {
    BOOL v14 = v12 == v13;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14)
  {
    uint64_t v15 = *a5;
    if (*a5)
    {
      if (v12 == v15) {
        goto LABEL_21;
      }
    }
    if (v13)
    {
      BOOL v16 = v15 && v13 == v15;
      BOOL v17 = v16;
      if (v12 < v13 && !v17) {
        goto LABEL_21;
      }
    }
  }
  return result;
}

void sub_21687FF84(void **a1)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSetenv(char *a1, char *a2)
{
  uint64_t v3 = a1;
  if (a1[23] >= 0) {
    BOOL v4 = a1;
  }
  else {
    BOOL v4 = *(char **)a1;
  }
  sub_216779094(v10, v4);
  if (a2[23] >= 0) {
    BOOL v5 = a2;
  }
  else {
    BOOL v5 = *(char **)a2;
  }
  sub_216779094(__p, v5);
  BOOL v6 = pxrInternal__aapl__pxrReserved__::ArchSetEnv((const char *)v10, (const char *)__p, 1);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0)
  {
    operator delete(v10[0]);
    if (v6) {
      return v6;
    }
  }
  else if (v6)
  {
    return v6;
  }
  v10[0] = "tf/setenv.cpp";
  v10[1] = "TfSetenv";
  uint64_t v11 = 50;
  unint64_t v12 = "BOOL pxrInternal__aapl__pxrReserved__::TfSetenv(const std::string &, const std::string &)";
  char v13 = 0;
  if (v3[23] < 0) {
    uint64_t v3 = *(char **)v3;
  }
  pxrInternal__aapl__pxrReserved__::ArchStrerror(__p);
  if (v15 >= 0) {
    BOOL v8 = __p;
  }
  else {
    BOOL v8 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v10, (pxrInternal__aapl__pxrReserved__ *)"Error setting '%s': %s", v7, v3, v8);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_2168800AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfUnsetenv(char *a1)
{
  uint64_t v1 = a1;
  if (a1[23] >= 0) {
    int v2 = a1;
  }
  else {
    int v2 = *(char **)a1;
  }
  sub_216779094(__p, v2);
  BOOL v3 = pxrInternal__aapl__pxrReserved__::ArchRemoveEnv((const char *)__p);
  BOOL v4 = v3;
  if (SHIBYTE(v11) < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      return v4;
    }
  }
  else if (v3)
  {
    return v4;
  }
  __p[0] = "tf/setenv.cpp";
  __p[1] = "TfUnsetenv";
  uint64_t v11 = 67;
  unint64_t v12 = "BOOL pxrInternal__aapl__pxrReserved__::TfUnsetenv(const std::string &)";
  char v13 = 0;
  if (v1[23] < 0) {
    uint64_t v1 = *(char **)v1;
  }
  pxrInternal__aapl__pxrReserved__::ArchStrerror(v8);
  if (v9 >= 0) {
    BOOL v6 = v8;
  }
  else {
    BOOL v6 = (void **)v8[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Error unsetting '%s': %s", v5, v1, v6);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return v4;
}

void sub_2168801E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

atomic_uchar *pxrInternal__aapl__pxrReserved__::TfSpinMutex::_AcquireContended(atomic_uchar *this)
{
  if (atomic_exchange_explicit(this, 1u, memory_order_acquire))
  {
    uint64_t v1 = this;
    int v2 = 32;
    while (1)
    {
      __yield();
      if ((atomic_exchange_explicit(this, 1u, memory_order_acquire) & 1) == 0) {
        break;
      }
      if (!--v2)
      {
        do
          this = (atomic_uchar *)sched_yield();
        while ((atomic_exchange_explicit(v1, 1u, memory_order_acquire) & 1) != 0);
        return this;
      }
    }
  }
  return this;
}

unsigned int *pxrInternal__aapl__pxrReserved__::TfSpinRWMutex::_WaitForWriter(unsigned int *this)
{
  char v1 = atomic_load(this);
  if (v1)
  {
    int v2 = this;
    int v3 = 32;
    while (1)
    {
      __yield();
      char v4 = atomic_load(this);
      if ((v4 & 1) == 0) {
        break;
      }
      if (!--v3)
      {
        do
        {
          this = (unsigned int *)sched_yield();
          char v5 = atomic_load(v2);
        }
        while ((v5 & 1) != 0);
        return this;
      }
    }
  }
  return this;
}

unsigned int *pxrInternal__aapl__pxrReserved__::TfSpinRWMutex::_WaitForReaders(unsigned int *this)
{
  unsigned int v1 = atomic_load(this);
  if (v1 != 1)
  {
    int v2 = this;
    int v3 = 32;
    while (1)
    {
      __yield();
      unsigned int v4 = atomic_load(this);
      if (v4 == 1) {
        break;
      }
      if (!--v3)
      {
        do
        {
          this = (unsigned int *)sched_yield();
          unsigned int v5 = atomic_load(v2);
        }
        while (v5 != 1);
        return this;
      }
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfPrintStackTrace(FILE *a1, uint64_t a2)
{
  sub_21677B834((uint64_t)v9);
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(v9, a2);
  if (a1) {
    unsigned int v4 = a1;
  }
  else {
    unsigned int v4 = (FILE *)*MEMORY[0x263EF8348];
  }
  std::stringbuf::str();
  if (v8 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  fputs(p_p, v4);
  if (v8 < 0) {
    operator delete(__p);
  }
  fflush(v4);
  v9[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v9[1] = MEMORY[0x263F8C318] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v11);
}

void sub_21688049C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetStackTrace(pxrInternal__aapl__pxrReserved__ *this)
{
  sub_21677B834((uint64_t)v4);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v3 = 0;
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(v4, (uint64_t)__p);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v4[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v4[1] = MEMORY[0x263F8C318] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v6);
}

void sub_216880600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void pxrInternal__aapl__pxrReserved__::TfLogStackTrace(char *a1, int a2)
{
  memset(&v17, 0, sizeof(v17));
  memset(&__str, 0, sizeof(__str));
  ProgramNameForErrors = pxrInternal__aapl__pxrReserved__::ArchGetProgramNameForErrors((pxrInternal__aapl__pxrReserved__ *)a1);
  pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"st_%s", v5, v6, ProgramNameForErrors);
  int TmpFile = pxrInternal__aapl__pxrReserved__::ArchMakeTmpFile((const char *)&__p, (char *)&__str);
  if (v19 < 0) {
    operator delete(__p);
  }
  std::string::operator=(&v17, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (TmpFile == -1)
  {
    BOOL v16 = (FILE **)MEMORY[0x263EF8348];
    fwrite("Error writing to stack trace file. Printing stack to stderr\n", 0x3CuLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
    pxrInternal__aapl__pxrReserved__::TfPrintStackTrace(*v16, (uint64_t)a1);
  }
  else
  {
    char v8 = fdopen(TmpFile, "w");
    char v9 = (FILE *)*MEMORY[0x263EF8348];
    char v10 = pxrInternal__aapl__pxrReserved__::ArchGetProgramNameForErrors((pxrInternal__aapl__pxrReserved__ *)v8);
    uint64_t v11 = &v17;
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v11 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if (a1[23] >= 0) {
      unint64_t v12 = a1;
    }
    else {
      unint64_t v12 = *(const char **)a1;
    }
    fprintf(v9, "Writing stack for %s to %s because of %s.\n", v10, (const char *)v11, v12);
    pxrInternal__aapl__pxrReserved__::TfPrintStackTrace(v8, (uint64_t)a1);
    char v13 = (pxrInternal__aapl__pxrReserved__ *)fclose(v8);
    if (a2 && pxrInternal__aapl__pxrReserved__::ArchGetFatalStackLogging(v13))
    {
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v15 = (int *)&v17;
      }
      else {
        char v15 = (int *)v17.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::ArchLogSessionInfo(v15, v14);
    }
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_2168807A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfLogCrash(char *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  ProgramNameForErrors = pxrInternal__aapl__pxrReserved__::ArchGetProgramNameForErrors((pxrInternal__aapl__pxrReserved__ *)a1);
  if (a1[23] >= 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(char **)a1;
  }
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v12 = a2;
  }
  else {
    unint64_t v12 = (uint64_t *)*a2;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s crashed. %s: %s\nin %s at line %zu of %s", v9, v10, ProgramNameForErrors, v11, v12, a4[1], a4[2], *a4);
  uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a3 + 8);
  }
  if (v13)
  {
    std::operator+<char>();
    BOOL v14 = (v19 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
    char v15 = (v19 & 0x80u) == 0 ? (void *)v19 : __p[1];
    std::string::append(&v20, v14, (std::string::size_type)v15);
    if ((char)v19 < 0) {
      operator delete(__p[0]);
    }
  }
  pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::Tf_ScopeDescriptionStackReportLock((pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *)__p);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v17 = &v20;
  }
  else {
    std::string v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::ArchLogFatalProcessState(0, (const char *)v17, (const char *)__p[0], v16);
  pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::~Tf_ScopeDescriptionStackReportLock((pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *)__p);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_216880920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 - 33) < 0) {
    operator delete(*(void **)(v20 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetAppLaunchTime(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t AppLaunchTime = pxrInternal__aapl__pxrReserved__::ArchGetAppLaunchTime(this);
  if (!AppLaunchTime)
  {
    v3[0] = "tf/stackTrace.cpp";
    v3[1] = "TfGetAppLaunchTime";
    v3[2] = 154;
    v3[3] = "time_t pxrInternal__aapl__pxrReserved__::TfGetAppLaunchTime()";
    char v4 = 0;
    int v5 = 3;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"Could not determine application launch time.");
  }
  return AppLaunchTime;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_GetEmptyHashMapBucketCount(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E488, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E488))
  {
    *(_OWORD *)((char *)&word_267B8E45F + 1) = 0u;
    *(_OWORD *)algn_267B8E470 = 0u;
    dword_267B8E480 = 1065353216;
    sub_21678A04C((uint64_t)&word_267B8E45F + 1, 0);
    __cxa_atexit((void (*)(void *))sub_216880A98, (char *)&word_267B8E45F + 1, &dword_216758000);
    __cxa_guard_release(&qword_267B8E488);
  }
  return qword_267B8E468;
}

void sub_216880A74(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_GetEmptyHashSetBucketCount(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E4B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E4B8))
  {
    unk_267B8E490 = 0u;
    unk_267B8E4A0 = 0u;
    dword_267B8E4B0 = 1065353216;
    sub_21678A04C((uint64_t)&unk_267B8E490, 0);
    __cxa_atexit((void (*)(void *))sub_216880B58, &unk_267B8E490, &dword_216758000);
    __cxa_guard_release(&qword_267B8E4B8);
  }
  return qword_267B8E498;
}

void sub_216880B34(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::operator<<(uint64_t a1, pxrInternal__aapl__pxrReserved__ **a2)
{
  pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds(*a2);
  int v2 = (void *)std::ostream::operator<<();

  return sub_216779180(v2, (uint64_t)" seconds", 8);
}

void pxrInternal__aapl__pxrReserved__::TfVStringPrintf(char *a1, const char *a2, char *a3)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  pxrInternal__aapl__pxrReserved__::ArchVStringPrintf((pxrInternal__aapl__pxrReserved__ *)a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::TfStringPrintf(pxrInternal__aapl__pxrReserved__ *this, const char *a2, char *a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::ArchVStringPrintf(this, va, a3);
}

double pxrInternal__aapl__pxrReserved__::TfStringToDouble(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  int v3 = 0;
  int v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = "inf";
  char v8 = "nan";
  __int16 v9 = 0;
  return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringToDouble((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter *)&v4, (char *)this, (int)a2, &v3);
}

{
  int v3;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  __int16 v11;

  int v3 = strlen((const char *)this);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  char v8 = 0;
  __int16 v9 = "inf";
  char v10 = "nan";
  uint64_t v11 = 0;
  return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringToDouble((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter *)&v6, (char *)this, v3, &v5);
}

double pxrInternal__aapl__pxrReserved__::TfStringToDouble(char *a1, const char *a2)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  return pxrInternal__aapl__pxrReserved__::TfStringToDouble((pxrInternal__aapl__pxrReserved__ *)a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringToLong(pxrInternal__aapl__pxrReserved__ *this, char *a2, BOOL *a3)
{
  int v4 = *(unsigned __int8 *)this;
  if (v4 == 45)
  {
    int v5 = *((unsigned __int8 *)this + 1);
    if ((v5 - 48) <= 9)
    {
      uint64_t result = 0;
      unint64_t v7 = (unsigned __int8 *)this + 2;
      while (1)
      {
        uint64_t v8 = (v5 - 48);
        int64_t v9 = v8 <= 8 ? 0xF333333333333334 : 0xF333333333333335;
        if (result < v9) {
          break;
        }
        uint64_t result = 10 * result - v8;
        int v10 = *v7++;
        int v5 = v10;
        if ((v10 - 48) >= 0xA) {
          return result;
        }
      }
      uint64_t result = 0x8000000000000000;
      if (!a2) {
        return result;
      }
LABEL_22:
      *a2 = 1;
      return result;
    }
    return 0;
  }
  if ((v4 - 48) > 9) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v11 = (unsigned __int8 *)this + 1;
  while (1)
  {
    uint64_t v12 = (v4 - 48);
    uint64_t v13 = v12 > 7 ? 0xCCCCCCCCCCCCCCBLL : 0xCCCCCCCCCCCCCCCLL;
    if (result > v13) {
      break;
    }
    uint64_t result = v12 + 10 * result;
    int v14 = *v11++;
    int v4 = v14;
    if ((v14 - 48) >= 0xA) {
      return result;
    }
  }
  uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
  if (a2) {
    goto LABEL_22;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringToLong(char *a1, char *a2, BOOL *a3)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  return pxrInternal__aapl__pxrReserved__::TfStringToLong((pxrInternal__aapl__pxrReserved__ *)a1, a2, a3);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStringToULong(pxrInternal__aapl__pxrReserved__ *this, char *a2, BOOL *a3)
{
  int v3 = *(unsigned __int8 *)this;
  if ((v3 - 48) > 9) {
    return 0;
  }
  unint64_t result = 0;
  uint64_t v6 = (unsigned __int8 *)this + 1;
  while (1)
  {
    uint64_t v7 = (v3 - 48);
    unint64_t v8 = v7 > 5 ? 0x1999999999999998 : 0x1999999999999999;
    if (result > v8) {
      break;
    }
    unint64_t result = v7 + 10 * result;
    int v9 = *v6++;
    int v3 = v9;
    if ((v9 - 48) >= 0xA) {
      return result;
    }
  }
  if (a2) {
    *a2 = 1;
  }
  return -1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStringToULong(char *a1, char *a2, BOOL *a3)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  return pxrInternal__aapl__pxrReserved__::TfStringToULong((pxrInternal__aapl__pxrReserved__ *)a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringToInt64(pxrInternal__aapl__pxrReserved__ *this, char *a2, BOOL *a3)
{
  int v4 = *(unsigned __int8 *)this;
  if (v4 == 45)
  {
    int v5 = *((unsigned __int8 *)this + 1);
    if ((v5 - 48) <= 9)
    {
      uint64_t result = 0;
      uint64_t v7 = (unsigned __int8 *)this + 2;
      while (1)
      {
        uint64_t v8 = (v5 - 48);
        int64_t v9 = v8 <= 8 ? 0xF333333333333334 : 0xF333333333333335;
        if (result < v9) {
          break;
        }
        uint64_t result = 10 * result - v8;
        int v10 = *v7++;
        int v5 = v10;
        if ((v10 - 48) >= 0xA) {
          return result;
        }
      }
      uint64_t result = 0x8000000000000000;
      if (!a2) {
        return result;
      }
LABEL_22:
      *a2 = 1;
      return result;
    }
    return 0;
  }
  if ((v4 - 48) > 9) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v11 = (unsigned __int8 *)this + 1;
  while (1)
  {
    uint64_t v12 = (v4 - 48);
    uint64_t v13 = v12 > 7 ? 0xCCCCCCCCCCCCCCBLL : 0xCCCCCCCCCCCCCCCLL;
    if (result > v13) {
      break;
    }
    uint64_t result = v12 + 10 * result;
    int v14 = *v11++;
    int v4 = v14;
    if ((v14 - 48) >= 0xA) {
      return result;
    }
  }
  uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
  if (a2) {
    goto LABEL_22;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringToInt64(char *a1, char *a2, BOOL *a3)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  return pxrInternal__aapl__pxrReserved__::TfStringToInt64((pxrInternal__aapl__pxrReserved__ *)a1, a2, a3);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStringToUInt64(pxrInternal__aapl__pxrReserved__ *this, char *a2, BOOL *a3)
{
  int v3 = *(unsigned __int8 *)this;
  if ((v3 - 48) > 9) {
    return 0;
  }
  unint64_t result = 0;
  uint64_t v6 = (unsigned __int8 *)this + 1;
  while (1)
  {
    uint64_t v7 = (v3 - 48);
    unint64_t v8 = v7 > 5 ? 0x1999999999999998 : 0x1999999999999999;
    if (result > v8) {
      break;
    }
    unint64_t result = v7 + 10 * result;
    int v9 = *v6++;
    int v3 = v9;
    if ((v9 - 48) >= 0xA) {
      return result;
    }
  }
  if (a2) {
    *a2 = 1;
  }
  return -1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStringToUInt64(char *a1, char *a2, BOOL *a3)
{
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  return pxrInternal__aapl__pxrReserved__::TfStringToUInt64((pxrInternal__aapl__pxrReserved__ *)a1, a2, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::TfStringContains(char **a1, char *__s)
{
  int v4 = (char *)*((unsigned __int8 *)a1 + 23);
  if ((char)v4 >= 0) {
    int v5 = (char *)a1;
  }
  else {
    int v5 = *a1;
  }
  int64_t v6 = strlen(__s);
  if (!v6) {
    return 1;
  }
  int64_t v7 = v6;
  if ((char)v4 >= 0) {
    unint64_t v8 = v4;
  }
  else {
    unint64_t v8 = a1[1];
  }
  int v9 = &v8[(void)v5];
  if ((uint64_t)v8 >= v6)
  {
    int v13 = *__s;
    int v14 = v5;
    do
    {
      char v15 = &v8[-v7];
      if (v15 == (char *)-1) {
        break;
      }
      BOOL v16 = (char *)memchr(v14, v13, (size_t)(v15 + 1));
      if (!v16) {
        break;
      }
      int v10 = v16;
      if (!memcmp(v16, __s, v7)) {
        return v10 != v9 && v10 - v5 != -1;
      }
      int v14 = v10 + 1;
      unint64_t v8 = (char *)(v9 - (v10 + 1));
    }
    while ((uint64_t)v8 >= v7);
  }
  int v10 = v9;
  return v10 != v9 && v10 - v5 != -1;
}

BOOL pxrInternal__aapl__pxrReserved__::TfStringContains(char **a1, void *a2)
{
  unint64_t v2 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (v2)
  {
    int v3 = (char *)(v2 + 16);
    if (*(char *)(v2 + 39) < 0) {
      int v3 = *(char **)v3;
    }
  }
  else
  {
    int v3 = "";
  }
  return pxrInternal__aapl__pxrReserved__::TfStringContains(a1, v3);
}

void pxrInternal__aapl__pxrReserved__::TfStringToLower(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*((char *)a1 + 23) >= 0) {
    std::string::size_type v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    std::string::size_type v4 = a1[1];
  }
  std::string::reserve(a2, v4);
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if (*((char *)a1 + 23) >= 0) {
        int64_t v6 = a1;
      }
      else {
        int64_t v6 = (uint64_t *)*a1;
      }
      std::string::value_type v7 = __tolower(*((char *)v6 + i));
      std::string::push_back(a2, v7);
    }
  }
}

void sub_216881144(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfStringToUpper(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*((char *)a1 + 23) >= 0) {
    std::string::size_type v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    std::string::size_type v4 = a1[1];
  }
  std::string::reserve(a2, v4);
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if (*((char *)a1 + 23) >= 0) {
        int64_t v6 = a1;
      }
      else {
        int64_t v6 = (uint64_t *)*a1;
      }
      std::string::value_type v7 = __toupper(*((char *)v6 + i));
      std::string::push_back(a2, v7);
    }
  }
}

void sub_2168811F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::TfStringCapitalize@<X0>(void *result@<X0>, char *a2@<X8>)
{
  int v3 = *((char *)result + 23);
  if ((v3 & 0x80000000) == 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    *((void *)a2 + 2) = *((void *)result + 2);
    if (!v3) {
      return result;
    }
    goto LABEL_6;
  }
  std::string::size_type v4 = *(void **)result;
  unint64_t v5 = *((void *)result + 1);
  if (v5)
  {
    sub_216778F24(a2, v4, v5);
LABEL_6:
    if (a2[23] >= 0) {
      int64_t v6 = a2;
    }
    else {
      int64_t v6 = *(char **)a2;
    }
    unint64_t result = (void *)__toupper(*v6);
    if (a2[23] >= 0) {
      std::string::value_type v7 = a2;
    }
    else {
      std::string::value_type v7 = *(unsigned char **)a2;
    }
    *std::string::value_type v7 = (_BYTE)result;
    return result;
  }

  return sub_216778F24(a2, v4, 0);
}

void sub_2168812A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::TfStringGetCommonPrefix@<X0>(char *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  if ((char)a2[23] < 0) {
    unint64_t v5 = *((void *)a2 + 1);
  }
  else {
    unint64_t v5 = a2[23];
  }
  LODWORD(v6) = a1[23];
  if ((v6 & 0x80000000) != 0) {
    unint64_t v7 = *((void *)a1 + 1);
  }
  else {
    unint64_t v7 = a1[23];
  }
  if (v5 < v7)
  {
    unint64_t v8 = *((void *)a2 + 2);
    long long v9 = *(_OWORD *)a2;
    uint64_t v10 = *((void *)a1 + 2);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *((void *)a2 + 2) = v10;
    *(_OWORD *)a1 = v9;
    *((void *)a1 + 2) = v8;
    unint64_t v6 = HIBYTE(v8);
  }
  if ((v6 & 0x80) != 0)
  {
    uint64_t v12 = *(char **)a1;
    uint64_t v11 = *((void *)a1 + 1);
  }
  else
  {
    uint64_t v11 = v6;
    uint64_t v12 = a1;
  }
  if ((char)a2[23] < 0)
  {
    a2 = *(unsigned __int8 **)a2;
    if (!v11) {
      goto LABEL_20;
    }
  }
  else if (!v11)
  {
    goto LABEL_20;
  }
  int v13 = &v12[v11];
  while (*v12 == *a2)
  {
    ++v12;
    ++a2;
    if (!--v11)
    {
      uint64_t v12 = v13;
      break;
    }
  }
LABEL_20:
  if ((v6 & 0x80) != 0) {
    a1 = *(char **)a1;
  }
  return sub_21682E90C(a3, a1, v12, v12 - a1);
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringGetSuffix@<X0>(const std::string *a1@<X0>, std::string::value_type a2@<W1>, std::string *a3@<X8>)
{
  std::string::size_type v5 = std::string::rfind(a1, a2, 0xFFFFFFFFFFFFFFFFLL);
  if (v5 != -1) {
    return std::string::basic_string(a3, a1, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v7);
  }

  return (std::string *)sub_216779094(a3, "");
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix@<X0>(uint64_t a1@<X0>, std::string::value_type a2@<W1>, std::string *a3@<X8>)
{
  unint64_t result = (std::string *)std::string::rfind((const std::string *)a1, a2, 0xFFFFFFFFFFFFFFFFLL);
  if (result != (std::string *)-1) {
    return std::string::basic_string(a3, (const std::string *)a1, 0, (std::string::size_type)result, (std::allocator<char> *)&v8);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v6 = *(void **)a1;
    unint64_t v7 = *(void *)(a1 + 8);
    return (std::string *)sub_216778F24(a3, v6, v7);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfGetBaseName(std::string *a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v5 = (unsigned __int8 *)a1->__r_.__value_.__r.__words[0];
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if (!size)
    {
      BOOL v16 = a2;
      unint64_t v14 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    if (!*((unsigned char *)&a1->__r_.__value_.__s + 23)) {
      goto LABEL_24;
    }
    std::string::size_type v5 = (unsigned __int8 *)a1;
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  unint64_t v7 = &v5[size];
  char v8 = v5;
  long long v9 = v7;
  do
  {
    uint64_t v10 = v8;
    uint64_t v11 = v8;
    while (1)
    {
      int v12 = *v11++;
      if (v12 == 47) {
        break;
      }
      uint64_t v10 = v11;
      if (v11 == v7)
      {
        uint64_t v10 = v9;
        goto LABEL_11;
      }
    }
    char v8 = v10 + 1;
    long long v9 = v10;
  }
  while (v11 != v7);
LABEL_11:
  if (v10 == v7) {
    std::string::size_type v13 = -1;
  }
  else {
    std::string::size_type v13 = v10 - v5;
  }
  unint64_t v14 = a1->__r_.__value_.__l.__size_;
  if ((v4 & 0x80u) == 0) {
    std::string::size_type v15 = v4;
  }
  else {
    std::string::size_type v15 = a1->__r_.__value_.__l.__size_;
  }
  if (v13 == v15 - 1)
  {
    std::string::basic_string(&__p, a1, 0, v13, (std::allocator<char> *)&v18);
    pxrInternal__aapl__pxrReserved__::TfGetBaseName(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (v13 != -1)
  {
    std::string::basic_string(a2, a1, v13 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
    return;
  }
  if ((v4 & 0x80) == 0)
  {
LABEL_24:
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = a1->__r_.__value_.__r.__words[2];
    return;
  }
  std::string::size_type v5 = (unsigned __int8 *)a1->__r_.__value_.__r.__words[0];
  BOOL v16 = a2;
LABEL_27:

  sub_216778F24(v16, v5, v14);
}

void sub_21688160C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::TfGetPathName@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    int v3 = __str;
  }
  else {
    int v3 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::size_type v5 = (unsigned __int8 *)v3 + size;
    unint64_t v6 = v3;
    unint64_t v7 = (std::string *)v5;
    do
    {
      char v8 = v6;
      long long v9 = (unsigned __int8 *)v6;
      while (1)
      {
        int v10 = *v9++;
        if (v10 == 47) {
          break;
        }
        char v8 = (std::string *)v9;
        if (v9 == v5)
        {
          char v8 = v7;
          goto LABEL_13;
        }
      }
      unint64_t v6 = (std::string *)((char *)&v8->__r_.__value_.__l.__data_ + 1);
      unint64_t v7 = v8;
    }
    while (v9 != v5);
LABEL_13:
    if (v8 != (std::string *)v5)
    {
      int64_t v11 = (char *)v8 - (char *)v3;
      if (v11 != -1) {
        return std::string::basic_string(a2, __str, 0, v11 + 1, (std::allocator<char> *)&v13);
      }
    }
  }

  return (std::string *)sub_216779094(a2, "");
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringTrimRight@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  size_t v9 = strlen(__s);
  uint64_t v10 = (uint64_t)&v7[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    std::string::size_type v11 = size;
    if (!size) {
      break;
    }
    if (!v9) {
      break;
    }
  }
  while (memchr(__s, *(char *)(v10 + size--), v9));
  return std::string::basic_string(a3, a2, 0, v11, (std::allocator<char> *)&v14);
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringTrimLeft@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  unint64_t result = (std::string *)strlen(__s);
  if (size)
  {
    uint64_t v10 = v7;
    size_t v11 = (size_t)result;
    if (result)
    {
      while (1)
      {
        unint64_t result = (std::string *)memchr(__s, v10->__r_.__value_.__s.__data_[0], v11);
        if (!result) {
          break;
        }
        uint64_t v10 = (const std::string *)((char *)v10 + 1);
        if (!--size) {
          goto LABEL_14;
        }
      }
    }
    if ((char *)v10 - (char *)v7 != -1) {
      return std::string::basic_string(a3, a2, (char *)v10 - (char *)v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
    }
  }
LABEL_14:
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  return result;
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringTrim@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  unint64_t result = (std::string *)strlen(__s);
  if (!size) {
    goto LABEL_19;
  }
  size_t v10 = (size_t)result;
  size_t v11 = v7;
  if (result)
  {
    std::string::size_type v12 = size;
    size_t v11 = v7;
    while (1)
    {
      unint64_t result = (std::string *)memchr(__s, v11->__r_.__value_.__s.__data_[0], v10);
      if (!result) {
        break;
      }
      size_t v11 = (const std::string *)((char *)v11 + 1);
      if (!--v12) {
        goto LABEL_19;
      }
    }
  }
  std::string::size_type v13 = (char *)v11 - (char *)v7;
  if (v13 == -1)
  {
LABEL_19:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    std::string::size_type v14 = size - 1;
    do
    {
      std::string::size_type v15 = v14;
      if (v14 == -1) {
        break;
      }
      if (!v10) {
        break;
      }
      BOOL v16 = memchr(__s, v7->__r_.__value_.__s.__data_[v14], v10);
      std::string::size_type v14 = v15 - 1;
    }
    while (v16);
    return std::string::basic_string(a3, a2, v13, v15 - v13 + 1, (std::allocator<char> *)&v17);
  }
  return result;
}

void **pxrInternal__aapl__pxrReserved__::TfStringReplace@<X0>(void **result@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, std::string *a4@<X8>)
{
  std::string::size_type v4 = result;
  std::string::size_type v6 = a2[23];
  signed __int8 v7 = v6;
  size_t v8 = *((void *)a2 + 1);
  if ((v6 & 0x80u) == 0) {
    uint64_t v9 = a2[23];
  }
  else {
    uint64_t v9 = *((void *)a2 + 1);
  }
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v12 = a3[23];
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)a3 + 1);
  }
  if (v9 == v12)
  {
    if (v13 >= 0) {
      std::string::size_type v14 = a3;
    }
    else {
      std::string::size_type v14 = *(unsigned __int8 **)a3;
    }
    if (((char)v6 & 0x80000000) == 0)
    {
      if ((_BYTE)v6)
      {
        std::string::size_type v15 = a2;
        std::string::size_type v16 = v6;
        while (*v15 == *v14)
        {
          ++v15;
          ++v14;
          if (!--v16) {
            goto LABEL_20;
          }
        }
        goto LABEL_18;
      }
LABEL_20:
      if (*((char *)v4 + 23) < 0)
      {
        char v17 = *v4;
        unint64_t v18 = (unint64_t)v4[1];
        return (void **)sub_216778F24(a4, v17, v18);
      }
      else
      {
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
        a4->__r_.__value_.__r.__words[2] = (std::string::size_type)v4[2];
      }
      return result;
    }
    unint64_t result = (void **)memcmp(*(const void **)a2, v14, v8);
    if (!result) {
      goto LABEL_20;
    }
  }
LABEL_18:
  BOOL v36 = a3;
  if (*((char *)v4 + 23) < 0)
  {
    unint64_t result = (void **)sub_216778F24(a4, *v4, (unint64_t)v4[1]);
    std::string::size_type v6 = a2[23];
    size_t v8 = *((void *)a2 + 1);
    signed __int8 v7 = a2[23];
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    a4->__r_.__value_.__r.__words[2] = (std::string::size_type)v4[2];
  }
  std::string::size_type v19 = 0;
  std::string::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    std::string::size_type v21 = (std::string::size_type)a4;
  }
  else {
    std::string::size_type v21 = a4->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a4->__r_.__value_.__l.__size_;
  }
  BOOL v22 = v7 < 0;
  BOOL v37 = v22;
  if (v7 >= 0) {
    BOOL v23 = a2;
  }
  else {
    BOOL v23 = *(unsigned __int8 **)a2;
  }
  if (v22) {
    int64_t v24 = v8;
  }
  else {
    int64_t v24 = v6;
  }
  while (!v24)
  {
LABEL_48:
    if (v19 != -1)
    {
      if (v37) {
        std::string::size_type v30 = v8;
      }
      else {
        std::string::size_type v30 = v6;
      }
      int v31 = (char)v36[23];
      if (v31 >= 0) {
        unint64_t v32 = (const std::string::value_type *)v36;
      }
      else {
        unint64_t v32 = *(const std::string::value_type **)v36;
      }
      if (v31 >= 0) {
        std::string::size_type v33 = v36[23];
      }
      else {
        std::string::size_type v33 = *((void *)v36 + 1);
      }
      unint64_t result = (void **)std::string::replace(a4, v19, v30, v32, v33);
      uint64_t v34 = v36[23];
      if ((v34 & 0x80u) != 0) {
        uint64_t v34 = *((void *)v36 + 1);
      }
      v19 += v34;
      std::string::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) == 0) {
        std::string::size_type v21 = (std::string::size_type)a4;
      }
      else {
        std::string::size_type v21 = a4->__r_.__value_.__r.__words[0];
      }
      if ((size & 0x80u) != 0) {
        std::string::size_type size = a4->__r_.__value_.__l.__size_;
      }
      int v35 = (char)a2[23];
      BOOL v37 = v35 < 0;
      size_t v8 = *((void *)a2 + 1);
      std::string::size_type v6 = a2[23];
      BOOL v23 = v35 >= 0 ? a2 : *(unsigned __int8 **)a2;
      int64_t v24 = v35 >= 0 ? a2[23] : *((void *)a2 + 1);
      if (size >= v19) {
        continue;
      }
    }
    return result;
  }
  unint64_t result = (void **)(v21 + v19);
  unint64_t v25 = (char *)(v21 + size);
  int64_t v26 = size - v19;
  if (v26 >= v24)
  {
    int v27 = (char)*v23;
    do
    {
      int64_t v28 = v26 - v24;
      if (v28 == -1) {
        break;
      }
      unint64_t result = (void **)memchr(result, v27, v28 + 1);
      if (!result) {
        break;
      }
      BOOL v29 = (char *)result;
      unint64_t result = (void **)memcmp(result, v23, v24);
      if (!result)
      {
        if (v29 == v25) {
          return result;
        }
        std::string::size_type v19 = (std::string::size_type)&v29[-v21];
        goto LABEL_48;
      }
      unint64_t result = (void **)(v29 + 1);
      int64_t v26 = v25 - (v29 + 1);
    }
    while (v26 >= v24);
  }
  return result;
}

void sub_216881C0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringJoin@<X0>(char *__s@<X1>, std::string **a2@<X0>, std::string *a3@<X8>)
{
  return sub_216881C38(__s, *a2, a2[1], a3);
}

std::string *sub_216881C38@<X0>(char *__s@<X2>, std::string *result@<X0>, std::string *a3@<X1>, std::string *a4@<X8>)
{
  if (result == a3)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    std::string::size_type v6 = result;
    if ((char *)a3 - (char *)result == 24)
    {
      if (SHIBYTE(result->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v21 = (void *)result->__r_.__value_.__r.__words[0];
        unint64_t size = result->__r_.__value_.__l.__size_;
        return (std::string *)sub_216778F24(a4, v21, size);
      }
      else
      {
        long long v7 = *(_OWORD *)&result->__r_.__value_.__l.__data_;
        a4->__r_.__value_.__r.__words[2] = result->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v7;
      }
    }
    else
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)result) >> 3);
      a4->__r_.__value_.__r.__words[0] = 0;
      a4->__r_.__value_.__l.__size_ = 0;
      a4->__r_.__value_.__r.__words[2] = 0;
      size_t v11 = result;
      do
      {
        if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v12 = v11->__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v12 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
        }
        v9 += v12;
        ++v11;
      }
      while (v11 != a3);
      size_t v13 = strlen(__s);
      std::string::reserve(a4, v9 + v13 * (v10 - 1));
      int v14 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
      if (v14 >= 0) {
        std::string::size_type v15 = (const std::string::value_type *)v6;
      }
      else {
        std::string::size_type v15 = (const std::string::value_type *)v6->__r_.__value_.__r.__words[0];
      }
      if (v14 >= 0) {
        std::string::size_type v16 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v16 = v6->__r_.__value_.__l.__size_;
      }
      unint64_t result = std::string::append(a4, v15, v16);
      for (uint64_t i = v6 + 1; i != a3; ++i)
      {
        std::string::append(a4, __s);
        int v18 = SHIBYTE(i->__r_.__value_.__r.__words[2]);
        if (v18 >= 0) {
          std::string::size_type v19 = (const std::string::value_type *)i;
        }
        else {
          std::string::size_type v19 = (const std::string::value_type *)i->__r_.__value_.__r.__words[0];
        }
        if (v18 >= 0) {
          std::string::size_type v20 = HIBYTE(i->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v20 = i->__r_.__value_.__l.__size_;
        }
        unint64_t result = std::string::append(a4, v19, v20);
      }
    }
  }
  return result;
}

void sub_216881D94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringJoin@<X0>(char *__s@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  return sub_216881DC4(__s, *(std::string **)a2, (std::string *)(a2 + 8), a3);
}

std::string *sub_216881DC4@<X0>(char *__s@<X2>, std::string *result@<X0>, std::string *a3@<X1>, std::string *a4@<X8>)
{
  if (result == a3)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    uint64_t v7 = (uint64_t)result;
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t)result;
    do
    {
      uint64_t v10 = v8;
      size_t v11 = *(std::string **)(v9 + 8);
      if (v11)
      {
        do
        {
          std::string::size_type v12 = v11;
          size_t v11 = (std::string *)v11->__r_.__value_.__r.__words[0];
        }
        while (v11);
      }
      else
      {
        do
        {
          std::string::size_type v12 = *(std::string **)(v9 + 16);
          BOOL v13 = v12->__r_.__value_.__r.__words[0] == v9;
          uint64_t v9 = (uint64_t)v12;
        }
        while (!v13);
      }
      uint64_t v8 = v10 + 1;
      uint64_t v9 = (uint64_t)v12;
    }
    while (v12 != a3);
    if (v10)
    {
      uint64_t v14 = 0;
      a4->__r_.__value_.__r.__words[0] = 0;
      a4->__r_.__value_.__l.__size_ = 0;
      uint64_t v15 = (uint64_t)result;
      a4->__r_.__value_.__r.__words[2] = 0;
      do
      {
        if (*(char *)(v15 + 55) < 0) {
          uint64_t v16 = *(void *)(v15 + 40);
        }
        else {
          uint64_t v16 = *(unsigned __int8 *)(v15 + 55);
        }
        char v17 = *(std::string **)(v15 + 8);
        if (v17)
        {
          do
          {
            int v18 = v17;
            char v17 = (std::string *)v17->__r_.__value_.__r.__words[0];
          }
          while (v17);
        }
        else
        {
          do
          {
            int v18 = *(std::string **)(v15 + 16);
            BOOL v13 = v18->__r_.__value_.__r.__words[0] == v15;
            uint64_t v15 = (uint64_t)v18;
          }
          while (!v13);
        }
        v14 += v16;
        uint64_t v15 = (uint64_t)v18;
      }
      while (v18 != a3);
      size_t v19 = strlen(__s);
      std::string::reserve(a4, v14 + v19 * v10);
      int v20 = *(char *)(v7 + 55);
      if (v20 >= 0) {
        std::string::size_type v21 = (const std::string::value_type *)(v7 + 32);
      }
      else {
        std::string::size_type v21 = *(const std::string::value_type **)(v7 + 32);
      }
      if (v20 >= 0) {
        std::string::size_type v22 = *(unsigned __int8 *)(v7 + 55);
      }
      else {
        std::string::size_type v22 = *(void *)(v7 + 40);
      }
      while (1)
      {
        unint64_t result = std::string::append(a4, v21, v22);
        BOOL v23 = *(void **)(v7 + 8);
        uint64_t v24 = v7;
        if (v23)
        {
          do
          {
            uint64_t v7 = (uint64_t)v23;
            BOOL v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v7 = *(void *)(v24 + 16);
            BOOL v13 = *(void *)v7 == v24;
            uint64_t v24 = v7;
          }
          while (!v13);
        }
        if ((std::string *)v7 == a3) {
          break;
        }
        std::string::append(a4, __s);
        int v25 = *(char *)(v7 + 55);
        if (v25 >= 0) {
          std::string::size_type v21 = (const std::string::value_type *)(v7 + 32);
        }
        else {
          std::string::size_type v21 = *(const std::string::value_type **)(v7 + 32);
        }
        if (v25 >= 0) {
          std::string::size_type v22 = *(unsigned __int8 *)(v7 + 55);
        }
        else {
          std::string::size_type v22 = *(void *)(v7 + 40);
        }
      }
    }
    else if (result[2].__r_.__value_.__s.__data_[7] < 0)
    {
      unint64_t size = (void *)result[1].__r_.__value_.__l.__size_;
      unint64_t v28 = result[1].__r_.__value_.__r.__words[2];
      return (std::string *)sub_216778F24(a4, size, v28);
    }
    else
    {
      long long v26 = *(_OWORD *)&result[1].__r_.__value_.__r.__words[1];
      a4->__r_.__value_.__r.__words[2] = result[2].__r_.__value_.__r.__words[0];
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v26;
    }
  }
  return result;
}

void sub_216881FB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfStringSplit(std::string *__str@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  int v5 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    int v7 = a2[23];
    int64_t v8 = v7 >= 0 ? a2[23] : *((void *)a2 + 1);
    if (v8)
    {
      std::string::size_type v10 = 0;
      if (v5 >= 0) {
        size_t v11 = __str;
      }
      else {
        size_t v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      if (v7 >= 0) {
        std::string::size_type v12 = a2;
      }
      else {
        std::string::size_type v12 = *(char **)a2;
      }
      uint64_t v46 = (uint64_t)(a3 + 2);
      while (1)
      {
        std::string::size_type v13 = v10;
        if (v8) {
          break;
        }
LABEL_25:
        if (v13 != -1)
        {
          std::string::basic_string(&v47, __str, v10, v13 - v10, (std::allocator<char> *)&v48);
          unint64_t v22 = a3[1];
          unint64_t v21 = a3[2];
          if (v22 >= v21)
          {
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a3) >> 3);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a3) >> 3);
            if (2 * v26 > v25) {
              unint64_t v25 = 2 * v26;
            }
            if (v26 >= 0x555555555555555) {
              unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v27 = v25;
            }
            int v52 = a3 + 2;
            if (v27) {
              unint64_t v28 = (char *)sub_216782ED8(v46, v27);
            }
            else {
              unint64_t v28 = 0;
            }
            BOOL v29 = &v28[24 * v24];
            unint64_t v48 = v28;
            char v49 = v29;
            unint64_t v51 = &v28[24 * v27];
            long long v30 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
            *((void *)v29 + 2) = *((void *)&v47.__r_.__value_.__l + 2);
            *(_OWORD *)BOOL v29 = v30;
            memset(&v47, 0, sizeof(v47));
            BOOL v50 = v29 + 24;
            sub_216790CCC(a3, &v48);
            uint64_t v31 = a3[1];
            sub_216790E64((uint64_t)&v48);
            int v32 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
            a3[1] = v31;
            if (v32 < 0) {
              operator delete(v47.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
            *(void *)(v22 + 16) = *((void *)&v47.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v22 = v23;
            a3[1] = v22 + 24;
          }
          int v33 = a2[23];
          std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
          if ((size & 0x80u) == 0) {
            size_t v11 = __str;
          }
          else {
            size_t v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
          }
          if ((size & 0x80u) != 0) {
            std::string::size_type size = __str->__r_.__value_.__l.__size_;
          }
          int64_t v8 = v33 >= 0 ? a2[23] : *((void *)a2 + 1);
          std::string::size_type v10 = v8 + v13;
          std::string::size_type v12 = v33 >= 0 ? a2 : *(char **)a2;
          if (size >= v10) {
            continue;
          }
        }
        goto LABEL_51;
      }
      uint64_t v14 = (char *)v11 + v10;
      uint64_t v15 = (char *)v11 + size;
      int64_t v16 = size - v10;
      if (v16 >= v8)
      {
        int v17 = *v12;
        do
        {
          int64_t v18 = v16 - v8;
          if (v18 == -1) {
            break;
          }
          size_t v19 = (char *)memchr(v14, v17, v18 + 1);
          if (!v19) {
            break;
          }
          int v20 = v19;
          if (!memcmp(v19, v12, v8))
          {
            if (v20 == v15) {
              break;
            }
            std::string::size_type v13 = v20 - (char *)v11;
            goto LABEL_25;
          }
          uint64_t v14 = v20 + 1;
          int64_t v16 = v15 - (v20 + 1);
        }
        while (v16 >= v8);
      }
LABEL_51:
      std::string::basic_string(&v47, __str, v10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v48);
      unint64_t v35 = a3[1];
      unint64_t v34 = a3[2];
      if (v35 >= v34)
      {
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *a3) >> 3);
        unint64_t v38 = v37 + 1;
        if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *a3) >> 3);
        if (2 * v39 > v38) {
          unint64_t v38 = 2 * v39;
        }
        if (v39 >= 0x555555555555555) {
          unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v40 = v38;
        }
        int v52 = a3 + 2;
        if (v40) {
          uint64_t v41 = (char *)sub_216782ED8(v46, v40);
        }
        else {
          uint64_t v41 = 0;
        }
        std::locale v42 = &v41[24 * v37];
        unint64_t v48 = v41;
        char v49 = v42;
        unint64_t v51 = &v41[24 * v40];
        long long v43 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
        *((void *)v42 + 2) = *((void *)&v47.__r_.__value_.__l + 2);
        *(_OWORD *)std::locale v42 = v43;
        memset(&v47, 0, sizeof(v47));
        BOOL v50 = v42 + 24;
        sub_216790CCC(a3, &v48);
        uint64_t v44 = a3[1];
        sub_216790E64((uint64_t)&v48);
        int v45 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
        a3[1] = v44;
        if (v45 < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v36 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
        *(void *)(v35 + 16) = *((void *)&v47.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v35 = v36;
        a3[1] = v35 + 24;
      }
    }
  }
}

void sub_21688235C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStringTokenize(unsigned __int8 *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  int64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_21688248C(a1, a2, (uint64_t)&v8);
  sub_216782DE0(a3, (v9 - v8) >> 4);
  std::string::size_type v4 = v9;
  if (v9 != v8)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    std::string::size_type v4 = v8;
    do
    {
      sub_216882688((std::string *)(*a3 + v6), *(char **)&v4[v5], *(char **)&v4[v5 + 8]);
      ++v7;
      std::string::size_type v4 = v8;
      v6 += 24;
      v5 += 16;
    }
    while (v7 != (v9 - v8) >> 4);
  }
  if (v4)
  {
    uint64_t v9 = v4;
    operator delete(v4);
  }
}

void sub_21688245C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21688248C(unsigned __int8 *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  memset(v26, 0, sizeof(v26));
  unsigned int v5 = *a2;
  if (*a2)
  {
    uint64_t v6 = a2 + 1;
    do
    {
      *((unsigned char *)v26 + v5) = 1;
      unsigned int v7 = *v6++;
      unsigned int v5 = v7;
    }
    while (v7);
  }
  sub_216884D8C((void **)a3, 8uLL);
  uint64_t v8 = a1[23];
  int v9 = (char)v8;
  uint64_t v10 = &a1[v8];
  if (v9 >= 0) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = (unsigned __int8 *)(*(void *)a1 + *((void *)a1 + 1));
  }
  if (v9 >= 0) {
    std::string::size_type v12 = a1;
  }
  else {
    std::string::size_type v12 = *(unsigned __int8 **)a1;
  }
  for (; v12 < v11; ++v12)
  {
    if (!*((unsigned char *)v26 + *v12))
    {
      uint64_t v14 = *(unsigned __int8 ***)(a3 + 8);
      unint64_t v13 = *(void *)(a3 + 16);
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = ((uint64_t)v14 - *(void *)a3) >> 4;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v18 = v13 - *(void *)a3;
        if (v18 >> 3 > v17) {
          unint64_t v17 = v18 >> 3;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19) {
          int v20 = (char *)sub_216787EE0(a3 + 16, v19);
        }
        else {
          int v20 = 0;
        }
        unint64_t v21 = (int64x2_t *)&v20[16 * v16];
        *unint64_t v21 = vdupq_n_s64((unint64_t)v12);
        uint64_t v15 = v21 + 1;
        long long v23 = *(int64x2_t **)a3;
        unint64_t v22 = *(int64x2_t **)(a3 + 8);
        if (v22 != *(int64x2_t **)a3)
        {
          do
          {
            v21[-1] = v22[-1];
            --v21;
            --v22;
          }
          while (v22 != v23);
          unint64_t v22 = *(int64x2_t **)a3;
        }
        *(void *)a3 = v21;
        *(void *)(a3 + 8) = v15;
        *(void *)(a3 + 16) = &v20[16 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *uint64_t v14 = v12;
        v14[1] = v12;
        uint64_t v15 = (int64x2_t *)(v14 + 2);
      }
      *(void *)(a3 + 8) = v15;
      unint64_t v24 = v12 + 1;
      while (v24 != v11)
      {
        unsigned int v25 = *v24++;
        if (*((unsigned char *)v26 + v25))
        {
          std::string::size_type v12 = v24 - 1;
          goto LABEL_33;
        }
      }
      std::string::size_type v12 = v11;
LABEL_33:
      v15[-1].i64[1] = (uint64_t)v12;
    }
  }
}

std::string *sub_216882688(std::string *this, char *a2, char *a3)
{
  std::string::size_type v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    uint64_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    uint64_t v14 = this;
    if ((v6 & 0x80) != 0) {
      uint64_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *uint64_t i = v16;
    }
    *uint64_t i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    sub_21682E90C(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v12 = __p;
    }
    else {
      std::string::size_type v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_2168827E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfStringTokenizeToSet(unsigned __int8 *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_21688248C(a1, a2, (uint64_t)&v9);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  std::string::size_type v4 = v10;
  if (v10 != v9)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    std::string::size_type v4 = v9;
    do
    {
      sub_21682E90C(__p, *(char **)&v4[v5], *(char **)&v4[v5 + 8], *(void *)&v4[v5 + 8] - *(void *)&v4[v5]);
      sub_216884E40((uint64_t **)a3, (const void **)__p, (uint64_t)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      ++v6;
      std::string::size_type v4 = v9;
      v5 += 16;
    }
    while (v6 != (v10 - v9) >> 4);
  }
  if (v4)
  {
    uint64_t v10 = v4;
    operator delete(v4);
  }
}

void sub_2168828C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfQuotedStringTokenize(char *__s1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  memset(&v58, 0, sizeof(v58));
  {
    if (a3)
    {
      MEMORY[0x21D4477E0](a3, "Cannot use quotes as delimiters.");
      goto LABEL_115;
    }
    return;
  }
  uint64_t v51 = a3;
  unint64_t v8 = 0;
  memset(&v57, 0, sizeof(v57));
LABEL_5:
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v9 = *(void *)(a2 + 8);
    if (v8 >= v9) {
      goto LABEL_113;
    }
    uint64_t v10 = *(void *)a2;
  }
  else
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v10 = a2;
    if (v8 >= v9) {
      goto LABEL_113;
    }
  }
  size_t v11 = strlen(__s1);
  std::string::size_type v12 = (char *)(v10 + v8);
  if (v11)
  {
    size_t v13 = v11;
    unint64_t v14 = v9 - v8;
    while (memchr(__s1, *v12, v13))
    {
      ++v12;
      if (!--v14) {
        goto LABEL_113;
      }
    }
  }
  unint64_t v15 = (unint64_t)&v12[-v10];
  if (v15 != -1)
  {
    std::string::erase(&v57, 0, 0xFFFFFFFFFFFFFFFFLL);
    std::string::erase(&v58, 0, 0xFFFFFFFFFFFFFFFFLL);
    while (1)
    {
      int v17 = *(char *)(a2 + 23);
      uint64_t v18 = *(void *)a2;
      if (v17 >= 0) {
        uint64_t v19 = a2;
      }
      else {
        uint64_t v19 = *(void *)a2;
      }
      if (v17 >= 0) {
        unint64_t v20 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        unint64_t v20 = *(void *)(a2 + 8);
      }
      size_t v21 = strlen(__s1);
      if (v20 <= v15 || v21 == 0)
      {
        if (v16 == -1) {
          goto LABEL_76;
        }
      }
      else
      {
        long long v23 = (unsigned __int8 *)(v19 + v15);
        unint64_t v24 = (unsigned __int8 *)(v19 + v20);
LABEL_30:
        size_t v25 = v21;
        unint64_t v26 = __s1;
        while (*v23 != *v26)
        {
          ++v26;
          if (!--v25)
          {
            if (++v23 != v24) {
              goto LABEL_30;
            }
            long long v23 = (unsigned __int8 *)(v19 + v20);
            break;
          }
        }
        uint64_t v27 = (uint64_t)&v23[-v19];
        if (v23 == v24) {
          unint64_t v28 = -1;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v16 >= v28)
        {
          if (v28 != -1)
          {
            std::string::basic_string(&v56, (const std::string *)a2, v15, v28 - v15, (std::allocator<char> *)&v55);
            if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v40 = &v56;
            }
            else {
              unint64_t v40 = (std::string *)v56.__r_.__value_.__r.__words[0];
            }
            if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v56.__r_.__value_.__l.__size_;
            }
            std::string::append(&v58, (const std::string::value_type *)v40, size);
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v56.__r_.__value_.__l.__data_);
            }
            int v42 = 0;
            goto LABEL_85;
          }
LABEL_76:
          std::string::basic_string(&v56, (const std::string *)a2, v15, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v43 = &v56;
          }
          else {
            long long v43 = (std::string *)v56.__r_.__value_.__r.__words[0];
          }
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v44 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v44 = v56.__r_.__value_.__l.__size_;
          }
          std::string::append(&v58, (const std::string::value_type *)v43, v44);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v56.__r_.__value_.__l.__data_);
          }
          uint64_t v27 = -1;
          int v42 = 1;
LABEL_85:
          for (uint64_t i = 0; i != 3; ++i)
          {
            sub_216779094(&v54, "\\"");
            std::string::value_type v46 = asc_2174F54A3[i];
            std::string::push_back(&v54, v46);
            std::string v55 = v54;
            memset(&v54, 0, sizeof(v54));
            memset(&v52, 0, sizeof(v52));
            std::string::push_back(&v52, v46);
            std::string __p = v52;
            memset(&v52, 0, sizeof(v52));
            pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&v58.__r_.__value_.__l.__data_, (unsigned __int8 *)&v55, (unsigned __int8 *)&__p, &v56);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v58.__r_.__value_.__l.__data_);
            }
            std::string v58 = v56;
            *((unsigned char *)&v56.__r_.__value_.__s + 23) = 0;
            v56.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v52.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v55.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v54.__r_.__value_.__l.__data_);
            }
          }
          unint64_t v47 = a4[1];
          if (v47 >= a4[2])
          {
            uint64_t v49 = sub_2167E9A44(a4, (long long *)&v58);
          }
          else
          {
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_216778F24((unsigned char *)a4[1], v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
            }
            else
            {
              long long v48 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
              *(void *)(v47 + 16) = *((void *)&v58.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v47 = v48;
            }
            uint64_t v49 = v47 + 24;
            a4[1] = v47 + 24;
          }
          a4[1] = v49;
          unint64_t v8 = v27 + 1;
          if (v42) {
            break;
          }
          goto LABEL_5;
        }
      }
      if (v16 > v15)
      {
        std::string::basic_string(&v56, (const std::string *)a2, v15, v16 - v15, (std::allocator<char> *)&v55);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v29 = &v56;
        }
        else {
          BOOL v29 = (std::string *)v56.__r_.__value_.__r.__words[0];
        }
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v30 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v30 = v56.__r_.__value_.__l.__size_;
        }
        std::string::append(&v58, (const std::string::value_type *)v29, v30);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        LOBYTE(v17) = *(unsigned char *)(a2 + 23);
        uint64_t v18 = *(void *)a2;
      }
      if ((v17 & 0x80u) == 0) {
        uint64_t v31 = a2;
      }
      else {
        uint64_t v31 = v18;
      }
      std::string::operator=(&v57, *(unsigned char *)(v31 + v16));
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v32 = &v57;
      }
      else {
        int v32 = (std::string *)v57.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v33 = v16 + 1;
      unint64_t v34 = sub_216882F40((uint64_t *)a2, (char *)v32, v16 + 1);
      if (v34 == -1)
      {
        if (v51)
        {
          if (*(char *)(a2 + 23) >= 0) {
            uint64_t v50 = a2;
          }
          else {
            uint64_t v50 = *(void *)a2;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"String is missing an end-quote ('%s'): %s", v35, v36, v32, v50);
          if (*(char *)(v51 + 23) < 0) {
            operator delete(*(void **)v51);
          }
          *(std::string *)uint64_t v51 = v56;
        }
        sub_216782F74(a4);
        break;
      }
      unint64_t v37 = v34;
      if (v34 > v33)
      {
        std::string::basic_string(&v56, (const std::string *)a2, v33, v34 - v33, (std::allocator<char> *)&v55);
        unint64_t v38 = (v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v56
            : (std::string *)v56.__r_.__value_.__r.__words[0];
        std::string::size_type v39 = (v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v56.__r_.__value_.__r.__words[2])
            : v56.__r_.__value_.__l.__size_;
        std::string::append(&v58, (const std::string::value_type *)v38, v39);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
      }
      unint64_t v15 = v37 + 1;
    }
  }
LABEL_113:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
LABEL_115:
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
}

void sub_216882E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  *(void *)(v48 + 8) = v49;
  if (a48 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v50 - 105) < 0) {
    operator delete(*(void **)(v50 - 128));
  }
  *(void *)(v50 - 128) = v48;
  sub_216782F20((void ***)(v50 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_216882F40(uint64_t *a1, char *__s, unint64_t a3)
{
  unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  unint64_t v7 = (uint64_t *)*a1;
  unint64_t v8 = a1[1];
  if ((v6 & 0x80u) == 0) {
    uint64_t v9 = (uint64_t)a1;
  }
  else {
    uint64_t v9 = *a1;
  }
  if ((v6 & 0x80u) == 0) {
    unint64_t v10 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v10 = a1[1];
  }
  size_t v11 = strlen(__s);
  if (v10 <= a3 || v11 == 0) {
    return -1;
  }
  unint64_t v14 = (unsigned __int8 *)(v9 + a3);
  unint64_t v15 = (unsigned __int8 *)(v9 + v10);
  while (2)
  {
    size_t v16 = v11;
    int v17 = __s;
    do
    {
      if (*v14 == *v17)
      {
        uint64_t v18 = &v14[-v9];
        if (v14 == v15) {
          uint64_t v13 = -1;
        }
        else {
          uint64_t v13 = (uint64_t)&v14[-v9];
        }
        uint64_t v19 = v13 - 1;
        if ((unint64_t)(v13 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v13 = (uint64_t)v18;
          while (1)
          {
            if ((v6 & 0x80) != 0)
            {
              int v20 = *((unsigned __int8 *)v7 + v19);
              size_t v21 = v7;
              unint64_t v22 = v8;
            }
            else
            {
              int v20 = *((unsigned __int8 *)a1 + v19);
              size_t v21 = a1;
              unint64_t v22 = v6;
            }
            if (v20 != 92) {
              break;
            }
            unint64_t v23 = v13 + 1;
            if (v22 <= v23) {
              return -1;
            }
            unint64_t v24 = (unsigned __int8 *)v21 + v23;
            size_t v25 = (unsigned __int8 *)v21 + v22;
LABEL_29:
            size_t v26 = v11;
            uint64_t v27 = __s;
            while (*v24 != *v27)
            {
              ++v27;
              if (!--v26)
              {
                if (++v24 != v25) {
                  goto LABEL_29;
                }
                return -1;
              }
            }
            uint64_t v13 = v24 - (unsigned __int8 *)v21;
            if (v24 == v25) {
              uint64_t v28 = -1;
            }
            else {
              uint64_t v28 = v24 - (unsigned __int8 *)v21;
            }
            uint64_t v19 = v28 - 1;
            if ((unint64_t)(v28 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
              return v28;
            }
          }
        }
        return v13;
      }
      ++v17;
      --v16;
    }
    while (v16);
    ++v14;
    uint64_t v13 = -1;
    if (v14 != v15) {
      continue;
    }
    return v13;
  }
}

void pxrInternal__aapl__pxrReserved__::TfMatchedStringTokenize(uint64_t __c@<X2>, const std::string *a2@<X0>, uint64_t a3@<X1>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a4 == a3 || a4 == __c)
  {
    if (a5) {
      MEMORY[0x21D4477E0](a5, "Escape character cannot be a delimiter.", __c);
    }
    return;
  }
  std::string::size_type v12 = std::string::find(a2, __c, 0);
  if (v12 != -1)
  {
    if (!v12
      || ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (uint64_t v13 = a2)
        : (uint64_t v13 = (const std::string *)a2->__r_.__value_.__r.__words[0]),
          v13->__r_.__value_.__s.__data_[v12 - 1] != a4))
    {
      if (v12 < std::string::find(a2, a3, 0))
      {
        if (a5)
        {
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v16 = (uint64_t *)a2;
          }
          else {
            size_t v16 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"String has unmatched close delimiter ('%c', '%c'): %s", v14, v15, a3, __c, v16);
          if (*(char *)(a5 + 23) < 0) {
            operator delete(*(void **)a5);
          }
          *(std::string *)a5 = v61;
        }
        return;
      }
    }
  }
  uint64_t v56 = a5;
  std::string v57 = a6;
  memset(&v61, 0, sizeof(v61));
  if (a4) {
    std::string::push_back(&v61, a4);
  }
  std::string::push_back(&v61, a3);
  if (a3 != __c) {
    std::string::push_back(&v61, __c);
  }
  std::string::size_type v17 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  std::string::size_type v19 = std::string::find(a2, a3, 0);
  if (v19 != -1)
  {
    std::string::size_type v22 = v19;
    char v55 = 0;
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v23 = v17;
    }
    else {
      std::string::size_type v23 = size;
    }
    unint64_t v24 = v23 - 1;
    while (1)
    {
      uint64_t v25 = 0;
      memset(&v60, 0, sizeof(v60));
      uint64_t v26 = 1;
      unint64_t v27 = v22;
      while (2)
      {
        unint64_t v28 = v27 + 1;
        int v29 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
        unint64_t v30 = a2->__r_.__value_.__l.__size_;
        BOOL v31 = v29 < 0;
        if (v29 >= 0) {
          uint64_t v32 = (uint64_t)a2;
        }
        else {
          uint64_t v32 = a2->__r_.__value_.__r.__words[0];
        }
        if (!v31) {
          unint64_t v30 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        }
        std::string::size_type v33 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v34 = &v61;
        }
        else {
          unint64_t v34 = (std::string *)v61.__r_.__value_.__r.__words[0];
        }
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v33 = v61.__r_.__value_.__l.__size_;
        }
        if (v30 <= v28 || v33 == 0)
        {
LABEL_86:
          if (v56)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"String has unmatched open delimiter ('%c', '%c'): %s", v20, v21, a3, __c, v32);
            if (*(char *)(v56 + 23) < 0) {
              operator delete(*(void **)v56);
            }
            *(std::string *)uint64_t v56 = __p;
          }
          sub_216782F74(v57);
          char v49 = 0;
          unint64_t v27 = -1;
          char v55 = 1;
          goto LABEL_95;
        }
        long long v36 = (unsigned __int8 *)(v32 + v28);
        unint64_t v37 = (unsigned __int8 *)(v32 + v30);
LABEL_45:
        std::string::size_type v38 = v33;
        std::string::size_type v39 = v34;
        while (*v36 != v39->__r_.__value_.__s.__data_[0])
        {
          std::string::size_type v39 = (std::string *)((char *)v39 + 1);
          if (!--v38)
          {
            if (++v36 != v37) {
              goto LABEL_45;
            }
            goto LABEL_86;
          }
        }
        if (v36 == v37) {
          goto LABEL_86;
        }
        unint64_t v40 = &v36[-v32];
        if (&v36[-v32] == (unsigned __int8 *)-1) {
          goto LABEL_86;
        }
        int v41 = *v36;
        if (v41 == a4)
        {
          unint64_t v27 = (unint64_t)(v40 + 1);
          if ((unint64_t)(v40 + 1) < v24)
          {
            std::string::basic_string(&v58, a2, v22 + 1, (std::string::size_type)&v40[~v22], (std::allocator<char> *)v62);
            if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v42 = a2;
            }
            else {
              int v42 = (const std::string *)a2->__r_.__value_.__r.__words[0];
            }
            std::string::push_back(&v58, v42->__r_.__value_.__s.__data_[v27]);
            std::string __p = v58;
            memset(&v58, 0, sizeof(v58));
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v44 = __p.__r_.__value_.__l.__size_;
            }
            std::string::append(&v60, (const std::string::value_type *)p_p, v44);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v58.__r_.__value_.__l.__data_);
            }
            std::string::size_type v22 = v27;
            goto LABEL_73;
          }
        }
        else if (a3 == __c || v41 != a3)
        {
          ++v25;
        }
        else
        {
          ++v26;
        }
        unint64_t v27 = (unint64_t)v40;
LABEL_73:
        if (v25 != v26) {
          continue;
        }
        break;
      }
      if (v27 > v22 + 1)
      {
        std::string::basic_string(&__p, a2, v22 + 1, v27 + ~v22, (std::allocator<char> *)&v58);
        int v45 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        std::string::size_type v46 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::string::append(&v60, (const std::string::value_type *)v45, v46);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      unint64_t v47 = v57[1];
      if (v47 >= v57[2])
      {
        uint64_t v50 = sub_2167E9A44(v57, (long long *)&v60);
      }
      else
      {
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_216778F24((unsigned char *)v57[1], v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v48 = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
          *(void *)(v47 + 16) = *((void *)&v60.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v47 = v48;
        }
        uint64_t v50 = v47 + 24;
        v57[1] = v47 + 24;
      }
      v57[1] = v50;
      std::string::size_type v22 = v27 + 1;
      char v49 = 1;
LABEL_95:
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if ((v49 & 1) == 0)
      {
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        if ((v55 & 1) == 0)
        {
          v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
          sub_216782F20((void ***)&v61);
        }
        return;
      }
      std::string::size_type v22 = std::string::find(a2, a3, v22);
      if (v22 == -1) {
        goto LABEL_101;
      }
    }
  }
  unint64_t v27 = 0;
LABEL_101:
  std::string::size_type v51 = std::string::find(a2, __c, v27 + 1);
  if (v51 != -1)
  {
    uint64_t v54 = (a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (uint64_t)a2
        : a2->__r_.__value_.__r.__words[0];
    if (*(unsigned __int8 *)(v51 + v54 - 1) != a4)
    {
      if (v56)
      {
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"String has unmatched close delimiter ('%c', '%c'): %s", v52, v53, a3, __c, v54);
        if (*(char *)(v56 + 23) < 0) {
          operator delete(*(void **)v56);
        }
        *(std::string *)uint64_t v56 = v60;
      }
      sub_216782F74(v57);
    }
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
}

void sub_2168835CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (*(char *)(v34 - 97) < 0) {
    operator delete(*(void **)(v34 - 120));
  }
  *(void *)(v34 - 120) = a15;
  sub_216782F20((void ***)(v34 - 120));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    std::string::size_type v4 = (char *)a2;
  }
  else {
    std::string::size_type v4 = *(char **)a2;
  }
  int v5 = *(char *)(a3 + 23);
  if (v3 >= 0) {
    unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v6 = *(void *)(a2 + 8);
  }
  if (v5 >= 0) {
    unint64_t v7 = (char *)a3;
  }
  else {
    unint64_t v7 = *(char **)a3;
  }
  if (v5 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8 >= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = v8;
  }
  uint64_t v10 = (uint64_t)&v4[v9];
  size_t v11 = (char *)sub_216883A00(v4, (uint64_t)&v4[v9], v7);
  if (v6 == v8 && v10 == (void)v11) {
    return 0;
  }
  unint64_t v14 = v11;
  unint64_t v15 = &v4[v6];
  size_t v16 = (unsigned __int8 *)&v7[v8];
  if ((char *)v10 == v11)
  {
LABEL_82:
    uint64_t result = v10 == (void)v15;
    if ((char *)v10 == v15 && v12 == (char *)v16)
    {
      if (v8 >= v6) {
        unint64_t v48 = v6;
      }
      else {
        unint64_t v48 = v8;
      }
      unsigned int v49 = *(unsigned __int8 *)sub_216883A00(v4, (uint64_t)&v4[v48], v7);
      unsigned int v51 = *v50;
      return v49 != 48 && v49 < v51 || v51 == 48;
    }
    return result;
  }
  while (1)
  {
    unsigned int v17 = *v14;
    unsigned int v18 = *v12;
    if ((*v14 & 0x80000000) == 0 && (*v12 & 0x80000000) == 0)
    {
      BOOL v19 = v17 < 0x40 || ((v18 ^ v17) & 0xFFFFFFDF) == 0;
      if (!v19 && v18 >= 0x40)
      {
        BOOL v56 = (((_BYTE)v17 + 5) & 0x1Fu) >= (((_BYTE)v18 + 5) & 0x1Fu);
        return !v56;
      }
    }
    unsigned int v20 = v17 - 48;
    unsigned int v21 = v18 - 48;
    if (v17 - 48 < 0xA || v21 <= 9) {
      break;
    }
    if ((v17 & 0xFFFFFFDF) - 65 > 0x19 || (v18 & 0xFFFFFFDF) - 65 >= 0x1A) {
      goto LABEL_111;
    }
    unint64_t v27 = v14 + 1;
    unint64_t v28 = (unsigned __int8 *)(v12 + 1);
LABEL_81:
    unint64_t v14 = (char *)sub_216883A00(v27, v10, v28);
    if ((char *)v10 == v14) {
      goto LABEL_82;
    }
  }
  if (v20 > 9 || v21 > 9)
  {
    if (v14 != v4)
    {
      if ((*(v14 - 1) - 48) >= 0xA) {
        return v20 < 0xA;
      }
      else {
        return v21 < 0xA;
      }
    }
LABEL_111:
    BOOL v56 = v17 >= v18;
    return !v56;
  }
  unint64_t v24 = v14;
  while (v24 != v4)
  {
    int v25 = *--v24;
    if ((v25 - 48) >= 0xA)
    {
      uint64_t v26 = v24 + 1;
      goto LABEL_44;
    }
  }
  uint64_t v26 = v4;
LABEL_44:
  int v29 = v12;
  while (v29 != v7)
  {
    int v30 = *--v29;
    if ((v30 - 48) >= 0xA)
    {
      BOOL v31 = (unsigned __int8 *)(v29 + 1);
      goto LABEL_49;
    }
  }
  BOOL v31 = (unsigned __int8 *)v7;
LABEL_49:
  uint64_t v32 = v14;
  do
  {
    unint64_t v27 = v14;
    std::string::size_type v33 = (char *)v32;
    int v34 = *v14++;
    uint64_t v32 = (void *)((char *)v32 + 1);
  }
  while ((v34 - 48) <= 9 && v27 != v15);
  long long v36 = v12;
  do
  {
    unint64_t v28 = (unsigned __int8 *)v12;
    unint64_t v37 = v36;
    int v38 = *v12++;
    ++v36;
  }
  while ((v38 - 48) <= 9 && v28 != v16);
  if (v27 != v26)
  {
    while (*v26 == 48)
    {
      if (++v26 == v27)
      {
        uint64_t v26 = v27;
        break;
      }
    }
  }
  if (v28 != v31)
  {
    while (*v31 == 48)
    {
      if (++v31 == v28)
      {
        unsigned int v40 = v27 == v26;
        if (v27 == v26) {
          goto LABEL_78;
        }
        BOOL v31 = v28;
        goto LABEL_115;
      }
    }
  }
  int v41 = v28 == v31;
  unsigned int v40 = v27 == v26;
  if (v27 == v26 || v28 == v31)
  {
LABEL_77:
    if (v40 != v41)
    {
LABEL_115:
      if (v28 == v31) {
        return 0;
      }
      else {
        return v40;
      }
    }
LABEL_78:
    int64_t v46 = v15 - v27;
    if (v16 - v28 < v15 - v27) {
      int64_t v46 = v16 - v28;
    }
    uint64_t v10 = (uint64_t)&v27[v46];
    goto LABEL_81;
  }
  unint64_t v42 = v37 - (char *)v31;
  unint64_t v43 = v33 - v26;
  std::string::size_type v44 = v26 + 1;
  while (1)
  {
    int v45 = *((char *)v44 - 1);
    if ((v45 - 48) > 9 || *v31 != v45) {
      break;
    }
    int v41 = ++v31 == v28;
    unsigned int v40 = v44 == (void *)v27;
    if (v44 != (void *)v27)
    {
      --v42;
      --v43;
      std::string::size_type v44 = (void *)((char *)v44 + 1);
      if (v31 != v28) {
        continue;
      }
    }
    goto LABEL_77;
  }
  if (v43 < v42) {
    return 1;
  }
  int v54 = (char)*v31;
  return v42 >= v43 && v45 < v54;
}

void *sub_216883A00(void *result, uint64_t a2, void *a3)
{
  if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3)
  {
    unint64_t v3 = a2 - (void)result;
    if ((unint64_t)(a2 - (void)result) < 8)
    {
LABEL_7:
      switch(v3 & 7)
      {
        case 1uLL:
          goto LABEL_20;
        case 2uLL:
          goto LABEL_18;
        case 3uLL:
          goto LABEL_16;
        case 4uLL:
          goto LABEL_14;
        case 5uLL:
          goto LABEL_12;
        case 6uLL:
          goto LABEL_10;
        case 7uLL:
          if (*(unsigned __int8 *)result != *(unsigned __int8 *)a3) {
            return result;
          }
          uint64_t result = (void *)((char *)result + 1);
          a3 = (void *)((char *)a3 + 1);
LABEL_10:
          if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3)
          {
            uint64_t result = (void *)((char *)result + 1);
            a3 = (void *)((char *)a3 + 1);
LABEL_12:
            if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3)
            {
              uint64_t result = (void *)((char *)result + 1);
              a3 = (void *)((char *)a3 + 1);
LABEL_14:
              if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3)
              {
                uint64_t result = (void *)((char *)result + 1);
                a3 = (void *)((char *)a3 + 1);
LABEL_16:
                if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3)
                {
                  uint64_t result = (void *)((char *)result + 1);
                  a3 = (void *)((char *)a3 + 1);
LABEL_18:
                  if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3)
                  {
                    uint64_t result = (void *)((char *)result + 1);
                    a3 = (void *)((char *)a3 + 1);
LABEL_20:
                    if (*(unsigned __int8 *)result == *(unsigned __int8 *)a3) {
                      uint64_t result = (void *)((char *)result + 1);
                    }
                  }
                }
              }
            }
          }
          break;
        default:
          return result;
      }
    }
    else
    {
      unint64_t v4 = v3 >> 3;
      int v5 = (void *)((char *)result + (v3 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v6 = (void *)((char *)a3 + (v3 & 0xFFFFFFFFFFFFFFF8));
      while (1)
      {
        unint64_t v7 = *a3 ^ *result;
        if (v7) {
          break;
        }
        ++result;
        ++a3;
        if (!--v4)
        {
          uint64_t result = v5;
          a3 = v6;
          goto LABEL_7;
        }
      }
      return (void *)((char *)result + (__clz(__rbit64(v7)) >> 3));
    }
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::TfStringify@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, void *a2@<X8>)
{
  if (this) {
    unint64_t v2 = "true";
  }
  else {
    unint64_t v2 = "false";
  }
  return sub_216779094(a2, v2);
}

char *pxrInternal__aapl__pxrReserved__::TfStringify@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[23] < 0) {
    return (char *)sub_216778F24((unsigned char *)a2, *(void **)result, *((void *)result + 1));
  }
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(void *)(a2 + 16) = *((void *)result + 2);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter(pxrInternal__aapl__pxrReserved__ *this, float a2, char *a3)
{
  int v3 = (int)a3;
  sub_216883C80();
  std::string::size_type v12 = this;
  int v13 = v3;
  unsigned int v14 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToShortestIeeeNumber(&dword_267B8E4C0, (uint64_t)&v12, 1, a2);
  if ((result & 1) == 0)
  {
    LOBYTE(v1sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
    unint64_t v9 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"double_conversion failed", v7, v8, "tf/stringUtils.cpp", "Tf_ApplyDoubleToStringConverter", 957, "void pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter(float, char *, int)", v11);
    uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v10, "conv.ToShortestSingle(val, &builder)", v9);
  }
  if ((v14 & 0x80000000) == 0) {
    *((unsigned char *)v12 + v14) = 0;
  }
  return result;
}

void sub_216883C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  if ((a16 & 0x80000000) == 0) {
    *(unsigned char *)(a14 + a16) = 0;
  }
  _Unwind_Resume(a1);
}

void sub_216883C80()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E4F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E4F0))
  {
    dword_267B8E4C0 = 0;
    qword_267B8E4C8 = (uint64_t)"inf";
    unk_267B8E4D0 = "nan";
    byte_267B8E4D8 = 101;
    unk_267B8E4DC = xmmword_217412370;
    dword_267B8E4EC = 0;
    __cxa_guard_release(&qword_267B8E4F0);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter(pxrInternal__aapl__pxrReserved__ *this, double a2, char *a3)
{
  int v3 = (int)a3;
  sub_216883C80();
  std::string::size_type v12 = this;
  int v13 = v3;
  unsigned int v14 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToShortestIeeeNumber(&dword_267B8E4C0, (uint64_t)&v12, 0, a2);
  if ((result & 1) == 0)
  {
    LOBYTE(v1sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
    unint64_t v9 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"double_conversion failed", v7, v8, "tf/stringUtils.cpp", "Tf_ApplyDoubleToStringConverter", 967, "void pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter(double, char *, int)", v11);
    uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v10, "conv.ToShortest(val, &builder)", v9);
  }
  if ((v14 & 0x80000000) == 0) {
    *((unsigned char *)v12 + v14) = 0;
  }
  return result;
}

void sub_216883DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16)
{
  if ((a16 & 0x80000000) == 0) {
    *(unsigned char *)(a14 + a16) = 0;
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::TfStringify@<X0>(float a1@<S0>, void *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter((pxrInternal__aapl__pxrReserved__ *)__s, a1, (char *)0x80);
  return sub_216779094(a2, __s);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDoubleToString(pxrInternal__aapl__pxrReserved__ *this, double a2, char *a3, int a4)
{
  if ((int)a3 < 25) {
    return 0;
  }
  if (a4) {
    int v5 = 6;
  }
  else {
    int v5 = 0;
  }
  int v9 = v5;
  uint64_t v10 = "inf";
  uint64_t v11 = "nan";
  char v12 = 101;
  long long v13 = xmmword_217412370;
  int v14 = 0;
  uint64_t v6 = this;
  int v7 = (int)a3;
  unsigned int v8 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToShortestIeeeNumber(&v9, (uint64_t)&v6, 0, a2);
  if ((v8 & 0x80000000) == 0) {
    *((unsigned char *)v6 + v8) = 0;
  }
  return result;
}

void sub_216883EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  if ((a12 & 0x80000000) == 0) {
    *(unsigned char *)(a10 + a12) = 0;
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::TfStringify@<X0>(double a1@<D0>, void *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter((pxrInternal__aapl__pxrReserved__ *)__s, a1, (char *)0x80);
  return sub_216779094(a2, __s);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, float a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter((pxrInternal__aapl__pxrReserved__ *)__s, a2, (char *)0x80);
  size_t v3 = strlen(__s);
  return sub_216779180(a1, (uint64_t)__s, v3);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, double a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::Tf_ApplyDoubleToStringConverter((pxrInternal__aapl__pxrReserved__ *)__s, a2, (char *)0x80);
  size_t v3 = strlen(__s);
  return sub_216779180(a1, (uint64_t)__s, v3);
}

BOOL pxrInternal__aapl__pxrReserved__::TfUnstringify<BOOL>(char *__s1)
{
  uint64_t v1 = __s1;
  if (__s1[23] < 0)
  {
    uint64_t v1 = *(const char **)__s1;
    if (strcmp(*(const char **)__s1, "true") && strcmp(v1, "1") && strcmp(v1, "yes")) {
      return strcmp(v1, "on") == 0;
    }
  }
  else if (*(_DWORD *)__s1 ^ 0x65757274 | __s1[4])
  {
    if (*(_WORD *)__s1 != 49 && *(_DWORD *)__s1 != 7562617) {
      return strcmp(v1, "on") == 0;
    }
  }
  return 1;
}

char *pxrInternal__aapl__pxrReserved__::TfUnstringify<std::string>@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[23] < 0) {
    return (char *)sub_216778F24((unsigned char *)a2, *(void **)result, *((void *)result + 1));
  }
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(void *)(a2 + 16) = *((void *)result + 2);
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfStringGlobToRegex(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_216778F24((unsigned char *)a2, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
  }
  sub_216779094(v5, ".");
  sub_216779094(__p, "\\.");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)a2, (unsigned __int8 *)v5, (unsigned __int8 *)__p, &v7);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v7;
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  sub_216779094(v5, "*");
  sub_216779094(__p, ".*");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)a2, (unsigned __int8 *)v5, (unsigned __int8 *)__p, &v7);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v7;
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  sub_216779094(v5, "?");
  sub_216779094(__p, ".");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)a2, (unsigned __int8 *)v5, (unsigned __int8 *)__p, &v7);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v7;
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_21688430C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfEscapeStringReplaceChar(uint64_t *this, const char **a2, char **a3)
{
  uint64_t v3 = *this;
  char v4 = (char *)(v3 + 1);
  ++*this;
  int v5 = *(char *)(v3 + 1);
  if (v5 > 96)
  {
    if (v5 > 109)
    {
      switch(*(unsigned char *)(v3 + 1))
      {
        case 'n':
          char v12 = (char *)(*a2)++;
          char v8 = 10;
          goto LABEL_17;
        case 'r':
          char v12 = (char *)(*a2)++;
          char v8 = 13;
          goto LABEL_17;
        case 't':
          char v12 = (char *)(*a2)++;
          char v8 = 9;
          goto LABEL_17;
        case 'v':
          char v12 = (char *)(*a2)++;
          char v8 = 11;
          goto LABEL_17;
        case 'x':
          *this = v3 + 2;
          int v13 = *(char *)(v3 + 2);
          if ((v13 & 0x80000000) == 0
            && (uint64_t v14 = MEMORY[0x263EF8318],
                (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * *(unsigned __int8 *)(v3 + 2) + 60) & 0x10000) != 0))
          {
            uint64_t v17 = 0;
            char v8 = 0;
            do
            {
              if ((v13 - 65) >= 6u) {
                char v18 = -48;
              }
              else {
                char v18 = -55;
              }
              if ((v13 - 97) >= 6u) {
                char v19 = v18;
              }
              else {
                char v19 = -87;
              }
              char v8 = v13 + 16 * v8 + v19;
              uint64_t v20 = v3 + v17;
              *this = v3 + v17 + 3;
              int v13 = *(char *)(v3 + v17 + 3);
              if (v13 < 0) {
                break;
              }
              if ((*(_DWORD *)(v14 + 4 * *(unsigned __int8 *)(v3 + v17 + 3) + 60) & 0x10000) == 0) {
                break;
              }
              BOOL v11 = v17++ == 1;
            }
            while (!v11);
            char v4 = (char *)(v20 + 2);
          }
          else
          {
            char v8 = 0;
          }
          *this = (uint64_t)v4;
          goto LABEL_16;
        default:
          goto LABEL_32;
      }
    }
    switch(v5)
    {
      case 'a':
        char v12 = (char *)(*a2)++;
        char v8 = 7;
        goto LABEL_17;
      case 'b':
        char v12 = (char *)(*a2)++;
        char v8 = 8;
        goto LABEL_17;
      case 'f':
        char v12 = (char *)(*a2)++;
        char v8 = 12;
LABEL_17:
        char *v12 = v8;
        return this;
    }
  }
  else
  {
    if ((v5 - 48) < 8)
    {
      char v6 = *v4;
      if ((v6 & 0xF8) == 0x30)
      {
        uint64_t v7 = 0;
        char v8 = 0;
        do
        {
          char v8 = v6 + 8 * v8 - 48;
          int v9 = (char *)(v3 + v7 + 2);
          *this = (uint64_t)v9;
          char v6 = *v9;
          uint64_t v10 = v7 + 1;
          BOOL v11 = (v6 & 0xF8) != 0x30 || v7++ == 2;
        }
        while (!v11);
        v3 += v10;
      }
      else
      {
        char v8 = 0;
      }
      *this = v3;
LABEL_16:
      char v12 = (char *)(*a2)++;
      goto LABEL_17;
    }
    if (v5 == 92)
    {
      char v12 = (char *)(*a2)++;
      char v8 = 92;
      goto LABEL_17;
    }
  }
LABEL_32:
  char v15 = *(unsigned char *)(v3 + 1);
  size_t v16 = (char *)(*a2)++;
  char *v16 = v15;
  return this;
}

void pxrInternal__aapl__pxrReserved__::TfEscapeString(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  uint64_t v7 = (char *)operator new[](v4 + 1);
  int v13 = v7;
  char v8 = *(unsigned char **)a1;
  if (v5 >= 0) {
    char v8 = (unsigned char *)a1;
  }
  while (1)
  {
    char v12 = v8;
    int v9 = *v8;
    if (v9 != 92) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfEscapeStringReplaceChar((uint64_t *)&v12, (const char **)&v13, v6);
    char v8 = v12;
LABEL_9:
    ++v8;
  }
  if (*v8)
  {
    uint64_t v10 = v13;
    char *v13 = v9;
    int v13 = v10 + 1;
    goto LABEL_9;
  }
  BOOL v11 = v13;
  char *v13 = 0;
  sub_216799F58(a2, v7, v11 - v7);

  operator delete[](v7);
}

void sub_2168846B0(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStringCatPaths(const void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  uint64_t v7 = &v14;
  sub_2167940B4((uint64_t)&v14, v6 + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0) {
      char v8 = a1;
    }
    else {
      char v8 = *a1;
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a2 + 8);
  }
  char v12 = std::string::append(&v14, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v16 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfNormPath(a3, __p, 0);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_2168847CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v2 = a1;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if ((char)a1[23] < 0)
  {
    std::string::size_type v4 = *((void *)a1 + 1);
    if (v4) {
      goto LABEL_3;
    }
LABEL_25:
    std::string::push_back(a2, 95);
    return;
  }
  std::string::size_type v4 = a1[23];
  if (!a1[23]) {
    goto LABEL_25;
  }
LABEL_3:
  std::string::reserve(a2, v4);
  if ((v2[23] & 0x80u) != 0) {
    unint64_t v2 = *(unsigned __int8 **)v2;
  }
  int v5 = *v2;
  if ((v5 - 65) < 0x1Au || v5 == 95) {
    char v7 = *v2;
  }
  else {
    char v7 = 95;
  }
  if ((v5 - 97) >= 0x1A) {
    LOBYTE(v5) = v7;
  }
  std::string::push_back(a2, v5);
  std::string::value_type v8 = v2[1];
  if (v8)
  {
    int v9 = v2 + 2;
    do
    {
      if ((v8 - 48) >= 0xAu) {
        char v10 = 95;
      }
      else {
        char v10 = v8;
      }
      if (v8 == 95) {
        char v10 = v8;
      }
      if (((v8 & 0xDF) - 65) >= 0x1Au) {
        std::string::value_type v8 = v10;
      }
      std::string::push_back(a2, v8);
      int v11 = *v9++;
      std::string::value_type v8 = v11;
    }
    while (v11);
  }
}

void sub_2168848FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfGetXmlEscapedString(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[23];
  int v5 = (char)v4;
  size_t v6 = *(void **)a1;
  unint64_t v7 = *((void *)a1 + 1);
  if ((v4 & 0x80u) == 0) {
    std::string::value_type v8 = a1;
  }
  else {
    std::string::value_type v8 = *(unsigned __int8 **)a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a1 + 1);
  }
  if (v4)
  {
    int v9 = &v8[v4];
    char v10 = v8;
LABEL_8:
    uint64_t v11 = 0;
    while (*v10 != asc_2174F5710[v11])
    {
      if (++v11 == 5)
      {
        if (++v10 != v9) {
          goto LABEL_8;
        }
        goto LABEL_43;
      }
    }
    if (v10 == v9 || v10 - v8 == -1) {
      goto LABEL_43;
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    sub_216779094(v15, "&");
    sub_216779094(__p, "&amp;");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)a1, (unsigned __int8 *)v15, (unsigned __int8 *)__p, &v17);
    int v12 = v14;
    *(std::string *)a2 = v17;
    *((unsigned char *)&v17.__r_.__value_.__s + 23) = 0;
    v17.__r_.__value_.__s.__data_[0] = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    sub_216779094(v15, "<");
    sub_216779094(__p, "&lt;");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)a2, (unsigned __int8 *)v15, (unsigned __int8 *)__p, &v17);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v17;
    *((unsigned char *)&v17.__r_.__value_.__s + 23) = 0;
    v17.__r_.__value_.__s.__data_[0] = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    sub_216779094(v15, ">");
    sub_216779094(__p, "&gt;");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)a2, (unsigned __int8 *)v15, (unsigned __int8 *)__p, &v17);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v17;
    *((unsigned char *)&v17.__r_.__value_.__s + 23) = 0;
    v17.__r_.__value_.__s.__data_[0] = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    sub_216779094(v15, "\"");
    sub_216779094(__p, "&quot;");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)a2, (unsigned __int8 *)v15, (unsigned __int8 *)__p, &v17);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v17;
    *((unsigned char *)&v17.__r_.__value_.__s + 23) = 0;
    v17.__r_.__value_.__s.__data_[0] = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    sub_216779094(v15, "'");
    sub_216779094(__p, "&apos;");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)a2, (unsigned __int8 *)v15, (unsigned __int8 *)__p, &v17);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v17;
    *((unsigned char *)&v17.__r_.__value_.__s + 23) = 0;
    v17.__r_.__value_.__s.__data_[0] = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
  }
  else
  {
LABEL_43:
    if (v5 < 0)
    {
      sub_216778F24((unsigned char *)a2, v6, v7);
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(void *)(a2 + 16) = *((void *)a1 + 2);
    }
  }
}

void sub_216884C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if ((a1[23] & 0x80u) == 0) {
    std::string::size_type v4 = a1[23];
  }
  else {
    std::string::size_type v4 = *((void *)a1 + 1);
  }
  std::string::resize((std::string *)a2, v4, 0);
  uint64_t v5 = a1[23];
  if ((v5 & 0x80u) == 0) {
    size_t v6 = a1;
  }
  else {
    size_t v6 = *(unsigned __int8 **)a1;
  }
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a1 + 1);
  }
  if (v5)
  {
    if (*(char *)(a2 + 23) >= 0) {
      unint64_t v7 = (unsigned char *)a2;
    }
    else {
      unint64_t v7 = *(unsigned char **)a2;
    }
    do
    {
      int v9 = *v6++;
      char v8 = v9;
      char v10 = v9 + 32;
      if ((v9 - 65) < 0x1A) {
        char v8 = v10;
      }
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
}

void sub_216884D70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216884D8C(void **a1, unint64_t a2)
{
  std::string::size_type v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_21677CB10();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    size_t v6 = (char *)sub_216787EE0(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    int v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    char v10 = (char *)a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      char v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

_OWORD *sub_216884E40(uint64_t **a1, const void **a2, uint64_t a3)
{
  int64_t v5 = (void **)sub_21677B220((uint64_t)a1, &v9, a2);
  size_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    size_t v6 = operator new(0x38uLL);
    _OWORD v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_21677B358(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *pxrInternal__aapl__pxrReserved__::TfTemplateString::TfTemplateString(pxrInternal__aapl__pxrReserved__::TfTemplateString *this)
{
  unint64_t v2 = operator new(0x58uLL);
  *unint64_t v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *((unsigned char *)v2 + 48) = 0;
  *((void *)v2 + 8) = 0;
  *((void *)v2 + 9) = 0;
  *((void *)v2 + 7) = 0;
  *((unsigned char *)v2 + 80) = 0;

  return sub_2168863CC(this, (uint64_t)v2);
}

{
  _OWORD *v2;
  uint64_t vars8;

  unint64_t v2 = operator new(0x58uLL);
  *unint64_t v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *((unsigned char *)v2 + 48) = 0;
  *((void *)v2 + 8) = 0;
  *((void *)v2 + 9) = 0;
  *((void *)v2 + 7) = 0;
  *((unsigned char *)v2 + 80) = 0;

  return sub_2168863CC(this, (uint64_t)v2);
}

std::string **pxrInternal__aapl__pxrReserved__::TfTemplateString::TfTemplateString(std::string **a1, const std::string *a2)
{
  std::string::size_type v4 = operator new(0x58uLL);
  *std::string::size_type v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  *((unsigned char *)v4 + 48) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 9) = 0;
  *((void *)v4 + 7) = 0;
  *((unsigned char *)v4 + 80) = 0;
  sub_2168863CC(a1, (uint64_t)v4);
  std::string::operator=(*a1, a2);
  return a1;
}

void sub_216884FF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfTemplateString::Substitute(const std::string **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfTemplateString::_ParseTemplate(a1);
  pxrInternal__aapl__pxrReserved__::TfTemplateString::_EmitParseErrors((pxrInternal__aapl__pxrReserved__::TfTemplateString *)a1);
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  pxrInternal__aapl__pxrReserved__::TfTemplateString::_Evaluate(a1, a2, (uint64_t *)&v12, a3);
  for (long long i = v12; (void)i != *((void *)&i + 1); sub_21686739C(&i))
  {
    v8[0] = (void **)"tf/templateString.cpp";
    v8[1] = (void **)"Substitute";
    _OWORD v8[2] = (void **)72;
    void v8[3] = (void **)"string pxrInternal__aapl__pxrReserved__::TfTemplateString::Substitute(const Mapping &) const";
    char v9 = 0;
    int v10 = 1;
    size_t v6 = (const char **)sub_216885718(&i);
    unint64_t v7 = *v6;
    if ((*v6)[23] < 0) {
      unint64_t v7 = *(const char **)v7;
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v8, (pxrInternal__aapl__pxrReserved__ *)"%s", v7);
  }
  v8[0] = (void **)&v12;
  sub_216782F20(v8);
}

void sub_21688510C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  a11 = (void **)&a19;
  sub_216782F20(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfTemplateString::_ParseTemplate(const std::string **this)
{
  uint64_t result = sub_21685036C((uint64_t)&v5, (uint64_t)&(*this)[3].__r_.__value_.__l.__size_);
  if (!(*this)[2].__r_.__value_.__s.__data_[0])
  {
    std::string::size_type v4 = 0;
    do
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfTemplateString::_FindNextPlaceHolder(this, &v4, (uint64_t *)&(*this)[2].__r_.__value_.__l.__size_);
    while ((result & 1) != 0);
    (*this)[2].__r_.__value_.__s.__data_[0] = 1;
  }
  uint64_t v3 = v5;
  if (v5)
  {
    __dmb(0xBu);
    *uint64_t v3 = 0;
  }
  return result;
}

void sub_2168851C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfTemplateString::_EmitParseErrors(pxrInternal__aapl__pxrReserved__::TfTemplateString *this)
{
  uint64_t result = sub_21685036C((uint64_t)&v10, *(void *)this + 80);
  for (i = *(_OWORD *)(*(void *)this + 56); (void)i != *((void *)&i + 1); uint64_t result = (uint64_t)sub_21686739C(&i))
  {
    v6[0] = "tf/templateString.cpp";
    v6[1] = "_EmitParseErrors";
    _OWORD v6[2] = 90;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::TfTemplateString::_EmitParseErrors() const";
    char v7 = 0;
    int v8 = 1;
    uint64_t v3 = (const char **)sub_216885718(&i);
    std::string::size_type v4 = *v3;
    if ((*v3)[23] < 0) {
      std::string::size_type v4 = *(const char **)v4;
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"%s", v4);
  }
  int64_t v5 = v10;
  if (v10)
  {
    __dmb(0xBu);
    unsigned char *v5 = 0;
  }
  return result;
}

void sub_2168852B0(_Unwind_Exception *a1)
{
  unint64_t v2 = *(unsigned char **)(v1 - 64);
  if (v2)
  {
    __dmb(0xBu);
    *unint64_t v2 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfTemplateString::_Evaluate(const std::string **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  sub_21685036C((uint64_t)&v54, (uint64_t)&(*a1)[3].__r_.__value_.__l.__size_);
  std::string::size_type v8 = 0;
  for (long long i = *(_OWORD *)&(*a1)[1].__r_.__value_.__l.__data_; (void)i != *((void *)&i + 1); sub_216885A4C(&i))
  {
    int v9 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
    if (v9 >= 0) {
      int v10 = a4;
    }
    else {
      int v10 = (std::string *)a4->__r_.__value_.__r.__words[0];
    }
    if (v9 >= 0) {
      std::string::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = a4->__r_.__value_.__l.__size_;
    }
    long long v12 = *a1;
    if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0) {
      long long v12 = (const std::string *)v12->__r_.__value_.__r.__words[0];
    }
    uint64_t v13 = sub_2168859C0(&i);
    sub_216886830(a4, (uint64_t)v10 + size, (std::string::value_type *)v12 + v8, (std::string::value_type *)v12 + *(void *)(*v13 + 24), *(void *)(*v13 + 24) - v8);
    char v14 = sub_2168859C0(&i);
    char v15 = (void *)*v14;
    if (*(char *)(*v14 + 23) < 0) {
      char v15 = (void *)*v15;
    }
    if (*(unsigned char *)v15 == 36)
    {
      std::string::size_type v16 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((v16 & 0x80u) == 0) {
        std::string v17 = a4;
      }
      else {
        std::string v17 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      if ((v16 & 0x80u) != 0) {
        std::string::size_type v16 = a4->__r_.__value_.__l.__size_;
      }
      v18.__i_ = (char *)v17 + v16;
      std::string::insert(a4, v18, 36);
    }
    else
    {
      char v19 = (const void ***)sub_2168859C0(&i);
      uint64_t v20 = sub_21678C2D8(a2, *v19);
      std::string::size_type v21 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0) {
        std::string::size_type v22 = a4;
      }
      else {
        std::string::size_type v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
      }
      if ((v21 & 0x80u) != 0) {
        std::string::size_type v21 = a4->__r_.__value_.__l.__size_;
      }
      uint64_t v23 = (uint64_t)v22 + v21;
      if (a2 + 8 == v20)
      {
        uint64_t v26 = *a1;
        if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0) {
          uint64_t v26 = (const std::string *)v26->__r_.__value_.__r.__words[0];
        }
        unint64_t v27 = sub_2168859C0(&i);
        unint64_t v28 = *a1;
        if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0) {
          unint64_t v28 = (const std::string *)v28->__r_.__value_.__r.__words[0];
        }
        uint64_t v29 = *(void *)(*v27 + 24);
        uint64_t v30 = *(void *)(*sub_2168859C0(&i) + 24);
        BOOL v31 = (char *)v28 + v30 + *(void *)(*sub_2168859C0(&i) + 32);
        sub_216886830(a4, v23, (std::string::value_type *)v26 + v29, v31, v31 - ((char *)v26 + v29));
        if (a3)
        {
          uint64_t v32 = sub_2168859C0(&i);
          unint64_t v35 = (void *)*v32;
          if (*(char *)(*v32 + 23) < 0) {
            unint64_t v35 = (void *)*v35;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"No mapping found for placeholder '%s'", v33, v34, v35);
          unint64_t v37 = a3[1];
          unint64_t v36 = a3[2];
          if (v37 >= v36)
          {
            unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *a3) >> 3);
            unint64_t v41 = v40 + 1;
            if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *a3) >> 3);
            if (2 * v42 > v41) {
              unint64_t v41 = 2 * v42;
            }
            if (v42 >= 0x555555555555555) {
              unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v43 = v41;
            }
            std::string v57 = a3 + 2;
            if (v43) {
              std::string::size_type v44 = (char *)sub_216782ED8((uint64_t)(a3 + 2), v43);
            }
            else {
              std::string::size_type v44 = 0;
            }
            std::string::size_type v45 = (std::string::size_type)&v44[24 * v40];
            v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
            v55.__r_.__value_.__l.__size_ = v45;
            BOOL v56 = &v44[24 * v43];
            long long v46 = *(_OWORD *)__p;
            *(void *)(v45 + 16) = v52;
            *(_OWORD *)std::string::size_type v45 = v46;
            __p[1] = 0;
            uint64_t v52 = 0;
            __p[0] = 0;
            v55.__r_.__value_.__r.__words[2] = v45 + 24;
            sub_216790CCC(a3, &v55);
            uint64_t v47 = a3[1];
            sub_216790E64((uint64_t)&v55);
            a3[1] = v47;
          }
          else
          {
            long long v38 = *(_OWORD *)__p;
            *(void *)(v37 + 16) = v52;
            *(_OWORD *)unint64_t v37 = v38;
            a3[1] = v37 + 24;
          }
        }
      }
      else
      {
        if (*(char *)(v20 + 79) < 0)
        {
          unint64_t v24 = *(std::string::value_type **)(v20 + 56);
          std::string::size_type v25 = *(void *)(v20 + 64);
        }
        else
        {
          unint64_t v24 = (std::string::value_type *)(v20 + 56);
          std::string::size_type v25 = *(unsigned __int8 *)(v20 + 79);
        }
        sub_216886830(a4, v23, v24, &v24[v25], v25);
      }
    }
    uint64_t v39 = *(void *)(*sub_2168859C0(&i) + 24);
    std::string::size_type v8 = *(void *)(*sub_2168859C0(&i) + 32) + v39;
  }
  std::string::basic_string(&v55, *a1, v8, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v48 = &v55;
  }
  else {
    unint64_t v48 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v49 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v49 = v55.__r_.__value_.__l.__size_;
  }
  std::string::append(a4, (const std::string::value_type *)v48, v49);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  uint64_t v50 = v54;
  if (v54)
  {
    __dmb(0xBu);
    unsigned char *v50 = 0;
  }
}

void sub_216885684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned char *a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21)
  {
    __dmb(0xBu);
    *a21 = 0;
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216885718(void *result)
{
  if (*result == result[1])
  {
    uint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::string>>::operator->() [T = std::vec"
            "tor<std::string>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfTemplateString::SafeSubstitute(const std::string **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfTemplateString::_ParseTemplate(a1);
  pxrInternal__aapl__pxrReserved__::TfTemplateString::_EmitParseErrors((pxrInternal__aapl__pxrReserved__::TfTemplateString *)a1);

  pxrInternal__aapl__pxrReserved__::TfTemplateString::_Evaluate(a1, a2, 0, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfTemplateString::GetEmptyMapping@<X0>(const std::string **this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfTemplateString::IsValid(this);
  if (result)
  {
    uint64_t result = sub_21685036C((uint64_t)&v15, (uint64_t)&(*this)[3].__r_.__value_.__l.__size_);
    for (long long i = *(_OWORD *)&(*this)[1].__r_.__value_.__l.__data_;
          (void)i != *((void *)&i + 1);
          uint64_t result = (uint64_t)sub_216885A4C(&i))
    {
      int v5 = sub_2168859C0(&i);
      size_t v6 = (long long *)*v5;
      if (*(char *)(*v5 + 23) < 0)
      {
        sub_216778F24(v9, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        uint64_t v10 = *((void *)v6 + 2);
        *(_OWORD *)int v9 = v7;
      }
      std::string __p = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      sub_21688652C((uint64_t **)a2, (const void **)v9, (uint64_t)v9);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v10) < 0) {
        operator delete(v9[0]);
      }
    }
    std::string::size_type v8 = v15;
    if (v15)
    {
      __dmb(0xBu);
      *std::string::size_type v8 = 0;
    }
  }
  return result;
}

void sub_2168858F8(_Unwind_Exception *a1)
{
  sub_2167877AC(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfTemplateString::IsValid(const std::string **this)
{
  pxrInternal__aapl__pxrReserved__::TfTemplateString::_ParseTemplate(this);
  sub_21685036C((uint64_t)&v5, (uint64_t)&(*this)[3].__r_.__value_.__l.__size_);
  unint64_t v2 = *this;
  if (SHIBYTE((*this)->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v2->__r_.__value_.__l.__size_) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)&(*this)->__r_.__value_.__s + 23))
  {
LABEL_3:
    BOOL result = v2[2].__r_.__value_.__l.__size_ == v2[2].__r_.__value_.__r.__words[2];
    goto LABEL_6;
  }
  BOOL result = 1;
LABEL_6:
  char v4 = v5;
  if (v5)
  {
    __dmb(0xBu);
    *char v4 = 0;
  }
  return result;
}

void *sub_2168859C0(void *result)
{
  if (*result == result[1])
  {
    uint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfTempl"
            "ateString::_PlaceHolder>>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfTemplateString:"
            ":_PlaceHolder>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

void *sub_216885A4C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::TfTemplateString::_PlaceHolder>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfT"
            "emplateString::_PlaceHolder>, Reverse = false]";
    char v4 = 0;
    int v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 40;
  }
  return a1;
}

char *pxrInternal__aapl__pxrReserved__::TfTemplateString::GetParseErrors@<X0>(const std::string **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfTemplateString::_ParseTemplate(this);
  sub_21685036C((uint64_t)&v7, (uint64_t)&(*this)[3].__r_.__value_.__l.__size_);
  char v4 = *this;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  BOOL result = sub_216812BD8((char *)a2, (long long *)v4[2].__r_.__value_.__l.__size_, (long long *)v4[2].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v4[2].__r_.__value_.__r.__words[2] - v4[2].__r_.__value_.__l.__size_) >> 3));
  size_t v6 = v7;
  if (v7)
  {
    __dmb(0xBu);
    *size_t v6 = 0;
  }
  return result;
}

void sub_216885B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfTemplateString::_FindNextPlaceHolder(const std::string **a1, std::string::size_type *a2, uint64_t *a3)
{
  std::string::size_type v6 = std::string::find(*a1, 36, *a2);
  *a2 = v6;
  if (v6 == -1) {
    return 0;
  }
  std::string::size_type v7 = v6;
  std::string::size_type v8 = v6 + 1;
  int v9 = *a1;
  std::string::size_type v10 = HIBYTE((*a1)->__r_.__value_.__r.__words[2]);
  std::string::size_type v11 = SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0
      ? v9->__r_.__value_.__l.__size_
      : HIBYTE((*a1)->__r_.__value_.__r.__words[2]);
  if (v8 >= v11) {
    return 0;
  }
  uint64_t v12 = *a1;
  if ((v10 & 0x80) != 0) {
    uint64_t v12 = (const std::string *)v9->__r_.__value_.__r.__words[0];
  }
  if (v12->__r_.__value_.__s.__data_[v8] == 36)
  {
    sub_216779094(&v44, "$");
    std::string::size_type v13 = *a2;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      sub_216778F24(&__p, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v44;
    }
    std::string::size_type v46 = v13;
    uint64_t v47 = 2;
    sub_2168860A0((uint64_t *)&v9[1], (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    uint64_t v17 = *a2 + 2;
    goto LABEL_21;
  }
  if ((v10 & 0x80) != 0)
  {
    char v15 = (const std::string *)v9->__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v9->__r_.__value_.__r.__words[0] + v8) != 123)
    {
      std::string::size_type size = v9->__r_.__value_.__l.__size_;
      goto LABEL_27;
    }
LABEL_24:
    sub_216779094(&v44, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_");
    std::string::push_back(&v44, 123);
    std::string __p = v44;
    memset(&v44, 0, sizeof(v44));
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v22 = v9;
      int v9 = (const std::string *)v9->__r_.__value_.__r.__words[0];
      std::string::size_type v20 = v22->__r_.__value_.__l.__size_;
    }
    else
    {
      std::string::size_type v20 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
    }
    int v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    unint64_t v24 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
    }
    if (v20 <= v8)
    {
      uint64_t v29 = -1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v27 = (char *)v9 + v8;
      if (v26)
      {
        int v42 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        unint64_t v43 = (void *)__p.__r_.__value_.__r.__words[0];
        std::string::size_type v28 = ~v7 + v20;
        do
        {
          if (!memchr(p_p, *v27, v26))
          {
            unint64_t v24 = v43;
            int v23 = v42;
            goto LABEL_63;
          }
          ++v27;
          --v28;
        }
        while (v28);
        uint64_t v29 = -1;
        unint64_t v24 = v43;
        if ((v42 & 0x80000000) == 0) {
          goto LABEL_66;
        }
      }
      else
      {
LABEL_63:
        uint64_t v29 = v27 - (char *)v9;
        if ((v23 & 0x80000000) == 0) {
          goto LABEL_66;
        }
      }
    }
    operator delete(v24);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
LABEL_66:
    if (v29 == -1)
    {
      if (a3)
      {
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot find close quote for placeholder starting at pos %zu", v18, v19, *a2);
        sub_2168861EC(a3, (long long *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      *a2 = v8;
      return 1;
    }
    int v34 = *a1;
    unint64_t v35 = *a1;
    if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0) {
      unint64_t v35 = (const std::string *)v34->__r_.__value_.__r.__words[0];
    }
    if (v35->__r_.__value_.__s.__data_[v29] != 125)
    {
      if (a3)
      {
        if (SHIBYTE(v34->__r_.__value_.__r.__words[2]) < 0) {
          int v34 = (const std::string *)v34->__r_.__value_.__r.__words[0];
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid character '%c' in identifier at pos %zu", (const char *)v34, v19, v34->__r_.__value_.__s.__data_[v29], v29);
        sub_2168861EC(a3, (long long *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      *a2 = v29;
      return 1;
    }
    std::string::size_type v36 = v29 - *a2;
    uint64_t v37 = v36 + 1;
    std::string::basic_string(&v44, v34, v7 + 2, v36 - 2, (std::allocator<char> *)&__p);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v39 = (char *)v44.__r_.__value_.__l.__size_;
      if (v44.__r_.__value_.__l.__size_)
      {
        unint64_t v40 = *a1;
        std::string::size_type v41 = *a2;
        sub_216778F24(&__p, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
        goto LABEL_86;
      }
    }
    else if (*((unsigned char *)&v44.__r_.__value_.__s + 23))
    {
      unint64_t v40 = *a1;
      std::string::size_type v41 = *a2;
      std::string __p = v44;
LABEL_86:
      std::string::size_type v46 = v41;
      uint64_t v47 = v37;
      sub_2168860A0((uint64_t *)&v40[1], (long long *)&__p);
      goto LABEL_89;
    }
    if (!a3) {
      goto LABEL_91;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Empty placeholder at pos %zu", v38, v39, *a2);
    sub_2168861EC(a3, (long long *)&__p);
LABEL_89:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_91:
    *a2 += v37;
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 1;
    }
    goto LABEL_92;
  }
  if (v9->__r_.__value_.__s.__data_[v8] == 123) {
    goto LABEL_24;
  }
  char v15 = *a1;
  std::string::size_type size = HIBYTE((*a1)->__r_.__value_.__r.__words[2]);
LABEL_27:
  if (size <= v8) {
    goto LABEL_49;
  }
  std::string::size_type v21 = v6 + 1;
  while (memchr("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_", v15->__r_.__value_.__s.__data_[v21], 0x3FuLL))
  {
    if (size == ++v21) {
      goto LABEL_49;
    }
  }
  if (v21 == -1)
  {
LABEL_49:
    if ((v10 & 0x80) != 0) {
      std::string::size_type v21 = v9->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v21 = v10;
    }
  }
  std::string::size_type v30 = v21 - v7;
  std::string::basic_string(&v44, v9, v8, v21 - v7 - 1, (std::allocator<char> *)&__p);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v44.__r_.__value_.__l.__size_)
    {
      BOOL v31 = *a1;
      std::string::size_type v32 = *a2;
      sub_216778F24(&__p, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
LABEL_57:
      std::string::size_type v46 = v32;
      uint64_t v47 = v21 - v7;
      sub_2168860A0((uint64_t *)&v31[1], (long long *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v33 = SHIBYTE(v44.__r_.__value_.__r.__words[2]);
      *a2 += v30;
      if ((v33 & 0x80000000) == 0) {
        return 1;
      }
      goto LABEL_92;
    }
    *a2 += v30;
LABEL_92:
    operator delete(v44.__r_.__value_.__l.__data_);
    return 1;
  }
  if (*((unsigned char *)&v44.__r_.__value_.__s + 23))
  {
    BOOL v31 = *a1;
    std::string::size_type v32 = *a2;
    std::string __p = v44;
    goto LABEL_57;
  }
  uint64_t v17 = *a2 + v30;
LABEL_21:
  *a2 = v17;
  return 1;
}

void sub_216886038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168860A0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666) {
      sub_21677CB10();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      char v14 = (char *)sub_2168720A4(result, v13);
    }
    else {
      char v14 = 0;
    }
    char v15 = &v14[40 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[40 * v13];
    long long v16 = *a2;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v15 = v16;
    *((void *)a2 + sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_OWORD *)(v15 + 24) = *(long long *)((char *)a2 + 24);
    v17[2] = v15 + 40;
    sub_2168865FC(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = sub_2168867A0((uint64_t)v17);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_OWORD *)(v7 + 24) = *(long long *)((char *)a2 + 24);
    uint64_t v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_2168861D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168867A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168861EC(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      char v14 = (char *)sub_216782ED8(result, v13);
    }
    else {
      char v14 = 0;
    }
    char v15 = &v14[24 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[24 * v13];
    long long v16 = *a2;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v15 = v16;
    *((void *)a2 + sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    v17[2] = v15 + 24;
    sub_216790CCC(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = sub_216790E64((uint64_t)v17);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v9 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void sub_216886314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216886328(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_21688637C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_21688637C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

void *sub_2168863CC(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  *char v4 = &unk_26C74C258;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21688642C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_2168864C4((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216886450(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216886478(uint64_t a1)
{
}

uint64_t sub_216886480(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74C2A8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2168864C4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (void **)(a2 + 56);
    sub_216782F20(&v3);
    uint64_t v3 = (void **)(a2 + 24);
    sub_216886328(&v3);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    operator delete((void *)a2);
  }
}

_OWORD *sub_21688652C(uint64_t **a1, const void **a2, uint64_t a3)
{
  unint64_t v5 = (void **)sub_21677B220((uint64_t)a1, &v11, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    _OWORD v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v6 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    char v10 = 1;
    sub_21677B358(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    sub_21677B548((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_2168865FC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216886674((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216886674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + sub_216850320((uint64_t)&word_267B8E45F + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 40) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      uint64_t v7 = *((void *)&v14 + 1) - 40;
      *((void *)&v14 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216886720((uint64_t)v11);
  return v9;
}

uint64_t sub_216886720(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216886758(a1);
  }
  return a1;
}

void sub_216886758(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 40;
  }
}

uint64_t sub_2168867A0(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2168867D8(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 5;
      *(void *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_216886830(std::string *this, uint64_t a2, std::string::value_type *a3, std::string::value_type *a4, std::string::size_type __n_add)
{
  uint64_t v6 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  std::string::size_type v7 = a2 - (void)this;
  if (!__n_add) {
    return (uint64_t)v6 + v7;
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  uint64_t v9 = this;
LABEL_6:
  if (v9 <= (std::string *)a3 && (char *)&v9->__r_.__value_.__l.__data_ + size + 1 > a3)
  {
    sub_216886A7C(&__p, a3, a4);
    std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = sub_216886960(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v12;
  }

  return sub_216886960(this, __n_add, v7, a3, a4);
}

void sub_216886944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216886960(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  uint64_t v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = 22;
    uint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  uint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    v9->__r_.__value_.__l.__size_ = v14;
  }
  else {
    *((unsigned char *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    char v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    uint64_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  return (uint64_t)v9 + __n_copy;
}

void sub_216886A7C(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    char v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_216886AD4(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_216886AF0(_Unwind_Exception *a1)
{
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x80000002174124FALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  uint64_t v2 = std::string::insert(&v14, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      uint64_t v9 = (char *)operator new(0x4000uLL, (std::align_val_t)0x80uLL);
      for (uint64_t i = 0; i != 0x4000; i += 128)
      {
        uint64_t v12 = &v9[i];
        *(_OWORD *)uint64_t v12 = 0uLL;
        *((_OWORD *)v12 + sub_216850320((uint64_t)&word_267B8E45F + 1) = 0uLL;
        *((_DWORD *)v12 + 8) = 1065353216;
        *((_DWORD *)v12 + 10) = 32;
        v12[44] = 0;
      }
      unint64_t v13 = atomic_load(a1);
      if (v13)
      {
        if (v9 != (char *)v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v18 = 84;
          char v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegist"
                "ry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry]";
          char v20 = 0;
          int v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v10);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v18 = 88;
        char v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry"
              ">::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry]";
        char v20 = 0;
        int v21 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v10, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v5;
}

void sub_216886D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry"
            ">::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::DeleteInstance()
{
  for (unint64_t i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
        i;
        unint64_t i = v1)
  {
    unint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance, &v1, 0);
    if (v1 == i)
    {
      for (uint64_t j = 16256; j != -128; j -= 128)
        sub_21685ED7C(i + j);
      JUMPOUT(0x21D447F90);
    }
    uint64_t result = sched_yield();
  }
  return result;
}

void sub_216886E78()
{
  sub_21688767C();
  unint64_t v0 = sub_216887780();
  uint64_t v1 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v0);
  sub_216779094(__p, "vector<TfToken>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v1, (char *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216886EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(pxrInternal__aapl__pxrReserved__::TfToken *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E510, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E510))
  {
    qword_267B8E4F8 = 0;
    qword_267B8E500 = 0;
    qword_267B8E508 = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267B8E4F8, &dword_216758000);
    __cxa_guard_release(&qword_267B8E510);
  }
  return &qword_267B8E4F8;
}

unint64_t *pxrInternal__aapl__pxrReserved__::TfToken::TfToken(unint64_t *a1, long long *a2)
{
  uint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance();
  }
  *a1 = sub_216887884(v3, a2, 0);
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance();
  }
  *a1 = sub_216887884(v3, a2, 1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfToken *pxrInternal__aapl__pxrReserved__::TfToken::TfToken(pxrInternal__aapl__pxrReserved__::TfToken *this, char *a2)
{
  uint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance();
  }
  *(void *)this = sub_2168880C8(v3, a2, 0);
  return this;
}

unint64_t *pxrInternal__aapl__pxrReserved__::TfToken::TfToken(unint64_t *a1, char *a2)
{
  uint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance();
  }
  *a1 = sub_2168880C8(v3, a2, 1);
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfToken::Find@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  uint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance();
  }
  unint64_t result = sub_2168883E0(v4, a1);
  *a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::operator==(pxrInternal__aapl__pxrReserved__::TfToken *a1, unsigned __int8 *a2)
{
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v3 = (uint64_t *)((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    uint64_t v3 = &qword_267B8E4F8;
  }
  uint64_t v4 = *((unsigned __int8 *)v3 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    uint64_t v5 = v3[1];
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 >= 0) {
    long long v8 = a2;
  }
  else {
    long long v8 = *(unsigned __int8 **)a2;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp((const void *)*v3, v8, v3[1]) == 0;
  }
  if (!*((unsigned char *)v3 + 23)) {
    return 1;
  }
  uint64_t v9 = v4 - 1;
  do
  {
    int v11 = *(unsigned __int8 *)v3;
    uint64_t v3 = (uint64_t *)((char *)v3 + 1);
    int v10 = v11;
    int v13 = *v8++;
    int v12 = v13;
    BOOL v15 = v9-- != 0;
    uint64_t result = v10 == v12;
  }
  while (v10 == v12 && v15);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TfToken::operator==(pxrInternal__aapl__pxrReserved__::TfToken *a1, char *__s)
{
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v3 = (uint64_t *)((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    uint64_t v3 = &qword_267B8E4F8;
  }
  size_t v4 = strlen(__s);
  if (*((char *)v3 + 23) < 0)
  {
    if (v4 == v3[1])
    {
      if (v4 == -1) {
        goto LABEL_13;
      }
      uint64_t v3 = (uint64_t *)*v3;
      return memcmp(v3, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)v3 + 23))
  {
    if (v4 == -1) {
LABEL_13:
    }
      sub_216855AD4();
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::TfToTokenVector@<X0>(long long **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)*a1) >> 3);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_2168898F0(a2, v2, v3, v4);
}

std::string *pxrInternal__aapl__pxrReserved__::TfToStringVector@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (std::string *)sub_216782DE0(a2, (a1[1] - *a1) >> 3);
  uint64_t v5 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      unint64_t v8 = *(void *)(v5 + 8 * v7) & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        uint64_t v9 = (const std::string *)(v8 + 16);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v9 = (const std::string *)&qword_267B8E4F8;
      }
      uint64_t result = std::string::operator=((std::string *)(*a2 + v6), v9);
      ++v7;
      uint64_t v5 = *a1;
      v6 += 24;
    }
    while (v7 != (a1[1] - *a1) >> 3);
  }
  return result;
}

void sub_216887390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, void *a2)
{
  unint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (v3)
  {
    unint64_t v4 = (const char *)(v3 + 16);
    if (*(char *)(v3 + 39) < 0) {
      unint64_t v4 = *(const char **)v4;
    }
  }
  else
  {
    unint64_t v4 = "";
  }
  size_t v5 = strlen(v4);

  return sub_216779180(a1, (uint64_t)v4, v5);
}

{
  long long *v4;
  long long v5;
  long long *v6;
  long long v7;
  long long v9;
  long long v10;
  void *v11;
  void *v12;

  sub_216779180(a1, (uint64_t)"[", 1);
  int v11 = (void *)*a2;
  int v12 = a2 + 1;
  if (v11 != a2 + 1)
  {
    unint64_t v4 = (long long *)sub_2168A5778(&v11);
    size_t v5 = v4[1];
    uint64_t v9 = *v4;
    int v10 = v5;
    pxrInternal__aapl__pxrReserved__::operator<<(a1, (uint64_t)&v9);
    sub_2168A5808(&v11);
    while (v11 != v12)
    {
      sub_216779180(a1, (uint64_t)", ", 2);
      uint64_t v6 = (long long *)sub_2168A5778(&v11);
      uint64_t v7 = v6[1];
      uint64_t v9 = *v6;
      int v10 = v7;
      pxrInternal__aapl__pxrReserved__::operator<<(a1, (uint64_t)&v9);
      sub_2168A5808(&v11);
    }
  }
  sub_216779180(a1, (uint64_t)"]", 1);
  return a1;
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  float v9[3];
  char v10;

  LOBYTE(v9[0]) = 91;
  unint64_t v3 = sub_216779180(a1, (uint64_t)v9, 1);
  *(void *)uint64_t v9 = *a2;
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, v9);
  size_t v5 = sub_216779180(v4, (uint64_t)"...", 3);
  unint64_t v8 = a2[1];
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, (float *)&v8);
  int v10 = 93;
  return sub_216779180(v6, (uint64_t)&v10, 1);
}

{
  void *v4;
  atomic_uint *v5;
  atomic_uint *v6;
  void *v7;
  void *v8;
  atomic_uint *v9;
  atomic_uint *v10;
  void *v11;
  void *v12;
  atomic_uint *v13;
  atomic_uint *v14;
  void *v15;
  void *v16;
  atomic_uint *v17;
  atomic_uint *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  atomic_uint *v26;
  atomic_uint *v27;
  atomic_uint *v28;
  atomic_uint *v29;
  uint64_t v30;

  unint64_t v4 = sub_216779180(a1, (uint64_t)"(", 1);
  size_t v5 = (atomic_uint *)*a2;
  uint64_t v29 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v29 = v6;
    }
  }
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::operator<<(v4, &v29);
  unint64_t v8 = sub_216779180(v7, (uint64_t)", ", 2);
  uint64_t v9 = (atomic_uint *)a2[1];
  std::string::size_type v28 = v9;
  if ((v9 & 7) != 0)
  {
    int v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      std::string::size_type v28 = v10;
    }
  }
  int v11 = pxrInternal__aapl__pxrReserved__::operator<<(v8, &v28);
  int v12 = sub_216779180(v11, (uint64_t)", ", 2);
  int v13 = (atomic_uint *)a2[2];
  unint64_t v27 = v13;
  if ((v13 & 7) != 0)
  {
    std::string v14 = (atomic_uint *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v14, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v27 = v14;
    }
  }
  BOOL v15 = pxrInternal__aapl__pxrReserved__::operator<<(v12, &v27);
  int v16 = sub_216779180(v15, (uint64_t)", ", 2);
  uint64_t v17 = (atomic_uint *)a2[3];
  std::string::size_type v26 = v17;
  if ((v17 & 7) != 0)
  {
    uint64_t v18 = (atomic_uint *)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v18, 2u, memory_order_relaxed) & 1) == 0) {
      std::string::size_type v26 = v18;
    }
  }
  char v19 = pxrInternal__aapl__pxrReserved__::operator<<(v16, &v26);
  char v20 = sub_216779180(v19, (uint64_t)", (", 3);
  std::string::size_type v30 = a2[8];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v20, a2 + 4, (uint64_t)&v30, (void (*)(uint64_t, void *))sub_216908154);
  int v21 = sub_216779180(v20, (uint64_t)"), (", 4);
  std::string::size_type v30 = a2[13];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v21, a2 + 9, (uint64_t)&v30, (void (*)(uint64_t, void *))sub_216908154);
  std::string::size_type v22 = sub_216779180(v21, (uint64_t)"), (", 4);
  std::string::size_type v30 = a2[18];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v22, a2 + 14, (uint64_t)&v30, (void (*)(uint64_t, void *))sub_2168F8DA8);
  int v23 = sub_216779180(v22, (uint64_t)"), (", 4);
  std::string::size_type v30 = a2[23];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v23, a2 + 19, (uint64_t)&v30, (void (*)(uint64_t, void *))sub_216908154);
  unint64_t v24 = sub_216779180(v23, (uint64_t)"), (", 4);
  std::string::size_type v30 = a2[28];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v24, a2 + 24, (uint64_t)&v30, (void (*)(uint64_t, void *))sub_2168F8DA8);
  sub_216779180(v24, (uint64_t)"))", 2);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;

  unint64_t v4 = sub_216779180(a1, (uint64_t)"RenderPassAovBinding: {", 23);
  size_t v5 = pxrInternal__aapl__pxrReserved__::operator<<(v4, a2);
  sub_216779180(v5, (uint64_t)", ", 2);
  uint64_t v6 = (void *)std::ostream::operator<<();
  uint64_t v7 = sub_216779180(v6, (uint64_t)", ", 2);
  unint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2));
  uint64_t v9 = sub_216779180(v8, (uint64_t)", ", 2);
  int v10 = (void *)pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v9, (uint64_t)(a2 + 3));
  int v11 = sub_216779180(v10, (uint64_t)", ", 2);
  sub_216779180(v11, (uint64_t)"aovSettings: { ", 15);
  for (unint64_t i = (void *)a2[7]; i; unint64_t i = (void *)*i)
  {
    int v13 = pxrInternal__aapl__pxrReserved__::operator<<(a1, i + 2);
    std::string v14 = sub_216779180(v13, (uint64_t)": ", 2);
    BOOL v15 = (void *)pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v14, (uint64_t)(i + 3));
    sub_216779180(v15, (uint64_t)", ", 2);
  }
  sub_216779180(a1, (uint64_t)"}}", 2);
  return a1;
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  unint64_t v3 = pxrInternal__aapl__pxrReserved__::operator<<(a1, a2);
  unint64_t v4 = sub_216779180(v3, (uint64_t)", ", 2);
  size_t v5 = pxrInternal__aapl__pxrReserved__::operator<<(v4, a2 + 1);
  uint64_t v6 = sub_216779180(v5, (uint64_t)", ", 2);

  return pxrInternal__aapl__pxrReserved__::operator<<(v6, a2 + 2);
}

{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  unint64_t v4 = sub_216779180(a1, (uint64_t)"name: ", 6);
  size_t v5 = pxrInternal__aapl__pxrReserved__::operator<<(v4, a2 + 1);
  uint64_t v6 = sub_216779180(v5, (uint64_t)", repr sel: ", 12);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::operator<<(v6, a2 + 2);
  unint64_t v8 = sub_216779180(v7, (uint64_t)", mat tag: ", 11);
  pxrInternal__aapl__pxrReserved__::operator<<(v8, a2 + 6);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *__p[2];
  unsigned __int8 v17;

  size_t v5 = a2[5];
  unint64_t v4 = a2[6];
  sub_216779180(a1, (uint64_t)"Buffer Source:\n", 15);
  uint64_t v6 = sub_216779180(a1, (uint64_t)"    Name:      ", 15);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::operator<<(v6, a2 + 2);
  sub_216779180(v7, (uint64_t)"\n", 1);
  sub_216779180(a1, (uint64_t)"    Size:      ", 15);
  pxrInternal__aapl__pxrReserved__::HdDataSizeOfTupleType(v5, v4);
  unint64_t v8 = (void *)std::ostream::operator<<();
  sub_216779180(v8, (uint64_t)"\n", 1);
  uint64_t v9 = sub_216779180(a1, (uint64_t)"    Type:      ", 15);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C77C110, v5, (uint64_t)__p);
  if ((v17 & 0x80u) == 0) {
    int v10 = __p;
  }
  else {
    int v10 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    int v11 = v17;
  }
  else {
    int v11 = (uint64_t)__p[1];
  }
  int v12 = sub_216779180(v9, (uint64_t)v10, v11);
  sub_216779180(v12, (uint64_t)"\n", 1);
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  sub_216779180(a1, (uint64_t)"    Count:     ", 15);
  int v13 = (void *)std::ostream::operator<<();
  sub_216779180(v13, (uint64_t)"\n", 1);
  sub_216779180(a1, (uint64_t)"    Num elems: ", 15);
  std::string v14 = (void *)std::ostream::operator<<();
  sub_216779180(v14, (uint64_t)"\n", 1);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfDumpTokenStats(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t v1 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_instance);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TokenRegistry>::_CreateInstance();
  }

  sub_216887454(v1);
}

void sub_216887454(uint64_t a1)
{
  uint64_t v2 = 0;
  __p[0] = 0;
  __p[1] = 0;
  std::string::size_type v26 = 0;
  do
  {
    uint64_t v3 = a1 + (v2 << 7);
    sub_21685036C((uint64_t)&i, v3 + 44);
    uint64_t v4 = *(void *)(v3 + 24);
    size_t v5 = (char *)__p[1];
    if (__p[1] >= v26)
    {
      uint64_t v7 = (char *)__p[0];
      int64_t v8 = ((char *)__p[1] - (char *)__p[0]) >> 4;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 60) {
        sub_21677CB10();
      }
      uint64_t v10 = v26 - (char *)__p[0];
      if ((v26 - (char *)__p[0]) >> 3 > v9) {
        unint64_t v9 = v10 >> 3;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        int v12 = (char *)sub_216787EE0((uint64_t)&v26, v11);
        uint64_t v7 = (char *)__p[0];
        size_t v5 = (char *)__p[1];
      }
      else
      {
        int v12 = 0;
      }
      int v13 = &v12[16 * v8];
      *(void *)int v13 = v4;
      *((void *)v13 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v2;
      std::string v14 = v13;
      if (v5 != v7)
      {
        do
        {
          *((_OWORD *)v14 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((_OWORD *)v5 - 1);
          v14 -= 16;
          v5 -= 16;
        }
        while (v5 != v7);
        uint64_t v7 = (char *)__p[0];
      }
      uint64_t v6 = v13 + 16;
      __p[0] = v14;
      __p[1] = v13 + 16;
      std::string::size_type v26 = &v12[16 * v11];
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      *(void *)__p[1] = v4;
      *((void *)v5 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v2;
      uint64_t v6 = v5 + 16;
    }
    __p[1] = v6;
    BOOL v15 = (unsigned char *)i;
    if ((void)i)
    {
      __dmb(0xBu);
      *BOOL v15 = 0;
    }
    ++v2;
  }
  while (v2 != 128);
  unint64_t v16 = 126 - 2 * __clz(((char *)__p[1] - (char *)__p[0]) >> 4);
  if (__p[1] == __p[0]) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16;
  }
  sub_216888718((uint64_t)__p[0], (unint64_t *)__p[1], (uint64_t)&i, v17, 1);
  puts("Set # -- Size");
  for (long long i = *(_OWORD *)__p; (void)i != *((void *)&i + 1); sub_216888698(&i))
  {
    uint64_t v20 = *(void *)(*sub_21688861C(&i, v18, v19) + 8);
    int v23 = sub_21688861C(&i, v21, v22);
    printf("%zu -- %zu\n", v20, *(void *)*v23);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_21688763C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21688767C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  size_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C2C0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C2C0, (char *)8, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688773C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216887780()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  size_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C2D0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C2D0, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216887840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

unint64_t sub_216887884(uint64_t a1, long long *a2, int a3)
{
  uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (!v3) {
    return 0;
  }
  uint64_t v8 = *(unsigned char **)a2;
  if (v4 >= 0) {
    uint64_t v8 = a2;
  }
  char v9 = *v8;
  if (*v8)
  {
    char v10 = 0;
    unint64_t v11 = v8 + 1;
    do
    {
      char v10 = v9 - v10 + 8 * v10;
      int v12 = *v11++;
      char v9 = v12;
    }
    while (v12);
    uint64_t v13 = v10 & 0x7F;
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v15 = a1 + (v13 << 7);
  sub_21685036C((uint64_t)&v51, v15 + 44);
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v16 = (void **)a2;
  }
  else {
    uint64_t v16 = *(void ***)a2;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v49 = 0;
  uint64_t v50 = v16;
  uint64_t v17 = sub_216887BF4((void *)(a1 + (v13 << 7)), (uint64_t)v45);
  char v19 = v17;
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__p[0]);
    if (v19) {
      goto LABEL_17;
    }
LABEL_20:
    uint64_t v22 = a1 + (v13 << 7);
    int v25 = *(_DWORD *)(v22 + 40);
    unint64_t v24 = (_DWORD *)(v22 + 40);
    int v23 = v25;
    if (v25)
    {
      LODWORD(v26) = v23 - 1;
    }
    else
    {
      unint64_t v27 = *(void *)(v15 + 8);
      float v28 = (float)v27;
      float v29 = *(float *)(v15 + 32);
      if ((float)((float)(unint64_t)(*(void *)(v15 + 24) + 1) / (float)v27) <= v29) {
        goto LABEL_38;
      }
      uint64_t v30 = *(void *)(v15 + 16);
      if (v30)
      {
        do
        {
          unsigned int v31 = atomic_load((unsigned int *)(v30 + 16));
          uint64_t v32 = *(void *)v30;
          if (v31 == 1) {
            sub_2168605C0((void *)v15, (uint64_t *)v30);
          }
          uint64_t v30 = v32;
        }
        while (v32);
        unint64_t v27 = *(void *)(v15 + 8);
        float v29 = *(float *)(v15 + 32);
        float v28 = (float)v27;
      }
      if (v27) {
        float v33 = (float)*(unint64_t *)(v15 + 24) / v28;
      }
      else {
        float v33 = 0.0;
      }
      unint64_t v26 = (unint64_t)(float)((float)(v29 - v33) * v28);
      if (v26 <= 0x20) {
        LODWORD(v26) = 32;
      }
    }
    *unint64_t v24 = v26;
LABEL_38:
    unsigned __int8 v34 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
    if (v34)
    {
      unint64_t v35 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("TfToken", 0, v18);
      BOOL v36 = v35 != 0;
    }
    else
    {
      unint64_t v35 = 0;
      BOOL v36 = 0;
    }
    uint64_t v37 = 0;
    int v38 = *((char *)a2 + 23);
    if (v38 >= 0) {
      uint64_t v39 = a2;
    }
    else {
      uint64_t v39 = *(unsigned char **)a2;
    }
    for (uint64_t i = 56; i != -8; i -= 8)
    {
      v37 |= (uint64_t)(char)*v39 << i;
      if (*v39) {
        ++v39;
      }
    }
    if (v38 < 0)
    {
      sub_216778F24(&__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long __dst = *a2;
      uint64_t v53 = *((void *)a2 + 2);
    }
    int v46 = v13;
    uint64_t v47 = v37;
    std::string::size_type v41 = __p;
    uint64_t v49 = v53;
    *(_OWORD *)std::string __p = __dst;
    if (v53 < 0) {
      std::string::size_type v41 = (void **)__dst;
    }
    uint64_t v50 = v41;
    unint64_t v42 = (unint64_t)(sub_216887D08(v15, (uint64_t)v45, (uint64_t)v45) + 2);
    if (SHIBYTE(v49) < 0) {
      operator delete(__p[0]);
    }
    if (a3) {
      int v43 = 0;
    }
    else {
      int v43 = 3;
    }
    *(_DWORD *)unint64_t v42 = v43;
    if (v36) {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v35);
    }
    unint64_t result = v42 | a3 ^ 1u;
    goto LABEL_61;
  }
  if (!v17) {
    goto LABEL_20;
  }
LABEL_17:
  uint64_t v20 = (atomic_uint *)(v19 + 2);
  if (v19[2])
  {
    if (a3)
    {
      uint64_t v21 = 0;
      atomic_fetch_and_explicit(v20, 0xFFFFFFFE, memory_order_relaxed);
    }
    else
    {
      atomic_fetch_add_explicit(v20, 2u, memory_order_relaxed);
      uint64_t v21 = 1;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  unint64_t result = v21 | (unint64_t)v20;
LABEL_61:
  std::string v44 = v51;
  if (v51)
  {
    __dmb(0xBu);
    unsigned char *v44 = 0;
  }
  return result;
}

void sub_216887B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, unsigned char *a20)
{
  sub_21684E6B8((uint64_t)&a9);
  uint64_t v21 = a20;
  if (a20)
  {
    __dmb(0xBu);
    *uint64_t v21 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_216887BF4(void *a1, uint64_t a2)
{
  uint64_t v2 = *(const char **)(a2 + 40);
  char v3 = *v2;
  if (*v2)
  {
    LODWORD(v4) = 0;
    size_t v5 = (unsigned __int8 *)(v2 + 1);
    do
    {
      unint64_t v4 = (5 * v4 + v3);
      int v6 = *v5++;
      char v3 = v6;
    }
    while (v6);
  }
  else
  {
    unint64_t v4 = 0;
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v4;
    if (v4 >= *(void *)&v7) {
      unint64_t v10 = v4 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (v7.i32[0] - 1) & v4;
  }
  unint64_t v11 = *(uint64_t ****)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  for (uint64_t i = *v11; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v13 = (unint64_t)i[1];
    if (v13 == v4)
    {
      if (!strcmp((const char *)i[7], v2)) {
        return i;
      }
    }
    else
    {
      if (v9 > 1)
      {
        if (v13 >= *(void *)&v7) {
          v13 %= *(void *)&v7;
        }
      }
      else
      {
        v13 &= *(void *)&v7 - 1;
      }
      if (v13 != v10) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t **sub_216887D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(const char **)(a2 + 40);
  char v7 = *v6;
  if (*v6)
  {
    LODWORD(v8) = 0;
    unint64_t v9 = (unsigned __int8 *)(v6 + 1);
    do
    {
      unint64_t v8 = (5 * v8 + v7);
      int v10 = *v9++;
      char v7 = v10;
    }
    while (v10);
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v11) {
        unint64_t v3 = v8 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v8;
    }
    std::string v14 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v16 = (unint64_t)i[1];
        if (v16 == v8)
        {
          if (!strcmp((const char *)i[7], v6)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_216887F94(a1, v8, a3, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11) {
        unint64_t v3 = v8 % v11;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v8;
    }
  }
  int v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *int v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (uint64_t **)v26[0];
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216887F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_21678C278((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216887F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_216888020((uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216888004(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_21678C278(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216888020(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v4;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  size_t v5 = (_OWORD *)(a1 + 16);
  int v6 = (_OWORD *)(a2 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v7 = *v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    _OWORD *v5 = v7;
  }
  unint64_t v8 = *(_OWORD **)(a2 + 16);
  if (*(char *)(a2 + 39) >= 0) {
    unint64_t v8 = v6;
  }
  unint64_t v9 = *(_OWORD **)(a2 + 40);
  if (v8 == v9)
  {
    if (*(char *)(a1 + 39) < 0) {
      unint64_t v9 = *(_OWORD **)v5;
    }
    else {
      unint64_t v9 = v5;
    }
  }
  *(void *)(a1 + 40) = v9;
  return a1;
}

unint64_t sub_2168880C8(uint64_t a1, char *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  LOBYTE(v4) = *a2;
  if (!*a2) {
    return 0;
  }
  char v7 = 0;
  uint64_t v8 = 1;
  do
  {
    char v7 = v4 - v7 + 8 * v7;
    int v4 = a2[v8++];
  }
  while (v4);
  uint64_t v9 = v7 & 0x7F;
  uint64_t v10 = a1 + (v9 << 7);
  sub_21685036C((uint64_t)&v45, v10 + 44);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v43 = 0;
  std::string v44 = a2;
  unint64_t v11 = sub_216887BF4((void *)(a1 + (v9 << 7)), (uint64_t)v39);
  unint64_t v13 = v11;
  if (SHIBYTE(v43) < 0)
  {
    operator delete(__p[0]);
    if (v13) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v17 = a1 + (v9 << 7);
    int v20 = *(_DWORD *)(v17 + 40);
    BOOL v19 = (_DWORD *)(v17 + 40);
    int v18 = v20;
    if (v20)
    {
      LODWORD(v2sub_216850320((uint64_t)&word_267B8E45F + 1) = v18 - 1;
    }
    else
    {
      unint64_t v22 = *(void *)(v10 + 8);
      float v23 = (float)v22;
      float v24 = *(float *)(v10 + 32);
      if ((float)((float)(unint64_t)(*(void *)(v10 + 24) + 1) / (float)v22) <= v24) {
        goto LABEL_29;
      }
      uint64_t v25 = *(void *)(v10 + 16);
      if (v25)
      {
        do
        {
          unsigned int v26 = atomic_load((unsigned int *)(v25 + 16));
          uint64_t v27 = *(void *)v25;
          if (v26 == 1) {
            sub_2168605C0((void *)v10, (uint64_t *)v25);
          }
          uint64_t v25 = v27;
        }
        while (v27);
        unint64_t v22 = *(void *)(v10 + 8);
        float v24 = *(float *)(v10 + 32);
        float v23 = (float)v22;
      }
      if (v22) {
        float v28 = (float)*(unint64_t *)(v10 + 24) / v23;
      }
      else {
        float v28 = 0.0;
      }
      unint64_t v21 = (unint64_t)(float)((float)(v24 - v28) * v23);
      if (v21 <= 0x20) {
        LODWORD(v2sub_216850320((uint64_t)&word_267B8E45F + 1) = 32;
      }
    }
    *BOOL v19 = v21;
LABEL_29:
    unsigned __int8 v29 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
    if (v29)
    {
      uint64_t v30 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("TfToken", 0, v12);
      BOOL v31 = v30 != 0;
    }
    else
    {
      uint64_t v30 = 0;
      BOOL v31 = 0;
    }
    uint64_t v32 = 0;
    uint64_t v33 = 56;
    unsigned __int8 v34 = a2;
    do
    {
      v32 |= (uint64_t)*v34 << v33;
      if (*v34) {
        ++v34;
      }
      v33 -= 8;
    }
    while (v33 != -8);
    sub_216779094(&v46, a2);
    int v40 = v9;
    uint64_t v41 = v32;
    unint64_t v35 = __p;
    uint64_t v43 = v47;
    *(_OWORD *)std::string __p = v46;
    if (v47 < 0) {
      unint64_t v35 = (void **)v46;
    }
    std::string v44 = v35;
    unint64_t v36 = (unint64_t)(sub_216887D08(v10, (uint64_t)v39, (uint64_t)v39) + 2);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (a3) {
      int v37 = 0;
    }
    else {
      int v37 = 3;
    }
    *(_DWORD *)unint64_t v36 = v37;
    if (v31) {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v30);
    }
    unint64_t result = v36 | a3 ^ 1u;
    goto LABEL_46;
  }
  if (!v11) {
    goto LABEL_11;
  }
LABEL_7:
  std::string v14 = (atomic_uint *)(v13 + 2);
  if (v13[2])
  {
    if (a3)
    {
      uint64_t v15 = 0;
      atomic_fetch_and_explicit(v14, 0xFFFFFFFE, memory_order_relaxed);
    }
    else
    {
      atomic_fetch_add_explicit(v14, 2u, memory_order_relaxed);
      uint64_t v15 = 1;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  unint64_t result = v15 | (unint64_t)v14;
LABEL_46:
  int v38 = v45;
  if (v45)
  {
    __dmb(0xBu);
    unsigned char *v38 = 0;
  }
  return result;
}

void sub_21688837C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,unsigned char *a21)
{
  if (a21)
  {
    __dmb(0xBu);
    *a21 = 0;
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2168883E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = a2[1];
  }
  if (!v2) {
    return 0;
  }
  size_t v5 = (unsigned char *)*a2;
  if (v3 >= 0) {
    size_t v5 = a2;
  }
  char v6 = *v5;
  if (*v5)
  {
    char v7 = 0;
    uint64_t v8 = v5 + 1;
    do
    {
      char v7 = v6 - v7 + 8 * v7;
      int v9 = *v8++;
      char v6 = v9;
    }
    while (v9);
    uint64_t v10 = v7 & 0x7F;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint8x8_t v12 = (void *)(a1 + (v10 << 7));
  sub_21685036C((uint64_t)&v22, (uint64_t)v12 + 44);
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v13 = a2;
  }
  else {
    unint64_t v13 = (uint64_t *)*a2;
  }
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  unint64_t v21 = v13;
  std::string v14 = sub_216888508(v12, (uint64_t)&v17);
  uint64_t v15 = v14;
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p);
    if (v15) {
      goto LABEL_17;
    }
  }
  else if (v14)
  {
LABEL_17:
    unint64_t result = atomic_fetch_add_explicit((atomic_uint *volatile)v15 + 4, 2u, memory_order_relaxed) & 1 | (unint64_t)(v15 + 2);
    goto LABEL_20;
  }
  unint64_t result = 0;
LABEL_20:
  unint64_t v16 = v22;
  if (v22)
  {
    __dmb(0xBu);
    unsigned char *v16 = 0;
  }
  return result;
}

void sub_2168884DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  int v18 = *(unsigned char **)(v16 - 32);
  if (v18)
  {
    __dmb(0xBu);
    unsigned char *v18 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_216888508(void *a1, uint64_t a2)
{
  uint64_t v2 = *(const char **)(a2 + 40);
  char v3 = *v2;
  if (*v2)
  {
    LODWORD(v4) = 0;
    size_t v5 = (unsigned __int8 *)(v2 + 1);
    do
    {
      unint64_t v4 = (5 * v4 + v3);
      int v6 = *v5++;
      char v3 = v6;
    }
    while (v6);
  }
  else
  {
    unint64_t v4 = 0;
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v4;
    if (v4 >= *(void *)&v7) {
      unint64_t v10 = v4 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (v7.i32[0] - 1) & v4;
  }
  unint64_t v11 = *(uint64_t ****)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  for (uint64_t i = *v11; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v13 = (unint64_t)i[1];
    if (v4 == v13)
    {
      if (!strcmp((const char *)i[7], v2)) {
        return i;
      }
    }
    else
    {
      if (v9 > 1)
      {
        if (v13 >= *(void *)&v7) {
          v13 %= *(void *)&v7;
        }
      }
      else
      {
        v13 &= *(void *)&v7 - 1;
      }
      if (v13 != v10) {
        return 0;
      }
    }
  }
  return i;
}

void *sub_21688861C(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::pair<unsigned long, unsigned long>>>"
            "::operator->() [T = std::vector<std::pair<unsigned long, unsigned long>>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216888698(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::pair<unsigned long, un"
            "signed long>>>::operator++() [T = std::vector<std::pair<unsigned long, unsigned long>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t sub_216888718(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (unint64_t *)result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v23 = *(a2 - 2);
          unint64_t v24 = *v11;
          if (v23 < *v11 || v24 >= v23 && *(a2 - 1) < v11[1])
          {
            *unint64_t v11 = v23;
            *(a2 - 2) = v24;
            unint64_t v25 = v11[1];
            v11[1] = *(a2 - 1);
            *(a2 - sub_216850320((uint64_t)&word_267B8E45F + 1) = v25;
          }
          break;
        case 3uLL:
          unint64_t result = sub_216888C84(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          unint64_t result = sub_216889284(v11, v11 + 2, v11 + 4, a2 - 2);
          break;
        case 5uLL:
          unint64_t result = sub_216889388(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)sub_2168894E0(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      sub_216888C84(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      sub_216888C84(v11 + 2, v17 - 2, a2 - 4);
      sub_216888C84(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      sub_216888C84(v17 - 2, v17, &v11[2 * v16 + 2]);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)uint64_t v17 = v18;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_216888C84(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_16;
      }
    }
    unint64_t v19 = *(v11 - 2);
    if (v19 >= *v11 && (*v11 < v19 || *(v11 - 1) >= v11[1]))
    {
      unint64_t result = (uint64_t)sub_216888DD8(v11, a2);
      unint64_t v11 = (unint64_t *)result;
      goto LABEL_21;
    }
LABEL_16:
    uint64_t v20 = sub_216888F1C(v11, a2);
    if ((v21 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v22 = sub_216889060(v11, v20);
    unint64_t v11 = v20 + 2;
    unint64_t result = sub_216889060(v20 + 2, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_19:
      unint64_t result = sub_216888718(v10, v20, a3, -v13, a5 & 1);
      unint64_t v11 = v20 + 2;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_216888B10(v11, a2);
  }
  else
  {
    return (uint64_t)sub_216888BE8(v11, a2);
  }
}

unint64_t *sub_216888B10(unint64_t *result, unint64_t *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  char v4 = result;
  do
  {
    char v5 = v4;
    char v4 = v2;
    unint64_t v6 = v5[2];
    unint64_t v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6) {
        goto LABEL_19;
      }
      unint64_t v8 = v5[3];
      if (v8 >= v5[1]) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v8 = v5[3];
    }
    void v5[2] = v7;
    v4[1] = v5[1];
    unint64_t v9 = result;
    if (v5 == result) {
      goto LABEL_18;
    }
    uint64_t v10 = v3;
    while (1)
    {
      unint64_t v11 = *(unint64_t *)((char *)result + v10 - 16);
      if (v6 >= v11) {
        break;
      }
      unint64_t v12 = *(unint64_t *)((char *)result + v10 - 8);
LABEL_12:
      v5 -= 2;
      uint64_t v13 = (unint64_t *)((char *)result + v10);
      unint64_t *v13 = v11;
      v13[1] = v12;
      v10 -= 16;
      if (!v10)
      {
        unint64_t v9 = result;
        goto LABEL_18;
      }
    }
    if (v11 >= v6)
    {
      unint64_t v9 = (unint64_t *)((char *)result + v10);
      unint64_t v12 = *(unint64_t *)((char *)result + v10 - 8);
      if (v8 >= v12) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }
    unint64_t v9 = v5;
LABEL_18:
    *unint64_t v9 = v6;
    v9[1] = v8;
LABEL_19:
    uint64_t v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

unint64_t *sub_216888BE8(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      for (uint64_t i = result + 1; ; i += 2)
      {
        char v4 = result;
        unint64_t result = v2;
        unint64_t v5 = v4[2];
        unint64_t v6 = *v4;
        if (v5 < *v4) {
          break;
        }
        if (v6 >= v5)
        {
          unint64_t v7 = v4[3];
          if (v7 < v4[1]) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 2;
        if (result + 2 == a2) {
          return result;
        }
      }
      unint64_t v7 = v4[3];
LABEL_6:
      for (uint64_t j = i; ; j -= 2)
      {
        unint64_t v9 = *j;
        j[1] = v6;
        j[2] = v9;
        unint64_t v6 = *(j - 3);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(j - 2))) {
          break;
        }
      }
      *(j - sub_216850320((uint64_t)&word_267B8E45F + 1) = v5;
      *uint64_t j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_216888C84(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    unint64_t v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1])) {
      return 0;
    }
    *a2 = v9;
    *a3 = v3;
    unint64_t v11 = (uint64_t *)(a2 + 1);
    unint64_t v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    unint64_t v12 = *a2;
    unint64_t v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1])) {
      return 1;
    }
    *a1 = v12;
    unint64_t v6 = (uint64_t *)(a1 + 1);
    *a2 = v13;
    uint64_t v8 = 2;
  }
  else
  {
    unint64_t v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      unint64_t v6 = (uint64_t *)(a1 + 1);
      *a3 = v4;
      unint64_t v7 = (uint64_t *)(a3 + 1);
      uint64_t v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      unint64_t v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      unint64_t v15 = *a3;
      unint64_t v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14)) {
        return 1;
      }
      *a2 = v15;
      *a3 = v16;
      unint64_t v7 = (uint64_t *)(a3 + 1);
      uint64_t v8 = 2;
      unint64_t v6 = (uint64_t *)(a2 + 1);
    }
    unint64_t v11 = v7;
  }
  uint64_t v17 = *v6;
  *unint64_t v6 = *v11;
  *unint64_t v11 = v17;
  return v8;
}

unint64_t *sub_216888DD8(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (uint64_t i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      unint64_t v7 = i[2];
      i += 2;
      unint64_t v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      unint64_t v8 = *(a2 - 2);
      unint64_t v4 = v8;
    }
  }
  if (i < a2)
  {
    unint64_t v9 = *i;
    unint64_t v10 = *a2;
    do
    {
      *uint64_t i = v10;
      *a2 = v9;
      unint64_t v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        unint64_t v12 = i[2];
        i += 2;
        unint64_t v9 = v12;
      }
      while (v2 >= v12 && (v9 < v2 || v3 >= i[1]));
      do
      {
        do
        {
          unint64_t v13 = *(a2 - 2);
          a2 -= 2;
          unint64_t v10 = v13;
        }
        while (v2 < v13);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *(i - sub_216850320((uint64_t)&word_267B8E45F + 1) = v3;
  return i;
}

unint64_t *sub_216888F1C(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  while (1)
  {
    unint64_t v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      unint64_t v8 = *(a2 - 2);
      a2 -= 2;
      unint64_t v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        unint64_t v10 = *(a2 - 2);
        a2 -= 2;
        unint64_t v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v3 < v9) {
          goto LABEL_19;
        }
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    unint64_t v13 = (unint64_t *)v6;
  }
  else
  {
    unint64_t v12 = *a2;
    unint64_t v13 = (unint64_t *)v6;
    unint64_t v14 = a2;
    do
    {
      unint64_t *v13 = v12;
      *unint64_t v14 = v5;
      unint64_t v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          unint64_t v16 = v13[2];
          v13 += 2;
          unint64_t v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && v13[1] < v4);
      do
      {
        unint64_t v17 = *(v14 - 2);
        v14 -= 2;
        unint64_t v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - sub_216850320((uint64_t)&word_267B8E45F + 1) = v4;
  return v13 - 2;
}

BOOL sub_216889060(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 2);
      unint64_t v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        unint64_t v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - sub_216850320((uint64_t)&word_267B8E45F + 1) = v8;
      }
      return result;
    case 3:
      sub_216888C84(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_216889284(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_216889388(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unint64_t v9 = a1 + 4;
      sub_216888C84(a1, a1 + 2, a1 + 4);
      unint64_t v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    unint64_t v13 = *v10;
    unint64_t v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13) {
        goto LABEL_23;
      }
      unint64_t v15 = v10[1];
      if (v15 >= v9[1]) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v15 = v10[1];
    }
    unint64_t *v10 = v14;
    v10[1] = v9[1];
    unint64_t v16 = a1;
    if (v9 == a1) {
      goto LABEL_22;
    }
    uint64_t v17 = v11;
    while (1)
    {
      long long v18 = (char *)a1 + v17;
      unint64_t v19 = *(unint64_t *)((char *)a1 + v17 + 16);
      if (v13 < v19)
      {
        unint64_t v20 = *((void *)v18 + 3);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        unint64_t v16 = v9;
        goto LABEL_22;
      }
      unint64_t v20 = *(unint64_t *)((char *)a1 + v17 + 24);
      if (v15 >= v20) {
        break;
      }
LABEL_18:
      v9 -= 2;
      *((void *)v18 + 4) = v19;
      *(unint64_t *)((char *)a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        unint64_t v16 = a1;
        goto LABEL_22;
      }
    }
    unint64_t v16 = (unint64_t *)((char *)a1 + v17 + 32);
LABEL_22:
    unint64_t *v16 = v13;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_23:
    unint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t sub_216889284(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = sub_216888C84(a1, a2, a3);
  unint64_t v9 = *a4;
  unint64_t v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    unint64_t v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unint64_t v12 = *a3;
    unint64_t v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      unint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      unint64_t v15 = *a2;
      unint64_t v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        unint64_t v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t sub_216889388(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = sub_216889284(a1, a2, a3, a4);
  unint64_t v11 = *a5;
  unint64_t v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    unint64_t v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    unint64_t v14 = *a4;
    unint64_t v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      unint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      unint64_t v17 = *a3;
      unint64_t v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        unint64_t v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        unint64_t v20 = *a2;
        unint64_t v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          unint64_t v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

unint64_t *sub_2168894E0(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        sub_21688965C((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = a2;
    if (a2 != a3)
    {
      unint64_t v14 = a2;
      do
      {
        unint64_t v15 = *v14;
        unint64_t v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *unint64_t v14 = v16;
          *a1 = v15;
          unint64_t v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          sub_21688965C((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v18 = (unint64_t)v8 >> 4;
      unint64_t v19 = a2 - 2;
      do
      {
        unint64_t v21 = *a1;
        unint64_t v20 = a1[1];
        unint64_t v22 = sub_2168897A8(a1, a4, v18);
        if (v19 == v22)
        {
          unint64_t *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          unint64_t *v22 = *v19;
          v22[1] = v19[1];
          *unint64_t v19 = v21;
          v19[1] = v20;
          sub_21688983C((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 4);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_21688965C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unint64_t v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(void *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v11 = *v8;
      unint64_t v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          unint64_t v13 = a4[1];
          if (v8[1] < v13) {
            return result;
          }
        }
        else
        {
          unint64_t v13 = a4[1];
        }
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            unint64_t v14 = (unint64_t *)(result + 16 * v7);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              unint64_t v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(void *)(result + 16 * v7 + 8) < v14[3])
              {
                v14 += 2;
                uint64_t v7 = v16;
              }
            }
            unint64_t v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13) {
              break;
            }
            *uint64_t v8 = v18;
            v8[1] = v14[1];
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_23;
            }
          }
        }
        unint64_t v14 = v8;
LABEL_23:
        *unint64_t v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unint64_t *sub_2168897A8(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    uint64_t v7 = v3 + 1;
    result += 2 * v3 + 2;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      unint64_t v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        uint64_t v3 = v9;
      }
    }
    *uint64_t v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_21688983C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unint64_t *)(result + 16 * (v4 >> 1));
    unint64_t v7 = *v6;
    unint64_t v8 = *(void *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7) {
        return result;
      }
      unint64_t v9 = *(void *)(a2 - 8);
      if (*(void *)(result + 16 * v5 + 8) >= v9) {
        return result;
      }
    }
    else
    {
      unint64_t v9 = *(void *)(a2 - 8);
    }
    *(void *)(a2 - 16) = v7;
    *(void *)(a2 - 8) = *(void *)(result + 16 * v5 + 8);
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v11 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        unint64_t v10 = (unint64_t *)(result + 16 * v5);
        unint64_t v12 = *v10;
        if (*v10 >= v8)
        {
          if (v8 < v12) {
            break;
          }
          unint64_t v13 = *(void *)(result + 16 * v5 + 8);
          if (v13 >= v9) {
            break;
          }
        }
        else
        {
          unint64_t v13 = v10[1];
        }
        *uint64_t v6 = v12;
        v6[1] = v13;
        uint64_t v6 = (unint64_t *)(result + 16 * v5);
        if (v11 <= 1) {
          goto LABEL_13;
        }
      }
    }
    unint64_t v10 = v6;
LABEL_13:
    unint64_t *v10 = v8;
    v10[1] = v9;
  }
  return result;
}

void *sub_2168898F0(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_21677CACC(result, a4);
    uint64_t result = (void *)sub_216889978((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216889958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216889A04(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216889978(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken((unint64_t *)(a4 + v7), v6);
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v7 += 8;
    }
    while (v6 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2168899D8(_Unwind_Exception *a1)
{
  for (; v2; v2 -= 8)
  {
    uint64_t v3 = *(void *)(v1 - 8 + v2);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  _Unwind_Resume(a1);
}

void sub_216889A04(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    unint64_t v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if ((v6 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      while (v3 != v2);
      unint64_t v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000021741279FLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  uint64_t v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry *)operator new(0xD0uLL);
      pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry::Tf_TypeRegistry(v5);
      unint64_t v7 = atomic_load(a1);
      if (v7)
      {
        if (v5 != (pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry *)v7)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          unint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistr"
                "y>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v6);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v5))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        unint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>"
              "::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v6, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry*> &)::isInitializing);
  }
  unint64_t v9 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v9;
}

void sub_216889C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::SetInstanceConstructed(unint64_t result)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance, result))
  {
    uint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::DeleteInstance()
{
  for (uint64_t i = (void **)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
        i;
        uint64_t i = v1)
  {
    uint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance, (unint64_t *)&v1, 0);
    if (v1 == i)
    {
      sub_216850298((uint64_t)(i + 18));
      sub_216850320((uint64_t)(i + 13));
      sub_21688EB40((uint64_t)(i + 8));
      sub_216850298((uint64_t)(i + 3));
      uint64_t v2 = *i;
      *uint64_t i = 0;
      if (v2) {
        operator delete[](v2);
      }
      operator delete(i);
      return;
    }
    sched_yield();
  }
}

pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry *pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry::Tf_TypeRegistry(pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry *this)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TfBigRWMutex::TfBigRWMutex(this);
  *(_OWORD *)((char *)v2 + 24) = 0u;
  *(_OWORD *)((char *)v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v3 = (uint64_t)v2 + 64;
  sub_2168910D0((uint64_t)v2 + 64);
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  char v4 = (unint64_t **)((char *)this + 184);
  *((unsigned char *)this + 200) = 0;
  sub_216779094(&__p, "TfType::_Root");
  *((void *)this + 24) = sub_21688A000((uint64_t)this, &__p);
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__p);
  }
  sub_216779094(&__p, "TfType::_Unknown");
  int v5 = (unint64_t *)sub_21688A000((uint64_t)this, &__p);
  *char v4 = v5;
  if (SHIBYTE(v11) < 0)
  {
    operator delete((void *)__p);
    int v5 = *v4;
  }
  *(void *)&long long __p = v5;
  atomic_store((unint64_t)qword_26C74C2E0, v5 + 5);
  v5[6] = 0;
  *((_WORD *)v5 + 120) = 0;
  sub_21688E368(v3, qword_26C74C2E0, &__p);
  atomic_store((unint64_t)pthread_self(), (unint64_t *)this + 2);
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance, (unint64_t)this))
  {
    *(void *)&long long __p = "tf/instantiateSingleton.h";
    *((void *)&__p + sub_216850320((uint64_t)&word_267B8E45F + 1) = "SetInstanceConstructed";
    uint64_t v11 = 56;
    std::string v12 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::"
          "SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry]";
    char v13 = 0;
    int v14 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v6);
  }
  sub_216891174();
  unint64_t v7 = sub_21688A084();
  *((unsigned char *)this + 200) = 1;
  uint64_t Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance((pxrInternal__aapl__pxrReserved__::TfRegistryManager *)v7);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_26C74C400);
  atomic_store(0, (unint64_t *)this + 2);
  return this;
}

void sub_216889F7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_216889FC4()
{
}

void *sub_21688A000(uint64_t a1, long long *a2)
{
  char v4 = operator new(0xF8uLL);
  sub_21688E2F0((uint64_t)v4, a2);
  uint64_t v6 = a2;
  *((void *)sub_21685FAEC(a1 + 24, (unsigned __int8 *)a2, (uint64_t)&unk_2174BFD90, &v6) + 5) = v4;
  return v4;
}

void sub_21688A070(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688A084()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216856744((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_21688A164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_21688A1B0(uint64_t a1)
{
  sub_216850298(a1 + 80);
  sub_216850320(a1 + 40);

  return sub_21688EB40(a1);
}

pxrInternal__aapl__pxrReserved__::TfType *pxrInternal__aapl__pxrReserved__::TfType::TfType(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  *(void *)this = *(void *)(v2 + 184);
  return this;
}

{
  unint64_t v2;

  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  *(void *)this = *(void *)(v2 + 184);
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetRoot(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  unint64_t v1 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  return *(void *)(v1 + 192);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalType(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return *(void *)this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::FindByName(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  int v5 = *(uint64_t **)(v4 + 192);

  return pxrInternal__aapl__pxrReserved__::TfType::FindDerivedByName(v5, a1, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::FindDerivedByName(uint64_t *a1, uint64_t a2, char *a3)
{
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  if (*a1 != *(void *)(v6 + 184))
  {
    unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v7) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
    }
    uint64_t v46 = *(void *)(v7 + 184);
    unint64_t v8 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
    }
    __p[0] = v8;
    LODWORD(__p[1]) = -1;
    sub_21686C510((uint64_t)__p, a2, a3);
    uint64_t v11 = *a1;
    std::string v12 = *(void **)(*a1 + 232);
    if (v12)
    {
      char v13 = sub_2168512B4(v12, (unsigned __int8 *)a2);
      if (v13)
      {
        uint64_t v3 = *((void *)v13 + 5);
        uint64_t v46 = v3;
        char v14 = 1;
        goto LABEL_20;
      }
      uint64_t v11 = *a1;
    }
    if (*(unsigned char *)(v11 + 152)
      && (uint64_t v16 = sub_2168512B4((void *)(v11 + 112), (unsigned __int8 *)a2)) != 0
      && *((void *)v16 + 5))
    {
      char v14 = 0;
      uint64_t v46 = *((void *)v16 + 5);
    }
    else
    {
      char v14 = 0;
    }
LABEL_20:
    sub_216869774((uint64_t)__p, v9, v10);
    if ((v14 & 1) == 0)
    {
      unint64_t v19 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
      if (!v19) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
      }
      if (v46 == *(void *)(v19 + 184))
      {
        unint64_t v20 = atomic_load(v8 + 2);
        if (v20)
        {
          pthread_t v21 = pthread_self();
          if (!v21 || v21 != (pthread_t)v20)
          {
            while (atomic_load(v8 + 2))
              sched_yield();
          }
        }
        __p[0] = v8;
        LODWORD(__p[1]) = -1;
        sub_21686C510((uint64_t)__p, v17, v18);
        unint64_t v23 = sub_2168512B4(v8 + 3, (unsigned __int8 *)a2);
        if (v23) {
          uint64_t v26 = *((void *)v23 + 5);
        }
        else {
          uint64_t v26 = 0;
        }
        sub_216869774((uint64_t)__p, v24, v25);
        if (v26)
        {
          uint64_t v46 = v26;
          if ((pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)&v46, *a1, v28) & 1) == 0)
          {
            unint64_t v29 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
            if (!v29) {
              pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
            }
            uint64_t v46 = *(void *)(v29 + 184);
          }
        }
        sub_216869774((uint64_t)__p, v27, v28);
      }
      unint64_t v30 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
      if (!v30) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
      }
      uint64_t v3 = v46;
      if (v46 == *(void *)(v30 + 184))
      {
        return *(void *)(v30 + 184);
      }
      else
      {
        std::string v44 = v8;
        int v45 = -1;
        sub_21686C480((uint64_t)&v44, v17, v18);
        uint64_t v32 = (uint64_t *)(*a1 + 232);
        uint64_t v31 = *v32;
        if (!*v32)
        {
          uint64_t v33 = operator new(0x28uLL);
          _OWORD *v33 = 0u;
          v33[1] = 0u;
          *((_DWORD *)v33 + 8) = 1065353216;
          sub_21678A04C((uint64_t)v33, 0);
          sub_21688A830(v32, (uint64_t)v33);
          uint64_t v31 = *(void *)(*a1 + 232);
        }
        if (*(char *)(a2 + 23) < 0)
        {
          sub_216778F24(v38, *(void **)a2, *(void *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)int v38 = *(_OWORD *)a2;
          uint64_t v39 = *(void *)(a2 + 16);
        }
        *(_OWORD *)long long __p = *(_OWORD *)v38;
        uint64_t v34 = v39;
        v38[0] = 0;
        v38[1] = 0;
        uint64_t v39 = 0;
        uint64_t v40 = v3;
        uint64_t v42 = v34;
        uint64_t v43 = v3;
        sub_21689127C(v31, (unsigned __int8 *)__p, (uint64_t)__p);
        if (SHIBYTE(v42) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v39) < 0) {
          operator delete(v38[0]);
        }
        sub_216869774((uint64_t)&v44, v35, v36);
      }
    }
    return v3;
  }
  unint64_t v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v15) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  return *(void *)(v15 + 184);
}

void sub_21688A610(_Unwind_Exception *a1, uint64_t a2, char *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetUnknownType(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  unint64_t v1 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  return *(void *)(v1 + 184);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::IsA(char *a1, uint64_t a2, char *a3)
{
  unint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  if (*(void *)(v5 + 184) == a2)
  {
    char v13 = "tf/type.cpp";
    char v14 = "IsA";
    uint64_t v15 = 808;
    uint64_t v16 = "BOOL pxrInternal__aapl__pxrReserved__::TfType::IsA(TfType) const";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((int)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"IsA() was given an Unknown base type.  This probably means the attempt to look up the base type failed.  (Note: to explicitly check if a type is unknown, use IsUnknown() instead.)");
    return 0;
  }
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  if (*(void *)a1 == *(void *)(v6 + 184)) {
    return 0;
  }
  if (*(void *)a1 == a2) {
    return 1;
  }
  unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  if (**(void **)(v7 + 192) == a2) {
    return 1;
  }
  unint64_t v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  char v13 = (char *)v8;
  LODWORD(v14) = -1;
  sub_21686C510((uint64_t)&v13, a2, a3);
  if (*(void *)(a2 + 80) == *(void *)(a2 + 88)) {
    IsAImplNoLocunsigned int k = 0;
  }
  else {
    IsAImplNoLocunsigned int k = pxrInternal__aapl__pxrReserved__::TfType::_IsAImplNoLock(a1, a2);
  }
  sub_216869774((uint64_t)&v13, v9, v10);
  return IsAImplNoLock;
}

void sub_21688A830(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    unint64_t v4 = (void *)sub_216850298(v3);
    operator delete(v4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2, char *a3)
{
  unint64_t v4 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v5 = atomic_load(v4 + 2);
  if (v5)
  {
    pthread_t v6 = pthread_self();
    if (!v6 || v6 != (pthread_t)v5)
    {
      while (atomic_load(v4 + 2))
        sched_yield();
    }
  }
  char v17 = v4;
  int v18 = -1;
  sub_21686C510((uint64_t)&v17, (uint64_t)a2, a3);
  __p[0] = this;
  unint64_t v8 = sub_2168503EC(v4 + 13, __p);
  if (v8)
  {
    uint64_t v11 = (uint64_t *)(v8[3] + 72);
    goto LABEL_11;
  }
  sub_216779094(__p, (char *)(*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFLL));
  char v14 = sub_2168512B4(v4 + 18, (unsigned __int8 *)__p);
  if (v14) {
    uint64_t v11 = (uint64_t *)(*((void *)v14 + 5) + 72);
  }
  else {
    uint64_t v11 = 0;
  }
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (v11)
    {
LABEL_18:
      sub_21688D7C8((uint64_t)&v17, v9, v10);
      sub_216779094(__p, (char *)(*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFLL));
      sub_21688E5D8((uint64_t)(v4 + 8), this, (unsigned __int8 *)__p);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
LABEL_11:
      uint64_t v12 = *v11;
      if (*v11) {
        goto LABEL_12;
      }
    }
  }
  else if (v11)
  {
    goto LABEL_18;
  }
  sub_216869774((uint64_t)&v17, v9, v10);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(this, (uint64_t)__p);
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::TfType::FindByName((uint64_t)__p, v15, v16);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
LABEL_12:
  sub_216869774((uint64_t)&v17, v9, v10);
  return v12;
}

void sub_21688A9EC(_Unwind_Exception *a1, uint64_t a2, char *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_216869774((uint64_t)&a10, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName@<X0>(pxrInternal__aapl__pxrReserved__::TfType *this@<X0>, uint64_t a2@<X8>)
{
  sub_216851EE4((uint64_t)&v28, "Tf", "TfType::GetCanonicalTypeName");
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E520, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E520))
  {
    unint64_t v19 = operator new(0x28uLL);
    *unint64_t v19 = 0u;
    v19[1] = 0u;
    *((_DWORD *)v19 + 8) = 1065353216;
    qword_267B8E518 = (uint64_t)v19;
    __cxa_guard_release(&qword_267B8E520);
  }
  unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v26 = v7;
  int v27 = -1;
  sub_21686C510((uint64_t)&v26, v5, v6);
  unint64_t v8 = (void *)qword_267B8E518;
  sub_216779094(__p, (char *)(*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFLL));
  uint64_t v9 = sub_216891C18(v8, (unsigned __int8 *)__p);
  uint64_t v12 = v9;
  if (v23 < 0)
  {
    operator delete(__p[0]);
    if (v12)
    {
LABEL_6:
      if ((char)v12[63] < 0)
      {
        sub_216778F24((unsigned char *)a2, *((void **)v12 + 5), *((void *)v12 + 6));
      }
      else
      {
        long long v13 = *(_OWORD *)(v12 + 40);
        *(void *)(a2 + 16) = *((void *)v12 + 7);
        *(_OWORD *)a2 = v13;
      }
      goto LABEL_19;
    }
  }
  else if (v9)
  {
    goto LABEL_6;
  }
  sub_21688D7C8((uint64_t)&v26, v10, v11);
  uint64_t v14 = qword_267B8E518;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v20);
  sub_216779094(__p, (char *)(*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFLL));
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v20;
  uint64_t v25 = v21;
  v20[1] = 0;
  uint64_t v21 = 0;
  v20[0] = 0;
  uint64_t v15 = sub_2168921D0(v14, (unsigned __int8 *)__p, (long long *)__p);
  if ((char)v15[63] < 0)
  {
    sub_216778F24((unsigned char *)a2, *((void **)v15 + 5), *((void *)v15 + 6));
  }
  else
  {
    long long v16 = *(_OWORD *)(v15 + 40);
    *(void *)(a2 + 16) = *((void *)v15 + 7);
    *(_OWORD *)a2 = v16;
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[0]);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
LABEL_19:
  for (uint64_t result = sub_216869774((uint64_t)&v26, v10, v11);
        v29--;
  return result;
}

void sub_21688AC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_guard_abort(&qword_267B8E520);
  sub_21684E6B8(v21 - 48);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return *(void *)this + 8;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfType::GetTypeid(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  unint64_t v1 = atomic_load((unint64_t *)(*(void *)this + 40));
  if (v1) {
    return v1;
  }
  else {
    return MEMORY[0x263F8C288];
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetAliases@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v13 = a2;
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v11 = v6;
  int v12 = -1;
  sub_21686C510((uint64_t)&v11, a2, a3);
  if (*(unsigned char *)(*(void *)a1 + 200) && (uint64_t v9 = sub_2168503EC((void *)(*(void *)a1 + 160), &v13)) != 0)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    sub_216812BD8((char *)a4, (long long *)v9[3], (long long *)v9[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[4] - v9[3]) >> 3));
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  return sub_216869774((uint64_t)&v11, v7, v8);
}

void sub_21688ADB4(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216869774((uint64_t)va, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetBaseTypes@<X0>(pxrInternal__aapl__pxrReserved__::TfType *this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v11 = v6;
  int v12 = -1;
  sub_21686C510((uint64_t)&v11, a2, a3);
  uint64_t v7 = *(void *)this;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_2168915D4(a4, *(const void **)(v7 + 56), *(void *)(v7 + 64), (uint64_t)(*(void *)(v7 + 64) - *(void *)(v7 + 56)) >> 3);
  return sub_216869774((uint64_t)&v11, v8, v9);
}

void sub_21688AE54(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t pxrInternal__aapl__pxrReserved__::TfType::GetNBaseTypes(pxrInternal__aapl__pxrReserved__::TfType *this, pxrInternal__aapl__pxrReserved__::TfType *a2, char *a3)
{
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v13 = v6;
  int v14 = -1;
  sub_21686C510((uint64_t)&v13, (uint64_t)a2, a3);
  uint64_t v8 = *(const void **)(*(void *)this + 56);
  uint64_t v9 = *(void *)(*(void *)this + 64);
  unint64_t v10 = (v9 - (uint64_t)v8) >> 3;
  if (v10 >= (unint64_t)a3) {
    uint64_t v11 = (uint64_t)a3;
  }
  else {
    uint64_t v11 = (v9 - (uint64_t)v8) >> 3;
  }
  if (v11) {
    memmove(a2, v8, 8 * v11);
  }
  sub_216869774((uint64_t)&v13, (uint64_t)v8, v7);
  return v10;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetDirectlyDerivedTypes@<X0>(pxrInternal__aapl__pxrReserved__::TfType *this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v11 = v6;
  int v12 = -1;
  sub_21686C510((uint64_t)&v11, a2, a3);
  uint64_t v7 = *(void *)this;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_2168915D4(a4, *(const void **)(v7 + 80), *(void *)(v7 + 88), (uint64_t)(*(void *)(v7 + 88) - *(void *)(v7 + 80)) >> 3);
  return sub_216869774((uint64_t)&v11, v8, v9);
}

void sub_21688AF94(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetAllDerivedTypes(uint64_t *a1, uint64_t **a2, char *a3)
{
  unint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v14 = v5;
  int v15 = -1;
  sub_21686C510((uint64_t)&v14, (uint64_t)a2, a3);
  uint64_t v6 = *a1;
  int v12 = 0;
  uint64_t v13 = 0;
  unint64_t v11 = 0;
  sub_2168915D4(&v11, *(const void **)(v6 + 80), *(void *)(v6 + 88), (uint64_t)(*(void *)(v6 + 88) - *(void *)(v6 + 80)) >> 3);
  while (1)
  {
    uint64_t v8 = (uint64_t)v12;
    if (v11 == v12) {
      break;
    }
    uint64_t v10 = *((void *)v12 - 1);
    v12 -= 8;
    sub_216891650((uint64_t)&v11, (uint64_t)v12, *(char **)(v10 + 80), *(char **)(v10 + 88), (uint64_t)(*(void *)(v10 + 88) - *(void *)(v10 + 80)) >> 3);
    sub_216856018(a2, (unint64_t *)&v10, &v10);
  }
  if (v11)
  {
    int v12 = v11;
    operator delete(v11);
  }
  return sub_216869774((uint64_t)&v14, v8, v7);
}

void sub_21688B080(_Unwind_Exception *a1, uint64_t a2, char *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes(pxrInternal__aapl__pxrReserved__::TfType *a1, void **a2, char *a3)
{
  unint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  if (*(void *)a1 == *(void *)(v5 + 184))
  {
    *(void *)&long long __p = "tf/type.cpp";
    *((void *)&__p + sub_216850320((uint64_t)&word_267B8E45F + 1) = "GetAllAncestorTypes";
    uint64_t v79 = 710;
    BOOL v80 = "void pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes(vector<TfType> *) const";
    char v81 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot ask for ancestor types of Unknown type");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfType::GetBaseTypes(a1, (uint64_t)a2, a3, v77);
    int64_t v6 = v77[1] - v77[0];
    if ((pxrInternal__aapl__pxrReserved__::TfType *)(v77[1] - v77[0]) > (pxrInternal__aapl__pxrReserved__::TfType *)0xF)
    {
      long long v75 = 0uLL;
      unint64_t v76 = 0;
      sub_21688B794((uint64_t *)&v75, (v6 >> 3) + 2);
      long long __p = 0uLL;
      uint64_t v79 = 0;
      sub_21688B848((uint64_t *)&v75, (uint64_t)&__p);
      if ((void)__p)
      {
        *((void *)&__p + sub_216850320((uint64_t)&word_267B8E45F + 1) = __p;
        operator delete((void *)__p);
      }
      uint64_t v10 = *((void *)&v75 + 1);
      unint64_t v11 = *(void **)(*((void *)&v75 + 1) - 16);
      unint64_t v12 = *(void *)(*((void *)&v75 + 1) - 8);
      if ((unint64_t)v11 >= v12)
      {
        unint64_t v19 = (void **)(*((void *)&v75 + 1) - 24);
        uint64_t v20 = *(void *)(*((void *)&v75 + 1) - 24);
        uint64_t v21 = ((uint64_t)v11 - v20) >> 3;
        if ((unint64_t)(v21 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v22 = v12 - v20;
        uint64_t v23 = v22 >> 2;
        if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
          uint64_t v23 = v21 + 1;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)sub_21677CB28(*((void *)&v75 + 1) - 8, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v31 = &v25[8 * v21];
        uint64_t v32 = &v25[8 * v24];
        *(void *)uint64_t v31 = *(void *)a1;
        uint64_t v13 = v31 + 8;
        uint64_t v34 = *(char **)(v10 - 24);
        uint64_t v33 = *(char **)(v10 - 16);
        if (v33 != v34)
        {
          do
          {
            uint64_t v35 = *((void *)v33 - 1);
            v33 -= 8;
            *((void *)v31 - sub_216850320((uint64_t)&word_267B8E45F + 1) = v35;
            v31 -= 8;
          }
          while (v33 != v34);
          uint64_t v33 = (char *)*v19;
        }
        *(void *)(v10 - 24) = v31;
        *(void *)(v10 - 16) = v13;
        *(void *)(v10 - 8) = v32;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *unint64_t v11 = *(void *)a1;
        uint64_t v13 = v11 + 1;
      }
      *(void *)(v10 - 16) = v13;
      unint64_t v36 = (void *)*((void *)&v75 + 1);
      if (*((void *)&v75 + 1) >= v76)
      {
        uint64_t v37 = sub_216891A7C((uint64_t *)&v75, (uint64_t)v77);
      }
      else
      {
        **((void **)&v75 + sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
        v36[1] = 0;
        v36[2] = 0;
        sub_2168915D4(v36, v77[0], (uint64_t)v77[1], (v77[1] - v77[0]) >> 3);
        uint64_t v37 = (uint64_t)(v36 + 3);
      }
      *((void *)&v75 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v37;
      v82[0] = *(_OWORD *)v77;
      while (*(void *)&v82[0] != *((void *)&v82[0] + 1))
      {
        long long __p = 0uLL;
        uint64_t v79 = 0;
        sub_21688B848((uint64_t *)&v75, (uint64_t)&__p);
        if ((void)__p)
        {
          *((void *)&__p + sub_216850320((uint64_t)&word_267B8E45F + 1) = __p;
          operator delete((void *)__p);
        }
        uint64_t v38 = *((void *)&v75 + 1);
        uint64_t v39 = sub_21688B988(v82);
        pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes(*v39, v38 - 24);
        sub_21688BA14(v82);
      }
      while (1)
      {
        unint64_t v40 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
        if (!v40) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
        }
        uint64_t v41 = *(void *)(v40 + 184);
        long long __p = v75;
        if ((void)v75 == *((void *)&v75 + 1))
        {
          char v42 = 0;
        }
        else
        {
          char v42 = 0;
          do
          {
            uint64_t v43 = sub_21688EBC0(&__p);
            if (*(void *)*v43 != *(void *)(*v43 + 8))
            {
              uint64_t v41 = **(void **)*sub_21688EBC0(&__p);
              uint64_t v45 = *((void *)&v75 + 1);
              uint64_t v44 = v75;
              v82[0] = v75;
              while (v44 != v45)
              {
                uint64_t v46 = sub_21688EBC0(v82);
                if (*(void *)(*v46 + 8) - *(void *)*v46 >= 0x10uLL)
                {
                  uint64_t v47 = *(void *)*sub_21688EBC0(v82);
                  unint64_t v48 = sub_21688EBC0(v82);
                  uint64_t v49 = (void *)(v47 + 8);
                  uint64_t v50 = *(void **)(*v48 + 8);
                  if (v49 != v50)
                  {
                    while (*v49 != v41)
                    {
                      if (++v49 == v50)
                      {
                        uint64_t v49 = *(void **)(*v48 + 8);
                        break;
                      }
                    }
                  }
                  if (v49 != *(void **)(*sub_21688EBC0(v82) + 8))
                  {
                    unint64_t v51 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
                    if (!v51) {
                      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
                    }
                    uint64_t v41 = *(void *)(v51 + 184);
                    break;
                  }
                }
                sub_21688EC4C(v82);
                uint64_t v45 = *((void *)&v82[0] + 1);
                uint64_t v44 = *(void *)&v82[0];
              }
              unint64_t v52 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
              if (!v52) {
                pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
              }
              char v42 = 1;
              if (v41 != *(void *)(v52 + 184)) {
                break;
              }
            }
            sub_21688EC4C(&__p);
          }
          while ((void)__p != *((void *)&__p + 1));
        }
        unint64_t v53 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
        if (!v53) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
        }
        if (v41 == *(void *)(v53 + 184)) {
          break;
        }
        std::string v55 = a2[1];
        unint64_t v54 = (unint64_t)a2[2];
        if ((unint64_t)v55 >= v54)
        {
          uint64_t v57 = ((char *)v55 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v57 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v58 = v54 - (void)*a2;
          uint64_t v59 = v58 >> 2;
          if (v58 >> 2 <= (unint64_t)(v57 + 1)) {
            uint64_t v59 = v57 + 1;
          }
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v60 = v59;
          }
          if (v60) {
            std::string v61 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v60);
          }
          else {
            std::string v61 = 0;
          }
          BOOL v62 = &v61[8 * v57];
          *(void *)BOOL v62 = v41;
          BOOL v56 = v62 + 8;
          BOOL v64 = (char *)*a2;
          char v63 = (char *)a2[1];
          if (v63 != *a2)
          {
            do
            {
              uint64_t v65 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v62 - sub_216850320((uint64_t)&word_267B8E45F + 1) = v65;
              v62 -= 8;
            }
            while (v63 != v64);
            char v63 = (char *)*a2;
          }
          *a2 = v62;
          a2[1] = v56;
          a2[2] = &v61[8 * v60];
          if (v63) {
            operator delete(v63);
          }
        }
        else
        {
          *std::string v55 = v41;
          BOOL v56 = v55 + 1;
        }
        a2[1] = v56;
        uint64_t v67 = *((void *)&v75 + 1);
        uint64_t v66 = v75;
        long long __p = v75;
        while (v66 != v67)
        {
          uint64_t v68 = sub_21688EBC0(&__p);
          if (*(void *)*v68 != *(void *)(*v68 + 8) && **(void **)*sub_21688EBC0(&__p) == v41)
          {
            uint64_t v69 = *sub_21688EBC0(&__p);
            char v70 = (void ***)sub_21688EBC0(&__p);
            unint64_t v71 = (char *)**v70;
            BOOL v72 = *(char **)(v69 + 8);
            int64_t v73 = v72 - (v71 + 8);
            if (v72 != v71 + 8) {
              memmove(**v70, v71 + 8, v72 - (v71 + 8));
            }
            *(void *)(v69 + 8) = &v71[v73];
          }
          sub_21688EC4C(&__p);
          uint64_t v67 = *((void *)&__p + 1);
          uint64_t v66 = __p;
        }
      }
      if (v42)
      {
        *(void *)&long long __p = "tf/type.cpp";
        *((void *)&__p + sub_216850320((uint64_t)&word_267B8E45F + 1) = "GetAllAncestorTypes";
        uint64_t v79 = 757;
        BOOL v80 = "void pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes(vector<TfType> *) const";
        char v81 = 0;
        BOOL v74 = (const char *)(*(void *)a1 + 8);
        if (*(char *)(*(void *)a1 + 31) < 0) {
          BOOL v74 = *(const char **)v74;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot resolve ancestor classes for '%s' because the inheritance hierarchy is inconsistent.  Please check that multiply-inherited types are inherited in the same order throughout the inherited hierarchy.", v74);
      }
      *(void *)&long long __p = &v75;
      sub_216873B88((void ***)&__p);
    }
    else
    {
      unint64_t v7 = (unint64_t)a2[2];
      uint64_t v8 = a2[1];
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v14 = ((char *)v8 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v15 = v7 - (void)*a2;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          int v18 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v17);
        }
        else {
          int v18 = 0;
        }
        unint64_t v26 = &v18[8 * v14];
        int v27 = &v18[8 * v17];
        *(void *)unint64_t v26 = *(void *)a1;
        uint64_t v9 = v26 + 8;
        int v29 = (char *)*a2;
        uint64_t v28 = (char *)a2[1];
        if (v28 != *a2)
        {
          do
          {
            uint64_t v30 = *((void *)v28 - 1);
            v28 -= 8;
            *((void *)v26 - sub_216850320((uint64_t)&word_267B8E45F + 1) = v30;
            v26 -= 8;
          }
          while (v28 != v29);
          uint64_t v28 = (char *)*a2;
        }
        *a2 = v26;
        a2[1] = v9;
        a2[2] = v27;
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *uint64_t v8 = *(void *)a1;
        uint64_t v9 = v8 + 1;
      }
      a2[1] = v9;
      if (v6 == 8) {
        pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes(v77[0], a2);
      }
    }
    if (v77[0])
    {
      v77[1] = v77[0];
      operator delete(v77[0]);
    }
  }
}

void sub_21688B718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  *(void *)(v17 - 88) = &a10;
  sub_216873B88((void ***)(v17 - 88));
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21688B794(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_216782ED8(result, a2);
    v7[1] = v7[0] + v5;
    _OWORD v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_216891928(a1, v7);
    return sub_216874044((uint64_t)v7);
  }
  return result;
}

void sub_21688B834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216874044((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21688B848(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)sub_216782ED8(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    uint64_t v16[3] = &v13[24 * v15];
    *((void *)v14 + sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_216891928(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = sub_216874044((uint64_t)v16);
  }
  else
  {
    *unint64_t v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    _OWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_21688B974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216874044((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21688B988(void *result)
{
  if (*result == result[1])
  {
    unint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fType>>::operator->() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TfType>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

void *sub_21688BA14(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfType>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TfType>, Reverse = false]";
    char v4 = 0;
    int v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_IsAImplNoLock(char *a1, uint64_t a2)
{
  do
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 == a2) {
      return 1;
    }
    a1 = *(char **)(v4 + 56);
    int v5 = *(char **)(v4 + 64);
  }
  while (v5 - a1 == 8);
  if (v5 == a1) {
    return 0;
  }
  uint64_t v6 = ((v5 - a1) >> 3) - 1;
  do
  {
    uint64_t v7 = v6;
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfType::_IsAImplNoLock(a1, a2);
    if (result) {
      break;
    }
    uint64_t v6 = v7 - 1;
    a1 += 8;
  }
  while (v7);
  return result;
}

unint64_t *pxrInternal__aapl__pxrReserved__::TfType::Declare(long long *a1)
{
  sub_216851EE4((uint64_t)&v16, "Tf", "TfType::Declare");
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v6 = *(unint64_t **)pxrInternal__aapl__pxrReserved__::TfType::FindDerivedByName(*(uint64_t **)(v3 + 192), (uint64_t)a1, v2);
  unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  if (*(unint64_t **)(v7 + 184) == v6)
  {
    uint64_t v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
    }
    uint64_t v14 = v8;
    int v15 = -1;
    sub_21686C480((uint64_t)&v14, v4, v5);
    uint64_t v6 = (unint64_t *)sub_21688A000(v8, a1);
    if (atomic_load(v6 + 5))
    {
      v18[0] = "tf/type.cpp";
      v18[1] = "Declare";
      v18[2] = 839;
      v18[3] = "static const TfType &pxrInternal__aapl__pxrReserved__::TfType::Declare(const string &)";
      char v19 = 0;
      int v20 = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v18, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v10, "!t._info->IsDefined()");
    }
    sub_216869774((uint64_t)&v14, v9, v10);
  }
  while (v17--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v16);
  return v6;
}

void sub_21688BC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfType::Declare(long long *a1, char **a2, uint64_t a3)
{
  sub_216851EE4((uint64_t)&v56, "Tf", "TfType::Declare");
  long long __p = "tf/type.cpp";
  uint64_t v50 = "Declare";
  uint64_t v51 = 850;
  unint64_t v52 = "static const TfType &pxrInternal__aapl__pxrReserved__::TfType::Declare(const string &, const vector<TfType> &, D"
        "efinitionCallback)";
  LOBYTE(v53) = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v55, a1, &__p);
  int v5 = pxrInternal__aapl__pxrReserved__::TfType::Declare(a1);
  uint64_t v8 = (uint64_t *)v5;
  unint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    while (*(void *)v10 != *v5)
    {
      v10 += 8;
      if (v10 == v9)
      {
        unint64_t v10 = a2[1];
        break;
      }
    }
  }
  if (v10 != v9)
  {
    long long __p = "tf/type.cpp";
    uint64_t v50 = "Declare";
    uint64_t v51 = 862;
    unint64_t v52 = "static const TfType &pxrInternal__aapl__pxrReserved__::TfType::Declare(const string &, const vector<TfType> &,"
          " DefinitionCallback)";
    LOBYTE(v53) = 0;
    int v54 = 4;
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v11 = (uint64_t *)a1;
    }
    else {
      unint64_t v11 = *(uint64_t **)a1;
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"TfType '%s' declares itself as a base.", v7, v11);
  }
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  unint64_t v48 = 0;
  unint64_t v12 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v44 = v12;
  int v45 = -1;
  sub_21686C480((uint64_t)&v44, v6, v7);
  unint64_t v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v15) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v16 = *(void *)(v15 + 184);
  if (*v8 == v16) {
    goto LABEL_26;
  }
  unint64_t v17 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v17) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v16 = *v8;
  if (*v8 == **(void **)(v17 + 192))
  {
LABEL_26:
    uint64_t v22 = (void *)(v16 + 8);
    if (*(char *)(v16 + 31) < 0) {
      uint64_t v22 = (void *)*v22;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot declare the type '%s'", v13, v14, v22);
    uint64_t v23 = v47;
    if ((unint64_t)v47 < v48) {
      goto LABEL_29;
    }
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v47 - v46);
    unint64_t v25 = v24 + 1;
    if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    if (0x5555555555555556 * ((uint64_t)(v48 - (void)v46) >> 3) > v25) {
      unint64_t v25 = 0x5555555555555556 * ((uint64_t)(v48 - (void)v46) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (void)v46) >> 3) >= 0x555555555555555) {
      unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v26 = v25;
    }
    unint64_t v53 = &v48;
    if (!v26)
    {
      uint64_t v30 = 0;
LABEL_58:
      uint64_t v31 = &v30[24 * v24];
      long long __p = v30;
      uint64_t v50 = v31;
      unint64_t v52 = &v30[24 * v26];
      *((void *)v31 + 2) = v43;
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v42;
      uint64_t v51 = (uint64_t)(v31 + 24);
      sub_216790CCC((uint64_t *)&v46, &__p);
      uint64_t v32 = v47;
      sub_216790E64((uint64_t)&__p);
      uint64_t v47 = v32;
      goto LABEL_59;
    }
    goto LABEL_83;
  }
  int v18 = *a2;
  char v19 = a2[1];
  if (*a2 == v19) {
    goto LABEL_38;
  }
  int v20 = *(void **)(v16 + 56);
  if (*(void *)(v16 + 64) - (void)v20 == 8)
  {
    unint64_t v21 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v21) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
    }
    if (*v20 != **(void **)(v21 + 192))
    {
      int v18 = *a2;
      char v19 = a2[1];
      goto LABEL_24;
    }
    uint64_t v39 = (void *)(*v8 + 8);
    if (*(char *)(*v8 + 31) < 0) {
      uint64_t v39 = (void *)*v39;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type '%s' has been declared to have 0 bases, and therefore inherits directly from the root type.  Cannot add bases.", v13, v14, v39);
    uint64_t v23 = v47;
    if ((unint64_t)v47 < v48) {
      goto LABEL_29;
    }
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v47 - v46);
    unint64_t v40 = v24 + 1;
    if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    if (0x5555555555555556 * ((uint64_t)(v48 - (void)v46) >> 3) > v40) {
      unint64_t v40 = 0x5555555555555556 * ((uint64_t)(v48 - (void)v46) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (void)v46) >> 3) >= 0x555555555555555) {
      unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v26 = v40;
    }
    unint64_t v53 = &v48;
    if (!v26)
    {
      uint64_t v30 = 0;
      goto LABEL_58;
    }
LABEL_83:
    uint64_t v30 = (char *)sub_216782ED8((uint64_t)&v48, v26);
    goto LABEL_58;
  }
LABEL_24:
  if (v18 != v19)
  {
    pxrInternal__aapl__pxrReserved__::TfType::_AddBasesNoLock(v8, a2, (uint64_t)&v46);
    goto LABEL_43;
  }
LABEL_38:
  if (*(void *)(v16 + 56) == *(void *)(v16 + 64))
  {
    unint64_t v27 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v27) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
    }
    sub_216891B94(&__p, 1uLL, *(void **)(v27 + 192));
    pxrInternal__aapl__pxrReserved__::TfType::_AddBasesNoLock(v8, (char **)&__p, (uint64_t)&v46);
    if (__p)
    {
      uint64_t v50 = (const char *)__p;
      operator delete(__p);
    }
  }
LABEL_43:
  if (a3)
  {
    if (*(void *)(*v8 + 32))
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v28 = (uint64_t *)a1;
      }
      else {
        uint64_t v28 = *(uint64_t **)a1;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"TfType '%s' has already had its definitionCallback set; ignoring 2nd declaration",
        v13,
        v14,
        v28);
      uint64_t v23 = v47;
      if ((unint64_t)v47 >= v48)
      {
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v47 - v46);
        unint64_t v29 = v24 + 1;
        if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        if (0x5555555555555556 * ((uint64_t)(v48 - (void)v46) >> 3) > v29) {
          unint64_t v29 = 0x5555555555555556 * ((uint64_t)(v48 - (void)v46) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (void)v46) >> 3) >= 0x555555555555555) {
          unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v26 = v29;
        }
        unint64_t v53 = &v48;
        if (!v26)
        {
          uint64_t v30 = 0;
          goto LABEL_58;
        }
        goto LABEL_83;
      }
LABEL_29:
      v23[2] = v43;
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v42;
      uint64_t v47 = v23 + 3;
LABEL_59:
      int v33 = 1;
      int v34 = 1;
      goto LABEL_60;
    }
    *(void *)(*v8 + 32) = a3;
  }
  if (*(unsigned char *)(v12 + 200))
  {
    int v33 = 1;
    int v34 = 0;
    if (!*(unsigned char *)(*v8 + 242))
    {
      *(unsigned char *)(*v8 + 242) = 1;
      int v33 = 0;
    }
  }
  else
  {
    int v34 = 0;
    int v33 = 1;
  }
LABEL_60:
  sub_216869774((uint64_t)&v44, (uint64_t)v13, v14);
  if (((v33 | v34) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::TfTypeWasDeclaredNotice::TfTypeWasDeclaredNotice(&__p, *v8);
    pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&__p);
    pxrInternal__aapl__pxrReserved__::TfTypeWasDeclaredNotice::~TfTypeWasDeclaredNotice((pxrInternal__aapl__pxrReserved__::TfTypeWasDeclaredNotice *)&__p);
  }
  uint64_t v35 = v46;
  for (uint64_t i = v47; v35 != i; v35 += 3)
  {
    long long __p = "tf/type.cpp";
    uint64_t v50 = "Declare";
    uint64_t v51 = 929;
    unint64_t v52 = "static const TfType &pxrInternal__aapl__pxrReserved__::TfType::Declare(const string &, const vector<TfType> &,"
          " DefinitionCallback)";
    LOBYTE(v53) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, v35);
  }
  long long __p = &v46;
  sub_216782F20((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v55);
  while (v57--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v56);
  return v8;
}

void sub_21688C308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_216790E64((uint64_t)&a23);
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_216869774((uint64_t)&a18, v31, v32);
  long long __p = &a20;
  sub_216782F20((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a29);
  sub_21684E6B8(v29 - 104);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfType::_AddBasesNoLock(uint64_t *a1, char **a2, uint64_t a3)
{
  uint64_t v89 = *a1;
  uint64_t v5 = *(void *)(*a1 + 56);
  uint64_t v6 = *a2;
  uint64_t v90 = *(void *)(*a1 + 64);
  if (v5 != v90)
  {
    uint64_t i = a1;
    uint64_t v88 = a3 + 16;
    while (1)
    {
      uint64_t v9 = *a2;
      uint64_t v8 = a2[1];
      if (*a2 == v8) {
        break;
      }
      unint64_t v10 = *a2;
      while (*(void *)v10 != *(void *)v5)
      {
        v10 += 8;
        if (v10 == v8)
        {
          unint64_t v10 = a2[1];
          break;
        }
      }
      if (v10 == v8)
      {
        memset(&v94, 0, sizeof(v94));
        do
        {
          std::string::size_type size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
          if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v94.__r_.__value_.__l.__size_;
          }
          if (size) {
            uint64_t v29 = ", ";
          }
          else {
            uint64_t v29 = "";
          }
          std::string::append(&v94, v29);
          int v30 = *(char *)(*(void *)v9 + 31);
          if (v30 >= 0) {
            uint64_t v31 = (const std::string::value_type *)(*(void *)v9 + 8);
          }
          else {
            uint64_t v31 = *(const std::string::value_type **)(*(void *)v9 + 8);
          }
          if (v30 >= 0) {
            std::string::size_type v32 = *(unsigned __int8 *)(*(void *)v9 + 31);
          }
          else {
            std::string::size_type v32 = *(void *)(*(void *)v9 + 16);
          }
          std::string::append(&v94, v31, v32);
          v9 += 8;
        }
        while (v9 != v8);
        goto LABEL_59;
      }
      if (v10 < v6)
      {
        memset(&v94, 0, sizeof(v94));
        memset(&v93, 0, sizeof(v93));
        uint64_t v11 = *(void *)(v89 + 56);
        uint64_t v12 = *(void *)(v89 + 64);
        if (v11 != v12)
        {
          do
          {
            std::string::size_type v13 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
            if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v13 = v94.__r_.__value_.__l.__size_;
            }
            if (v13) {
              uint64_t v14 = ", ";
            }
            else {
              uint64_t v14 = "";
            }
            std::string::append(&v94, v14);
            int v15 = *(char *)(*(void *)v11 + 31);
            if (v15 >= 0) {
              uint64_t v16 = (const std::string::value_type *)(*(void *)v11 + 8);
            }
            else {
              uint64_t v16 = *(const std::string::value_type **)(*(void *)v11 + 8);
            }
            if (v15 >= 0) {
              std::string::size_type v17 = *(unsigned __int8 *)(*(void *)v11 + 31);
            }
            else {
              std::string::size_type v17 = *(void *)(*(void *)v11 + 16);
            }
            std::string::append(&v94, v16, v17);
            v11 += 8;
          }
          while (v11 != v12);
          uint64_t v9 = *a2;
          uint64_t v8 = a2[1];
        }
        for (uint64_t i = a1; v9 != v8; v9 += 8)
        {
          std::string::size_type v18 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
          if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v18 = v93.__r_.__value_.__l.__size_;
          }
          if (v18) {
            char v19 = ", ";
          }
          else {
            char v19 = "";
          }
          std::string::append(&v93, v19);
          int v20 = *(char *)(*(void *)v9 + 31);
          if (v20 >= 0) {
            unint64_t v21 = (const std::string::value_type *)(*(void *)v9 + 8);
          }
          else {
            unint64_t v21 = *(const std::string::value_type **)(*(void *)v9 + 8);
          }
          if (v20 >= 0) {
            std::string::size_type v22 = *(unsigned __int8 *)(*(void *)v9 + 31);
          }
          else {
            std::string::size_type v22 = *(void *)(*(void *)v9 + 16);
          }
          std::string::append(&v93, v21, v22);
        }
        uint64_t v23 = (void *)(*a1 + 8);
        if (*(char *)(*a1 + 31) < 0) {
          uint64_t v23 = (void *)*v23;
        }
        unint64_t v24 = (std::string *)v94.__r_.__value_.__r.__words[0];
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v24 = &v94;
        }
        unint64_t v25 = &v93;
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v25 = (std::string *)v93.__r_.__value_.__r.__words[0];
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Specified base type order differs for %s: had (%s), now (%s).  If this is a type declared in a plugin, check that the plugin metadata is correct.", (const char *)a2, (char *)a3, v23, v24, v25);
        unint64_t v27 = *(void *)(a3 + 8);
        unint64_t v26 = *(void *)(a3 + 16);
        if (v27 >= v26)
        {
          unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *(void *)a3) >> 3);
          unint64_t v49 = v48 + 1;
          if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(void *)a3) >> 3);
          if (2 * v50 > v49) {
            unint64_t v49 = 2 * v50;
          }
          if (v50 >= 0x555555555555555) {
            unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v51 = v49;
          }
          uint64_t v99 = v88;
          if (v51) {
            unint64_t v52 = (char *)sub_216782ED8(v88, v51);
          }
          else {
            unint64_t v52 = 0;
          }
          unint64_t v53 = &v52[24 * v48];
          BOOL v95 = v52;
          BOOL v96 = v53;
          BOOL v98 = &v52[24 * v51];
          *((void *)v53 + 2) = v92;
          *(_OWORD *)unint64_t v53 = *(_OWORD *)__p;
          uint64_t v92 = 0;
          *(_OWORD *)long long __p = 0uLL;
          unsigned __int8 v97 = v53 + 24;
          sub_216790CCC((uint64_t *)a3, &v95);
          uint64_t v54 = *(void *)(a3 + 8);
          sub_216790E64((uint64_t)&v95);
          *(void *)(a3 + 8) = v54;
        }
        else
        {
          *(void *)(v27 + 16) = v92;
          *(_OWORD *)unint64_t v27 = *(_OWORD *)__p;
          *(void *)(a3 + 8) = v27 + 24;
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v6 = v10;
LABEL_95:
      v5 += 8;
      if (v5 == v90)
      {
        uint64_t v6 = *a2;
        uint64_t v5 = *(void *)(v89 + 56);
        uint64_t v55 = *(void *)(v89 + 64);
        goto LABEL_98;
      }
    }
    memset(&v94, 0, sizeof(v94));
LABEL_59:
    int v33 = (void *)(*i + 8);
    if (*(char *)(*i + 31) < 0) {
      int v33 = (void *)*v33;
    }
    int v34 = (void *)(*(void *)v5 + 8);
    if (*(char *)(*(void *)v5 + 31) < 0) {
      int v34 = (void *)*v34;
    }
    uint64_t v35 = &v94;
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v35 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"TfType '%s' was previously declared to have '%s' as a base, but a subsequent declaration does not include this as a base.  The newly given bases were: (%s).  If this is a type declared in a plugin, check that the plugin metadata is correct.", (const char *)a2, (char *)a3, v33, v34, v35);
    unint64_t v37 = *(void *)(a3 + 8);
    unint64_t v36 = *(void *)(a3 + 16);
    if (v37 >= v36)
    {
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *(void *)a3) >> 3);
      unint64_t v40 = v39 + 1;
      if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *(void *)a3) >> 3);
      if (2 * v41 > v40) {
        unint64_t v40 = 2 * v41;
      }
      if (v41 >= 0x555555555555555) {
        unint64_t v42 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v42 = v40;
      }
      uint64_t v99 = v88;
      if (v42) {
        uint64_t v43 = (char *)sub_216782ED8(v88, v42);
      }
      else {
        uint64_t v43 = 0;
      }
      unint64_t v44 = &v43[24 * v39];
      BOOL v95 = v43;
      BOOL v96 = v44;
      BOOL v98 = &v43[24 * v42];
      long long v45 = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
      *((void *)v44 + 2) = *((void *)&v93.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v44 = v45;
      memset(&v93, 0, sizeof(v93));
      unsigned __int8 v97 = v44 + 24;
      sub_216790CCC((uint64_t *)a3, &v95);
      uint64_t v46 = *(void *)(a3 + 8);
      sub_216790E64((uint64_t)&v95);
      int v47 = SHIBYTE(v93.__r_.__value_.__r.__words[2]);
      *(void *)(a3 + 8) = v46;
      if (v47 < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v38 = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
      *(void *)(v37 + 16) = *((void *)&v93.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v37 = v38;
      *(void *)(a3 + 8) = v37 + 24;
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    goto LABEL_95;
  }
  uint64_t v55 = *(void *)(*a1 + 56);
LABEL_98:
  uint64_t v56 = a2[1];
  if (v56 - v6 > (unint64_t)(v55 - v5))
  {
    for (; v6 != v56; v6 += 8)
    {
      unint64_t v57 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
      if (!v57) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
      }
      uint64_t v58 = *(void **)v6;
      if (*(void *)v6 == *(void *)(v57 + 184))
      {
        sub_216779094(&v94, "Specified base type is unknown, skipping.");
        unint64_t v65 = *(void *)(a3 + 8);
        unint64_t v64 = *(void *)(a3 + 16);
        if (v65 >= v64)
        {
          unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - *(void *)a3) >> 3);
          unint64_t v68 = v67 + 1;
          if (v67 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - *(void *)a3) >> 3);
          if (2 * v69 > v68) {
            unint64_t v68 = 2 * v69;
          }
          if (v69 >= 0x555555555555555) {
            unint64_t v70 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v70 = v68;
          }
          uint64_t v99 = a3 + 16;
          if (v70) {
            unint64_t v71 = (char *)sub_216782ED8(a3 + 16, v70);
          }
          else {
            unint64_t v71 = 0;
          }
          char v78 = &v71[24 * v67];
          BOOL v95 = v71;
          BOOL v96 = v78;
          BOOL v98 = &v71[24 * v70];
          long long v79 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
          *((void *)v78 + 2) = *((void *)&v94.__r_.__value_.__l + 2);
          *(_OWORD *)char v78 = v79;
          memset(&v94, 0, sizeof(v94));
          unsigned __int8 v97 = v78 + 24;
          sub_216790CCC((uint64_t *)a3, &v95);
          uint64_t v80 = *(void *)(a3 + 8);
          sub_216790E64((uint64_t)&v95);
          int v81 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
          *(void *)(a3 + 8) = v80;
          if (v81 < 0) {
            operator delete(v94.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v66 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
          *(void *)(v65 + 16) = *((void *)&v94.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v65 = v66;
          *(void *)(a3 + 8) = v65 + 24;
        }
      }
      else
      {
        unint64_t v60 = *(void **)(v89 + 56);
        uint64_t v59 = *(void **)(v89 + 64);
        if (v60 != v59)
        {
          while ((void *)*v60 != v58)
          {
            if (++v60 == v59)
            {
              unint64_t v60 = *(void **)(v89 + 64);
              break;
            }
          }
        }
        if (v60 == v59)
        {
          unint64_t v61 = v58[12];
          BOOL v62 = (void *)v58[11];
          if ((unint64_t)v62 >= v61)
          {
            uint64_t v72 = v58[10];
            uint64_t v73 = ((uint64_t)v62 - v72) >> 3;
            if ((unint64_t)(v73 + 1) >> 61) {
              sub_21677CB10();
            }
            uint64_t v74 = v61 - v72;
            uint64_t v75 = v74 >> 2;
            if (v74 >> 2 <= (unint64_t)(v73 + 1)) {
              uint64_t v75 = v73 + 1;
            }
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v76 = v75;
            }
            if (v76) {
              BOOL v77 = (char *)sub_21677CB28((uint64_t)(v58 + 12), v76);
            }
            else {
              BOOL v77 = 0;
            }
            BOOL v82 = &v77[8 * v73];
            *(void *)BOOL v82 = *a1;
            char v63 = v82 + 8;
            BOOL v84 = (char *)v58[10];
            char v83 = (char *)v58[11];
            if (v83 != v84)
            {
              do
              {
                uint64_t v85 = *((void *)v83 - 1);
                v83 -= 8;
                *((void *)v82 - sub_216850320((uint64_t)&word_267B8E45F + 1) = v85;
                v82 -= 8;
              }
              while (v83 != v84);
              char v83 = (char *)v58[10];
            }
            v58[10] = v82;
            v58[11] = v63;
            v58[12] = &v77[8 * v76];
            if (v83) {
              operator delete(v83);
            }
          }
          else
          {
            *BOOL v62 = *a1;
            char v63 = v62 + 1;
          }
          v58[11] = v63;
        }
      }
    }
    std::string::size_type v86 = (char *)(*a1 + 56);
    if (v86 != (char *)a2) {
      sub_21677CC7C(v86, *a2, (uint64_t)a2[1], (a2[1] - *a2) >> 3);
    }
  }
}

void sub_21688CB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType(pxrInternal__aapl__pxrReserved__::TfType *this, std::type_info *a2, char *a3, char a4, char a5)
{
  unint64_t v10 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v21 = v10;
  int v22 = -1;
  sub_21686C480((uint64_t)&v21, (uint64_t)a2, a3);
  if (atomic_load((unint64_t *)(*(void *)this + 40)))
  {
    sub_216869774((uint64_t)&v21, v11, v12);
    v19[0] = "tf/type.cpp";
    v19[1] = "_DefineCppType";
    void v19[2] = 963;
    v19[3] = "void pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType(const std::type_info &, size_t, BOOL, BOOL) const";
    char v20 = 0;
    uint64_t v14 = (const char *)(*(void *)this + 8);
    if (*(char *)(*(void *)this + 31) < 0) {
      uint64_t v14 = *(const char **)v14;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"TfType '%s' already has a defined C++ type; cannot redefine",
      v14);
  }
  else
  {
    uint64_t v17 = *(void *)this;
    v19[0] = v17;
    atomic_store((unint64_t)a2, (unint64_t *)(v17 + 40));
    *(void *)(v17 + 48) = a3;
    *(unsigned char *)(v17 + 240) = a4;
    *(unsigned char *)(v17 + 24sub_216850320((uint64_t)&word_267B8E45F + 1) = a5;
    sub_21688E368(v10 + 64, a2, v19);
  }
  return sub_216869774((uint64_t)&v21, v15, v16);
}

void sub_21688CD34(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_216869774((uint64_t)va, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2, void *(*a3)(void *, BOOL))
{
  uint64_t v11 = a3;
  unint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v9 = v5;
  int v10 = -1;
  sub_21686C480((uint64_t)&v9, (uint64_t)a2, (char *)a3);
  sub_21688CDE8(*(void **)this, (uint64_t)a2, (uint64_t *)&v11);
  return sub_216869774((uint64_t)&v9, v6, v7);
}

void sub_21688CDD0(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216869774((uint64_t)va, a2, a3);
  _Unwind_Resume(a1);
}

void sub_21688CDE8(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a1[27];
  unint64_t v7 = (void **)(a1 + 26);
  if (v6 == a1[26])
  {
    int v10 = (uint64_t *)a1[27];
LABEL_7:
    uint64_t v11 = *a3;
    unint64_t v12 = a1[28];
    if ((unint64_t)v10 >= v12)
    {
      uint64_t v14 = ((uint64_t)v10 - v6) >> 4;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60) {
        sub_21677CB10();
      }
      uint64_t v16 = v12 - v6;
      if (v16 >> 3 > v15) {
        unint64_t v15 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17) {
        std::string::size_type v18 = (char *)sub_216787EE0((uint64_t)(a1 + 28), v17);
      }
      else {
        std::string::size_type v18 = 0;
      }
      char v19 = (uint64_t *)&v18[16 * v14];
      char v20 = &v18[16 * v17];
      *char v19 = a2;
      v19[1] = v11;
      std::string::size_type v13 = v19 + 2;
      int v22 = (char *)a1[26];
      unint64_t v21 = (char *)a1[27];
      if (v21 != v22)
      {
        do
        {
          *((_OWORD *)v19 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((_OWORD *)v21 - 1);
          v19 -= 2;
          v21 -= 16;
        }
        while (v21 != v22);
        unint64_t v21 = (char *)*v7;
      }
      a1[26] = v19;
      a1[27] = v13;
      a1[28] = v20;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      uint64_t *v10 = a2;
      v10[1] = v11;
      std::string::size_type v13 = v10 + 2;
    }
    a1[27] = v13;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v6 = a1[26];
    while (!sub_21677EC50(a2, *(void *)(v6 + v8)))
    {
      ++v9;
      uint64_t v6 = a1[26];
      int v10 = (uint64_t *)a1[27];
      v8 += 16;
      if (v9 >= ((uint64_t)v10 - v6) >> 4) {
        goto LABEL_7;
      }
    }
    *(void *)((char *)*v7 + v8 + 8) = *a3;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::CastToAncestor(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3 = (uint64_t)a3;
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  if (*a1 == *(void *)(v6 + 184)) {
    return 0;
  }
  unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  if (*(void *)(v7 + 184) == a2) {
    return 0;
  }
  unint64_t v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v26 = v8;
  int v27 = -1;
  sub_21686C510((uint64_t)&v26, a2, a3);
  uint64_t v11 = *a1;
  if (v11 == a2)
  {
    uint64_t v18 = v3;
  }
  else
  {
    unint64_t v12 = MEMORY[0x263F8C288];
    while (1)
    {
      uint64_t v13 = *(void *)(v11 + 56);
      uint64_t v14 = *(void *)(v11 + 64);
      if (v14 - v13 != 8) {
        break;
      }
      unint64_t v15 = atomic_load((unint64_t *)(*(void *)v13 + 40));
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = v12;
      }
      unint64_t v17 = (uint64_t (**)(uint64_t, uint64_t))sub_21688D124(v11, v16);
      if (!v17) {
        goto LABEL_28;
      }
      uint64_t v3 = (*v17)(v3, 1);
      uint64_t v11 = **(void **)(v11 + 56);
      uint64_t v18 = v3;
      if (v11 == a2) {
        goto LABEL_29;
      }
    }
    if (v14 == v13)
    {
LABEL_28:
      uint64_t v18 = 0;
      goto LABEL_29;
    }
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    while (1)
    {
      unint64_t v21 = atomic_load((unint64_t *)(*(void *)(v13 + 8 * v20) + 40));
      uint64_t v22 = v21 ? v21 : v12;
      uint64_t v23 = (uint64_t (**)(uint64_t, uint64_t))sub_21688D124(v11, v22);
      if (v23)
      {
        uint64_t v24 = (*v23)(v3, 1);
        uint64_t v18 = pxrInternal__aapl__pxrReserved__::TfType::CastToAncestor(*(void *)(v11 + 56) + v19, a2, v24);
        if (v18) {
          break;
        }
      }
      ++v20;
      uint64_t v13 = *(void *)(v11 + 56);
      v19 += 8;
      if (v20 >= (*(void *)(v11 + 64) - v13) >> 3) {
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  sub_216869774((uint64_t)&v26, v9, v10);
  return v18;
}

void sub_21688D100(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21688D124(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 208);
  uint64_t v3 = *(void *)(a1 + 216) - v2;
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3 >> 4;
  unint64_t v5 = (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if (v4 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v4;
  }
  for (uint64_t i = v2 + 8; strcmp(v5, (const char *)(*(void *)(*(void *)(i - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL)); i += 16)
  {
    if (!--v6) {
      return 0;
    }
  }
  return i;
}

unint64_t *pxrInternal__aapl__pxrReserved__::TfType::CastFromAncestor(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance;
  unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  if (*a1 == *(void *)(v7 + 184)) {
    return 0;
  }
  unint64_t v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  if (*(void *)(v8 + 184) == a2) {
    return 0;
  }
  if (*a1 != a2)
  {
    unint64_t v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v9) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
    }
    unint64_t v21 = v9;
    int v22 = -1;
    sub_21686C510((uint64_t)&v21, a2, a3);
    long long v20 = *(_OWORD *)(*a1 + 56);
    unint64_t v12 = MEMORY[0x263F8C288];
    while (1)
    {
      long long v13 = v20;
      if ((void)v20 == *((void *)&v20 + 1)) {
        break;
      }
      uint64_t v14 = sub_21688D334(&v20);
      uint64_t v6 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfType::CastFromAncestor(*v14, a2, v3);
      if (v6)
      {
        uint64_t v15 = *a1;
        unint64_t v16 = atomic_load((unint64_t *)(*(void *)*sub_21688D334(&v20) + 40));
        uint64_t v17 = v16 ? v16 : v12;
        uint64_t v18 = (uint64_t (**)(unint64_t *, void))sub_21688D124(v15, v17);
        if (v18)
        {
          uint64_t v6 = (unint64_t *)(*v18)(v6, 0);
          break;
        }
      }
      sub_21688D3C0(&v20);
    }
    sub_216869774((uint64_t)&v21, v10, v11);
    if ((void)v13 == *((void *)&v13 + 1)) {
      return 0;
    }
    else {
      return v6;
    }
  }
  return (unint64_t *)v3;
}

void sub_21688D30C(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216869774((uint64_t)va, a2, a3);
  _Unwind_Resume(a1);
}

void *sub_21688D334(void *result)
{
  if (*result == result[1])
  {
    unint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfType>"
            ">::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfType>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

void *sub_21688D3C0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::TfType>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfType>, Reverse = false]";
    char v4 = 0;
    int v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfType::SetFactory(uint64_t *a1, uint64_t *a2, char *a3)
{
  unint64_t v5 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v6 = *(void *)(v5 + 184);
  if (*a1 == v6) {
    goto LABEL_13;
  }
  unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v6 = *a1;
  if (*a1 == **(void **)(v7 + 192))
  {
LABEL_13:
    uint64_t v18 = "tf/type.cpp";
    uint64_t v19 = "SetFactory";
    uint64_t v20 = 1131;
    unint64_t v21 = "void pxrInternal__aapl__pxrReserved__::TfType::SetFactory(std::unique_ptr<FactoryBase>) const";
    char v22 = 0;
    long long v13 = (const char *)(v6 + 8);
    if (*(char *)(v6 + 31) < 0) {
      long long v13 = *(const char **)v13;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set factory of %s\n", v13);
  }
  else
  {
    unint64_t v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
    }
    unint64_t v16 = v8;
    int v17 = -1;
    sub_21686C480((uint64_t)&v16, (uint64_t)a2, a3);
    uint64_t v11 = *a1;
    if (*(void *)(*a1 + 104))
    {
      sub_216869774((uint64_t)&v16, v9, v10);
      uint64_t v18 = "tf/type.cpp";
      uint64_t v19 = "SetFactory";
      uint64_t v20 = 1139;
      unint64_t v21 = "void pxrInternal__aapl__pxrReserved__::TfType::SetFactory(std::unique_ptr<FactoryBase>) const";
      char v22 = 0;
      unint64_t v12 = (const char *)(*a1 + 8);
      if (*(char *)(*a1 + 31) < 0) {
        unint64_t v12 = *(const char **)v12;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot change the factory of %s\n", v12);
    }
    else
    {
      uint64_t v14 = *a2;
      *a2 = 0;
      uint64_t v15 = *(void *)(v11 + 104);
      *(void *)(v11 + 104) = v14;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
    sub_216869774((uint64_t)&v16, v9, v10);
  }
}

void sub_21688D5F4(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216869774((uint64_t)va, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(pxrInternal__aapl__pxrReserved__::TfType *this, uint64_t a2, char *a3)
{
  unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v5 = *(void *)(v4 + 184);
  if (*(void *)this == v5) {
    goto LABEL_10;
  }
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v5 = *(void *)this;
  if (*(void *)this == **(void **)(v6 + 192))
  {
LABEL_10:
    uint64_t v15 = "tf/type.cpp";
    unint64_t v16 = "_GetFactory";
    uint64_t v17 = 1150;
    uint64_t v18 = "TfType::FactoryBase *pxrInternal__aapl__pxrReserved__::TfType::_GetFactory() const";
    char v19 = 0;
    long long v13 = (const char *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0) {
      long long v13 = *(const char **)v13;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot manufacture type %s", v13);
    return 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfType::_ExecuteDefinitionCallback(this, a2, a3);
    unint64_t v9 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
    if (!v9) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
    }
    uint64_t v15 = (char *)v9;
    LODWORD(v16) = -1;
    sub_21686C510((uint64_t)&v15, v7, v8);
    uint64_t v10 = *(void *)(*(void *)this + 104);
    sub_216869774((uint64_t)&v15, v11, v12);
  }
  return v10;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_ExecuteDefinitionCallback(pxrInternal__aapl__pxrReserved__::TfType *this, uint64_t a2, char *a3)
{
  unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v9 = v4;
  int v10 = -1;
  sub_21686C510((uint64_t)&v9, a2, a3);
  uint64_t v7 = *(void (**)(void))(*(void *)this + 32);
  if (v7)
  {
    sub_216869774((uint64_t)&v9, v5, v6);
    v7(*(void *)this);
  }
  return sub_216869774((uint64_t)&v9, v5, v6);
}

void sub_21688D7B0(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_21688D7C8(uint64_t a1, uint64_t a2, char *a3)
{
  if ((*(_DWORD *)(a1 + 8) & 0x80000000) != 0)
  {
    v7[0] = "tf/bigRWMutex.h";
    v7[1] = "UpgradeToWriter";
    _OWORD v7[2] = 171;
    v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::TfBigRWMutex::ScopedLock::UpgradeToWriter()";
    char v8 = 0;
    int v9 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_acqState >= 0");
  }
  sub_216869774(a1, a2, a3);
  sub_21686C480(a1, v4, v5);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::TfType::AddAlias(uint64_t *a1, uint64_t a2, char *a3)
{
  long long __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v11 = (char *)v6;
  LODWORD(v12) = -1;
  sub_21686C480((uint64_t)&v11, a2, a3);
  sub_21688D984(v6, a2, *a1, (unsigned __int8 *)a3, (uint64_t)&__p);
  sub_216869774((uint64_t)&v11, v7, v8);
  uint64_t v9 = HIBYTE(v18);
  char v10 = HIBYTE(v18);
  if (v18 < 0) {
    uint64_t v9 = v17;
  }
  if (v9)
  {
    uint64_t v11 = "tf/type.cpp";
    unint64_t v12 = "AddAlias";
    uint64_t v13 = 1215;
    uint64_t v14 = "void pxrInternal__aapl__pxrReserved__::TfType::AddAlias(TfType, const string &) const";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (uint64_t *)&__p);
    char v10 = HIBYTE(v18);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
}

void sub_21688D948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21688D984(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v30 = a3;
  uint64_t v10 = a2 + 112;
  if (*(unsigned char *)(a2 + 152))
  {
    uint64_t v11 = sub_2168602D4((void *)(a2 + 112), a4);
    if (v11)
    {
      uint64_t v14 = *((void *)v11 + 5);
      if (v14 == a3) {
        return;
      }
      if ((a4[23] & 0x80u) == 0) {
        char v15 = (uint64_t *)a4;
      }
      else {
        char v15 = *(uint64_t **)a4;
      }
      unint64_t v16 = (void *)(a2 + 8);
      if (*(char *)(a2 + 31) < 0) {
        unint64_t v16 = (void *)*v16;
      }
      uint64_t v17 = (void *)(v14 + 8);
      if (*(char *)(v14 + 31) < 0) {
        uint64_t v17 = (void *)*v17;
      }
      uint64_t v18 = (void *)(a3 + 8);
      if (*(char *)(a3 + 31) < 0) {
        uint64_t v18 = (void *)*v18;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot set alias '%s' under '%s', because it is already set to '%s', not '%s'.", v12, v13, v15, v16, v17, v18);
      goto LABEL_22;
    }
  }
  char v19 = sub_2168602D4((void *)(a1 + 24), a4);
  if (v19 && pxrInternal__aapl__pxrReserved__::TfType::_IsAImplNoLock(*((char **)v19 + 5), *(void *)a2))
  {
    if ((a4[23] & 0x80u) == 0) {
      char v22 = (uint64_t *)a4;
    }
    else {
      char v22 = *(uint64_t **)a4;
    }
    uint64_t v23 = (void *)(a2 + 8);
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v23 = (void *)*v23;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"There already is a type named '%s' derived from base type '%s'; cannot create "
                                          "an alias of the same name.",
      v20,
      v21,
      v22,
      v23);
LABEL_22:
    if (*(char *)(a5 + 23) < 0) {
      operator delete(*(void **)a5);
    }
    *(_OWORD *)a5 = v28;
    *(void *)(a5 + 16) = v29;
    return;
  }
  if (!*(unsigned char *)(a2 + 152))
  {
    LODWORD(v28) = 0;
    sub_21688ECD0(v10, (int *)&v28);
  }
  *(void *)&long long v28 = a4;
  *((void *)sub_21685FAEC(v10, a4, (uint64_t)&unk_2174BFD90, (long long **)&v28) + 5) = a3;
  if (!*(unsigned char *)(a2 + 200))
  {
    LODWORD(v28) = 0;
    sub_21688ED20(a2 + 160, (int *)&v28);
  }
  *(void *)&long long v28 = &v30;
  uint64_t v24 = sub_21688EEA0(a2 + 160, &v30, (uint64_t)&unk_2174BFD90, (void **)&v28);
  unint64_t v25 = v24 + 3;
  unint64_t v26 = v24[4];
  if (v26 >= v24[5])
  {
    uint64_t v27 = sub_2167E9A44(v25, (long long *)a4);
  }
  else
  {
    sub_2167E99E4(v25, (long long *)a4);
    uint64_t v27 = v26 + 24;
  }
  v24[4] = v27;
}

BOOL pxrInternal__aapl__pxrReserved__::TfType::IsEnumType(pxrInternal__aapl__pxrReserved__::TfType *this, uint64_t a2, char *a3)
{
  unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v9 = v4;
  int v10 = -1;
  sub_21686C510((uint64_t)&v9, a2, a3);
  int v5 = *(unsigned __int8 *)(*(void *)this + 241);
  sub_216869774((uint64_t)&v9, v6, v7);
  return v5 != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::TfType::IsPlainOldDataType(pxrInternal__aapl__pxrReserved__::TfType *this, uint64_t a2, char *a3)
{
  unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v9 = v4;
  int v10 = -1;
  sub_21686C510((uint64_t)&v9, a2, a3);
  int v5 = *(unsigned __int8 *)(*(void *)this + 240);
  sub_216869774((uint64_t)&v9, v6, v7);
  return v5 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetSizeof(pxrInternal__aapl__pxrReserved__::TfType *this, uint64_t a2, char *a3)
{
  unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  unint64_t v9 = v4;
  int v10 = -1;
  sub_21686C510((uint64_t)&v9, a2, a3);
  uint64_t v5 = *(void *)(*(void *)this + 48);
  sub_216869774((uint64_t)&v9, v6, v7);
  return v5;
}

uint64_t *sub_21688DCC4()
{
  sub_21688F154();
  sub_21688F258();
  sub_21688F35C();
  sub_21688F460();
  sub_21688F564();
  sub_21688F668();
  sub_21688F76C();
  sub_21688F870();
  sub_21688F974();
  sub_21688FA78();
  unint64_t v0 = sub_21688FB7C();
  unint64_t v1 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v2 = **(void **)(v1 + 192);
  sub_216779094(__p, "size_t");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v2, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  sub_21688FC80();
  sub_21688FD84();
  sub_21688FE88();
  sub_21688FF8C();
  sub_216890090();
  uint64_t v3 = sub_216890194();
  unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v5 = **(void **)(v4 + 192);
  sub_216779094(__p, "vector<BOOL>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v3, v5, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = sub_216890298();
  unint64_t v7 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v8 = **(void **)(v7 + 192);
  sub_216779094(__p, "vector<char>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v6, v8, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v9 = sub_21689039C();
  unint64_t v10 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v11 = **(void **)(v10 + 192);
  sub_216779094(__p, "vector<unsigned char>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v9, v11, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v12 = sub_2168904A0();
  unint64_t v13 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v14 = **(void **)(v13 + 192);
  sub_216779094(__p, "vector<short>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v12, v14, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  char v15 = sub_2168905A4();
  unint64_t v16 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v16) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v17 = **(void **)(v16 + 192);
  sub_216779094(__p, "vector<unsigned short>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v15, v17, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v18 = sub_2168906A8();
  unint64_t v19 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v19) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v20 = **(void **)(v19 + 192);
  sub_216779094(__p, "vector<int>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v18, v20, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v21 = sub_2168907AC();
  unint64_t v22 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v22) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v23 = **(void **)(v22 + 192);
  sub_216779094(__p, "vector<unsigned int>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v21, v23, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v24 = sub_2168908B0();
  unint64_t v25 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v25) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v26 = **(void **)(v25 + 192);
  sub_216779094(__p, "vector<long>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v24, v26, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v47 = *sub_2168909B4();
  unint64_t v27 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v27) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v28 = **(void **)(v27 + 192);
  sub_216779094(__p, "vector<unsigned long>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(&v47, v28, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v29 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v29) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v30 = **(void **)(v29 + 192);
  sub_216779094(__p, "vector<size_t>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(&v47, v30, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v31 = sub_216890AB8();
  unint64_t v32 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v32) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v33 = **(void **)(v32 + 192);
  sub_216779094(__p, "vector<long long>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v31, v33, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  int v34 = sub_216890BBC();
  unint64_t v35 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v35) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v36 = **(void **)(v35 + 192);
  sub_216779094(__p, "vector<unsigned long long>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v34, v36, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v37 = sub_216890CC0();
  unint64_t v38 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v38) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v39 = **(void **)(v38 + 192);
  sub_216779094(__p, "vector<float>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v37, v39, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v40 = sub_216890DC4();
  unint64_t v41 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v41) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v42 = **(void **)(v41 + 192);
  sub_216779094(__p, "vector<double>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v40, v42, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v43 = sub_216890EC8();
  unint64_t v44 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_instance);
  if (!v44) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_TypeRegistry>::_CreateInstance();
  }
  uint64_t v45 = **(void **)(v44 + 192);
  sub_216779094(__p, "vector<string>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v43, v45, (char *)__p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  return sub_216890FCC();
}

void sub_21688E274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)a2 + 31);
  uint64_t v3 = *(void *)(*(void *)a2 + 16);
  if ((v2 & 0x80u) == 0) {
    uint64_t v4 = *(void *)a2 + 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)a2 + 8);
  }
  if ((v2 & 0x80u) == 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v3;
  }
  return sub_216779180(a1, v4, v5);
}

{
  void *v3;
  long long v4;
  void *v5;
  void *v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  _OWORD v17[8];
  long long v18[3];
  char v19;

  uint64_t v3 = sub_216779180(a1, (uint64_t)"[(", 2);
  uint64_t v4 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v4;
  v18[2] = *(_OWORD *)(a2 + 32);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, v18);
  uint64_t v6 = sub_216779180(v5, (uint64_t)") (", 3);
  unint64_t v7 = *(_OWORD *)(a2 + 128);
  v17[4] = *(_OWORD *)(a2 + 112);
  void v17[5] = v7;
  uint64_t v8 = *(_OWORD *)(a2 + 160);
  v17[6] = *(_OWORD *)(a2 + 144);
  v17[7] = v8;
  unint64_t v9 = *(_OWORD *)(a2 + 64);
  v17[0] = *(_OWORD *)(a2 + 48);
  v17[1] = v9;
  unint64_t v10 = *(_OWORD *)(a2 + 96);
  v17[2] = *(_OWORD *)(a2 + 80);
  v17[3] = v10;
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::operator<<(v6, (double *)v17);
  unint64_t v12 = sub_216779180(v11, (uint64_t)") ", 2);
  if (*(unsigned char *)(a2 + 305)) {
    unint64_t v13 = "true";
  }
  else {
    unint64_t v13 = "false";
  }
  if (*(unsigned char *)(a2 + 305)) {
    uint64_t v14 = 4;
  }
  else {
    uint64_t v14 = 5;
  }
  char v15 = sub_216779180(v12, (uint64_t)v13, v14);
  unint64_t v19 = 93;
  return sub_216779180(v15, (uint64_t)&v19, 1);
}

{
  const char *v4;
  void *v5;
  const char *v6;

  if (*(unsigned char *)(a2 + 8)) {
    uint64_t v4 = "[";
  }
  else {
    uint64_t v4 = "(";
  }
  sub_216779180(a1, (uint64_t)v4, 1);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::operator<<(a1, *(double *)a2);
  sub_216779180(v5, (uint64_t)", ", 2);
  pxrInternal__aapl__pxrReserved__::operator<<(a1, *(double *)(a2 + 16));
  if (*(unsigned char *)(a2 + 24)) {
    uint64_t v6 = "]";
  }
  else {
    uint64_t v6 = ")";
  }
  sub_216779180(a1, (uint64_t)v6, 1);
  return a1;
}

{
  void *v3;
  void *v4;
  double v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  long long v12;
  uint64_t v13;
  float64x2_t v14;
  double v15;
  char v16;

  LOBYTE(v14.f64[0]) = 40;
  uint64_t v3 = sub_216779180(a1, (uint64_t)&v14, 1);
  uint64_t v4 = sub_216779180(v3, (uint64_t)"point:", 6);
  uint64_t v5 = *(double *)(a2 + 40) * 0.0 + *(double *)(a2 + 16);
  uint64_t v14 = vaddq_f64(vmulq_f64(*(float64x2_t *)(a2 + 24), (float64x2_t)0), *(float64x2_t *)a2);
  char v15 = v5;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(v4, v14.f64);
  LOBYTE(v12) = 32;
  unint64_t v7 = sub_216779180(v6, (uint64_t)&v12, 1);
  uint64_t v8 = sub_216779180(v7, (uint64_t)"direction:", 10);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v12 = *(_OWORD *)(a2 + 24);
  unint64_t v13 = v9;
  unint64_t v10 = pxrInternal__aapl__pxrReserved__::operator<<(v8, (double *)&v12);
  unint64_t v16 = 41;
  return sub_216779180(v10, (uint64_t)&v16, 1);
}

{
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  void *v13;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  char v19;

  LOBYTE(v17.f64[0]) = 40;
  uint64_t v3 = sub_216779180(a1, (uint64_t)&v17, 1);
  uint64_t v4 = sub_216779180(v3, (uint64_t)"point 1:", 8);
  uint64_t v5 = *(double *)(a2 + 48) * 0.0;
  uint64_t v6 = v5 * *(double *)(a2 + 40) + *(double *)(a2 + 16);
  uint64_t v17 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 24), v5), *(float64x2_t *)a2);
  uint64_t v18 = v6;
  unint64_t v7 = pxrInternal__aapl__pxrReserved__::operator<<(v4, v17.f64);
  LOBYTE(v15) = 32;
  uint64_t v8 = sub_216779180(v7, (uint64_t)&v15, 1);
  unint64_t v9 = sub_216779180(v8, (uint64_t)"point 2:", 8);
  unint64_t v10 = *(float64x2_t *)(a2 + 32);
  uint64_t v11 = *(float64x2_t *)(a2 + 40);
  v10.f64[1] = *(float64_t *)(a2 + 48);
  unint64_t v12 = vaddq_f64(vmulq_f64(v10, (float64x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL)), *(float64x2_t *)(a2 + 8));
  char v15 = vmuld_lane_f64(*(double *)(a2 + 24), v11, 1) + *(double *)a2;
  unint64_t v16 = v12;
  unint64_t v13 = pxrInternal__aapl__pxrReserved__::operator<<(v9, &v15);
  unint64_t v19 = 41;
  return sub_216779180(v13, (uint64_t)&v19, 1);
}

{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  long long v9;
  uint64_t v10;
  char v11;

  LOBYTE(v9) = 40;
  uint64_t v3 = sub_216779180(a1, (uint64_t)&v9, 1);
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *(double *)a2);
  uint64_t v5 = sub_216779180(v4, (uint64_t)" + ", 3);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v9 = *(_OWORD *)(a2 + 8);
  unint64_t v10 = v6;
  unint64_t v7 = pxrInternal__aapl__pxrReserved__::operator<<(v5, (double *)&v9);
  uint64_t v11 = 41;
  return sub_216779180(v7, (uint64_t)&v11, 1);
}

{
  int v4;
  void *v5;
  void *v6;
  void *p_p;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *__p;
  uint64_t v24;
  unsigned __int8 v25;
  void v26[2];
  void v27[3];

  void v27[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 192))(a2);
  sub_216779180(a1, (uint64_t)"Ts.KeyFrame(", 12);
  uint64_t v5 = (void *)std::ostream::operator<<();
  uint64_t v6 = sub_216779180(v5, (uint64_t)", ", 2);
  if (v4)
  {
    sub_2169283E0(a2, (uint64_t)&__p);
    if ((v25 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v25 & 0x80u) == 0) {
      uint64_t v8 = v25;
    }
    else {
      uint64_t v8 = v24;
    }
    unint64_t v9 = sub_216779180(v6, (uint64_t)p_p, v8);
    sub_216779180(v9, (uint64_t)", ", 2);
    (*(void (**)(uint64_t))(*(void *)a2 + 56))(a2);
    unint64_t v10 = (void *)std::ostream::operator<<();
    uint64_t v11 = sub_216779180(v10, (uint64_t)", ", 2);
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a2 + 200))(v27, a2);
    unint64_t v12 = (void *)pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v11, (uint64_t)v27);
    unint64_t v13 = sub_216779180(v12, (uint64_t)", ", 2);
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a2 + 208))(v26, a2);
    uint64_t v14 = (void *)pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v13, (uint64_t)v26);
    sub_216779180(v14, (uint64_t)", ", 2);
    (*(void (**)(uint64_t))(*(void *)a2 + 216))(a2);
    char v15 = (void *)std::ostream::operator<<();
    sub_216779180(v15, (uint64_t)", ", 2);
    (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
    unint64_t v16 = (void *)std::ostream::operator<<();
    uint64_t v17 = sub_216779180(v16, (uint64_t)")", 1);
    sub_2168EE084((uint64_t)v26);
    sub_2168EE084((uint64_t)v27);
  }
  else
  {
    sub_2169283E0(a2, (uint64_t)&__p);
    if ((v25 & 0x80u) == 0) {
      uint64_t v18 = &__p;
    }
    else {
      uint64_t v18 = __p;
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v19 = v25;
    }
    else {
      unint64_t v19 = v24;
    }
    uint64_t v20 = sub_216779180(v6, (uint64_t)v18, v19);
    sub_216779180(v20, (uint64_t)", ", 2);
    (*(void (**)(uint64_t))(*(void *)a2 + 56))(a2);
    unint64_t v21 = (void *)std::ostream::operator<<();
    uint64_t v17 = sub_216779180(v21, (uint64_t)")", 1);
  }
  if ((char)v25 < 0) {
    operator delete(__p);
  }
  return v17;
}

{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v9;
  char v10;

  unint64_t v9 = 64;
  uint64_t v3 = sub_216779180(a1, (uint64_t)&v9, 1);
  uint64_t v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  unint64_t v7 = sub_216779180(v3, v5, v6);
  unint64_t v10 = 64;
  return sub_216779180(v7, (uint64_t)&v10, 1);
}

{
  _DWORD *v3;
  _DWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  void *v7;
  std::string *v9[3];
  std::string __p;
  std::string **v11;

  memset(v9, 0, sizeof(v9));
  uint64_t v3 = *(_DWORD **)a2;
  uint64_t v4 = *(_DWORD **)(a2 + 8);
  uint64_t v11 = v9;
  while (v3 != v4)
  {
    sub_216AEECA8(v3);
    sub_216AF1D94((uint64_t **)&v11, (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v3 += 5;
  }
  pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", v9, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v7 = sub_216779180(a1, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  sub_216782F20((void ***)&__p);
  return v7;
}

{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t vars8;

  uint64_t v3 = sub_216779180(a1, (uint64_t)"SdfPayload(", 11);
  uint64_t v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  unint64_t v7 = sub_216779180(v3, v5, v6);
  uint64_t v8 = sub_216779180(v7, (uint64_t)", ", 2);
  unint64_t v9 = pxrInternal__aapl__pxrReserved__::operator<<(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24));
  unint64_t v10 = sub_216779180(v9, (uint64_t)", ", 2);
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::operator<<(v10);

  return sub_216779180(v11, (uint64_t)")", 1);
}

{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t vars8;

  uint64_t v3 = sub_216779180(a1, (uint64_t)"SdfReference(", 13);
  uint64_t v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  unint64_t v7 = sub_216779180(v3, v5, v6);
  uint64_t v8 = sub_216779180(v7, (uint64_t)", ", 2);
  unint64_t v9 = pxrInternal__aapl__pxrReserved__::operator<<(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24));
  unint64_t v10 = sub_216779180(v9, (uint64_t)", ", 2);
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::operator<<(v10);
  unint64_t v12 = sub_216779180(v11, (uint64_t)", ", 2);
  unint64_t v13 = pxrInternal__aapl__pxrReserved__::operator<<(v12, (void **)(a2 + 48));

  return sub_216779180(v13, (uint64_t)")", 1);
}

{
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t vars8;

  uint64_t v3 = sub_216779180(a1, (uint64_t)"<< ", 3);
  uint64_t v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  unint64_t v7 = sub_216779180(v3, v5, v6);

  return sub_216779180(v7, (uint64_t)" >>", 3);
}

{
  void *v4;
  void **v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *__p[2];
  unsigned __int8 v18;
  char v19;

  uint64_t v4 = sub_216779180(a1, (uint64_t)"_pcpInstanceKey:\n", 17);
  pxrInternal__aapl__pxrReserved__::PcpInstanceKey::GetString((pxrInternal__aapl__pxrReserved__::PcpInstanceKey *)a2, (uint64_t)__p);
  if ((v18 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = v18;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  unint64_t v7 = sub_216779180(v4, (uint64_t)v5, v6);
  unint64_t v19 = 10;
  uint64_t v8 = sub_216779180(v7, (uint64_t)&v19, 1);
  unint64_t v9 = sub_216779180(v8, (uint64_t)"_mask: ", 7);
  unint64_t v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, (_DWORD **)(a2 + 80));
  unint64_t v19 = 10;
  uint64_t v11 = sub_216779180(v10, (uint64_t)&v19, 1);
  unint64_t v12 = sub_216779180(v11, (uint64_t)"_loadRules: ", 12);
  unint64_t v13 = pxrInternal__aapl__pxrReserved__::operator<<(v12, (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 104));
  unint64_t v19 = 10;
  uint64_t v14 = sub_216779180(v13, (uint64_t)&v19, 1);
  sub_216779180(v14, (uint64_t)"_hash: ", 7);
  char v15 = (void *)std::ostream::operator<<();
  unint64_t v19 = 10;
  sub_216779180(v15, (uint64_t)&v19, 1);
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

{
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  sub_216779180(a1, (uint64_t)"{ ", 2);
  if (*(_DWORD *)(a2 + 452) >= 9u) {
    uint64_t v4 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)a2;
  }
  else {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)a2;
  }
  uint64_t v5 = *(unsigned int *)(a2 + 448);
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 56 * v5;
    do
    {
      if (v6) {
        sub_216779180(a1, (uint64_t)", ", 2);
      }
      pxrInternal__aapl__pxrReserved__::operator<<(a1, v4);
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v4 + 56);
      uint64_t v6 = 1;
      v7 -= 56;
    }
    while (v7);
  }
  sub_216779180(a1, (uint64_t)" }", 2);
  return a1;
}

{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;

  uint64_t v4 = sub_216779180(a1, (uint64_t)"RenderProduct: \n", 16);
  uint64_t v5 = sub_216779180(v4, (uint64_t)"    productPath : ", 18);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  unint64_t v7 = sub_216779180(v6, (uint64_t)"    resolution : ", 17);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7);
  unint64_t v9 = sub_216779180(v8, (uint64_t)"    namespacedSettings: ", 24);
  unint64_t v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, (void **)(a2 + 112));
  sub_216779180(v10, (uint64_t)"    renderVars: \n", 17);
  if (*(void *)(a2 + 40) != *(void *)(a2 + 32))
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      sub_216779180(a1, (uint64_t)"        [", 9);
      unint64_t v13 = (void *)std::ostream::operator<<();
      uint64_t v14 = sub_216779180(v13, (uint64_t)"] ", 2);
      pxrInternal__aapl__pxrReserved__::operator<<(v14, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)(a2 + 32) + v11));
      ++v12;
      v11 += 56;
    }
    while (v12 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  }
  return a1;
}

uint64_t sub_21688E2F0(uint64_t a1, long long *a2)
{
  *(void *)a1 = a1;
  uint64_t v3 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 239) = 0;
  return a1;
}

void sub_21688E368(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)sub_21688E434(a1, a2);
  if (v6)
  {
    *uint64_t v6 = *a3;
  }
  else
  {
    sub_216779094(&__p, (char *)(a2[1] & 0x7FFFFFFFFFFFFFFFLL));
    sub_21688E4E0(a1, &__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_216779094(&__p, (char *)(a2[1] & 0x7FFFFFFFFFFFFFFFLL));
    sub_21688E5D8(a1, a2, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_21688E414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21688E434(uint64_t a1, void *a2)
{
  __p[0] = a2;
  long long v4 = sub_216877FD4((void *)(a1 + 40), __p);
  if (v4) {
    return v4[3] + 72;
  }
  sub_216779094(__p, (char *)(a2[1] & 0x7FFFFFFFFFFFFFFFLL));
  uint64_t v6 = sub_2168512B4((void *)(a1 + 80), (unsigned __int8 *)__p);
  if (v6) {
    uint64_t v5 = *((void *)v6 + 5) + 72;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_21688E4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21688E4E0(uint64_t a1, std::string *a2, void *a3)
{
  uint64_t v6 = a1 + 80;
  uint64_t result = sub_2168602D4((void *)(a1 + 80), (unsigned __int8 *)a2);
  if (result)
  {
    *(void *)(result[5] + 72) = *a3;
  }
  else
  {
    unint64_t v10 = a2;
    uint64_t v8 = sub_21688E634(a1, (unsigned __int8 *)a2, (uint64_t)&unk_2174BFD90, (long long **)&v10);
    std::string::operator=((std::string *)(v8 + 88), a2);
    *((void *)v8 + 14) = *a3;
    unint64_t v10 = a2;
    *((void *)sub_21685FAEC(v6, (unsigned __int8 *)a2, (uint64_t)&unk_2174BFD90, (long long **)&v10) + 5) = v8 + 40;
    uint64_t result = sub_21687C484((uint64_t)(v8 + 64), 0, 0, (uint64_t)a2);
    result[1] = v8 + 64;
    uint64_t v9 = *((void *)v8 + 8);
    *uint64_t result = v9;
    *(void *)(v9 + 8) = result;
    *((void *)v8 + 8) = result;
    ++*((void *)v8 + 10);
  }
  return result;
}

unsigned __int8 *sub_21688E5D8(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  uint64_t result = sub_2168602D4((void *)(a1 + 80), a3);
  if (result)
  {
    uint64_t v6 = (uint64_t *)*((void *)result + 5);
    return (unsigned __int8 *)sub_21688EAA0(a1, a2, v6);
  }
  return result;
}

unsigned __int8 *sub_21688E634(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = a2;
  uint64_t v26 = 0;
  char v27 = 0;
  uint64_t v8 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    uint64_t v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    uint64_t v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (void)v26);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v6)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_21688E8FC(a1, v10, a4, (uint64_t)&v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)uint64_t v26 = *v23;
    *uint64_t v23 = v26;
  }
  else
  {
    *(void *)uint64_t v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26)
    {
      unint64_t v24 = *(void *)(*(void *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26;
    }
  }
  uint64_t i = v26;
  uint64_t v26 = 0;
  ++*(void *)(a1 + 24);
  sub_21688E9DC((uint64_t)&v26, 0);
  return i;
}

void sub_21688E8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21688E9DC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_21688E8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x78uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + sub_216850320((uint64_t)&word_267B8E45F + 1) = a2;
  uint64_t result = sub_21688E96C((char *)v8 + 16, *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_21688E954(_Unwind_Exception *a1)
{
  sub_21688E9DC(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_21688E96C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  *((void *)__dst + 12) = 0;
  *((void *)__dst + 3) = __dst + 24;
  *((void *)__dst + 4) = __dst + 24;
  *((void *)__dst + 5) = 0;
  *((void *)__dst + 6) = __dst + 48;
  *((void *)__dst + 7) = __dst + 48;
  *((_OWORD *)__dst + 4) = 0u;
  *((_OWORD *)__dst + 5) = 0u;
  return __dst;
}

void sub_21688E9DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21688EA34((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_21688EA34(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 24);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  sub_21687B9B4((void *)(a1 + 48));
  sub_2168505B4(v2);
  if (*(char *)(a1 + 23) < 0)
  {
    long long v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *sub_21688EAA0(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = a1 + 40;
  uint64_t v9 = a2;
  uint64_t result = sub_2168503EC((void *)(a1 + 40), &v9);
  if (!result)
  {
    uint64_t v8 = a2;
    uint64_t v9 = &v8;
    sub_216850618(v5, &v8, (uint64_t)&unk_2174BFD90, &v9)[3] = a3;
    uint64_t result = operator new(0x18uLL);
    result[1] = a3;
    result[2] = a2;
    uint64_t v7 = *a3;
    *uint64_t result = *a3;
    *(void *)(v7 + 8) = result;
    *a3 = (uint64_t)result;
    ++a3[2];
  }
  return result;
}

uint64_t sub_21688EB40(uint64_t a1)
{
  sub_21688EB7C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_21688EB7C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      long long v3 = (void *)*v2;
      sub_21688EA34((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *sub_21688EBC0(void *result)
{
  if (*result == result[1])
  {
    uint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::vector<pxrInternal__aapl__pxrReserve"
            "d__::TfType>>>::operator->() [T = std::vector<std::vector<pxrInternal__aapl__pxrReserved__::TfType>>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

void *sub_21688EC4C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::vector<pxrInternal__aa"
            "pl__pxrReserved__::TfType>>>::operator++() [T = std::vector<std::vector<pxrInternal__aapl__pxrReserved__::Tf"
            "Type>>, Reverse = false]";
    char v4 = 0;
    int v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

uint64_t sub_21688ECD0(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    sub_216850298(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  sub_21688ED70(a1, a2);
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

uint64_t sub_21688ED20(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    sub_21688EDC0(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  sub_21688EE50(a1, a2);
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

uint64_t sub_21688ED70(uint64_t a1, int *a2)
{
  size_t v3 = *a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_21678A04C(a1, v3);
  return a1;
}

void sub_21688EDAC(_Unwind_Exception *a1)
{
  sub_216850298(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21688EDC0(uint64_t a1)
{
  sub_21688EDFC(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_21688EDFC(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      size_t v3 = *(char **)v2;
      char v4 = (void **)(v2 + 24);
      sub_216782F20(&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_21688EE50(uint64_t a1, int *a2)
{
  size_t v3 = *a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_21678A04C(a1, v3);
  return a1;
}

void sub_21688EE8C(_Unwind_Exception *a1)
{
  sub_21688EDC0(v1);
  _Unwind_Resume(a1);
}

void *sub_21688EEA0(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *unint64_t v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  void *v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_21688F0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_21688F108(v11, v10);
  _Unwind_Resume(a1);
}

void sub_21688F108(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    size_t v3 = __p + 3;
    sub_216782F20(&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t *sub_21688F154()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C288], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C288], 0, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688F214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688F258()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C230], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C230], (char *)1, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688F318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688F35C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C238], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C238], (char *)1, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688F41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688F460()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C228], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C228], (char *)1, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688F520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688F564()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C250], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C250], (char *)1, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688F624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688F668()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C278], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C278], (char *)2, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688F728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688F76C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C280], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C280], (char *)2, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688F82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688F870()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C258], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C258], (char *)4, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688F930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688F974()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C260], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C260], (char *)4, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688FA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688FA78()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C268], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C268], (char *)8, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688FB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688FB7C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C270], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C270], (char *)8, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688FC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688FC80()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C290], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C290], (char *)8, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688FD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688FD84()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C298], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C298], (char *)8, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688FE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688FE88()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C248], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C248], (char *)4, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21688FF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21688FF8C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName(MEMORY[0x263F8C240], (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, MEMORY[0x263F8C240], (char *)8, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689004C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216890090()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C747090, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C747090, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216890150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216890194()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C320, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C320, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216890254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216890298()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C330, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C330, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216890358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_21689039C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C340, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C340, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689045C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168904A0()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C350, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C350, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216890560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168905A4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C360, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C360, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216890664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168906A8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C370, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C370, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216890768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168907AC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C380, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C380, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689086C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168908B0()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C390, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C390, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216890970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168909B4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C3A0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C3A0, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216890A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216890AB8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C3B0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C3B0, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216890B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216890BBC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C3C0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C3C0, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216890C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216890CC0()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C3D0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C3D0, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216890D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216890DC4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C3E0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C3E0, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216890E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216890EC8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C3F0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C3F0, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216890F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216890FCC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C400, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C400, (char *)8, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689108C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_2168910D0(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_21678A04C(a1, 0);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  sub_21678A04C(a1 + 80, 0);
  return a1;
}

void sub_216891144(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  sub_216850298(v4);
  sub_216850320(v2);
  sub_21688EB40(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216891174()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216891234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21689127C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5 = a2;
  unint64_t v25 = 0;
  char v26 = 0;
  uint64_t v7 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    uint64_t v8 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    uint64_t v8 = v7;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, (pxrInternal__aapl__pxrReserved__ *)a2, v8);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * (void)v25);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v5)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_216891528(a1, v9, a3, (uint64_t)&v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)unint64_t v25 = *v22;
    uint64_t *v22 = v25;
  }
  else
  {
    *(void *)unint64_t v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25)
    {
      unint64_t v23 = *(void *)(*(void *)v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25;
    }
  }
  uint64_t i = v25;
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216891504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_2168517F0((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_216891528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    void v8[4] = *(void *)(a3 + 16);
  }
  v8[5] = *(void *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2168915B8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_2168517F0(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_2168915D4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216891634(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216891650(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  int v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    unint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      sub_21677CB10();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      BOOL v18 = (char *)sub_21677CB28(v9, v17);
    }
    else {
      BOOL v18 = 0;
    }
    uint64_t v28 = &v18[8 * v15];
    std::string __p = v18;
    int v34 = v28;
    uint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    uint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)uint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    unint64_t v35 = v30;
    int v5 = sub_216891860((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    size_t v21 = &__src[8 * a5];
    unint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    unint64_t v24 = &v5[8 * a5];
    unint64_t v25 = &v23[-8 * a5];
    char v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      char v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)char v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  size_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  unint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_216891828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216891860(void **a1, uint64_t a2, char *__src)
{
  int v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - sub_216850320((uint64_t)&word_267B8E45F + 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t sub_216891928(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168919A0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2168919A0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + sub_216850320((uint64_t)&word_267B8E45F + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  uint64_t v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216891A44((uint64_t)v11);
  return v9;
}

uint64_t sub_216891A44(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216873FFC(a1);
  }
  return a1;
}

uint64_t sub_216891A7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_2168915D4(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  sub_216891928(a1, v14);
  uint64_t v12 = a1[1];
  sub_216874044((uint64_t)v14);
  return v12;
}

void sub_216891B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216874044((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216891B94(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_216891BFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_216891C18(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_216891D24((uint64_t)&v15, (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_2168513F8(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t sub_216891D24(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_216891D64((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_216891D64(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      int64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_216892110(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_216892064(a2, a3);
  }
  else
  {
    return sub_216891F6C(a2, a3);
  }
}

unint64_t sub_216891F6C(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_216892064(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_216892110(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

unsigned __int8 *sub_2168921D0(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v7 = sub_216891D24((uint64_t)v24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (sub_2168513F8(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_216892448(a1, v8, a3, (uint64_t)v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *uint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216892558((uint64_t)v24, 0);
  return i;
}

void sub_216892430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216892558((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_216892448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + sub_216850320((uint64_t)&word_267B8E45F + 1) = a2;
  unint64_t result = sub_2168924C0((char *)v8 + 16, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2168924A8(_Unwind_Exception *a1)
{
  sub_216892558(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_2168924C0(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  uint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return __dst;
}

void sub_21689253C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216892558(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21677B5A0((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *pxrInternal__aapl__pxrReserved__::TfTypeWasDeclaredNotice::TfTypeWasDeclaredNotice(void *result, uint64_t a2)
{
  *unint64_t result = &unk_26C74C420;
  result[1] = a2;
  return result;
}

{
  *unint64_t result = &unk_26C74C420;
  result[1] = a2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfTypeWasDeclaredNotice::~TfTypeWasDeclaredNotice(pxrInternal__aapl__pxrReserved__::TfTypeWasDeclaredNotice *this)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v1);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, unsigned int a2)
{
  unsigned int v3 = a2;
  long long v4 = a1;
  if (a2 < 0x80)
  {
    char v10 = a2;
    uint64_t v5 = &v10;
    goto LABEL_5;
  }
  if (a2 < 0x800)
  {
    char v11 = (a2 >> 6) | 0xC0;
    sub_216779180(a1, (uint64_t)&v11, 1);
    char v12 = v3 & 0x3F | 0x80;
    uint64_t v5 = &v12;
LABEL_5:
    sub_216779180(v4, (uint64_t)v5, 1);
    return v4;
  }
  char v7 = 0;
  for (unsigned int i = a2; i >= 0x10000; unsigned int i = 65533)
  {
    if (HIWORD(i) <= 0x10u)
    {
      char v16 = (v3 >> 18) | 0xF0;
      sub_216779180(a1, (uint64_t)&v16, 1);
      char v17 = (v3 >> 12) & 0x3F | 0x80;
      sub_216779180(v4, (uint64_t)&v17, 1);
      char v18 = (v3 >> 6) & 0x3F | 0x80;
      sub_216779180(v4, (uint64_t)&v18, 1);
      char v19 = v3 & 0x3F | 0x80;
      unint64_t v9 = &v19;
      goto LABEL_15;
    }
    if ((v7 & 1) == 0) {
      uint64_t v2 = a1;
    }
    unsigned int v3 = 65533;
    char v7 = 1;
  }
  char v13 = (v3 >> 12) | 0xE0;
  sub_216779180(a1, (uint64_t)&v13, 1);
  char v14 = (v3 >> 6) & 0x3F | 0x80;
  sub_216779180(v4, (uint64_t)&v14, 1);
  char v15 = v3 & 0x3F | 0x80;
  unint64_t v9 = &v15;
LABEL_15:
  sub_216779180(v4, (uint64_t)v9, 1);
  if (v7) {
    return v2;
  }
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint(pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *this)
{
  uint64_t v1 = *(unsigned __int8 **)this;
  unint64_t v2 = *((void *)this + 1);
  if (*(void *)this >= v2)
  {
    unsigned int v5 = 0;
  }
  else
  {
    char v3 = *v1;
    if (((char)*v1 & 0x80000000) == 0)
    {
      if ((uint64_t)(v2 - (void)v1) >= 1) {
        return *v1;
      }
      else {
        return 65533;
      }
    }
    if ((v3 & 0xE0) == 0xC0)
    {
      unsigned int v5 = 2;
    }
    else if ((v3 & 0xF0) == 0xE0)
    {
      unsigned int v5 = 3;
    }
    else
    {
      unsigned int v5 = 4 * ((v3 & 0xF8) == 240);
    }
  }
  if ((uint64_t)(v2 - (void)v1) < v5) {
    return 65533;
  }
  if (v5 == 4)
  {
    int v11 = *v1;
    int v12 = (char)v1[1];
    int v9 = v1[2];
    unsigned int v10 = v1[3];
    if (v11 == 240)
    {
      uint64_t result = 65533;
      if ((v12 + 64) < 0xD0u) {
        return result;
      }
    }
    else if ((v11 + 15) > 2u)
    {
      if (v11 != 244) {
        return 65533;
      }
      uint64_t result = 65533;
      if (v12 > -113) {
        return result;
      }
    }
    else
    {
      uint64_t result = 65533;
      if (v12 > -65) {
        return result;
      }
    }
    if ((char)v9 < 0 && v9 <= 0xBF && (char)v10 < 0 && v10 <= 0xBF)
    {
      int v13 = ((v11 & 7) << 18) | ((v12 & 0x3F) << 12);
      return v13 & 0xFFFFF000 | ((v9 & 0x3F) << 6) | v10 & 0x3F;
    }
  }
  else
  {
    if (v5 != 3)
    {
      if (v5 == 2)
      {
        char v6 = *v1;
        if ((*v1 + 32) >= 0xE2u)
        {
          int v7 = (char)v1[1];
          if (v7 <= -65) {
            return v7 & 0x3F | ((v6 & 0x1F) << 6);
          }
        }
      }
      return 65533;
    }
    int v8 = *v1;
    int v9 = (char)v1[1];
    unsigned int v10 = v1[2];
    if (v8 == 224)
    {
      uint64_t result = 65533;
      if ((v9 + 64) < 0xE0u) {
        return result;
      }
    }
    else if ((v8 + 31) < 0xCu || (v8 & 0xFE) == 0xEE)
    {
      uint64_t result = 65533;
      if (v9 > -65) {
        return result;
      }
    }
    else
    {
      if (v8 != 237) {
        return 65533;
      }
      uint64_t result = 65533;
      if (v9 > -97) {
        return result;
      }
    }
    if ((char)v10 < 0 && v10 <= 0xBF)
    {
      int v13 = (v8 & 0xF) << 12;
      return v13 & 0xFFFFF000 | ((v9 & 0x3F) << 6) | v10 & 0x3F;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned int v1 = this;
  XidStartFlagData = pxrInternal__aapl__pxrReserved__::TfUnicodeGetXidStartFlagData(this);
  if (HIWORD(v1) > 0x10u) {
    return 0;
  }
  else {
    return (*(void *)&XidStartFlagData[((unint64_t)v1 >> 3) & 0x1FFFFFF8] >> v1) & 1;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidContinue(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned int v1 = this;
  XidContinueFlagData = pxrInternal__aapl__pxrReserved__::TfUnicodeGetXidContinueFlagData(this);
  if (HIWORD(v1) > 0x10u) {
    return 0;
  }
  else {
    return (*(void *)&XidContinueFlagData[((unint64_t)v1 >> 3) & 0x1FFFFFF8] >> v1) & 1;
  }
}

void pxrInternal__aapl__pxrReserved__::Tf_Remnant::~Tf_Remnant(pxrInternal__aapl__pxrReserved__::Tf_Remnant *this, const void *a2)
{
  *(void *)this = &unk_26C74C458;
  if (*((unsigned char *)this + 12)) {
    pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::Invoke((uint64_t)this, a2);
  }

  pxrInternal__aapl__pxrReserved__::TfSimpleRefBase::~TfSimpleRefBase(this);
}

{
  void *v2;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::Tf_Remnant::~Tf_Remnant(this, a2);

  operator delete(v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakBase::GetUniqueIdentifier(pxrInternal__aapl__pxrReserved__::TfWeakBase *this)
{
  sub_21685203C((unint64_t *)this, &v5);
  uint64_t v1 = sub_216850B68(&v5);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v3 = v5;
  if (v5 && atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return v2;
}

void sub_216892B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakBase::EnableNotification2(pxrInternal__aapl__pxrReserved__::TfWeakBase *this)
{
  sub_21685203C((unint64_t *)this, &v2);
  *(unsigned char *)(sub_216850B68(&v2) + 13) = 1;
  uint64_t result = v2;
  if (v2)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216892C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_Remnant::EnableNotification(uint64_t this)
{
  *(unsigned char *)(this + 12) = 1;
  return this;
}

uint64_t sub_216892C2C(uint64_t result)
{
  return result;
}

double *pxrInternal__aapl__pxrReserved__::GfBBox3d::_SetMatrices(pxrInternal__aapl__pxrReserved__::GfBBox3d *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  double v16 = 0.0;
  *((unsigned char *)this + 304) = 0;
  long long v3 = *((_OWORD *)a2 + 3);
  long long v5 = *(_OWORD *)a2;
  long long v4 = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 6) = v3;
  *((_OWORD *)this + 3) = v5;
  *((_OWORD *)this + 4) = v4;
  long long v6 = *((_OWORD *)a2 + 7);
  long long v8 = *((_OWORD *)a2 + 4);
  long long v7 = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 10) = v6;
  *((_OWORD *)this + 7) = v8;
  *((_OWORD *)this + 8) = v7;
  uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)a2, &v16, 1.0e-13, (uint64_t)v15);
  long long v10 = v15[5];
  *((_OWORD *)this + 15) = v15[4];
  *((_OWORD *)this + 16) = v10;
  long long v11 = v15[7];
  *((_OWORD *)this + 17) = v15[6];
  *((_OWORD *)this + 18) = v11;
  long long v12 = v15[1];
  *((_OWORD *)this + 1sub_216850320((uint64_t)&word_267B8E45F + 1) = v15[0];
  *((_OWORD *)this + 12) = v12;
  double v13 = fabs(v16);
  long long v14 = v15[3];
  *((_OWORD *)this + 13) = v15[2];
  *((_OWORD *)this + 14) = v14;
  if (v13 <= 1.0e-13)
  {
    *((unsigned char *)this + 304) = 1;
    return (double *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)this + 176, 1.0);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfBBox3d::GetVolume(pxrInternal__aapl__pxrReserved__::GfBBox3d *this)
{
  double v1 = *((double *)this + 3);
  if (*(double *)this <= v1)
  {
    double v2 = *((double *)this + 1);
    double v3 = *((double *)this + 4);
    if (v2 <= v3)
    {
      double v4 = *((double *)this + 2);
      double v5 = *((double *)this + 5);
      if (v4 <= v5) {
        fabs((v5 - v4)* ((v3 - v2)* ((v1 - *(double *)this)* pxrInternal__aapl__pxrReserved__::GfMatrix4d::_GetDeterminant3((pxrInternal__aapl__pxrReserved__::GfBBox3d *)((char *)this + 48), 0, 1, 2, 0, 1, 2))));
      }
    }
  }
}

double pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange@<D0>(pxrInternal__aapl__pxrReserved__::GfBBox3d *this@<X0>, uint64_t a2@<X8>)
{
  if (*(double *)this <= *((double *)this + 3)
    && *((double *)this + 1) <= *((double *)this + 4)
    && *((double *)this + 2) <= *((double *)this + 5))
  {
    uint64_t v4 = 0;
    double v5 = (char *)this + 48;
    uint64_t v6 = *((void *)this + 19);
    uint64_t v7 = *((void *)this + 20);
    *(void *)&long long v19 = *((void *)this + 18);
    *((void *)&v19 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v6;
    uint64_t v20 = v7;
    *(void *)&long long v17 = v19;
    *((void *)&v17 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v6;
    uint64_t v18 = v7;
    do
    {
      uint64_t v8 = 0;
      double v9 = *((double *)&v17 + v4);
      double v10 = *((double *)&v19 + v4);
      long long v11 = (double *)this;
      do
      {
        double v12 = *(double *)&v5[v8];
        double v13 = *v11 * v12;
        double v14 = v12 * v11[3];
        if (v13 >= v14) {
          double v15 = v14;
        }
        else {
          double v15 = v13;
        }
        if (v13 >= v14) {
          double v14 = v13;
        }
        double v10 = v15 + v10;
        double v9 = v14 + v9;
        ++v11;
        v8 += 32;
      }
      while (v8 != 96);
      *((double *)&v19 + v4) = v10;
      *((double *)&v17 + v4++) = v9;
      v5 += 8;
    }
    while (v4 != 3);
    *(_OWORD *)a2 = v19;
    *(void *)(a2 + 16) = v20;
    *(void *)&long long v3 = v17;
    *(_OWORD *)(a2 + 24) = v17;
    *(void *)(a2 + 40) = v18;
  }
  else
  {
    long long v2 = *((_OWORD *)this + 1);
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_OWORD *)(a2 + 16) = v2;
    long long v3 = *((_OWORD *)this + 2);
    *(_OWORD *)(a2 + 32) = v3;
  }
  return *(double *)&v3;
}

void *pxrInternal__aapl__pxrReserved__::GfBBox3d::Combine@<X0>(pxrInternal__aapl__pxrReserved__::GfBBox3d *this@<X0>, const pxrInternal__aapl__pxrReserved__::GfBBox3d *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216893518(a3);
  if (*(double *)this <= *((double *)this + 3)
    && *((double *)this + 1) <= *((double *)this + 4)
    && *((double *)this + 2) <= *((double *)this + 5))
  {
    if (*(double *)a2 > *((double *)a2 + 3)
      || *((double *)a2 + 1) > *((double *)a2 + 4)
      || *((double *)a2 + 2) > *((double *)a2 + 5))
    {
      uint64_t v7 = (void *)a3;
      uint64_t v8 = this;
      goto LABEL_5;
    }
    if (*((unsigned char *)this + 304))
    {
      if (*((unsigned char *)a2 + 304))
      {
        pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange(this, (uint64_t)&v22);
        pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange(a2, (uint64_t)&v25);
        *(void *)&v10.f64[0] = v26.i64[0];
        *(void *)&v10.f64[1] = v23.i64[1];
        *(void *)&v11.f64[0] = v23.i64[0];
        *(void *)&v11.f64[1] = v26.i64[1];
        v28[0] = vbslq_s8((int8x16_t)vcgtq_f64(v22, v25), (int8x16_t)v25, (int8x16_t)v22);
        v28[1] = vbslq_s8((int8x16_t)vcgtq_f64(v11, v10), v26, v23);
        uint64_t v28[2] = vbslq_s8((int8x16_t)vcgtq_f64(v27, v24), (int8x16_t)v27, (int8x16_t)v24);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v29, 1.0);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v30, 1.0);
        v30[64] = 0;
LABEL_17:
        uint64_t v8 = (pxrInternal__aapl__pxrReserved__::GfBBox3d *)v28;
LABEL_18:
        uint64_t v7 = (void *)a3;
        goto LABEL_5;
      }
      double v12 = a2;
      double v13 = this;
    }
    else
    {
      if (!*((unsigned char *)a2 + 304))
      {
        pxrInternal__aapl__pxrReserved__::GfBBox3d::_CombineInOrder(this, a2, v28);
        pxrInternal__aapl__pxrReserved__::GfBBox3d::_CombineInOrder(a2, this, &v22);
        pxrInternal__aapl__pxrReserved__::GfBBox3d::GetVolume((pxrInternal__aapl__pxrReserved__::GfBBox3d *)v28);
        double v15 = v14;
        pxrInternal__aapl__pxrReserved__::GfBBox3d::GetVolume((pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v22);
        BOOL v17 = v15 < v16;
        if (v15 >= v16) {
          double v18 = v15;
        }
        else {
          double v18 = v16;
        }
        double v19 = fmax(fabs(v18) * 0.000001, 1.0e-10);
        double v20 = vabdd_f64(v15, v16);
        if (!v17 && v20 > v19) {
          uint64_t v8 = (pxrInternal__aapl__pxrReserved__::GfBBox3d *)&v22;
        }
        else {
          uint64_t v8 = (pxrInternal__aapl__pxrReserved__::GfBBox3d *)v28;
        }
        goto LABEL_18;
      }
      double v12 = this;
      double v13 = a2;
    }
    pxrInternal__aapl__pxrReserved__::GfBBox3d::_CombineInOrder(v12, v13, v28);
    goto LABEL_17;
  }
  uint64_t v7 = (void *)a3;
  uint64_t v8 = a2;
LABEL_5:
  uint64_t result = memcpy(v7, v8, 0x132uLL);
  *(unsigned char *)(a3 + 305) = (*((unsigned __int8 *)this + 305) | *((unsigned __int8 *)a2 + 305)) != 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfBBox3d::_CombineInOrder@<X0>(pxrInternal__aapl__pxrReserved__::GfBBox3d *this@<X0>, const pxrInternal__aapl__pxrReserved__::GfBBox3d *a2@<X1>, void *a3@<X8>)
{
  sub_216893518((uint64_t)v28);
  long long v7 = *((_OWORD *)a2 + 1);
  v28[0] = *(_OWORD *)a2;
  v28[1] = v7;
  long long v8 = *((_OWORD *)a2 + 3);
  uint64_t v28[2] = *((_OWORD *)a2 + 2);
  long long v9 = *((_OWORD *)a2 + 8);
  long long v10 = *((_OWORD *)a2 + 9);
  long long v11 = *((_OWORD *)a2 + 6);
  long long v24 = *((_OWORD *)a2 + 7);
  long long v25 = v9;
  long long v12 = *((_OWORD *)a2 + 10);
  long long v26 = v10;
  long long v27 = v12;
  long long v13 = *((_OWORD *)a2 + 4);
  long long v14 = *((_OWORD *)a2 + 5);
  long long v20 = v8;
  long long v21 = v13;
  long long v22 = v14;
  long long v23 = v11;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v20, (double *)this + 22);
  v28[7] = v24;
  void v28[8] = v25;
  v28[9] = v26;
  v28[10] = v27;
  _OWORD v28[3] = v20;
  v28[4] = v21;
  v28[5] = v22;
  v28[6] = v23;
  long long v15 = *((_OWORD *)this + 8);
  long long v24 = *((_OWORD *)this + 7);
  long long v25 = v15;
  long long v16 = *((_OWORD *)this + 10);
  long long v26 = *((_OWORD *)this + 9);
  long long v27 = v16;
  long long v17 = *((_OWORD *)this + 4);
  long long v20 = *((_OWORD *)this + 3);
  long long v21 = v17;
  long long v18 = *((_OWORD *)this + 6);
  long long v22 = *((_OWORD *)this + 5);
  long long v23 = v18;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v20, (double *)a2 + 22);
  unsigned char v28[15] = v24;
  v28[16] = v25;
  v28[17] = v26;
  v28[18] = v27;
  v28[11] = v20;
  v28[12] = v21;
  v28[13] = v22;
  v28[14] = v23;
  pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeAlignedRange((pxrInternal__aapl__pxrReserved__::GfBBox3d *)v28, (uint64_t)&v20);
  memcpy(a3, this, 0x138uLL);
  return sub_2168931C0((uint64_t)a3, (uint64_t)&v20);
}

uint64_t sub_2168931C0(uint64_t result, uint64_t a2)
{
  if (*(double *)a2 < *(double *)result) {
    *(void *)uint64_t result = *(void *)a2;
  }
  double v2 = *(double *)(a2 + 8);
  if (v2 < *(double *)(result + 8)) {
    *(double *)(result + 8) = v2;
  }
  double v3 = *(double *)(a2 + 16);
  if (v3 < *(double *)(result + 16)) {
    *(double *)(result + 16) = v3;
  }
  double v4 = *(double *)(a2 + 24);
  if (v4 > *(double *)(result + 24)) {
    *(double *)(result + 24) = v4;
  }
  double v5 = *(double *)(a2 + 32);
  if (v5 > *(double *)(result + 32)) {
    *(double *)(result + 32) = v5;
  }
  double v6 = *(double *)(a2 + 40);
  if (v6 > *(double *)(result + 40)) {
    *(double *)(result + 40) = v6;
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfBBox3d::ComputeCentroid(pxrInternal__aapl__pxrReserved__::GfBBox3d *this)
{
  double v1 = (*((double *)this + 5) + *((double *)this + 2)) * 0.5;
  __asm { FMOV            V2.2D, #0.5 }
  float64x2_t v8 = vmulq_f64(vaddq_f64(*(float64x2_t *)((char *)this + 24), *(float64x2_t *)this), _Q2);
  double v9 = v1;
  return sub_216893298((double *)this + 6, v8.f64);
}

double sub_216893298(double *a1, double *a2)
{
  double v2 = a2[1];
  double v3 = a2[2];
  double v4 = a1[12] + *a2 * *a1 + v2 * a1[4] + v3 * a1[8];
  double v5 = a1[15] + *a2 * a1[3] + v2 * a1[7] + v3 * a1[11];
  double v6 = 1.0 / v5;
  if (v5 == 0.0) {
    double v6 = 1.0;
  }
  return v4 * v6;
}

uint64_t *sub_216893414()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C490, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C490, (char *)0x138, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168934D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216893518(uint64_t a1)
{
  *(int64x2_t *)a1 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  *(_OWORD *)(a1 + 16) = xmmword_217412860;
  *(int64x2_t *)(a1 + 32) = vdupq_n_s64(0xC7EFFFFFE0000000);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(a1 + 48, 1.0);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(a1 + 176, 1.0);
  *(_WORD *)(a1 + 304) = 0;
  return a1;
}

void sub_216893580()
{
  sub_216779094(v2, "GfCamera::Perspective");
  sub_216779094(__p, "perspective");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74C4A0, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GfCamera::Orthographic");
  sub_216779094(__p, "orthographic");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74C4A0, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GfCamera::FOVHorizontal");
  sub_216779094(__p, "FOVHorizontal");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74C4B0, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "GfCamera::FOVVertical");
  sub_216779094(__p, "FOVVertical");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74C4B0, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216893704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GfCamera(uint64_t a1, long long *a2, int a3, void *a4, uint64_t a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  long long v15 = *a2;
  long long v16 = a2[1];
  long long v17 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  long long v18 = a2[4];
  long long v19 = a2[5];
  long long v20 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 80) = v19;
  *(_DWORD *)(a1 + 128) = a3;
  *(float *)(a1 + 132) = a6;
  *(float *)(a1 + 136) = a7;
  *(float *)(a1 + 140) = a8;
  *(float *)(a1 + 144) = a9;
  *(float *)(a1 + 148) = a10;
  *(void *)(a1 + 152) = *a4;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  sub_216893F58((void *)(a1 + 160), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 4);
  *(float *)(a1 + 184) = a11;
  *(float *)(a1 + 188) = a12;
  return a1;
}

{
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;

  long long v15 = *a2;
  long long v16 = a2[1];
  long long v17 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  long long v18 = a2[4];
  long long v19 = a2[5];
  long long v20 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 80) = v19;
  *(_DWORD *)(a1 + 128) = a3;
  *(float *)(a1 + 132) = a6;
  *(float *)(a1 + 136) = a7;
  *(float *)(a1 + 140) = a8;
  *(float *)(a1 + 144) = a9;
  *(float *)(a1 + 148) = a10;
  *(void *)(a1 + 152) = *a4;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  sub_216893F58((void *)(a1 + 160), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 4);
  *(float *)(a1 + 184) = a11;
  *(float *)(a1 + 188) = a12;
  return a1;
}

__n128 pxrInternal__aapl__pxrReserved__::GfCamera::SetTransform(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetProjection(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 128) = *a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetHorizontalAperture(uint64_t this, float a2)
{
  *(float *)(this + 132) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetVerticalAperture(uint64_t this, float a2)
{
  *(float *)(this + 136) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetHorizontalApertureOffset(uint64_t this, float a2)
{
  *(float *)(this + 140) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetVerticalApertureOffset(uint64_t this, float a2)
{
  *(float *)(this + 144) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetFocalLength(uint64_t this, float a2)
{
  *(float *)(this + 148) = a2;
  return this;
}

void pxrInternal__aapl__pxrReserved__::GfCamera::SetPerspectiveFromAspectRatioAndFieldOfView(uint64_t a1, int a2, float a3, float a4, float a5)
{
  *(_DWORD *)(a1 + 128) = 0;
  double v8 = a5;
  double v9 = a3;
  BOOL v10 = a3 == 0.0;
  double v11 = 1.0;
  if (!v10) {
    double v11 = v9;
  }
  float v12 = v8 / v11;
  *(float *)(a1 + 132) = a5;
  *(float *)(a1 + 136) = v12;
  float v13 = tan(a4 * 0.0174532925 * 0.5);
  if (v13 == 0.0)
  {
    float v14 = 50.0;
  }
  else
  {
    if (a2) {
      float v15 = v12;
    }
    else {
      float v15 = a5;
    }
    float v14 = v15 * 0.1 / (float)(v13 + v13) / 0.1;
  }
  *(float *)(a1 + 148) = v14;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetOrthographicFromAspectRatioAndSize(uint64_t result, int a2, float a3, float a4)
{
  *(_DWORD *)(result + 128) = 1;
  *(_DWORD *)(result + 148) = 1112014848;
  float v4 = a4 / 0.1;
  if (a2)
  {
    *(float *)(result + 132) = v4 * a3;
    *(float *)(result + 136) = v4;
  }
  else
  {
    *(float *)(result + 132) = v4;
    if (a3 <= 0.0) {
      *(float *)(result + 136) = v4;
    }
    else {
      *(float *)(result + 136) = v4 / a3;
    }
  }
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfCamera::SetFromViewAndProjectionMatrix(pxrInternal__aapl__pxrReserved__::GfCamera *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2, float64x2_t *a3, float a4)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)a2, 0, 0.0, (uint64_t)&v29);
  long long v8 = v34;
  *((_OWORD *)this + 4) = v33;
  *((_OWORD *)this + 5) = v8;
  long long v9 = v36;
  *((_OWORD *)this + 6) = v35;
  *((_OWORD *)this + 7) = v9;
  long long v10 = v30;
  *(_OWORD *)this = v29;
  *((_OWORD *)this + sub_216850320((uint64_t)&word_267B8E45F + 1) = v10;
  long long v11 = v32;
  *((_OWORD *)this + 2) = v31;
  *((_OWORD *)this + 3) = v11;
  *((float *)this + 37) = a4;
  double v12 = a3[5].f64[1];
  if (v12 >= -0.5)
  {
    if (fabs(v12) >= 0.000001)
    {
      *(void *)&long long v29 = "gf/camera.cpp";
      *((void *)&v29 + sub_216850320((uint64_t)&word_267B8E45F + 1) = "SetFromViewAndProjectionMatrix";
      *(void *)&long long v30 = 218;
      *((void *)&v30 + sub_216850320((uint64_t)&word_267B8E45F + 1) = "void pxrInternal__aapl__pxrReserved__::GfCamera::SetFromViewAndProjectionMatrix(const GfMa"
                              "trix4d &, const GfMatrix4d &, const float)";
      LOBYTE(v3sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v29, (pxrInternal__aapl__pxrReserved__ *)"GfCamera: Given projection matrix does not appear to be valid orthographic matrix.", v7);
    }
    *((_DWORD *)this + 32) = 1;
    float64x2_t v23 = *a3;
    v23.f64[1] = a3[2].f64[1];
    __asm { FMOV            V1.2D, #20.0 }
    *(float32x2_t *)&v23.f64[0] = vcvt_f32_f64(vdivq_f64(_Q1, v23));
    *(float64_t *)((char *)this + 132) = v23.f64[0];
    __asm { FMOV            V1.2D, #-0.5 }
    *(float32x2_t *)((char *)this + 140) = vcvt_f32_f64(vmulq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)&v23.f64[0]), _Q1), a3[6]));
    _Q1.f64[0] = 1.0 / a3[5].f64[0];
    float64_t v26 = _Q1.f64[0] * a3[7].f64[0];
    double v21 = _Q1.f64[0] + v26;
    double v22 = v26 - _Q1.f64[0];
  }
  else
  {
    if (fabs(v12 + 1.0) >= 0.000001)
    {
      *(void *)&long long v29 = "gf/camera.cpp";
      *((void *)&v29 + sub_216850320((uint64_t)&word_267B8E45F + 1) = "SetFromViewAndProjectionMatrix";
      *(void *)&long long v30 = 196;
      *((void *)&v30 + sub_216850320((uint64_t)&word_267B8E45F + 1) = "void pxrInternal__aapl__pxrReserved__::GfCamera::SetFromViewAndProjectionMatrix(const GfMa"
                              "trix4d &, const GfMatrix4d &, const float)";
      LOBYTE(v3sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v29, (pxrInternal__aapl__pxrReserved__ *)"GfCamera: Given projection matrix does not appear to be valid perspective matrix.", v7);
    }
    *((_DWORD *)this + 32) = 0;
    float64x2_t v13 = *a3;
    v13.f64[1] = a3[2].f64[1];
    float32x2_t v14 = vcvt_f32_f64(vdivq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64((float)(a4 + a4)), 0), v13));
    *(float32x2_t *)((char *)this + 132) = v14;
    __asm { FMOV            V1.2D, #0.5 }
    *(float32x2_t *)((char *)this + 140) = vcvt_f32_f64(vmulq_f64(vmulq_f64(vcvtq_f64_f32(v14), _Q1), a3[4]));
    _Q1.f64[0] = a3[7].f64[0];
    double v20 = a3[5].f64[0];
    double v21 = _Q1.f64[0] / (v20 + -1.0);
    double v22 = _Q1.f64[0] / (v20 + 1.0);
  }
  float result = v21;
  float v28 = v22;
  *((float *)this + 38) = result;
  *((float *)this + 39) = v28;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetClippingRange(uint64_t result, void *a2)
{
  *(void *)(result + 152) = *a2;
  return result;
}

char *pxrInternal__aapl__pxrReserved__::GfCamera::SetClippingPlanes(uint64_t a1, uint64_t a2)
{
  float result = (char *)(a1 + 160);
  if (result != (char *)a2) {
    return sub_216893FD4(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetFStop(uint64_t this, float a2)
{
  *(float *)(this + 184) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::SetFocusDistance(uint64_t this, float a2)
{
  *(float *)(this + 188) = a2;
  return this;
}

__n128 pxrInternal__aapl__pxrReserved__::GfCamera::GetTransform@<Q0>(pxrInternal__aapl__pxrReserved__::GfCamera *this@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *((_OWORD *)this + 5);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 4);
  *(_OWORD *)(a2 + 80) = v2;
  long long v3 = *((_OWORD *)this + 7);
  *(_OWORD *)(a2 + 96) = *((_OWORD *)this + 6);
  *(_OWORD *)(a2 + 112) = v3;
  long long v4 = *((_OWORD *)this + 1);
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = *((__n128 *)this + 2);
  long long v6 = *((_OWORD *)this + 3);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GetProjection(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((unsigned int *)this + 32);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalAperture(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 33);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalAperture(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 34);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetHorizontalApertureOffset(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 35);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetVerticalApertureOffset(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 36);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetAspectRatio(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  float v1 = *((float *)this + 34);
  float result = 0.0;
  if (v1 != 0.0) {
    return *((float *)this + 33) / v1;
  }
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetFocalLength(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 37);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetFieldOfView(uint64_t a1, int a2)
{
  uint64_t v2 = 136;
  if (!a2) {
    uint64_t v2 = 132;
  }
  long double v3 = atan(*(float *)(a1 + v2) * 0.1 / ((float)(*(float *)(a1 + 148) + *(float *)(a1 + 148)) * 0.1));
  *(float *)&long double v3 = v3 + v3;
  return *(float *)&v3 * 57.2957795;
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetClippingRange(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 38);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GetClippingPlanes(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return (uint64_t)this + 160;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::GetFrustum@<X0>(pxrInternal__aapl__pxrReserved__::GfCamera *this@<X0>, uint64_t a2@<X8>)
{
  float64x2_t v4 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)((char *)this + 132), (float32x2_t)0x3F0000003F000000));
  float64x2_t v5 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 140));
  float64x2_t v6 = (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL);
  float64x2_t v7 = vmulq_f64(vsubq_f64(v5, v4), v6);
  float64x2_t v8 = vmulq_f64(vaddq_f64(v4, v5), v6);
  float64x2_t v16 = v7;
  float64x2_t v17 = v8;
  int v9 = *((_DWORD *)this + 32);
  if (v9 != 1)
  {
    float v10 = *((float *)this + 37);
    if (v10 != 0.0)
    {
      double v11 = 1.0 / (v10 * 0.1);
      if (v11 <= 0.0)
      {
        float64x2_t v16 = vmulq_n_f64(v8, v11);
        double v13 = v11 * v7.f64[0];
        double v12 = vmuld_lane_f64(v11, v7, 1);
        v17.f64[0] = v13;
      }
      else
      {
        float64x2_t v16 = vmulq_n_f64(v7, v11);
        v17.f64[0] = v11 * v8.f64[0];
        double v12 = vmuld_lane_f64(v11, v8, 1);
      }
      v17.f64[1] = v12;
    }
  }
  float64x2_t v15 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 152));
  return pxrInternal__aapl__pxrReserved__::GfFrustum::GfFrustum(a2, this, (long long *)&v16, &v15, v9 != 1, 5.0);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetFStop(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 46);
}

float pxrInternal__aapl__pxrReserved__::GfCamera::GetFocusDistance(pxrInternal__aapl__pxrReserved__::GfCamera *this)
{
  return *((float *)this + 47);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==((double *)a1, (double *)a2);
  if (result)
  {
    if (*(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128)
      || *(float *)(a1 + 132) != *(float *)(a2 + 132)
      || *(float *)(a1 + 136) != *(float *)(a2 + 136)
      || *(float *)(a1 + 140) != *(float *)(a2 + 140)
      || *(float *)(a1 + 144) != *(float *)(a2 + 144)
      || *(float *)(a1 + 148) != *(float *)(a2 + 148)
      || *(float *)(a1 + 152) != *(float *)(a2 + 152)
      || *(float *)(a1 + 156) != *(float *)(a2 + 156))
    {
      return 0;
    }
    uint64_t result = sub_216893EC0((float **)(a1 + 160), a2 + 160);
    if (!result) {
      return result;
    }
    return *(float *)(a1 + 184) == *(float *)(a2 + 184) && *(float *)(a1 + 188) == *(float *)(a2 + 188);
  }
  return result;
}

uint64_t sub_216893EC0(float **a1, uint64_t a2)
{
  long double v3 = *a1;
  uint64_t v2 = a1[1];
  float64x2_t v4 = *(float **)a2;
  if ((char *)v2 - (char *)*a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4 || v3[1] != v4[1] || v3[2] != v4[2] || v3[3] != v4[3]) {
      return 0;
    }
    v3 += 4;
    v4 += 4;
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfCamera::operator!=(uint64_t a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::GfCamera::operator==(a1, a2) ^ 1;
}

void *sub_216893F58(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float64x2_t v6 = result;
    uint64_t result = sub_21682BF78(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_216893FB8(_Unwind_Exception *exception_object)
{
  long double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216893FD4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + sub_216850320((uint64_t)&word_267B8E45F + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      _OWORD v7[2] = 0;
    }
    if (a4 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_21682BF78(v7, v11);
    double v13 = (char *)v7[1];
    double v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  double v12 = (void **)(result + 8);
  float32x2_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  float64x2_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    long long v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  pxrInternal__aapl__pxrReserved__::GfBBox3d *v12 = &v9[v17];
  return result;
}

float64x2_t *pxrInternal__aapl__pxrReserved__::GfDualQuatd::GfDualQuatd(float64x2_t *this, float32x2_t *a2)
{
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v4 + 2, a2 + 2);
  return this;
}

{
  float64x2_t *v4;

  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v4 + 2, a2 + 2);
  return this;
}

pxrInternal__aapl__pxrReserved__::GfDualQuatd *pxrInternal__aapl__pxrReserved__::GfDualQuatd::GfDualQuatd(pxrInternal__aapl__pxrReserved__::GfDualQuatd *this, const pxrInternal__aapl__pxrReserved__::GfDualQuath *a2)
{
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd((double *)this, (unsigned __int16 *)a2);
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd((double *)(v4 + 32), (unsigned __int16 *)a2 + 4);
  return this;
}

{
  uint64_t v4;

  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd((double *)this, (unsigned __int16 *)a2);
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd((double *)(v4 + 32), (unsigned __int16 *)a2 + 4);
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetLength(pxrInternal__aapl__pxrReserved__::GfDualQuatd *this)
{
  double v1 = sqrt(*(double *)this * *(double *)this+ *((double *)this + 1) * *((double *)this + 1)+ *((double *)this + 2) * *((double *)this + 2)+ *((double *)this + 3) * *((double *)this + 3));
  double result = 0.0;
  if (v1 != 0.0) {
    return v1;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetNormalized(pxrInternal__aapl__pxrReserved__::GfDualQuatd *this@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v3;
  long long v4 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v4;
  pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize((float64x2_t *)a3, a2);
}

void pxrInternal__aapl__pxrReserved__::GfDualQuatd::Normalize(float64x2_t *this, double a2)
{
  double Length = pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetLength((pxrInternal__aapl__pxrReserved__::GfDualQuatd *)this);
  if (Length >= a2)
  {
    float64x2_t v6 = vmulq_n_f64(*this, 1.0 / Length);
    float64x2_t v7 = this[3];
    float64x2_t v8 = vmulq_n_f64(this[2], 1.0 / Length);
    float64x2_t v9 = vmulq_f64(v6, v8);
    float64x2_t v10 = vmulq_n_f64(this[1], 1.0 / Length);
    *this = v6;
    this[1] = v10;
    float64x2_t v11 = vmulq_n_f64(v7, 1.0 / Length);
    float64x2_t v12 = vmulq_f64(v10, v11);
    *(void *)&v12.f64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1), vaddq_f64(vaddq_f64(v9, (float64x2_t)vdupq_laneq_s64((int64x2_t)v9, 1)), v12));
    float64x2_t v5 = vsubq_f64(v11, vmulq_n_f64(v10, v12.f64[0]));
    this[2] = vsubq_f64(v8, vmulq_n_f64(v6, v12.f64[0]));
  }
  else
  {
    this->f64[0] = 0.0;
    this->f64[1] = 0.0;
    this[1].f64[0] = 0.0;
    this[1].f64[1] = 1.0;
    float64x2_t v5 = 0uLL;
    this[2] = 0u;
  }
  this[3] = v5;
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetConjugate@<Q0>(pxrInternal__aapl__pxrReserved__::GfDualQuatd *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 3);
  double v3 = -*((double *)this + 2);
  uint64_t v4 = *((void *)this + 7);
  double v5 = -*((double *)this + 6);
  *(float64x2_t *)a2 = vnegq_f64(*(float64x2_t *)this);
  *(double *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v2;
  float64x2_t result = vnegq_f64(*((float64x2_t *)this + 2));
  *(float64x2_t *)(a2 + 32) = result;
  *(double *)(a2 + 48) = v5;
  *(void *)(a2 + 56) = v4;
  return result;
}

float64x2_t *pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetInverse@<X0>(float64x2_t *this@<X0>, uint64_t a2@<X8>)
{
  float64x2_t v2 = *this;
  double v3 = this[1].f64[0];
  double v4 = this[1].f64[1];
  double v5 = vaddvq_f64(vmulq_f64(v2, v2)) + v3 * v3 + v4 * v4;
  if (v5 <= 0.0)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    double v9 = 1.0;
  }
  else
  {
    double v6 = 1.0 / v5;
    double v8 = this[3].f64[0];
    double v7 = this[3].f64[1];
    double v9 = v4 * (1.0 / v5);
    double v10 = -(v3 * v6);
    double v11 = v6 * v7;
    double v12 = v4 * v7;
    *(double *)(a2 + 16) = v10;
    float64x2_t v13 = this[2];
    float64x2_t v14 = vmulq_n_f64(vnegq_f64(v2), v6);
    double v15 = (v6 + v6) * (vaddvq_f64(vmulq_f64(v2, v13)) + v3 * v8 + v12);
    *(float64x2_t *)a2 = v14;
    *(float64x2_t *)(a2 + 32) = vsubq_f64(vmulq_n_f64(vnegq_f64(v13), v6), vmulq_n_f64(v14, v15));
    *(double *)(a2 + 48) = -(v8 * v6) - v10 * v15;
    *(double *)(a2 + 56) = v11 - v9 * v15;
  }
  *(double *)(a2 + 24) = v9;
  return this;
}

__n128 pxrInternal__aapl__pxrReserved__::GfDualQuatd::SetTranslation(uint64_t a1, float64x2_t *a2)
{
  double v3 = a2[1].f64[0];
  __asm { FMOV            V3.2D, #0.5 }
  float64x2_t v12 = vmulq_f64(*a2, _Q3);
  double v13 = v3 * 0.5;
  uint64_t v14 = 0;
  pxrInternal__aapl__pxrReserved__::GfQuatd::operator*=(v12.f64, (double *)a1);
  __n128 result = *(__n128 *)v9;
  long long v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 48) = v11;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetTranslation(pxrInternal__aapl__pxrReserved__::GfDualQuatd *this)
{
  return (*((double *)this + 7) * *(double *)this
        - *((double *)this + 3) * *((double *)this + 4)
        + *((double *)this + 5) * *((double *)this + 2)
        - *((double *)this + 6) * *((double *)this + 1))
       * -2.0;
}

long long *pxrInternal__aapl__pxrReserved__::GfDualQuatd::operator*=(long long *a1, double *a2)
{
  long long v4 = a1[1];
  long long v18 = *a1;
  long long v19 = v4;
  pxrInternal__aapl__pxrReserved__::GfQuatd::operator*=((double *)&v18, a2);
  uint64_t v6 = *((void *)v5 + 2);
  uint64_t v7 = *((void *)v5 + 3);
  long long v8 = a1[1];
  long long v17 = *v5;
  long long v18 = *a1;
  long long v19 = v8;
  pxrInternal__aapl__pxrReserved__::GfQuatd::operator*=((double *)&v18, a2 + 4);
  float64x2_t v15 = v9[1];
  float64x2_t v16 = *v9;
  long long v10 = a1[3];
  long long v18 = a1[2];
  long long v19 = v10;
  pxrInternal__aapl__pxrReserved__::GfQuatd::operator*=((double *)&v18, a2);
  float64x2_t v12 = vaddq_f64(v16, *v11);
  float64x2_t v13 = vaddq_f64(v15, v11[1]);
  *a1 = v17;
  *((void *)a1 + 2) = v6;
  *((void *)a1 + 3) = v7;
  a1[2] = (__int128)v12;
  a1[3] = (__int128)v13;
  return a1;
}

double pxrInternal__aapl__pxrReserved__::GfDualQuatd::Transform(double *a1, double *a2)
{
  double v3 = pxrInternal__aapl__pxrReserved__::GfQuatd::Transform(a1, a2);
  return v3
       + pxrInternal__aapl__pxrReserved__::GfDualQuatd::GetTranslation((pxrInternal__aapl__pxrReserved__::GfDualQuatd *)a1);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, long long *a2)
{
  LOBYTE(v11[0]) = 40;
  double v3 = sub_216779180(a1, (uint64_t)v11, 1);
  long long v4 = a2[1];
  v11[0] = *a2;
  v11[1] = v4;
  double v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, v11);
  uint64_t v6 = sub_216779180(v5, (uint64_t)", ", 2);
  long long v7 = a2[3];
  v10[0] = a2[2];
  v10[1] = v7;
  long long v8 = pxrInternal__aapl__pxrReserved__::operator<<(v6, v10);
  char v12 = 41;
  return sub_216779180(v8, (uint64_t)&v12, 1);
}

{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  long long v8;
  void *v9;
  void *v10;
  long long v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void **v18;
  uint64_t v19;
  void *v20;
  void *__p[2];
  unsigned __int8 v23;
  long long v24;
  _OWORD v25[2];
  long long v26[2];
  long long v27;
  uint64_t v28;
  char v29;

  LOBYTE(v26[0]) = 91;
  long long v4 = sub_216779180(a1, (uint64_t)v26, 1);
  double v5 = *((void *)a2 + 2);
  long long v27 = *a2;
  float v28 = v5;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(v4, (double *)&v27);
  long long v7 = sub_216779180(v6, (uint64_t)" ", 1);
  long long v8 = *(long long *)((char *)a2 + 40);
  v26[0] = *(long long *)((char *)a2 + 24);
  v26[1] = v8;
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::operator<<(v7, v26);
  long long v10 = sub_216779180(v9, (uint64_t)" ", 1);
  long long v11 = *(long long *)((char *)a2 + 72);
  v25[0] = *(long long *)((char *)a2 + 56);
  v25[1] = v11;
  char v12 = pxrInternal__aapl__pxrReserved__::operator<<(v10, v25);
  float64x2_t v13 = sub_216779180(v12, (uint64_t)" ", 1);
  long long v24 = *(long long *)((char *)a2 + 88);
  uint64_t v14 = pxrInternal__aapl__pxrReserved__::operator<<(v13, (double *)&v24);
  float64x2_t v15 = sub_216779180(v14, (uint64_t)" ", 1);
  float64x2_t v16 = pxrInternal__aapl__pxrReserved__::operator<<(v15, *((double *)a2 + 13));
  long long v17 = sub_216779180(v16, (uint64_t)" ", 1);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C74C500, *((unsigned int *)a2 + 28), (uint64_t)__p);
  if ((v23 & 0x80u) == 0) {
    long long v18 = __p;
  }
  else {
    long long v18 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    long long v19 = v23;
  }
  else {
    long long v19 = (uint64_t)__p[1];
  }
  double v20 = sub_216779180(v17, (uint64_t)v18, v19);
  long long v29 = 93;
  sub_216779180(v20, (uint64_t)&v29, 1);
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  long long v9;
  uint64_t v10;
  char v11;

  LOBYTE(v9) = 91;
  double v3 = sub_216779180(a1, (uint64_t)&v9, 1);
  long long v4 = *((void *)a2 + 2);
  uint64_t v9 = *a2;
  long long v10 = v4;
  double v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, (double *)&v9);
  uint64_t v6 = sub_216779180(v5, (uint64_t)" ", 1);
  long long v7 = pxrInternal__aapl__pxrReserved__::operator<<(v6, *((double *)a2 + 3));
  long long v11 = 93;
  return sub_216779180(v7, (uint64_t)&v11, 1);
}

{
  uint64_t v2;
  uint64_t v4;
  long long v5;
  uint64_t v6;

  float64x2_t v2 = *((void *)a2 + 2);
  long long v4 = *((void *)a2 + 3);
  double v5 = *a2;
  uint64_t v6 = v2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a1, (double *)&v4);
}

{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  long long v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  char v14;

  LOBYTE(v12) = 91;
  double v3 = sub_216779180(a1, (uint64_t)&v12, 1);
  long long v4 = *((void *)a2 + 2);
  char v12 = *a2;
  float64x2_t v13 = v4;
  double v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, (double *)&v12);
  uint64_t v6 = sub_216779180(v5, (uint64_t)"...", 3);
  long long v7 = *((void *)a2 + 5);
  long long v10 = *(long long *)((char *)a2 + 24);
  long long v11 = v7;
  long long v8 = pxrInternal__aapl__pxrReserved__::operator<<(v6, (double *)&v10);
  uint64_t v14 = 93;
  return sub_216779180(v8, (uint64_t)&v14, 1);
}

{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  long long v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  char v14;

  LOBYTE(v12) = 91;
  double v3 = sub_216779180(a1, (uint64_t)&v12, 1);
  long long v4 = *((void *)a2 + 2);
  char v12 = *a2;
  float64x2_t v13 = v4;
  double v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, (double *)&v12);
  uint64_t v6 = sub_216779180(v5, (uint64_t)" >> ", 4);
  long long v7 = *((void *)a2 + 5);
  long long v10 = *(long long *)((char *)a2 + 24);
  long long v11 = v7;
  long long v8 = pxrInternal__aapl__pxrReserved__::operator<<(v6, (double *)&v10);
  uint64_t v14 = 93;
  return sub_216779180(v8, (uint64_t)&v14, 1);
}

{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  long long v9;
  uint64_t v10;
  char v11;

  LOBYTE(v9) = 91;
  double v3 = sub_216779180(a1, (uint64_t)&v9, 1);
  long long v4 = *((void *)a2 + 2);
  uint64_t v9 = *a2;
  long long v10 = v4;
  double v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, (double *)&v9);
  uint64_t v6 = sub_216779180(v5, (uint64_t)" ", 1);
  long long v7 = pxrInternal__aapl__pxrReserved__::operator<<(v6, *((double *)a2 + 3));
  long long v11 = 93;
  return sub_216779180(v7, (uint64_t)&v11, 1);
}

uint64_t *sub_21689463C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C4C0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C4C0, (char *)0x40, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168946FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

float32x4_t *pxrInternal__aapl__pxrReserved__::GfDualQuatf::GfDualQuatf(float32x4_t *this, __n128 *a2)
{
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(v4 + 1, a2 + 2);
  return this;
}

{
  float32x4_t *v4;

  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(v4 + 1, a2 + 2);
  return this;
}

pxrInternal__aapl__pxrReserved__::GfDualQuatf *pxrInternal__aapl__pxrReserved__::GfDualQuatf::GfDualQuatf(pxrInternal__aapl__pxrReserved__::GfDualQuatf *this, const pxrInternal__aapl__pxrReserved__::GfDualQuath *a2)
{
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf((float *)this, (unsigned __int16 *)a2);
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf((float *)(v4 + 16), (unsigned __int16 *)a2 + 4);
  return this;
}

{
  uint64_t v4;

  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf((float *)this, (unsigned __int16 *)a2);
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf((float *)(v4 + 16), (unsigned __int16 *)a2 + 4);
  return this;
}

float pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetLength(pxrInternal__aapl__pxrReserved__::GfDualQuatf *this)
{
  float v1 = sqrtf((float)((float)((float)(*(float *)this * *(float *)this) + (float)(*((float *)this + 1) * *((float *)this + 1)))+ (float)(*((float *)this + 2) * *((float *)this + 2)))+ (float)(*((float *)this + 3) * *((float *)this + 3)));
  float result = 0.0;
  if (v1 != 0.0) {
    return v1;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetNormalized(pxrInternal__aapl__pxrReserved__::GfDualQuatf *this@<X0>, float a2@<S0>, uint64_t a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v3;
  pxrInternal__aapl__pxrReserved__::GfDualQuatf::Normalize((float32x4_t *)a3, a2);
}

void pxrInternal__aapl__pxrReserved__::GfDualQuatf::Normalize(float32x4_t *this, float a2)
{
  float Length = pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetLength((pxrInternal__aapl__pxrReserved__::GfDualQuatf *)this);
  if (Length >= a2)
  {
    float32x4_t v6 = this[1];
    float32x4_t v5 = vmulq_n_f32(*this, 1.0 / Length);
    this->i32[1] = v5.i32[1];
    this->i64[1] = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
    float32x4_t v7 = vmulq_n_f32(v6, 1.0 / Length);
    int32x4_t v8 = (int32x4_t)vmulq_f32(v5, v7);
    this[1] = vsubq_f32(v7, vmulq_n_f32(v5, vadd_f32((float32x2_t)vdup_laneq_s32(v8, 3), vadd_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL))).f32[0]));
  }
  else
  {
    this->i32[1] = 0;
    this->i32[2] = 0;
    this->i32[3] = 1065353216;
    v5.i32[0] = 0;
    this[1].i64[0] = 0;
    this[1].i64[1] = 0;
  }
  this->i32[0] = v5.i32[0];
}

float32x2_t pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetConjugate@<D0>(float32x2_t *this@<X0>, float32x2_t *a2@<X8>)
{
  __int32 v2 = this[1].i32[1];
  float32_t v3 = -this[1].f32[0];
  __int32 v4 = this[3].i32[1];
  float32_t v5 = -this[3].f32[0];
  *a2 = vneg_f32(*this);
  a2[1].f32[0] = v3;
  a2[1].i32[1] = v2;
  float32x2_t result = vneg_f32(this[2]);
  a2[2] = result;
  a2[3].f32[0] = v5;
  a2[3].i32[1] = v4;
  return result;
}

float32x2_t *pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetInverse@<X0>(float32x2_t *this@<X0>, uint64_t a2@<X8>)
{
  float32x2_t v2 = *this;
  float v3 = this[1].f32[0];
  float v4 = this[1].f32[1];
  float v5 = (float)(vaddv_f32(vmul_f32(v2, v2)) + (float)(v3 * v3)) + (float)(v4 * v4);
  if (v5 <= 0.0)
  {
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    float v9 = 1.0;
    v16.i32[0] = 0;
    __int32 v18 = 0;
    float v10 = 0.0;
  }
  else
  {
    float v6 = 1.0 / v5;
    float v8 = this[3].f32[0];
    float v7 = this[3].f32[1];
    float v9 = v4 * (float)(1.0 / v5);
    float v10 = -(float)(v3 * v6);
    float v11 = v6 * v7;
    float v12 = -(float)(v8 * v6);
    float v13 = v3 * v8;
    float v14 = v4 * v7;
    float32x2_t v15 = this[2];
    float32x2_t v16 = vmul_n_f32(vneg_f32(v2), v6);
    float v17 = (v6 + v6) * (float)((float)(vaddv_f32(vmul_f32(v2, v15)) + v13) + v14);
    *(float32x2_t *)(a2 + 16) = vsub_f32(vmul_n_f32(vneg_f32(v15), v6), vmul_n_f32(v16, v17));
    *(float *)(a2 + 24) = v12 - (float)(v10 * v17);
    *(float *)(a2 + 28) = v11 - (float)(v9 * v17);
    __int32 v18 = v16.i32[1];
  }
  *(_DWORD *)a2 = v16.i32[0];
  *(_DWORD *)(a2 + 4) = v18;
  *(float *)(a2 + 8) = v10;
  *(float *)(a2 + 12) = v9;
  return this;
}

__n128 pxrInternal__aapl__pxrReserved__::GfDualQuatf::SetTranslation(__n128 *a1, float32x2_t *a2)
{
  float v3 = a2[1].f32[0];
  float32x2_t v6 = vmul_f32(*a2, (float32x2_t)0x3F0000003F000000);
  float v7 = v3 * 0.5;
  int v8 = 0;
  pxrInternal__aapl__pxrReserved__::GfQuatf::operator*=((float *)&v6, (float *)a1);
  __n128 result = *v4;
  a1[1] = *v4;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetTranslation(pxrInternal__aapl__pxrReserved__::GfDualQuatf *this)
{
  return (float)((float)((float)(*((float *)this + 7) * *(float *)this)
                       - (float)(*((float *)this + 3) * *((float *)this + 4)))
               + (float)((float)(*((float *)this + 5) * *((float *)this + 2))
                       - (float)(*((float *)this + 6) * *((float *)this + 1))))
       * -2.0;
}

long long *pxrInternal__aapl__pxrReserved__::GfDualQuatf::operator*=(long long *a1, float *a2)
{
  long long v11 = *a1;
  pxrInternal__aapl__pxrReserved__::GfQuatf::operator*=((float *)&v11, a2);
  long long v10 = *v4;
  long long v11 = *a1;
  pxrInternal__aapl__pxrReserved__::GfQuatf::operator*=((float *)&v11, a2 + 4);
  float32x4_t v9 = *v5;
  long long v11 = a1[1];
  pxrInternal__aapl__pxrReserved__::GfQuatf::operator*=((float *)&v11, a2);
  float32x4_t v7 = vaddq_f32(v9, *v6);
  *a1 = v10;
  a1[1] = (__int128)v7;
  return a1;
}

float pxrInternal__aapl__pxrReserved__::GfDualQuatf::Transform(float *a1, float *a2)
{
  float v3 = pxrInternal__aapl__pxrReserved__::GfQuatf::Transform(a1, a2);
  return v3
       + pxrInternal__aapl__pxrReserved__::GfDualQuatf::GetTranslation((pxrInternal__aapl__pxrReserved__::GfDualQuatf *)a1);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, int8x16_t *a2)
{
  v9.i8[0] = 40;
  float v3 = sub_216779180(a1, (uint64_t)&v9, 1);
  int8x16_t v9 = *a2;
  float v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, &v9);
  float v5 = sub_216779180(v4, (uint64_t)", ", 2);
  int8x16_t v8 = a2[1];
  float32x2_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, &v8);
  char v10 = 41;
  return sub_216779180(v6, (uint64_t)&v10, 1);
}

{
  int8x16_t v3;

  float v3 = vextq_s8(*a2, *a2, 0xCuLL);
  return pxrInternal__aapl__pxrReserved__::operator<<(a1, (float *)v3.i32);
}

uint64_t *sub_216894C74()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  float v5 = 0;
  float32x2_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C4D0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C4D0, (char *)0x20, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    float32x2_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216894D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::GfDualQuath *pxrInternal__aapl__pxrReserved__::GfDualQuath::GfDualQuath(pxrInternal__aapl__pxrReserved__::GfDualQuath *this, const pxrInternal__aapl__pxrReserved__::GfDualQuatd *a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)(v4 + 8), (const pxrInternal__aapl__pxrReserved__::GfDualQuatd *)((char *)a2 + 32));
  return this;
}

{
  uint64_t v4;

  uint64_t v4 = pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)(v4 + 8), (const pxrInternal__aapl__pxrReserved__::GfDualQuatd *)((char *)a2 + 32));
  return this;
}

pxrInternal__aapl__pxrReserved__::GfDualQuath *pxrInternal__aapl__pxrReserved__::GfDualQuath::GfDualQuath(pxrInternal__aapl__pxrReserved__::GfDualQuath *this, const pxrInternal__aapl__pxrReserved__::GfDualQuatf *a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)(v4 + 8), (const pxrInternal__aapl__pxrReserved__::GfDualQuatf *)((char *)a2 + 16));
  return this;
}

{
  uint64_t v4;

  uint64_t v4 = pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath(this, a2);
  pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)(v4 + 8), (const pxrInternal__aapl__pxrReserved__::GfDualQuatf *)((char *)a2 + 16));
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::GetLength(pxrInternal__aapl__pxrReserved__::GfDualQuath *this)
{
  unsigned __int16 v6 = sub_216894F5C((unsigned __int16 *)this);
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v6] == 0.0)
  {
    uint64_t v5 = 0;
    sub_216895B78(&v7, (int *)&v5 + 1, (int *)&v5);
  }
  else
  {
    float v2 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)this, (unsigned __int16 *)this + 4)]+ (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 3)]* pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 7)]);
    if (v2 == 0.0)
    {
      unsigned int v3 = HIWORD(LODWORD(v2));
    }
    else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v2) >> 23])
    {
      unsigned int v3 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v2) >> 23]
         + (((LODWORD(v2) & 0x7FFFFF) + ((LODWORD(v2) >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v3) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v2));
    }
    *((float *)&v5 + sub_216850320((uint64_t)&word_267B8E45F + 1) = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v3]
                        / pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v6];
    sub_216895CDC(&v7, &v6, (float *)&v5 + 1);
  }
  return v7;
}

uint64_t sub_216894F5C(unsigned __int16 *a1)
{
  float v1 = sqrtf(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895AEC(a1)]);
  if (v1 == 0.0) {
    return HIWORD(LODWORD(v1));
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23]) {
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23]
  }
         + (((LODWORD(v1) & 0x7FFFFF) + ((LODWORD(v1) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v1));
}

uint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::GetNormalized(long long *a1, unsigned __int16 a2)
{
  long long v3 = *a1;
  pxrInternal__aapl__pxrReserved__::GfDualQuath::Normalize((unsigned __int16 *)&v3, a2);
  return v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::Normalize(unsigned __int16 *a1, unsigned __int16 a2)
{
  uint64_t Length = pxrInternal__aapl__pxrReserved__::GfDualQuath::GetLength((pxrInternal__aapl__pxrReserved__::GfDualQuath *)a1);
  float v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)Length];
  if (v5 >= pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2])
  {
    float v6 = 1.0 / v5;
    if (v6 == 0.0)
    {
      unsigned int v7 = HIWORD(LODWORD(v6));
    }
    else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
    {
      unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
         + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
    }
    unsigned __int16 v8 = v7;
    sub_216895190(a1, v7);
    sub_216895190(a1 + 4, v8);
    float v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38(a1, a1 + 4)]
       + (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
               * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[7]]);
    if (v9 == 0.0)
    {
      unsigned int v10 = HIWORD(LODWORD(v9));
    }
    else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23])
    {
      unsigned int v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23]
          + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
    }
    uint64_t v12 = *(void *)a1;
    uint64_t v12 = *(void *)sub_216895190((unsigned __int16 *)&v12, v10);
    sub_216895230(a1 + 4, (unsigned __int16 *)&v12);
  }
  else
  {
    *(void *)a1 = 0x3C00000000000000;
    *((void *)a1 + sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
  }
  return Length;
}

unsigned __int16 *sub_216895190(unsigned __int16 *a1, unsigned __int16 a2)
{
  uint64_t v3 = a2;
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
     * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2];
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  a1[3] = v5;
  sub_216895D54(a1, pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3]);
  return a1;
}

unsigned __int16 *sub_216895230(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
     - pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  a1[3] = v5;
  sub_216895E88(a1, a2);
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::GetConjugate(pxrInternal__aapl__pxrReserved__::GfDualQuath *this)
{
  return ((*((unsigned __int16 *)this + 1) ^ 0x8000) << 16) | ((unint64_t)(*((unsigned __int16 *)this + 2) ^ 0x8000u) << 32) | *(unsigned __int16 *)this ^ 0x8000 | ((unint64_t)*((unsigned __int16 *)this + 3) << 48);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::GetInverse(pxrInternal__aapl__pxrReserved__::GfDualQuath *this)
{
  float v2 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)this, (unsigned __int16 *)this)]+ (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 3)]* pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 3)]);
  if (v2 == 0.0)
  {
    unsigned int v3 = HIWORD(LODWORD(v2));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v2) >> 23])
  {
    unsigned int v3 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v2) >> 23]
       + (((LODWORD(v2) & 0x7FFFFF) + ((LODWORD(v2) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v3) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v2));
  }
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v3];
  if (v4 <= 0.0) {
    return 0x3C00000000000000;
  }
  float v5 = 1.0 / v4;
  if (v5 == 0.0)
  {
    unsigned int v6 = HIWORD(LODWORD(v5));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23])
  {
    unsigned int v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23]
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  *(void *)&long long v19 = pxrInternal__aapl__pxrReserved__::GfDualQuath::GetConjugate(this);
  *((void *)&v19 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v8;
  uint64_t v9 = (unsigned __int16)v6;
  uint64_t v7 = sub_21689557C(&v19, v6);
  uint64_t v11 = v10;
  double v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v9]
      + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v9];
  float v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)this, (unsigned __int16 *)this + 4)]+ (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 3)]* pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 7)]);
  if (v13 == 0.0)
  {
    unsigned int v14 = HIWORD(LODWORD(v13));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v13) >> 23])
  {
    unsigned int v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v13) >> 23]
        + (((LODWORD(v13) & 0x7FFFFF) + ((LODWORD(v13) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v14) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v13));
  }
  float v15 = v12 * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v14];
  if (v15 == 0.0)
  {
    unsigned int v16 = HIWORD(LODWORD(v15));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v15) >> 23])
  {
    unsigned int v16 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v15) >> 23]
        + (((LODWORD(v15) & 0x7FFFFF) + ((LODWORD(v15) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v16) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v15));
  }
  *(void *)&long long v19 = v7;
  uint64_t v18 = *(void *)sub_216895190((unsigned __int16 *)&v19, v16);
  *(void *)&long long v19 = v11;
  sub_216895230((unsigned __int16 *)&v19, (unsigned __int16 *)&v18);
  return v7;
}

uint64_t sub_21689557C(long long *a1, unsigned __int16 a2)
{
  long long v4 = *a1;
  sub_216895190((unsigned __int16 *)&v4, a2);
  sub_216895190((unsigned __int16 *)&v4 + 4, a2);
  return v4;
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfDualQuath::SetTranslation(uint64_t a1, int *a2)
{
  int v5 = *a2;
  __int16 v6 = *((_WORD *)a2 + 2);
  unsigned int v3 = sub_216895D54((unsigned __int16 *)&v5, 0.5);
  unint64_t v7 = *(unsigned int *)v3 | ((unint64_t)v3[2] << 32);
  __n128 result = pxrInternal__aapl__pxrReserved__::GfQuath::operator*=((unsigned __int16 *)&v7, (unsigned __int16 *)a1);
  *(void *)(a1 + 8) = *(void *)result;
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::GetTranslation(pxrInternal__aapl__pxrReserved__::GfDualQuath *this)
{
  uint64_t v2 = *((unsigned __int16 *)this + 7);
  uint64_t v3 = *((unsigned __int16 *)this + 3);
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v2];
  float v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)this];
  float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3];
  float v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 4)];
  float v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 5)];
  float v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 2)];
  float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 6)];
  float v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 1)];
  float v12 = (float)((float)((float)(v4 * v5) - (float)(v6 * v7)) + (float)((float)(v8 * v9) - (float)(v10 * v11))) * -2.0;
  if (v12 == 0.0)
  {
    unsigned int v13 = HIWORD(LODWORD(v12));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23])
  {
    unsigned int v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23]
        + (((LODWORD(v12) & 0x7FFFFF) + ((LODWORD(v12) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v13) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v12));
    float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v2];
    float v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 1)];
    float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3];
    float v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 5)];
    float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 6)];
    float v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)this];
    float v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 4)];
    float v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 2)];
  }
  float v14 = (float)((float)((float)(v4 * v11) - (float)(v6 * v8)) + (float)((float)(v10 * v5) - (float)(v7 * v9))) * -2.0;
  if (v14 == 0.0)
  {
    unsigned int v15 = HIWORD(LODWORD(v14));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
  {
    unsigned int v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
        + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v15) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
    float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v2];
    float v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 2)];
    float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3];
    float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 6)];
    float v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 4)];
    float v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 1)];
    float v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 5)];
    float v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*(unsigned __int16 *)this];
  }
  float v16 = (float)((float)((float)(v4 * v9) - (float)(v6 * v10)) + (float)((float)(v7 * v11) - (float)(v8 * v5))) * -2.0;
  if (v16 == 0.0)
  {
    uint64_t v17 = HIWORD(LODWORD(v16));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v16) >> 23])
  {
    uint64_t v17 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v16) >> 23]
        + (((LODWORD(v16) & 0x7FFFFF) + ((LODWORD(v16) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    uint64_t v17 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v16));
  }
  return ((unint64_t)(unsigned __int16)v15 << 16) | (v17 << 32) | (unsigned __int16)v13;
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfDualQuath::operator*=(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v9 = *a1;
  uint64_t v4 = *(void *)pxrInternal__aapl__pxrReserved__::GfQuath::operator*=((unsigned __int16 *)&v9, a2);
  uint64_t v9 = *a1;
  uint64_t v5 = *(void *)pxrInternal__aapl__pxrReserved__::GfQuath::operator*=((unsigned __int16 *)&v9, a2 + 4);
  uint64_t v9 = a1[1];
  uint64_t v8 = *(void *)pxrInternal__aapl__pxrReserved__::GfQuath::operator*=((unsigned __int16 *)&v9, a2);
  uint64_t v9 = v5;
  uint64_t v6 = *(void *)sub_216895FD4((unsigned __int16 *)&v9, (unsigned __int16 *)&v8);
  *a1 = v4;
  a1[1] = v6;
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfDualQuath::Transform(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unint64_t v3 = pxrInternal__aapl__pxrReserved__::GfQuath::Transform(a1, a2);
  unint64_t Translation = pxrInternal__aapl__pxrReserved__::GfDualQuath::GetTranslation((pxrInternal__aapl__pxrReserved__::GfDualQuath *)a1);
  int v7 = Translation;
  __int16 v8 = WORD2(Translation);
  __int16 v10 = WORD2(v3);
  int v9 = v3;
  uint64_t v5 = sub_21689606C((unsigned __int16 *)&v9, (unsigned __int16 *)&v7);
  return *(unsigned int *)v5 | ((unint64_t)v5[2] << 32);
}

uint64_t *sub_2168959E8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C4E0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C4E0, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216895AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216895AEC(unsigned __int16 *a1)
{
  float v1 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38(a1, a1)]
     + (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
             * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]);
  if (v1 == 0.0) {
    return HIWORD(LODWORD(v1));
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23]) {
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23]
  }
         + (((LODWORD(v1) & 0x7FFFFF) + ((LODWORD(v1) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v1));
}

_WORD *sub_216895B78(_WORD *a1, int *a2, int *a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*a2);
  if (*a2)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]) {
      unsigned int v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]
    }
         + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
    else {
      LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
    }
  }
  else
  {
    unsigned int v6 = v5 >> 16;
  }
  *a1 = v6;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*a3);
  if (*a3)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v7 >> 23]) {
      unsigned int v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v7 >> 23]
    }
         + (((v7 & 0x7FFFFF) + ((v7 >> 13) & 1) + 4095) >> 13);
    else {
      LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v7);
    }
  }
  else
  {
    unsigned int v8 = v7 >> 16;
  }
  a1[1] = v8;
  return a1;
}

uint64_t sub_216895C38(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v2 = (float)((float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
                     * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2])
             + (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
                     * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]))
     + (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]]
             * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]]);
  if (v2 == 0.0) {
    return HIWORD(LODWORD(v2));
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v2) >> 23]) {
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v2) >> 23]
  }
         + (((LODWORD(v2) & 0x7FFFFF) + ((LODWORD(v2) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v2));
}

_WORD *sub_216895CDC(_WORD *a1, _WORD *a2, float *a3)
{
  *a1 = *a2;
  char v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)a3;
  if (*a3 == 0.0)
  {
    unsigned int v5 = v4 >> 16;
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]
       + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
  }
  a1[1] = v5;
  return a1;
}

unsigned __int16 *sub_216895D54(unsigned __int16 *a1, double a2)
{
  float v3 = a2;
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] * v3;
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] * v3;
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  float v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] * v3;
  if (v8 == 0.0)
  {
    unsigned int v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  return a1;
}

unsigned __int16 *sub_216895E88(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
     - pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
     - pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  float v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]]
     - pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  if (v8 == 0.0)
  {
    unsigned int v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  return a1;
}

unsigned __int16 *sub_216895FD4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  a1[3] = v5;
  sub_21689606C(a1, a2);
  return a1;
}

unsigned __int16 *sub_21689606C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  float v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  if (v8 == 0.0)
  {
    unsigned int v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  return a1;
}

void sub_2168961BC()
{
  sub_216779094(v3, "GfFrustum::Orthographic");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74C500, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "GfFrustum::Perspective");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74C500, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216896280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::GfFrustum(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  *(void *)this = 0;
  *((void *)this + sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 56) = _Q0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 72) = _Q0;
  double result = 1.0;
  *(_OWORD *)((char *)this + 88) = xmmword_2174129E0;
  *((void *)this + 13) = 0x4014000000000000;
  *((_DWORD *)this + 28) = 1;
  *((void *)this + 15) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0x3FF0000000000000;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  return result;
}

{
  double result;

  *(void *)this = 0;
  *((void *)this + sub_216850320((uint64_t)&word_267B8E45F + 1) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 56) = _Q0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)((char *)this + 72) = _Q0;
  double result = 1.0;
  *(_OWORD *)((char *)this + 88) = xmmword_2174129E0;
  *((void *)this + 13) = 0x4014000000000000;
  *((_DWORD *)this + 28) = 1;
  *((void *)this + 15) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0x3FF0000000000000;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfFrustum::GfFrustum(uint64_t result, long long *a2, long long *a3, long long *a4, _OWORD *a5, int a6, double a7)
{
  long long v7 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)double result = v7;
  long long v8 = *a3;
  *(_OWORD *)(result + 40) = a3[1];
  *(_OWORD *)(result + 24) = v8;
  long long v9 = *a4;
  *(_OWORD *)(result + 72) = a4[1];
  *(_OWORD *)(result + 56) = v9;
  *(_OWORD *)(result + 88) = *a5;
  *(double *)(result + 104) = a7;
  *(_DWORD *)(result + 112) = a6;
  *(void *)(result + 120) = 0;
  return result;
}

{
  long long v7;
  long long v8;
  long long v9;

  long long v7 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)double result = v7;
  long long v8 = *a3;
  *(_OWORD *)(result + 40) = a3[1];
  *(_OWORD *)(result + 24) = v8;
  long long v9 = *a4;
  *(_OWORD *)(result + 72) = a4[1];
  *(_OWORD *)(result + 56) = v9;
  *(_OWORD *)(result + 88) = *a5;
  *(double *)(result + 104) = a7;
  *(_DWORD *)(result + 112) = a6;
  *(void *)(result + 120) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfFrustum::GfFrustum(uint64_t a1, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2, long long *a3, _OWORD *a4, int a5, double a6)
{
  long long v7 = *a3;
  *(_OWORD *)(a1 + 72) = a3[1];
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 88) = *a4;
  *(double *)(a1 + 104) = a6;
  *(_DWORD *)(a1 + 112) = a5;
  *(void *)(a1 + 120) = 0;
  pxrInternal__aapl__pxrReserved__::GfFrustum::SetPositionAndRotationFromMatrix((pxrInternal__aapl__pxrReserved__::GfFrustum *)a1, a2);
  return a1;
}

{
  long long v7;

  long long v7 = *a3;
  *(_OWORD *)(a1 + 72) = a3[1];
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 88) = *a4;
  *(double *)(a1 + 104) = a6;
  *(_DWORD *)(a1 + 112) = a5;
  *(void *)(a1 + 120) = 0;
  pxrInternal__aapl__pxrReserved__::GfFrustum::SetPositionAndRotationFromMatrix((pxrInternal__aapl__pxrReserved__::GfFrustum *)a1, a2);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::SetPositionAndRotationFromMatrix(pxrInternal__aapl__pxrReserved__::GfFrustum *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  long long v3 = *((_OWORD *)a2 + 5);
  long long v29 = *((_OWORD *)a2 + 4);
  long long v30 = v3;
  long long v4 = *((_OWORD *)a2 + 7);
  long long v31 = *((_OWORD *)a2 + 6);
  long long v32 = v4;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v25 = *(_OWORD *)a2;
  long long v26 = v5;
  long long v6 = *((_OWORD *)a2 + 3);
  long long v27 = *((_OWORD *)a2 + 2);
  long long v28 = v6;
  if (pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetHandedness((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v25) != 1.0)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E5A8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B8E5A8))
    {
      __asm { FMOV            V1.2D, #1.0 }
      long long v17 = xmmword_21740B870;
      long long v18 = _Q1;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&xmmword_267B8E528, (uint64_t)&v17);
      __cxa_guard_release(&qword_267B8E5A8);
    }
    long long v21 = xmmword_267B8E568;
    long long v22 = unk_267B8E578;
    long long v23 = xmmword_267B8E588;
    long long v24 = unk_267B8E598;
    long long v17 = xmmword_267B8E528;
    long long v18 = unk_267B8E538;
    long long v19 = xmmword_267B8E548;
    long long v20 = unk_267B8E558;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v17, (double *)&v25);
    long long v29 = v21;
    long long v30 = v22;
    long long v31 = v23;
    long long v32 = v24;
    long long v25 = v17;
    long long v26 = v18;
    long long v27 = v19;
    long long v28 = v20;
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v25, 1);
  *((double *)this + 3) = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v25);
  *((void *)this + 4) = v7;
  *((void *)this + 5) = v9;
  *((void *)this + 6) = v10;
  __swp(v8, (unsigned int *)this + 30);
  if (v8) {
    operator delete(v8);
  }
  uint64_t v11 = v32;
  *(_OWORD *)this = v31;
  *((void *)this + 2) = v11;
  __swp(v8, (unsigned int *)this + 30);
  if (v8) {
    operator delete(v8);
  }
}

void sub_216896558(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::~GfFrustum(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  uint64_t v1 = (void *)*((void *)this + 15);
  if (v1) {
    operator delete(v1);
  }
}

{
  void *v1;

  uint64_t v1 = (void *)*((void *)this + 15);
  if (v1) {
    operator delete(v1);
  }
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::SetPerspective(pxrInternal__aapl__pxrReserved__::GfFrustum *this, double a2, double a3, double a4, double a5)
{
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::SetPerspective(pxrInternal__aapl__pxrReserved__::GfFrustum *this, double a2, int a3, double a4, double a5, double a6)
{
  *((_DWORD *)this + 28) = 1;
  if (a4 == 0.0) {
    double v10 = 1.0;
  }
  else {
    double v10 = a4;
  }
  double v12 = tan(a2 * 0.5 * 0.0174532925);
  double v13 = v12 / v10;
  if (a3)
  {
    double v13 = v12;
    double v12 = v10 * v12;
  }
  *((double *)this + 7) = -v12;
  *((double *)this + 8) = -v13;
  *((double *)this + 9) = v12;
  *((double *)this + 10) = v13;
  *((double *)this + 1sub_216850320((uint64_t)&word_267B8E45F + 1) = a5;
  *((double *)this + 12) = a6;
  __swp(v11, (unsigned int *)this + 30);
  if (v11)
  {
    operator delete(v11);
  }
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::_DirtyFrustumPlanes(void *this)
{
  if (this) {
    operator delete(this);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::GfFrustum::GetPerspective(pxrInternal__aapl__pxrReserved__::GfFrustum *this, double *a2, double *a3, double *a4, double *a5)
{
  return pxrInternal__aapl__pxrReserved__::GfFrustum::GetPerspective(this, 1, a2, a3, a4, a5);
}

BOOL pxrInternal__aapl__pxrReserved__::GfFrustum::GetPerspective(pxrInternal__aapl__pxrReserved__::GfFrustum *this, int a2, double *a3, double *a4, double *a5, double *a6)
{
  int v6 = *((_DWORD *)this + 28);
  if (v6 == 1)
  {
    double v12 = *((double *)this + 9);
    double v13 = *((double *)this + 10);
    double v14 = *((double *)this + 7);
    double v15 = *((double *)this + 8);
    double v16 = v12 - v14;
    double v17 = v13 - v15;
    if (a2) {
      double v18 = v13 - v15;
    }
    else {
      double v18 = v12 - v14;
    }
    long double v19 = atan(v18 * 0.5);
    *a3 = v19 * 57.2957795 + v19 * 57.2957795;
    *a4 = v16 / v17;
    *a5 = *((double *)this + 11);
    *a6 = *((double *)this + 12);
  }
  return v6 == 1;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::GetFOV(pxrInternal__aapl__pxrReserved__::GfFrustum *this, int a2)
{
  double v6 = 0.0;
  double result = 0.0;
  if (*((_DWORD *)this + 28) == 1)
  {
    pxrInternal__aapl__pxrReserved__::GfFrustum::GetPerspective(this, a2, &v6, &v5, &v4, &v3);
    return v6;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::SetOrthographic(void *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  *((_DWORD *)this + 28) = 0;
  *((double *)this + 7) = a2;
  *((double *)this + 8) = a4;
  *((double *)this + 9) = a3;
  *((double *)this + 10) = a5;
  *((double *)this + 1sub_216850320((uint64_t)&word_267B8E45F + 1) = a6;
  *((double *)this + 12) = a7;
  __swp(this, (unsigned int *)this + 30);
  if (this) {
    operator delete(this);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::GfFrustum::GetOrthographic(pxrInternal__aapl__pxrReserved__::GfFrustum *this, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  int v7 = *((_DWORD *)this + 28);
  if (!v7)
  {
    *a2 = *((double *)this + 7);
    *a3 = *((double *)this + 9);
    *a4 = *((double *)this + 8);
    *a5 = *((double *)this + 10);
    *a6 = *((double *)this + 11);
    *a7 = *((double *)this + 12);
  }
  return v7 == 0;
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfFrustum::FitToSphere(uint64_t a1, float64x2_t *a2, double a3, double a4)
{
  if (*(_DWORD *)(a1 + 112))
  {
    double v6 = *(double *)(a1 + 80) - *(double *)(a1 + 64);
    BOOL v7 = v6 != 0.0 && fabs((*(double *)(a1 + 72) - *(double *)(a1 + 56)) / v6) > 1.0;
    uint64_t v10 = a1 + 8 * v7;
    double v11 = *(double *)(v10 + 56);
    double v12 = *(double *)(v10 + 72);
    if (v11 <= 0.0 && (v12 < -v11 || v12 < 0.0)) {
      double v12 = *(double *)(v10 + 56);
    }
    if (v12 >= 0.0)
    {
      if (v12 == 0.0) {
        double v12 = 1.0;
      }
    }
    else
    {
      double v12 = -v12;
    }
    double v9 = 1.0 / v12 * a3 * sqrt(v12 * v12 + *(double *)(a1 + 88) * *(double *)(a1 + 88));
    *(double *)(a1 + 104) = v9;
    double v8 = a3 + a4;
  }
  else
  {
    double v8 = a3 + a4;
    *(double *)(a1 + 104) = v8;
    *(double *)(a1 + 56) = -a3;
    *(double *)(a1 + 64) = -a3;
    *(double *)(a1 + 72) = a3;
    *(double *)(a1 + 80) = a3;
    double v9 = v8;
  }
  *(double *)(a1 + 88) = v9 - v8;
  *(double *)(a1 + 96) = v8 + v8 + v9 - v8;
  double v19 = v9;
  int64x2_t v20 = vdupq_n_s64(0x8000000000000000);
  unint64_t v21 = 0xBFF0000000000000;
  v14.f64[0] = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)(a1 + 24), (double *)v20.i64);
  v14.f64[1] = v16;
  float64_t v17 = a2[1].f64[0] - v19 * v15;
  float64x2_t result = vsubq_f64(*a2, vmulq_n_f64(v14, v19));
  *(float64x2_t *)a1 = result;
  *(float64_t *)(a1 + 16) = v17;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeAspectRatio(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  double v1 = *((double *)this + 10) - *((double *)this + 8);
  if (v1 == 0.0) {
    return 0.0;
  }
  else {
    return fabs((*((double *)this + 9) - *((double *)this + 7)) / v1);
  }
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeViewDirection(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  int64x2_t v2 = vdupq_n_s64(0x8000000000000000);
  unint64_t v3 = 0xBFF0000000000000;
  return pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), (double *)v2.i64);
}

pxrInternal__aapl__pxrReserved__::GfFrustum *pxrInternal__aapl__pxrReserved__::GfFrustum::Transform(pxrInternal__aapl__pxrReserved__::GfFrustum *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  long long v103 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v109 = _Q0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v110 = _Q0;
  float64x2_t v111 = (float64x2_t)xmmword_2174129E0;
  double v104 = 0.0;
  double Rotation = 1.0;
  BOOL v114 = 0;
  double v112 = 5.0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  uint64_t v106 = 0;
  int v113 = *((_DWORD *)this + 28);
  double v10 = sub_216893298((double *)a2, (double *)this);
  *(double *)&long long v103 = v10;
  *((double *)&v103 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v11;
  double v78 = v11;
  double v79 = v12;
  double v104 = v12;
  double v100 = 0.0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  int64x2_t v89 = vdupq_n_s64(0x8000000000000000);
  double v90 = -1.0;
  double v100 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), (double *)v89.i64);
  uint64_t v101 = v13;
  uint64_t v102 = v14;
  double v97 = 0.0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  int64x2_t v89 = (int64x2_t)xmmword_217409FD0;
  double v90 = 0.0;
  double v97 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), (double *)v89.i64);
  uint64_t v98 = v15;
  uint64_t v99 = v16;
  double v17 = sub_216896EC8((double *)a2, &v100);
  double v19 = v18;
  double v21 = v20;
  double v22 = sub_216896EC8((double *)a2, &v97);
  double v24 = v23;
  double v26 = v25;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v89, 1.0);
  double v27 = sqrt(v21 * v21 + v17 * v17 + v19 * v19);
  double v28 = sqrt(v26 * v26 + v22 * v22 + v24 * v24);
  double v29 = 1.0 / v28;
  BOOL v30 = v28 <= 1.0e-10;
  double v31 = 1.0e10;
  if (v30) {
    double v29 = 1.0e10;
  }
  double v32 = v24 * v29;
  double v33 = 1.0 / v27;
  double v77 = v27;
  if (v27 <= 1.0e-10) {
    double v34 = 1.0e10;
  }
  else {
    double v34 = 1.0 / v27;
  }
  double v35 = v22 * v29;
  double v36 = v17 * v34 * v32 - v19 * v34 * (v22 * v29);
  double v37 = v26 * v29;
  double v38 = v19 * v34 * v37 - v21 * v34 * v32;
  double v39 = v21 * v34 * v35 - v17 * v34 * v37;
  double v40 = sqrt(v36 * v36 + v38 * v38 + v39 * v39);
  if (v40 > 1.0e-10) {
    double v31 = 1.0 / v40;
  }
  *(double *)v89.i64 = v38 * v31;
  *(double *)&v89.i64[1] = v39 * v31;
  double v90 = v36 * v31;
  double v91 = v35;
  double v92 = v32;
  double v93 = v37;
  double v94 = -(v17 * v34);
  double v95 = -(v19 * v34);
  double v96 = -(v21 * v34);
  double Rotation = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v89);
  uint64_t v106 = v41;
  uint64_t v107 = v42;
  uint64_t v108 = v43;
  int32x2_t v44 = vdup_n_s32(v77 > 0.0);
  v45.i64[0] = v44.u32[0];
  v45.i64[1] = v44.u32[1];
  float64x2_t v111 = vmulq_n_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v45, 0x3FuLL)), *(int8x16_t *)((char *)this + 88), vextq_s8(*(int8x16_t *)((char *)this + 88), *(int8x16_t *)((char *)this + 88), 8uLL)), v77);
  double v112 = v77 * *((double *)this + 13);
  float64x2_t v80 = *(float64x2_t *)((char *)this + 56);
  unint64_t v81 = 0xBFF0000000000000;
  double v46 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), v80.f64);
  double v48 = v47 + *((double *)this + 1);
  double v50 = v49 + *((double *)this + 2);
  double v86 = v46 + *(double *)this;
  double v87 = v48;
  double v88 = v50;
  float64x2_t v80 = *(float64x2_t *)((char *)this + 72);
  unint64_t v81 = 0xBFF0000000000000;
  double v51 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), v80.f64);
  double v53 = v52 + *((double *)this + 1);
  double v55 = v54 + *((double *)this + 2);
  double v83 = v51 + *(double *)this;
  double v84 = v53;
  double v85 = v55;
  double v86 = sub_216893298((double *)a2, &v86);
  double v87 = v56;
  double v88 = v57;
  double v58 = sub_216893298((double *)a2, &v83);
  double v86 = v86 - v10;
  double v87 = v87 - v78;
  double v88 = v88 - v79;
  double v83 = v58 - v10;
  double v84 = v59 - v78;
  double v85 = v60 - v79;
  v80.f64[0] = sub_216896F28(&Rotation);
  v80.f64[1] = v61;
  unint64_t v81 = v62;
  uint64_t v82 = v63;
  double v86 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir(&v80, &v86);
  double v87 = v64;
  double v88 = v65;
  v80.f64[0] = sub_216896F28(&Rotation);
  v80.f64[1] = v66;
  unint64_t v81 = v67;
  uint64_t v82 = v68;
  double v69 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir(&v80, &v83);
  double v83 = v69;
  double v84 = v70;
  double v85 = v71;
  double v73 = v86;
  double v72 = v87;
  if (*((_DWORD *)this + 28) == 1)
  {
    double v73 = v33 * v86;
    double v72 = v33 * v87;
    double v86 = v33 * v86;
    double v87 = v33 * v87;
    double v88 = v33 * v88;
    double v69 = v33 * v69;
    double v70 = v33 * v70;
    double v83 = v69;
    double v84 = v70;
    double v85 = v33 * v71;
  }
  if (v73 <= v69) {
    double v74 = v73;
  }
  else {
    double v74 = v69;
  }
  if (v73 > v69) {
    double v69 = v73;
  }
  if (v72 <= v70) {
    double v75 = v72;
  }
  else {
    double v75 = v70;
  }
  *(double *)&long long v109 = v74;
  *((double *)&v109 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v75;
  if (v72 > v70) {
    double v70 = v72;
  }
  *(double *)&long long v110 = v69;
  *((double *)&v110 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v70;
  sub_216896F90((uint64_t)this, &v103);
  if (v114) {
    operator delete(v114);
  }
  return this;
}

void sub_216896E48(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 - 120);
  if (v3) {
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeUpVector(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  long long v2 = xmmword_217409FD0;
  uint64_t v3 = 0;
  return pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), (double *)&v2);
}

double sub_216896EC8(double *a1, double *a2)
{
  return *a2 * *a1 + a2[1] * a1[4] + a2[2] * a1[8];
}

double sub_216896F28(double *a1)
{
  double result = *a1;
  double v2 = result * result + a1[1] * a1[1] + a1[2] * a1[2];
  if (fabs(v2 + -1.0) >= 1.0e-10)
  {
    double v3 = sqrt(v2);
    double v4 = 1.0 / v3;
    BOOL v5 = v3 <= 1.0e-10;
    double v6 = 1.0e10;
    if (!v5) {
      double v6 = v4;
    }
    return result * v6;
  }
  return result;
}

uint64_t sub_216896F90(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    long long v5 = *(long long *)((char *)a2 + 24);
    *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
    long long v6 = *(long long *)((char *)a2 + 56);
    *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
    *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
    BOOL v7 = *(void **)(a1 + 120);
    if (v7) {
      operator delete(v7);
    }
    double v8 = (long long *)*((void *)a2 + 15);
    if (v8)
    {
      double v9 = operator new(0xC0uLL);
      long long v10 = *v8;
      long long v11 = v8[1];
      long long v12 = v8[3];
      void v9[2] = v8[2];
      v9[3] = v12;
      *double v9 = v10;
      v9[1] = v11;
      long long v13 = v8[4];
      long long v14 = v8[5];
      long long v15 = v8[7];
      v9[6] = v8[6];
      v9[7] = v15;
      _OWORD v9[4] = v13;
      void v9[5] = v14;
      long long v16 = v8[8];
      long long v17 = v8[9];
      long long v18 = v8[11];
      v9[10] = v8[10];
      void v9[11] = v18;
      v9[8] = v16;
      void v9[9] = v17;
    }
    else
    {
      double v9 = 0;
    }
    *(void *)(a1 + 120) = v9;
  }
  return a1;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeViewFrame(uint64_t a1, double *a2, double *a3, double *a4)
{
  BOOL v7 = (float64x2_t *)(a1 + 24);
  int64x2_t v18 = (int64x2_t)xmmword_217409FD0;
  unint64_t v19 = 0;
  *a3 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)(a1 + 24), (double *)v18.i64);
  *((void *)a3 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v8;
  *((void *)a3 + 2) = v9;
  int64x2_t v18 = vdupq_n_s64(0x8000000000000000);
  unint64_t v19 = 0xBFF0000000000000;
  double v10 = pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir(v7, (double *)v18.i64);
  *a4 = v10;
  a4[1] = v11;
  a4[2] = v12;
  double v14 = a3[1];
  double v13 = a3[2];
  double v15 = v11 * v13 - v12 * v14;
  double v16 = v12 * *a3 - v10 * v13;
  double result = v10 * v14 - v11 * *a3;
  *a2 = v15;
  a2[1] = v16;
  a2[2] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeLookAtPoint(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  double v1 = *((double *)this + 13);
  int64x2_t v3 = vdupq_n_s64(0x8000000000000000);
  unint64_t v4 = 0xBFF0000000000000;
  return *(double *)this
       + v1
       * pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir((float64x2_t *)((char *)this + 24), (double *)v3.i64);
}

_OWORD *pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeViewMatrix@<X0>(pxrInternal__aapl__pxrReserved__::GfFrustum *this@<X0>, _OWORD *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(a2, (double *)this, (double *)this + 3);
}

double *pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeViewInverse@<X0>(pxrInternal__aapl__pxrReserved__::GfFrustum *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(v4, (double *)this, (double *)this + 3);
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)v4, 0, 0.0, a2);
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeProjectionMatrix@<D0>(pxrInternal__aapl__pxrReserved__::GfFrustum *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(a2, 1.0);
  double v5 = *((double *)this + 7);
  double v4 = *((double *)this + 8);
  double v7 = *((double *)this + 9);
  double v6 = *((double *)this + 10);
  double v8 = *((double *)this + 11);
  double v9 = *((double *)this + 12);
  double v10 = v7 - v5;
  double v11 = v6 - v4;
  int v12 = *((_DWORD *)this + 28);
  *(double *)a2 = 2.0 / (v7 - v5);
  if (v12)
  {
    double v13 = -(v8 + v9);
    *(double *)(a2 + 64) = (v5 + v7) / v10;
    *(double *)(a2 + 72) = (v4 + v6) / v11;
    double v14 = v8 * -2.0 * v9;
    *(void *)(a2 + 88) = 0xBFF0000000000000;
    *(void *)(a2 + 120) = 0;
  }
  else
  {
    *(double *)(a2 + 96) = -(v5 + v7) / v10;
    *(double *)(a2 + 104) = -(v4 + v6) / v11;
    double v14 = -(v8 + v9);
    double v13 = -2.0;
  }
  double v15 = v9 - v8;
  *(double *)(a2 + 40) = 2.0 / v11;
  *(double *)(a2 + 80) = v13 / v15;
  double result = v14 / v15;
  *(double *)(a2 + 112) = v14 / v15;
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeCorners(pxrInternal__aapl__pxrReserved__::GfFrustum *this@<X0>, void **a2@<X8>)
{
  double v5 = *((double *)this + 11);
  double v4 = *((double *)this + 12);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_2168982C8(a2, 8uLL);
  double v6 = *((double *)this + 7);
  double v7 = -v5;
  if (*((_DWORD *)this + 28) != 1)
  {
    uint64_t v13 = *((void *)this + 8);
    double v14 = (char *)a2[2];
    double v15 = (char *)a2[1];
    if (v15 >= v14)
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (unsigned char *)*a2) >> 3);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (unsigned char *)*a2) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25) {
        double v26 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v25);
      }
      else {
        double v26 = 0;
      }
      uint64_t v41 = &v26[24 * v22];
      uint64_t v42 = &v26[24 * v25];
      *(double *)uint64_t v41 = v6;
      *((void *)v41 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v13;
      *((double *)v41 + 2) = v7;
      double v16 = v41 + 24;
      int32x2_t v44 = (char *)*a2;
      uint64_t v43 = (char *)a2[1];
      if (v43 != *a2)
      {
        do
        {
          long long v45 = *(_OWORD *)(v43 - 24);
          *((void *)v41 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((void *)v43 - 1);
          *(_OWORD *)(v41 - 24) = v45;
          v41 -= 24;
          v43 -= 24;
        }
        while (v43 != v44);
        uint64_t v43 = (char *)*a2;
      }
      *a2 = v41;
      a2[1] = v16;
      a2[2] = v42;
      if (v43) {
        operator delete(v43);
      }
    }
    else
    {
      *(double *)double v15 = v6;
      *((void *)v15 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v13;
      double v16 = v15 + 24;
      *((double *)v15 + 2) = v7;
    }
    a2[1] = v16;
    uint64_t v46 = *((void *)this + 8);
    uint64_t v47 = *((void *)this + 9);
    double v48 = (char *)a2[2];
    if (v16 >= v48)
    {
      unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (unsigned char *)*a2) >> 3);
      if (v50 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v48 - (unsigned char *)*a2) >> 3);
      uint64_t v52 = 2 * v51;
      if (2 * v51 <= v50 + 1) {
        uint64_t v52 = v50 + 1;
      }
      if (v51 >= 0x555555555555555) {
        unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v53 = v52;
      }
      if (v53) {
        double v54 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v53);
      }
      else {
        double v54 = 0;
      }
      double v69 = &v54[24 * v50];
      double v70 = &v54[24 * v53];
      *(void *)double v69 = v47;
      *((void *)v69 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v46;
      *((double *)v69 + 2) = v7;
      double v49 = v69 + 24;
      double v72 = (char *)*a2;
      double v71 = (char *)a2[1];
      if (v71 != *a2)
      {
        do
        {
          long long v73 = *(_OWORD *)(v71 - 24);
          *((void *)v69 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((void *)v71 - 1);
          *(_OWORD *)(v69 - 24) = v73;
          v69 -= 24;
          v71 -= 24;
        }
        while (v71 != v72);
        double v71 = (char *)*a2;
      }
      *a2 = v69;
      a2[1] = v49;
      a2[2] = v70;
      if (v71) {
        operator delete(v71);
      }
    }
    else
    {
      *(void *)double v16 = v47;
      *((void *)v16 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v46;
      double v49 = v16 + 24;
      *((double *)v16 + 2) = v7;
    }
    a2[1] = v49;
    uint64_t v74 = *((void *)this + 7);
    uint64_t v75 = *((void *)this + 10);
    unint64_t v76 = (char *)a2[2];
    if (v49 >= v76)
    {
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (unsigned char *)*a2) >> 3);
      if (v78 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((v76 - (unsigned char *)*a2) >> 3);
      uint64_t v80 = 2 * v79;
      if (2 * v79 <= v78 + 1) {
        uint64_t v80 = v78 + 1;
      }
      if (v79 >= 0x555555555555555) {
        unint64_t v81 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v81 = v80;
      }
      if (v81) {
        uint64_t v82 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v81);
      }
      else {
        uint64_t v82 = 0;
      }
      double v97 = &v82[24 * v78];
      uint64_t v98 = &v82[24 * v81];
      *(void *)double v97 = v74;
      *((void *)v97 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v75;
      *((double *)v97 + 2) = v7;
      double v77 = v97 + 24;
      double v100 = (char *)*a2;
      uint64_t v99 = (char *)a2[1];
      if (v99 != *a2)
      {
        do
        {
          long long v101 = *(_OWORD *)(v99 - 24);
          *((void *)v97 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((void *)v99 - 1);
          *(_OWORD *)(v97 - 24) = v101;
          v97 -= 24;
          v99 -= 24;
        }
        while (v99 != v100);
        uint64_t v99 = (char *)*a2;
      }
      *a2 = v97;
      a2[1] = v77;
      a2[2] = v98;
      if (v99) {
        operator delete(v99);
      }
    }
    else
    {
      *(void *)double v49 = v74;
      *((void *)v49 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v75;
      double v77 = v49 + 24;
      *((double *)v49 + 2) = v7;
    }
    a2[1] = v77;
    uint64_t v103 = *((void *)this + 9);
    uint64_t v102 = *((void *)this + 10);
    double v104 = (char *)a2[2];
    if (v77 >= v104)
    {
      unint64_t v106 = 0xAAAAAAAAAAAAAAABLL * ((v77 - (unsigned char *)*a2) >> 3);
      if (v106 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v107 = 0xAAAAAAAAAAAAAAABLL * ((v104 - (unsigned char *)*a2) >> 3);
      uint64_t v108 = 2 * v107;
      if (2 * v107 <= v106 + 1) {
        uint64_t v108 = v106 + 1;
      }
      if (v107 >= 0x555555555555555) {
        unint64_t v109 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v109 = v108;
      }
      if (v109) {
        long long v110 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v109);
      }
      else {
        long long v110 = 0;
      }
      uint64_t v126 = &v110[24 * v106];
      int v127 = &v110[24 * v109];
      *(void *)uint64_t v126 = v103;
      *((void *)v126 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v102;
      *((double *)v126 + 2) = v7;
      BOOL v105 = v126 + 24;
      BOOL v129 = (char *)*a2;
      BOOL v128 = (char *)a2[1];
      if (v128 != *a2)
      {
        do
        {
          long long v130 = *(_OWORD *)(v128 - 24);
          *((void *)v126 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((void *)v128 - 1);
          *(_OWORD *)(v126 - 24) = v130;
          v126 -= 24;
          v128 -= 24;
        }
        while (v128 != v129);
        BOOL v128 = (char *)*a2;
      }
      *a2 = v126;
      a2[1] = v105;
      a2[2] = v127;
      if (v128) {
        operator delete(v128);
      }
    }
    else
    {
      *(void *)double v77 = v103;
      *((void *)v77 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v102;
      BOOL v105 = v77 + 24;
      *((double *)v77 + 2) = v7;
    }
    a2[1] = v105;
    uint64_t v132 = *((void *)this + 7);
    uint64_t v131 = *((void *)this + 8);
    double v133 = -v4;
    unint64_t v134 = (char *)a2[2];
    if (v105 >= v134)
    {
      unint64_t v136 = 0xAAAAAAAAAAAAAAABLL * ((v105 - (unsigned char *)*a2) >> 3);
      if (v136 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v137 = 0xAAAAAAAAAAAAAAABLL * ((v134 - (unsigned char *)*a2) >> 3);
      uint64_t v138 = 2 * v137;
      if (2 * v137 <= v136 + 1) {
        uint64_t v138 = v136 + 1;
      }
      if (v137 >= 0x555555555555555) {
        unint64_t v139 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v139 = v138;
      }
      if (v139) {
        int v140 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v139);
      }
      else {
        int v140 = 0;
      }
      BOOL v155 = &v140[24 * v136];
      BOOL v156 = &v140[24 * v139];
      *(void *)BOOL v155 = v132;
      *((void *)v155 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v131;
      *((double *)v155 + 2) = v133;
      unint64_t v135 = v155 + 24;
      uint64_t v158 = (char *)*a2;
      __int16 v157 = (char *)a2[1];
      if (v157 != *a2)
      {
        do
        {
          long long v159 = *(_OWORD *)(v157 - 24);
          *((void *)v155 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((void *)v157 - 1);
          *(_OWORD *)(v155 - 24) = v159;
          v155 -= 24;
          v157 -= 24;
        }
        while (v157 != v158);
        __int16 v157 = (char *)*a2;
      }
      *a2 = v155;
      a2[1] = v135;
      a2[2] = v156;
      if (v157) {
        operator delete(v157);
      }
    }
    else
    {
      *(void *)BOOL v105 = v132;
      *((void *)v105 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v131;
      unint64_t v135 = v105 + 24;
      *((double *)v105 + 2) = v133;
    }
    a2[1] = v135;
    uint64_t v160 = *((void *)this + 8);
    uint64_t v161 = *((void *)this + 9);
    BOOL v162 = (char *)a2[2];
    if (v135 >= v162)
    {
      unint64_t v164 = 0xAAAAAAAAAAAAAAABLL * ((v135 - (unsigned char *)*a2) >> 3);
      if (v164 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v165 = 0xAAAAAAAAAAAAAAABLL * ((v162 - (unsigned char *)*a2) >> 3);
      uint64_t v166 = 2 * v165;
      if (2 * v165 <= v164 + 1) {
        uint64_t v166 = v164 + 1;
      }
      if (v165 >= 0x555555555555555) {
        unint64_t v167 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v167 = v166;
      }
      if (v167) {
        uint64_t v168 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v167);
      }
      else {
        uint64_t v168 = 0;
      }
      uint64_t v183 = &v168[24 * v164];
      unint64_t v184 = &v168[24 * v167];
      *(void *)uint64_t v183 = v161;
      *((void *)v183 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v160;
      *((double *)v183 + 2) = v133;
      uint64_t v163 = v183 + 24;
      unint64_t v186 = (char *)*a2;
      unint64_t v185 = (char *)a2[1];
      if (v185 != *a2)
      {
        do
        {
          long long v187 = *(_OWORD *)(v185 - 24);
          *((void *)v183 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((void *)v185 - 1);
          *(_OWORD *)(v183 - 24) = v187;
          v183 -= 24;
          v185 -= 24;
        }
        while (v185 != v186);
        unint64_t v185 = (char *)*a2;
      }
      *a2 = v183;
      a2[1] = v163;
      a2[2] = v184;
      if (v185) {
        operator delete(v185);
      }
    }
    else
    {
      *(void *)unint64_t v135 = v161;
      *((void *)v135 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v160;
      uint64_t v163 = v135 + 24;
      *((double *)v135 + 2) = v133;
    }
    a2[1] = v163;
    uint64_t v188 = *((void *)this + 7);
    uint64_t v189 = *((void *)this + 10);
    uint64_t v190 = (char *)a2[2];
    if (v163 >= v190)
    {
      unint64_t v192 = 0xAAAAAAAAAAAAAAABLL * ((v163 - (unsigned char *)*a2) >> 3);
      if (v192 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v193 = 0xAAAAAAAAAAAAAAABLL * ((v190 - (unsigned char *)*a2) >> 3);
      uint64_t v194 = 2 * v193;
      if (2 * v193 <= v192 + 1) {
        uint64_t v194 = v192 + 1;
      }
      if (v193 >= 0x555555555555555) {
        unint64_t v195 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v195 = v194;
      }
      if (v195) {
        unint64_t v196 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v195);
      }
      else {
        unint64_t v196 = 0;
      }
      uint64_t v211 = &v196[24 * v192];
      BOOL v212 = &v196[24 * v195];
      *(void *)uint64_t v211 = v188;
      *((void *)v211 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v189;
      *((double *)v211 + 2) = v133;
      BOOL v191 = v211 + 24;
      uint64_t v214 = (char *)*a2;
      BOOL v213 = (char *)a2[1];
      if (v213 != *a2)
      {
        do
        {
          long long v215 = *(_OWORD *)(v213 - 24);
          *((void *)v211 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((void *)v213 - 1);
          *(_OWORD *)(v211 - 24) = v215;
          v211 -= 24;
          v213 -= 24;
        }
        while (v213 != v214);
        BOOL v213 = (char *)*a2;
      }
      *a2 = v211;
      a2[1] = v191;
      a2[2] = v212;
      if (v213) {
        operator delete(v213);
      }
    }
    else
    {
      *(void *)uint64_t v163 = v188;
      *((void *)v163 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v189;
      BOOL v191 = v163 + 24;
      *((double *)v163 + 2) = v133;
    }
    a2[1] = v191;
    uint64_t v217 = *((void *)this + 9);
    uint64_t v216 = *((void *)this + 10);
    unint64_t v218 = (char *)a2[2];
    if (v191 < v218)
    {
      *(void *)BOOL v191 = v217;
      *((void *)v191 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v216;
      unsigned int v205 = (double *)(v191 + 24);
      *((double *)v191 + 2) = v133;
      goto LABEL_256;
    }
    unint64_t v219 = 0xAAAAAAAAAAAAAAABLL * ((v191 - (unsigned char *)*a2) >> 3);
    if (v219 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v220 = 0xAAAAAAAAAAAAAAABLL * ((v218 - (unsigned char *)*a2) >> 3);
    uint64_t v221 = 2 * v220;
    if (2 * v220 <= v219 + 1) {
      uint64_t v221 = v219 + 1;
    }
    if (v220 >= 0x555555555555555) {
      unint64_t v222 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v222 = v221;
    }
    if (v222) {
      BOOL v223 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v222);
    }
    else {
      BOOL v223 = 0;
    }
    int v224 = &v223[24 * v219];
    int v225 = &v223[24 * v222];
    *(void *)int v224 = v217;
    *((void *)v224 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v216;
    *((double *)v224 + 2) = v133;
    unsigned int v205 = (double *)(v224 + 24);
    int v229 = (char *)*a2;
    char v226 = (char *)a2[1];
    if (v226 == *a2) {
      goto LABEL_254;
    }
    do
    {
      long long v230 = *(_OWORD *)(v226 - 24);
      *((void *)v224 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((void *)v226 - 1);
      *(_OWORD *)(v224 - 24) = v230;
      v224 -= 24;
      v226 -= 24;
    }
    while (v226 != v229);
    goto LABEL_253;
  }
  double v8 = v5 * v6;
  double v9 = v5 * *((double *)this + 8);
  unint64_t v10 = (unint64_t)a2[2];
  double v11 = (double *)a2[1];
  if ((unint64_t)v11 >= v10)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (unsigned char *)*a2) >> 3);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*a2) >> 3);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0x555555555555555) {
      unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20) {
      double v21 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v20);
    }
    else {
      double v21 = 0;
    }
    double v27 = (double *)&v21[24 * v17];
    double v28 = &v21[24 * v20];
    double *v27 = v8;
    v27[1] = v9;
    void v27[2] = v7;
    int v12 = v27 + 3;
    BOOL v30 = (double *)*a2;
    double v29 = (double *)a2[1];
    if (v29 != *a2)
    {
      do
      {
        long long v31 = *(_OWORD *)(v29 - 3);
        *(v27 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *(v29 - 1);
        *(_OWORD *)(v27 - 3) = v31;
        v27 -= 3;
        v29 -= 3;
      }
      while (v29 != v30);
      double v29 = (double *)*a2;
    }
    *a2 = v27;
    a2[1] = v12;
    a2[2] = v28;
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    *double v11 = v8;
    v11[1] = v9;
    int v12 = v11 + 3;
    long long v11[2] = v7;
  }
  a2[1] = v12;
  double v32 = v5 * *((double *)this + 9);
  double v33 = v5 * *((double *)this + 8);
  unint64_t v34 = (unint64_t)a2[2];
  if ((unint64_t)v12 >= v34)
  {
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (unsigned char *)*a2) >> 3);
    if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (void)*a2) >> 3);
    uint64_t v38 = 2 * v37;
    if (2 * v37 <= v36 + 1) {
      uint64_t v38 = v36 + 1;
    }
    if (v37 >= 0x555555555555555) {
      unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v39 = v38;
    }
    if (v39) {
      double v40 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v39);
    }
    else {
      double v40 = 0;
    }
    double v55 = (double *)&v40[24 * v36];
    double v56 = &v40[24 * v39];
    *double v55 = v32;
    v55[1] = v33;
    v55[2] = v7;
    double v35 = v55 + 3;
    double v58 = (double *)*a2;
    double v57 = (double *)a2[1];
    if (v57 != *a2)
    {
      do
      {
        long long v59 = *(_OWORD *)(v57 - 3);
        *(v55 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *(v57 - 1);
        *(_OWORD *)(v55 - 3) = v59;
        v55 -= 3;
        v57 -= 3;
      }
      while (v57 != v58);
      double v57 = (double *)*a2;
    }
    *a2 = v55;
    a2[1] = v35;
    a2[2] = v56;
    if (v57) {
      operator delete(v57);
    }
  }
  else
  {
    double *v12 = v32;
    v12[1] = v33;
    double v35 = v12 + 3;
    void v12[2] = v7;
  }
  a2[1] = v35;
  double v60 = v5 * *((double *)this + 7);
  double v61 = v5 * *((double *)this + 10);
  unint64_t v62 = (unint64_t)a2[2];
  if ((unint64_t)v35 >= v62)
  {
    unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (unsigned char *)*a2) >> 3);
    if (v64 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (void)*a2) >> 3);
    uint64_t v66 = 2 * v65;
    if (2 * v65 <= v64 + 1) {
      uint64_t v66 = v64 + 1;
    }
    if (v65 >= 0x555555555555555) {
      unint64_t v67 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v67 = v66;
    }
    if (v67) {
      uint64_t v68 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v67);
    }
    else {
      uint64_t v68 = 0;
    }
    double v83 = (double *)&v68[24 * v64];
    double v84 = &v68[24 * v67];
    *double v83 = v60;
    v83[1] = v61;
    v83[2] = v7;
    uint64_t v63 = v83 + 3;
    double v86 = (double *)*a2;
    double v85 = (double *)a2[1];
    if (v85 != *a2)
    {
      do
      {
        long long v87 = *(_OWORD *)(v85 - 3);
        *(v83 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *(v85 - 1);
        *(_OWORD *)(v83 - 3) = v87;
        v83 -= 3;
        v85 -= 3;
      }
      while (v85 != v86);
      double v85 = (double *)*a2;
    }
    *a2 = v83;
    a2[1] = v63;
    a2[2] = v84;
    if (v85) {
      operator delete(v85);
    }
  }
  else
  {
    *double v35 = v60;
    v35[1] = v61;
    uint64_t v63 = v35 + 3;
    v35[2] = v7;
  }
  a2[1] = v63;
  double v88 = v5 * *((double *)this + 9);
  double v89 = v5 * *((double *)this + 10);
  unint64_t v90 = (unint64_t)a2[2];
  if ((unint64_t)v63 >= v90)
  {
    unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (unsigned char *)*a2) >> 3);
    if (v92 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - (void)*a2) >> 3);
    uint64_t v94 = 2 * v93;
    if (2 * v93 <= v92 + 1) {
      uint64_t v94 = v92 + 1;
    }
    if (v93 >= 0x555555555555555) {
      unint64_t v95 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v95 = v94;
    }
    if (v95) {
      double v96 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v95);
    }
    else {
      double v96 = 0;
    }
    float64x2_t v111 = (double *)&v96[24 * v92];
    double v112 = &v96[24 * v95];
    *float64x2_t v111 = v88;
    v111[1] = v89;
    v111[2] = v7;
    double v91 = v111 + 3;
    BOOL v114 = (double *)*a2;
    int v113 = (double *)a2[1];
    if (v113 != *a2)
    {
      do
      {
        long long v115 = *(_OWORD *)(v113 - 3);
        *(v111 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *(v113 - 1);
        *(_OWORD *)(v111 - 3) = v115;
        v111 -= 3;
        v113 -= 3;
      }
      while (v113 != v114);
      int v113 = (double *)*a2;
    }
    *a2 = v111;
    a2[1] = v91;
    a2[2] = v112;
    if (v113) {
      operator delete(v113);
    }
  }
  else
  {
    *uint64_t v63 = v88;
    v63[1] = v89;
    double v91 = v63 + 3;
    v63[2] = v7;
  }
  a2[1] = v91;
  double v116 = v4 * *((double *)this + 7);
  double v117 = v4 * *((double *)this + 8);
  double v118 = -v4;
  unint64_t v119 = (unint64_t)a2[2];
  if ((unint64_t)v91 >= v119)
  {
    unint64_t v121 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (unsigned char *)*a2) >> 3);
    if (v121 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v119 - (void)*a2) >> 3);
    uint64_t v123 = 2 * v122;
    if (2 * v122 <= v121 + 1) {
      uint64_t v123 = v121 + 1;
    }
    if (v122 >= 0x555555555555555) {
      unint64_t v124 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v124 = v123;
    }
    if (v124) {
      BOOL v125 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v124);
    }
    else {
      BOOL v125 = 0;
    }
    unsigned int v141 = (double *)&v125[24 * v121];
    int v142 = &v125[24 * v124];
    *unsigned int v141 = v116;
    v141[1] = v117;
    v141[2] = v118;
    int v120 = v141 + 3;
    int64_t v144 = (double *)*a2;
    int64_t v143 = (double *)a2[1];
    if (v143 != *a2)
    {
      do
      {
        long long v145 = *(_OWORD *)(v143 - 3);
        *(v141 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *(v143 - 1);
        *(_OWORD *)(v141 - 3) = v145;
        v141 -= 3;
        v143 -= 3;
      }
      while (v143 != v144);
      int64_t v143 = (double *)*a2;
    }
    *a2 = v141;
    a2[1] = v120;
    a2[2] = v142;
    if (v143) {
      operator delete(v143);
    }
  }
  else
  {
    *double v91 = v116;
    v91[1] = v117;
    int v120 = v91 + 3;
    v91[2] = v118;
  }
  a2[1] = v120;
  double v146 = v4 * *((double *)this + 9);
  double v147 = v4 * *((double *)this + 8);
  unint64_t v148 = (unint64_t)a2[2];
  if ((unint64_t)v120 >= v148)
  {
    unint64_t v150 = 0xAAAAAAAAAAAAAAABLL * (((char *)v120 - (unsigned char *)*a2) >> 3);
    if (v150 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - (void)*a2) >> 3);
    uint64_t v152 = 2 * v151;
    if (2 * v151 <= v150 + 1) {
      uint64_t v152 = v150 + 1;
    }
    if (v151 >= 0x555555555555555) {
      unint64_t v153 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v153 = v152;
    }
    if (v153) {
      unint64_t v154 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v153);
    }
    else {
      unint64_t v154 = 0;
    }
    BOOL v169 = (double *)&v154[24 * v150];
    BOOL v170 = &v154[24 * v153];
    *BOOL v169 = v146;
    v169[1] = v147;
    v169[2] = v118;
    unint64_t v149 = v169 + 3;
    uint64_t v172 = (double *)*a2;
    size_t v171 = (double *)a2[1];
    if (v171 != *a2)
    {
      do
      {
        long long v173 = *(_OWORD *)(v171 - 3);
        *(v169 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *(v171 - 1);
        *(_OWORD *)(v169 - 3) = v173;
        v169 -= 3;
        v171 -= 3;
      }
      while (v171 != v172);
      size_t v171 = (double *)*a2;
    }
    *a2 = v169;
    a2[1] = v149;
    a2[2] = v170;
    if (v171) {
      operator delete(v171);
    }
  }
  else
  {
    *int v120 = v146;
    v120[1] = v147;
    unint64_t v149 = v120 + 3;
    v120[2] = v118;
  }
  a2[1] = v149;
  double v174 = v4 * *((double *)this + 7);
  double v175 = v4 * *((double *)this + 10);
  unint64_t v176 = (unint64_t)a2[2];
  if ((unint64_t)v149 >= v176)
  {
    unint64_t v178 = 0xAAAAAAAAAAAAAAABLL * (((char *)v149 - (unsigned char *)*a2) >> 3);
    if (v178 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v176 - (void)*a2) >> 3);
    uint64_t v180 = 2 * v179;
    if (2 * v179 <= v178 + 1) {
      uint64_t v180 = v178 + 1;
    }
    if (v179 >= 0x555555555555555) {
      unint64_t v181 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v181 = v180;
    }
    if (v181) {
      BOOL v182 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v181);
    }
    else {
      BOOL v182 = 0;
    }
    BOOL v197 = (double *)&v182[24 * v178];
    uint64_t v198 = &v182[24 * v181];
    *BOOL v197 = v174;
    v197[1] = v175;
    v197[2] = v118;
    uint64_t v177 = v197 + 3;
    BOOL v200 = (double *)*a2;
    unint64_t v199 = (double *)a2[1];
    if (v199 != *a2)
    {
      do
      {
        long long v201 = *(_OWORD *)(v199 - 3);
        *(v197 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *(v199 - 1);
        *(_OWORD *)(v197 - 3) = v201;
        v197 -= 3;
        v199 -= 3;
      }
      while (v199 != v200);
      unint64_t v199 = (double *)*a2;
    }
    *a2 = v197;
    a2[1] = v177;
    a2[2] = v198;
    if (v199) {
      operator delete(v199);
    }
  }
  else
  {
    *unint64_t v149 = v174;
    v149[1] = v175;
    uint64_t v177 = v149 + 3;
    v149[2] = v118;
  }
  a2[1] = v177;
  double v202 = v4 * *((double *)this + 9);
  double v203 = v4 * *((double *)this + 10);
  unint64_t v204 = (unint64_t)a2[2];
  if ((unint64_t)v177 < v204)
  {
    double *v177 = v202;
    v177[1] = v203;
    unsigned int v205 = v177 + 3;
    v177[2] = v118;
    goto LABEL_256;
  }
  unint64_t v206 = 0xAAAAAAAAAAAAAAABLL * (((char *)v177 - (unsigned char *)*a2) >> 3);
  if (v206 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  unint64_t v207 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v204 - (void)*a2) >> 3);
  uint64_t v208 = 2 * v207;
  if (2 * v207 <= v206 + 1) {
    uint64_t v208 = v206 + 1;
  }
  if (v207 >= 0x555555555555555) {
    unint64_t v209 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v209 = v208;
  }
  if (v209) {
    uint64_t v210 = (char *)sub_216782ED8((uint64_t)(a2 + 2), v209);
  }
  else {
    uint64_t v210 = 0;
  }
  int v224 = &v210[24 * v206];
  int v225 = &v210[24 * v209];
  *(double *)int v224 = v202;
  *((double *)v224 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v203;
  *((double *)v224 + 2) = v118;
  unsigned int v205 = (double *)(v224 + 24);
  int v227 = (char *)*a2;
  char v226 = (char *)a2[1];
  if (v226 != *a2)
  {
    do
    {
      long long v228 = *(_OWORD *)(v226 - 24);
      *((void *)v224 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((void *)v226 - 1);
      *(_OWORD *)(v224 - 24) = v228;
      v224 -= 24;
      v226 -= 24;
    }
    while (v226 != v227);
LABEL_253:
    char v226 = (char *)*a2;
  }
LABEL_254:
  *a2 = v224;
  a2[1] = v205;
  a2[2] = v225;
  if (v226) {
    operator delete(v226);
  }
LABEL_256:
  a2[1] = v205;
  memset(v236, 0, sizeof(v236));
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(v237, (double *)this, (double *)this + 3);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(v237, 0, 0.0, (uint64_t)v236);
  for (uint64_t i = 0; i != 192; i += 24)
  {
    double v232 = sub_216893298((double *)v236, (double *)((char *)*a2 + i));
    unsigned int v233 = (char *)*a2 + i;
    *(double *)unsigned int v233 = v232;
    *((void *)v233 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v234;
    *((void *)v233 + 2) = v235;
  }
}

void sub_216898264(_Unwind_Exception *exception_object)
{
  int64x2_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168982C8(void **a1, unint64_t a2)
{
  double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_21677CB10();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    double v6 = (char *)sub_216782ED8(v3, a2);
    double v7 = &v6[24 * v5];
    double v9 = &v6[24 * v8];
    double v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeCornersAtDistance(pxrInternal__aapl__pxrReserved__::GfFrustum *this@<X0>, double a2@<D0>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  sub_2168982C8(a3, 4uLL);
  double v6 = *((double *)this + 7);
  double v7 = -a2;
  if (*((_DWORD *)this + 28) != 1)
  {
    uint64_t v13 = *((void *)this + 8);
    double v14 = (char *)a3[2];
    double v15 = (char *)a3[1];
    if (v15 >= v14)
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (unsigned char *)*a3) >> 3);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (unsigned char *)*a3) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25) {
        double v26 = (char *)sub_216782ED8((uint64_t)(a3 + 2), v25);
      }
      else {
        double v26 = 0;
      }
      uint64_t v41 = &v26[24 * v22];
      uint64_t v42 = &v26[24 * v25];
      *(double *)uint64_t v41 = v6;
      *((void *)v41 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v13;
      *((double *)v41 + 2) = v7;
      double v16 = v41 + 24;
      int32x2_t v44 = (char *)*a3;
      uint64_t v43 = (char *)a3[1];
      if (v43 != *a3)
      {
        do
        {
          long long v45 = *(_OWORD *)(v43 - 24);
          *((void *)v41 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((void *)v43 - 1);
          *(_OWORD *)(v41 - 24) = v45;
          v41 -= 24;
          v43 -= 24;
        }
        while (v43 != v44);
        uint64_t v43 = (char *)*a3;
      }
      *a3 = v41;
      a3[1] = v16;
      a3[2] = v42;
      if (v43) {
        operator delete(v43);
      }
    }
    else
    {
      *(double *)double v15 = v6;
      *((void *)v15 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v13;
      double v16 = v15 + 24;
      *((double *)v15 + 2) = v7;
    }
    a3[1] = v16;
    uint64_t v46 = *((void *)this + 8);
    uint64_t v47 = *((void *)this + 9);
    double v48 = (char *)a3[2];
    if (v16 >= v48)
    {
      unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (unsigned char *)*a3) >> 3);
      if (v50 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v48 - (unsigned char *)*a3) >> 3);
      uint64_t v52 = 2 * v51;
      if (2 * v51 <= v50 + 1) {
        uint64_t v52 = v50 + 1;
      }
      if (v51 >= 0x555555555555555) {
        unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v53 = v52;
      }
      if (v53) {
        double v54 = (char *)sub_216782ED8((uint64_t)(a3 + 2), v53);
      }
      else {
        double v54 = 0;
      }
      double v69 = &v54[24 * v50];
      double v70 = &v54[24 * v53];
      *(void *)double v69 = v47;
      *((void *)v69 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v46;
      *((double *)v69 + 2) = v7;
      double v49 = v69 + 24;
      double v72 = (char *)*a3;
      double v71 = (char *)a3[1];
      if (v71 != *a3)
      {
        do
        {
          long long v73 = *(_OWORD *)(v71 - 24);
          *((void *)v69 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((void *)v71 - 1);
          *(_OWORD *)(v69 - 24) = v73;
          v69 -= 24;
          v71 -= 24;
        }
        while (v71 != v72);
        double v71 = (char *)*a3;
      }
      *a3 = v69;
      a3[1] = v49;
      a3[2] = v70;
      if (v71) {
        operator delete(v71);
      }
    }
    else
    {
      *(void *)double v16 = v47;
      *((void *)v16 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v46;
      double v49 = v16 + 24;
      *((double *)v16 + 2) = v7;
    }
    a3[1] = v49;
    uint64_t v74 = *((void *)this + 7);
    uint64_t v75 = *((void *)this + 10);
    unint64_t v76 = (char *)a3[2];
    if (v49 >= v76)
    {
      unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (unsigned char *)*a3) >> 3);
      if (v77 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((v76 - (unsigned char *)*a3) >> 3);
      uint64_t v79 = 2 * v78;
      if (2 * v78 <= v77 + 1) {
        uint64_t v79 = v77 + 1;
      }
      if (v78 >= 0x555555555555555) {
        unint64_t v80 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v80 = v79;
      }
      if (v80) {
        unint64_t v81 = (char *)sub_216782ED8((uint64_t)(a3 + 2), v80);
      }
      else {
        unint64_t v81 = 0;
      }
      unint64_t v95 = &v81[24 * v77];
      double v96 = &v81[24 * v80];
      *(void *)unint64_t v95 = v74;
      *((void *)v95 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v75;
      *((double *)v95 + 2) = v7;
      uint64_t v63 = (double *)(v95 + 24);
      uint64_t v98 = (char *)*a3;
      double v97 = (char *)a3[1];
      if (v97 != *a3)
      {
        do
        {
          long long v99 = *(_OWORD *)(v97 - 24);
          *((void *)v95 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *((void *)v97 - 1);
          *(_OWORD *)(v95 - 24) = v99;
          v95 -= 24;
          v97 -= 24;
        }
        while (v97 != v98);
        double v97 = (char *)*a3;
      }
      *a3 = v95;
      a3[1] = v63;
      a3[2] = v96;
      if (v97) {
        operator delete(v97);
      }
    }
    else
    {
      *(void *)double v49 = v74;
      *((void *)v49 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v75;
      uint64_t v63 = (double *)(v49 + 24);
      *((double *)v49 + 2) = v7;
    }
    a3[1] = v63;
    double v87 = *((double *)this + 9);
    double v88 = *((double *)this + 10);
    unint64_t v100 = (unint64_t)a3[2];
    if ((unint64_t)v63 >= v100)
    {
      unint64_t v102 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (unsigned char *)*a3) >> 3);
      if (v102 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - (void)*a3) >> 3);
      uint64_t v104 = 2 * v103;
      if (2 * v103 <= v102 + 1) {
        uint64_t v104 = v102 + 1;
      }
      if (v103 >= 0x555555555555555) {
        unint64_t v105 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v105 = v104;
      }
      if (v105) {
        unint64_t v106 = (char *)sub_216782ED8((uint64_t)(a3 + 2), v105);
      }
      else {
        unint64_t v106 = 0;
      }
      unint64_t v107 = (double *)&v106[24 * v102];
      uint64_t v108 = &v106[24 * v105];
      *unint64_t v107 = v87;
      v107[1] = v88;
      v107[2] = v7;
      long long v101 = v107 + 3;
      double v112 = (double *)*a3;
      unint64_t v109 = (double *)a3[1];
      if (v109 == *a3) {
        goto LABEL_125;
      }
      do
      {
        long long v113 = *(_OWORD *)(v109 - 3);
        *(v107 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *(v109 - 1);
        *(_OWORD *)(v107 - 3) = v113;
        v107 -= 3;
        v109 -= 3;
      }
      while (v109 != v112);
      goto LABEL_124;
    }
LABEL_108:
    *uint64_t v63 = v87;
    v63[1] = v88;
    long long v101 = v63 + 3;
    v63[2] = v7;
    goto LABEL_127;
  }
  double v8 = v6 * a2;
  double v9 = *((double *)this + 8) * a2;
  unint64_t v10 = (unint64_t)a3[2];
  double v11 = (double *)a3[1];
  if ((unint64_t)v11 >= v10)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (unsigned char *)*a3) >> 3);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*a3) >> 3);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0x555555555555555) {
      unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20) {
      double v21 = (char *)sub_216782ED8((uint64_t)(a3 + 2), v20);
    }
    else {
      double v21 = 0;
    }
    double v27 = (double *)&v21[24 * v17];
    double v28 = &v21[24 * v20];
    double *v27 = v8;
    v27[1] = v9;
    void v27[2] = v7;
    int v12 = v27 + 3;
    BOOL v30 = (double *)*a3;
    double v29 = (double *)a3[1];
    if (v29 != *a3)
    {
      do
      {
        long long v31 = *(_OWORD *)(v29 - 3);
        *(v27 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *(v29 - 1);
        *(_OWORD *)(v27 - 3) = v31;
        v27 -= 3;
        v29 -= 3;
      }
      while (v29 != v30);
      double v29 = (double *)*a3;
    }
    *a3 = v27;
    a3[1] = v12;
    a3[2] = v28;
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    *double v11 = v8;
    v11[1] = v9;
    int v12 = v11 + 3;
    long long v11[2] = v7;
  }
  a3[1] = v12;
  double v32 = *((double *)this + 9) * a2;
  double v33 = *((double *)this + 8) * a2;
  unint64_t v34 = (unint64_t)a3[2];
  if ((unint64_t)v12 >= v34)
  {
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (unsigned char *)*a3) >> 3);
    if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (void)*a3) >> 3);
    uint64_t v38 = 2 * v37;
    if (2 * v37 <= v36 + 1) {
      uint64_t v38 = v36 + 1;
    }
    if (v37 >= 0x555555555555555) {
      unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v39 = v38;
    }
    if (v39) {
      double v40 = (char *)sub_216782ED8((uint64_t)(a3 + 2), v39);
    }
    else {
      double v40 = 0;
    }
    double v55 = (double *)&v40[24 * v36];
    double v56 = &v40[24 * v39];
    *double v55 = v32;
    v55[1] = v33;
    v55[2] = v7;
    double v35 = v55 + 3;
    double v58 = (double *)*a3;
    double v57 = (double *)a3[1];
    if (v57 != *a3)
    {
      do
      {
        long long v59 = *(_OWORD *)(v57 - 3);
        *(v55 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *(v57 - 1);
        *(_OWORD *)(v55 - 3) = v59;
        v55 -= 3;
        v57 -= 3;
      }
      while (v57 != v58);
      double v57 = (double *)*a3;
    }
    *a3 = v55;
    a3[1] = v35;
    a3[2] = v56;
    if (v57) {
      operator delete(v57);
    }
  }
  else
  {
    double *v12 = v32;
    v12[1] = v33;
    double v35 = v12 + 3;
    void v12[2] = v7;
  }
  a3[1] = v35;
  double v60 = *((double *)this + 7) * a2;
  double v61 = *((double *)this + 10) * a2;
  unint64_t v62 = (unint64_t)a3[2];
  if ((unint64_t)v35 >= v62)
  {
    unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (unsigned char *)*a3) >> 3);
    if (v64 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (void)*a3) >> 3);
    uint64_t v66 = 2 * v65;
    if (2 * v65 <= v64 + 1) {
      uint64_t v66 = v64 + 1;
    }
    if (v65 >= 0x555555555555555) {
      unint64_t v67 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v67 = v66;
    }
    if (v67) {
      uint64_t v68 = (char *)sub_216782ED8((uint64_t)(a3 + 2), v67);
    }
    else {
      uint64_t v68 = 0;
    }
    uint64_t v82 = (double *)&v68[24 * v64];
    double v83 = &v68[24 * v67];
    *uint64_t v82 = v60;
    v82[1] = v61;
    _OWORD v82[2] = v7;
    uint64_t v63 = v82 + 3;
    double v85 = (double *)*a3;
    double v84 = (double *)a3[1];
    if (v84 != *a3)
    {
      do
      {
        long long v86 = *(_OWORD *)(v84 - 3);
        *(v82 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *(v84 - 1);
        *(_OWORD *)(v82 - 3) = v86;
        v82 -= 3;
        v84 -= 3;
      }
      while (v84 != v85);
      double v84 = (double *)*a3;
    }
    *a3 = v82;
    a3[1] = v63;
    a3[2] = v83;
    if (v84) {
      operator delete(v84);
    }
  }
  else
  {
    *double v35 = v60;
    v35[1] = v61;
    uint64_t v63 = v35 + 3;
    v35[2] = v7;
  }
  a3[1] = v63;
  double v87 = *((double *)this + 9) * a2;
  double v88 = *((double *)this + 10) * a2;
  unint64_t v89 = (unint64_t)a3[2];
  if ((unint64_t)v63 < v89) {
    goto LABEL_108;
  }
  unint64_t v90 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (unsigned char *)*a3) >> 3);
  if (v90 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - (void)*a3) >> 3);
  uint64_t v92 = 2 * v91;
  if (2 * v91 <= v90 + 1) {
    uint64_t v92 = v90 + 1;
  }
  if (v91 >= 0x555555555555555) {
    unint64_t v93 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v93 = v92;
  }
  if (v93) {
    uint64_t v94 = (char *)sub_216782ED8((uint64_t)(a3 + 2), v93);
  }
  else {
    uint64_t v94 = 0;
  }
  unint64_t v107 = (double *)&v94[24 * v90];
  uint64_t v108 = &v94[24 * v93];
  *unint64_t v107 = v87;
  v107[1] = v88;
  v107[2] = v7;
  long long v101 = v107 + 3;
  long long v110 = (double *)*a3;
  unint64_t v109 = (double *)a3[1];
  if (v109 == *a3) {
    goto LABEL_125;
  }
  do
  {
    long long v111 = *(_OWORD *)(v109 - 3);
    *(v107 - sub_216850320((uint64_t)&word_267B8E45F + 1) = *(v109 - 1);
    *(_OWORD *)(v107 - 3) = v111;
    v107 -= 3;
    v109 -= 3;
  }
  while (v109 != v110);
LABEL_124:
  unint64_t v109 = (double *)*a3;
LABEL_125:
  *a3 = v107;
  a3[1] = v101;
  a3[2] = v108;
  if (v109) {
    operator delete(v109);
  }
LABEL_127:
  a3[1] = v101;
  memset(v119, 0, sizeof(v119));
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(v120, (double *)this, (double *)this + 3);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(v120, 0, 0.0, (uint64_t)v119);
  for (uint64_t i = 0; i != 96; i += 24)
  {
    double v115 = sub_216893298((double *)v119, (double *)((char *)*a3 + i));
    double v116 = (char *)*a3 + i;
    *(double *)double v116 = v115;
    *((void *)v116 + sub_216850320((uint64_t)&word_267B8E45F + 1) = v117;
    *((void *)v116 + 2) = v118;
  }
}