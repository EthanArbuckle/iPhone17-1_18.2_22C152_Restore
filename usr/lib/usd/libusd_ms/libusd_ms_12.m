void sub_216CD21C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CD21DC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = 0;
  char v25 = 0;
  sub_216982670((uint64_t)&v24, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v24));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8) {
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==();
          }
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
          v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_216CD2494(a1, v8, a3, a4, (uint64_t)&v24);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v24 = *v20;
    void *v20 = v24;
  }
  else
  {
    *(void *)uint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24)
    {
      unint64_t v21 = *(void *)(*(void *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v21 >= v9) {
          v21 %= v9;
        }
      }
      else
      {
        v21 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v24;
    }
  }
  uint64_t v22 = v24;
  uint64_t v24 = 0;
  ++*(void *)(a1 + 24);
  sub_216CD2520((uint64_t)&v24, 0);
  return v22;
}

void sub_216CD247C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CD2520((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD2494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint8x8_t v10 = operator new(0xB0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint8x8_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_216980D74((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CD2508(_Unwind_Exception *a1)
{
  sub_216CD2520(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216CD2520(uint64_t a1, uint64_t a2)
{
  v2 = *(void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C7D454(v2 + 2);
    }
    operator delete(v2);
  }
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **sub_216CD2578(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t __src = (a2[1] - *a2) >> 3;
  sub_216C80458((uint64_t)a1, (char *)&__src);
  return sub_216CD25C8(*a2, a2[1], a1);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **sub_216CD25C8(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a3)
{
  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      int __src = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath(*a3, v5);
      sub_216C984FC((uint64_t)a3, (char *)&__src);
      v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 8);
    }
    while (v5 != a2);
  }
  return a3;
}

__n128 sub_216CD263C(uint64_t a1)
{
  v2 = (char *)operator new(0x18uLL);
  *(void *)v2 = &unk_26C763A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD2688(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD26B8()
{
}

uint64_t sub_216CD2704(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763AD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD2744()
{
  return &unk_26C763AD8;
}

void sub_216CD2750()
{
}

void sub_216CD2828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216980BCC((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CD283C()
{
}

void sub_216CD2AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_216981168((void ***)(v6 - 40));
  sub_216980BCC((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_216CD2AEC(uint64_t a1, int **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    v11 = (int *)"usd/crateFile.cpp";
    v12 = "_Read";
    uint64_t v13 = 1189;
    float v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::SdfPath]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_2169C4410(&v11, v16);
  BOOL v7 = sub_216CD2C0C(a1, v11, v16);
  BOOL v8 = v7;
  if (&v11 != a2 && v7) {
    sub_216A98D9C((uint64_t)a2, v11, v12, (v12 - (char *)v11) >> 3);
  }
  unint64_t v17 = (void **)&v11;
  sub_216981168(&v17);
  return v8;
}

void sub_216CD2BF4(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1;
  sub_216981168((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

BOOL sub_216CD2C0C(uint64_t a1, int *a2, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  uint64_t v6 = a1 + 8;
  _C[0] = -1;
  BOOL result = sub_216C98940(a1 + 8, 0, (__sFILE *)_C);
  if (result)
  {
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(*(void *)a1 + 96);
      uint8x8_t v10 = _C[0] >= (unint64_t)((*(void *)(*(void *)a1 + 104) - v9) >> 3)
          ? pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result)
          : (uint64_t *)(v9 + 8 * _C[0]);
      sub_2169C487C(a2, v10);
      v11 = a2 + 1;
      sub_2169C48D4(v11, (_DWORD *)v10 + 1);
      if (a3 - 1 == v8) {
        break;
      }
      _C[0] = -1;
      BOOL result = sub_216C98940(v6, 0, (__sFILE *)_C);
      a2 = v11 + 1;
      ++v8;
      if (!result) {
        return v8 >= a3;
      }
    }
    return 1;
  }
  return result;
}

__n128 sub_216CD2D14(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD2D60(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD2D90()
{
}

uint64_t sub_216CD2D98(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763B58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD2DD8()
{
  return &unk_26C763B58;
}

void sub_216CD2DE4()
{
}

void sub_216CD2E64()
{
}

void sub_216CD2F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216980BCC((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CD2F60()
{
}

void sub_216CD31D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_216981168((void ***)(v6 - 40));
  sub_216980BCC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD3210(uint64_t a1, int **a2)
{
  unint64_t __dst = 0;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v5 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    v11 = (int *)"usd/crateFile.cpp";
    v12 = "_Read";
    uint64_t v13 = 1189;
    float v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfPath]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_2169C4410(&v11, __dst);
  uint64_t v7 = sub_216CD333C(a1, v11, __dst);
  uint64_t v8 = v7;
  if (&v11 == a2) {
    char v9 = 0;
  }
  else {
    char v9 = v7;
  }
  if (v9) {
    sub_216A98D9C((uint64_t)a2, v11, v12, (v12 - (char *)v11) >> 3);
  }
  unint64_t v17 = (void **)&v11;
  sub_216981168(&v17);
  return v8;
}

void sub_216CD3324(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1;
  sub_216981168((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_216CD333C(uint64_t a1, int *a2, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  uint64_t v6 = a1 + 8;
  unsigned int __dst = -1;
  uint64_t result = sub_216C82F78(a1 + 8, &__dst, 4uLL);
  if (result)
  {
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(*(void *)a1 + 96);
      uint8x8_t v10 = __dst >= (unint64_t)((*(void *)(*(void *)a1 + 104) - v9) >> 3)
          ? pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result)
          : (uint64_t *)(v9 + 8 * __dst);
      sub_2169C487C(a2, v10);
      v11 = a2 + 1;
      sub_2169C48D4(v11, (_DWORD *)v10 + 1);
      if (a3 - 1 == v8) {
        break;
      }
      unsigned int __dst = -1;
      uint64_t result = sub_216C82F78(v6, &__dst, 4uLL);
      a2 = v11 + 1;
      ++v8;
      if (!result) {
        return v8 >= a3;
      }
    }
    return 1;
  }
  return result;
}

__n128 sub_216CD3444(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763B78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD3490(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763B78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD34C0(uint64_t a1)
{
}

uint64_t sub_216CD34C8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763BD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD3508()
{
  return &unk_26C763BD8;
}

void sub_216CD3514(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 6496);
  if (v1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216CD35C0();
}

void sub_216CD359C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CD35C0()
{
}

void sub_216CD36BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_216980BCC((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CD36E4()
{
}

void sub_216CD3958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_216981168((void ***)(v6 - 40));
  sub_216980BCC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD3994(void *a1, int **a2)
{
  unint64_t v19 = 0;
  uint64_t v4 = a1 + 1;
  if (!sub_216C804FC(a1 + 1, (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)a1[1] + 16))(a1[1]);
  uint64_t v6 = a1[3];
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    float v14 = (int *)"usd/crateFile.cpp";
    char v15 = "_Read";
    uint64_t v16 = 1189;
    unint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::SdfPath]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_2169C4410(&v14, v19);
  uint64_t v9 = sub_216CD3B14(a1, v14, v19);
  uint64_t v10 = v9;
  if (&v14 == a2) {
    char v11 = 0;
  }
  else {
    char v11 = v9;
  }
  if (v11) {
    sub_216A98D9C((uint64_t)a2, v14, v15, (v15 - (char *)v14) >> 3);
  }
  v20 = (void **)&v14;
  sub_216981168(&v20);
  return v10;
}

void sub_216CD3AFC(_Unwind_Exception *a1)
{
  *(void *)(v2 - 56) = v1;
  sub_216981168((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_216CD3B14(void *a1, int *a2, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  uint64_t v6 = a1 + 1;
  unsigned int v12 = -1;
  uint64_t result = sub_216C804FC(a1 + 1, (uint64_t)&v12, 4uLL);
  if (result)
  {
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(*a1 + 96);
      uint64_t v10 = v12 >= (unint64_t)((*(void *)(*a1 + 104) - v9) >> 3)
          ? pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result)
          : (uint64_t *)(v9 + 8 * v12);
      sub_2169C487C(a2, v10);
      char v11 = a2 + 1;
      sub_2169C48D4(v11, (_DWORD *)v10 + 1);
      if (a3 - 1 == v8) {
        break;
      }
      unsigned int v12 = -1;
      uint64_t result = sub_216C804FC(v6, (uint64_t)&v12, 4uLL);
      a2 = v11 + 1;
      ++v8;
      if (!result) {
        return v8 >= a3;
      }
    }
    return 1;
  }
  return result;
}

__n128 sub_216CD3C1C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD3C68(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CD3C98(uint64_t a1, uint64_t a2)
{
  return sub_216CD3CEC((char ***)(a1 + 8), a2);
}

uint64_t sub_216CD3CA0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763C58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD3CE0()
{
  return &unk_26C763C58;
}

uint64_t sub_216CD3CEC(char ***a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  v3 = (uint64_t *)a1[1];
  uint64_t v4 = (*a1)[791];
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v6 = *(unsigned __int8 **)a2;
  }

  return sub_216CD3D58(v3, v2, (char **)v4 + 32, v6);
}

uint64_t sub_216CD3D58(uint64_t *a1, char **a2, char **a3, unsigned __int8 *a4)
{
  v20[0] = a2;
  v20[1] = a3;
  sub_2169D73B4((uint64_t)&v13, (uint64_t)a4);
  unint64_t v21 = (void **)&v19;
  sub_2169CC68C(&v21);
  unint64_t v21 = (void **)&v18;
  sub_2169CC68C(&v21);
  unint64_t v21 = (void **)&v17;
  sub_2169CC68C(&v21);
  unint64_t v21 = (void **)&v16;
  sub_2169CC68C(&v21);
  unint64_t v21 = (void **)&v15;
  sub_2169CC68C(&v21);
  unint64_t v21 = (void **)&v14;
  sub_2169CC68C(&v21);
  uint64_t v7 = *a1;
  if (!*a1)
  {
    unint64_t v8 = operator new(0x28uLL);
    *unint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7D6C0(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  unint64_t v21 = 0;
  uint64_t v9 = sub_216CD3FAC(v7, a4, (uint64_t)a4, &v21);
  uint64_t v10 = v9;
  if (v11)
  {
    *(void *)(v9 + 168) = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x23000000000000;
    sub_216CD3E74(v20, (uint64_t *)a4);
  }
  return *(void *)(v10 + 168);
}

uint64_t sub_216CD3E74(char ***a1, uint64_t *a2)
{
  sub_216CCEF5C(&__src, (uint64_t)a2);
  if ((__src & 0x60) != 0)
  {
    uint64_t v4 = (uint64_t)(*a1)[791];
    sub_216779094(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_216CCED74(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = sub_216CA3630((uint64_t)a1, &__src);
  char v6 = __src;
  if ((__src & 2) != 0)
  {
    uint64_t result = sub_216CD4348(a1, a2 + 1);
    char v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  uint64_t result = sub_216CD4348(a1, a2 + 4);
  char v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = sub_216CD4348(a1, a2 + 7);
  char v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = sub_216CD4348(a1, a2 + 10);
  char v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return sub_216CD4348(a1, a2 + 16);
  }
LABEL_16:
  uint64_t result = sub_216CD4348(a1, a2 + 13);
  if ((__src & 0x10) == 0) {
    return result;
  }
  return sub_216CD4348(a1, a2 + 16);
}

void sub_216CD3F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CD3FAC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = 0;
  char v25 = 0;
  sub_2169D796C((unint64_t)&v24, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v24));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    char v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unsigned int v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8) {
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==();
          }
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
          unsigned int v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_216CD4264(a1, v8, a3, a4, (uint64_t)&v24);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v24 = *v20;
    void *v20 = v24;
  }
  else
  {
    *(void *)uint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24)
    {
      unint64_t v21 = *(void *)(*(void *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v21 >= v9) {
          v21 %= v9;
        }
      }
      else
      {
        v21 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v24;
    }
  }
  uint64_t v22 = v24;
  uint64_t v24 = 0;
  ++*(void *)(a1 + 24);
  sub_216CD42F0((uint64_t)&v24, 0);
  return v22;
}

void sub_216CD424C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CD42F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD4264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint8x8_t v10 = operator new(0xB0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint8x8_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_2169D73B4((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CD42D8(_Unwind_Exception *a1)
{
  sub_216CD42F0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216CD42F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C7D780(v2 + 2);
    }
    operator delete(v2);
  }
}

uint64_t sub_216CD4348(char ***a1, uint64_t *a2)
{
  uint64_t __src = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
  uint64_t result = sub_216C80458((uint64_t)a1, (char *)&__src);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1] - *a2;
  if (v6)
  {
    uint64_t v7 = 56 * (v6 / 56);
    do
    {
      uint64_t result = (uint64_t)sub_216CD43F0(a1, v5);
      v5 += 56;
      v7 -= 56;
    }
    while (v7);
  }
  return result;
}

void *sub_216CD43F0(char ***a1, uint64_t a2)
{
  LODWORD(__src) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a1, (unsigned __int8 *)a2);
  sub_216C984FC((uint64_t)a1, (char *)&__src);
  LODWORD(__src) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)*a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24));
  sub_216C984FC((uint64_t)a1, (char *)&__src);
  uint64_t __src = *(void *)(a2 + 32);
  sub_216C80458((uint64_t)a1, (char *)&__src);
  uint64_t __src = *(void *)(a2 + 40);
  sub_216C80458((uint64_t)a1, (char *)&__src);
  return sub_216CCCA14(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)(a2 + 48));
}

__n128 sub_216CD448C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD44D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD4508()
{
}

uint64_t sub_216CD4554(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763CD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD4594()
{
  return &unk_26C763CD8;
}

void sub_216CD45A0()
{
}

void sub_216CD4678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169D5040((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CD468C()
{
}

void sub_216CD4900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_2169CC68C((void ***)(v6 - 40));
  sub_2169D5040((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD493C(uint64_t *a1, long long **a2)
{
  unint64_t v18 = 0;
  if (!sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&v18)) {
    return 0;
  }
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v18 > v6)
  {
    unint64_t v13 = (long long *)"usd/crateFile.cpp";
    float v14 = (long long *)"_Read";
    uint64_t v15 = 1189;
    BOOL v16 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::SdfReference]";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v18, v6, v4);
    return 0;
  }
  sub_216CD4ABC(&v13, v18);
  unint64_t v7 = v18;
  if (!v18) {
    goto LABEL_10;
  }
  BOOL v8 = 0;
  unint64_t v9 = 0;
  uint8x8_t v10 = v13;
  do
  {
    if (!sub_216CD4C84(a1, (uint64_t)v10)) {
      break;
    }
    ++v9;
    uint8x8_t v10 = (long long *)((char *)v10 + 56);
    BOOL v8 = v9 >= v7;
  }
  while (v7 != v9);
  if (!v8)
  {
    uint64_t v11 = 0;
  }
  else
  {
LABEL_10:
    if (&v13 != a2) {
      sub_216A993D8((uint64_t)a2, v13, v14, 0x6DB6DB6DB6DB6DB7 * (((char *)v14 - (char *)v13) >> 3));
    }
    uint64_t v11 = 1;
  }
  size_t v19 = &v13;
  sub_2169CC68C((void ***)&v19);
  return v11;
}

void sub_216CD4A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_2169CC68C(&a18);
  _Unwind_Resume(a1);
}

void *sub_216CD4ABC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2167B8760(a1, a2);
    sub_216CD4B28((uint64_t)a1, a2);
  }
  return a1;
}

void sub_216CD4B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216CD4B28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = v3 + 56 * a2;
    uint64_t v5 = 56 * a2;
    do
    {
      sub_216CD4B9C(a1 + 16, v3);
      v3 += 56;
      v5 -= 56;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3;
}

void sub_216CD4B94(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216CD4B9C(uint64_t a1, uint64_t a2)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v5 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v4, 0.0, 1.0);
  uint64_t v3 = 0;
  pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(a2, __p, &v5, v4, &v3);
  sub_2168EBBB8(&v3, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v5 + 1);
  sub_21697C414(&v5);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216CD4C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, int a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216CD4C84(uint64_t *a1, uint64_t a2)
{
  memset(&__p._ub, 0, 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__p._write);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__p._write + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&__p._read, 0.0, 1.0);
  __p._close = 0;
  LODWORD(__p._p) = -1;
  EmptyToken = (uint64_t *)sub_216C98940((uint64_t)(a1 + 1), 0, &__p);
  if (!EmptyToken) {
    goto LABEL_19;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 144);
  if (LODWORD(__p._p) >= (unint64_t)((*(void *)(*a1 + 152) - v6) >> 2))
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
    unsigned int v12 = (const std::string *)&qword_267B91638;
  }
  else
  {
    unint64_t v7 = *(unsigned int *)(v6 + 4 * LODWORD(__p._p));
    uint64_t v9 = v5 + 120;
    uint64_t v8 = *(void *)(v5 + 120);
    if (v7 >= (*(void *)(v9 + 8) - v8) >> 3)
    {
      EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
      uint8x8_t v10 = &qword_267B91658;
    }
    else
    {
      uint8x8_t v10 = (uint64_t *)(v8 + 8 * v7);
    }
    unint64_t v11 = *v10 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v12 = v11
        ? (const std::string *)(v11 + 16)
        : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
  }
  std::string::operator=((std::string *)&__p._ub, v12);
  LODWORD(__p._p) = -1;
  BOOL v13 = sub_216C98940((uint64_t)(a1 + 1), 0, &__p);
  if (!v13) {
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)(*a1 + 96);
  uint64_t v15 = LODWORD(__p._p) >= (unint64_t)((*(void *)(*a1 + 104) - v14) >> 3)
      ? pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v13)
      : (uint64_t *)(v14 + 8 * LODWORD(__p._p));
  sub_2169C487C((int *)&__p._write, v15);
  sub_2169C48D4((int *)&__p._write + 1, (_DWORD *)v15 + 1);
  *(void *)&__p._ur = 0;
  __p._lb._base = 0;
  if (sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&__p._lb)
    && sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&__p._ur)
    && (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&__p, *(double *)&__p._lb._base, *(double *)&__p._ur), *(_OWORD *)&__p._read = *(_OWORD *)&__p._p, sub_216CCCDB8(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&__p._close)))
  {
    pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(&__p, &__p._ub, &__p._write, &__p._read, &__p._close);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)&__p._p;
    *(void *)(a2 + 16) = *(void *)&__p._flags;
    *((unsigned char *)&__p._file + 5) = 0;
    LOBYTE(__p._p) = 0;
    sub_21697DE94((int *)(a2 + 24), (int *)&__p._bf);
    sub_21697DEEC((int *)(a2 + 28), (int *)&__p._bf._base + 1);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&__p._bf._size;
    cookie = (void **)__p._cookie;
    __p._cookie = 0;
    sub_2168EBBB8((void ***)(a2 + 48), cookie);
    sub_2168EBBB8((void ***)&__p._cookie, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p._bf._base + 1);
    sub_21697C414(&__p._bf);
    if (*((char *)&__p._file + 5) < 0) {
      operator delete(__p._p);
    }
    uint64_t v17 = 1;
  }
  else
  {
LABEL_19:
    uint64_t v17 = 0;
  }
  sub_2168EBBB8((void ***)&__p._close, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p._write + 1);
  sub_21697C414(&__p._write);
  if (SHIBYTE(__p._extra) < 0) {
    operator delete(__p._ub._base);
  }
  return v17;
}

void sub_216CD4F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, int a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_216CD4F70(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD4FBC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD4FEC()
{
}

uint64_t sub_216CD4FF4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763D58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD5034()
{
  return &unk_26C763D58;
}

void sub_216CD5040()
{
}

void sub_216CD50C0()
{
}

void sub_216CD51A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169D5040((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CD51BC()
{
}

void sub_216CD5430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_2169CC68C((void ***)(v6 - 40));
  sub_2169D5040((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD546C(uint64_t a1, long long **a2)
{
  unint64_t __dst = 0;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v5 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    BOOL v13 = (long long *)"usd/crateFile.cpp";
    uint64_t v14 = (long long *)"_Read";
    uint64_t v15 = 1189;
    BOOL v16 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfReference]";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_216CD4ABC(&v13, __dst);
  unint64_t v7 = __dst;
  if (!__dst) {
    goto LABEL_10;
  }
  BOOL v8 = 0;
  unint64_t v9 = 0;
  uint8x8_t v10 = v13;
  do
  {
    if (!sub_216CD55F8(a1, (uint64_t)v10)) {
      break;
    }
    ++v9;
    uint8x8_t v10 = (long long *)((char *)v10 + 56);
    BOOL v8 = v9 >= v7;
  }
  while (v7 != v9);
  if (!v8)
  {
    uint64_t v11 = 0;
  }
  else
  {
LABEL_10:
    if (&v13 != a2) {
      sub_216A993D8((uint64_t)a2, v13, v14, 0x6DB6DB6DB6DB6DB7 * (((char *)v14 - (char *)v13) >> 3));
    }
    uint64_t v11 = 1;
  }
  size_t v19 = &v13;
  sub_2169CC68C((void ***)&v19);
  return v11;
}

void sub_216CD55D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_2169CC68C(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD55F8(uint64_t a1, uint64_t a2)
{
  memset(&v29, 0, sizeof(v29));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v28);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v26, 0.0, 1.0);
  char v25 = 0;
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C82F78(a1 + 8, __p, 4uLL);
  if (!EmptyToken) {
    goto LABEL_19;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(*(void *)a1 + 144);
  if (LODWORD(__p[0]) >= (unint64_t)((*(void *)(*(void *)a1 + 152) - v6) >> 2))
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
    unsigned int v12 = (const std::string *)&qword_267B91638;
  }
  else
  {
    unint64_t v7 = *(unsigned int *)(v6 + 4 * LODWORD(__p[0]));
    uint64_t v9 = v5 + 120;
    uint64_t v8 = *(void *)(v5 + 120);
    if (v7 >= (*(void *)(v9 + 8) - v8) >> 3)
    {
      EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
      uint8x8_t v10 = &qword_267B91658;
    }
    else
    {
      uint8x8_t v10 = (uint64_t *)(v8 + 8 * v7);
    }
    unint64_t v11 = *v10 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v12 = v11
        ? (const std::string *)(v11 + 16)
        : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
  }
  std::string::operator=(&v29, v12);
  LODWORD(__p[0]) = -1;
  BOOL v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C82F78(a1 + 8, __p, 4uLL);
  if (!v13) {
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)(*(void *)a1 + 96);
  uint64_t v15 = LODWORD(__p[0]) >= (unint64_t)((*(void *)(*(void *)a1 + 104) - v14) >> 3)
      ? pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v13)
      : (uint64_t *)(v14 + 8 * LODWORD(__p[0]));
  sub_2169C487C(&v27, v15);
  sub_2169C48D4(&v28, (_DWORD *)v15 + 1);
  double v30 = 0.0;
  double __dst = 0.0;
  if (sub_216C82F78(a1 + 8, &__dst, 8uLL)
    && sub_216C82F78(a1 + 8, &v30, 8uLL)
    && (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, __dst, v30),
        long long v26 = *(_OWORD *)__p,
        sub_216CCDC74(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v25)))
  {
    pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__p, &v29, &v27, &v26, &v25);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v20;
    HIBYTE(v20) = 0;
    LOBYTE(__p[0]) = 0;
    sub_21697DE94((int *)(a2 + 24), &v21);
    sub_21697DEEC((int *)(a2 + 28), &v22);
    *(_OWORD *)(a2 + 32) = v23;
    BOOL v16 = v24;
    uint64_t v24 = 0;
    sub_2168EBBB8((void ***)(a2 + 48), v16);
    sub_2168EBBB8(&v24, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_21697C414(&v21);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v17 = 1;
  }
  else
  {
LABEL_19:
    uint64_t v17 = 0;
  }
  sub_2168EBBB8(&v25, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_21697C414(&v27);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  return v17;
}

void sub_216CD589C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, int a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_216CD58E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD5930(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD5960(uint64_t a1)
{
}

uint64_t sub_216CD5968(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763DD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD59A8()
{
  return &unk_26C763DD8;
}

void sub_216CD59B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 6496);
  if (v1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216CD5A60();
}

void sub_216CD5A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CD5A60()
{
}

void sub_216CD5B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2169D5040((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CD5B84()
{
}

void sub_216CD5DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_2169CC68C((void ***)(v6 - 40));
  sub_2169D5040((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD5E34(uint64_t *a1, long long **a2)
{
  unint64_t v21 = 0;
  uint64_t v4 = a1 + 1;
  if (!sub_216C804FC(a1 + 1, (uint64_t)&v21, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 16))(a1[1]);
  uint64_t v6 = a1[3];
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v21;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v21 > v7)
  {
    BOOL v16 = (long long *)"usd/crateFile.cpp";
    uint64_t v17 = (long long *)"_Read";
    uint64_t v18 = 1189;
    size_t v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::SdfReference]";
    char v20 = 0;
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v14);
    return 0;
  }
  sub_216CD4ABC(&v16, v21);
  unint64_t v9 = v21;
  if (!v21) {
    goto LABEL_10;
  }
  BOOL v10 = 0;
  unint64_t v11 = 0;
  unsigned int v12 = v16;
  do
  {
    if (!sub_216CD600C(a1, (uint64_t)v12)) {
      break;
    }
    ++v11;
    unsigned int v12 = (long long *)((char *)v12 + 56);
    BOOL v10 = v11 >= v9;
  }
  while (v9 != v11);
  if (!v10)
  {
    uint64_t v13 = 0;
  }
  else
  {
LABEL_10:
    if (&v16 != a2) {
      sub_216A993D8((uint64_t)a2, v16, v17, 0x6DB6DB6DB6DB6DB7 * (((char *)v17 - (char *)v16) >> 3));
    }
    uint64_t v13 = 1;
  }
  int v22 = &v16;
  sub_2169CC68C((void ***)&v22);
  return v13;
}

void sub_216CD5FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_2169CC68C(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD600C(uint64_t *a1, uint64_t a2)
{
  memset(&v29, 0, sizeof(v29));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v28);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v26, 0.0, 1.0);
  char v25 = 0;
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C804FC(a1 + 1, (uint64_t)__p, 4uLL);
  if (!EmptyToken) {
    goto LABEL_19;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 144);
  if (LODWORD(__p[0]) >= (unint64_t)((*(void *)(*a1 + 152) - v6) >> 2))
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
    unsigned int v12 = (const std::string *)&qword_267B91638;
  }
  else
  {
    unint64_t v7 = *(unsigned int *)(v6 + 4 * LODWORD(__p[0]));
    uint64_t v9 = v5 + 120;
    uint64_t v8 = *(void *)(v5 + 120);
    if (v7 >= (*(void *)(v9 + 8) - v8) >> 3)
    {
      EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
      BOOL v10 = &qword_267B91658;
    }
    else
    {
      BOOL v10 = (uint64_t *)(v8 + 8 * v7);
    }
    unint64_t v11 = *v10 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v12 = v11
        ? (const std::string *)(v11 + 16)
        : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
  }
  std::string::operator=(&v29, v12);
  LODWORD(__p[0]) = -1;
  uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C804FC(a1 + 1, (uint64_t)__p, 4uLL);
  if (!v13) {
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)(*a1 + 96);
  uint64_t v15 = LODWORD(__p[0]) >= (unint64_t)((*(void *)(*a1 + 104) - v14) >> 3)
      ? pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v13)
      : (uint64_t *)(v14 + 8 * LODWORD(__p[0]));
  sub_2169C487C(&v27, v15);
  sub_2169C48D4(&v28, (_DWORD *)v15 + 1);
  double v30 = 0.0;
  double v31 = 0.0;
  if (sub_216C804FC(a1 + 1, (uint64_t)&v31, 8uLL)
    && sub_216C804FC(a1 + 1, (uint64_t)&v30, 8uLL)
    && (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, v31, v30),
        long long v26 = *(_OWORD *)__p,
        sub_216CCE2C0(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v25)))
  {
    pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__p, &v29, &v27, &v26, &v25);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v20;
    HIBYTE(v20) = 0;
    LOBYTE(__p[0]) = 0;
    sub_21697DE94((int *)(a2 + 24), &v21);
    sub_21697DEEC((int *)(a2 + 28), &v22);
    *(_OWORD *)(a2 + 32) = v23;
    BOOL v16 = v24;
    uint64_t v24 = 0;
    sub_2168EBBB8((void ***)(a2 + 48), v16);
    sub_2168EBBB8(&v24, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_21697C414(&v21);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v17 = 1;
  }
  else
  {
LABEL_19:
    uint64_t v17 = 0;
  }
  sub_2168EBBB8(&v25, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_21697C414(&v27);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  return v17;
}

void sub_216CD62B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, int a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_216CD62F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD6344(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CD6374(uint64_t a1, uint64_t a2)
{
  return sub_216CD63C8((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_216CD637C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763E58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD63BC()
{
  return &unk_26C763E58;
}

uint64_t sub_216CD63C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *(void *)(*a1 + 6328);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v6 = *(unsigned __int8 **)a2;
  }

  return sub_216CD6434(v3, v2, (void *)(v4 + 256), v6);
}

uint64_t sub_216CD6434(uint64_t *a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  v27[0] = a2;
  v27[1] = a3;
  sub_2169DD444((uint64_t)v14, (uint64_t)a4);
  if (__p)
  {
    long long v26 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    int v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    BOOL v16 = v15;
    operator delete(v15);
  }
  uint64_t v7 = *a1;
  if (!*a1)
  {
    uint64_t v8 = operator new(0x28uLL);
    *uint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7D9D8(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  uint64_t v13 = 0;
  uint64_t v9 = sub_216CD6684(v7, a4, (uint64_t)a4, &v13);
  uint64_t v10 = v9;
  if (v11)
  {
    *(void *)(v9 + 168) = *a3 & 0xFFFFFFFFFFFFLL | 0x24000000000000;
    sub_216CD654C((uint64_t)v27, (uint64_t)a4);
  }
  return *(void *)(v10 + 168);
}

uint64_t sub_216CD654C(uint64_t a1, uint64_t a2)
{
  sub_216CCEF5C(&__src, a2);
  if ((__src & 0x60) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)a1 + 6328);
    sub_216779094(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_216CCED74(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = sub_216CA3630(a1, &__src);
  char v6 = __src;
  if ((__src & 2) != 0)
  {
    uint64_t result = sub_216C6E920(a1, a2 + 8);
    char v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  uint64_t result = sub_216C6E920(a1, a2 + 32);
  char v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = sub_216C6E920(a1, a2 + 56);
  char v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = sub_216C6E920(a1, a2 + 80);
  char v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return sub_216C6E920(a1, a2 + 128);
  }
LABEL_16:
  uint64_t result = sub_216C6E920(a1, a2 + 104);
  if ((__src & 0x10) == 0) {
    return result;
  }
  return sub_216C6E920(a1, a2 + 128);
}

void sub_216CD6668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CD6684(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = 0;
  char v25 = 0;
  sub_2169DD9C8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v24, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v24));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    char v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unsigned int v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8) {
            pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==();
          }
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
          unsigned int v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_216CD693C(a1, v8, a3, a4, (uint64_t)&v24);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v24 = *v20;
    void *v20 = v24;
  }
  else
  {
    *(void *)uint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24)
    {
      unint64_t v21 = *(void *)(*(void *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v21 >= v9) {
          v21 %= v9;
        }
      }
      else
      {
        v21 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v24;
    }
  }
  uint64_t v22 = v24;
  uint64_t v24 = 0;
  ++*(void *)(a1 + 24);
  sub_216CD69C8((uint64_t)&v24, 0);
  return v22;
}

void sub_216CD6924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CD69C8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD693C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint8x8_t v10 = operator new(0xB0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint8x8_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_2169DD444((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CD69B0(_Unwind_Exception *a1)
{
  sub_216CD69C8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216CD69C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C7DA98(v2 + 2);
    }
    operator delete(v2);
  }
}

__n128 sub_216CD6A28(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD6A74(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD6AA4()
{
}

uint64_t sub_216CD6AF0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763ED8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD6B30()
{
  return &unk_26C763ED8;
}

void sub_216CD6B3C()
{
}

void sub_216CD6C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CD6C24()
{
}

void sub_216CD6E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2169DD2C4(&a14);
  _Unwind_Resume(a1);
}

char *sub_216CD6EB4(char *a1, uint64_t a2)
{
  *a1 = *(unsigned char *)a2;
  if (a1 != (char *)a2)
  {
    sub_216825D78(a1 + 8, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_216825D78(a1 + 32, *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
    sub_216825D78(a1 + 56, *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
    sub_216825D78(a1 + 80, *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
    sub_216825D78(a1 + 104, *(char **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
    sub_216825D78(a1 + 128, *(char **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  }
  return a1;
}

BOOL sub_216CD6F68(uint64_t a1, void **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __sFILE __p = "usd/crateFile.cpp";
    unsigned int v12 = "_Read";
    uint64_t v13 = 1189;
    float v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = int]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_2167816FC(&__p, v16);
  BOOL v7 = sub_216C8B4EC(a1, (__sFILE *)__p, v16);
  BOOL v8 = v7;
  if (&__p != a2 && v7) {
    sub_216825D78((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    unsigned int v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_216CD7070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CD7094(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD70E0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD7110()
{
}

uint64_t sub_216CD7118(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763F58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD7158()
{
  return &unk_26C763F58;
}

void sub_216CD7164()
{
}

void sub_216CD71E4()
{
}

void sub_216CD72C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CD72DC()
{
}

void sub_216CD752C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2169DD2C4(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD756C(uint64_t a1, void **a2)
{
  unint64_t __dst = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __sFILE __p = "usd/crateFile.cpp";
    uint64_t v13 = "_Read";
    uint64_t v14 = 1189;
    char v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = int]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_2167816FC(&__p, __dst);
  uint64_t v8 = sub_216C82F78(v4, __p, 4 * __dst);
  uint64_t v9 = v8;
  if (&__p == a2) {
    char v10 = 0;
  }
  else {
    char v10 = v8;
  }
  if (v10) {
    sub_216825D78((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_216CD7688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CD76AC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD76F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD7728(uint64_t a1)
{
}

uint64_t sub_216CD7730(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C763FD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD7770()
{
  return &unk_26C763FD8;
}

void sub_216CD777C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 6496);
  if (v1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216CD7828();
}

void sub_216CD7804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CD7828()
{
}

void sub_216CD7920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CD7948()
{
}

void sub_216CD7B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2169DD2C4(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD7BD8(uint64_t a1, void **a2)
{
  unint64_t v19 = 0;
  uint64_t v4 = (void *)(a1 + 8);
  if (!sub_216C804FC((void *)(a1 + 8), (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __sFILE __p = "usd/crateFile.cpp";
    char v15 = "_Read";
    uint64_t v16 = 1189;
    unint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = int]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_2167816FC(&__p, v19);
  uint64_t v9 = sub_216C804FC(v4, (uint64_t)__p, 4 * v19);
  uint64_t v10 = v9;
  if (&__p == a2) {
    char v11 = 0;
  }
  else {
    char v11 = v9;
  }
  if (v11) {
    sub_216825D78((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    char v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_216CD7D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CD7D60(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C763FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD7DAC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C763FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CD7DDC(uint64_t a1, uint64_t a2)
{
  return sub_216CD7E30((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_216CD7DE4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764058)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD7E24()
{
  return &unk_26C764058;
}

uint64_t sub_216CD7E30(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *(void *)(*a1 + 6328);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v6 = *(unsigned __int8 **)a2;
  }

  return sub_216CD7E9C(v3, v2, (void *)(v4 + 256), v6);
}

uint64_t sub_216CD7E9C(uint64_t *a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  v27[0] = a2;
  v27[1] = a3;
  sub_2169DE38C((uint64_t)v14, (uint64_t)a4);
  if (__p)
  {
    long long v26 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    char v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  uint64_t v7 = *a1;
  if (!*a1)
  {
    unint64_t v8 = operator new(0x28uLL);
    *unint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7D9D8(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  uint64_t v13 = 0;
  uint64_t v9 = sub_216CD80EC(v7, a4, (uint64_t)a4, &v13);
  uint64_t v10 = v9;
  if (v11)
  {
    *(void *)(v9 + 168) = *a3 & 0xFFFFFFFFFFFFLL | 0x25000000000000;
    sub_216CD7FB4((uint64_t)v27, (uint64_t)a4);
  }
  return *(void *)(v10 + 168);
}

uint64_t sub_216CD7FB4(uint64_t a1, uint64_t a2)
{
  sub_216CCEF5C(&__src, a2);
  if ((__src & 0x60) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)a1 + 6328);
    sub_216779094(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_216CCED74(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = sub_216CA3630(a1, &__src);
  char v6 = __src;
  if ((__src & 2) != 0)
  {
    uint64_t result = sub_216CD8430(a1, a2 + 8);
    char v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  uint64_t result = sub_216CD8430(a1, a2 + 32);
  char v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = sub_216CD8430(a1, a2 + 56);
  char v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = sub_216CD8430(a1, a2 + 80);
  char v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return sub_216CD8430(a1, a2 + 128);
  }
LABEL_16:
  uint64_t result = sub_216CD8430(a1, a2 + 104);
  if ((__src & 0x10) == 0) {
    return result;
  }
  return sub_216CD8430(a1, a2 + 128);
}

void sub_216CD80D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CD80EC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = 0;
  char v25 = 0;
  sub_2169DD9C8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v24, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v24));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    char v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8) {
            pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==();
          }
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_216CD83A4(a1, v8, a3, a4, (uint64_t)&v24);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v24 = *v20;
    void *v20 = v24;
  }
  else
  {
    *(void *)uint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24)
    {
      unint64_t v21 = *(void *)(*(void *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v21 >= v9) {
          v21 %= v9;
        }
      }
      else
      {
        v21 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v24;
    }
  }
  uint64_t v22 = v24;
  uint64_t v24 = 0;
  ++*(void *)(a1 + 24);
  sub_216CD69C8((uint64_t)&v24, 0);
  return v22;
}

void sub_216CD838C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CD69C8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD83A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint8x8_t v10 = operator new(0xB0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint8x8_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_2169DE38C((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CD8418(_Unwind_Exception *a1)
{
  sub_216CD69C8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD8430(uint64_t a1, uint64_t a2)
{
  uint64_t __src = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3;
  sub_216C80458(a1, (char *)&__src);
  return sub_216C9E7BC(a1, *(char **)a2, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
}

__n128 sub_216CD8490(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD84DC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD850C()
{
}

uint64_t sub_216CD8558(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7640D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD8598()
{
  return &unk_26C7640D8;
}

void sub_216CD85A4()
{
}

void sub_216CD8678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CD868C()
{
}

void sub_216CD88DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2169DD2C4(&a14);
  _Unwind_Resume(a1);
}

char *sub_216CD891C(char *a1, uint64_t a2)
{
  *a1 = *(unsigned char *)a2;
  if (a1 != (char *)a2)
  {
    sub_21677CC7C(a1 + 8, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_21677CC7C(a1 + 32, *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_21677CC7C(a1 + 56, *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    sub_21677CC7C(a1 + 80, *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_21677CC7C(a1 + 104, *(char **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
    sub_21677CC7C(a1 + 128, *(char **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  }
  return a1;
}

BOOL sub_216CD89D0(uint64_t a1, void **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __sFILE __p = "usd/crateFile.cpp";
    uint64_t v12 = "_Read";
    uint64_t v13 = 1189;
    float v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = long long]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_216781CAC(&__p, v16);
  BOOL v7 = sub_216C9F3AC(a1, (__sFILE *)__p, v16);
  BOOL v8 = v7;
  if (&__p != a2 && v7) {
    sub_21677CC7C((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 3);
  }
  if (__p)
  {
    uint64_t v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_216CD8AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CD8AFC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7640F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD8B48(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7640F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD8B78()
{
}

uint64_t sub_216CD8B80(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764158)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD8BC0()
{
  return &unk_26C764158;
}

void sub_216CD8BCC()
{
}

void sub_216CD8C4C()
{
}

void sub_216CD8D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CD8D44()
{
}

void sub_216CD8F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2169DD2C4(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD8FD4(uint64_t a1, void **a2)
{
  unint64_t __dst = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __sFILE __p = "usd/crateFile.cpp";
    uint64_t v13 = "_Read";
    uint64_t v14 = 1189;
    char v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = long long]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_216781CAC(&__p, __dst);
  uint64_t v8 = sub_216C82F78(v4, __p, 8 * __dst);
  uint64_t v9 = v8;
  if (&__p == a2) {
    char v10 = 0;
  }
  else {
    char v10 = v8;
  }
  if (v10) {
    sub_21677CC7C((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 3);
  }
  if (__p)
  {
    uint64_t v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_216CD90F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CD9114(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD9160(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD9190(uint64_t a1)
{
}

uint64_t sub_216CD9198(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7641D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD91D8()
{
  return &unk_26C7641D8;
}

void sub_216CD91E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 6496);
  if (v1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216CD9290();
}

void sub_216CD926C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CD9290()
{
}

void sub_216CD9388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CD93B0()
{
}

void sub_216CD9600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2169DD2C4(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD9640(uint64_t a1, void **a2)
{
  unint64_t v19 = 0;
  uint64_t v4 = (void *)(a1 + 8);
  if (!sub_216C804FC((void *)(a1 + 8), (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __sFILE __p = "usd/crateFile.cpp";
    char v15 = "_Read";
    uint64_t v16 = 1189;
    unint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = long long]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_216781CAC(&__p, v19);
  uint64_t v9 = sub_216C804FC(v4, (uint64_t)__p, 8 * v19);
  uint64_t v10 = v9;
  if (&__p == a2) {
    char v11 = 0;
  }
  else {
    char v11 = v9;
  }
  if (v11) {
    sub_21677CC7C((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 3);
  }
  if (__p)
  {
    char v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_216CD97A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CD97C8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7641F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD9814(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7641F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CD9844(uint64_t a1, uint64_t a2)
{
  return sub_216CD9898((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_216CD984C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764258)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD988C()
{
  return &unk_26C764258;
}

uint64_t sub_216CD9898(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *(void *)(*a1 + 6328);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v6 = *(unsigned __int8 **)a2;
  }

  return sub_216CD9904(v3, v2, (void *)(v4 + 256), v6);
}

uint64_t sub_216CD9904(uint64_t *a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  v27[0] = a2;
  v27[1] = a3;
  sub_2169DEF68((uint64_t)v14, (uint64_t)a4);
  if (__p)
  {
    long long v26 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    char v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  uint64_t v7 = *a1;
  if (!*a1)
  {
    unint64_t v8 = operator new(0x28uLL);
    *unint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7D9D8(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  uint64_t v13 = 0;
  uint64_t v9 = sub_216CD9B54(v7, a4, (uint64_t)a4, &v13);
  uint64_t v10 = v9;
  if (v11)
  {
    *(void *)(v9 + 168) = *a3 & 0xFFFFFFFFFFFFLL | 0x26000000000000;
    sub_216CD9A1C((uint64_t)v27, (uint64_t)a4);
  }
  return *(void *)(v10 + 168);
}

uint64_t sub_216CD9A1C(uint64_t a1, uint64_t a2)
{
  sub_216CCEF5C(&__src, a2);
  if ((__src & 0x60) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)a1 + 6328);
    sub_216779094(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_216CCED74(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = sub_216CA3630(a1, &__src);
  char v6 = __src;
  if ((__src & 2) != 0)
  {
    uint64_t result = sub_216C6E920(a1, a2 + 8);
    char v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  uint64_t result = sub_216C6E920(a1, a2 + 32);
  char v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = sub_216C6E920(a1, a2 + 56);
  char v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = sub_216C6E920(a1, a2 + 80);
  char v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return sub_216C6E920(a1, a2 + 128);
  }
LABEL_16:
  uint64_t result = sub_216C6E920(a1, a2 + 104);
  if ((__src & 0x10) == 0) {
    return result;
  }
  return sub_216C6E920(a1, a2 + 128);
}

void sub_216CD9B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CD9B54(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = 0;
  char v25 = 0;
  sub_2169DD9C8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v24, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v24));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    char v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8) {
            pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==();
          }
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_216CD9E0C(a1, v8, a3, a4, (uint64_t)&v24);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v24 = *v20;
    void *v20 = v24;
  }
  else
  {
    *(void *)uint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24)
    {
      unint64_t v21 = *(void *)(*(void *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v21 >= v9) {
          v21 %= v9;
        }
      }
      else
      {
        v21 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v24;
    }
  }
  uint64_t v22 = v24;
  uint64_t v24 = 0;
  ++*(void *)(a1 + 24);
  sub_216CD69C8((uint64_t)&v24, 0);
  return v22;
}

void sub_216CD9DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CD69C8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CD9E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint8x8_t v10 = operator new(0xB0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint8x8_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_2169DEF68((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CD9E80(_Unwind_Exception *a1)
{
  sub_216CD69C8(v1, 0);
  _Unwind_Resume(a1);
}

__n128 sub_216CD9EA0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CD9EEC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CD9F1C()
{
}

uint64_t sub_216CD9F68(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7642D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CD9FA8()
{
  return &unk_26C7642D8;
}

void sub_216CD9FB4()
{
}

void sub_216CDA088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CDA09C()
{
}

void sub_216CDA2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2169DD2C4(&a14);
  _Unwind_Resume(a1);
}

BOOL sub_216CDA32C(uint64_t a1, void **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __sFILE __p = "usd/crateFile.cpp";
    uint64_t v12 = "_Read";
    uint64_t v13 = 1189;
    float v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = unsigned int]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_2167813E0(&__p, v16);
  BOOL v7 = sub_216C8B4EC(a1, (__sFILE *)__p, v16);
  BOOL v8 = v7;
  if (&__p != a2 && v7) {
    sub_216825D78((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_216CDA434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CDA458(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7642F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDA4A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7642F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDA4D4()
{
}

uint64_t sub_216CDA4DC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764358)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDA51C()
{
  return &unk_26C764358;
}

void sub_216CDA528()
{
}

void sub_216CDA5A8()
{
}

void sub_216CDA68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CDA6A0()
{
}

void sub_216CDA8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2169DD2C4(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_216CDA930(uint64_t a1, void **a2)
{
  unint64_t __dst = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __sFILE __p = "usd/crateFile.cpp";
    uint64_t v13 = "_Read";
    uint64_t v14 = 1189;
    char v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = unsigned int]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_2167813E0(&__p, __dst);
  uint64_t v8 = sub_216C82F78(v4, __p, 4 * __dst);
  uint64_t v9 = v8;
  if (&__p == a2) {
    char v10 = 0;
  }
  else {
    char v10 = v8;
  }
  if (v10) {
    sub_216825D78((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    uint64_t v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_216CDAA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CDAA70(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDAABC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDAAEC(uint64_t a1)
{
}

uint64_t sub_216CDAAF4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7643D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDAB34()
{
  return &unk_26C7643D8;
}

void sub_216CDAB40(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 6496);
  if (v1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216CDABEC();
}

void sub_216CDABC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CDABEC()
{
}

void sub_216CDACE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CDAD0C()
{
}

void sub_216CDAF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2169DD2C4(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_216CDAF9C(uint64_t a1, void **a2)
{
  unint64_t v19 = 0;
  uint64_t v4 = (void *)(a1 + 8);
  if (!sub_216C804FC((void *)(a1 + 8), (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __sFILE __p = "usd/crateFile.cpp";
    char v15 = "_Read";
    uint64_t v16 = 1189;
    unint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = unsigned int]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_2167813E0(&__p, v19);
  uint64_t v9 = sub_216C804FC(v4, (uint64_t)__p, 4 * v19);
  uint64_t v10 = v9;
  if (&__p == a2) {
    char v11 = 0;
  }
  else {
    char v11 = v9;
  }
  if (v11) {
    sub_216825D78((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    char v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_216CDB100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CDB124(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7643F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDB170(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7643F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CDB1A0(uint64_t a1, uint64_t a2)
{
  return sub_216CDB1F4((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_216CDB1A8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764458)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDB1E8()
{
  return &unk_26C764458;
}

uint64_t sub_216CDB1F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *(void *)(*a1 + 6328);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v6 = *(unsigned __int8 **)a2;
  }

  return sub_216CDB260(v3, v2, (void *)(v4 + 256), v6);
}

uint64_t sub_216CDB260(uint64_t *a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  v27[0] = a2;
  v27[1] = a3;
  sub_2169DFB7C((uint64_t)v14, (uint64_t)a4);
  if (__p)
  {
    long long v26 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    char v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  uint64_t v7 = *a1;
  if (!*a1)
  {
    unint64_t v8 = operator new(0x28uLL);
    *unint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7D9D8(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  uint64_t v13 = 0;
  uint64_t v9 = sub_216CDB4B0(v7, a4, (uint64_t)a4, &v13);
  uint64_t v10 = v9;
  if (v11)
  {
    *(void *)(v9 + 168) = *a3 & 0xFFFFFFFFFFFFLL | 0x27000000000000;
    sub_216CDB378((uint64_t)v27, (uint64_t)a4);
  }
  return *(void *)(v10 + 168);
}

uint64_t sub_216CDB378(uint64_t a1, uint64_t a2)
{
  sub_216CCEF5C(&__src, a2);
  if ((__src & 0x60) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)a1 + 6328);
    sub_216779094(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_216CCED74(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = sub_216CA3630(a1, &__src);
  char v6 = __src;
  if ((__src & 2) != 0)
  {
    uint64_t result = sub_216CD8430(a1, a2 + 8);
    char v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  uint64_t result = sub_216CD8430(a1, a2 + 32);
  char v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = sub_216CD8430(a1, a2 + 56);
  char v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = sub_216CD8430(a1, a2 + 80);
  char v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return sub_216CD8430(a1, a2 + 128);
  }
LABEL_16:
  uint64_t result = sub_216CD8430(a1, a2 + 104);
  if ((__src & 0x10) == 0) {
    return result;
  }
  return sub_216CD8430(a1, a2 + 128);
}

void sub_216CDB494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CDB4B0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = 0;
  char v25 = 0;
  sub_2169DD9C8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v24, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v24));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    char v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8) {
            pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==();
          }
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_216CDB768(a1, v8, a3, a4, (uint64_t)&v24);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v24 = *v20;
    void *v20 = v24;
  }
  else
  {
    *(void *)uint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24)
    {
      unint64_t v21 = *(void *)(*(void *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v21 >= v9) {
          v21 %= v9;
        }
      }
      else
      {
        v21 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v24;
    }
  }
  uint64_t v22 = v24;
  uint64_t v24 = 0;
  ++*(void *)(a1 + 24);
  sub_216CD69C8((uint64_t)&v24, 0);
  return v22;
}

void sub_216CDB750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CD69C8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CDB768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint8x8_t v10 = operator new(0xB0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint8x8_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_2169DFB7C((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CDB7DC(_Unwind_Exception *a1)
{
  sub_216CD69C8(v1, 0);
  _Unwind_Resume(a1);
}

__n128 sub_216CDB7FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDB848(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDB878()
{
}

uint64_t sub_216CDB8C4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7644D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDB904()
{
  return &unk_26C7644D8;
}

void sub_216CDB910()
{
}

void sub_216CDB9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CDB9F8()
{
}

void sub_216CDBC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2169DD2C4(&a14);
  _Unwind_Resume(a1);
}

BOOL sub_216CDBC88(uint64_t a1, void **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __sFILE __p = "usd/crateFile.cpp";
    uint64_t v12 = "_Read";
    uint64_t v13 = 1189;
    float v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = unsigned long long]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_2167819D4(&__p, v16);
  BOOL v7 = sub_216C9F3AC(a1, (__sFILE *)__p, v16);
  BOOL v8 = v7;
  if (&__p != a2 && v7) {
    sub_21677CC7C((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 3);
  }
  if (__p)
  {
    uint64_t v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_216CDBD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CDBDB4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7644F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDBE00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7644F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDBE30()
{
}

uint64_t sub_216CDBE38(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764558)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDBE78()
{
  return &unk_26C764558;
}

void sub_216CDBE84()
{
}

void sub_216CDBF04()
{
}

void sub_216CDBFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CDBFFC()
{
}

void sub_216CDC24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2169DD2C4(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_216CDC28C(uint64_t a1, void **a2)
{
  unint64_t __dst = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __sFILE __p = "usd/crateFile.cpp";
    uint64_t v13 = "_Read";
    uint64_t v14 = 1189;
    char v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = unsigned long long]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_2167819D4(&__p, __dst);
  uint64_t v8 = sub_216C82F78(v4, __p, 8 * __dst);
  uint64_t v9 = v8;
  if (&__p == a2) {
    char v10 = 0;
  }
  else {
    char v10 = v8;
  }
  if (v10) {
    sub_21677CC7C((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 3);
  }
  if (__p)
  {
    uint64_t v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_216CDC3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CDC3CC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDC418(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDC448(uint64_t a1)
{
}

uint64_t sub_216CDC450(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7645D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDC490()
{
  return &unk_26C7645D8;
}

void sub_216CDC49C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 6496);
  if (v1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216CDC548();
}

void sub_216CDC524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CDC548()
{
}

void sub_216CDC640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CDC668()
{
}

void sub_216CDC8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2169DD2C4(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_216CDC8F8(uint64_t a1, void **a2)
{
  unint64_t v19 = 0;
  uint64_t v4 = (void *)(a1 + 8);
  if (!sub_216C804FC((void *)(a1 + 8), (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __sFILE __p = "usd/crateFile.cpp";
    char v15 = "_Read";
    uint64_t v16 = 1189;
    unint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = unsigned long long]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_2167819D4(&__p, v19);
  uint64_t v9 = sub_216C804FC(v4, (uint64_t)__p, 8 * v19);
  uint64_t v10 = v9;
  if (&__p == a2) {
    char v11 = 0;
  }
  else {
    char v11 = v9;
  }
  if (v11) {
    sub_21677CC7C((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 3);
  }
  if (__p)
  {
    char v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_216CDCA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CDCA80(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7645F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDCACC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7645F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CDCAFC(uint64_t a1, uint64_t a2)
{
  return sub_216CDCB50((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8), a2);
}

uint64_t sub_216CDCB04(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764658)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDCB44()
{
  return &unk_26C764658;
}

uint64_t sub_216CDCB50(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *((void *)*a1 + 791);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                          + 168))(a2);
  else {
    uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::SdfPath ***)a2;
  }

  return sub_216CDCBBC(v3, v2, (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)(v4 + 256), v6);
}

uint64_t sub_216CDCBBC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a3, pxrInternal__aapl__pxrReserved__::SdfPath **a4)
{
  v14[0] = a2;
  v14[1] = a3;
  memset(v13, 0, sizeof(v13));
  sub_216980EEC(v13, *a4, a4[1], (a4[1] - *a4) >> 3);
  char v15 = (void **)v13;
  sub_216981168(&v15);
  uint64_t v7 = *a1;
  if (!*a1)
  {
    unint64_t v8 = operator new(0x28uLL);
    *unint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7DEF0(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  char v15 = 0;
  uint64_t v9 = sub_216CDCC94(v7, (uint64_t)a4, (_DWORD **)a4, &v15);
  uint64_t v10 = v9;
  if (v11)
  {
    v9[5] = *(void *)a3 & 0xFFFFFFFFFFFFLL | 0x28000000000000;
    sub_216CD2578(v14, a4);
  }
  return v10[5];
}

void *sub_216CDCC94(uint64_t a1, uint64_t a2, _DWORD **a3, void *a4)
{
  unint64_t v9 = sub_2169DC438((uint64_t)v27, (unsigned int **)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      __n128 result = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = result[1];
          if (v15 == v10)
          {
            unint64_t v17 = (char *)result[2];
            uint64_t v16 = (char *)result[3];
            if (v16 - v17 == *(void *)(a2 + 8) - *(void *)a2)
            {
              if (v17 == v16) {
                return result;
              }
              for (i = *(unsigned int **)a2; *(void *)v17 == *(void *)i; i += 2)
              {
                v17 += 8;
                if (v17 == v16) {
                  return result;
                }
              }
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          __n128 result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216CDCF30(a1, v10, a3, a4, (uint64_t)v27);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_21678A04C(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  char v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v27[0] = *v25;
    *char v25 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v26 = *(void *)(*(void *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v27[0];
    }
  }
  __n128 result = (void *)v27[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216CDCF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_216CDCFDC((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CDCF30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = 0;
  __n128 result = sub_216980EEC(v10 + 2, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 3);
  v10[5] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CDCFC0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_216CDCFDC(v3, v2);
  _Unwind_Resume(a1);
}

void sub_216CDCFDC(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 2;
    sub_216981168(&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

__n128 sub_216CDD030(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDD07C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDD0AC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  *(void *)&long long v10 = v6;
  *((void *)&v10 + 1) = v7;
  uint64_t v11 = 0;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  sub_216CDD144(v5, &v10, v3, v4);
}

uint64_t sub_216CDD0F8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7646D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDD138()
{
  return &unk_26C7646D8;
}

void sub_216CDD144(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  memset(v9, 0, sizeof(v9));
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(void *)&long long v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CD2AEC((uint64_t)&v6, v9);
  }
  sub_216A9B274(a4, (uint64_t *)v9);
  long long v10 = (void **)v9;
  sub_216981168(&v10);
}

void sub_216CDD1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v15 - 24) = &a15;
  sub_216981168((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

__n128 sub_216CDD1DC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7646F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDD228(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7646F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDD258(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CDD260(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764758)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDD2A0()
{
  return &unk_26C764758;
}

void sub_216CDD2AC(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v8;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  int v12 = sub_216C688BC();
  sub_216CDD32C(v5, &v9, v3, v4);
}

void sub_216CDD32C(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  memset(v9, 0, sizeof(v9));
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((void *)&v6 + 1) = *(void *)(*(void *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_216CD3210((uint64_t)&v6, v9);
  }
  sub_216A9B274(a4, (uint64_t *)v9);
  uint64_t v10 = (void **)v9;
  sub_216981168(&v10);
}

void sub_216CDD3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v15 - 24) = &a15;
  sub_216981168((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

__n128 sub_216CDD3D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDD420(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDD450(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CDD458(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7647D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDD498()
{
  return &unk_26C7647D8;
}

void sub_216CDD4A4(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CDD550(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CDD52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CDD550(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  memset(v9, 0, sizeof(v9));
  long long v6 = *a2;
  long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *((void *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CD3994(&v6, v9);
    long long v5 = v7;
  }
  if (v5) {
    sub_216784EC4(v5);
  }
  sub_216A9B274(a4, (uint64_t *)v9);
  long long v10 = (void **)v9;
  sub_216981168(&v10);
}

void sub_216CDD5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, char a13)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  *(void *)(v13 - 24) = &a13;
  sub_216981168((void ***)(v13 - 24));
  _Unwind_Resume(a1);
}

__n128 sub_216CDD620(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7647F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDD66C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7647F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CDD69C(uint64_t a1, uint64_t a2)
{
  return sub_216CDD6F0((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8), a2);
}

uint64_t sub_216CDD6A4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764858)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDD6E4()
{
  return &unk_26C764858;
}

uint64_t sub_216CDD6F0(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *((void *)*a1 + 791);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    long long v6 = (uint64_t **)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    long long v6 = *(uint64_t ***)a2;
  }

  return sub_216CDD75C(v3, v2, (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)(v4 + 256), v6);
}

uint64_t sub_216CDD75C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a3, uint64_t **a4)
{
  v14[0] = a2;
  v14[1] = a3;
  memset(v13, 0, sizeof(v13));
  sub_21698FA28(v13, *a4, a4[1], a4[1] - *a4);
  uint64_t v15 = (void **)v13;
  sub_216889A04(&v15);
  uint64_t v7 = *a1;
  if (!*a1)
  {
    uint64_t v8 = operator new(0x28uLL);
    *uint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7E140(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  uint64_t v15 = 0;
  long long v9 = sub_216CDD834(v7, a4, a4, &v15);
  long long v10 = v9;
  if (v11)
  {
    v9[5] = *(void *)a3 & 0xFFFFFFFFFFFFLL | 0x29000000000000;
    sub_216CCEF0C(v14, (pxrInternal__aapl__pxrReserved__::TfToken **)a4);
  }
  return v10[5];
}

void *sub_216CDD834(uint64_t a1, void *a2, uint64_t **a3, void *a4)
{
  unint64_t v9 = sub_2169DB958((uint64_t)v27, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      __n128 result = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = result[1];
          if (v15 == v10)
          {
            unint64_t v17 = (char *)result[2];
            uint64_t v16 = (char *)result[3];
            if (v16 - v17 == a2[1] - *a2)
            {
              if (v17 == v16) {
                return result;
              }
              for (i = (void *)*a2; (*(void *)v17 & 0xFFFFFFFFFFFFFFF8) == (*i & 0xFFFFFFFFFFFFFFF8); ++i)
              {
                v17 += 8;
                if (v17 == v16) {
                  return result;
                }
              }
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          __n128 result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216CDDAD8(a1, v10, a3, a4, (uint64_t)v27);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_21678A04C(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  char v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v27[0] = *v25;
    *char v25 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v26 = *(void *)(*(void *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v27[0];
    }
  }
  __n128 result = (void *)v27[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216CDDAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_216CDDB84((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CDDAD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = 0;
  __n128 result = sub_21698FA28(v10 + 2, *a3, a3[1], a3[1] - *a3);
  v10[5] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CDDB68(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_216CDDB84(v3, v2);
  _Unwind_Resume(a1);
}

void sub_216CDDB84(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 2;
    sub_216889A04(&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

__n128 sub_216CDDBD8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDDC24(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDDC54(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  long long v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  *(void *)&long long v10 = v6;
  *((void *)&v10 + 1) = v7;
  uint64_t v11 = 0;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  sub_216CDDCEC(v5, &v10, v3, v4);
}

uint64_t sub_216CDDCA0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7648D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDDCE0()
{
  return &unk_26C7648D8;
}

void sub_216CDDCEC(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  memset(v9, 0, sizeof(v9));
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(void *)&long long v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CCF588((uint64_t)&v6, v9);
  }
  sub_216AA37C4(a4, v9);
  long long v10 = (void **)v9;
  sub_216889A04(&v10);
}

void sub_216CDDD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v15 - 24) = &a15;
  sub_216889A04((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

__n128 sub_216CDDD84(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7648F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDDDD0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7648F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDDE00(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CDDE08(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764958)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDDE48()
{
  return &unk_26C764958;
}

void sub_216CDDE54(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v8;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  int v12 = sub_216C688BC();
  sub_216CDDED4(v5, &v9, v3, v4);
}

void sub_216CDDED4(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  memset(v9, 0, sizeof(v9));
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((void *)&v6 + 1) = *(void *)(*(void *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_216CCFBAC((uint64_t)&v6, v9);
  }
  sub_216AA37C4(a4, v9);
  uint64_t v10 = (void **)v9;
  sub_216889A04(&v10);
}

void sub_216CDDF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v15 - 24) = &a15;
  sub_216889A04((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

__n128 sub_216CDDF7C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDDFC8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDDFF8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CDE000(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7649D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDE040()
{
  return &unk_26C7649D8;
}

void sub_216CDE04C(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CDE0F8(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CDE0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CDE0F8(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  memset(v9, 0, sizeof(v9));
  long long v6 = *a2;
  long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *((void *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CD0230(&v6, v9);
    long long v5 = v7;
  }
  if (v5) {
    sub_216784EC4(v5);
  }
  sub_216AA37C4(a4, v9);
  long long v10 = (void **)v9;
  sub_216889A04(&v10);
}

void sub_216CDE190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, char a13)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  *(void *)(v13 - 24) = &a13;
  sub_216889A04((void ***)(v13 - 24));
  _Unwind_Resume(a1);
}

__n128 sub_216CDE1C8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7649F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDE214(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7649F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CDE244(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if ((v2 & 4) != 0) {
    a2 = (unsigned int *)(*(uint64_t (**)(unsigned int *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  return *a2 | 0x402A000000000000;
}

uint64_t sub_216CDE284(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764A58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDE2C4()
{
  return &unk_26C764A58;
}

__n128 sub_216CDE2D8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDE324(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_216CDE354(uint64_t a1, void *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a3;
  int v5 = *a2;
  return sub_216CDE3D0(v3, &v5);
}

uint64_t sub_216CDE384(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764AD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDE3C4()
{
  return &unk_26C764AD8;
}

void *sub_216CDE3D0(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  if ((sub_216A94450(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *((void *)a1 + 1) = (char *)&off_26C758118 + 3;
    *(_DWORD *)a1 = 0;
  }
  __n128 result = sub_216CDE44C(a1);
  int v7 = *(_DWORD *)result;
  *(_DWORD *)__n128 result = *a2;
  *a2 = v7;
  return result;
}

void *sub_216CDE44C(void *a1)
{
  double v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return a1;
}

__n128 sub_216CDE4E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDE530(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_216CDE560(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  sub_216C688BC();
  int v6 = v3;
  return sub_216CDE3D0(v4, &v6);
}

uint64_t sub_216CDE5A0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764B58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDE5E0()
{
  return &unk_26C764B58;
}

__n128 sub_216CDE5F4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764B78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDE640(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764B78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDE670(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CDE678(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764BD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDE6B8()
{
  return &unk_26C764BD8;
}

void sub_216CDE6C4(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  BOOL v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = v7;
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v10 = v7;
    uint64_t v11 = v8;
    uint64_t v12 = 0;
  }
  uint64_t v13 = 0;
  sub_216CDE770(v6, (uint64_t)&v10, v4, v5);
  if (v12) {
    sub_216784EC4(v12);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CDE74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CDE770(uint64_t a1, uint64_t a2, int a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v6);
  }
  int v8 = a3;
  return sub_216CDE3D0(a4, &v8);
}

__n128 sub_216CDE7CC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDE818(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CDE848(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if ((v2 & 4) != 0) {
    a2 = (unsigned int *)(*(uint64_t (**)(unsigned int *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  return *a2 | 0x402B000000000000;
}

uint64_t sub_216CDE888(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764C58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDE8C8()
{
  return &unk_26C764C58;
}

__n128 sub_216CDE8DC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDE928(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_216CDE958(uint64_t a1, void *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a3;
  int v5 = *a2;
  return sub_216CDE9D4(v3, &v5);
}

uint64_t sub_216CDE988(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764CD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDE9C8()
{
  return &unk_26C764CD8;
}

void *sub_216CDE9D4(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  if ((sub_216B44AD8(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *((void *)a1 + 1) = (char *)&off_26C759D30 + 3;
    *(_DWORD *)a1 = 0;
  }
  __n128 result = sub_216BF3138(a1);
  int v7 = *(_DWORD *)result;
  *(_DWORD *)__n128 result = *a2;
  *a2 = v7;
  return result;
}

__n128 sub_216CDEA58(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDEAA4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_216CDEAD4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  sub_216C688BC();
  int v6 = v3;
  return sub_216CDE9D4(v4, &v6);
}

uint64_t sub_216CDEB14(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764D58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDEB54()
{
  return &unk_26C764D58;
}

__n128 sub_216CDEB68(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDEBB4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDEBE4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CDEBEC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764DD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDEC2C()
{
  return &unk_26C764DD8;
}

void sub_216CDEC38(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  BOOL v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = v7;
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v10 = v7;
    uint64_t v11 = v8;
    uint64_t v12 = 0;
  }
  uint64_t v13 = 0;
  sub_216CDECE4(v6, (uint64_t)&v10, v4, v5);
  if (v12) {
    sub_216784EC4(v12);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CDECC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CDECE4(uint64_t a1, uint64_t a2, int a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v6);
  }
  int v8 = a3;
  return sub_216CDE9D4(a4, &v8);
}

__n128 sub_216CDED40(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDED8C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CDEDBC(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if ((v2 & 4) != 0) {
    a2 = (unsigned int *)(*(uint64_t (**)(unsigned int *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  return *a2 | 0x402C000000000000;
}

uint64_t sub_216CDEDFC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764E58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDEE3C()
{
  return &unk_26C764E58;
}

__n128 sub_216CDEE50(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDEE9C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_216CDEECC(uint64_t a1, int *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  int v3 = *a2;
  uint64_t v4 = *a3;
  if (*a2 == 2) {
    int v3 = 1;
  }
  int v6 = v3;
  return sub_216CDEF50(v4, &v6);
}

uint64_t sub_216CDEF04(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764ED8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDEF44()
{
  return &unk_26C764ED8;
}

void *sub_216CDEF50(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  if ((sub_2169DC5C4(a1) & 1) == 0)
  {
    uint64_t v4 = *((void *)a1 + 1);
    if (v4) {
      BOOL v5 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *((void *)a1 + 1) = (char *)&off_26C756E60 + 3;
    *(_DWORD *)a1 = 0;
  }
  __n128 result = sub_216C513A8(a1);
  int v7 = *(_DWORD *)result;
  *(_DWORD *)__n128 result = *a2;
  *a2 = v7;
  return result;
}

__n128 sub_216CDEFD4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDF020(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_216CDF050(uint64_t a1, int *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  int v3 = *a2;
  uint64_t v4 = *a3;
  sub_216C688BC();
  if (v3 == 2) {
    int v5 = 1;
  }
  else {
    int v5 = v3;
  }
  int v7 = v5;
  return sub_216CDEF50(v4, &v7);
}

uint64_t sub_216CDF098(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764F58)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDF0D8()
{
  return &unk_26C764F58;
}

__n128 sub_216CDF0EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDF138(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDF168(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CDF170(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C764FD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDF1B0()
{
  return &unk_26C764FD8;
}

void sub_216CDF1BC(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  int v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = v7;
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v10 = v7;
    uint64_t v11 = v8;
    uint64_t v12 = 0;
  }
  uint64_t v13 = 0;
  sub_216CDF268(v6, (uint64_t)&v10, v4, v5);
  if (v12) {
    sub_216784EC4(v12);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CDF244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CDF268(uint64_t a1, uint64_t a2, int a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  int v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (a3 == 2) {
      int v6 = 1;
    }
    else {
      int v6 = a3;
    }
    sub_216784EC4(v5);
  }
  else if (a3 == 2)
  {
    int v6 = 1;
  }
  else
  {
    int v6 = a3;
  }
  int v8 = v6;
  return sub_216CDEF50(a4, &v8);
}

__n128 sub_216CDF2D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C764FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDF320(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C764FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CDF350(uint64_t a1, uint64_t a2)
{
  return sub_216CDF3B0(*(uint64_t **)(a1 + 16), *(char ***)(a1 + 8), (char **)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216CDF364(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765058)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDF3A4()
{
  return &unk_26C765058;
}

uint64_t sub_216CDF3B0(uint64_t *a1, char **a2, char **a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 8);
  if ((v7 & 4) != 0) {
    int v8 = (const void ***)(*(uint64_t (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(a4);
  }
  else {
    int v8 = *(const void ****)a4;
  }
  v17[0] = a2;
  v17[1] = a3;
  sub_2167898D0(v16, v8);
  sub_2167877AC((uint64_t)v16, (void *)v16[1]);
  uint64_t v9 = *a1;
  if (!*a1)
  {
    uint64_t v10 = operator new(0x28uLL);
    *uint64_t v10 = 0u;
    v10[1] = 0u;
    *((_DWORD *)v10 + 8) = 1065353216;
    sub_216C7E5C8(a1, (uint64_t)v10);
    uint64_t v9 = *a1;
  }
  uint64_t v15 = 0;
  uint64_t v11 = sub_216CDF498(v9, (unsigned __int8 **)v8, v8, &v15);
  uint64_t v12 = v11;
  if (v13)
  {
    v11[5] = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x2D000000000000;
    sub_216CDF91C(v17, v8);
  }
  return v12[5];
}

void *sub_216CDF498(uint64_t a1, unsigned __int8 **a2, const void ***a3, void *a4)
{
  char v25 = 0;
  char v26 = 0;
  sub_2169DBE24((unint64_t)&v25, *a2, a2 + 1);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * (void)v25);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    char v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (sub_216CDF7E4(a1 + 32, v14 + 2, a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_216CDF744(a1, v9, a3, a4, (uint64_t)&v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *char v25 = *v22;
    *unint64_t v22 = v25;
  }
  else
  {
    *char v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      unint64_t v23 = *(void *)(*v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25;
    }
  }
  uint64_t v14 = v25;
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_216CDF720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11)
{
  if (a10) {
    sub_216CDF8C0((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216CDF744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void ***a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  __n128 result = sub_2167898D0(v10 + 2, a3);
  v10[5] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CDF7C8(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_216CDF8C0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216CDF7E4(uint64_t a1, void *a2, unsigned __int8 **a3)
{
  if ((unsigned __int8 *)a2[2] != a3[2]) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)(a2 + 1);
  unint64_t v4 = (unsigned __int8 *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 1;
  }
  int v5 = *a3;
  do
  {
    uint64_t result = sub_21691BE28((uint64_t)&v12, v4 + 32, v5 + 32);
    if (!result) {
      break;
    }
    uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    int v8 = v4;
    if (v7)
    {
      do
      {
        unint64_t v4 = v7;
        uint64_t v7 = *(unsigned __int8 **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        unint64_t v4 = (unsigned __int8 *)*((void *)v8 + 2);
        BOOL v9 = *(void *)v4 == (void)v8;
        int v8 = v4;
      }
      while (!v9);
    }
    unint64_t v10 = (unsigned __int8 *)*((void *)v5 + 1);
    if (v10)
    {
      do
      {
        uint8x8_t v11 = v10;
        unint64_t v10 = *(unsigned __int8 **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint8x8_t v11 = (unsigned __int8 *)*((void *)v5 + 2);
        BOOL v9 = *(void *)v11 == (void)v5;
        int v5 = v11;
      }
      while (!v9);
    }
    int v5 = v11;
  }
  while (v4 != v3);
  return result;
}

void sub_216CDF8C0(uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_2167877AC((uint64_t)(a2 + 2), a2[3]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t sub_216CDF91C(char ***a1, void *a2)
{
  uint64_t __src = a2[2];
  uint64_t result = sub_216C80458((uint64_t)a1, (char *)&__src);
  uint64_t v7 = (unsigned __int8 *)*a2;
  int v5 = (unsigned __int8 *)(a2 + 1);
  int v6 = v7;
  if (v7 != v5)
  {
    do
    {
      LODWORD(__src) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a1, v6 + 32);
      sub_216C984FC((uint64_t)a1, (char *)&__src);
      LODWORD(__src) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a1, v6 + 56);
      uint64_t result = sub_216C984FC((uint64_t)a1, (char *)&__src);
      int v8 = (unsigned __int8 *)*((void *)v6 + 1);
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          int v8 = *(unsigned __int8 **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (unsigned __int8 *)*((void *)v6 + 2);
          BOOL v10 = *(void *)v9 == (void)v6;
          int v6 = v9;
        }
        while (!v10);
      }
      int v6 = v9;
    }
    while (v9 != v5);
  }
  return result;
}

__n128 sub_216CDF9E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDFA30(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDFA60(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  int v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  *(void *)&long long v10 = v6;
  *((void *)&v10 + 1) = v7;
  uint64_t v11 = 0;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  sub_216CDFAF8(v5, &v10, v3, v4);
}

uint64_t sub_216CDFAAC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7650D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CDFAEC()
{
  return &unk_26C7650D8;
}

void sub_216CDFAF8(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  v10[0] = 0;
  v10[1] = 0;
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  uint64_t v9 = v10;
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(void *)&long long v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CDFC08((uint64_t *)&v6, (uint64_t)&v9);
  }
  sub_216CDFB84(a4, (uint64_t)&v9);
  sub_2167877AC((uint64_t)&v9, v10[0]);
}

void sub_216CDFB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t *sub_216CDFB84(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  if ((sub_2169DBB2C(a1) & 1) == 0)
  {
    v7[0] = 0;
    v7[1] = 0;
    long long v6 = (const void **)v7;
    sub_216CDFE94(a1, &v6);
    sub_2167877AC((uint64_t)&v6, v7[0]);
  }
  unint64_t v4 = (uint64_t *)sub_216BF45E4((const void ****)a1);
  return sub_2168A6B2C(v4, a2);
}

void sub_216CDFBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

BOOL sub_216CDFC08(uint64_t *a1, uint64_t a2)
{
  __str._cookie = 0;
  uint64_t v4 = (uint64_t)(a1 + 1);
  if (!sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&__str._cookie)) {
    return 0;
  }
  uint64_t v5 = a2 + 8;
  while (1)
  {
    long long v6 = __str._cookie--;
    BOOL v7 = v6 == 0;
    if (!v6) {
      break;
    }
    memset(&__str._bf, 0, 24);
    LODWORD(__str._p) = -1;
    EmptyToken = (uint64_t *)sub_216C98940(v4, 0, &__str);
    if (EmptyToken)
    {
      uint64_t v9 = *a1;
      uint64_t v10 = *(void *)(*a1 + 144);
      if (LODWORD(__str._p) >= (unint64_t)((*(void *)(*a1 + 152) - v10) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
        EmptyString = (const std::string *)&qword_267B91638;
      }
      else
      {
        unint64_t v11 = *(unsigned int *)(v10 + 4 * LODWORD(__str._p));
        uint64_t v13 = v9 + 120;
        uint64_t v12 = *(void *)(v9 + 120);
        if (v11 >= (*(void *)(v13 + 8) - v12) >> 3)
        {
          EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
          uint64_t v14 = &qword_267B91658;
        }
        else
        {
          uint64_t v14 = (uint64_t *)(v12 + 8 * v11);
        }
        unint64_t v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
        if (v15) {
          EmptyString = (const std::string *)(v15 + 16);
        }
        else {
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
        }
      }
      std::string::operator=((std::string *)&__str._bf, EmptyString);
      memset(&__str, 0, 24);
      LODWORD(__str._read) = -1;
      BOOL v18 = (uint64_t *)sub_216C98940(v4, 0, (__sFILE *)&__str._read);
      if (v18)
      {
        uint64_t v19 = *a1;
        uint64_t v20 = *(void *)(*a1 + 144);
        if (LODWORD(__str._read) >= (unint64_t)((*(void *)(*a1 + 152) - v20) >> 2))
        {
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)v18);
          char v26 = (const std::string *)&qword_267B91638;
        }
        else
        {
          unint64_t v21 = *(unsigned int *)(v20 + 4 * LODWORD(__str._read));
          uint64_t v23 = v19 + 120;
          uint64_t v22 = *(void *)(v19 + 120);
          if (v21 >= (*(void *)(v23 + 8) - v22) >> 3)
          {
            BOOL v18 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)v18);
            size_t v24 = &qword_267B91658;
          }
          else
          {
            size_t v24 = (uint64_t *)(v22 + 8 * v21);
          }
          unint64_t v25 = *v24 & 0xFFFFFFFFFFFFFFF8;
          if (v25) {
            char v26 = (const std::string *)(v25 + 16);
          }
          else {
            char v26 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v18);
          }
        }
        std::string::operator=((std::string *)&__str, v26);
        __str._read = (int (__cdecl *)(void *, char *, int))&__str._bf;
        int v27 = sub_21677B174((uint64_t **)a2, (const void **)&__str._bf._base, (uint64_t)&unk_2174BFD90, (long long **)&__str._read);
        std::string::operator=((std::string *)(v27 + 7), (const std::string *)&__str);
        int v17 = 0;
      }
      else
      {
        sub_2167877AC(a2, *(void **)(a2 + 8));
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        int v17 = 1;
        *(void *)a2 = v5;
      }
      if (*((char *)&__str._file + 5) < 0) {
        operator delete(__str._p);
      }
    }
    else
    {
      sub_2167877AC(a2, *(void **)(a2 + 8));
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      int v17 = 1;
      *(void *)a2 = v5;
    }
    if (*((char *)&__str._lbfsize + 7) < 0)
    {
      operator delete(__str._bf._base);
      if (v17) {
        return v7;
      }
    }
    else if (v17)
    {
      return v7;
    }
  }
  return v7;
}

void sub_216CDFE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CDFE94(void *a1, const void ***a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C756CD0;
  sub_2169DC07C(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216CDFF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CDFF6C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7650F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CDFFB8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7650F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CDFFE8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CDFFF0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765158)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE0030()
{
  return &unk_26C765158;
}

void sub_216CE003C(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v8;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  int v12 = sub_216C688BC();
  sub_216CE00BC(v5, &v9, v3, v4);
}

void sub_216CE00BC(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  v10[0] = 0;
  v10[1] = 0;
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  long long v9 = v10;
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((void *)&v6 + 1) = *(void *)(*(void *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_216CE0158((uint64_t *)&v6, (uint64_t)&v9);
  }
  sub_216CDFB84(a4, (uint64_t)&v9);
  sub_2167877AC((uint64_t)&v9, v10[0]);
}

void sub_216CE0140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

BOOL sub_216CE0158(uint64_t *a1, uint64_t a2)
{
  uint64_t __dst = 0;
  uint64_t v4 = (uint64_t)(a1 + 1);
  if (!sub_216C82F78((uint64_t)(a1 + 1), &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v5 = a2 + 8;
  while (1)
  {
    uint64_t v6 = __dst--;
    BOOL v7 = v6 == 0;
    if (!v6) {
      break;
    }
    memset(&v30, 0, sizeof(v30));
    LODWORD(__str.__r_.__value_.__l.__data_) = -1;
    EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C82F78(v4, &__str, 4uLL);
    if (EmptyToken)
    {
      uint64_t v9 = *a1;
      uint64_t v10 = *(void *)(*a1 + 144);
      if (LODWORD(__str.__r_.__value_.__l.__data_) >= (unint64_t)((*(void *)(*a1 + 152) - v10) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
        EmptyString = (const std::string *)&qword_267B91638;
      }
      else
      {
        unint64_t v11 = *(unsigned int *)(v10 + 4 * LODWORD(__str.__r_.__value_.__l.__data_));
        uint64_t v13 = v9 + 120;
        uint64_t v12 = *(void *)(v9 + 120);
        if (v11 >= (*(void *)(v13 + 8) - v12) >> 3)
        {
          EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
          uint64_t v14 = &qword_267B91658;
        }
        else
        {
          uint64_t v14 = (uint64_t *)(v12 + 8 * v11);
        }
        unint64_t v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
        if (v15) {
          EmptyString = (const std::string *)(v15 + 16);
        }
        else {
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
        }
      }
      std::string::operator=(&v30, EmptyString);
      memset(&__str, 0, sizeof(__str));
      LODWORD(v32) = -1;
      BOOL v18 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C82F78(v4, &v32, 4uLL);
      if (v18)
      {
        uint64_t v19 = *a1;
        uint64_t v20 = *(void *)(*a1 + 144);
        if (v32 >= (unint64_t)((*(void *)(*a1 + 152) - v20) >> 2))
        {
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(v18);
          char v26 = (const std::string *)&qword_267B91638;
        }
        else
        {
          unint64_t v21 = *(unsigned int *)(v20 + 4 * v32);
          uint64_t v23 = v19 + 120;
          uint64_t v22 = *(void *)(v19 + 120);
          if (v21 >= (*(void *)(v23 + 8) - v22) >> 3)
          {
            BOOL v18 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(v18);
            size_t v24 = &qword_267B91658;
          }
          else
          {
            size_t v24 = (uint64_t *)(v22 + 8 * v21);
          }
          unint64_t v25 = *v24 & 0xFFFFFFFFFFFFFFF8;
          if (v25) {
            char v26 = (const std::string *)(v25 + 16);
          }
          else {
            char v26 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
          }
        }
        std::string::operator=(&__str, v26);
        v32 = &v30;
        int v27 = sub_21677B174((uint64_t **)a2, (const void **)&v30.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&v32);
        std::string::operator=((std::string *)(v27 + 7), &__str);
        int v17 = 0;
      }
      else
      {
        sub_2167877AC(a2, *(void **)(a2 + 8));
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        int v17 = 1;
        *(void *)a2 = v5;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      sub_2167877AC(a2, *(void **)(a2 + 8));
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      int v17 = 1;
      *(void *)a2 = v5;
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if (v17) {
        return v7;
      }
    }
    else if (v17)
    {
      return v7;
    }
  }
  return v7;
}

void sub_216CE03B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CE03EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE0438(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE0468(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CE0470(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7651D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE04B0()
{
  return &unk_26C7651D8;
}

void sub_216CE04BC(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    unint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    unint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CE0568(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CE0544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CE0568(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v9 = v10;
  long long v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *((void *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CE0630(&v6, (uint64_t)&v9);
    uint64_t v5 = v7;
  }
  if (v5) {
    sub_216784EC4(v5);
  }
  sub_216CDFB84(a4, (uint64_t)&v9);
  sub_2167877AC((uint64_t)&v9, v10[0]);
}

void sub_216CE0604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  sub_2167877AC((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

BOOL sub_216CE0630(void *a1, uint64_t a2)
{
  uint64_t v31 = 0;
  uint64_t v4 = a1 + 1;
  if (!sub_216C804FC(a1 + 1, (uint64_t)&v31, 8uLL)) {
    return 0;
  }
  uint64_t v5 = a2 + 8;
  while (1)
  {
    uint64_t v6 = v31--;
    BOOL v7 = v6 == 0;
    if (!v6) {
      break;
    }
    memset(&v30, 0, sizeof(v30));
    LODWORD(__str.__r_.__value_.__l.__data_) = -1;
    EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C804FC(v4, (uint64_t)&__str, 4uLL);
    if (EmptyToken)
    {
      uint64_t v9 = *a1;
      uint64_t v10 = *(void *)(*a1 + 144);
      if (LODWORD(__str.__r_.__value_.__l.__data_) >= (unint64_t)((*(void *)(*a1 + 152) - v10) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
        EmptyString = (const std::string *)&qword_267B91638;
      }
      else
      {
        unint64_t v11 = *(unsigned int *)(v10 + 4 * LODWORD(__str.__r_.__value_.__l.__data_));
        uint64_t v13 = v9 + 120;
        uint64_t v12 = *(void *)(v9 + 120);
        if (v11 >= (*(void *)(v13 + 8) - v12) >> 3)
        {
          EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
          uint64_t v14 = &qword_267B91658;
        }
        else
        {
          uint64_t v14 = (uint64_t *)(v12 + 8 * v11);
        }
        unint64_t v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
        if (v15) {
          EmptyString = (const std::string *)(v15 + 16);
        }
        else {
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
        }
      }
      std::string::operator=(&v30, EmptyString);
      memset(&__str, 0, sizeof(__str));
      LODWORD(v32) = -1;
      BOOL v18 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C804FC(v4, (uint64_t)&v32, 4uLL);
      if (v18)
      {
        uint64_t v19 = *a1;
        uint64_t v20 = *(void *)(*a1 + 144);
        if (v32 >= (unint64_t)((*(void *)(*a1 + 152) - v20) >> 2))
        {
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(v18);
          char v26 = (const std::string *)&qword_267B91638;
        }
        else
        {
          unint64_t v21 = *(unsigned int *)(v20 + 4 * v32);
          uint64_t v23 = v19 + 120;
          uint64_t v22 = *(void *)(v19 + 120);
          if (v21 >= (*(void *)(v23 + 8) - v22) >> 3)
          {
            BOOL v18 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(v18);
            size_t v24 = &qword_267B91658;
          }
          else
          {
            size_t v24 = (uint64_t *)(v22 + 8 * v21);
          }
          unint64_t v25 = *v24 & 0xFFFFFFFFFFFFFFF8;
          if (v25) {
            char v26 = (const std::string *)(v25 + 16);
          }
          else {
            char v26 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
          }
        }
        std::string::operator=(&__str, v26);
        v32 = &v30;
        int v27 = sub_21677B174((uint64_t **)a2, (const void **)&v30.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&v32);
        std::string::operator=((std::string *)(v27 + 7), &__str);
        int v17 = 0;
      }
      else
      {
        sub_2167877AC(a2, *(void **)(a2 + 8));
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        int v17 = 1;
        *(void *)a2 = v5;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      sub_2167877AC(a2, *(void **)(a2 + 8));
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      int v17 = 1;
      *(void *)a2 = v5;
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if (v17) {
        return v7;
      }
    }
    else if (v17)
    {
      return v7;
    }
  }
  return v7;
}

void sub_216CE0888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CE08C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7651F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE0910(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7651F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CE0940(uint64_t a1, uint64_t a2)
{
  return sub_216CE0994((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_216CE0948(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765258)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE0988()
{
  return &unk_26C765258;
}

uint64_t sub_216CE0994(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *(void *)(*a1 + 6328);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v6 = *(uint64_t **)a2;
  }

  return sub_216CE0A00(v3, v2, (void *)(v4 + 256), v6);
}

uint64_t sub_216CE0A00(uint64_t *a1, uint64_t a2, void *a3, uint64_t *a4)
{
  v16[0] = a2;
  v16[1] = a3;
  BOOL v7 = (atomic_uint *)a4[1];
  uint64_t v14 = v7;
  if (v7) {
    atomic_fetch_add_explicit(v7 + 6, 1u, memory_order_relaxed);
  }
  memset(v15, 0, 24);
  sub_21696C2C8(v15, a4[2], a4[3], (a4[3] - a4[2]) >> 4);
  v15[3] = a4[5];
  int v17 = (void **)v15;
  sub_216932118(&v17);
  sub_2169CB1D8(&v14);
  uint64_t v8 = *a1;
  if (!*a1)
  {
    uint64_t v9 = operator new(0x28uLL);
    *uint64_t v9 = 0u;
    v9[1] = 0u;
    *((_DWORD *)v9 + 8) = 1065353216;
    sub_216C7E818(a1, (uint64_t)v9);
    uint64_t v8 = *a1;
  }
  int v17 = 0;
  uint64_t v10 = sub_216CE0C08(v8, a4, a4, &v17);
  unint64_t v11 = v10;
  if (v12)
  {
    v10[8] = *a3 & 0xFFFFFFFFFFFFLL | 0x2E000000000000;
    sub_216CE0B24(v16, (uint64_t)a4);
  }
  return v11[8];
}

void sub_216CE0B10(_Unwind_Exception *a1)
{
  sub_2169CB1D8(v1);
  _Unwind_Resume(a1);
}

void sub_216CE0B24(void *a1, uint64_t a2)
{
  __sFILE __p = a1;
  uint64_t v6 = __src;
  uint64_t v7 = a2;
  sub_216CE1034((uint64_t)a1, (uint64_t **)&__p);
  sub_216C80458((uint64_t)a1, __src);
  sub_216CE1660(&__p, (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4);
  v4[0] = a1;
  v4[1] = &__p;
  double v4[2] = a2;
  sub_216CE1134((uint64_t)a1, (uint64_t)v4);
  v4[0] = (v6 - (unsigned char *)__p) >> 3;
  sub_216C80458((uint64_t)a1, (char *)v4);
  sub_216C9E7BC((uint64_t)a1, (char *)__p, (v6 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v6 = (char *)__p;
    operator delete(__p);
  }
}

void sub_216CE0BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CE0C08(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  unint64_t v25 = 0;
  char v26 = 0;
  sub_216C64598((uint64_t)&v25, a2, a2 + 1, (uint64_t)(a2 + 2), a2 + 5);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (void)v25));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (sub_216C64744((uint64_t)(v14 + 2), (uint64_t)a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_216CE0EB0(a1, v9, a3, a4, (uint64_t)&v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *unint64_t v25 = *v22;
    *uint64_t v22 = v25;
  }
  else
  {
    *unint64_t v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      unint64_t v23 = *(void *)(*v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25;
    }
  }
  uint64_t v14 = v25;
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_216CE0E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11)
{
  if (__p) {
    sub_216CE0FE0((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CE0EB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x48uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  __n128 result = sub_216CE0F4C(v10 + 2, a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CE0F30(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_216CE0FE0(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_216CE0F4C(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 24), 1u, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_21696C2C8(a1 + 2, a2[2], a2[3], (uint64_t)(a2[3] - a2[2]) >> 4);
  a1[5] = a2[5];
  a1[6] = *a3;
  return a1;
}

void sub_216CE0FCC(_Unwind_Exception *a1)
{
  sub_2169CB1D8(v1);
  _Unwind_Resume(a1);
}

void sub_216CE0FE0(uint64_t a1, char *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void **)(__p + 32);
    sub_216932118(&v3);
    sub_2169CB1D8((atomic_uint **)__p + 3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t sub_216CE1034(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t __src = 0;
  sub_216C80458(a1, (char *)&__src);
  *a2[1] = sub_216CE1240(*(uint64_t **)(**a2 + 6248), **a2, (void *)(*(void *)(**a2 + 6328) + 256), a2[2][1]);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[2];
  if (v7 > v4 || v5[4] + v7 < v4)
  {
    sub_216C7A9E4(*(void *)(a1 + 8));
    uint64_t *v5 = v4;
    v5 += 2;
  }
  uint64_t *v5 = v4;
  uint64_t __src = v6 - v4;
  uint64_t result = sub_216C80458(a1, (char *)&__src);
  uint64_t v9 = *(void **)(a1 + 8);
  uint64_t v10 = v9[2];
  if (v10 > v6 || v9[4] + v10 < v6)
  {
    uint64_t result = sub_216C7A9E4((BOOL)v9);
    *uint64_t v9 = v6;
    v9 += 2;
  }
  *uint64_t v9 = v6;
  return result;
}

uint64_t sub_216CE1134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 8);
  uint64_t __src = 0;
  sub_216C80458(a1, (char *)&__src);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)(v5 + 16);
  uint64_t v7 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)(v5 + 24);
  if (v6 != v7)
  {
    uint64_t v8 = *(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***)a2;
    uint64_t v9 = **(void ***)(a2 + 8);
    do
    {
      *v9++ = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue(*v8, v6);
      uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v6 + 16);
    }
    while (v6 != v7);
  }
  uint64_t v10 = *(uint64_t **)(a1 + 8);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[2];
  if (v12 > v4 || v10[4] + v12 < v4)
  {
    sub_216C7A9E4(*(void *)(a1 + 8));
    *uint64_t v10 = v4;
    v10 += 2;
  }
  *uint64_t v10 = v4;
  uint64_t __src = v11 - v4;
  uint64_t result = sub_216C80458(a1, (char *)&__src);
  uint64_t v14 = *(void **)(a1 + 8);
  uint64_t v15 = v14[2];
  if (v15 > v11 || v14[4] + v15 < v11)
  {
    uint64_t result = sub_216C7A9E4((BOOL)v14);
    *uint64_t v14 = v11;
    v14 += 2;
  }
  *uint64_t v14 = v11;
  return result;
}

uint64_t sub_216CE1240(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v17[0] = a2;
  v17[1] = a3;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  __sFILE __p = 0;
  sub_21677CA50(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  uint64_t v7 = *a1;
  if (!*a1)
  {
    uint64_t v8 = operator new(0x28uLL);
    *uint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7ED20(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  uint64_t v13 = 0;
  uint64_t v9 = sub_216CE1318(v7, (double **)a4, a4, &v13);
  uint64_t v10 = v9;
  if (v11)
  {
    v9[5] = *a3 & 0xFFFFFFFFFFFFLL | 0x30000000000000;
    sub_216CD8430((uint64_t)v17, a4);
  }
  return v10[5];
}

void *sub_216CE1318(uint64_t a1, double **a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_216C646D8((uint64_t)v27, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t result = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = result[1];
          if (v15 == v10)
          {
            float v17 = (double *)result[2];
            uint64_t v16 = (double *)result[3];
            if ((char *)v16 - (char *)v17 == (char *)a2[1] - (char *)*a2)
            {
              if (v17 == v16) {
                return result;
              }
              for (i = *a2; *v17 == *i; ++i)
              {
                if (++v17 == v16) {
                  return result;
                }
              }
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216CE15B4(a1, v10, a3, a4, (uint64_t)v27);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_21678A04C(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v27[0] = *v25;
    *unint64_t v25 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v26 = *(void *)(*(void *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v27[0];
    }
  }
  uint64_t result = (void *)v27[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_216CE1590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_216C7A0A8((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CE15B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = 0;
  uint64_t result = sub_21677CA50(v10 + 2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  v10[5] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CE1644(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_216C7A0A8(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_216CE1660(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_216CE16BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CE16E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE172C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765278;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

atomic_uint **sub_216CE175C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v7;
  uint64_t v12 = 0;
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  return sub_216CE17F4(v5, &v11, v3, v4);
}

uint64_t sub_216CE17A8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7652D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE17E8()
{
  return &unk_26C7652D8;
}

atomic_uint **sub_216CE17F4(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v13 = 0;
  uint64_t v7 = operator new(0x20uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = 0;
  *((_DWORD *)v7 + 6) = 0;
  uint64_t v14 = (atomic_uint *)v7;
  atomic_fetch_add_explicit((atomic_uint *volatile)v7 + 6, 1u, memory_order_relaxed);
  memset(v15, 0, sizeof(v15));
  long long v8 = a2[1];
  long long v10 = *a2;
  long long v11 = v8;
  uint64_t v12 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(void *)&long long v11 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CE18C8((uint64_t *)&v10, (uint64_t)&v13);
  }
  sub_216C641B8(a4, &v13);
  uint64_t v16 = (void **)v15;
  sub_216932118(&v16);
  return sub_2169CB1D8(&v14);
}

void sub_216CE18B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216C64174((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216CE18C8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = operator new(0x20uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)unint64_t v4 = 0;
  *((_DWORD *)v4 + 6) = 0;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  long long v28 = 0u;
  long long v27 = 0u;
  uint64_t v5 = a1[2];
  uint64_t v25 = v5 & 0xFFFFFFFFFFFFLL | 0x2E000000000000;
  unint64_t v26 = (atomic_uint *)v4;
  unint64_t v22 = 0;
  if (sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&v22)) {
    a1[2] = (uint64_t)v22 + v5;
  }
  if (!sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&v24))
  {
    BOOL v13 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = (void **)(*a1 + 208);
  char v23 = 0;
  unint64_t v22 = (atomic_ullong *)v6;
  tbb::spin_rw_mutex_v3::internal_acquire_reader((atomic_ullong *)v6);
  uint64_t v7 = sub_21687CB2C((void *)(*a1 + 168), &v24);
  if (!v7)
  {
    if (!v23)
    {
      char v23 = 1;
      tbb::spin_rw_mutex_v3::internal_upgrade(v22);
    }
    uint64_t v14 = sub_216CE1E14(*a1 + 168, &v24, &v24);
    if (v15)
    {
      uint64_t v16 = operator new(0x20uLL);
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((void *)v16 + 2) = 0;
      _58[0] = (atomic_uint *)v16;
      atomic_fetch_add_explicit((atomic_uint *volatile)v16 + 6, 1u, memory_order_relaxed);
      sub_216CE1BCC(*a1, v24, (void **)v16);
      float v17 = (atomic_uint *)v14[3];
      v14[3] = _58[0];
      _58[0] = v17;
      sub_2169CB1D8(_58);
    }
    long long v8 = (atomic_uint *)v14[3];
    if (!v8) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  long long v8 = (atomic_uint *)v7[3];
  if (v8) {
LABEL_6:
  }
    atomic_fetch_add_explicit(v8 + 6, 1u, memory_order_relaxed);
LABEL_7:
  _58[0] = v26;
  unint64_t v26 = v8;
  sub_2169CB1D8(_58);
  uint64_t v9 = v22;
  unint64_t v22 = 0;
  if (v23)
  {
LABEL_8:
    atomic_ullong v10 = *v9;
    unint64_t v11 = *v9 & 0xFFFFFFFFFFFFFFFCLL;
    while (1)
    {
      atomic_ullong v12 = v10;
      atomic_compare_exchange_strong(v9, (unint64_t *)&v12, v11);
      if (v12 == v10) {
        break;
      }
      if (atomic_fetch_add_explicit(v9, 0, memory_order_relaxed) != v10)
      {
        sched_yield();
        goto LABEL_8;
      }
    }
  }
  else
  {
    atomic_fetch_add(v9, 0xFFFFFFFFFFFFFFFCLL);
  }
  uint64_t v18 = a1[2];
  _58[0] = 0;
  if (sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)_58)) {
    a1[2] = (uint64_t)_58[0] + v18;
  }
  uint64_t v21 = 0;
  BOOL v13 = sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&v21);
  if (v13)
  {
    *((void *)&v28 + 1) = a1[2];
    a1[2] = *((void *)&v28 + 1) + 8 * v21;
    float v19 = v26;
    *(void *)a2 = v25;
    if (v19) {
      atomic_fetch_add_explicit(v19 + 6, 1u, memory_order_relaxed);
    }
    _58[0] = *(atomic_uint **)(a2 + 8);
    *(void *)(a2 + 8) = v19;
    sub_2169CB1D8(_58);
    if (&v25 != (uint64_t *)a2) {
      sub_216CE24B8(a2 + 16, (void *)v27, *((uint64_t *)&v27 + 1), (uint64_t)(*((void *)&v27 + 1) - v27) >> 4);
    }
    *(void *)(a2 + 40) = *((void *)&v28 + 1);
  }
  sub_21685C048(&v22);
LABEL_29:
  unint64_t v22 = (atomic_ullong *)&v27;
  sub_216932118((void ***)&v22);
  sub_2169CB1D8(&v26);
  return v13;
}

void sub_216CE1B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_2169CB1D8((atomic_uint **)(v3 - 40));
  sub_21685C048((uint64_t *)va);
  sub_216C64174((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216CE1BCC(uint64_t a1, uint64_t a2, void **a3)
{
  if (*(unsigned char *)(a1 + 6568))
  {
    uint64_t v6 = *(void *)(a1 + 6560);
    v18[0] = a1;
    v18[2] = a1 + 6448;
    v18[3] = v6;
    int v19 = sub_216C688BC();
    if ((a2 & 0x4000000000000000) == 0)
    {
      v18[1] = *(void *)(*(void *)(a1 + 6448) + 24) + (a2 & 0xFFFFFFFFFFFFLL);
      sub_216CE20DC((uint64_t)v18, a3);
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 6456);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 6464);
      uint64_t v9 = *(void *)(a1 + 6472);
      v17[0] = a1;
      v17[1] = v8;
      v17[3] = v9;
      v17[4] = v7;
      if ((a2 & 0x4000000000000000) == 0)
      {
        void v17[2] = a2 & 0xFFFFFFFFFFFFLL;
        sub_216CE2214((uint64_t)v17, a3);
      }
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 6488);
      unint64_t v11 = *(std::__shared_weak_count **)(a1 + 6496);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = a1;
        uint64_t v14 = v10;
        char v15 = v11;
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v13 = a1;
        uint64_t v14 = v10;
        char v15 = 0;
      }
      uint64_t v16 = 0;
      atomic_ullong v12 = v11;
      if ((a2 & 0x4000000000000000) == 0)
      {
        uint64_t v16 = a2 & 0xFFFFFFFFFFFFLL;
        sub_216CE2338((uint64_t)&v13, a3);
        atomic_ullong v12 = v15;
      }
      if (v12) {
        sub_216784EC4(v12);
      }
      if (v11) {
        sub_216784EC4(v11);
      }
    }
  }
}

#error "216CE1DAC: call analysis failed (funcsize=52)"

void sub_216CE1DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void *sub_216CE1E14(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 16;
  uint64_t v13 = operator new(0x20uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *uint64_t v13 = 0;
  v13[1] = v6;
  v13[2] = *a3;
  void v13[3] = 0;
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  float v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    void *v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  uint64_t v10 = (void *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216CE2084((uint64_t)v23, 0);
  return v10;
}

void sub_216CE206C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CE2084((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_216CE2084(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(atomic_uint ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2169CB1D8(v2 + 3);
    }
    operator delete(v2);
  }
}

uint64_t sub_216CE20DC(uint64_t a1, void **a2)
{
  unint64_t __dst = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C93BB8(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __sFILE __p = "usd/crateFile.cpp";
    uint64_t v13 = "_Read";
    uint64_t v14 = 1189;
    float v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<const pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_R"
          "ead(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<const pxrInternal_"
          "_aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>, T = double]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_21678275C(&__p, __dst);
  uint64_t v8 = sub_216C93BB8(v4, __p, 8 * __dst);
  uint64_t v9 = v8;
  if (&__p == a2) {
    char v10 = 0;
  }
  else {
    char v10 = v8;
  }
  if (v10) {
    sub_21677CC7C((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 3);
  }
  if (__p)
  {
    uint64_t v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_216CE21F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216CE2214(uint64_t a1, void **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __sFILE __p = "usd/crateFile.cpp";
    uint64_t v12 = "_Read";
    uint64_t v13 = 1189;
    uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = double]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_21678275C(&__p, v16);
  BOOL v7 = sub_216C9F3AC(a1, (__sFILE *)__p, v16);
  BOOL v8 = v7;
  if (&__p != a2 && v7) {
    sub_21677CC7C((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 3);
  }
  if (__p)
  {
    uint64_t v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_216CE231C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CE2338(uint64_t a1, void **a2)
{
  unint64_t v19 = 0;
  uint64_t v4 = (void *)(a1 + 8);
  if (!sub_216C804FC((void *)(a1 + 8), (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __sFILE __p = "usd/crateFile.cpp";
    char v15 = "_Read";
    uint64_t v16 = 1189;
    unint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = double]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_21678275C(&__p, v19);
  uint64_t v9 = sub_216C804FC(v4, (uint64_t)__p, 8 * v19);
  uint64_t v10 = v9;
  if (&__p == a2) {
    char v11 = 0;
  }
  else {
    char v11 = v9;
  }
  if (v11) {
    sub_21677CC7C((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 3);
  }
  if (__p)
  {
    char v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_216CE249C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CE24B8(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_216AE329C((void **)a1);
    if (a4 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_21682BF78((void *)a1, v12);
    uint64_t result = sub_21696C350(v8, (uint64_t)v6, a3, *(void *)(a1 + 8));
LABEL_15:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = *(void *)(a1 + 8);
  unint64_t v14 = (result - (uint64_t)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = (uint64_t)&a2[2 * v14];
    if ((void *)result != v9)
    {
      uint64_t v16 = 16 * v14;
      do
      {
        sub_2168EC6DC(v9, v6);
        v6 += 2;
        v9 += 2;
        v16 -= 16;
      }
      while (v16);
      uint64_t v9 = *(void **)(a1 + 8);
    }
    uint64_t result = sub_21696C350(v8, v15, a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == (void *)a3)
  {
    unint64_t v17 = v9;
  }
  else
  {
    unint64_t v17 = v9;
    do
    {
      sub_2168EC6DC(v9, v6);
      v6 += 2;
      v9 += 2;
      v17 += 2;
    }
    while (v6 != (void *)a3);
    uint64_t result = *(void *)(a1 + 8);
  }
  while ((void *)result != v17)
    uint64_t result = sub_2168EE084(result - 16);
  *(void *)(a1 + 8) = v17;
  return result;
}

void sub_216CE2628(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 sub_216CE263C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7652F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE2688(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7652F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

atomic_uint **sub_216CE26B8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_216CE270C((void *)(a1 + 8), a2, a3);
}

uint64_t sub_216CE26C0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765358)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE2700()
{
  return &unk_26C765358;
}

atomic_uint **sub_216CE270C(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  *(void *)&long long v10 = *a1;
  *((void *)&v10 + 1) = v8;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  int v13 = sub_216C688BC();
  return sub_216CE278C(v5, &v10, v3, v4);
}

atomic_uint **sub_216CE278C(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v13 = 0;
  uint64_t v7 = operator new(0x20uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = 0;
  *((_DWORD *)v7 + 6) = 0;
  unint64_t v14 = (atomic_uint *)v7;
  atomic_fetch_add_explicit((atomic_uint *volatile)v7 + 6, 1u, memory_order_relaxed);
  memset(v15, 0, sizeof(v15));
  long long v8 = a2[1];
  long long v10 = *a2;
  long long v11 = v8;
  uint64_t v12 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((void *)&v10 + 1) = *(void *)(*(void *)v11 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_216CE2870((uint64_t)&v10, &v13);
  }
  sub_216C641B8(a4, &v13);
  uint64_t v16 = (void **)v15;
  sub_216932118(&v16);
  return sub_2169CB1D8(&v14);
}

void sub_216CE285C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216C64174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CE2870(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x20uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = 0;
  uint64_t v25 = (atomic_uint *)v4;
  *((_DWORD *)v4 + 6) = 0;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  long long v27 = 0u;
  long long v26 = 0u;
  uint64_t v24 = (*(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24)) & 0xFFFFFFFFFFFFLL | 0x2E000000000000;
  sub_216CE2B58(a1);
  if ((sub_216C82F78(a1 + 8, &__dst, 8uLL) & 1) == 0)
  {
    uint64_t v12 = 0;
    goto LABEL_23;
  }
  uint64_t v5 = (tbb::spin_rw_mutex_v3 *)(*(void *)a1 + 208);
  char v22 = 0;
  unint64_t v21 = v5;
  tbb::spin_rw_mutex_v3::internal_acquire_reader((atomic_ullong *)v5);
  uint64_t v6 = sub_21687CB2C((void *)(*(void *)a1 + 168), &__dst);
  if (!v6)
  {
    char v22 = 1;
    tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v21);
    uint64_t v13 = sub_216CE1E14(*(void *)a1 + 168, &__dst, &__dst);
    if (v14)
    {
      uint64_t v15 = operator new(0x20uLL);
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
      *((_DWORD *)v15 + 6) = 0;
      *((void *)v15 + 2) = 0;
      long long v28 = (atomic_uint *)v15;
      atomic_fetch_add_explicit((atomic_uint *volatile)v15 + 6, 1u, memory_order_relaxed);
      sub_216CE1BCC(*(void *)a1, __dst, (void **)v15);
      uint64_t v16 = (atomic_uint *)v13[3];
      void v13[3] = v28;
      long long v28 = v16;
      sub_2169CB1D8(&v28);
    }
    uint64_t v7 = (atomic_uint *)v13[3];
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v7 = (atomic_uint *)v6[3];
  if (v7) {
LABEL_4:
  }
    atomic_fetch_add_explicit(v7 + 6, 1u, memory_order_relaxed);
LABEL_5:
  long long v28 = v25;
  uint64_t v25 = v7;
  sub_2169CB1D8(&v28);
  long long v8 = (atomic_ullong *)v21;
  unint64_t v21 = 0;
  if (v22)
  {
LABEL_6:
    atomic_ullong v9 = *v8;
    unint64_t v10 = *v8 & 0xFFFFFFFFFFFFFFFCLL;
    while (1)
    {
      atomic_ullong v11 = v9;
      atomic_compare_exchange_strong(v8, (unint64_t *)&v11, v10);
      if (v11 == v9) {
        break;
      }
      if (atomic_fetch_add_explicit(v8, 0, memory_order_relaxed) != v9)
      {
        sched_yield();
        goto LABEL_6;
      }
    }
  }
  else
  {
    atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFCLL);
  }
  sub_216CE2B58(a1);
  uint64_t v20 = 0;
  uint64_t v12 = sub_216C82F78(a1 + 8, &v20, 8uLL);
  if (v12)
  {
    uint64_t v17 = *(void *)(**(void **)(a1 + 16) + 24);
    *((void *)&v27 + 1) = *(void *)(a1 + 8) - v17;
    *(void *)(a1 + 8) = v17 + *((void *)&v27 + 1) + 8 * v20;
    char v18 = v25;
    *a2 = v24;
    if (v18) {
      atomic_fetch_add_explicit(v18 + 6, 1u, memory_order_relaxed);
    }
    long long v28 = (atomic_uint *)a2[1];
    a2[1] = (uint64_t)v18;
    sub_2169CB1D8(&v28);
    if (&v24 != a2) {
      sub_216CE24B8((uint64_t)(a2 + 2), (void *)v26, *((uint64_t *)&v26 + 1), (uint64_t)(*((void *)&v26 + 1) - v26) >> 4);
    }
    a2[5] = *((void *)&v27 + 1);
  }
  sub_21685C048(&v21);
LABEL_23:
  unint64_t v21 = (tbb::spin_rw_mutex_v3 *)&v26;
  sub_216932118((void ***)&v21);
  sub_2169CB1D8(&v25);
  return v12;
}

void sub_216CE2B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_2169CB1D8((atomic_uint **)(v3 - 40));
  sub_21685C048((uint64_t *)va);
  sub_216C64174((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216CE2B58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(**(void **)(a1 + 16) + 24);
  uint64_t __dst = 0;
  uint64_t result = sub_216C82F78(a1 + 8, &__dst, 8uLL);
  if (result) {
    *(void *)(a1 + 8) = *(void *)(**(void **)(a1 + 16) + 24) + __dst + v2 - v3;
  }
  return result;
}

__n128 sub_216CE2BD0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE2C1C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765378;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE2C4C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CE2C54(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7653D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE2C94()
{
  return &unk_26C7653D8;
}

void sub_216CE2CA0(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  atomic_ullong v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    atomic_ullong v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    atomic_ullong v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CE2D4C(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CE2D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

atomic_uint **sub_216CE2D4C(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v13 = 0;
  uint64_t v7 = operator new(0x20uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = 0;
  char v14 = (atomic_uint *)v7;
  *((_DWORD *)v7 + 6) = 0;
  atomic_fetch_add_explicit((atomic_uint *volatile)v7 + 6, 1u, memory_order_relaxed);
  memset(v15, 0, sizeof(v15));
  long long v10 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a2 + 2);
  atomic_ullong v11 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *((void *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CE2E54((uint64_t *)&v10, &v13);
    uint64_t v8 = v11;
  }
  if (v8) {
    sub_216784EC4(v8);
  }
  sub_216C641B8(a4, &v13);
  uint64_t v16 = (void **)v15;
  sub_216932118(&v16);
  return sub_2169CB1D8(&v14);
}

void sub_216CE2E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_216C64174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CE2E54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x20uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = 0;
  *((_DWORD *)v4 + 6) = 0;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  long long v28 = 0u;
  long long v27 = 0u;
  uint64_t v5 = a1[3];
  uint64_t v25 = v5 & 0xFFFFFFFFFFFFLL | 0x2E000000000000;
  long long v26 = (atomic_uint *)v4;
  char v22 = 0;
  if (sub_216C804FC(a1 + 1, (uint64_t)&v22, 8uLL)) {
    a1[3] = (uint64_t)v22 + v5;
  }
  if ((sub_216C804FC(a1 + 1, (uint64_t)&v24, 8uLL) & 1) == 0)
  {
    uint64_t v13 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = (tbb::spin_rw_mutex_v3 *)(*a1 + 208);
  char v23 = 0;
  char v22 = v6;
  tbb::spin_rw_mutex_v3::internal_acquire_reader((atomic_ullong *)v6);
  uint64_t v7 = sub_21687CB2C((void *)(*a1 + 168), &v24);
  if (!v7)
  {
    if (!v23)
    {
      char v23 = 1;
      tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v22);
    }
    char v14 = sub_216CE1E14(*a1 + 168, &v24, &v24);
    if (v15)
    {
      uint64_t v16 = operator new(0x20uLL);
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((void *)v16 + 2) = 0;
      std::string v29 = (atomic_uint *)v16;
      atomic_fetch_add_explicit((atomic_uint *volatile)v16 + 6, 1u, memory_order_relaxed);
      sub_216CE1BCC(*a1, v24, (void **)v16);
      uint64_t v17 = (atomic_uint *)v14[3];
      v14[3] = v29;
      std::string v29 = v17;
      sub_2169CB1D8(&v29);
    }
    uint64_t v8 = (atomic_uint *)v14[3];
    if (!v8) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v8 = (atomic_uint *)v7[3];
  if (v8) {
LABEL_6:
  }
    atomic_fetch_add_explicit(v8 + 6, 1u, memory_order_relaxed);
LABEL_7:
  std::string v29 = v26;
  long long v26 = v8;
  sub_2169CB1D8(&v29);
  atomic_ullong v9 = (atomic_ullong *)v22;
  char v22 = 0;
  if (v23)
  {
LABEL_8:
    atomic_ullong v10 = *v9;
    unint64_t v11 = *v9 & 0xFFFFFFFFFFFFFFFCLL;
    while (1)
    {
      atomic_ullong v12 = v10;
      atomic_compare_exchange_strong(v9, (unint64_t *)&v12, v11);
      if (v12 == v10) {
        break;
      }
      if (atomic_fetch_add_explicit(v9, 0, memory_order_relaxed) != v10)
      {
        sched_yield();
        goto LABEL_8;
      }
    }
  }
  else
  {
    atomic_fetch_add(v9, 0xFFFFFFFFFFFFFFFCLL);
  }
  uint64_t v18 = a1[3];
  std::string v29 = 0;
  if (sub_216C804FC(a1 + 1, (uint64_t)&v29, 8uLL)) {
    a1[3] = (uint64_t)v29 + v18;
  }
  uint64_t v21 = 0;
  uint64_t v13 = sub_216C804FC(a1 + 1, (uint64_t)&v21, 8uLL);
  if (v13)
  {
    *((void *)&v28 + 1) = a1[3];
    a1[3] = *((void *)&v28 + 1) + 8 * v21;
    unint64_t v19 = v26;
    *a2 = v25;
    if (v19) {
      atomic_fetch_add_explicit(v19 + 6, 1u, memory_order_relaxed);
    }
    std::string v29 = (atomic_uint *)a2[1];
    a2[1] = (uint64_t)v19;
    sub_2169CB1D8(&v29);
    if (&v25 != a2) {
      sub_216CE24B8((uint64_t)(a2 + 2), (void *)v27, *((uint64_t *)&v27 + 1), (uint64_t)(*((void *)&v27 + 1) - v27) >> 4);
    }
    a2[5] = *((void *)&v28 + 1);
  }
  sub_21685C048(&v22);
LABEL_29:
  char v22 = (tbb::spin_rw_mutex_v3 *)&v27;
  sub_216932118((void ***)&v22);
  sub_2169CB1D8(&v26);
  return v13;
}

void sub_216CE310C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_2169CB1D8((atomic_uint **)(v3 - 40));
  sub_21685C048((uint64_t *)va);
  sub_216C64174((uint64_t)va1);
  _Unwind_Resume(a1);
}

__n128 sub_216CE3160(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7653F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE31AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7653F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CE31DC(uint64_t a1, uint64_t *a2)
{
  return sub_216CE3230((char ***)(a1 + 8), a2);
}

uint64_t sub_216CE31E4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765458)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE3224()
{
  return &unk_26C765458;
}

uint64_t sub_216CE3230(char ***a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = (*a1)[791];
  uint64_t v5 = a2[1];
  if ((v5 & 4) != 0) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v6 = *a2;
  }

  return sub_216CE329C(v3, v2, (char **)v4 + 32, v6);
}

uint64_t sub_216CE329C(uint64_t *a1, char **a2, char **a3, uint64_t a4)
{
  v20[0] = a2;
  v20[1] = a3;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__sFILE __p = *(_OWORD *)a4;
    uint64_t v16 = *(void *)(a4 + 16);
  }
  sub_216981010(&v17, (_DWORD *)(a4 + 24));
  uint64_t v7 = sub_21698105C(&v18, (_DWORD *)(a4 + 28));
  long long v19 = *(_OWORD *)(a4 + 32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v7);
  sub_21697C414(&v17);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = *a1;
  if (!*a1)
  {
    atomic_ullong v9 = operator new(0x28uLL);
    *atomic_ullong v9 = 0u;
    v9[1] = 0u;
    *((_DWORD *)v9 + 8) = 1065353216;
    sub_216C7EA84(a1, (uint64_t)v9);
    uint64_t v8 = *a1;
  }
  uint64_t v14 = 0;
  atomic_ullong v10 = sub_216CE34D4(v8, (int8x16_t *)a4, (long long *)a4, &v14);
  unint64_t v11 = v10;
  if (v12)
  {
    *((void *)v10 + 8) = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x2F000000000000;
    sub_216CE33C0(v20, a4);
  }
  return *((void *)v11 + 8);
}

uint64_t sub_216CE33C0(char ***a1, uint64_t a2)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a2 + 32)))
  {
    uint64_t v4 = (uint64_t)(*a1)[791];
    sub_216779094(__p, "A payload with a non-identity layer offset was detected, which requires crate version 0.8.0.");
    sub_216CCED74(v4, (const char *)0x800, (char *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  LODWORD(__src) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a1, (unsigned __int8 *)a2);
  sub_216C984FC((uint64_t)a1, (char *)&__src);
  LODWORD(__src) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)*a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24));
  uint64_t result = sub_216C984FC((uint64_t)a1, (char *)&__src);
  if ((((*a1)[791][248] << 16) | ((*a1)[791][249] << 8)) >= 0x800u)
  {
    uint64_t __src = *(void *)(a2 + 32);
    sub_216C80458((uint64_t)a1, (char *)&__src);
    uint64_t __src = *(void *)(a2 + 40);
    return sub_216C80458((uint64_t)a1, (char *)&__src);
  }
  return result;
}

void sub_216CE34B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_216CE34D4(uint64_t a1, int8x16_t *a2, long long *a3, void *a4)
{
  uint64_t v25 = 0;
  char v26 = 0;
  sub_2169DA89C((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (void)v25));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_216CE377C(a1, v9, a3, a4, (uint64_t)&v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  char v22 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)uint64_t v25 = *v22;
    *char v22 = v25;
  }
  else
  {
    *(void *)uint64_t v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v25)
    {
      unint64_t v23 = *(void *)(*(void *)v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25;
    }
  }
  i = v25;
  uint64_t v25 = 0;
  ++*(void *)(a1 + 24);
  sub_216CE3804((uint64_t)&v25, 0);
  return i;
}

void sub_216CE3764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CE3804((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216CE377C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x48uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_216AEA204(v10 + 2, a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CE37EC(_Unwind_Exception *a1)
{
  sub_216CE3804(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216CE3804(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C7EB44((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

__n128 sub_216CE3864(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE38B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE38E0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  *(void *)&long long v10 = v6;
  *((void *)&v10 + 1) = v7;
  uint64_t v11 = 0;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  sub_216CE3978(v5, &v10, v3, v4);
}

uint64_t sub_216CE392C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7654D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE396C()
{
  return &unk_26C7654D8;
}

void sub_216CE3978(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v12 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v11, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(&v15, __p, &v12, v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_21697C414(&v12);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  long long v7 = a2[1];
  long long v8 = *a2;
  long long v9 = v7;
  uint64_t v10 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(void *)&long long v9 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CE3BE4((uint64_t *)&v8, (uint64_t)&v15);
  }
  sub_216CE3AB8(a4, &v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
  sub_21697C414(&v17);
  if (v16 < 0) {
    operator delete((void *)v15);
  }
}

void sub_216CE3A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_2169D8488(v23 - 80);
  _Unwind_Resume(a1);
}

void sub_216CE3AB8(pxrInternal__aapl__pxrReserved__::VtValue *a1, long long *a2)
{
  if ((sub_216B6E1CC(a1) & 1) == 0)
  {
    v7[0] = 0;
    v7[1] = 0;
    uint64_t v8 = 0;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v6 + 1);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v5, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, v7, &v6, v5);
    sub_216CE3F24((uint64_t)a1, (long long *)__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
    sub_21697C414(&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
    sub_21697C414(&v6);
    if (SHIBYTE(v8) < 0) {
      operator delete(v7[0]);
    }
  }
  unint64_t v4 = sub_216CE3FF4((long long **)a1);
  sub_2169D953C((uint64_t)v4, a2);
}

void sub_216CE3BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216CE3BE4(uint64_t *a1, uint64_t a2)
{
  memset(&__p._seek, 0, 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__p._read);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__p._read + 1);
  LODWORD(__p._p) = -1;
  EmptyToken = (uint64_t *)sub_216C98940((uint64_t)(a1 + 1), 0, &__p);
  if (!EmptyToken) {
    goto LABEL_17;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 144);
  if (LODWORD(__p._p) >= (unint64_t)((*(void *)(*a1 + 152) - v6) >> 2))
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
    uint64_t v12 = (const std::string *)&qword_267B91638;
  }
  else
  {
    unint64_t v7 = *(unsigned int *)(v6 + 4 * LODWORD(__p._p));
    uint64_t v9 = v5 + 120;
    uint64_t v8 = *(void *)(v5 + 120);
    if (v7 >= (*(void *)(v9 + 8) - v8) >> 3)
    {
      EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
      char v10 = &qword_267B91658;
    }
    else
    {
      char v10 = (uint64_t *)(v8 + 8 * v7);
    }
    unint64_t v11 = *v10 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = v11
        ? (const std::string *)(v11 + 16)
        : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
  }
  std::string::operator=((std::string *)&__p._seek, v12);
  LODWORD(__p._p) = -1;
  BOOL v13 = sub_216C98940((uint64_t)(a1 + 1), 0, &__p);
  if (!v13) {
    goto LABEL_17;
  }
  uint64_t v14 = *(void *)(*a1 + 96);
  if (LODWORD(__p._p) >= (unint64_t)((*(void *)(*a1 + 104) - v14) >> 3)) {
    long long v15 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v13);
  }
  else {
    long long v15 = (uint64_t *)(v14 + 8 * LODWORD(__p._p));
  }
  sub_2169C487C((int *)&__p._read, v15);
  sub_2169C48D4((int *)&__p._read + 1, (_DWORD *)v15 + 1);
  if (((*(unsigned __int8 *)(*a1 + 6368) << 16) | (*(unsigned __int8 *)(*a1 + 6369) << 8)) < 0x800u)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&__p._cookie, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(&__p, &__p._seek, &__p._read, &__p._cookie);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    goto LABEL_23;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&__p._cookie, 0.0, 1.0);
  *(void *)&__p._ub._size = 0;
  __p._extra = 0;
  if (!sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&__p._extra)
    || !sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&__p._ub._size))
  {
LABEL_17:
    uint64_t v16 = 0;
    goto LABEL_18;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&__p, *(double *)&__p._extra, *(double *)&__p._ub._size);
  *(_OWORD *)&__p._cookie = *(_OWORD *)&__p._p;
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(&__p, &__p._seek, &__p._read, &__p._cookie);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
LABEL_23:
  *(_OWORD *)a2 = *(_OWORD *)&__p._p;
  *(void *)(a2 + 16) = *(void *)&__p._flags;
  *((unsigned char *)&__p._file + 5) = 0;
  LOBYTE(__p._p) = 0;
  sub_21697DE94((int *)(a2 + 24), (int *)&__p._bf);
  sub_21697DEEC((int *)(a2 + 28), (int *)&__p._bf._base + 1);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&__p._bf._size;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p._bf._base + 1);
  sub_21697C414(&__p._bf);
  if (*((char *)&__p._file + 5) < 0) {
    operator delete(__p._p);
  }
  uint64_t v16 = 1;
LABEL_18:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p._read + 1);
  sub_21697C414(&__p._read);
  if (SHIBYTE(__p._ub._base) < 0) {
    operator delete(__p._seek);
  }
  return v16;
}

void sub_216CE3EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216CE3F24(uint64_t a1, long long *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C75A798;
  sub_216B550D8((atomic_uint **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216CE3FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_216CE3FF4(long long **a1)
{
  double v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, long long **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216B54FD8(a1);
}

__n128 sub_216CE4090(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7654F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE40DC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7654F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE410C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CE4114(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765558)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE4154()
{
  return &unk_26C765558;
}

void sub_216CE4160(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v8;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  int v12 = sub_216C688BC();
  sub_216CE41E0(v5, &v9, v3, v4);
}

void sub_216CE41E0(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v12 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v11, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(&v15, __p, &v12, v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_21697C414(&v12);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  long long v7 = a2[1];
  long long v8 = *a2;
  long long v9 = v7;
  uint64_t v10 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((void *)&v8 + 1) = *(void *)(*(void *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_216CE4330((uint64_t *)&v8, (uint64_t)&v15);
  }
  sub_216CE3AB8(a4, &v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
  sub_21697C414(&v17);
  if (v16 < 0) {
    operator delete((void *)v15);
  }
}

void sub_216CE42FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_2169D8488(v23 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_216CE4330(uint64_t *a1, uint64_t a2)
{
  memset(&v26, 0, sizeof(v26));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v25);
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C82F78((uint64_t)(a1 + 1), __p, 4uLL);
  if (!EmptyToken) {
    goto LABEL_17;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 144);
  if (LODWORD(__p[0]) >= (unint64_t)((*(void *)(*a1 + 152) - v6) >> 2))
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
    uint64_t v12 = (const std::string *)&qword_267B91638;
  }
  else
  {
    unint64_t v7 = *(unsigned int *)(v6 + 4 * LODWORD(__p[0]));
    uint64_t v9 = v5 + 120;
    uint64_t v8 = *(void *)(v5 + 120);
    if (v7 >= (*(void *)(v9 + 8) - v8) >> 3)
    {
      EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
      uint64_t v10 = &qword_267B91658;
    }
    else
    {
      uint64_t v10 = (uint64_t *)(v8 + 8 * v7);
    }
    unint64_t v11 = *v10 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = v11
        ? (const std::string *)(v11 + 16)
        : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
  }
  std::string::operator=(&v26, v12);
  LODWORD(__p[0]) = -1;
  BOOL v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C82F78((uint64_t)(a1 + 1), __p, 4uLL);
  if (!v13) {
    goto LABEL_17;
  }
  uint64_t v14 = *(void *)(*a1 + 96);
  if (LODWORD(__p[0]) >= (unint64_t)((*(void *)(*a1 + 104) - v14) >> 3)) {
    long long v15 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v13);
  }
  else {
    long long v15 = (uint64_t *)(v14 + 8 * LODWORD(__p[0]));
  }
  sub_2169C487C(&v24, v15);
  sub_2169C48D4(&v25, (_DWORD *)v15 + 1);
  if (((*(unsigned __int8 *)(*a1 + 6368) << 16) | (*(unsigned __int8 *)(*a1 + 6369) << 8)) < 0x800u)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v23, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, &v26, &v24, &v23);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    goto LABEL_23;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v23, 0.0, 1.0);
  double v27 = 0.0;
  double __dst = 0.0;
  if (!sub_216C82F78((uint64_t)(a1 + 1), &__dst, 8uLL)
    || !sub_216C82F78((uint64_t)(a1 + 1), &v27, 8uLL))
  {
LABEL_17:
    uint64_t v16 = 0;
    goto LABEL_18;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, __dst, v27);
  long long v23 = *(_OWORD *)__p;
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, &v26, &v24, &v23);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
LABEL_23:
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v19;
  HIBYTE(v19) = 0;
  LOBYTE(__p[0]) = 0;
  sub_21697DE94((int *)(a2 + 24), &v20);
  sub_21697DEEC((int *)(a2 + 28), &v21);
  *(_OWORD *)(a2 + 32) = v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_21697C414(&v20);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = 1;
LABEL_18:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_21697C414(&v24);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_216CE4638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_216CE4678(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE46C4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE46F4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CE46FC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7655D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE473C()
{
  return &unk_26C7655D8;
}

void sub_216CE4748(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    unint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    unint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CE47F4(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CE47D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CE47F4(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v12 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v11, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(v15, __p, &v12, v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_21697C414(&v12);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  long long v8 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *((void *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    uint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CE496C(&v8, (uint64_t)v15);
    uint64_t v7 = v9;
  }
  if (v7) {
    sub_216784EC4(v7);
  }
  sub_216CE3AB8(a4, (long long *)v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
  sub_21697C414(&v17);
  if (v16 < 0) {
    operator delete(v15[0]);
  }
}

void sub_216CE491C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  sub_2169D8488((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_216CE496C(void *a1, uint64_t a2)
{
  memset(&v26, 0, sizeof(v26));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v25);
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C804FC(a1 + 1, (uint64_t)__p, 4uLL);
  if (!EmptyToken) {
    goto LABEL_17;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 144);
  if (LODWORD(__p[0]) >= (unint64_t)((*(void *)(*a1 + 152) - v6) >> 2))
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
    uint64_t v12 = (const std::string *)&qword_267B91638;
  }
  else
  {
    unint64_t v7 = *(unsigned int *)(v6 + 4 * LODWORD(__p[0]));
    uint64_t v9 = v5 + 120;
    uint64_t v8 = *(void *)(v5 + 120);
    if (v7 >= (*(void *)(v9 + 8) - v8) >> 3)
    {
      EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
      uint64_t v10 = &qword_267B91658;
    }
    else
    {
      uint64_t v10 = (uint64_t *)(v8 + 8 * v7);
    }
    unint64_t v11 = *v10 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = v11
        ? (const std::string *)(v11 + 16)
        : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
  }
  std::string::operator=(&v26, v12);
  LODWORD(__p[0]) = -1;
  BOOL v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216C804FC(a1 + 1, (uint64_t)__p, 4uLL);
  if (!v13) {
    goto LABEL_17;
  }
  uint64_t v14 = *(void *)(*a1 + 96);
  if (LODWORD(__p[0]) >= (unint64_t)((*(void *)(*a1 + 104) - v14) >> 3)) {
    long long v15 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v13);
  }
  else {
    long long v15 = (uint64_t *)(v14 + 8 * LODWORD(__p[0]));
  }
  sub_2169C487C(&v24, v15);
  sub_2169C48D4(&v25, (_DWORD *)v15 + 1);
  if (((*(unsigned __int8 *)(*a1 + 6368) << 16) | (*(unsigned __int8 *)(*a1 + 6369) << 8)) < 0x800u)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v23, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, &v26, &v24, &v23);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    goto LABEL_23;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v23, 0.0, 1.0);
  double v27 = 0.0;
  double v28 = 0.0;
  if (!sub_216C804FC(a1 + 1, (uint64_t)&v28, 8uLL)
    || !sub_216C804FC(a1 + 1, (uint64_t)&v27, 8uLL))
  {
LABEL_17:
    uint64_t v16 = 0;
    goto LABEL_18;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, v28, v27);
  long long v23 = *(_OWORD *)__p;
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, &v26, &v24, &v23);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
LABEL_23:
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(void *)(a2 + 16) = v19;
  HIBYTE(v19) = 0;
  LOBYTE(__p[0]) = 0;
  sub_21697DE94((int *)(a2 + 24), &v20);
  sub_21697DEEC((int *)(a2 + 28), &v21);
  *(_OWORD *)(a2 + 32) = v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_21697C414(&v20);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = 1;
LABEL_18:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_21697C414(&v24);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_216CE4C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_216CE4CB4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7655F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE4D00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7655F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CE4D30(uint64_t a1, uint64_t *a2)
{
  return sub_216CE4D84((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_216CE4D38(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765658)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE4D78()
{
  return &unk_26C765658;
}

uint64_t sub_216CE4D84(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *(void *)(*a1 + 6328);
  uint64_t v5 = a2[1];
  if ((v5 & 4) != 0) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v6 = *a2;
  }

  return sub_216CE1240(v3, v2, (void *)(v4 + 256), v6);
}

__n128 sub_216CE4DF8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE4E44(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE4E74(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  *(void *)&long long v10 = v6;
  *((void *)&v10 + 1) = v7;
  uint64_t v11 = 0;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  sub_216CE4F0C(v5, &v10, v3, v4);
}

uint64_t sub_216CE4EC0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765790)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE4F00()
{
  return &unk_26C765790;
}

void sub_216CE4F0C(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __sFILE __p = 0;
  long long v10 = 0;
  uint64_t v11 = 0;
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(void *)&long long v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CE2214((uint64_t)&v6, &__p);
  }
  sub_216CE4F9C(a4, &__p);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_216CE4F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_216CE4F9C(pxrInternal__aapl__pxrReserved__::VtValue *a1, void *a2)
{
  if ((sub_216CE5048(a1) & 1) == 0)
  {
    __sFILE __p = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    sub_216CE50D4((uint64_t)a1, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v9 = __p;
      operator delete(__p);
    }
  }
  __n128 result = sub_216CE5534((unsigned int **)a1);
  uint64_t v5 = *(void *)result;
  *(void *)__n128 result = *a2;
  *a2 = v5;
  uint64_t v6 = *((void *)result + 1);
  *((void *)result + 1) = a2[1];
  a2[1] = v6;
  uint64_t v7 = *((void *)result + 2);
  *((void *)result + 2) = a2[2];
  a2[2] = v7;
  return result;
}

void sub_216CE502C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CE5048(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021741274FLL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C3E0);
}

uint64_t sub_216CE50D4(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C7656D8;
  sub_216CE54BC((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216CE5168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216CE51A4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_216CE51C4(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169CB1D8(a1);
}

uint64_t sub_216CE51D4()
{
  return 1;
}

unint64_t sub_216CE51DC(uint64_t *a1)
{
  return sub_216C646D8((uint64_t)&v2, *a1);
}

BOOL sub_216CE5204(uint64_t **a1, double ***a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  uint64_t v4 = **a2;
  if (v2 - v3 != (char *)(*a2)[1] - (char *)v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    double v6 = *v4++;
    BOOL result = *(double *)(v5 - 8) == v6;
    BOOL v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL sub_216CE5260(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  uint64_t v4 = *(double **)a2;
  if (v2 - v3 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    double v6 = *v4++;
    BOOL result = *(double *)(v5 - 8) == v6;
    BOOL v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t sub_216CE52BC()
{
  return 0;
}

void *sub_216CE52C8(uint64_t **a1, void *a2)
{
  return sub_216CE5434(a2, *a1);
}

void *sub_216CE52D8()
{
  return &unk_26C74C3E0;
}

uint64_t sub_216CE52E4()
{
  return 0;
}

uint64_t sub_216CE52EC()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216CE52F8()
{
  return 0;
}

uint64_t sub_216CE5300()
{
  return 0;
}

BOOL sub_216CE5308(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000021741274FLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216CE5344(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C3E0, a2, a3);
}

void *sub_216CE5368()
{
  return &unk_26C74C3E0;
}

uint64_t sub_216CE5374(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_216CE537C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C7656D8;
  return sub_216CE54BC((unsigned int **)a2, v2);
}

unsigned int *sub_216CE5394(unsigned int **a1)
{
  unsigned int v2 = atomic_load(*a1 + 6);
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0x20uLL);
    uint64_t v4 = *a1;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    *(void *)uint64_t v3 = 0;
    sub_21677CA50(v3, *(const void **)v4, *((void *)v4 + 1), (uint64_t)(*((void *)v4 + 1) - *(void *)v4) >> 3);
    atomic_store(0, v3 + 6);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 6, 1u, memory_order_relaxed);
    double v6 = (atomic_uint *)*a1;
    *a1 = v3;
    sub_2169CB1D8(&v6);
  }
  return *a1;
}

void sub_216CE5420(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216CE5434(void *a1, uint64_t *a2)
{
  sub_216779180(a1, (uint64_t)"[ ", 2);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v4 += 8;
      double v6 = (void *)std::ostream::operator<<();
      sub_216779180(v6, (uint64_t)" ", 1);
    }
    while (v4 != v5);
  }
  sub_216779180(a1, (uint64_t)"]", 1);
  return a1;
}

void *sub_216CE54BC(unsigned int **a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x20uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = 0;
  BOOL result = sub_21677CA50(v4, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  atomic_store(0, v4 + 6);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_216CE5520(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_216CE5534(unsigned int **a1)
{
  double v4[2] = *MEMORY[0x263EF8340];
  unsigned int v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216CE5394(a1);
}

__n128 sub_216CE55D0(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_26C7657B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE561C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7657B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE564C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CE5654(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765810)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE5694()
{
  return &unk_26C765810;
}

void sub_216CE56A0(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v8;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  int v12 = sub_216C688BC();
  sub_216CE5720(v5, &v9, v3, v4);
}

void sub_216CE5720(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __sFILE __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((void *)&v6 + 1) = *(void *)(*(void *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_216CE57C0((uint64_t)&v6, &__p);
  }
  sub_216CE4F9C(a4, &__p);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_216CE57A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CE57C0(uint64_t a1, void **a2)
{
  unint64_t __dst = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v5 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v6 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __sFILE __p = "usd/crateFile.cpp";
    uint64_t v13 = "_Read";
    uint64_t v14 = 1189;
    long long v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = double]";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_21678275C(&__p, __dst);
  uint64_t v8 = sub_216C82F78(v4, __p, 8 * __dst);
  uint64_t v9 = v8;
  if (&__p == a2) {
    char v10 = 0;
  }
  else {
    char v10 = v8;
  }
  if (v10) {
    sub_21677CC7C((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (unsigned char *)__p) >> 3);
  }
  if (__p)
  {
    uint64_t v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_216CE58DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CE5900(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_26C765830;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE594C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765830;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE597C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CE5984(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765890)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE59C4()
{
  return &unk_26C765890;
}

void sub_216CE59D0(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CE5A7C(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CE5A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CE5A7C(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __sFILE __p = 0;
  long long v10 = 0;
  uint64_t v11 = 0;
  long long v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *((void *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CE2338((uint64_t)&v6, &__p);
    uint64_t v5 = v7;
  }
  if (v5) {
    sub_216784EC4(v5);
  }
  sub_216CE4F9C(a4, &__p);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_216CE5B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CE5B4C(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_26C7658B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE5B98(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7658B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double *sub_216CE5BC8(uint64_t a1, uint64_t *a2)
{
  return sub_216CE5C1C((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_216CE5BD0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765910)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE5C10()
{
  return &unk_26C765910;
}

double *sub_216CE5C1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *(void *)(*a1 + 6328);
  uint64_t v5 = a2[1];
  if ((v5 & 4) != 0) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v6 = *a2;
  }

  return sub_216CE5C88(v3, v2, (void *)(v4 + 256), v6);
}

double *sub_216CE5C88(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v17[0] = a2;
  v17[1] = a3;
  long long v15 = 0;
  uint64_t v16 = 0;
  __sFILE __p = 0;
  sub_21697E62C(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
  uint64_t v7 = *a1;
  if (!*a1)
  {
    uint64_t v8 = operator new(0x28uLL);
    *uint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7ED20(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  uint64_t v13 = 0;
  uint64_t v9 = sub_216CE5DB0(v7, a4, a4, &v13);
  long long v10 = v9;
  if (v11)
  {
    v9[5] = (double *)(*a3 & 0xFFFFFFFFFFFFLL | 0x31000000000000);
    sub_216CE5D60((uint64_t)v17, (uint64_t **)a4);
  }
  return v10[5];
}

uint64_t sub_216CE5D60(uint64_t a1, uint64_t **a2)
{
  uint64_t __src = ((char *)a2[1] - (char *)*a2) >> 4;
  sub_216C80458(a1, (char *)&__src);
  return sub_216CE6154(*a2, a2[1], a1);
}

double **sub_216CE5DB0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2169CB234((uint64_t)v26, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(double ****)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (double **)*i)
      {
        unint64_t v16 = (unint64_t)i[1];
        if (v16 == v10)
        {
          if (sub_216CE60E0(a1 + 32, i + 2, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_216CE6034(a1, v10, a3, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *long long v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (double **)v26[0];
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CE6010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_216C7A0A8((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CE6034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = 0;
  __n128 result = sub_21697E62C(v10 + 2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
  v10[5] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CE60C4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_216C7A0A8(v3, v2);
  _Unwind_Resume(a1);
}

BOOL sub_216CE60E0(uint64_t a1, double **a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = *(double **)a3;
  if ((char *)v4 - (char *)*a2 != *(void *)(a3 + 8) - *(void *)a3) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  do
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==(v3, v5);
    if (!result) {
      break;
    }
    v3 += 2;
    v5 += 2;
  }
  while (v3 != v4);
  return result;
}

uint64_t sub_216CE6154(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t __src = *v5;
      sub_216C80458(a3, (char *)&__src);
      uint64_t __src = v5[1];
      sub_216C80458(a3, (char *)&__src);
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

__n128 sub_216CE61D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765930;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE6220(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765930;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE6250(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  *(void *)&long long v10 = v6;
  *((void *)&v10 + 1) = v7;
  uint64_t v11 = 0;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  sub_216CE62E8(v5, &v10, v3, v4);
}

uint64_t sub_216CE629C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765990)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE62DC()
{
  return &unk_26C765990;
}

void sub_216CE62E8(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __sFILE __p = 0;
  long long v10 = 0;
  uint64_t v11 = 0;
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(void *)&long long v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CE6424((uint64_t)&v6, &__p);
  }
  sub_216CE6378(a4, &__p);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_216CE635C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_216CE6378(pxrInternal__aapl__pxrReserved__::VtValue *a1, void *a2)
{
  if ((sub_21697E5A0(a1) & 1) == 0)
  {
    __sFILE __p = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    sub_216CE6610((uint64_t)a1, (uint64_t)&__p);
    if (__p)
    {
      uint64_t v9 = __p;
      operator delete(__p);
    }
  }
  __n128 result = sub_216CE66E0((unsigned int **)a1);
  uint64_t v5 = *(void *)result;
  *(void *)__n128 result = *a2;
  *a2 = v5;
  uint64_t v6 = *((void *)result + 1);
  *((void *)result + 1) = a2[1];
  a2[1] = v6;
  uint64_t v7 = *((void *)result + 2);
  *((void *)result + 2) = a2[2];
  a2[2] = v7;
  return result;
}

void sub_216CE6408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216CE6424(uint64_t a1, void **a2)
{
  unint64_t v16 = 0;
  if (!sub_216C8B2C8(a1 + 8, 0, (__sFILE *)&v16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __sFILE __p = "usd/crateFile.cpp";
    uint64_t v12 = "_Read";
    uint64_t v13 = 1189;
    uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::SdfLayerOffset]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_2169CAF08((double *)&__p, v16);
  BOOL v7 = sub_216CE6548(a1, __p, v16);
  BOOL v8 = v7;
  if (&__p != a2 && v7) {
    sub_216893FD4((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 4);
  }
  if (__p)
  {
    uint64_t v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_216CE652C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216CE6548(uint64_t a1, _OWORD *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = a1 + 8;
    double v10 = 0.0;
    _18[0] = 0.0;
    BOOL v6 = 0;
    if (sub_216C8B2C8(a1 + 8, 0, (__sFILE *)_18))
    {
      unint64_t v7 = 1;
      do
      {
        if (!sub_216C8B2C8(v5, 0, (__sFILE *)&v10)) {
          break;
        }
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v9, _18[0], v10);
        *a2 = v9;
        if (a3 == v7) {
          return 1;
        }
        ++a2;
        BOOL v6 = v7 >= a3;
        double v10 = 0.0;
        _18[0] = 0.0;
        ++v7;
      }
      while (sub_216C8B2C8(v5, 0, (__sFILE *)_18));
    }
  }
  else
  {
    return 1;
  }
  return v6;
}

uint64_t sub_216CE6610(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C7567E0;
  sub_2169CB460((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216CE66A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_216CE66E0(unsigned int **a1)
{
  double v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169CB334(a1);
}

__n128 sub_216CE677C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7659B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE67C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7659B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE67F8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CE6800(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765A10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE6840()
{
  return &unk_26C765A10;
}

void sub_216CE684C(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v8;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  int v12 = sub_216C688BC();
  sub_216CE68CC(v5, &v9, v3, v4);
}

void sub_216CE68CC(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __sFILE __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((void *)&v6 + 1) = *(void *)(*(void *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_216CE696C((uint64_t)&v6, &__p);
  }
  sub_216CE6378(a4, &__p);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_216CE6950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216CE696C(uint64_t a1, void **a2)
{
  unint64_t __dst = 0;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v5 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    __sFILE __p = "usd/crateFile.cpp";
    int v12 = "_Read";
    uint64_t v13 = 1189;
    uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfLayerOffset]";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_2169CAF08((double *)&__p, __dst);
  BOOL v7 = sub_216CE6A9C(a1, __p, __dst);
  BOOL v8 = v7;
  if (&__p != a2 && v7) {
    sub_216893FD4((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 4);
  }
  if (__p)
  {
    int v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_216CE6A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216CE6A9C(uint64_t a1, _OWORD *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = a1 + 8;
    double v10 = 0.0;
    double __dst = 0.0;
    BOOL v6 = 0;
    if (sub_216C82F78(a1 + 8, &__dst, 8uLL))
    {
      unint64_t v7 = 1;
      do
      {
        if ((sub_216C82F78(v5, &v10, 8uLL) & 1) == 0) {
          break;
        }
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v9, __dst, v10);
        *a2 = v9;
        if (a3 == v7) {
          return 1;
        }
        ++a2;
        BOOL v6 = v7 >= a3;
        double v10 = 0.0;
        double __dst = 0.0;
        ++v7;
      }
      while (sub_216C82F78(v5, &__dst, 8uLL));
    }
  }
  else
  {
    return 1;
  }
  return v6;
}

__n128 sub_216CE6B6C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765A30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE6BB8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765A30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE6BE8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CE6BF0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765A90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE6C30()
{
  return &unk_26C765A90;
}

void sub_216CE6C3C(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CE6CE8(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CE6CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CE6CE8(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __sFILE __p = 0;
  long long v10 = 0;
  uint64_t v11 = 0;
  long long v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *((void *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CE6DB0((uint64_t)&v6, &__p);
    uint64_t v5 = v7;
  }
  if (v5) {
    sub_216784EC4(v5);
  }
  sub_216CE6378(a4, &__p);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_216CE6D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216CE6DB0(uint64_t a1, void **a2)
{
  unint64_t v19 = 0;
  uint64_t v4 = a1 + 8;
  if (!sub_216C804FC((void *)(a1 + 8), (uint64_t)&v19, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __sFILE __p = "usd/crateFile.cpp";
    char v15 = "_Read";
    uint64_t v16 = 1189;
    float v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::SdfLayerOffset]";
    char v18 = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(**(void **)v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_2169CAF08((double *)&__p, v19);
  BOOL v9 = sub_216CE6F34(a1, __p, v19);
  BOOL v10 = v9;
  if (&__p != a2 && v9) {
    sub_216893FD4((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 4);
  }
  if (__p)
  {
    char v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_216CE6F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216CE6F34(uint64_t a1, _OWORD *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = (void *)(a1 + 8);
    double v10 = 0.0;
    double v11 = 0.0;
    BOOL v6 = 0;
    if (sub_216C804FC((void *)(a1 + 8), (uint64_t)&v11, 8uLL))
    {
      unint64_t v7 = 1;
      do
      {
        if ((sub_216C804FC(v5, (uint64_t)&v10, 8uLL) & 1) == 0) {
          break;
        }
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v9, v11, v10);
        *a2 = v9;
        if (a3 == v7) {
          return 1;
        }
        ++a2;
        BOOL v6 = v7 >= a3;
        double v10 = 0.0;
        double v11 = 0.0;
        ++v7;
      }
      while (sub_216C804FC(v5, (uint64_t)&v11, 8uLL));
    }
  }
  else
  {
    return 1;
  }
  return v6;
}

__n128 sub_216CE7004(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765AB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE7050(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765AB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned __int8 *sub_216CE7080(uint64_t a1, uint64_t a2)
{
  return sub_216CE70D4((char ***)(a1 + 8), a2);
}

uint64_t sub_216CE7088(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765B10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE70C8()
{
  return &unk_26C765B10;
}

unsigned __int8 *sub_216CE70D4(char ***a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = (*a1)[791];
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    BOOL v6 = (long long **)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    BOOL v6 = *(long long ***)a2;
  }

  return sub_216CE7140(v3, v2, (char **)v4 + 32, v6);
}

unsigned __int8 *sub_216CE7140(uint64_t *a1, char **a2, char **a3, long long **a4)
{
  v14[0] = a2;
  v14[1] = a3;
  memset(v13, 0, sizeof(v13));
  sub_216812BD8((char *)v13, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  char v15 = (void **)v13;
  sub_216782F20(&v15);
  uint64_t v7 = *a1;
  if (!*a1)
  {
    unint64_t v8 = operator new(0x28uLL);
    *unint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7EFA0(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  char v15 = 0;
  long long v9 = sub_216CE7224(v7, (uint64_t)a4, a4, &v15);
  double v10 = v9;
  if (v11)
  {
    v9[5] = (unsigned __int8 *)((unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x32000000000000);
    sub_216CD0AE4(v14, (unsigned __int8 **)a4);
  }
  return v10[5];
}

unsigned __int8 **sub_216CE7224(uint64_t a1, uint64_t a2, long long **a3, void *a4)
{
  int v25 = 0;
  char v26 = 0;
  sub_216960068((unint64_t)&v25, *(uint64_t **)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * (void)v25);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    uint64_t v13 = *(unsigned __int8 ****)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = (unsigned __int8 **)*i)
      {
        unint64_t v15 = (unint64_t)i[1];
        if (v15 == v9)
        {
          if (sub_216CE759C(a1 + 32, i + 2, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_216CE74E4(a1, v9, a3, a4, (uint64_t)&v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *int v25 = *v22;
    *size_t v22 = (unsigned __int8 *)v25;
  }
  else
  {
    *int v25 = *(unsigned __int8 **)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      unint64_t v23 = *((void *)*v25 + 1);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25;
    }
  }
  i = v25;
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CE74C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_216CE761C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216CE74E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  *((void *)v10 + 3) = 0;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 2) = 0;
  __n128 result = sub_216812BD8((char *)v10 + 16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  *((void *)v10 + 5) = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CE7580(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_216CE761C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_216CE759C(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = *(unsigned __int8 **)a3;
  if (v4 - *a2 != *(void *)(a3 + 8) - *(void *)a3) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  do
  {
    uint64_t result = sub_2168513F8((uint64_t)&v7, v3, v5);
    if (!result) {
      break;
    }
    v3 += 24;
    v5 += 24;
  }
  while (v3 != v4);
  return result;
}

void sub_216CE761C(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 2;
    sub_216782F20(&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

__n128 sub_216CE7670(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765B30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE76BC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765B30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE76EC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  BOOL v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  *(void *)&long long v10 = v6;
  *((void *)&v10 + 1) = v7;
  uint64_t v11 = 0;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  sub_216CE7784(v5, &v10, v3, v4);
}

uint64_t sub_216CE7738(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765B90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE7778()
{
  return &unk_26C765B90;
}

void sub_216CE7784(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  memset(v9, 0, sizeof(v9));
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(void *)&long long v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CD0FF8((uint64_t *)&v6, v9);
  }
  sub_216CE7814(a4, (long long **)v9);
  long long v10 = v9;
  sub_216782F20((void ***)&v10);
}

void sub_216CE77F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v15 - 24) = &a15;
  sub_216782F20((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

long long **sub_216CE7814(pxrInternal__aapl__pxrReserved__::VtValue *a1, long long **a2)
{
  if ((sub_21697E1F8(a1) & 1) == 0)
  {
    memset(v8, 0, sizeof(v8));
    sub_216CE78C4(a1, v8);
    uint64_t v9 = v8;
    sub_216782F20((void ***)&v9);
  }
  __n128 result = sub_216CE7994((long long ***)a1);
  long long v5 = *result;
  *__n128 result = *a2;
  *a2 = v5;
  long long v6 = result[1];
  result[1] = a2[1];
  a2[1] = v6;
  long long v7 = result[2];
  result[2] = a2[2];
  a2[2] = v7;
  return result;
}

void sub_216CE78AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_216CE78C4(void *a1, long long **a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C756898;
  sub_2169CBC44(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216CE7958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

long long **sub_216CE7994(long long ***a1)
{
  double v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, long long ***))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169CBAF8(a1);
}

__n128 sub_216CE7A30(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765BB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE7A7C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765BB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE7AAC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CE7AB4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765C10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE7AF4()
{
  return &unk_26C765C10;
}

void sub_216CE7B00(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  *(void *)&long long v9 = *a1;
  *((void *)&v9 + 1) = v8;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  int v12 = sub_216C688BC();
  sub_216CE7B80(v5, &v9, v3, v4);
}

void sub_216CE7B80(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  memset(v9, 0, sizeof(v9));
  long long v5 = a2[1];
  long long v6 = *a2;
  long long v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((void *)&v6 + 1) = *(void *)(*(void *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_216CD1628((uint64_t)&v6, v9);
  }
  sub_216CE7814(a4, (long long **)v9);
  uint64_t v10 = v9;
  sub_216782F20((void ***)&v10);
}

void sub_216CE7C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v15 - 24) = &a15;
  sub_216782F20((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

__n128 sub_216CE7C28(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765C30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE7C74(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765C30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE7CA4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CE7CAC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765C90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE7CEC()
{
  return &unk_26C765C90;
}

void sub_216CE7CF8(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CE7DA4(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CE7D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CE7DA4(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  memset(v9, 0, sizeof(v9));
  long long v6 = *a2;
  long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *((void *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CD1CB8(&v6, v9);
    long long v5 = v7;
  }
  if (v5) {
    sub_216784EC4(v5);
  }
  sub_216CE7814(a4, (long long **)v9);
  long long v10 = v9;
  sub_216782F20((void ***)&v10);
}

void sub_216CE7E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, char a13)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  *(void *)(v13 - 24) = &a13;
  sub_216782F20((void ***)(v13 - 24));
  _Unwind_Resume(a1);
}

__n128 sub_216CE7E74(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765CB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE7EC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765CB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CE7EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if ((v2 & 4) != 0) {
    (*(void (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  return 0x4033000000000000;
}

uint64_t sub_216CE7F24(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765D10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE7F64()
{
  return &unk_26C765D10;
}

__n128 sub_216CE7F78(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765D30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE7FC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765D30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_216CE7FF4(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_216CE8068(*a3);
}

uint64_t sub_216CE801C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765D90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE805C()
{
  return &unk_26C765D90;
}

void *sub_216CE8068(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_216A5F85C(a1) & 1) == 0)
  {
    uint64_t v2 = *((void *)a1 + 1);
    if (v2) {
      BOOL v3 = (*((void *)a1 + 1) & 3) == 3;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    }
    *((void *)a1 + 1) = (char *)&off_26C75B258 + 3;
  }

  return sub_216C42A50(a1);
}

__n128 sub_216CE80E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765DB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE812C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765DB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_216CE815C(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  BOOL v3 = *a3;
  sub_216C688BC();
  return sub_216CE8068(v3);
}

uint64_t sub_216CE8194(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765E10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE81D4()
{
  return &unk_26C765E10;
}

__n128 sub_216CE81E8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765E30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE8234(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765E30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE8264(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CE826C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765E90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE82AC()
{
  return &unk_26C765E90;
}

void sub_216CE82B8(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  BOOL v3 = *a3;
  uint64_t v4 = *(std::__shared_weak_count **)(*(void *)a1 + 6496);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v4);
  }
  sub_216CE8068(v3);
  if (v4)
  {
    sub_216784EC4(v4);
    sub_216784EC4(v4);
  }
}

void sub_216CE8328(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    sub_216784EC4(v1);
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CE8350(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765EB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE839C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765EB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CE83CC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_216CE842C(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216CE83E0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765F10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE8420()
{
  return &unk_26C765F10;
}

uint64_t sub_216CE842C(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  void v16[2] = *MEMORY[0x263EF8340];
  v13[0] = a2;
  v13[1] = a3;
  sub_2168EE4C4(v16, a4);
  sub_2168EE084((uint64_t)v16);
  uint64_t v7 = *a1;
  if (!*a1)
  {
    uint64_t v8 = operator new(0x28uLL);
    *uint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216AE4064(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  v14[0] = 0;
  long long v9 = sub_216CE8538(v7, a4, a4, v14);
  long long v10 = v9;
  if (v11)
  {
    v9[4] = *a3 & 0xFFFFFFFFFFFFLL | 0x34000000000000;
    v14[0] = v13;
    v14[1] = a4;
    v14[2] = __src;
    sub_216CCCB0C((uint64_t)v13, (uint64_t)v14);
    sub_216C80458((uint64_t)v13, __src);
  }
  return v10[4];
}

void *sub_216CE8538(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this, void *a3, void *a4)
{
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(v15 + 2), (std::type_info *)this, v9))return v15; {
          }
            }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_216CE87C4(a1, v10, a3, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t v15 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216AE459C((uint64_t)v26, 0);
  return v15;
}

void sub_216CE87AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE459C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216CE87C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x28uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  __n128 result = sub_2168EE4C4(v10 + 2, a3);
  v10[4] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CE8838(_Unwind_Exception *a1)
{
  sub_216AE459C(v1, 0);
  _Unwind_Resume(a1);
}

__n128 sub_216CE8858(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765F30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE88A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765F30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CE88D4(uint64_t a1, uint64_t *a2, void **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  long long v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v7;
  uint64_t v12 = 0;
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  return sub_216CE896C(v5, &v11, v3, v4);
}

uint64_t sub_216CE8920(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C765F90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE8960()
{
  return &unk_26C765F90;
}

uint64_t sub_216CE896C(uint64_t a1, long long *a2, uint64_t a3, void *a4)
{
  v10[2] = *MEMORY[0x263EF8340];
  v10[1] = 0;
  long long v5 = a2[1];
  long long v7 = *a2;
  long long v8 = v5;
  uint64_t v9 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(void *)&long long v8 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CCCFAC((uint64_t *)&v7, v10);
  }
  sub_21697DC0C(a4, v10);
  return sub_2168EE084((uint64_t)v10);
}

void sub_216CE8A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CE8A1C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C765FB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE8A68(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C765FB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CE8A98(uint64_t a1, uint64_t *a2, void **a3)
{
  return sub_216CE8AEC((void *)(a1 + 8), a2, a3);
}

uint64_t sub_216CE8AA0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766010)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE8AE0()
{
  return &unk_26C766010;
}

uint64_t sub_216CE8AEC(void *a1, uint64_t *a2, void **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  *(void *)&long long v10 = *a1;
  *((void *)&v10 + 1) = v8;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  int v13 = sub_216C688BC();
  return sub_216CE8B6C(v5, &v10, v3, v4);
}

uint64_t sub_216CE8B6C(uint64_t a1, long long *a2, uint64_t a3, void *a4)
{
  v10[2] = *MEMORY[0x263EF8340];
  v10[1] = 0;
  long long v5 = a2[1];
  long long v7 = *a2;
  long long v8 = v5;
  uint64_t v9 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((void *)&v7 + 1) = *(void *)(*(void *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_216CCDE68((uint64_t)&v7, v10);
  }
  sub_21697DC0C(a4, v10);
  return sub_2168EE084((uint64_t)v10);
}

void sub_216CE8C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CE8C2C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C766030;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE8C78(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C766030;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE8CA8(uint64_t a1, uint64_t *a2, void **a3)
{
}

uint64_t sub_216CE8CB0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766090)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE8CF0()
{
  return &unk_26C766090;
}

void sub_216CE8CFC(uint64_t *a1, uint64_t *a2, void **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CE8DA8(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CE8D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CE8DA8(uint64_t a1, long long *a2, uint64_t a3, void *a4)
{
  v10[2] = *MEMORY[0x263EF8340];
  v10[1] = 0;
  long long v7 = *a2;
  long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
  uint64_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *((void *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CCE4B4((uint64_t *)&v7, v10);
    long long v5 = v8;
  }
  if (v5) {
    sub_216784EC4(v5);
  }
  sub_21697DC0C(a4, v10);
  return sub_2168EE084((uint64_t)v10);
}

void sub_216CE8E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216CE8E88(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7660B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE8ED4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7660B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CE8F04(uint64_t a1, uint64_t a2)
{
  return sub_216CE8F58((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_216CE8F0C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766110)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE8F4C()
{
  return &unk_26C766110;
}

uint64_t sub_216CE8F58(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *(void *)(*a1 + 6328);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                         + 168))(a2);
  else {
    uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  }

  return sub_216CE8FC4(v3, v2, (void *)(v4 + 256), v6);
}

uint64_t sub_216CE8FC4(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  void v16[2] = *MEMORY[0x263EF8340];
  v13[0] = a2;
  v13[1] = a3;
  sub_2168EE4C4(v16, a4);
  sub_2168EE084((uint64_t)v16);
  uint64_t v7 = *a1;
  if (!*a1)
  {
    uint64_t v8 = operator new(0x28uLL);
    *uint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216AE4064(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  v14[0] = 0;
  uint64_t v9 = sub_216CE90D0(v7, a4, a4, v14);
  long long v10 = v9;
  if (v11)
  {
    v9[4] = *a3 & 0xFFFFFFFFFFFFLL | 0x35000000000000;
    v14[0] = v13;
    v14[1] = a4;
    v14[2] = __src;
    sub_216CCCB0C((uint64_t)v13, (uint64_t)v14);
    sub_216C80458((uint64_t)v13, __src);
  }
  return v10[4];
}

void *sub_216CE90D0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this, void *a3, void *a4)
{
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    int v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v14 + 2, this)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_216CE87C4(a1, v9, a3, a4, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t v14 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216AE459C((uint64_t)v25, 0);
  return v14;
}

void sub_216CE9344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE459C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 sub_216CE9364(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C766130;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE93B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C766130;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CE93E0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v7;
  uint64_t v12 = 0;
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  return sub_216CE9478(v5, &v11, v3, v4);
}

uint64_t sub_216CE942C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766190)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE946C()
{
  return &unk_26C766190;
}

uint64_t sub_216CE9478(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  v12[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v12);
  long long v7 = a2[1];
  long long v9 = *a2;
  long long v10 = v7;
  uint64_t v11 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(void *)&long long v10 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CE95E0((uint64_t *)&v9, v12);
  }
  sub_216CE953C(a4, v12);
  return sub_2168EE084((uint64_t)v12);
}

void sub_216CE9520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_216CE953C(pxrInternal__aapl__pxrReserved__::VtValue *a1, void *a2)
{
  double v5[2] = *MEMORY[0x263EF8340];
  if ((sub_21698F348(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v5);
    sub_2169C29AC((uint64_t)a1, v5);
    sub_2168EE084((uint64_t)v5);
  }
  return sub_216CE983C((unsigned int **)a1, a2);
}

void sub_216CE95C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CE95E0(uint64_t *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  if (!sub_216CCCFAC(a1, &v20)) {
    goto LABEL_25;
  }
  if (!sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
  {
    if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        unint64_t v4 = (const void ****)(*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        unint64_t v4 = v20;
      }
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)v18, v4);
      goto LABEL_14;
    }
    if (sub_21698F468((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        uint64_t v7 = (*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        uint64_t v7 = (uint64_t)v20;
      }
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18, v7);
      goto LABEL_14;
    }
    v18[0] = "usd/crateFile.cpp";
    v18[1] = "Read";
    v18[2] = 1362;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::"
             "Usd_CrateFile::_PreadStream>::Read(T &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Pre"
             "adStream, T = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v20, v5, v6, (uint64_t)v16);
    int v9 = v17;
    long long v10 = (void **)v16[0];
    sub_216928738((uint64_t)&v20);
    uint64_t v11 = v16;
    if (v9 < 0) {
      uint64_t v11 = v10;
    }
    if (v15 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfUnregisteredValue in crate file contains invalid type '%s' = '%s'; expected"
                                          " string, VtDictionary or SdfUnregisteredValueListOp; returning empty",
      (const char *)v11,
      p_p);
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18);
    sub_2168ED33C(a2, v18);
    sub_2168EE084((uint64_t)v18);
LABEL_25:
    uint64_t v8 = 0;
    goto LABEL_26;
  }
  if ((v21 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
  }
  else {
    uint64_t v3 = (uint64_t)v20;
  }
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18, v3);
LABEL_14:
  sub_2168ED33C(a2, v18);
  sub_2168EE084((uint64_t)v18);
  uint64_t v8 = 1;
LABEL_26:
  sub_2168EE084((uint64_t)&v20);
  return v8;
}

void sub_216CE97E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_216CE983C(unsigned int **a1, void *a2)
{
  double v5[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = sub_216CE98C4(a1);
  sub_2168EDFA8(v5, v3);
  sub_2168ED33C(v3, a2);
  sub_2168ED33C(a2, v5);
  return sub_2168EE084((uint64_t)v5);
}

unsigned int *sub_216CE98C4(unsigned int **a1)
{
  double v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169C3ACC(a1);
}

__n128 sub_216CE9960(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7661B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE99AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7661B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CE99DC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_216CE9A30((void *)(a1 + 8), a2, a3);
}

uint64_t sub_216CE99E4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766210)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE9A24()
{
  return &unk_26C766210;
}

uint64_t sub_216CE9A30(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  *(void *)&long long v10 = *a1;
  *((void *)&v10 + 1) = v8;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  int v13 = sub_216C688BC();
  return sub_216CE9AB0(v5, &v10, v3, v4);
}

uint64_t sub_216CE9AB0(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  v12[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v12);
  long long v7 = a2[1];
  long long v9 = *a2;
  long long v10 = v7;
  uint64_t v11 = *((void *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((void *)&v9 + 1) = *(void *)(*(void *)v10 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_216CE9B84((uint64_t)&v9, v12);
  }
  sub_216CE953C(a4, v12);
  return sub_2168EE084((uint64_t)v12);
}

void sub_216CE9B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_216CE9B84(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  if ((sub_216CCDE68(a1, &v20) & 1) == 0) {
    goto LABEL_25;
  }
  if (!sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
  {
    if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        unint64_t v4 = (const void ****)(*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        unint64_t v4 = v20;
      }
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)v18, v4);
      goto LABEL_14;
    }
    if (sub_21698F468((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        uint64_t v7 = (*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        uint64_t v7 = (uint64_t)v20;
      }
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18, v7);
      goto LABEL_14;
    }
    v18[0] = "usd/crateFile.cpp";
    v18[1] = "Read";
    v18[2] = 1362;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::"
             "Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::Re"
             "ad(T &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
             "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v20, v5, v6, (uint64_t)v16);
    int v9 = v17;
    long long v10 = (void **)v16[0];
    sub_216928738((uint64_t)&v20);
    uint64_t v11 = v16;
    if (v9 < 0) {
      uint64_t v11 = v10;
    }
    if (v15 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfUnregisteredValue in crate file contains invalid type '%s' = '%s'; expected"
                                          " string, VtDictionary or SdfUnregisteredValueListOp; returning empty",
      (const char *)v11,
      p_p);
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18);
    sub_2168ED33C(a2, v18);
    sub_2168EE084((uint64_t)v18);
LABEL_25:
    uint64_t v8 = 0;
    goto LABEL_26;
  }
  if ((v21 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
  }
  else {
    uint64_t v3 = (uint64_t)v20;
  }
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18, v3);
LABEL_14:
  sub_2168ED33C(a2, v18);
  sub_2168EE084((uint64_t)v18);
  uint64_t v8 = 1;
LABEL_26:
  sub_2168EE084((uint64_t)&v20);
  return v8;
}

void sub_216CE9D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

__n128 sub_216CE9DE8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C766230;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CE9E34(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C766230;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CE9E64(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CE9E6C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766290)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CE9EAC()
{
  return &unk_26C766290;
}

void sub_216CE9EB8(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  int v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CE9F64(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CE9F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CE9F64(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  v12[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v12);
  long long v9 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a2 + 2);
  long long v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *((void *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
    sub_216CEA060((uint64_t *)&v9, v12);
    uint64_t v7 = v10;
  }
  if (v7) {
    sub_216784EC4(v7);
  }
  sub_216CE953C(a4, v12);
  return sub_2168EE084((uint64_t)v12);
}

void sub_216CEA030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CEA060(uint64_t *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  if ((sub_216CCE4B4(a1, &v20) & 1) == 0) {
    goto LABEL_25;
  }
  if (!sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
  {
    if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        uint64_t v4 = (const void ****)(*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        uint64_t v4 = v20;
      }
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)v18, v4);
      goto LABEL_14;
    }
    if (sub_21698F468((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0) {
        uint64_t v7 = (*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      }
      else {
        uint64_t v7 = (uint64_t)v20;
      }
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18, v7);
      goto LABEL_14;
    }
    v18[0] = "usd/crateFile.cpp";
    v18[1] = "Read";
    v18[2] = 1362;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::"
             "Usd_CrateFile::_AssetStream>::Read(T &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Ass"
             "etStream, T = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v20, v5, v6, (uint64_t)v16);
    int v9 = v17;
    long long v10 = (void **)v16[0];
    sub_216928738((uint64_t)&v20);
    uint64_t v11 = v16;
    if (v9 < 0) {
      uint64_t v11 = v10;
    }
    if (v15 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfUnregisteredValue in crate file contains invalid type '%s' = '%s'; expected"
                                          " string, VtDictionary or SdfUnregisteredValueListOp; returning empty",
      (const char *)v11,
      p_p);
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18);
    sub_2168ED33C(a2, v18);
    sub_2168EE084((uint64_t)v18);
LABEL_25:
    uint64_t v8 = 0;
    goto LABEL_26;
  }
  if ((v21 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
  }
  else {
    uint64_t v3 = (uint64_t)v20;
  }
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18, v3);
LABEL_14:
  sub_2168ED33C(a2, v18);
  sub_2168EE084((uint64_t)v18);
  uint64_t v8 = 1;
LABEL_26:
  sub_2168EE084((uint64_t)&v20);
  return v8;
}

void sub_216CEA264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_2168EE084(v22 - 56);
  _Unwind_Resume(a1);
}

__n128 sub_216CEA2C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7662B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CEA310(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7662B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CEA340(uint64_t a1, uint64_t a2)
{
  return sub_216CEA394((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_216CEA348(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766310)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CEA388()
{
  return &unk_26C766310;
}

uint64_t sub_216CEA394(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = *(void *)(*a1 + 6328);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v6 = *(unsigned __int8 **)a2;
  }

  return sub_216CEA400(v3, v2, (void *)(v4 + 256), v6);
}

uint64_t sub_216CEA400(uint64_t *a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  v20[0] = a2;
  v20[1] = a3;
  sub_2169E2B3C((uint64_t)&v13, (uint64_t)a4);
  uint64_t v21 = (void **)&v19;
  sub_216932118(&v21);
  uint64_t v21 = (void **)&v18;
  sub_216932118(&v21);
  uint64_t v21 = (void **)&v17;
  sub_216932118(&v21);
  uint64_t v21 = (void **)&v16;
  sub_216932118(&v21);
  uint64_t v21 = (void **)&v15;
  sub_216932118(&v21);
  uint64_t v21 = (void **)&v14;
  sub_216932118(&v21);
  uint64_t v7 = *a1;
  if (!*a1)
  {
    uint64_t v8 = operator new(0x28uLL);
    *uint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7F540(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  uint64_t v21 = 0;
  uint64_t v9 = sub_216CEA654(v7, a4, (uint64_t)a4, &v21);
  uint64_t v10 = v9;
  if (v11)
  {
    *(void *)(v9 + 168) = *a3 & 0xFFFFFFFFFFFFLL | 0x36000000000000;
    sub_216CEA51C((uint64_t)v20, (uint64_t *)a4);
  }
  return *(void *)(v10 + 168);
}

uint64_t sub_216CEA51C(uint64_t a1, uint64_t *a2)
{
  sub_216CCEF5C(&__src, (uint64_t)a2);
  if ((__src & 0x60) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)a1 + 6328);
    sub_216779094(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_216CCED74(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = sub_216CA3630(a1, &__src);
  char v6 = __src;
  if ((__src & 2) != 0)
  {
    uint64_t result = sub_216CEA9F0(a1, a2 + 1);
    char v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  uint64_t result = sub_216CEA9F0(a1, a2 + 4);
  char v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = sub_216CEA9F0(a1, a2 + 7);
  char v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = sub_216CEA9F0(a1, a2 + 10);
  char v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return sub_216CEA9F0(a1, a2 + 16);
  }
LABEL_16:
  uint64_t result = sub_216CEA9F0(a1, a2 + 13);
  if ((__src & 0x10) == 0) {
    return result;
  }
  return sub_216CEA9F0(a1, a2 + 16);
}

void sub_216CEA638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CEA654(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = 0;
  char v25 = 0;
  sub_216B924F0((uint64_t)&v24, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v24));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    char v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8) {
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==();
          }
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_216CEA90C(a1, v8, a3, a4, (uint64_t)&v24);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v24 = *v20;
    void *v20 = v24;
  }
  else
  {
    *(void *)uint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24)
    {
      unint64_t v21 = *(void *)(*(void *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v21 >= v9) {
          v21 %= v9;
        }
      }
      else
      {
        v21 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v24;
    }
  }
  uint64_t v22 = v24;
  uint64_t v24 = 0;
  ++*(void *)(a1 + 24);
  sub_216CEA998((uint64_t)&v24, 0);
  return v22;
}

void sub_216CEA8F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CEA998((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CEA90C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint8x8_t v10 = operator new(0xB0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint8x8_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_2169E2B3C((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CEA980(_Unwind_Exception *a1)
{
  sub_216CEA998(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216CEA998(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C7F600(v2 + 2);
    }
    operator delete(v2);
  }
}

uint64_t sub_216CEA9F0(uint64_t a1, uint64_t *a2)
{
  uint64_t __src = (a2[1] - *a2) >> 4;
  sub_216C80458(a1, (char *)&__src);
  return sub_216CEAA40(*a2, a2[1], a1);
}

uint64_t sub_216CEAA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      v7[0] = a3;
      v7[1] = v5;
      v7[2] = __src;
      sub_216CCCB0C(a3, (uint64_t)v7);
      sub_216C80458(a3, __src);
      v5 += 16;
    }
    while (v5 != a2);
  }
  return a3;
}

__n128 sub_216CEAABC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C766330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CEAB08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C766330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CEAB38()
{
}

uint64_t sub_216CEAB84(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766390)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CEABC4()
{
  return &unk_26C766390;
}

void sub_216CEABD0()
{
}

void sub_216CEACA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169D3664((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CEACBC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_21698F468(a1) & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp();
  }
  sub_216CEB3CC((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::Swap();
}

void sub_216CEAD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_216CEAD94()
{
}

void sub_216CEB008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_216932118((void ***)(v6 - 40));
  sub_2169D3664((void **)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_216CEB044(unsigned char *a1, uint64_t a2)
{
  *a1 = *(unsigned char *)a2;
  if (a1 != (unsigned char *)a2)
  {
    sub_216AE3120((uint64_t)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
    sub_216AE3120((uint64_t)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
    sub_216AE3120((uint64_t)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
    sub_216AE3120((uint64_t)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 4);
    sub_216AE3120((uint64_t)(a1 + 104), *(void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4);
    sub_216AE3120((uint64_t)(a1 + 128), *(void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 4);
  }
  return a1;
}

uint64_t sub_216CEB0F8(uint64_t *a1, char **a2)
{
  unint64_t v18 = 0;
  if (!sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&v18)) {
    return 0;
  }
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v18 > v6)
  {
    unint64_t v13 = "usd/crateFile.cpp";
    float v14 = "_Read";
    uint64_t v15 = 1189;
    BOOL v16 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue]";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v18, v6, v4);
    return 0;
  }
  sub_216CEB264(&v13, v18);
  unint64_t v7 = v18;
  if (!v18) {
    goto LABEL_10;
  }
  BOOL v8 = 0;
  unint64_t v9 = 0;
  uint8x8_t v10 = v13;
  do
  {
    if (!sub_216CE95E0(a1, v10)) {
      break;
    }
    ++v9;
    v10 += 16;
    BOOL v8 = v9 >= v7;
  }
  while (v7 != v9);
  if (!v8)
  {
    uint64_t v11 = 0;
  }
  else
  {
LABEL_10:
    if (&v13 != a2) {
      sub_216AE3120((uint64_t)a2, v13, (uint64_t)v14, (v14 - v13) >> 4);
    }
    uint64_t v11 = 1;
  }
  size_t v19 = &v13;
  sub_216932118((void ***)&v19);
  return v11;
}

void sub_216CEB244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_216932118(&a18);
  _Unwind_Resume(a1);
}

void *sub_216CEB264(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21682BF78(a1, a2);
    uint64_t v4 = a1[1];
    unint64_t v5 = v4 + 16 * a2;
    uint64_t v6 = 16 * a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(v4);
      v4 += 16;
      v6 -= 16;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_216CEB2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_216CEB2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C75B0C8;
  sub_216B92898((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216CEB390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CEB3CC(uint64_t *a1)
{
  double v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216B9280C(a1);
}

__n128 sub_216CEB468(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7663B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CEB4B4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7663B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CEB4E4()
{
}

uint64_t sub_216CEB4EC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766410)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CEB52C()
{
  return &unk_26C766410;
}

void sub_216CEB538()
{
}

void sub_216CEB5B8()
{
}

void sub_216CEB6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169D3664((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CEB6B4()
{
}

void sub_216CEB928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_216932118((void ***)(v6 - 40));
  sub_2169D3664((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CEB964(uint64_t a1, char **a2)
{
  unint64_t __dst = 0;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v5 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    unint64_t v13 = "usd/crateFile.cpp";
    float v14 = "_Read";
    uint64_t v15 = 1189;
    BOOL v16 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue]";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_216CEB264(&v13, __dst);
  unint64_t v7 = __dst;
  if (!__dst) {
    goto LABEL_10;
  }
  BOOL v8 = 0;
  unint64_t v9 = 0;
  uint8x8_t v10 = v13;
  do
  {
    if (!sub_216CE9B84(a1, v10)) {
      break;
    }
    ++v9;
    v10 += 16;
    BOOL v8 = v9 >= v7;
  }
  while (v7 != v9);
  if (!v8)
  {
    uint64_t v11 = 0;
  }
  else
  {
LABEL_10:
    if (&v13 != a2) {
      sub_216AE3120((uint64_t)a2, v13, (uint64_t)v14, (v14 - v13) >> 4);
    }
    uint64_t v11 = 1;
  }
  size_t v19 = &v13;
  sub_216932118((void ***)&v19);
  return v11;
}

void sub_216CEBABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_216932118(&a18);
  _Unwind_Resume(a1);
}

__n128 sub_216CEBAE4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C766430;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CEBB30(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C766430;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CEBB60(uint64_t a1)
{
}

uint64_t sub_216CEBB68(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766490)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CEBBA8()
{
  return &unk_26C766490;
}

void sub_216CEBBB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 6496);
  if (v1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216CEBC60();
}

void sub_216CEBC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CEBC60()
{
}

void sub_216CEBD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2169D3664((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CEBD84()
{
}

void sub_216CEBFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_216932118((void ***)(v6 - 40));
  sub_2169D3664((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CEC034(uint64_t *a1, char **a2)
{
  unint64_t v21 = 0;
  uint64_t v4 = a1 + 1;
  if (!sub_216C804FC(a1 + 1, (uint64_t)&v21, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 16))(a1[1]);
  uint64_t v6 = a1[3];
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v21;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v21 > v7)
  {
    BOOL v16 = "usd/crateFile.cpp";
    char v17 = "_Read";
    uint64_t v18 = 1189;
    size_t v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue]";
    char v20 = 0;
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v14);
    return 0;
  }
  sub_216CEB264(&v16, v21);
  unint64_t v9 = v21;
  if (!v21) {
    goto LABEL_10;
  }
  BOOL v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = v16;
  do
  {
    if (!sub_216CEA060(a1, v12)) {
      break;
    }
    ++v11;
    v12 += 16;
    BOOL v10 = v11 >= v9;
  }
  while (v9 != v11);
  if (!v10)
  {
    uint64_t v13 = 0;
  }
  else
  {
LABEL_10:
    if (&v16 != a2) {
      sub_216AE3120((uint64_t)a2, v16, (uint64_t)v17, (v17 - v16) >> 4);
    }
    uint64_t v13 = 1;
  }
  uint64_t v22 = &v16;
  sub_216932118((void ***)&v22);
  return v13;
}

void sub_216CEC1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_216932118(&a18);
  _Unwind_Resume(a1);
}

__n128 sub_216CEC200(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7664B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CEC24C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7664B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216CEC27C(uint64_t a1, uint64_t a2)
{
  return sub_216CEC2D0((char ***)(a1 + 8), a2);
}

uint64_t sub_216CEC284(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766510)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CEC2C4()
{
  return &unk_26C766510;
}

uint64_t sub_216CEC2D0(char ***a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  uint64_t v4 = (*a1)[791];
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 4) != 0) {
    uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v6 = *(unsigned __int8 **)a2;
  }

  return sub_216CEC33C(v3, v2, (char **)v4 + 32, v6);
}

uint64_t sub_216CEC33C(uint64_t *a1, char **a2, char **a3, unsigned __int8 *a4)
{
  v20[0] = a2;
  v20[1] = a3;
  sub_2169DA0D8((uint64_t)&v13, (uint64_t)a4);
  unint64_t v21 = (void **)&v19;
  sub_2169CC78C(&v21);
  unint64_t v21 = (void **)&v18;
  sub_2169CC78C(&v21);
  unint64_t v21 = (void **)&v17;
  sub_2169CC78C(&v21);
  unint64_t v21 = (void **)&v16;
  sub_2169CC78C(&v21);
  unint64_t v21 = (void **)&v15;
  sub_2169CC78C(&v21);
  unint64_t v21 = (void **)&v14;
  sub_2169CC78C(&v21);
  uint64_t v7 = *a1;
  if (!*a1)
  {
    unint64_t v8 = operator new(0x28uLL);
    *unint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7F86C(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  unint64_t v21 = 0;
  uint64_t v9 = sub_216CEC4EC(v7, a4, (uint64_t)a4, &v21);
  uint64_t v10 = v9;
  if (v11)
  {
    *(void *)(v9 + 168) = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x37000000000000;
    sub_216CEC458(v20, (uint64_t *)a4);
  }
  return *(void *)(v10 + 168);
}

uint64_t sub_216CEC458(char ***a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t)(*a1)[791];
  sub_216779094(__p, "A SdfPayloadListOp value was detected which requires crate version 0.8.0.");
  sub_216CCED74(v4, (const char *)0x800, (char *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return sub_216CEC888(a1, a2);
}

void sub_216CEC4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CEC4EC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v24 = 0;
  char v25 = 0;
  sub_2169DA678((unint64_t)&v24, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v24));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    char v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8) {
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==();
          }
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_216CEC7A4(a1, v8, a3, a4, (uint64_t)&v24);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  char v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v24 = *v20;
    void *v20 = v24;
  }
  else
  {
    *(void *)uint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24)
    {
      unint64_t v21 = *(void *)(*(void *)v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v21 >= v9) {
          v21 %= v9;
        }
      }
      else
      {
        v21 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v24;
    }
  }
  uint64_t v22 = v24;
  uint64_t v24 = 0;
  ++*(void *)(a1 + 24);
  sub_216CEC830((uint64_t)&v24, 0);
  return v22;
}

void sub_216CEC78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CEC830((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CEC7A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint8x8_t v10 = operator new(0xB0uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint8x8_t v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_2169DA0D8((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CEC818(_Unwind_Exception *a1)
{
  sub_216CEC830(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216CEC830(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216C7F92C(v2 + 2);
    }
    operator delete(v2);
  }
}

uint64_t sub_216CEC888(char ***a1, uint64_t *a2)
{
  sub_216CCEF5C(&__src, (uint64_t)a2);
  if ((__src & 0x60) != 0)
  {
    uint64_t v4 = (uint64_t)(*a1)[791];
    sub_216779094(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_216CCED74(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t result = sub_216CA3630((uint64_t)a1, &__src);
  char v6 = __src;
  if ((__src & 2) != 0)
  {
    uint64_t result = sub_216CEC9C0(a1, a2 + 1);
    char v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  uint64_t result = sub_216CEC9C0(a1, a2 + 4);
  char v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = sub_216CEC9C0(a1, a2 + 7);
  char v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = sub_216CEC9C0(a1, a2 + 10);
  char v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0) {
      return result;
    }
    return sub_216CEC9C0(a1, a2 + 16);
  }
LABEL_16:
  uint64_t result = sub_216CEC9C0(a1, a2 + 13);
  if ((__src & 0x10) == 0) {
    return result;
  }
  return sub_216CEC9C0(a1, a2 + 16);
}

void sub_216CEC9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CEC9C0(char ***a1, uint64_t *a2)
{
  unint64_t __src = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
  uint64_t result = sub_216C80458((uint64_t)a1, (char *)&__src);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1] - *a2;
  if (v6)
  {
    uint64_t v7 = 48 * (v6 / 48);
    do
    {
      uint64_t result = sub_216CE33C0(a1, v5);
      v5 += 48;
      v7 -= 48;
    }
    while (v7);
  }
  return result;
}

__n128 sub_216CECA64(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C766530;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CECAB0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C766530;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CECAE0()
{
}

uint64_t sub_216CECB2C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766590)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CECB6C()
{
  return &unk_26C766590;
}

void sub_216CECB78()
{
}

void sub_216CECC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169D8044((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CECC64()
{
}

void sub_216CECED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_2169CC78C((void ***)(v6 - 40));
  sub_2169D8044((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CECF14(uint64_t *a1, std::string **a2)
{
  unint64_t v18 = 0;
  if (!sub_216C8B2C8((uint64_t)(a1 + 1), 0, (__sFILE *)&v18)) {
    return 0;
  }
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v18 > v6)
  {
    unint64_t v13 = (std::string *)"usd/crateFile.cpp";
    float v14 = (std::string *)"_Read";
    uint64_t v15 = 1189;
    BOOL v16 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::SdfPayload]";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v18, v6, v4);
    return 0;
  }
  sub_216CED08C(&v13, v18);
  unint64_t v7 = v18;
  if (!v18) {
    goto LABEL_10;
  }
  BOOL v8 = 0;
  unint64_t v9 = 0;
  uint8x8_t v10 = v13;
  do
  {
    if (!sub_216CE3BE4(a1, (uint64_t)v10)) {
      break;
    }
    ++v9;
    v10 += 2;
    BOOL v8 = v9 >= v7;
  }
  while (v7 != v9);
  if (!v8)
  {
    uint64_t v11 = 0;
  }
  else
  {
LABEL_10:
    if (&v13 != a2) {
      sub_216A99C60((uint64_t)a2, v13, v14, 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v13) >> 4));
    }
    uint64_t v11 = 1;
  }
  size_t v19 = &v13;
  sub_2169CC78C((void ***)&v19);
  return v11;
}

void sub_216CED06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_2169CC78C(&a18);
  _Unwind_Resume(a1);
}

void *sub_216CED08C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2169D8290(a1, a2);
    sub_216CED0F8((uint64_t)a1, a2);
  }
  return a1;
}

void sub_216CED0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216CED0F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = v3 + 48 * a2;
    uint64_t v5 = 48 * a2;
    do
    {
      sub_216CED16C(a1 + 16, v3);
      v3 += 48;
      v5 -= 48;
    }
    while (v5);
    uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3;
}

void sub_216CED164(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216CED16C(uint64_t a1, uint64_t a2)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v4 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v3, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(a2, __p, &v4, v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v4 + 1);
  sub_21697C414(&v4);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216CED208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_216CED234(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7665B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CED280(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7665B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CED2B0()
{
}

uint64_t sub_216CED2B8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766610)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CED2F8()
{
  return &unk_26C766610;
}

void sub_216CED304()
{
}

void sub_216CED384()
{
}

void sub_216CED46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169D8044((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CED480()
{
}

void sub_216CED6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_2169CC78C((void ***)(v6 - 40));
  sub_2169D8044((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CED730(uint64_t a1, std::string **a2)
{
  unint64_t __dst = 0;
  if (!sub_216C82F78(a1 + 8, &__dst, 8uLL)) {
    return 0;
  }
  uint64_t v4 = *(void *)(**(void **)(a1 + 16) + 32);
  uint64_t v5 = *(void *)(a1 + 8) - *(void *)(**(void **)(a1 + 16) + 24);
  unint64_t v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    unint64_t v13 = (std::string *)"usd/crateFile.cpp";
    float v14 = (std::string *)"_Read";
    uint64_t v15 = 1189;
    BOOL v16 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfPayload]";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_216CED08C(&v13, __dst);
  unint64_t v7 = __dst;
  if (!__dst) {
    goto LABEL_10;
  }
  BOOL v8 = 0;
  unint64_t v9 = 0;
  uint8x8_t v10 = v13;
  do
  {
    if (!sub_216CE4330((uint64_t *)a1, (uint64_t)v10)) {
      break;
    }
    ++v9;
    v10 += 2;
    BOOL v8 = v9 >= v7;
  }
  while (v7 != v9);
  if (!v8)
  {
    uint64_t v11 = 0;
  }
  else
  {
LABEL_10:
    if (&v13 != a2) {
      sub_216A99C60((uint64_t)a2, v13, v14, 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v13) >> 4));
    }
    uint64_t v11 = 1;
  }
  size_t v19 = &v13;
  sub_2169CC78C((void ***)&v19);
  return v11;
}

void sub_216CED894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_2169CC78C(&a18);
  _Unwind_Resume(a1);
}

__n128 sub_216CED8BC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C766630;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CED908(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C766630;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CED938(uint64_t a1)
{
}

uint64_t sub_216CED940(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766690)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CED980()
{
  return &unk_26C766690;
}

void sub_216CED98C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 6496);
  if (v1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  sub_216CEDA38();
}

void sub_216CEDA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CEDA38()
{
}

void sub_216CEDB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2169D8044((void **)va);
  _Unwind_Resume(a1);
}

void sub_216CEDB5C()
{
}

void sub_216CEDDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v6 - 40) = v5;
  sub_2169CC78C((void ***)(v6 - 40));
  sub_2169D8044((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CEDE0C(void *a1, std::string **a2)
{
  unint64_t v21 = 0;
  uint64_t v4 = a1 + 1;
  if (!sub_216C804FC(a1 + 1, (uint64_t)&v21, 8uLL)) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)a1[1] + 16))(a1[1]);
  uint64_t v6 = a1[3];
  unint64_t v7 = v5 - v6;
  unint64_t v8 = v21;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v21 > v7)
  {
    BOOL v16 = (std::string *)"usd/crateFile.cpp";
    char v17 = (std::string *)"_Read";
    uint64_t v18 = 1189;
    size_t v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::SdfPayload]";
    char v20 = 0;
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*v4 + 16))();
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v14);
    return 0;
  }
  sub_216CED08C(&v16, v21);
  unint64_t v9 = v21;
  if (!v21) {
    goto LABEL_10;
  }
  BOOL v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = v16;
  do
  {
    if (!sub_216CE496C(a1, (uint64_t)v12)) {
      break;
    }
    ++v11;
    v12 += 2;
    BOOL v10 = v11 >= v9;
  }
  while (v9 != v11);
  if (!v10)
  {
    uint64_t v13 = 0;
  }
  else
  {
LABEL_10:
    if (&v16 != a2) {
      sub_216A99C60((uint64_t)a2, v16, v17, 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v16) >> 4));
    }
    uint64_t v13 = 1;
  }
  uint64_t v22 = &v16;
  sub_2169CC78C((void ***)&v22);
  return v13;
}

void sub_216CEDFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_2169CC78C(&a18);
  _Unwind_Resume(a1);
}

__n128 sub_216CEDFE4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7666B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CEE030(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7666B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CEE060(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_216CEE0C0(*(uint64_t **)(a1 + 16), *(void *)(a1 + 8), (void *)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216CEE074(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766710)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CEE0B4()
{
  return &unk_26C766710;
}

unint64_t sub_216CEE0C0(uint64_t *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v4 = this;
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      BOOL v10 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    else {
      BOOL v10 = *(unint64_t **)v4;
    }
    return sub_216CEE1EC((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    v18[0] = a2;
    v18[1] = a3;
    uint64_t v12 = *a1;
    if (!*a1)
    {
      uint64_t v13 = operator new(0x28uLL);
      *uint64_t v13 = 0u;
      v13[1] = 0u;
      *((_DWORD *)v13 + 8) = 1065353216;
      sub_2168CAEA8(a1, (uint64_t)v13);
      uint64_t v12 = *a1;
    }
    uint64_t v17 = 0;
    uint64_t v14 = sub_216CEE764(v12, (double *)v4, (double *)v4, &v17);
    uint64_t v15 = v14;
    if (v16)
    {
      *((void *)v14 + 3) = *a3 & 0xFFFFFFFFFFFFLL | 0x38000000000000;
      sub_216CEE6C8((uint64_t)v18, (uint64_t *)v4);
    }
    return *((void *)v15 + 3);
  }
}

unint64_t sub_216CEE1EC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  v25[0] = a2;
  v25[1] = a3;
  unint64_t result = 0x8038000000000000;
  unint64_t v24 = 0x8038000000000000;
  if (*a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    BOOL v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7F9B4(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    uint64_t v13 = sub_216CEE3A0(v9, a4, (uint64_t)a4, &v24);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v19 = *(unsigned __int16 *)(v15 + 248);
        v26[0] = a2;
        v26[1] = a3;
        uint64_t v20 = sub_216C98168((uint64_t)v26, 8);
        if (((v19 | (v19 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          unint64_t __src = *a4;
          sub_216C80458((uint64_t)v26, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *a4;
          sub_216C984FC((uint64_t)v26, (char *)&__src);
        }
        unint64_t v21 = *a4;
        if (*a4)
        {
          uint64_t v22 = (uint64_t *)a4[4];
          uint64_t v23 = 8 * v21;
          do
          {
            sub_216CEE6C8((uint64_t)v26, v22++);
            v23 -= 8;
          }
          while (v23);
        }
        v13[7] = v20 & 0xFFFFFFFFFFFFLL | 0x8038000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v25, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v26[0]) = 1;
        sub_216C984FC((uint64_t)v25, (char *)v26);
        LODWORD(v26[0]) = *a4;
        sub_216C984FC((uint64_t)v25, (char *)v26);
        unint64_t v16 = *a4;
        if (*a4)
        {
          uint64_t v17 = (uint64_t *)a4[4];
          uint64_t v18 = 8 * v16;
          do
          {
            sub_216CEE6C8((uint64_t)v25, v17++);
            v18 -= 8;
          }
          while (v18);
        }
      }
    }
    return v13[7];
  }
  return result;
}

void *sub_216CEE3A0(uint64_t a1, unint64_t *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = *a2;
  if (*a2)
  {
    BOOL v10 = (double *)a2[4];
    unint64_t v11 = *a2;
    do
    {
      double v12 = *v10++;
      double v13 = v12;
      if (v12 == 0.0) {
        double v13 = 0.0;
      }
      unint64_t v9 = *(void *)&v13 + ((*(void *)&v13 + v9 + (*(void *)&v13 + v9) * (*(void *)&v13 + v9)) >> 1);
      --v11;
    }
    while (v11);
    v9 *= 0x9E3779B97F4A7C55;
  }
  unint64_t v14 = bswap64(v9);
  unint64_t v15 = *(void *)(a1 + 8);
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    unint64_t v17 = v16.u32[0];
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v4 = v14;
      if (v14 >= v15) {
        unint64_t v4 = v14 % v15;
      }
    }
    else
    {
      unint64_t v4 = (v15 - 1) & v14;
    }
    uint64_t v18 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v18)
    {
      for (i = *v18; i; i = (void *)*i)
      {
        unint64_t v20 = i[1];
        if (v20 == v14)
        {
          if (sub_2168FA278(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v17 > 1)
          {
            if (v20 >= v15) {
              v20 %= v15;
            }
          }
          else
          {
            v20 &= v15 - 1;
          }
          if (v20 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v21 = (void *)(a1 + 16);
  uint64_t v22 = operator new(0x40uLL);
  i = v22;
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = v14;
  long long v23 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v22 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v22 + 2) = v23;
  uint64_t v24 = *(void *)(a3 + 32);
  *((void *)v22 + 6) = v24;
  if (v24)
  {
    char v25 = (atomic_ullong *)(v24 - 16);
    if (*((void *)v22 + 5)) {
      char v25 = (atomic_ullong *)*((void *)v22 + 5);
    }
    atomic_fetch_add_explicit(v25, 1uLL, memory_order_relaxed);
  }
  *((void *)v22 + 7) = *a4;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v15 || (float)(v27 * (float)v15) < v26)
  {
    BOOL v28 = 1;
    if (v15 >= 3) {
      BOOL v28 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v15);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t v31 = v30;
    }
    else {
      size_t v31 = v29;
    }
    sub_21678A04C(a1, v31);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        unint64_t v4 = v14 % v15;
      }
      else {
        unint64_t v4 = v14;
      }
    }
    else
    {
      unint64_t v4 = (v15 - 1) & v14;
    }
  }
  uint64_t v32 = *(void *)a1;
  v33 = *(void **)(*(void *)a1 + 8 * v4);
  if (v33)
  {
    void *i = *v33;
LABEL_48:
    void *v33 = i;
    goto LABEL_49;
  }
  void *i = *v21;
  *unint64_t v21 = i;
  *(void *)(v32 + 8 * v4) = v21;
  if (*i)
  {
    unint64_t v34 = *(void *)(*i + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v34 >= v15) {
        v34 %= v15;
      }
    }
    else
    {
      v34 &= v15 - 1;
    }
    v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_48;
  }
LABEL_49:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CEE654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_216CEE670(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216CEE670(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2168F83DC((uint64_t)__p + 16);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t sub_216CEE6C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 6328);
  sub_216779094(__p, "A timecode or timecode[] value type was detected which requires crate version 0.9.0.");
  sub_216CCED74(v4, (const char *)0x900, (char *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *a2;
  return sub_216C80458(a1, (char *)&v6);
}

void sub_216CEE748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double *sub_216CEE764(uint64_t a1, double *a2, double *a3, uint64_t *a4)
{
  unint64_t v8 = 0x9E3779B97F4A7C55 * *(void *)a2;
  if (*a2 == 0.0) {
    unint64_t v8 = 0;
  }
  unint64_t v9 = bswap64(v8);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    double v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      double v13 = (double *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          double v13 = *(double **)v13;
        }
        while (v13);
      }
    }
  }
  double v13 = (double *)operator new(0x20uLL);
  *double v13 = 0.0;
  *((void *)v13 + 1) = v9;
  uint64_t v15 = *a4;
  void v13[2] = *a3;
  *((void *)v13 + 3) = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  long long v23 = *(double ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)double v13 = *v23;
LABEL_40:
    *long long v23 = v13;
    goto LABEL_41;
  }
  *double v13 = *(double *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v24 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    long long v23 = (double **)(*(void *)a1 + 8 * v24);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_216CEE9A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216CEE9BC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C766730;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CEEA08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C766730;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CEEA38(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  void v10[3] = v8;
  v10[4] = v9;
  sub_216CEEAD0(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CEEA84(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766790)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CEEAC4()
{
  return &unk_26C766790;
}

void sub_216CEEAD0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    long long v7 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v7;
    uint64_t v10 = *(void *)(a2 + 32);
    sub_216CEEB9C(a1, v9, a3, (uint64_t)v11);
    sub_216B8D734(a4, v11);
    sub_2168F83DC((uint64_t)v11);
  }
  else
  {
    unint64_t v8 = 0;
    if ((a3 & 0x4000000000000000) == 0)
    {
      uint64_t v5 = *(FILE **)(a2 + 32);
      uint64_t v6 = *(void *)(a2 + 8);
      v11[0].n128_u64[0] = 0;
      if (pxrInternal__aapl__pxrReserved__::ArchPRead(v5, (__sFILE *)v11, (char *)8, v6 + (a3 & 0xFFFFFFFFFFFFLL)) != -1) {
        unint64_t v8 = v11[0].n128_u64[0];
      }
    }
    sub_216B8D6D8(a4, (double *)&v8);
  }
}

void sub_216CEEB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CEEB9C(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 2) = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      long long v9 = a2[1];
      long long v18 = *a2;
      long long v19 = v9;
      unint64_t v20 = (pxrInternal__aapl__pxrReserved__ *)*((void *)a2 + 4);
      unint64_t v24 = 0;
      if (v6 > 0x6FF)
      {
        ssize_t v13 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v20, (__sFILE *)&v24, (char *)8, v19 + *((void *)&v18 + 1));
        if (v13 == -1) {
          return;
        }
        ssize_t v11 = v13 + v19;
        *(void *)&long long v19 = v13 + v19;
        unint64_t v12 = v24;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (!sub_216C98940((uint64_t)a2 + 8, 0, (__sFILE *)&v21)) {
        return;
      }
      long long v7 = a2[1];
      long long v18 = *a2;
      long long v19 = v7;
      unint64_t v20 = (pxrInternal__aapl__pxrReserved__ *)*((void *)a2 + 4);
    }
    LODWORD(v21) = 0;
    ssize_t v10 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v20, (__sFILE *)&v21, (char *)4, v19 + *((void *)&v18 + 1));
    if (v10 == -1) {
      return;
    }
    ssize_t v11 = v10 + v19;
    *(void *)&long long v19 = v10 + v19;
    unint64_t v12 = v21;
    unint64_t v24 = v21;
LABEL_13:
    unint64_t v14 = *((void *)&v19 + 1) - v11;
    if (v11 < 0 || (v14 & 0x8000000000000000) != 0 || (v12 <= v14 ? (BOOL v15 = 8 * v12 > v14) : (BOOL v15 = 1), v15))
    {
      *(void *)&long long v21 = "usd/crateFile.cpp";
      *((void *)&v21 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v22 = 2053;
      *((void *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::SdfTimeCode]";
      LOBYTE(v23) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v12, 8 * v12, v14, *((void *)&v19 + 1));
    }
    else
    {
      uint64_t v25 = 0;
      *(void *)&long long v21 = &v25;
      sub_2169B11D8((unint64_t *)a4, v12, (uint64_t **)&v21);
      sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      sub_216CEEDA0((uint64_t)&v18, *(void *)(a4 + 32), *(void *)a4);
    }
    return;
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  if (&v21 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v8 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v8;
    long long v21 = 0u;
    long long v22 = 0u;
    *(void *)(a4 + 32) = v23;
    uint64_t v23 = 0;
  }
  sub_2168F83DC((uint64_t)&v21);
}

void sub_216CEED84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216CEEDA0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  uint64_t v5 = a1 + 8;
  _8[0] = 0;
  BOOL result = sub_216C8B2C8(a1 + 8, 0, (__sFILE *)_8);
  if (result)
  {
    unint64_t v7 = 0;
    while (1)
    {
      *(void *)(a2 + 8 * v7) = _8[0];
      if (a3 - 1 == v7) {
        break;
      }
      _8[0] = 0;
      ++v7;
      if (!sub_216C8B2C8(v5, 0, (__sFILE *)_8)) {
        return v7 >= a3;
      }
    }
    return 1;
  }
  return result;
}

__n128 sub_216CEEE54(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7667B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CEEEA0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7667B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CEEED0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CEEED8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766810)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CEEF18()
{
  return &unk_26C766810;
}

void sub_216CEEF24(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  long long v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CEEFA4(v5, (uint64_t)v9, v3, v4);
}

void sub_216CEEFA4(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v14 = 0;
    memset(__dst, 0, sizeof(__dst));
    long long v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    uint64_t v12 = *(void *)(a2 + 32);
    sub_216CEF088(a1, v11, a3, (uint64_t)__dst);
    sub_216B8D734(a4, __dst);
    sub_2168F83DC((uint64_t)__dst);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)a2;
    long long v8 = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v10 = 0;
    if ((a3 & 0x4000000000000000) == 0)
    {
      *((void *)&v7 + 1) = *(void *)(*(void *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      __dst[0].n128_u64[0] = 0;
      if (sub_216C82F78((uint64_t)&v7 + 8, __dst, 8uLL)) {
        unint64_t v10 = __dst[0].n128_u64[0];
      }
    }
    sub_216B8D6D8(a4, (double *)&v10);
  }
}

void sub_216CEF070(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_216CEF088(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      long long v9 = a2[1];
      long long v17 = *a2;
      long long v18 = v9;
      uint64_t v19 = *((void *)a2 + 4);
      unint64_t v23 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v17 + 8, &v23, 8uLL)) {
          return;
        }
        unint64_t v10 = v23;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(__dst) = 0;
      if (!sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)) {
        return;
      }
      long long v7 = a2[1];
      long long v17 = *a2;
      long long v18 = v7;
      uint64_t v19 = *((void *)a2 + 4);
    }
    LODWORD(__dst) = 0;
    if (!sub_216C82F78((uint64_t)&v17 + 8, &__dst, 4uLL)) {
      return;
    }
    unint64_t v10 = __dst;
    unint64_t v23 = __dst;
LABEL_13:
    uint64_t v11 = *(void *)(*(void *)v18 + 32);
    uint64_t v12 = *((void *)&v17 + 1) - *(void *)(*(void *)v18 + 24);
    unint64_t v13 = v11 - v12;
    if (v12 < 0 || (v13 & 0x8000000000000000) != 0 || (v10 <= v13 ? (BOOL v14 = 8 * v10 > v13) : (BOOL v14 = 1), v14))
    {
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadUncompressedArray";
      *(void *)&long long v21 = 2053;
      *((void *)&v21 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<"
                              "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = pxrInter"
                              "nal__aapl__pxrReserved__::SdfTimeCode]";
      LOBYTE(v22) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v10, 8 * v10, v13, v11);
    }
    else
    {
      uint64_t v24 = 0;
      *(void *)&long long __dst = &v24;
      sub_2169B11D8((unint64_t *)a4, v10, (uint64_t **)&__dst);
      sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
      sub_216CEF288((uint64_t)&v17, *(void *)(a4 + 32), *(void *)a4);
    }
    return;
  }
  uint64_t v22 = 0;
  long long __dst = 0u;
  long long v21 = 0u;
  if (&__dst != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v8 = v21;
    *(_OWORD *)a4 = __dst;
    *(_OWORD *)(a4 + 16) = v8;
    long long __dst = 0u;
    long long v21 = 0u;
    *(void *)(a4 + 32) = v22;
    uint64_t v22 = 0;
  }
  sub_2168F83DC((uint64_t)&__dst);
}

void sub_216CEF26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CEF288(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  uint64_t v5 = a1 + 8;
  uint64_t __dst = 0;
  uint64_t result = sub_216C82F78(a1 + 8, &__dst, 8uLL);
  if (result)
  {
    unint64_t v7 = 0;
    while (1)
    {
      *(void *)(a2 + 8 * v7) = __dst;
      if (a3 - 1 == v7) {
        break;
      }
      uint64_t __dst = 0;
      ++v7;
      if ((sub_216C82F78(v5, &__dst, 8uLL) & 1) == 0) {
        return v7 >= a3;
      }
    }
    return 1;
  }
  return result;
}

__n128 sub_216CEF33C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C766830;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CEF388(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C766830;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CEF3B8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CEF3C0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766890)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CEF400()
{
  return &unk_26C766890;
}

void sub_216CEF40C(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  long long v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CEF4B8(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CEF494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CEF4B8(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    uint64_t v15 = 0;
    memset(v14, 0, sizeof(v14));
    long long v11 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v12 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = *((void *)a2 + 3);
    sub_216CEF600(a1, &v11, a3, (uint64_t)v14);
    if (v12) {
      sub_216784EC4(v12);
    }
    sub_216B8D734(a4, v14);
    sub_2168F83DC((uint64_t)v14);
  }
  else
  {
    unint64_t v10 = 0;
    long long v7 = *a2;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) == 0)
    {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
      v14[0].n128_u64[0] = 0;
      if (sub_216C804FC((void *)&v7 + 1, (uint64_t)v14, 8uLL)) {
        unint64_t v10 = v14[0].n128_u64[0];
      }
      uint64_t v5 = v8;
    }
    if (v5) {
      sub_216784EC4(v5);
    }
    sub_216B8D6D8(a4, (double *)&v10);
  }
}

void sub_216CEF5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CEF600(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    uint64_t v6 = *a2;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 <= 0x4FF)
    {
      LODWORD(v23) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v23, 4uLL)) {
        return;
      }
      uint64_t v6 = *a2;
    }
    uint64_t v8 = a2[1];
    uint64_t v9 = (std::__shared_weak_count *)a2[2];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = a2[3];
      uint64_t v19 = v6;
      uint64_t v20 = v8;
      long long v21 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v10 = a2[3];
      uint64_t v19 = v6;
      uint64_t v20 = v8;
      long long v21 = 0;
    }
    uint64_t v22 = v10;
    unint64_t v26 = 0;
    if (v7 > 0x6FF)
    {
      if (sub_216C804FC(&v20, (uint64_t)&v26, 8uLL))
      {
LABEL_15:
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
        unint64_t v13 = v12 - v22;
        unint64_t v14 = v26;
        if (v22 < 0 || (v13 & 0x8000000000000000) != 0 || (v26 <= v13 ? (BOOL v15 = 8 * v26 > v13) : (BOOL v15 = 1), v15))
        {
          *(void *)&long long v23 = "usd/crateFile.cpp";
          *((void *)&v23 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v24 = 2053;
          *((void *)&v24 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::SdfTimeCode]";
          LOBYTE(v25) = 0;
          uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v14, 8 * v14, v13, v18);
        }
        else
        {
          uint64_t v27 = 0;
          *(void *)&long long v23 = &v27;
          sub_2169B11D8((unint64_t *)a4, v26, (uint64_t **)&v23);
          sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
          sub_216CEF898((uint64_t)&v19, *(void *)(a4 + 32), *(void *)a4);
        }
      }
    }
    else
    {
      LODWORD(v23) = 0;
      if (sub_216C804FC(&v20, (uint64_t)&v23, 4uLL))
      {
        unint64_t v26 = v23;
        goto LABEL_15;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
    if (v9) {
      sub_216784EC4(v9);
    }
    return;
  }
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  if (&v23 != (long long *)a4)
  {
    sub_2168F83DC(a4);
    long long v11 = v24;
    *(_OWORD *)a4 = v23;
    *(_OWORD *)(a4 + 16) = v11;
    long long v23 = 0u;
    long long v24 = 0u;
    *(void *)(a4 + 32) = v25;
    uint64_t v25 = 0;
  }
  sub_2168F83DC((uint64_t)&v23);
}

void sub_216CEF85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CEF898(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v8 = 0;
  uint64_t result = sub_216C804FC((void *)(a1 + 8), (uint64_t)&v8, 8uLL);
  if (result)
  {
    unint64_t v7 = 0;
    while (1)
    {
      *(void *)(a2 + 8 * v7) = v8;
      if (a3 - 1 == v7) {
        break;
      }
      uint64_t v8 = 0;
      ++v7;
      if ((sub_216C804FC(v5, (uint64_t)&v8, 8uLL) & 1) == 0) {
        return v7 >= a3;
      }
    }
    return 1;
  }
  return result;
}

__n128 sub_216CEF94C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7668B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CEF998(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7668B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_216CEF9C8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_216CEFA28(*(uint64_t **)(a1 + 16), *(char ***)(a1 + 8), (char **)(*(void *)(*(void *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_216CEF9DC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766910)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CEFA1C()
{
  return &unk_26C766910;
}

unint64_t sub_216CEFA28(uint64_t *a1, char **a2, char **a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  uint64_t v9 = *((void *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0) {
      uint64_t v10 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(this);
    else {
      uint64_t v10 = *(uint64_t **)this;
    }
    return sub_216CEFAF4((uint64_t)a1, (uint64_t)a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0) {
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    }
    else {
      uint64_t v12 = *(pxrInternal__aapl__pxrReserved__::SdfPathExpression **)this;
    }
    return sub_216CEFCB0(a1, a2, a3, v12);
  }
}

unint64_t sub_216CEFAF4(uint64_t a1, uint64_t a2, char **a3, uint64_t *a4)
{
  v25[0] = (char **)a2;
  v25[1] = a3;
  unint64_t result = 0x8039000000000000;
  unint64_t v24 = 0x8039000000000000;
  if (*a4)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = (uint64_t *)(a1 + 8);
    uint64_t v9 = v11;
    if (!v11)
    {
      uint64_t v12 = operator new(0x28uLL);
      _OWORD *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_216C7FA74(v10, (uint64_t)v12);
      uint64_t v9 = *v10;
    }
    unint64_t v13 = sub_216CEFDAC(v9, a4, (uint64_t)a4, &v24);
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        int v19 = *(unsigned __int16 *)(v15 + 248);
        v26[0] = (char **)a2;
        v26[1] = a3;
        uint64_t v20 = sub_216C98168((uint64_t)v26, 8);
        if (((v19 | (v19 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          uint64_t __src = *a4;
          sub_216C80458((uint64_t)v26, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *a4;
          sub_216C984FC((uint64_t)v26, (char *)&__src);
        }
        uint64_t v21 = *a4;
        if (*a4)
        {
          uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)a4[4];
          uint64_t v23 = 96 * v21;
          do
          {
            sub_216CF00C4(v26, v22);
            uint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)((char *)v22 + 96);
            v23 -= 96;
          }
          while (v23);
        }
        v13[7] = v20 & 0xFFFFFFFFFFFFLL | 0x8039000000000000;
      }
      else
      {
        v13[7] = sub_216C98168((uint64_t)v25, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v26[0]) = 1;
        sub_216C984FC((uint64_t)v25, (char *)v26);
        LODWORD(v26[0]) = *a4;
        sub_216C984FC((uint64_t)v25, (char *)v26);
        uint64_t v16 = *a4;
        if (*a4)
        {
          long long v17 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)a4[4];
          uint64_t v18 = 96 * v16;
          do
          {
            sub_216CF00C4(v25, v17);
            long long v17 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)((char *)v17 + 96);
            v18 -= 96;
          }
          while (v18);
        }
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t sub_216CEFCB0(uint64_t *a1, char **a2, char **a3, pxrInternal__aapl__pxrReserved__::SdfPathExpression *a4)
{
  v18[0] = a2;
  v18[1] = a3;
  sub_2169B70E4(v13, (uint64_t)a4);
  if (v17 < 0) {
    operator delete(__p);
  }
  int v19 = (void **)&v15;
  sub_2169B81EC(&v19);
  int v19 = (void **)&v14;
  sub_2169B74B8(&v19);
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  uint64_t v7 = *a1;
  if (!*a1)
  {
    uint64_t v8 = operator new(0x28uLL);
    *uint64_t v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_216C7FB34(a1, (uint64_t)v8);
    uint64_t v7 = *a1;
  }
  int v19 = 0;
  uint64_t v9 = sub_216CF0198(v7, a4, (uint64_t)a4, &v19);
  uint64_t v10 = v9;
  if (v11)
  {
    v9[14] = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x39000000000000;
    sub_216CF00C4(v18, a4);
  }
  return v10[14];
}

uint64_t *sub_216CEFDAC(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v9 = *a2;
  LOBYTE(v33) = 1;
  uint64_t v32 = v9;
  sub_2169B86D4((unint64_t)&v32, a2[4], v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * v32);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          if (sub_2169B8738(i + 2, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  char v17 = (uint64_t *)(a1 + 16);
  uint64_t v18 = operator new(0x40uLL);
  i = (uint64_t *)v18;
  uint64_t v33 = a1 + 16;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = v10;
  long long v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  uint64_t v20 = *(void *)(a3 + 32);
  *((void *)v18 + 6) = v20;
  if (v20)
  {
    uint64_t v21 = (atomic_ullong *)(v20 - 16);
    if (*((void *)v18 + 5)) {
      uint64_t v21 = (atomic_ullong *)*((void *)v18 + 5);
    }
    atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  }
  *((void *)v18 + 7) = *a4;
  char v34 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    sub_21678A04C(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  unint64_t v29 = *(uint64_t **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    uint64_t *i = *v29;
LABEL_42:
    *unint64_t v29 = (uint64_t)i;
    goto LABEL_43;
  }
  uint64_t *i = *v17;
  *char v17 = (uint64_t)i;
  *(void *)(v28 + 8 * v4) = v17;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    unint64_t v29 = (uint64_t *)(*(void *)a1 + 8 * v30);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216CF0050(_Unwind_Exception *a1)
{
  sub_216CF006C(v2, v1);
  _Unwind_Resume(a1);
}

void sub_216CF006C(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_2169B88CC(__p + 2);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void sub_216CF00C4(char ***a1, pxrInternal__aapl__pxrReserved__::SdfPathExpression *a2)
{
  uint64_t v4 = (uint64_t)(*a1)[791];
  sub_216779094(__p, "A pathExpression value type was detected which requires crate version 0.10.0.");
  sub_216CCED74(v4, (const char *)0xA00, (char *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)v5, a2);
  int __src = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a1, (unsigned __int8 *)v5);
  sub_216C984FC((uint64_t)a1, (char *)&__src);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_216CF0168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CF0198(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  unint64_t v9 = sub_2169B6074((uint64_t)v27, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            v27[0] = v15 + 2;
            v27[1] = v15 + 5;
            void v27[2] = v15 + 8;
            void v27[3] = v15 + 11;
            v26[0] = a2;
            v26[1] = a2 + 3;
            void v26[2] = a2 + 6;
            void v26[3] = a2 + 9;
            if (sub_2169B66D4((uint64_t)&v28, (uint64_t)v27, (uint64_t)v26)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_216CF0450(a1, v10, a3, a4, (uint64_t)v27);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  float v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v27[0] = *v23;
    *float v23 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v24 = *(void *)(*(void *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v27[0];
    }
  }
  uint64_t v15 = (void *)v27[0];
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216CF04DC((uint64_t)v27, 0);
  return v15;
}

void sub_216CF0438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_216CF04DC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216CF0450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x78uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *unint64_t v10 = 0;
  v10[1] = a2;
  unint64_t result = sub_2169B70E4(v10 + 2, a3);
  v10[14] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_216CF04C4(_Unwind_Exception *a1)
{
  sub_216CF04DC(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216CF04DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2169B8D9C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

__n128 sub_216CF053C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C766930;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CF0588(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C766930;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CF05B8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  char v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v6[808];
  uint64_t v8 = v6[809];
  uint64_t v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  void v10[3] = v8;
  v10[4] = v9;
  sub_216CF0650(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_216CF0604(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766990)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CF0644()
{
  return &unk_26C766990;
}

void sub_216CF0650(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    *(void *)&long long v12 = 0;
    *(_OWORD *)unint64_t v10 = 0u;
    long long v11 = 0u;
    long long v6 = *(_OWORD *)(a2 + 16);
    v16[0] = *(_OWORD *)a2;
    v16[1] = v6;
    uint64_t v17 = *(void *)(a2 + 32);
    sub_216CF0770(a1, v16, a3, (uint64_t)v10);
    sub_216B8ED74(a4, (__n128 *)v10);
    sub_2169B88CC(v10);
  }
  else
  {
    *(_OWORD *)__sFILE __p = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    *(_OWORD *)unint64_t v10 = 0u;
    long long v11 = 0u;
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)a2;
    long long v8 = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) == 0)
    {
      *(void *)&long long v8 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216CF0D24((uint64_t *)&v7, (uint64_t)v10);
    }
    sub_216B8ECB8(a4, (uint64_t)v10);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[1]);
    }
    float v18 = (void **)&v13;
    sub_2169B81EC(&v18);
    float v18 = (void **)&v11 + 1;
    sub_2169B74B8(&v18);
    if (v10[0])
    {
      v10[1] = v10[0];
      operator delete(v10[0]);
    }
  }
}

void sub_216CF0748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169B88CC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CF0770(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 2) = a3 & 0xFFFFFFFFFFFFLL;
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      long long v9 = a2[1];
      long long v24 = *a2;
      long long v25 = v9;
      unint64_t v26 = (pxrInternal__aapl__pxrReserved__ *)*((void *)a2 + 4);
      unint64_t v30 = 0;
      if (v6 > 0x6FF)
      {
        ssize_t v13 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v26, (__sFILE *)&v30, (char *)8, v25 + *((void *)&v24 + 1));
        if (v13 == -1) {
          return;
        }
        ssize_t v11 = v13 + v25;
        *(void *)&long long v25 = v13 + v25;
        unint64_t v12 = v30;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v27) = 0;
      if (!sub_216C98940((uint64_t)a2 + 8, 0, (__sFILE *)&v27)) {
        return;
      }
      long long v7 = a2[1];
      long long v24 = *a2;
      long long v25 = v7;
      unint64_t v26 = (pxrInternal__aapl__pxrReserved__ *)*((void *)a2 + 4);
    }
    LODWORD(v27) = 0;
    ssize_t v10 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v26, (__sFILE *)&v27, (char *)4, v25 + *((void *)&v24 + 1));
    if (v10 == -1) {
      return;
    }
    ssize_t v11 = v10 + v25;
    *(void *)&long long v25 = v10 + v25;
    unint64_t v12 = v27;
    unint64_t v30 = v27;
LABEL_13:
    unint64_t v14 = *((void *)&v25 + 1) - v11;
    if (v11 < 0 || (v14 & 0x8000000000000000) != 0 || (v12 <= v14 ? (BOOL v15 = 96 * v12 > v14) : (BOOL v15 = 1), v15))
    {
      *(void *)&long long v27 = "usd/crateFile.cpp";
      *((void *)&v27 + 1) = "_ReadUncompressedArray";
      *(void *)&long long v28 = 2053;
      *((void *)&v28 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::SdfPathExpression]";
      LOBYTE(v29) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v12, 96 * v12, v14, *((void *)&v25 + 1));
    }
    else
    {
      sub_216CF0988((unint64_t *)a4, v12);
      sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      unint64_t v18 = *(void *)a4;
      if (*(void *)a4)
      {
        uint64_t v19 = *(void *)(a4 + 32);
        unint64_t v20 = v18 - 1;
        do
        {
          unsigned int v21 = sub_216CF0D24((uint64_t *)&v24, v19);
          BOOL v23 = v20-- != 0;
          if (!v21) {
            break;
          }
          v19 += 96;
        }
        while (v23);
      }
    }
    return;
  }
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  if (&v27 != (long long *)a4)
  {
    sub_2169B88CC((void *)a4);
    long long v8 = v28;
    *(_OWORD *)a4 = v27;
    *(_OWORD *)(a4 + 16) = v8;
    long long v27 = 0u;
    long long v28 = 0u;
    *(void *)(a4 + 32) = v29;
    uint64_t v29 = 0;
  }
  sub_2169B88CC(&v27);
}

void sub_216CF096C(_Unwind_Exception *a1)
{
  sub_2169B88CC((void *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_216CF0988(unint64_t *a1, unint64_t a2)
{
  *(_OWORD *)__sFILE __p = 0u;
  long long v6 = 0u;
  long long v4 = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  memset(v3, 0, sizeof(v3));
  long long v7 = v2;
  sub_216CF0A24(a1, a2, (uint64_t *)&v7);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[1]);
  }
  long long v7 = (void **)&v4;
  sub_2169B81EC(&v7);
  long long v7 = (void **)v3 + 1;
  sub_2169B74B8(&v7);
  if (v2[0])
  {
    v2[1] = v2[0];
    operator delete(v2[0]);
  }
}

void sub_216CF0A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216CF0A24(unint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    long long v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v22 = 96 * v3;
            uint64_t v23 = 96 * a2;
            do
            {
              long long v24 = (void **)&v7[(unint64_t)v23 / 8];
              if (SHIBYTE(v7[(unint64_t)v23 / 8 + 11]) < 0) {
                operator delete(v24[9]);
              }
              unint64_t v26 = v24 + 6;
              sub_2169B81EC(&v26);
              unint64_t v26 = v24 + 3;
              sub_2169B74B8(&v26);
              long long v25 = *v24;
              if (*v24)
              {
                v7[(unint64_t)v23 / 8 + 1] = v25;
                operator delete(v25);
              }
              v23 += 96;
            }
            while (v22 != v23);
          }
          else
          {
            uint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              long long v7 = sub_2169B8C68((uint64_t)a1, a2);
              sub_2169B8E04(v9, v9 + 96 * v3, (uint64_t)v7);
            }
            unint64_t v10 = 0;
            ssize_t v11 = &v7[12 * v3];
            uint64_t v12 = *a3;
            uint64_t v13 = 96 * a2 - 96 * v3;
            do
            {
              sub_2169B70E4(&v11[v10 / 8], v12);
              v10 += 96;
            }
            while (v13 != v10);
          }
          goto LABEL_33;
        }
        long long v7 = (void *)a1[4];
      }
      uint64_t v16 = (uint64_t)v7;
      if (v3 >= a2) {
        unint64_t v17 = a2;
      }
      else {
        unint64_t v17 = *a1;
      }
      long long v7 = sub_2169B8C68((uint64_t)a1, a2);
      sub_2169B8E04(v16, v16 + 96 * v17, (uint64_t)v7);
      if (v3 < a2)
      {
        unint64_t v18 = 0;
        uint64_t v19 = &v7[12 * v3];
        uint64_t v20 = *a3;
        uint64_t v21 = 96 * a2 - 96 * v3;
        do
        {
          sub_2169B70E4(&v19[v18 / 8], v20);
          v18 += 96;
        }
        while (v21 != v18);
      }
      goto LABEL_33;
    }
    if (a2 < 0x2AAAAAAAAAAAAABLL)
    {
      long long v7 = sub_2169B8C68((uint64_t)a1, a2);
      uint64_t v14 = 0;
      uint64_t v15 = *a3;
      do
      {
        sub_2169B70E4(&v7[v14], v15);
        v14 += 12;
      }
      while (12 * a2 != v14);
LABEL_33:
      if (v7 != (void *)a1[4])
      {
        sub_2169B88CC(a1);
        a1[4] = (unint64_t)v7;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2169B89C0(a1);
}

void sub_216CF0C84(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 96)
  {
    sub_2169B8D9C(v1);
    v1 += 96;
  }
  __cxa_rethrow();
}

void sub_216CF0CA4()
{
}

void sub_216CF0D10()
{
}

uint64_t *sub_216CF0D24(uint64_t *a1, uint64_t a2)
{
  memset(&__p._ub._size, 0, 24);
  LODWORD(__p._p) = -1;
  EmptyToken = (uint64_t *)sub_216C98940((uint64_t)(a1 + 1), 0, &__p);
  long long v5 = EmptyToken;
  if (EmptyToken)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = *(void *)(*a1 + 144);
    if (LODWORD(__p._p) >= (unint64_t)((*(void *)(*a1 + 152) - v7) >> 2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
      EmptyString = (const std::string *)&qword_267B91638;
    }
    else
    {
      unint64_t v8 = *(unsigned int *)(v7 + 4 * LODWORD(__p._p));
      uint64_t v10 = v6 + 120;
      uint64_t v9 = *(void *)(v6 + 120);
      if (v8 >= (*(void *)(v10 + 8) - v9) >> 3)
      {
        EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
        ssize_t v11 = &qword_267B91658;
      }
      else
      {
        ssize_t v11 = (uint64_t *)(v9 + 8 * v8);
      }
      unint64_t v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12) {
        EmptyString = (const std::string *)(v12 + 16);
      }
      else {
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
      }
    }
    std::string::operator=((std::string *)&__p._ub._size, EmptyString);
    v17[0] = 0;
    v17[1] = 0;
    uint64_t v18 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(&__p, &__p._ub._size, v17);
    uint64_t v14 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v14;
      operator delete(v14);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)&__p._p;
    *(void *)(a2 + 16) = *(void *)&__p._flags;
    memset(&__p, 0, 24);
    sub_2169B59AC((void **)(a2 + 24));
    *(__sbuf *)(a2 + 24) = __p._bf;
    *(void *)(a2 + 40) = *(void *)&__p._lbfsize;
    memset(&__p._bf, 0, 24);
    sub_2169B5A6C((void **)(a2 + 48));
    *(_OWORD *)(a2 + 48) = *(_OWORD *)&__p._cookie;
    *(void *)(a2 + 64) = __p._read;
    memset(&__p._cookie, 0, 24);
    uint64_t v15 = (void **)(a2 + 72);
    if (*(char *)(a2 + 95) < 0) {
      operator delete(*v15);
    }
    *(_OWORD *)uint64_t v15 = *(_OWORD *)&__p._seek;
    *(void *)(a2 + 88) = __p._ub._base;
    HIBYTE(__p._ub._base) = 0;
    LOBYTE(__p._seek) = 0;
    __p._lb._base = (unsigned __int8 *)&__p._cookie;
    sub_2169B81EC((void ***)&__p._lb);
    __p._lb._base = (unsigned __int8 *)&__p._bf;
    sub_2169B74B8((void ***)&__p._lb);
    if (__p._p)
    {
      *(void *)&__p._r = __p._p;
      operator delete(__p._p);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    if ((char)__p._nbuf[0] < 0) {
      operator delete(*(void **)&__p._ub._size);
    }
  }
  return v5;
}

void sub_216CF0F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 - 57) < 0) {
    operator delete(*(void **)(v15 - 80));
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CF0F44(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C7669B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CF0F90(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7669B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CF0FC0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CF0FC8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766A10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CF1008()
{
  return &unk_26C766A10;
}

void sub_216CF1014(void *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3 = *a2;
  long long v4 = *a3;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1 + 6448;
  uint64_t v7 = *(void *)(*a1 + 6560);
  uint64_t v8 = *(void *)(*(void *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  long long v9[2] = v6;
  v9[3] = v7;
  int v10 = sub_216C688BC();
  sub_216CF1094(v5, (uint64_t)v9, v3, v4);
}

void sub_216CF1094(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    *(void *)&long long v12 = 0;
    *(_OWORD *)int v10 = 0u;
    long long v11 = 0u;
    long long v6 = *(_OWORD *)(a2 + 16);
    v16[0] = *(_OWORD *)a2;
    v16[1] = v6;
    uint64_t v17 = *(void *)(a2 + 32);
    sub_216CF11C4(a1, v16, a3, (uint64_t)v10);
    sub_216B8ED74(a4, (__n128 *)v10);
    sub_2169B88CC(v10);
  }
  else
  {
    *(_OWORD *)__sFILE __p = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    *(_OWORD *)int v10 = 0u;
    long long v11 = 0u;
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v7 = *(_OWORD *)a2;
    long long v8 = v5;
    uint64_t v9 = *(void *)(a2 + 32);
    if ((a3 & 0x4000000000000000) == 0)
    {
      *((void *)&v7 + 1) = *(void *)(*(void *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_216CF13D8((uint64_t *)&v7, (uint64_t)v10);
    }
    sub_216B8ECB8(a4, (uint64_t)v10);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[1]);
    }
    uint64_t v18 = (void **)&v13;
    sub_2169B81EC(&v18);
    uint64_t v18 = (void **)&v11 + 1;
    sub_2169B74B8(&v18);
    if (v10[0])
    {
      v10[1] = v10[0];
      operator delete(v10[0]);
    }
  }
}

void sub_216CF119C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169B88CC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216CF11C4(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((void *)a2 + 1) = *(void *)(**((void **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    unsigned int v6 = (*(unsigned __int8 *)(*(void *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(void *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      long long v9 = a2[1];
      long long v23 = *a2;
      long long v24 = v9;
      uint64_t v25 = *((void *)a2 + 4);
      unint64_t v29 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_216C82F78((uint64_t)&v23 + 8, &v29, 8uLL)) {
          return;
        }
        unint64_t v10 = v29;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(__dst) = 0;
      if (!sub_216C82F78((uint64_t)a2 + 8, &__dst, 4uLL)) {
        return;
      }
      long long v7 = a2[1];
      long long v23 = *a2;
      long long v24 = v7;
      uint64_t v25 = *((void *)a2 + 4);
    }
    LODWORD(__dst) = 0;
    if (!sub_216C82F78((uint64_t)&v23 + 8, &__dst, 4uLL)) {
      return;
    }
    unint64_t v10 = __dst;
    unint64_t v29 = __dst;
LABEL_13:
    uint64_t v11 = *(void *)(*(void *)v24 + 32);
    uint64_t v12 = *((void *)&v23 + 1) - *(void *)(*(void *)v24 + 24);
    unint64_t v13 = v11 - v12;
    if (v12 < 0 || (v13 & 0x8000000000000000) != 0 || (v10 <= v13 ? (BOOL v14 = 96 * v10 > v13) : (BOOL v14 = 1), v14))
    {
      *(void *)&long long __dst = "usd/crateFile.cpp";
      *((void *)&__dst + 1) = "_ReadUncompressedArray";
      *(void *)&long long v27 = 2053;
      *((void *)&v27 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<"
                              "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = pxrInter"
                              "nal__aapl__pxrReserved__::SdfPathExpression]";
      LOBYTE(v28) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v10, 96 * v10, v13, v11);
    }
    else
    {
      sub_216CF0988((unint64_t *)a4, v10);
      sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
      unint64_t v17 = *(void *)a4;
      if (*(void *)a4)
      {
        uint64_t v18 = *(void *)(a4 + 32);
        unint64_t v19 = v17 - 1;
        do
        {
          unsigned int v20 = sub_216CF13D8((uint64_t *)&v23, v18);
          BOOL v22 = v19-- != 0;
          if (!v20) {
            break;
          }
          v18 += 96;
        }
        while (v22);
      }
    }
    return;
  }
  uint64_t v28 = 0;
  long long __dst = 0u;
  long long v27 = 0u;
  if (&__dst != (long long *)a4)
  {
    sub_2169B88CC((void *)a4);
    long long v8 = v27;
    *(_OWORD *)a4 = __dst;
    *(_OWORD *)(a4 + 16) = v8;
    long long __dst = 0u;
    long long v27 = 0u;
    *(void *)(a4 + 32) = v28;
    uint64_t v28 = 0;
  }
  sub_2169B88CC(&__dst);
}

void sub_216CF13BC(_Unwind_Exception *a1)
{
  sub_2169B88CC((void *)(v1 - 64));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *sub_216CF13D8(uint64_t *a1, uint64_t a2)
{
  memset(&v27, 0, sizeof(v27));
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C82F78((uint64_t)(a1 + 1), __p, 4uLL);
  long long v5 = EmptyToken;
  if (EmptyToken)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = *(void *)(*a1 + 144);
    if (LODWORD(__p[0]) >= (unint64_t)((*(void *)(*a1 + 152) - v7) >> 2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
      EmptyString = (const std::string *)&qword_267B91638;
    }
    else
    {
      unint64_t v8 = *(unsigned int *)(v7 + 4 * LODWORD(__p[0]));
      uint64_t v10 = v6 + 120;
      uint64_t v9 = *(void *)(v6 + 120);
      if (v8 >= (*(void *)(v10 + 8) - v9) >> 3)
      {
        EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
        uint64_t v11 = &qword_267B91658;
      }
      else
      {
        uint64_t v11 = (uint64_t *)(v9 + 8 * v8);
      }
      unint64_t v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12) {
        EmptyString = (const std::string *)(v12 + 16);
      }
      else {
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
      }
    }
    std::string::operator=(&v27, EmptyString);
    v17[0] = 0;
    v17[1] = 0;
    uint64_t v18 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(__p, &v27, v17);
    BOOL v14 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v14;
      operator delete(v14);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v20;
    __p[1] = 0;
    uint64_t v20 = 0;
    __p[0] = 0;
    sub_2169B59AC((void **)(a2 + 24));
    *(_OWORD *)(a2 + 24) = v21;
    *(void *)(a2 + 40) = v22;
    uint64_t v22 = 0;
    long long v21 = 0uLL;
    sub_2169B5A6C((void **)(a2 + 48));
    *(_OWORD *)(a2 + 48) = v23;
    *(void *)(a2 + 64) = v24;
    uint64_t v24 = 0;
    long long v23 = 0uLL;
    uint64_t v15 = (void **)(a2 + 72);
    if (*(char *)(a2 + 95) < 0) {
      operator delete(*v15);
    }
    *(_OWORD *)uint64_t v15 = v25;
    *(void *)(a2 + 88) = v26;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    uint64_t v28 = (void **)&v23;
    sub_2169B81EC(&v28);
    uint64_t v28 = (void **)&v21;
    sub_2169B74B8(&v28);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  return v5;
}

void sub_216CF15BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 - 57) < 0) {
    operator delete(*(void **)(v15 - 80));
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216CF15F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C766A30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216CF1644(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C766A30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216CF1674(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
}

uint64_t sub_216CF167C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C766A90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216CF16BC()
{
  return &unk_26C766A90;
}

void sub_216CF16C8(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *(void *)(v7 + 6488);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 6496);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0;
  sub_216CF1774(v6, &v10, v4, v5);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v9) {
    sub_216784EC4(v9);
  }
}

void sub_216CF1750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CF1774(uint64_t a1, long long *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  if (a3 < 0)
  {
    *(void *)&long long v12 = 0;
    *(_OWORD *)long long v10 = 0u;
    long long v11 = 0u;
    long long v16 = *a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
    unint64_t v17 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *((void *)a2 + 3);
    sub_216CF1904(a1, &v16, a3, (uint64_t)v10);
    if (v17) {
      sub_216784EC4(v17);
    }
    sub_216B8ED74(a4, (__n128 *)v10);
    sub_2169B88CC(v10);
  }
  else
  {
    *(_OWORD *)__sFILE __p = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    *(_OWORD *)long long v10 = 0u;
    long long v11 = 0u;
    long long v7 = *a2;
    long long v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *((void *)a2 + 3);
    if ((a3 & 0x4000000000000000) == 0)
    {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
      sub_216CF1BB0(&v7, (uint64_t)v10);
      long long v5 = v8;
    }
    if (v5) {
      sub_216784EC4(v5);
    }
    sub_216B8ECB8(a4, (uint64_t)v10);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[1]);
    }
    unint64_t v19 = (void **)&v13;
    sub_2169B81EC(&v19);
    unint64_t v19 = (void **)&v11 + 1;
    sub_2169B74B8(&v19);
    if (v10[0])
    {
      v10[1] = v10[0];
      operator delete(v10[0]);
    }
  }
}

void sub_216CF18B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2169B5940((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216CF1904(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    uint64_t v6 = *a2;
    unsigned int v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 <= 0x4FF)
    {
      LODWORD(v29) = 0;
      if (!sub_216C804FC(a2 + 1, (uint64_t)&v29, 4uLL)) {
        return;
      }
      uint64_t v6 = *a2;
    }
    uint64_t v8 = a2[1];
    uint64_t v9 = (std::__shared_weak_count *)a2[2];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = a2[3];
      uint64_t v25 = v6;
      uint64_t v26 = v8;
      std::string v27 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v10 = a2[3];
      uint64_t v25 = v6;
      uint64_t v26 = v8;
      std::string v27 = 0;
    }
    uint64_t v28 = v10;
    unint64_t v32 = 0;
    if (v7 > 0x6FF)
    {
      if (sub_216C804FC(&v26, (uint64_t)&v32, 8uLL))
      {
LABEL_15:
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
        unint64_t v13 = v12 - v28;
        unint64_t v14 = v32;
        if (v28 < 0 || (v13 & 0x8000000000000000) != 0 || (v32 <= v13 ? (BOOL v15 = 96 * v32 > v13) : (BOOL v15 = 1), v15))
        {
          *(void *)&long long v29 = "usd/crateFile.cpp";
          *((void *)&v29 + 1) = "_ReadUncompressedArray";
          *(void *)&long long v30 = 2053;
          *((void *)&v30 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::SdfPathExpression]";
          LOBYTE(v31) = 0;
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v14, 96 * v14, v13, v24);
        }
        else
        {
          sub_216CF0988((unint64_t *)a4, v32);
          sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
          unint64_t v18 = *(void *)a4;
          if (*(void *)a4)
          {
            uint64_t v19 = *(void *)(a4 + 32);
            unint64_t v20 = v18 - 1;
            do
            {
              unsigned __int8 v21 = sub_216CF1BB0(&v25, v19);
              v19 += 96;
              if (v20-- != 0) {
                unsigned __int8 v23 = v21;
              }
              else {
                unsigned __int8 v23 = 0;
              }
            }
            while ((v23 & 1) != 0);
          }
        }
      }
    }
    else
    {
      LODWORD(v29) = 0;
      if (sub_216C804FC(&v26, (uint64_t)&v29, 4uLL))
      {
        unint64_t v32 = v29;
        goto LABEL_15;
      }
    }
    if (v27) {
      sub_216784EC4(v27);
    }
    if (v9) {
      sub_216784EC4(v9);
    }
    return;
  }
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  if (&v29 != (long long *)a4)
  {
    sub_2169B88CC((void *)a4);
    long long v11 = v30;
    *(_OWORD *)a4 = v29;
    *(_OWORD *)(a4 + 16) = v11;
    long long v29 = 0u;
    long long v30 = 0u;
    *(void *)(a4 + 32) = v31;
    uint64_t v31 = 0;
  }
  sub_2169B88CC(&v29);
}

void sub_216CF1B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2169B88CC((uint64_t *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *sub_216CF1BB0(void *a1, uint64_t a2)
{
  memset(&v27, 0, sizeof(v27));
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_216C804FC(a1 + 1, (uint64_t)__p, 4uLL);
  long long v5 = EmptyToken;
  if (EmptyToken)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = *(void *)(*a1 + 144);
    if (LODWORD(__p[0]) >= (unint64_t)((*(void *)(*a1 + 152) - v7) >> 2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
      EmptyString = (const std::string *)&qword_267B91638;
    }
    else
    {
      unint64_t v8 = *(unsigned int *)(v7 + 4 * LODWORD(__p[0]));
      uint64_t v10 = v6 + 120;
      uint64_t v9 = *(void *)(v6 + 120);
      if (v8 >= (*(void *)(v10 + 8) - v9) >> 3)
      {
        EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
        long long v11 = &qword_267B91658;
      }
      else
      {
        long long v11 = (uint64_t *)(v9 + 8 * v8);
      }
      unint64_t v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12) {
        EmptyString = (const std::string *)(v12 + 16);
      }
      else {
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
      }
    }
    std::string::operator=(&v27, EmptyString);
    v17[0] = 0;
    v17[1] = 0;
    uint64_t v18 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(__p, &v27, v17);
    unint64_t v14 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v14;
      operator delete(v14);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v20;
    __p[1] = 0;
    uint64_t v20 = 0;
    __p[0] = 0;
    sub_2169B59AC((void **)(a2 + 24));
    *(_OWORD *)(a2 + 24) = v21;
    *(void *)(a2 + 40) = v22;
    uint64_t v22 = 0;
    long long v21 = 0uLL;
    sub_2169B5A6C((void **)(a2 + 48));
    *(_OWORD *)(a2 + 48) = v23;
    *(void *)(a2 + 64) = v24;
    uint64_t v24 = 0;
    long long v23 = 0uLL;
    BOOL v15 = (void **)(a2 + 72);
    if (*(char *)(a2 + 95) < 0) {
      operator delete(*v15);
    }
    *(_OWORD *)BOOL v15 = v25;
    *(void *)(a2 + 88) = v26;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    uint64_t v28 = (void **)&v23;
    sub_2169B81EC(&v28);
    uint64_t v28 = (void **)&v21;
    sub_2169B74B8(&v28);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  return v5;
}

void sub_216CF1D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 - 57) < 0) {
    operator delete(*(void **)(v15 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_216CF1DC8()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ASSIGN_PROTOTYPES_DETERMINISTICALLY)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

double pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::Usd_InstanceCache(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this)
{
  *(unsigned char *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = (char *)this + 96;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = (char *)this + 120;
  *((void *)this + 18) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = (char *)this + 144;
  *((void *)this + 22) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = (char *)this + 168;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 1065353216;
  *((void *)this + 33) = 0;
  return result;
}

{
  double result;

  *(unsigned char *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = (char *)this + 96;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = (char *)this + 120;
  *((void *)this + 18) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = (char *)this + 144;
  *((void *)this + 22) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = (char *)this + 168;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 1065353216;
  *((void *)this + 33) = 0;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::RegisterInstancePrimIndex(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this, char *a3, const pxrInternal__aapl__pxrReserved__::UsdStageLoadRules *a4)
{
  unsigned __int8 v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v8)
  {
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("InstanceCache::RegisterIndex", 0, a3);
    BOOL v10 = v9 != 0;
  }
  else
  {
    uint64_t v9 = 0;
    BOOL v10 = 0;
  }
  long long v30 = v9;
  int v31 = v10;
  if ((pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable(this) & 1) != 0
    || (v24[0] = (uint64_t)"usd/instanceCache.cpp",
        v24[1] = (uint64_t)"RegisterInstancePrimIndex",
        v24[2] = 60,
        long long v25 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::RegisterInstancePrimIndex(const PcpPrimIndex &, "
              "const UsdStagePopulationMask *, const UsdStageLoadRules &)",
        char v26 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v24, "index.IsInstanceable()", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::Usd_InstanceKey((pxrInternal__aapl__pxrReserved__::Usd_InstanceKey *)v24, this, (const pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)a3, a4);
    long long v11 = sub_216CF6168((void *)(a1 + 8), v24);
    sub_21685036C((uint64_t)v23, a1);
    unint64_t v32 = v24;
    unint64_t v12 = sub_216CF6270(a1 + 184, v24, (uint64_t)&unk_2174BFD90, (uint64_t *)&v32);
    Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(this);
    unint64_t v14 = v12[20];
    if (v14 >= v12[21])
    {
      uint64_t v15 = sub_216981B30(v12 + 19, Path);
    }
    else
    {
      sub_216981010((_DWORD *)v12[20], Path);
      sub_21698105C((_DWORD *)(v14 + 4), (_DWORD *)Path + 1);
      uint64_t v15 = v14 + 8;
    }
    v12[20] = v15;
    if (v11)
    {
      uint64_t v16 = v23[0];
      if (v23[0])
      {
        __dmb(0xBu);
        *(unsigned char *)uint64_t v16 = 0;
      }
      unint64_t v17 = sub_21698EFF0(a1 + 112, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 19));
      BOOL v18 = (void *)(a1 + 120) != v17
         && *(void *)((char *)v17 + 36) == *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(this);
    }
    else
    {
      BOOL v18 = v15 - v12[19] == 8;
      uint64_t v19 = v23[0];
      if (v23[0])
      {
        __dmb(0xBu);
        *(unsigned char *)uint64_t v19 = 0;
      }
    }
    v23[0] = (void **)&v29;
    sub_216CF4B9C(v23);
    v23[0] = (void **)&v28;
    sub_216981168(v23);
    v23[0] = (void **)&v27;
    sub_216C4C1B8(v23);
    v23[0] = (void **)&v25;
    sub_21682E488(v23);
    v23[0] = (void **)v24;
    sub_216C020DC(v23);
    BOOL v10 = v31;
  }
  else
  {
    BOOL v18 = 0;
  }
  int v31 = v10 - 1;
  if (v10)
  {
    uint64_t v20 = (uint64_t)v30;
    int v21 = v10 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v20);
      int v31 = v21--;
    }
    while (v21 != -2);
  }
  return v18;
}

void sub_216CF2168(_Unwind_Exception *a1)
{
  sub_21684E6B8(v1 - 96);
  _Unwind_Resume(a1);
}

void **sub_216CF21BC(void **a1)
{
  uint64_t v3 = a1 + 13;
  sub_216CF4B9C(&v3);
  uint64_t v3 = a1 + 10;
  sub_216981168(&v3);
  uint64_t v3 = a1 + 7;
  sub_216C4C1B8(&v3);
  uint64_t v3 = a1 + 3;
  sub_21682E488(&v3);
  uint64_t v3 = a1;
  sub_216C020DC(&v3);
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::UnregisterInstancePrimIndexesUnder(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    unint64_t result = (unint64_t)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("InstanceCache::UnregisterIndex", 0, a3);
    BOOL v7 = result != 0;
  }
  else
  {
    unint64_t result = 0;
    BOOL v7 = 0;
  }
  uint64_t v25 = result;
  int v26 = v7;
  uint64_t v9 = (unsigned int *)((char *)this + 168);
  unsigned __int8 v8 = (void *)*((void *)this + 21);
  if (v8)
  {
    BOOL v10 = (unsigned int *)((char *)this + 168);
    do
    {
      unint64_t result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28), a2);
      long long v11 = v8 + 1;
      if (!result)
      {
        long long v11 = v8;
        BOOL v10 = (unsigned int *)v8;
      }
      unsigned __int8 v8 = (void *)*v11;
    }
    while (*v11);
    if (v10 != v9)
    {
      unint64_t v12 = (void *)((char *)this + 48);
      unint64_t v13 = (char *)this + 224;
      do
      {
        unint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 7), a2);
        if ((result & 1) == 0) {
          break;
        }
        unint64_t v14 = sub_216A62F60(v12, v10 + 9);
        if (!v14)
        {
          v23[0] = (uint64_t)"usd/instanceCache.cpp";
          v23[1] = (uint64_t)"UnregisterInstancePrimIndexesUnder";
          void v23[2] = 118;
          v23[3] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::UnregisterInstancePrimIndexesUnder"
                            "(const SdfPath &)";
          char v24 = 0;
          unint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v23, "prototypeToKeyIt != _prototypeToInstanceKeyMap.end()", 0);
          if ((result & 1) == 0) {
            continue;
          }
        }
        v23[0] = (uint64_t)(v14 + 3);
        uint64_t v15 = sub_216CF6270((uint64_t)v13, v14 + 3, (uint64_t)&unk_2174BFD90, v23);
        uint64_t v16 = v15;
        unint64_t v17 = v15[20];
        if (v17 >= v15[21])
        {
          unint64_t result = sub_216981B30(v15 + 19, v10 + 7);
        }
        else
        {
          sub_216981010((_DWORD *)v15[20], v10 + 7);
          sub_21698105C((_DWORD *)(v17 + 4), v10 + 8);
          unint64_t result = v17 + 8;
        }
        v16[20] = result;
        BOOL v18 = (unsigned int *)*((void *)v10 + 1);
        if (v18)
        {
          do
          {
            uint64_t v19 = v18;
            BOOL v18 = *(unsigned int **)v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            uint64_t v19 = (unsigned int *)*((void *)v10 + 2);
            BOOL v20 = *(void *)v19 == (void)v10;
            BOOL v10 = v19;
          }
          while (!v20);
        }
        BOOL v10 = v19;
      }
      while (v19 != v9);
    }
    BOOL v7 = v26;
  }
  int v26 = v7 - 1;
  if (v7)
  {
    uint64_t v21 = v25;
    int v22 = v7 - 2;
    do
    {
      unint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
      int v26 = v22--;
    }
    while (v22 != -2);
  }
  return result;
}

void sub_216CF2444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::ProcessChanges(void *a1, uint64_t *a2, char *a3)
{
  unsigned __int8 v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v5)
  {
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("InstanceCache::ProcessChanges", 0, a3);
    BOOL v7 = v6 != 0;
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = 0;
  }
  v40 = v6;
  int v41 = v7;
  unsigned __int8 v8 = a1 + 30;
  memset(v38, 0, sizeof(v38));
  int v39 = 1065353216;
  for (i = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 30);
        ;
        pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_RemoveInstances(a1, (uint64_t *)i + 2, (pxrInternal__aapl__pxrReserved__::SdfPath **)i + 19, a2, (uint64_t)v38))
  {
    i = *(pxrInternal__aapl__pxrReserved__::SdfPath **)i;
    if (!i) {
      break;
    }
    BOOL v10 = sub_216CF6168(a1 + 23, (uint64_t *)i + 2);
    if (v10)
    {
      int v31 = 0;
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      sub_216980EEC(&v31, (_DWORD *)v10[19], (_DWORD *)v10[20], (uint64_t)(v10[20] - v10[19]) >> 3);
      uint64_t v11 = (uint64_t)v31;
      unint64_t v12 = (int *)v32;
      unint64_t v13 = 126 - 2 * __clz((v32 - v31) >> 3);
      BOOL v14 = v32 == v31;
      long long v36 = *(_OWORD *)((char *)i + 152);
      *((void *)i + 19) = 0;
      *((void *)i + 20) = 0;
      uint64_t v37 = *((void *)i + 21);
      *((void *)i + 21) = 0;
      if (v14) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = v13;
      }
      sub_2169D38EC(v11, v12, (uint64_t)&v46, v15, 1);
      unint64_t v16 = 126 - 2 * __clz((uint64_t)(*((void *)&v36 + 1) - v36) >> 3);
      if (*((void *)&v36 + 1) == (void)v36) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v16;
      }
      sub_2169D38EC(v36, *((int **)&v36 + 1), (uint64_t)&v46, v17, 1);
      v45 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)&v36 + 1);
      v46 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v36;
      v43 = v32;
      v44 = v31;
      v42 = (uint64_t *)((char *)i + 152);
      sub_216CF665C(&v46, &v45, &v44, &v43, &v42);
      v47 = (void **)&v36;
      sub_216981168(&v47);
      *(void *)&long long v36 = &v31;
      sub_216981168((void ***)&v36);
    }
  }
  BOOL v18 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ASSIGN_PROTOTYPES_DETERMINISTICALLY);
  if (!v18) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (!*v18)
  {
    for (j = a1 + 25;
          ;
          pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_CreateOrUpdatePrototypeForInstances((uint64_t **)a1, (uint64_t)(j + 2), j + 19, a2, v38))
    {
      j = (void *)*j;
      if (!j) {
        break;
      }
    }
    goto LABEL_33;
  }
  *((void *)&v36 + 1) = 0;
  uint64_t v37 = 0;
  *(void *)&long long v36 = (char *)&v36 + 8;
  uint64_t v19 = (void *)a1[25];
  if (!v19) {
    goto LABEL_32;
  }
  do
  {
    BOOL v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v19[19];
    if (v20 == (pxrInternal__aapl__pxrReserved__::SdfPath *)v19[20])
    {
      int v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)"usd/instanceCache.cpp";
      unint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdfPath *)"ProcessChanges";
      uint64_t v33 = 175;
      char v34 = "void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::ProcessChanges(Usd_InstanceChanges *)";
      char v35 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v31, "!primIndexes.empty()", 0))goto LABEL_21; {
      BOOL v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v19[19];
      }
    }
    sub_216CF67F4((uint64_t **)&v36, v20, v20, (uint64_t)(v19 + 2));
    if ((v21 & 1) == 0)
    {
      int v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)"usd/instanceCache.cpp";
      unint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdfPath *)"ProcessChanges";
      uint64_t v33 = 177;
      char v34 = "void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::ProcessChanges(Usd_InstanceChanges *)";
      char v35 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v31, "keysToProcess.emplace(primIndexes.front(), key).second", 0);
    }
LABEL_21:
    uint64_t v19 = (void *)*v19;
  }
  while (v19);
  int v22 = (void *)v36;
  if ((long long *)v36 != (long long *)((char *)&v36 + 8))
  {
    do
    {
      int v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v22 + 5);
      long long v23 = sub_216CF6270((uint64_t)(a1 + 23), v22 + 5, (uint64_t)&unk_2174BFD90, (uint64_t *)&v31);
      pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_CreateOrUpdatePrototypeForInstances((uint64_t **)a1, (uint64_t)(v22 + 5), v23 + 19, a2, v38);
      char v24 = (void *)v22[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          char v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v25 = (_OWORD *)v22[2];
          BOOL v14 = *(void *)v25 == (void)v22;
          int v22 = v25;
        }
        while (!v14);
      }
      int v22 = v25;
    }
    while (v25 != (long long *)((char *)&v36 + 8));
  }
LABEL_32:
  sub_216CF6798((uint64_t)&v36, *((void **)&v36 + 1));
LABEL_33:
  while (1)
  {
    unsigned __int8 v8 = (void *)*v8;
    if (!v8) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_RemovePrototypeIfNoInstances((uint64_t)a1, v8 + 2, a2);
  }
  sub_216CF69C8((uint64_t)(a1 + 23));
  sub_216CF69C8((uint64_t)(a1 + 28));
  uint64_t result = sub_216CF65DC((uint64_t)v38);
  int v27 = v41--;
  if (v27)
  {
    uint64_t v28 = (uint64_t)v40;
    int v29 = v27 - 2;
    do
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v28);
      int v41 = v29--;
    }
    while (v29 != -2);
  }
  return result;
}

void sub_216CF2844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_216CF65DC((uint64_t)va);
  sub_21684E6B8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_RemoveInstances(void *result, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3, uint64_t *a4, uint64_t a5)
{
  if (*a3 != a3[1])
  {
    unsigned __int8 v8 = (uint64_t **)result;
    uint64_t result = sub_216CF6168(result + 1, a2);
    if (result)
    {
      uint64_t v36 = a5;
      uint64_t v37 = result;
      v38 = a4;
      uint64_t v9 = result + 19;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v42);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v43);
      int v39 = v8;
      v40[0] = v9;
      BOOL v10 = sub_216CF7158(v8 + 17, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (uint64_t)&unk_2174BFD90, v40);
      uint64_t v12 = *a3;
      uint64_t v11 = a3[1];
      if (*a3 != v11)
      {
        unint64_t v13 = v8 + 14;
        do
        {
          uint64_t v15 = (int *)*((void *)v10 + 5);
          uint64_t v14 = (int *)*((void *)v10 + 6);
          if (v15 != v14)
          {
            while (*(void *)v15 != *(void *)v12)
            {
              v15 += 2;
              if (v15 == v14)
              {
                uint64_t v15 = (int *)*((void *)v10 + 6);
                break;
              }
            }
          }
          if (v15 != v14)
          {
            if (sub_216C4B19C(6))
            {
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v12);
              uint64_t v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancing: Removed instance prim index <%s> for prototype <%s>\n", v18, v19, Text, v17);
            }
            sub_216A8E5E4((uint64_t)v40, v15 + 2, *((int **)v10 + 6), v15);
            char v21 = v20;
            for (i = (_DWORD *)*((void *)v10 + 6); i != v21; sub_216981128((uint64_t)(v10 + 14), i))
              i -= 2;
            *((void *)v10 + 6) = v21;
            sub_216AECCFC(v39 + 20, v12);
          }
          sub_21698EFF0((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
          if (sub_216AECCFC(v39 + 11, v12))
          {
            if (!sub_216AECCFC(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9))
            {
              v40[0] = "usd/instanceCache.cpp";
              v40[1] = "_RemoveInstances";
              v40[2] = (_DWORD *)362;
              v40[3] = "void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_RemoveInstances(const Usd_InstanceKey "
                       "&, const _PrimIndexPaths &, Usd_InstanceChanges *, std::unordered_map<SdfPath, SdfPath, SdfPath::Hash> *)";
              char v41 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v40, "_prototypeToSourcePrimIndexMap.erase(prototypePath)", 0);
            }
            sub_2169C487C(&v42, v12);
            sub_2169C48D4(&v43, (_DWORD *)v12 + 1);
          }
          uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 8);
        }
        while (v12 != v11);
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v42))
      {
        long long v23 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)v10 + 5);
        if (v23 == *((pxrInternal__aapl__pxrReserved__::SdfPath **)v10 + 6))
        {
          v40[0] = v9;
          uint64_t v33 = (int *)sub_216CF7BD4(v36, v9, (uint64_t)&unk_2174BFD90, v40);
          sub_2169C487C(v33 + 6, &v42);
          sub_2169C48D4(v33 + 7, &v43);
        }
        else
        {
          if (sub_216C4B19C(6))
          {
            char v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42);
            uint64_t v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v23);
            int v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancing: Changing source <%s> -> <%s> for <%s>\n", v27, v28, v24, v25, v26);
          }
          v40[0] = v23;
          int v29 = sub_216A9AA80(v39 + 11, v23, (uint64_t)&unk_2174BFD90, v40);
          sub_2169C487C((int *)v29 + 9, v9);
          sub_2169C48D4((int *)v29 + 10, (_DWORD *)v37 + 39);
          v40[0] = v9;
          long long v30 = sub_216A9AA80(v39 + 14, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (uint64_t)&unk_2174BFD90, v40);
          sub_2169C487C((int *)v30 + 9, v23);
          sub_2169C48D4((int *)v30 + 10, (_DWORD *)v23 + 1);
          unint64_t v31 = v38[7];
          if (v31 >= v38[8])
          {
            uint64_t v32 = sub_216981B30(v38 + 6, v9);
          }
          else
          {
            sub_216981010((_DWORD *)v38[7], v9);
            sub_21698105C((_DWORD *)(v31 + 4), (_DWORD *)v37 + 39);
            uint64_t v32 = v31 + 8;
          }
          v38[7] = v32;
          unint64_t v34 = v38[10];
          if (v34 >= v38[11])
          {
            uint64_t v35 = sub_216981B30(v38 + 9, v23);
          }
          else
          {
            sub_216981010((_DWORD *)v38[10], v23);
            sub_21698105C((_DWORD *)(v34 + 4), (_DWORD *)v23 + 1);
            uint64_t v35 = v34 + 8;
          }
          v38[10] = v35;
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      return sub_21697C414(&v42);
    }
  }
  return result;
}

void sub_216CF2C88(_Unwind_Exception *a1)
{
  sub_21697B754((_DWORD *)(v1 - 92));
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_CreateOrUpdatePrototypeForInstances(uint64_t **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  uint64_t v66 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v66);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v66 + 1);
  uint64_t v65 = a2;
  sub_216CF4C74((uint64_t)&v67, a2, &v66);
  sub_216CF5488((uint64_t)__p, (uint64_t)&v67);
  BOOL v10 = (int *)sub_216CF6A20((uint64_t)(a1 + 1), (uint64_t *)__p, (uint64_t)__p);
  char v12 = v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
  sub_21697C414(&v81);
  v83[0] = (void **)&v80;
  sub_216CF4B9C(v83);
  v83[0] = (void **)&v79;
  sub_216981168(v83);
  v83[0] = (void **)&v78;
  sub_216C4C1B8(v83);
  v83[0] = (void **)&v77;
  sub_21682E488(v83);
  v83[0] = __p;
  sub_216C020DC(v83);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v74);
  sub_21697C414(&v73);
  v83[0] = (void **)&v72;
  sub_216CF4B9C(v83);
  v83[0] = (void **)&v71;
  sub_216981168(v83);
  v83[0] = (void **)&v70;
  sub_216C4C1B8(v83);
  v83[0] = (void **)&v69;
  sub_21682E488(v83);
  v83[0] = (void **)&v67;
  sub_216C020DC(v83);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 1);
  sub_21697C414(&v66);
  if (v12)
  {
    pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_GetNextPrototypePath((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)a1, &v67);
    sub_2169C487C(v10 + 38, &v67);
    sub_2169C48D4(v10 + 39, v68);
    __p[0] = &v67;
    unint64_t v13 = sub_216CF6DB4((uint64_t)(a1 + 6), &v67, (uint64_t)&unk_2174BFD90, (_DWORD **)__p);
    sub_216CF376C((uint64_t)(v13 + 3), a2);
    uint64_t v14 = *a3;
    sub_216981010(v83, (_DWORD *)*a3);
    sub_21698105C((_DWORD *)v83 + 1, (_DWORD *)(v14 + 4));
    __p[0] = v83;
    uint64_t v15 = sub_216A9AA80(a1 + 11, (pxrInternal__aapl__pxrReserved__::SdfPath *)v83, (uint64_t)&unk_2174BFD90, (_DWORD **)__p);
    sub_2169C487C((int *)v15 + 9, &v67);
    sub_2169C48D4((int *)v15 + 10, v68);
    __p[0] = &v67;
    uint64_t v16 = sub_216A9AA80(a1 + 14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v67, (uint64_t)&unk_2174BFD90, (_DWORD **)__p);
    sub_2169C487C((int *)v16 + 9, v83);
    sub_2169C48D4((int *)v16 + 10, (_DWORD *)v83 + 1);
    unint64_t v17 = a4[1];
    if (v17 >= a4[2])
    {
      uint64_t v18 = sub_216981B30(a4, &v67);
    }
    else
    {
      sub_216981010((_DWORD *)a4[1], &v67);
      sub_21698105C((_DWORD *)(v17 + 4), v68);
      uint64_t v18 = v17 + 8;
    }
    a4[1] = v18;
    unint64_t v24 = a4[4];
    if (v24 >= a4[5])
    {
      uint64_t v25 = sub_216981B30(a4 + 3, v83);
    }
    else
    {
      sub_216981010((_DWORD *)a4[4], v83);
      sub_21698105C((_DWORD *)(v24 + 4), (_DWORD *)v83 + 1);
      uint64_t v25 = v24 + 8;
    }
    a4[4] = v25;
    if (sub_216C4B19C(6))
    {
      int v26 = v10;
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
      uint64_t v28 = *((char *)String + 23) >= 0 ? String : (uint64_t *)*String;
      int v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v83);
      int v30 = *((char *)v29 + 23);
      unint64_t v31 = (uint64_t *)*v29;
      sub_216CF3854(v65);
      unint64_t v34 = v30 >= 0 ? v29 : v31;
      uint64_t v35 = v76 >= 0 ? __p : (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancing: Creating prototype <%s> with source prim index <%s> for instancing key: %s\n", v32, v33, v28, v34, v35);
      BOOL v10 = v26;
      if (v76 < 0) {
        operator delete(__p[0]);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v83 + 1);
    sub_21697C414(v83);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v68);
  }
  else
  {
    if (sub_216BE2740((uint64_t)(a1 + 14), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 38))) {
      goto LABEL_25;
    }
    uint64_t v19 = *a3;
    sub_216981010(&v67, (_DWORD *)*a3);
    sub_21698105C(v68, (_DWORD *)(v19 + 4));
    __p[0] = &v67;
    BOOL v20 = sub_216A9AA80(a1 + 11, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v67, (uint64_t)&unk_2174BFD90, (_DWORD **)__p);
    sub_2169C487C((int *)v20 + 9, v10 + 38);
    sub_2169C48D4((int *)v20 + 10, v10 + 39);
    __p[0] = v10 + 38;
    char v21 = sub_216A9AA80(a1 + 14, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 38), (uint64_t)&unk_2174BFD90, (_DWORD **)__p);
    sub_2169C487C((int *)v21 + 9, &v67);
    sub_2169C48D4((int *)v21 + 10, v68);
    unint64_t v22 = a4[7];
    if (v22 >= a4[8])
    {
      uint64_t v23 = sub_216981B30(a4 + 6, v10 + 38);
    }
    else
    {
      sub_216981010((_DWORD *)a4[7], v10 + 38);
      sub_21698105C((_DWORD *)(v22 + 4), v10 + 39);
      uint64_t v23 = v22 + 8;
    }
    a4[7] = v23;
    unint64_t v57 = a4[10];
    if (v57 >= a4[11])
    {
      uint64_t v58 = sub_216981B30(a4 + 9, &v67);
    }
    else
    {
      sub_216981010((_DWORD *)a4[10], &v67);
      sub_21698105C((_DWORD *)(v57 + 4), v68);
      uint64_t v58 = v57 + 8;
    }
    a4[10] = v58;
    v59 = sub_216A9DB14(a5, (unsigned int *)v10 + 38);
    if (sub_216C4B19C(6))
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v59 + 3));
      v61 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
      v62 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 38));
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancing: Changing source <%s> -> <%s> for <%s>\n", v63, v64, Text, v61, v62);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v68);
  }
  sub_21697C414(&v67);
LABEL_25:
  uint64_t v36 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 38);
  uint64_t v37 = v10;
  v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*a3;
  int v39 = (pxrInternal__aapl__pxrReserved__::SdfPath *)a3[1];
  if ((pxrInternal__aapl__pxrReserved__::SdfPath *)*a3 != v39)
  {
    v40 = v37 + 39;
    do
    {
      if (sub_216C4B19C(6))
      {
        char v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v38);
        int v42 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v36);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancing: Added instance prim index <%s> for prototype <%s>\n", v43, v44, v41, v42);
      }
      __p[0] = v38;
      v45 = sub_216A9AA80(a1 + 20, v38, (uint64_t)&unk_2174BFD90, (_DWORD **)__p);
      sub_2169C487C((int *)v45 + 9, v36);
      sub_2169C48D4((int *)v45 + 10, v40);
      v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v38 + 8);
    }
    while (v38 != v39);
  }
  __p[0] = v36;
  v46 = sub_216CF7158(a1 + 17, v36, (uint64_t)&unk_2174BFD90, (_DWORD **)__p);
  v47 = (int *)a3[1];
  unint64_t v48 = 126 - 2 * __clz(((uint64_t)v47 - *a3) >> 3);
  if (v47 == (int *)*a3) {
    uint64_t v49 = 0;
  }
  else {
    uint64_t v49 = v48;
  }
  uint64_t result = (int *)sub_2169D38EC(*a3, v47, (uint64_t)__p, v49, 1);
  v51 = (int *)*((void *)v46 + 5);
  v52 = (int *)*((void *)v46 + 6);
  if (v51 == v52)
  {
    *((void *)v46 + 5) = *a3;
    *a3 = (uint64_t)v51;
    uint64_t v55 = *((void *)v46 + 6);
    *((void *)v46 + 6) = a3[1];
    a3[1] = v55;
    uint64_t v56 = *((void *)v46 + 7);
    *((void *)v46 + 7) = a3[2];
    a3[2] = v56;
  }
  else
  {
    v53 = (char *)((char *)v52 - (char *)v51);
    sub_2169DC954((uint64_t *)v46 + 5, v52, (_DWORD *)*a3, (_DWORD *)a3[1], (a3[1] - *a3) >> 3);
    sub_216CF7278(*((void *)v46 + 5), (int *)&v53[*((void *)v46 + 5)], *((int **)v46 + 6), (uint64_t)__p);
    v54 = sub_216C63148(*((int **)v46 + 5), *((int **)v46 + 6));
    return sub_216AD6870((uint64_t)(v46 + 10), v54, *((int **)v46 + 6));
  }
  return result;
}

void sub_216CF3370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
}

void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_RemovePrototypeIfNoInstances(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unsigned __int8 v5 = (void *)(a1 + 8);
  uint64_t v6 = sub_216CF6168((void *)(a1 + 8), a2);
  if (v6)
  {
    BOOL v7 = v6;
    unsigned __int8 v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 19);
    uint64_t v9 = sub_216CF7EAC(a1 + 136, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 19));
    if ((uint64_t *)(a1 + 144) != v9
      || (v15[0] = "usd/instanceCache.cpp",
          v15[1] = "_RemovePrototypeIfNoInstances",
          _OWORD v15[2] = 414,
          v15[3] = "void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_RemovePrototypeIfNoInstances(const Usd_Ins"
                   "tanceKey &, Usd_InstanceChanges *)",
          char v16 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "prototypeToPrimIndexesIt != _prototypeToPrimIndexesMap.end()", 0) & 1) != 0))
    {
      if (v9[5] == v9[6])
      {
        if (sub_216C4B19C(6))
        {
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v8);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancing: Removing prototype <%s>\n", v11, v12, Text);
        }
        unint64_t v13 = a3[13];
        if (v13 >= a3[14])
        {
          uint64_t v14 = sub_216981B30(a3 + 12, v8);
        }
        else
        {
          sub_216981010((_DWORD *)a3[13], v8);
          sub_21698105C((_DWORD *)(v13 + 4), (_DWORD *)v7 + 39);
          uint64_t v14 = v13 + 8;
        }
        a3[13] = v14;
        sub_216CF7F28((void *)(a1 + 48), (unsigned int *)v8);
        sub_216851DB0(v5, v7, (uint64_t)v15);
        sub_216CF6D5C((uint64_t)v15, 0);
        sub_2167AE00C((uint64_t **)(a1 + 136), v9);
        sub_216CF611C((uint64_t)(v9 + 4));
        operator delete(v9);
      }
    }
  }
}

uint64_t sub_216CF3578(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 140));
  sub_21697C414((_DWORD *)(a1 + 136));
  uint64_t v3 = (void **)(a1 + 104);
  sub_216CF4B9C(&v3);
  uint64_t v3 = (void **)(a1 + 80);
  sub_216981168(&v3);
  uint64_t v3 = (void **)(a1 + 56);
  sub_216C4C1B8(&v3);
  uint64_t v3 = (void **)(a1 + 24);
  sub_21682E488(&v3);
  uint64_t v3 = (void **)a1;
  sub_216C020DC(&v3);
  return a1;
}

uint64_t sub_216CF3604(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 140));
  sub_21697C414((_DWORD *)(a1 + 136));
  uint64_t v3 = (void **)(a1 + 104);
  sub_216CF4B9C(&v3);
  uint64_t v3 = (void **)(a1 + 80);
  sub_216981168(&v3);
  uint64_t v3 = (void **)(a1 + 56);
  sub_216C4C1B8(&v3);
  uint64_t v3 = (void **)(a1 + 24);
  sub_21682E488(&v3);
  uint64_t v3 = (void **)a1;
  sub_216C020DC(&v3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_GetNextPrototypePath(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, _DWORD *a2@<X8>)
{
  unsigned __int8 v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  uint64_t v6 = *((void *)this + 33) + 1;
  *((void *)this + 33) = v6;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"__Prototype_%zu", v7, v8, v6);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
}

void sub_216CF3730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CF376C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  else
  {
    sub_216CF556C(a1, *(void *)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    sub_216CF580C(a1 + 24, *(std::string **)(a2 + 24), *(long long **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
    uint64_t v4 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    sub_216CF5A00(a1 + 56, v4, *(void *)(a2 + 64), 0xF0F0F0F0F0F0F0F1 * ((*(void *)(a2 + 64) - v4) >> 4));
    sub_216A98D9C(a1 + 80, *(_DWORD **)(a2 + 80), *(_DWORD **)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_216CF5EB0(a1 + 104, *(_DWORD **)(a2 + 104), *(_DWORD **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2));
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t sub_216CF3854(uint64_t a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216CF3988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  BOOL v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
  if (!v3
    || *(void *)this == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v3))
  {
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this))
  {
    v12[0] = "usd/instanceCache.cpp";
    v12[1] = "IsPathInPrototype";
    v12[2] = 447;
    void v12[3] = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype(const SdfPath &)";
    char v13 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"IsPathInPrototype() requires an absolute path but was given <%s>", Text);
    return 0;
  }
  sub_216981010(v12, this);
  sub_21698105C((_DWORD *)v12 + 1, (_DWORD *)this + 1);
  while ((pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v12) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v12, &v10);
    sub_21697DE94((int *)v12, &v10);
    sub_21697DEEC((int *)v12 + 1, &v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_21697C414(&v10);
  }
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)v12);
  unint64_t v8 = *((unsigned __int8 *)Name + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = Name[1];
  }
  if (v8 >= 0xC)
  {
    if (v9 < 0) {
      Name = (uint64_t *)*Name;
    }
    BOOL v5 = strncmp((const char *)Name, "__Prototype_", 0xCuLL) == 0;
  }
  else
  {
    BOOL v5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v12 + 1);
  sub_21697C414(v12);
  return v5;
}

void sub_216CF3B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPrototypePath(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath(this);
  if (result)
  {
    Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
    unint64_t v5 = *((unsigned __int8 *)Name + 23);
    int v6 = (char)v5;
    if ((v5 & 0x80u) != 0) {
      unint64_t v5 = Name[1];
    }
    if (v5 >= 0xC)
    {
      if (v6 < 0) {
        Name = (uint64_t *)*Name;
      }
      return strncmp((const char *)Name, "__Prototype_", 0xCuLL) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetInstancePrimIndexesForPrototype@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_216CF7EAC((uint64_t)this + 136, a2);
  if ((void *)((char *)this + 144) == result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    int v6 = (char *)result[5];
    BOOL v7 = (char *)result[6];
    return sub_216980EEC(a3, v6, v7, (v7 - v6) >> 3);
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetAllPrototypes@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = sub_216A6E72C(a2, *((void *)this + 4));
  unint64_t v5 = (uint64_t *)*((void *)this + 3);
  if (v5)
  {
    int v6 = (_DWORD *)a2[1];
    do
    {
      BOOL v7 = v5 + 19;
      if ((unint64_t)v6 >= a2[2])
      {
        uint64_t result = (_DWORD *)sub_216981B30(a2, v7);
        int v6 = result;
      }
      else
      {
        sub_216981010(v6, v7);
        uint64_t result = sub_21698105C(v6 + 1, (_DWORD *)v5 + 39);
        v6 += 2;
      }
      a2[1] = (uint64_t)v6;
      unint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return result;
}

void sub_216CF3CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetNumPrototypes(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this)
{
  return *((void *)this + 9);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPrototypeUsingPrimIndexPath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  unint64_t v5 = sub_21698EFF0((uint64_t)this + 88, a2);
  if ((_DWORD *)((char *)this + 96) == v5)
  {
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  else
  {
    int v6 = v5;
    sub_216981010(a3, v5 + 9);
    return sub_21698105C(a3 + 1, v6 + 10);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::PrototypeUsesPrimIndexPath(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_PrototypeUsesPrimIndexPath(this, a2, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_PrototypeUsesPrimIndexPath(void *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3)
{
  sub_216981010(&v18, a2);
  int v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21698105C((_DWORD *)&v18 + 1, (_DWORD *)a2 + 1);
  char v13 = 0;
  while (1)
  {
    BOOL v7 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
    if (v18 == *v7) {
      break;
    }
    sub_216981010(&v16, &v18);
    sub_21698105C(&v17, (_DWORD *)&v18 + 1);
    unint64_t v8 = sub_216AFBFC0(a1 + 20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, 0, (uint64_t)v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_21697C414(&v16);
    if (a1 + 21 == v8) {
      break;
    }
    int v9 = sub_21698EFF0((uint64_t)(a1 + 14), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 36));
    if (a1 + 15 == v9)
    {
      v14[0] = (uint64_t)"usd/instanceCache.cpp";
      v14[1] = (uint64_t)"_PrototypeUsesPrimIndexPath";
      __n128 v14[2] = 618;
      void v14[3] = (uint64_t)"BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_PrototypeUsesPrimIndexPath(const SdfP"
                        "ath &, vector<SdfPath> *) const";
      char v15 = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v14, "prototypeToSourceIt != _prototypeToSourcePrimIndexMap.end()", 0) & 1) == 0)break; {
    }
      }
    if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 36)))
    {
      if (!a3)
      {
        char v13 = 1;
        break;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v14, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 36), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 28), 1);
      unint64_t v10 = a3[1];
      if (v10 >= a3[2])
      {
        uint64_t v11 = sub_216AE5CE4(a3, v14);
      }
      else
      {
        sub_21697D878((_DWORD *)a3[1], v14);
        sub_21697D8B4((_DWORD *)(v10 + 4), (_DWORD *)v14 + 1);
        uint64_t v11 = v10 + 8;
      }
      a3[1] = v11;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v14 + 1);
      sub_21697C414(v14);
      char v13 = 1;
    }
    if (*(void *)((char *)v8 + 28) != v18) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28), v14);
    sub_21697DE94((int *)&v18, (int *)v14);
    sub_21697DEEC((int *)&v18 + 1, (int *)v14 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v14 + 1);
    int v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21697C414(v14);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_21697C414(&v18);
  return v13 & 1;
}

void sub_216CF3FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPrimsInPrototypesUsingPrimIndexPath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_PrototypeUsesPrimIndexPath(this, a2, a3);
}

void sub_216CF4058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPrototypesUsingPrimIndexPathOrDescendents@<X0>(uint64_t this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  char v4 = (void *)(this + 96);
  BOOL v3 = *(void **)(this + 96);
  if (v3)
  {
    uint64_t v6 = this;
    unint64_t v8 = (void *)(this + 96);
    do
    {
      this = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 28), a2);
      int v9 = v3 + 1;
      if (!this)
      {
        int v9 = v3;
        unint64_t v8 = v3;
      }
      BOOL v3 = (void *)*v9;
    }
    while (*v9);
    if (v8 != v4)
    {
      do
      {
        this = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28), a2);
        if ((this & 1) == 0) {
          break;
        }
        unint64_t v10 = sub_21698EFF0(v6 + 112, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 36));
        if ((void *)(v6 + 120) != v10
          || (v18[0] = "usd/instanceCache.cpp",
              v18[1] = "GetPrototypesUsingPrimIndexPathOrDescendents",
              void v18[2] = 563,
              v18[3] = "vector<std::pair<SdfPath, SdfPath>> pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetProto"
                       "typesUsingPrimIndexPathOrDescendents(const SdfPath &) const",
              char v19 = 0,
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 36)),
              int v17 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"prototypePath <%s> missing in prototypesToSourceIndexPath map", v15, v16, Text), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v18, "prototypeToSourceIt != _prototypeToSourcePrimIndexMap.end()", v17) & 1) != 0))
        {
          this = sub_216BEAC8C(a3, (_DWORD *)v8 + 9, (_DWORD *)v10 + 9);
        }
        else
        {
          v18[0] = 0;
          sub_2169C4380(v18);
          sub_216CF4248(a3, (_DWORD *)v8 + 9, v18);
          this = (uint64_t)sub_21697B754(v18);
        }
        uint64_t v11 = (void *)v8[1];
        if (v11)
        {
          do
          {
            char v12 = v11;
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            char v12 = (void *)v8[2];
            BOOL v13 = *v12 == (void)v8;
            unint64_t v8 = v12;
          }
          while (!v13);
        }
        unint64_t v8 = v12;
      }
      while (v12 != v4);
    }
  }
  return this;
}

void sub_216CF4210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((void ***)va);
  sub_216BECE18((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216CF4248(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= v8)
  {
    uint64_t v11 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v21 = v6;
    if (v14) {
      char v15 = (char *)sub_216787EE0(v6, v14);
    }
    else {
      char v15 = 0;
    }
    int v17 = v15;
    uint64_t v18 = &v15[16 * v11];
    BOOL v20 = &v15[16 * v14];
    sub_216CF7F78(v18, a2, a3);
    char v19 = v18 + 16;
    sub_216BED33C(a1, &v17);
    uint64_t v10 = a1[1];
    sub_216BED4E8(&v17);
  }
  else
  {
    sub_216CF7F78(*(_DWORD **)(v6 - 8), a2, a3);
    uint64_t v10 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v10;
  return v10 - 16;
}

void sub_216CF4348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216BED4E8((void **)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathDescendantToAnInstance(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return (void *)((char *)this + 168) != sub_216CF4390((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)((char *)this + 160), a2);
}

void *sub_216CF4390(pxrInternal__aapl__pxrReserved__::SdfPath *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (*(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1)) {
    return (void *)((char *)a1 + 8);
  }
  else {
    return sub_216AFBFC0(a1, a2, 1, (uint64_t)&v5);
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetMostAncestralInstancePath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  sub_216981010(&v12, a2);
  sub_21698105C((_DWORD *)&v12 + 1, (_DWORD *)a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  unint64_t v7 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  while (v12 != *v7)
  {
    unint64_t v8 = sub_216CF4390((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)((char *)this + 160), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
    if ((_DWORD *)((char *)this + 168) == v8) {
      break;
    }
    sub_2169C487C(a3, v8 + 7);
    sub_2169C48D4(a3 + 1, v8 + 8);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 + 7), &v10);
    sub_21697DE94((int *)&v12, &v10);
    sub_21697DEEC((int *)&v12 + 1, &v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_21697C414(&v10);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  return sub_21697C414(&v12);
}

void sub_216CF4528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754(v2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPrototypeForInstanceablePrimIndexPath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  char v5 = sub_21698EFF0((uint64_t)this + 160, a2);
  if ((_DWORD *)((char *)this + 168) == v5)
  {
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  else
  {
    uint64_t v6 = v5;
    sub_216981010(a3, v5 + 9);
    return sub_21698105C(a3 + 1, v6 + 10);
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPathInPrototypeForInstancePath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v26);
  if (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype(a2, v6))
  {
    unint64_t v7 = a3;
    unint64_t v8 = (void *)((char *)this + 120);
    unint64_t v9 = (void *)*((void *)this + 15);
    if (v9)
    {
      do
      {
        int v10 = sub_2169817E8(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 28));
        int v11 = v9 + 1;
        if (v10)
        {
          int v11 = v9;
          unint64_t v8 = v9;
        }
        unint64_t v9 = (void *)*v11;
      }
      while (*v11);
    }
    a3 = v7;
    if (v8 != *((void **)this + 14))
    {
      uint64_t v12 = (void *)*v8;
      if (*v8)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)v12[1];
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v8[2];
          BOOL v14 = *v13 == (void)v8;
          unint64_t v8 = v13;
        }
        while (v14);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v21, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 36), 1);
      if (v21[0] != *(void *)a2)
      {
        sub_2169C487C(&v25, v21);
        sub_2169C48D4(&v26, (_DWORD *)v21 + 1);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v21 + 1);
      sub_21697C414(v21);
    }
  }
  else
  {
    sub_2169C487C(&v25, a2);
    sub_2169C48D4(&v26, (_DWORD *)a2 + 1);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v25))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
    sub_216981010(&v23, &v25);
    sub_21698105C(&v24, &v26);
    while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v23))
    {
      char v15 = sub_216CF4390((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)((char *)this + 160), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
      if ((void *)((char *)this + 168) == v15) {
        break;
      }
      int v16 = sub_21698EFF0((uint64_t)this + 112, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 + 36));
      if ((void *)((char *)this + 120) == v16)
      {
        v21[0] = (uint64_t)"usd/instanceCache.cpp";
        v21[1] = (uint64_t)"GetPathInPrototypeForInstancePath";
        v21[2] = 783;
        v21[3] = (uint64_t)"SdfPath pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPathInPrototypeForInstancePath"
                          "(const SdfPath &) const";
        char v22 = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v21, "prototypeToSourceIt != _prototypeToSourcePrimIndexMap.end()", 0) & 1) == 0)break; {
      }
        }
      int v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 + 28);
      uint64_t v19 = *(void *)((char *)v16 + 36);
      uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v16 + 36);
      if (*(void *)((char *)v15 + 28) == v19)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v21, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 + 36), 1);
        sub_21697DE94(a3, (int *)v21);
        sub_21697DEEC(a3 + 1, (int *)v21 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v21 + 1);
        sub_21697C414(v21);
        break;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v21, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, v17, v18, 1);
      sub_21697DE94(&v23, (int *)v21);
      sub_21697DEEC(&v24, (int *)v21 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v21 + 1);
      sub_21697C414(v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_21697C414(&v23);
  }
  else
  {
    sub_21697D878(a3, &v25);
    sub_21697D8B4(a3 + 1, &v26);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  return sub_21697C414(&v25);
}

void sub_216CF4918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  sub_21697B754(a4);
  sub_21697B754((int *)va1);
  _Unwind_Resume(a1);
}

void sub_216CF4978(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      BOOL v3 = (void **)*v2;
      sub_216CF49BC(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216CF49BC(void **a1)
{
  uint64_t v2 = a1 + 17;
  sub_216981168(&v2);
  uint64_t v2 = a1 + 13;
  sub_216CF4B9C(&v2);
  uint64_t v2 = a1 + 10;
  sub_216981168(&v2);
  uint64_t v2 = a1 + 7;
  sub_216C4C1B8(&v2);
  uint64_t v2 = a1 + 3;
  sub_21682E488(&v2);
  uint64_t v2 = a1;
  sub_216C020DC(&v2);
}

_DWORD *sub_216CF4A40(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 8);
  char v4 = (void **)(a1 + 112);
  sub_216CF4B9C(&v4);
  char v4 = (void **)(a1 + 88);
  sub_216981168(&v4);
  char v4 = (void **)(a1 + 64);
  sub_216C4C1B8(&v4);
  char v4 = (void **)(a1 + 32);
  sub_21682E488(&v4);
  char v4 = v2;
  sub_216C020DC(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

void sub_216CF4ACC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 140));
  sub_21697C414((_DWORD *)(a1 + 136));
  uint64_t v2 = (void **)(a1 + 104);
  sub_216CF4B9C(&v2);
  uint64_t v2 = (void **)(a1 + 80);
  sub_216981168(&v2);
  uint64_t v2 = (void **)(a1 + 56);
  sub_216C4C1B8(&v2);
  uint64_t v2 = (void **)(a1 + 24);
  sub_21682E488(&v2);
  uint64_t v2 = (void **)a1;
  sub_216C020DC(&v2);
}

void **sub_216CF4B54(void **a1)
{
  BOOL v3 = a1 + 3;
  sub_21682E488(&v3);
  BOOL v3 = a1;
  sub_216C020DC(&v3);
  return a1;
}

void sub_216CF4B9C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    char v4 = v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_216CF4C34((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_216CF4C34(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);

  return sub_21697C414(a2);
}

uint64_t sub_216CF4C74(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = sub_216CF4CB8(a1, a2);
  sub_21697D878((_DWORD *)(v5 + 136), a3);
  sub_21697D8B4((_DWORD *)(a1 + 140), a3 + 1);
  return a1;
}

uint64_t sub_216CF4CB8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_216CF4E1C((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_216CF5044((char *)(a1 + 24), *(long long **)(a2 + 24), *(long long **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4));
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_216CF5170((void *)(a1 + 56), *(void *)(a2 + 56), *(void *)(a2 + 64), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216980EEC((void *)(a1 + 80), *(_DWORD **)(a2 + 80), *(_DWORD **)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  sub_216CF52D0((void *)(a1 + 104), *(_DWORD **)(a2 + 104), *(_DWORD **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2));
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

void sub_216CF4DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981168((void ***)va);
  sub_216C4C1B8((void ***)va);
  sub_216CF4B54(v2);
  _Unwind_Resume(a1);
}

void *sub_216CF4E1C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_216CF4EA4(result, a4);
    uint64_t result = (void *)sub_216CF4EFC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216CF4E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216C020DC(&a9);
  _Unwind_Resume(a1);
}

char *sub_216CF4EA4(void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    sub_21677CB10();
  }
  uint64_t result = (char *)sub_216C02804((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t sub_216CF4EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  long long v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 8;
    do
    {
      uint64_t v7 = v6 - 8;
      *(_DWORD *)uint64_t v4 = *(_DWORD *)(v6 - 8);
      sub_216C02920(v4 + 8, v6);
      *(_OWORD *)(v4 + 96) = *(_OWORD *)(v6 + 88);
      uint64_t v4 = v12 + 112;
      v12 += 112;
      v6 += 112;
    }
    while (v7 + 112 != a3);
  }
  char v10 = 1;
  sub_216CF4FB8((uint64_t)v9);
  return v4;
}

void sub_216CF4FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216CF4FB8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216CF4FF0((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216CF4FF0(uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 112;
      uint64_t result = (uint64_t *)sub_216C02174(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

char *sub_216CF5044(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2169D8290(result, a4);
    uint64_t result = sub_216CF50CC((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_216CF50AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_21682E488(&a9);
  _Unwind_Resume(a1);
}

char *sub_216CF50CC(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v10 = __dst;
  uint64_t v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216AC11F8(v4, v6);
      v6 += 3;
      uint64_t v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216C02F28((uint64_t)v8);
  return v4;
}

void sub_216CF515C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216CF5170(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_216CF51F8(result, a4);
    uint64_t result = (void *)sub_216CF524C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216CF51D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216C4C1B8(&a9);
  _Unwind_Resume(a1);
}

char *sub_216CF51F8(void *a1, unint64_t a2)
{
  if (a2 >= 0xF0F0F0F0F0F0F1) {
    sub_21677CB10();
  }
  uint64_t result = (char *)sub_216C59798((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[272 * v4];
  return result;
}

uint64_t sub_216CF524C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_216C59874(a4 + v7, a2 + v7);
      v7 += 272;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_216CF52AC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 272;
    do
    {
      sub_216C4C23C(v4 + v2);
      v2 -= 272;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CF52D0(void *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_216BD0794(result, a4);
    uint64_t result = sub_216CF5358((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216CF5338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216CF4B9C(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_216CF5358(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216981010(v4, v6);
      sub_21698105C(v4 + 1, v6 + 1);
      double v4[2] = v6[2];
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216CF53FC((uint64_t)v8);
  return v4;
}

uint64_t sub_216CF53FC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216CF5434((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216CF5434(uint64_t *result)
{
  uint64_t v2 = (void *)result[1];
  uint64_t v1 = (_DWORD **)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = (_DWORD *)*v2;
  if (*v1 != (_DWORD *)*v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 3;
      uint64_t result = (uint64_t *)sub_216CF4C34(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_216CF5488(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v5 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a1 + 128) = v5;
  sub_21697D878((_DWORD *)(a1 + 136), (_DWORD *)(a2 + 136));
  sub_21697D8B4((_DWORD *)(a1 + 140), (_DWORD *)(a2 + 140));
  return a1;
}

uint64_t sub_216CF556C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    sub_216CF5710((void **)a1);
    if (a4 > 0x249249249249249) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)) >= 0x124924924924924) {
      unint64_t v11 = 0x249249249249249;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_216CF4EA4((void *)a1, v11);
    uint64_t result = sub_216CF4EFC(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    uint64_t v13 = a2 + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4);
    sub_216CF5780((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t result = sub_216CF4EFC(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = sub_216CF5780((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 112;
      uint64_t result = (uint64_t)sub_216C02174(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_216CF5700(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216CF5708(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216CF5710(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 112;
        sub_216C02174((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_216CF5780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(a4 + 8, v5 + 8);
    sub_2169C487C((int *)(a4 + 88), (_DWORD *)(v5 + 88));
    sub_2169C48D4((int *)(a4 + 92), (_DWORD *)(v5 + 92));
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(v5 + 96);
    a4 += 112;
    v5 += 112;
  }
  while (v5 != v6);
  return v6;
}

void sub_216CF580C(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    sub_216C02D50((void **)a1);
    if (a4 > 0x555555555555555) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_2169D8290((void *)a1, v11);
    uint64_t v12 = sub_216CF50CC(v8, (long long *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    sub_216CF5990((int)&v17, __str, v13, v9);
    uint64_t v12 = sub_216CF50CC(v8, (long long *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_216CF5990((int)&v18, __str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      sub_21682E520(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_216CF5980(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216CF5988(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *sub_216CF5990(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  uint64_t v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    this += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_216CF5A00(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(void **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    sub_216CF5B7C((void **)a1);
    if (a4 > 0xF0F0F0F0F0F0F0) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x78787878787878) {
      unint64_t v11 = 0xF0F0F0F0F0F0F0;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_216CF51F8((void *)a1, v11);
    uint64_t result = sub_216CF524C(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    uint64_t v13 = a2 + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4);
    sub_216CF5BDC((uint64_t)&v16, a2, v13, (uint64_t)v9);
    uint64_t result = sub_216CF524C(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  sub_216CF5BDC((uint64_t)&v17, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t result = *(void *)(a1 + 8);
  if (result != v14)
  {
    do
      uint64_t result = sub_216C4C23C(result - 272);
    while (result != v15);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_216CF5B6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216CF5B74(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216CF5B7C(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = sub_216C4C23C(v3 - 272);
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_216CF5BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_216CF5CAC(a4, (long long *)v5);
    sub_216CF5D38((std::string *)(a4 + 48), (std::string *)(v5 + 48));
    sub_216B6E498((std::string *)(a4 + 104), (const std::string *)(v5 + 104));
    sub_216CF5E24(a4 + 136, (long long *)(v5 + 136));
    sub_216CF5E24(a4 + 184, (long long *)(v5 + 184));
    *(_WORD *)(a4 + 232) = *(_WORD *)(v5 + 232);
    *(void *)(a4 + 240) = *(void *)(v5 + 240);
    sub_2168CD2FC((atomic_uint **)(a4 + 248), (atomic_uint **)(v5 + 248));
    sub_2169C487C((int *)(a4 + 256), (_DWORD *)(v5 + 256));
    sub_2169C48D4((int *)(a4 + 260), (_DWORD *)(v5 + 260));
    *(void *)(a4 + 264) = *(void *)(v5 + 264);
    a4 += 272;
    v5 += 272;
  }
  while (v5 != v6);
  return v6;
}

void sub_216CF5CAC(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40))
  {
    if (*(unsigned char *)(a1 + 40)) {
      sub_216C45344(a1, a2);
    }
  }
  else if (*(unsigned char *)(a1 + 40))
  {
    sub_216CF5D04(a1);
  }
  else
  {
    long long v2 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v2;
    uint64_t v3 = *((void *)a2 + 4);
    *(void *)(a1 + 32) = v3;
    if (v3)
    {
      uint64_t v4 = (atomic_ullong *)(v3 - 16);
      if (*(void *)(a1 + 24)) {
        uint64_t v4 = *(atomic_ullong **)(a1 + 24);
      }
      atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 40) = 1;
  }
}

void sub_216CF5D04(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    sub_2169B4408((void *)a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
}

void sub_216CF5D38(std::string *__dst, std::string *__str)
{
  if (__dst[2].__r_.__value_.__s.__data_[0] == __str[2].__r_.__value_.__s.__data_[0])
  {
    if (__dst[2].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(__dst, __str);
      std::string::operator=(__dst + 1, __str + 1);
    }
  }
  else if (__dst[2].__r_.__value_.__s.__data_[0])
  {
    sub_216CF5DD8((uint64_t)__dst);
  }
  else
  {
    sub_216C59A58((char *)__dst, (long long *)__str);
    __dst[2].__r_.__value_.__s.__data_[0] = 1;
  }
}

void sub_216CF5DD8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 48) = 0;
  }
}

void sub_216CF5E24(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40))
  {
    if (*(unsigned char *)(a1 + 40)) {
      sub_216C48340(a1, a2);
    }
  }
  else if (*(unsigned char *)(a1 + 40))
  {
    sub_216CF5E7C(a1);
  }
  else
  {
    long long v2 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v2;
    uint64_t v3 = *((void *)a2 + 4);
    *(void *)(a1 + 32) = v3;
    if (v3)
    {
      uint64_t v4 = (atomic_ullong *)(v3 - 16);
      if (*(void *)(a1 + 24)) {
        uint64_t v4 = *(atomic_ullong **)(a1 + 24);
      }
      atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 40) = 1;
  }
}

void sub_216CF5E7C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    sub_2168F83DC(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
}

_DWORD *sub_216CF5EB0(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  char v9 = *(int **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 2) < a4)
  {
    sub_216CF6034((void *)a1);
    if (a4 > 0x1555555555555555) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 2);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_216BD0794((void *)a1, v11);
    uint64_t result = sub_216CF5358(v8, a2, a3, *(_DWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 2) < a4)
  {
    uint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 2];
    sub_216CF60A4((uint64_t)&v17, a2, v13, v9);
    uint64_t result = sub_216CF5358(v8, v13, a3, *(_DWORD **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = sub_216CF60A4((uint64_t)&v18, a2, a3, v9);
  uint64_t v15 = v14;
  char v16 = *(_DWORD **)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      uint64_t result = sub_216CF4C34(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_216CF6024(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216CF602C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216CF6034(void *a1)
{
  uint64_t v1 = (_DWORD *)*a1;
  if (*a1)
  {
    uint64_t v3 = (_DWORD *)a1[1];
    uint64_t v4 = (_DWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        sub_216CF4C34((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      uint64_t v4 = (_DWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_DWORD *sub_216CF60A4(uint64_t a1, _DWORD *a2, _DWORD *a3, int *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_2169C487C(a4, v5);
    sub_2169C48D4(a4 + 1, v5 + 1);
    a4[2] = v5[2];
    a4 += 3;
    v5 += 3;
  }
  while (v5 != v6);
  return v6;
}

_DWORD *sub_216CF611C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 8);
  sub_216981168(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

void *sub_216CF6168(void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * a2[16]);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = v4;
    if (v4 >= *(void *)&v2) {
      unint64_t v7 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v4;
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  char v9 = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = v9[1];
      if (v10 == v4)
      {
        if (pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::operator==(v9 + 2, a2)) {
          return v9;
        }
      }
      else
      {
        if (v6 > 1)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      char v9 = (void *)*v9;
    }
    while (v9);
  }
  return v9;
}

void *sub_216CF6270(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * a2[16]);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v7)
          {
            if (pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::operator==(v13 + 2, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v8) {
                v14 %= v8;
              }
            }
            else
            {
              v14 &= v8 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_216CF6500(a1, v7, a4, (uint64_t)v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *uint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t v13 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216CF6584((uint64_t)v24, 0);
  return v13;
}

void sub_216CF64E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CF6584((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CF6500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0xB0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_216CF4CB8((uint64_t)(v8 + 2), *a3);
  v8[19] = 0;
  v8[20] = 0;
  v8[21] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216CF656C(_Unwind_Exception *a1)
{
  sub_216CF6584(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216CF6584(uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216CF49BC(v2 + 2);
    }
    operator delete(v2);
  }
}

uint64_t sub_216CF65DC(uint64_t a1)
{
  sub_216CF6618(a1, *(_DWORD **)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216CF6618(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    int8x8_t v2 = a2;
    do
    {
      uint64_t v3 = *(_DWORD **)v2;
      sub_21698F1C8(v2 + 4);
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_216CF665C(const pxrInternal__aapl__pxrReserved__::SdfPath **a1, const pxrInternal__aapl__pxrReserved__::SdfPath **a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3, pxrInternal__aapl__pxrReserved__::SdfPath **a4, uint64_t **a5)
{
  unint64_t v8 = *a1;
  char v9 = *a2;
  if (v8 == v9)
  {
LABEL_8:
    char v9 = v8;
  }
  else
  {
    while (*a3 != *a4)
    {
      if (sub_2169817E8(v8, *a3))
      {
        sub_216981AC0(a5, *a1);
        uint64_t v12 = a1;
      }
      else
      {
        char v13 = sub_2169817E8(*a3, *a1);
        uint64_t v12 = a3;
        if ((v13 & 1) == 0)
        {
          *a1 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a1 + 8);
          uint64_t v12 = a3;
        }
      }
      void *v12 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*v12 + 8);
      unint64_t v8 = *a1;
      char v9 = *a2;
      if (*a1 == *a2) {
        goto LABEL_8;
      }
    }
  }
  unint64_t v14 = *a5;

  return sub_216CF6734(v8, v9, v14);
}

_DWORD *sub_216CF6734(_DWORD *a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  unint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v4 = a2;
  do
  {
    sub_216981AC0(&v6, v3);
    v3 += 2;
  }
  while (v3 != v4);
  return v4;
}

void sub_216CF6798(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216CF6798(a1, *a2);
    sub_216CF6798(a1, a2[1]);
    sub_216CF4A40((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_216CF67F4(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t **)sub_216AF190C((uint64_t)a1, &v12, a2);
  unint64_t v8 = *v7;
  if (!*v7)
  {
    char v9 = v7;
    sub_216CF6898((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_21677B358(a1, v12, v9, v11[0]);
    unint64_t v8 = v11[0];
    v11[0] = 0;
    sub_216CF6970((uint64_t)v11, 0);
  }
  return v8;
}

_DWORD *sub_216CF6898@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unint64_t v8 = operator new(0xB0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = sub_216CF690C(v8 + 8, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216CF68F4(_Unwind_Exception *a1)
{
  sub_216CF6970(v1, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_216CF690C(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v6 = sub_216981010(a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  sub_216CF4CB8((uint64_t)(a1 + 2), a3);
  return a1;
}

void sub_216CF695C(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

void sub_216CF6970(uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216CF4A40((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_216CF69C8(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_216CF4978(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *sub_216CF6A20(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * a2[16]);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v6)
          {
            if (pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::operator==(v12 + 2, a2)) {
              return v12;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v7) {
                v13 %= v7;
              }
            }
            else
            {
              v13 &= v7 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_216CF6CA0(a1, v6, a3, (uint64_t)v23);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  size_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    void *v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  uint64_t v12 = (void *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216CF6D5C((uint64_t)v23, 0);
  return v12;
}

void sub_216CF6C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CF6D5C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CF6CA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0xA0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_216CF6D18((uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216CF6D00(_Unwind_Exception *a1)
{
  sub_216CF6D5C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216CF6D18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216CF4CB8(a1, a2);
  sub_216981010((_DWORD *)(v4 + 136), (_DWORD *)(a2 + 136));
  sub_21698105C((_DWORD *)(a1 + 140), (_DWORD *)(a2 + 140));
  return a1;
}

void sub_216CF6D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216CF4ACC((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_216CF6DB4(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = v6;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = v6 & (v7 - 1);
    }
    uint8x8_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(void *)a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_216CF7024(a1, v6, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  unint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    *unint64_t v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  unint64_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216CF7100((uint64_t)v21, 0);
  return v10;
}

void sub_216CF700C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CF7100((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_216CF7024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0xA0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint8x8_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_216CF7094((_DWORD *)v8 + 4, *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216CF707C(_Unwind_Exception *a1)
{
  sub_216CF7100(v1, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_216CF7094(_DWORD *a1, _DWORD *a2)
{
  unint64_t v4 = sub_216981010(a1, a2);
  sub_21698105C(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::Usd_InstanceKey((pxrInternal__aapl__pxrReserved__::Usd_InstanceKey *)(a1 + 2));
  return a1;
}

void sub_216CF70E0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

void sub_216CF7100(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216CF4A40((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

_DWORD *sub_216CF7158(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = (void **)sub_216AF190C((uint64_t)a1, &v13, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint8x8_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    v11[1] = a1 + 1;
    uint8x8_t v9 = *a4;
    sub_216981010(v7 + 8, v9);
    sub_21698105C(v7 + 9, v9 + 1);
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = 0;
    char v12 = 1;
    sub_21677B358(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_216CF7220((uint64_t)v11, 0);
  }
  return v7;
}

void sub_216CF7220(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216CF611C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_216CF7278(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v8 = ((uint64_t)a2 - a1) >> 3;
  uint64_t v9 = ((char *)a3 - (char *)a2) >> 3;
  if (v9 >= v8) {
    uint64_t v10 = ((uint64_t)a2 - a1) >> 3;
  }
  else {
    uint64_t v10 = ((char *)a3 - (char *)a2) >> 3;
  }
  unint64_t v11 = (int *)sub_216CF7348(v10);
  sub_216CF73AC(a1, a2, a3, a4, v8, v9, v11, v12);
  if (v11)
  {
    operator delete(v11);
  }
}

void sub_216CF7330(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216CF7348(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    uint64_t result = operator new(8 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_216CF73AC(uint64_t result, int *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8)
{
  uint64_t v44 = a6;
  if (a6)
  {
    uint64_t v13 = (int *)result;
    while (v44 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      unint64_t v14 = 0;
      uint64_t v15 = -a5;
      while (1)
      {
        unint64_t v16 = &v13[v14 / 4];
        uint64_t result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13[v14 / 4]);
        if (result) {
          break;
        }
        v14 += 8;
        if (__CFADD__(v15++, 1)) {
          return result;
        }
      }
      uint64_t v18 = -v15;
      uint64_t v19 = v44;
      uint64_t v41 = a8;
      int v42 = a3;
      if (-v15 >= v44)
      {
        if (v15 == -1)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(&v13[v14 / 4], a2);
          return (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(&v13[v14 / 4 + 1], a2 + 1);
        }
        if (v15 > 0) {
          uint64_t v18 = 1 - v15;
        }
        uint64_t v25 = v18 >> 1;
        int v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13[2 * (v18 >> 1) + v14 / 4];
        int v26 = a3;
        unint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)a2;
        if (a2 != v26)
        {
          uint64_t v40 = v25;
          unint64_t v27 = ((char *)v42 - (char *)a2) >> 3;
          unint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)a2;
          do
          {
            uint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v22 + 8 * (v27 >> 1));
            int v29 = sub_2169817E8(v28, v23);
            if (v29) {
              v27 += ~(v27 >> 1);
            }
            else {
              v27 >>= 1;
            }
            if (v29) {
              unint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v28 + 8);
            }
          }
          while (v27);
          uint64_t v25 = v40;
          uint64_t v19 = v44;
        }
        uint64_t v21 = (v22 - (pxrInternal__aapl__pxrReserved__::SdfPath *)a2) >> 3;
      }
      else
      {
        if (v44 >= 0) {
          uint64_t v20 = v44;
        }
        else {
          uint64_t v20 = v44 + 1;
        }
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&a2[2 * (v20 >> 1)];
        int v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2;
        if ((char *)a2 - (char *)v13 != v14)
        {
          uint64_t v39 = v20 >> 1;
          unint64_t v24 = (uint64_t)((char *)a2 - (char *)v13 - v14) >> 3;
          int v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13[v14 / 4];
          do
          {
            if (sub_2169817E8(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v23 + 8 * (v24 >> 1))))
            {
              v24 >>= 1;
            }
            else
            {
              int v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v23 + 8 * (v24 >> 1) + 8);
              v24 += ~(v24 >> 1);
            }
          }
          while (v24);
          uint64_t v21 = v39;
          uint64_t v19 = v44;
        }
        uint64_t v25 = (uint64_t)(v23 - (const pxrInternal__aapl__pxrReserved__::SdfPath *)v13 - v14) >> 3;
      }
      if (v23 == (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2)
      {
        uint64_t v33 = (int *)v22;
      }
      else if (v22 == (pxrInternal__aapl__pxrReserved__::SdfPath *)a2)
      {
        uint64_t v33 = (int *)v23;
      }
      else
      {
        uint64_t v30 = v25;
        uint64_t v31 = v21;
        uint64_t v32 = sub_216CF7AF8((int *)v23, a2, (int *)v22);
        uint64_t v21 = v31;
        uint64_t v25 = v30;
        uint64_t v19 = v44;
        uint64_t v33 = v32;
      }
      a5 = -v25 - v15;
      uint64_t v34 = v19 - v21;
      if (v25 + v21 >= v19 - (v25 + v21) - v15)
      {
        uint64_t v36 = v25;
        uint64_t v37 = -v25 - v15;
        uint64_t v38 = v21;
        uint64_t result = sub_216CF73AC(v33, v22, v42, a4, v37, v34, a7, v41);
        a3 = v33;
        a2 = (int *)v23;
        a8 = v41;
        uint64_t v34 = v38;
        a5 = v36;
      }
      else
      {
        uint64_t v35 = v23;
        a8 = v41;
        uint64_t result = sub_216CF73AC(&v13[v14 / 4], v35, v33, a4, v25, v21, a7, v41);
        unint64_t v16 = v33;
        a2 = (int *)v22;
        a3 = v42;
      }
      uint64_t v44 = v34;
      uint64_t v13 = v16;
      if (!v34) {
        return result;
      }
    }
    return (uint64_t)sub_216CF76D8(v13, a2, a3, a4, a5, v44, a7);
  }
  return result;
}

int *sub_216CF76D8(int *a1, int *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      unint64_t v14 = 0;
      uint64_t v15 = a7;
    }
    else
    {
      unint64_t v14 = 0;
      uint64_t v15 = a7;
      unint64_t v16 = a1;
      do
      {
        sub_21697D878(v15, v16);
        sub_21697D8B4(v15 + 1, v16 + 1);
        ++v14;
        v16 += 2;
        v15 += 2;
      }
      while (v16 != a2);
    }
    unint64_t v18 = v14;
    uint64_t result = sub_216CF7850(a7, v15, a2, a3, a1);
  }
  else
  {
    if (a2 == a3)
    {
      unint64_t v11 = 0;
      uint64_t v12 = a7;
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = a7;
      uint64_t v13 = a2;
      do
      {
        sub_21697D878(v12, v13);
        sub_21697D8B4(v12 + 1, v13 + 1);
        ++v11;
        v13 += 2;
        v12 += 2;
      }
      while (v13 != a3);
    }
    unint64_t v18 = v11;
    uint64_t result = sub_216CF7920(v12, v12, (uint64_t)a7, a7, (uint64_t)a2, a2, (uint64_t)a1, a1, a3, a3);
  }
  if (a7) {
    return (int *)sub_216CF7A98(&v18, a7);
  }
  return result;
}

void sub_216CF7830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  if (v14) {
    sub_216CF7A98(&a14, v14);
  }
  _Unwind_Resume(exception_object);
}

int *sub_216CF7850(int *result, int *a2, int *a3, int *a4, int *a5)
{
  if (result != a2)
  {
    uint64_t v13 = v5;
    uint64_t v14 = v6;
    unint64_t v11 = result;
    while (a3 != a4)
    {
      if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11))
      {
        sub_21697DE94(a5, a3);
        uint64_t result = sub_21697DEEC(a5 + 1, a3 + 1);
        a3 += 2;
      }
      else
      {
        sub_21697DE94(a5, v11);
        uint64_t result = sub_21697DEEC(a5 + 1, v11 + 1);
        v11 += 2;
      }
      a5 += 2;
      if (v11 == a2) {
        return result;
      }
    }
    return sub_216A8E5E4((uint64_t)&v12, v11, a2, a5);
  }
  return result;
}

int *sub_216CF7920(int *result, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, int *a9, int *a10)
{
  uint64_t v19 = result;
  if (a2 != a4)
  {
    uint64_t v13 = a2;
    uint64_t v14 = a10;
    uint64_t v15 = a10 - 2;
    while (a6 != a8)
    {
      int v16 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 - 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a6 - 2));
      if (v16) {
        size_t v17 = a6 - 2;
      }
      else {
        size_t v17 = v13 - 2;
      }
      if (v16) {
        unint64_t v18 = a6;
      }
      else {
        unint64_t v18 = v13;
      }
      if (v16) {
        a6 -= 2;
      }
      else {
        v13 -= 2;
      }
      sub_21697DE94(v15, v17);
      uint64_t result = sub_21697DEEC(v15 + 1, v18 - 1);
      v14 -= 2;
      v15 -= 2;
      if (v13 == a4) {
        return result;
      }
    }
    return sub_216CF7A04(v19, v13, a4, a9, v14, &v20);
  }
  return result;
}

int *sub_216CF7A04@<X0>(int *result@<X0>, int *a2@<X1>, int *a3@<X3>, int *a4@<X4>, int *a5@<X5>, int **a6@<X8>)
{
  uint64_t v6 = a5;
  uint64_t v8 = a2;
  uint64_t v9 = result;
  if (a2 != a3)
  {
    char v12 = a5 - 1;
    do
    {
      sub_21697DE94(v12 - 1, v8 - 2);
      uint64_t result = sub_21697DEEC(v12, v8 - 1);
      v12 -= 2;
      v6 -= 2;
      v8 -= 2;
    }
    while (v8 != a3);
    uint64_t v8 = a3;
  }
  *a6 = v9;
  a6[1] = v8;
  a6[2] = a4;
  a6[3] = v6;
  return result;
}

unint64_t *sub_216CF7A98(unint64_t *result, _DWORD *a2)
{
  if (*result)
  {
    unint64_t v3 = result;
    unint64_t v4 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);
      uint64_t result = (unint64_t *)sub_21697C414(a2);
      ++v4;
      a2 += 2;
    }
    while (v4 < *v3);
  }
  return result;
}

int *sub_216CF7AF8(int *a1, int *a2, int *a3)
{
  unint64_t v4 = a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, v4 + 1);
  uint64_t v6 = a1 + 2;
  for (uint64_t i = v4 + 2; i != a3; i += 2)
  {
    if (v6 == v4) {
      unint64_t v4 = i;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v6, i);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v6 + 1, i + 1);
    v6 += 2;
  }
  if (v6 != v4)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v4;
    do
    {
      while (1)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v8, v9);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v8 + 1, v9 + 1);
        v8 += 2;
        v9 += 2;
        if (v9 == a3) {
          break;
        }
        if (v8 == v4) {
          unint64_t v4 = v9;
        }
      }
      uint64_t v9 = v4;
    }
    while (v8 != v4);
  }
  return v6;
}

void *sub_216CF7BD4(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *(void *)a2) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  uint64_t v14 = operator new(0x20uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *uint64_t v14 = 0;
  v14[1] = v7;
  sub_216A9AB30((_DWORD *)v14 + 4, *a4);
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *uint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  unint64_t v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216CF7E54((uint64_t)v24, 0);
  return v11;
}

void sub_216CF7E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216CF7E54((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_216CF7E54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21698F1C8(v2 + 4);
    }
    operator delete(v2);
  }
}

void *sub_216CF7EAC(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    int v6 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 4), a2);
    unint64_t v7 = v3 + 1;
    if (!v6)
    {
      unint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    unint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_2169817E8(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4))) {
    return v2;
  }
  return v5;
}

uint64_t sub_216CF7F28(void *a1, unsigned int *a2)
{
  uint64_t result = (uint64_t)sub_216A62F60(a1, a2);
  if (result)
  {
    sub_216851DB0(a1, (void *)result, (uint64_t)v4);
    sub_216CF7100((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

_DWORD *sub_216CF7F78(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  int v6 = sub_216981010(a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  sub_21697D878(a1 + 2, a3);
  sub_21697D8B4(a1 + 3, a3 + 1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::Usd_InstanceKey *pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::Usd_InstanceKey(pxrInternal__aapl__pxrReserved__::Usd_InstanceKey *this)
{
  pxrInternal__aapl__pxrReserved__::PcpInstanceKey::PcpInstanceKey(this);
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(void *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  uint64_t v4 = 0;
  char v5 = 0;
  sub_216CF96B8((uint64_t)&v4, (uint64_t)this, (uint64_t *)(v2 + 56), (unsigned int **)(v2 + 80), v2 + 104);
  *((void *)this + 16) = bswap64(0x9E3779B97F4A7C55 * v4);
  return this;
}

void sub_216CF8078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216CF4B9C((void ***)va);
  sub_216981168((void ***)va);
  sub_216C4C1B8((void ***)va);
  sub_216CF4B54(v4);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::_ComputeHash(pxrInternal__aapl__pxrReserved__::Usd_InstanceKey *this)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_216CF96B8((uint64_t)&v2, (uint64_t)this, (uint64_t *)this + 7, (unsigned int **)this + 10, (uint64_t)this + 104);
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::Usd_InstanceKey(uint64_t a1, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *a3, char **a4)
{
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::PcpInstanceKey::PcpInstanceKey((pxrInternal__aapl__pxrReserved__::PcpInstanceKey *)a1, a2);
  *(_OWORD *)(v8 + 56) = 0u;
  uint8x8_t v9 = (uint64_t *)(v8 + 56);
  *(_OWORD *)(v8 + 104) = 0u;
  int v26 = (void *)(v8 + 104);
  *(void *)(v8 + 120) = 0;
  unint64_t v27 = (unsigned int **)(v8 + 80);
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  pxrInternal__aapl__pxrReserved__::Usd_ComputeClipSetDefinitionsForPrimIndex(a2, (uint64_t *)(v8 + 56), 0);
  if (a3)
  {
    Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(a2);
    unint64_t v12 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)Path);
    pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::GetPaths(a3, &v30);
    uint64_t v13 = (int *)*((void *)&v30 + 1);
    uint64_t v14 = (int *)v30;
    if ((void)v30 == *((void *)&v30 + 1))
    {
      float v15 = (int *)v30;
    }
    else
    {
      do
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)Path))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v33, (pxrInternal__aapl__pxrReserved__::SdfPath *)v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)Path, v12, 1);
        }
        else
        {
          uint64_t v33 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
        }
        sub_21697DE94(v14, (int *)&v33);
        sub_21697DEEC(v14 + 1, (int *)&v33 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
        sub_21697C414(&v33);
        v14 += 2;
      }
      while (v14 != v13);
      uint64_t v14 = (int *)*((void *)&v30 + 1);
      float v15 = (int *)v30;
    }
    uint64_t v33 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
    BOOL v17 = sub_216AD6900(v15, v14, &v33);
    sub_216CF89E0((pxrInternal__aapl__pxrReserved__::SdfPath **)&v28, (char *)v15, (char *)v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    sub_21697C414(&v33);
    uint64_t v33 = (void **)&v30;
    sub_216981168(&v33);
    sub_216981200(v27);
    *(_OWORD *)(a1 + 80) = v28;
    *(void *)(a1 + 96) = v29;
    uint64_t v29 = 0;
    long long v28 = 0uLL;
    *(void *)&long long v30 = &v28;
    float v16 = (void ***)&v30;
  }
  else
  {
    sub_216CF86BC(v10, &v30);
    sub_216981200(v27);
    *(_OWORD *)(a1 + 80) = v30;
    *(void *)(a1 + 96) = v31;
    uint64_t v31 = 0;
    long long v30 = 0uLL;
    *(void *)&long long v28 = &v30;
    float v16 = (void ***)&v28;
  }
  sub_216981168(v16);
  unint64_t v18 = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(a2);
  int EffectiveRuleForPath = pxrInternal__aapl__pxrReserved__::UsdStageLoadRules::GetEffectiveRuleForPath(a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v18);
  long long v30 = 0uLL;
  uint64_t v31 = 0;
  unint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216CF52D0(&v30, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 2));
  size_t v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v19);
  uint64_t v21 = (int *)*((void *)&v30 + 1);
  unint64_t v22 = (int *)v30;
  if ((void)v30 != *((void *)&v30 + 1))
  {
    do
    {
      if (*(void *)v22 == *v18)
      {
        sub_2169C487C(v22, v20);
        sub_2169C48D4(v22 + 1, (_DWORD *)v20 + 1);
        v22[2] = EffectiveRuleForPath;
      }
      else
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v18))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v33, (pxrInternal__aapl__pxrReserved__::SdfPath *)v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v18, v20, 1);
        }
        else
        {
          uint64_t v33 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
        }
        sub_21697DE94(v22, (int *)&v33);
        sub_21697DEEC(v22 + 1, (int *)&v33 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
        sub_21697C414(&v33);
      }
      v22 += 3;
    }
    while (v22 != v21);
    int v23 = (int *)*((void *)&v30 + 1);
    unint64_t v22 = (int *)v30;
    if ((void)v30 != *((void *)&v30 + 1))
    {
      while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v22))
      {
        v22 += 3;
        if (v22 == v23)
        {
          unint64_t v22 = v23;
          goto LABEL_29;
        }
      }
      if (v22 != v23)
      {
        for (uint64_t i = v22 + 3; i != v23; i += 3)
        {
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(i))
          {
            sub_21697DE94(v22, i);
            sub_21697DEEC(v22 + 1, i + 1);
            v22[2] = i[2];
            v22 += 3;
          }
        }
      }
    }
  }
LABEL_29:
  sub_216CF8AC8((uint64_t)&v30, v22, *((int **)&v30 + 1));
  if ((void)v30 == *((void *)&v30 + 1) || *(void *)v30 != *(void *)v20) {
    sub_216CF8B58((uint64_t *)&v30, (int *)v30, v20, &EffectiveRuleForPath);
  }
  else {
    *(_DWORD *)(v30 + 8) = EffectiveRuleForPath;
  }
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStageLoadRules::SetRules(&v28, (_DWORD **)&v30);
  pxrInternal__aapl__pxrReserved__::UsdStageLoadRules::Minimize((pxrInternal__aapl__pxrReserved__::UsdStageLoadRules *)&v28);
  uint64_t v33 = (void **)&v30;
  sub_216CF4B9C(&v33);
  sub_216CF6034(v26);
  *(_OWORD *)(a1 + 104) = v28;
  *(void *)(a1 + 120) = v29;
  uint64_t v29 = 0;
  long long v28 = 0uLL;
  *(void *)&long long v30 = &v28;
  sub_216CF4B9C((void ***)&v30);
  *(void *)&long long v30 = 0;
  BYTE8(v30) = 0;
  sub_216CF96B8((uint64_t)&v30, a1, v9, v27, (uint64_t)v26);
  *(void *)(a1 + 128) = bswap64(0x9E3779B97F4A7C55 * v30);
  return a1;
}

void sub_216CF85EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11)
{
  a11 = a9;
  sub_216CF4B9C(&a11);
  a11 = a10;
  sub_216981168(&a11);
  sub_216C4C1B8(&a11);
  sub_216CF4B54(v11);
  _Unwind_Resume(a1);
}

void sub_216CF86BC(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, void *a2@<X8>)
{
  memset(v5, 0, sizeof(v5));
  char v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  uint64_t v4 = sub_216CF897C((pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)v5, v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_216980EEC(a2, *(_DWORD **)v4, *((_DWORD **)v4 + 1), (uint64_t)(*((void *)v4 + 1) - *(void *)v4) >> 3);
  int v6 = (void **)v5;
  sub_216981168(&v6);
}

void sub_216CF8728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216981168(&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::operator==(uint64_t *a1, uint64_t *a2)
{
  if (a1[16] != a2[16]) {
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::PcpInstanceKey::operator==(a1, a2)) {
    return 0;
  }
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  uint64_t v6 = a2[7];
  if (v5 - v4 != a2[8] - v6) {
    return 0;
  }
  while (v4 != v5)
  {
    if (!sub_216CF942C(v4, v6)) {
      return 0;
    }
    v4 += 272;
    v6 += 272;
  }
  uint64_t v8 = (char *)a1[10];
  unint64_t v7 = (char *)a1[11];
  uint8x8_t v9 = (void *)a2[10];
  if (v7 - v8 != a2[11] - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*(void *)v8 != *v9) {
      return 0;
    }
    v8 += 8;
    ++v9;
  }

  return pxrInternal__aapl__pxrReserved__::UsdStageLoadRules::operator==(a1 + 13, a2 + 13);
}

void sub_216CF8960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *sub_216CF897C(pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::GetUnion(a1, a2, (uint64_t)&v4);
  sub_216981200(a1);
  *(_OWORD *)a1 = v4;
  *((void *)a1 + 2) = v5;
  uint64_t v5 = 0;
  long long v4 = 0uLL;
  uint64_t v6 = (void **)&v4;
  sub_216981168(&v6);
  return a1;
}

pxrInternal__aapl__pxrReserved__::SdfPath **sub_216CF89E0(pxrInternal__aapl__pxrReserved__::SdfPath **a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_216CF8A40(a1, a2, a3, (a3 - a2) >> 3);
  pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::_ValidateAndNormalize(a1);
  return a1;
}

void sub_216CF8A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_216CF8A40(void *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_21677CACC(result, a4);
    uint64_t result = sub_216980F74((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216CF8AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216981168(&a9);
  _Unwind_Resume(a1);
}

int *sub_216CF8AC8(uint64_t a1, int *a2, int *a3)
{
  if (a2 != a3)
  {
    sub_216CF8D54((uint64_t)&v9, a3, *(int **)(a1 + 8), a2);
    uint64_t v6 = v5;
    unint64_t v7 = *(_DWORD **)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 3;
        sub_216CF4C34(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

int *sub_216CF8B58(uint64_t *a1, int *a2, _DWORD *a3, int *a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = *a1;
  uint64_t v8 = (int *)a1[1];
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - *a1) >> 2);
  unint64_t v13 = a1[2];
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = v13;
  if ((unint64_t)v8 >= v13)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v9) >> 2) + 1;
    if (v14 > 0x1555555555555555) {
      sub_21677CB10();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v9) >> 2);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v14;
    }
    uint64_t v23 = v11;
    if (v16) {
      BOOL v17 = (char *)sub_216B0D05C(v11, v16);
    }
    else {
      BOOL v17 = 0;
    }
    unint64_t v19 = v17;
    uint64_t v20 = (uint64_t)&v17[12 * v10];
    uint64_t v21 = v20;
    unint64_t v22 = &v17[12 * v16];
    sub_216CF8E9C(&v19, a3, a4);
    uint64_t v6 = (int *)sub_216CF8FF8((uint64_t)a1, &v19, v6);
    sub_216CF93B0(&v19);
  }
  else if (a2 == v8)
  {
    sub_216981010(a2, a3);
    sub_21698105C(v6 + 1, a3 + 1);
    *(_DWORD *)(v9 + 12 * v10 + 8) = *a4;
    a1[1] = (uint64_t)(v6 + 3);
  }
  else
  {
    uint64_t v21 = v11;
    sub_216981010(&v19, a3);
    sub_21698105C((_DWORD *)&v19 + 1, a3 + 1);
    LODWORD(v20) = *a4;
    sub_216CF8DCC((uint64_t)a1, (uint64_t)v6, a1[1], (uint64_t)(v6 + 3));
    sub_21697DE94(v6, (int *)&v19);
    sub_21697DEEC(v6 + 1, (int *)&v19 + 1);
    *(_DWORD *)(v9 + 12 * v10 + 8) = v20;
    sub_216CF4C34(v21, &v19);
  }
  return v6;
}

void sub_216CF8D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
}

int *sub_216CF8D54(uint64_t a1, int *a2, int *a3, int *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_21697DE94(a4, v5);
    sub_21697DEEC(a4 + 1, v5 + 1);
    a4[2] = v5[2];
    a4 += 3;
    v5 += 3;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_216CF8DCC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = (_DWORD *)v6;
  if (v7 < a3)
  {
    unint64_t v10 = (_DWORD *)(a2 + 4 * ((v6 - a4) >> 2) + 4);
    uint64_t v11 = (_DWORD *)(v6 + 4);
    do
    {
      sub_21697D878(v11 - 1, v10 - 1);
      sub_21697D8B4(v11, v10);
      v11[1] = v10[1];
      unint64_t v12 = v10 + 2;
      v10 += 3;
      v11 += 3;
    }
    while ((unint64_t)v12 < a3);
    uint64_t v8 = v11 - 1;
  }
  *(void *)(a1 + 8) = v8;
  return sub_216CF90AC((uint64_t)&v14, a2, v7, v6);
}

_DWORD *sub_216CF8E9C(void *a1, _DWORD *a2, int *a3)
{
  uint64_t v6 = (int *)a1[2];
  if (v6 == (int *)a1[3])
  {
    unint64_t v7 = (int *)a1[1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (int *)*a1) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = 0x5555555555555556 * (((uint64_t)v6 - *a1) >> 2);
      }
      unint64_t v13 = v12 >> 2;
      uint64_t v14 = a1[4];
      uint64_t v22 = a1[4];
      *(void *)&long long v20 = sub_216B0D05C(v14, v12);
      *((void *)&v20 + 1) = v20 + 12 * v13;
      *(void *)&long long v21 = *((void *)&v20 + 1);
      *((void *)&v21 + 1) = v20 + 12 * v15;
      sub_216CF9134(&v20, a1[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 2));
      long long v16 = v21;
      long long v17 = *(_OWORD *)a1;
      long long v18 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v20;
      *((_OWORD *)a1 + 1) = v16;
      long long v20 = v17;
      long long v21 = v18;
      sub_216CF93B0((void **)&v20);
      uint64_t v6 = (int *)a1[2];
    }
    else
    {
      int64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 2);
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = -3 * (v9 >> 1);
      sub_216CF8D54((uint64_t)&v20, v7, v6, &v7[-3 * (v9 >> 1)]);
      uint64_t v6 = v11;
      a1[1] += 4 * v10;
      a1[2] = v11;
    }
  }
  sub_216981010(v6, a2);
  uint64_t result = sub_21698105C(v6 + 1, a2 + 1);
  v6[2] = *a3;
  a1[2] += 12;
  return result;
}

void sub_216CF8FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_216CF8FF8(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_216CF91C0(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216CF9280(v7, a3, *(_DWORD **)(a1 + 8), (_DWORD *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_216CF90AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      sub_21697DE94((int *)(a4 + v7 - 12), (int *)(a3 + v7 - 12));
      sub_21697DEEC((int *)(a4 + v7 - 8), (int *)(a3 + v7 - 8));
      *(_DWORD *)(a4 + v7 - 4) = *(_DWORD *)(a3 + v7 - 4);
      v7 -= 12;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

_DWORD *sub_216CF9134(_DWORD *result, uint64_t a2, uint64_t a3)
{
  char v3 = result;
  uint64_t v4 = *((void *)result + 2);
  if (a3)
  {
    uint64_t v5 = v4 + 12 * a3;
    uint64_t v6 = (_DWORD *)(v4 + 4);
    uint64_t v7 = 12 * a3;
    uint64_t v8 = (_DWORD *)(a2 + 4);
    do
    {
      sub_21697D878(v6 - 1, v8 - 1);
      uint64_t result = sub_21697D8B4(v6, v8);
      v6[1] = v8[1];
      v6 += 3;
      v8 += 3;
      v7 -= 12;
    }
    while (v7);
  }
  else
  {
    uint64_t v5 = *((void *)result + 2);
  }
  *((void *)v3 + 2) = v5;
  return result;
}

uint64_t sub_216CF91C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      sub_21697D878((_DWORD *)(v7 - 12), (_DWORD *)(v9 - 12));
      sub_21697D8B4((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      *(_DWORD *)(v7 - 4) = *(_DWORD *)(v9 - 4);
      uint64_t v7 = *((void *)&v15 + 1) - 12;
      *((void *)&v15 + 1) -= 12;
      v9 -= 12;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216CF9324((uint64_t)v12);
  return v10;
}

_DWORD *sub_216CF9280(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_21697D878(v4, v6);
      sub_21697D8B4(v4 + 1, v6 + 1);
      double v4[2] = v6[2];
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216CF53FC((uint64_t)v8);
  return v4;
}

uint64_t sub_216CF9324(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216CF935C((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216CF935C(uint64_t *result)
{
  unint64_t v1 = *(_DWORD **)(result[2] + 8);
  uint64_t v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216CF4C34(v3, v1);
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216CF93B0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216CF93E4(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 12;
      uint64_t result = sub_216CF4C34(v4, (_DWORD *)(v1 - 12));
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216CF942C(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned char *)(a1 + 40)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if ((*(unsigned char *)(a1 + 40) != 0) != (v4 != 0)) {
      return 0;
    }
  }
  else
  {
    char v6 = sub_2169B42A0((uint64_t *)a1, a2);
    if ((v6 & 1) == 0) {
      return 0;
    }
  }
  int v7 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned char *)(a1 + 96)) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if ((*(unsigned char *)(a1 + 96) != 0) != (v7 != 0)) {
      return 0;
    }
  }
  else
  {
    char v9 = sub_2169B3B54((unsigned __int8 *)(a1 + 48), (unsigned __int8 *)(a2 + 48));
    if ((v9 & 1) == 0) {
      return 0;
    }
  }
  uint64_t result = sub_216CF95E4((unsigned __int8 *)(a1 + 104), (unsigned __int8 *)(a2 + 104));
  if (!result) {
    return result;
  }
  if (*(unsigned char *)(a1 + 176) && *(unsigned char *)(a2 + 176))
  {
    if (!sub_2168FC990((void *)(a1 + 136), a2 + 136)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 176) != 0) != (*(unsigned char *)(a2 + 176) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 224) && *(unsigned char *)(a2 + 224))
  {
    if (!sub_2168FC990((void *)(a1 + 184), a2 + 184)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 224) != 0) != (*(unsigned char *)(a2 + 224) != 0))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 233) && *(unsigned char *)(a2 + 233))
  {
    if (*(unsigned __int8 *)(a1 + 232) != *(unsigned __int8 *)(a2 + 232)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a1 + 233) != 0) != (*(unsigned char *)(a2 + 233) != 0))
  {
    return 0;
  }
  uint64_t v11 = sub_216851B24(a1 + 240);
  if (v11 == sub_216851B24(a2 + 240) && *(void *)(a1 + 256) == *(void *)(a2 + 256)) {
    return *(void *)(a1 + 264) == *(void *)(a2 + 264);
  }
  return 0;
}

uint64_t sub_216CF95E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[24]) {
    BOOL v2 = a2[24] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (a1[24] != 0) == (a2[24] != 0);
  }
  uint64_t v4 = a1[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a1[23];
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a1++;
    int v9 = v10;
    int v12 = *a2++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    BOOL v2 = v9 == v11;
    BOOL v3 = v9 == v11;
  }
  while (v2 && v14);
  return v3;
}

unint64_t sub_216CF96B8(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int **a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 48);
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_216CF96F4(a1, a3, a4, a5);
}

unint64_t sub_216CF96F4(uint64_t a1, uint64_t *a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1] - v8;
  if (v9)
  {
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * (v9 >> 4);
    do
    {
      --v10;
      uint64_t v11 = v8 + 272;
      sub_216CF97F0(a1, v8);
      uint64_t v8 = v11;
    }
    while (v10);
  }

  return sub_216CF9784(a1, a3, a4);
}

unint64_t sub_216CF9784(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  unint64_t v5 = pxrInternal__aapl__pxrReserved__::hash_value(a2);
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;

  return sub_216CF9BB0(a1, a3);
}

unint64_t sub_216CF97F0(uint64_t a1, uint64_t a2)
{
  unint64_t result = sub_216CF9840(a2);
  if (*(unsigned char *)(a1 + 8)) {
    result += (*(void *)a1 + result + (*(void *)a1 + result) * (*(void *)a1 + result)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = result;
  return result;
}

unint64_t sub_216CF9840(uint64_t a1)
{
  uint64_t v4 = 0;
  char v5 = 0;
  sub_216CF99B0((uint64_t)&v4, (uint64_t *)(a1 + 264), a1 + 240, (unsigned int *)(a1 + 256));
  unint64_t result = bswap64(0x9E3779B97F4A7C55 * v4);
  unint64_t v3 = result;
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v4 = 0;
    char v5 = 0;
    sub_216CF9A54((unint64_t)&v4, (uint64_t *)&v3, (uint64_t *)a1);
    unint64_t result = bswap64(0x9E3779B97F4A7C55 * v4);
    unint64_t v3 = result;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v4 = 0;
    char v5 = 0;
    sub_216CF9A88((uint64_t)&v4, (uint64_t *)&v3, (pxrInternal__aapl__pxrReserved__ *)(a1 + 48));
    unint64_t result = bswap64(0x9E3779B97F4A7C55 * v4);
    unint64_t v3 = result;
  }
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v4 = 0;
    char v5 = 0;
    sub_216CF9ABC((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (uint64_t *)&v3, a1 + 104);
    unint64_t result = bswap64(0x9E3779B97F4A7C55 * v4);
    unint64_t v3 = result;
  }
  if (*(unsigned char *)(a1 + 176))
  {
    uint64_t v4 = 0;
    char v5 = 0;
    sub_216CF9B04((uint64_t)&v4, (uint64_t *)&v3, (uint64_t *)(a1 + 136));
    unint64_t result = bswap64(0x9E3779B97F4A7C55 * v4);
    unint64_t v3 = result;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v4 = 0;
    char v5 = 0;
    sub_216CF9B04((uint64_t)&v4, (uint64_t *)&v3, (uint64_t *)(a1 + 184));
    unint64_t result = bswap64(0x9E3779B97F4A7C55 * v4);
  }
  if (*(unsigned char *)(a1 + 233)) {
    return bswap64(0x9E3779B97F4A7C55* (*(unsigned __int8 *)(a1 + 232)+ ((result+ *(unsigned __int8 *)(a1 + 232)+ (result + *(unsigned __int8 *)(a1 + 232)) * (result + *(unsigned __int8 *)(a1 + 232))) >> 1)));
  }
  return result;
}

uint64_t sub_216CF99B0(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (unint64_t)(*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_216CF99E8(a1, a3, a4);
}

uint64_t sub_216CF99E8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = sub_216851B24(a2);
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;

  return sub_2169827F8(a1, a3);
}

unint64_t sub_216CF9A54(unint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (unint64_t)(*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return sub_216C4C70C(a1, a3);
}

unint64_t sub_216CF9A88(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (unint64_t)(*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return sub_2169B4220(a1, a3);
}

unint64_t sub_216CF9ABC(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  if (*((unsigned char *)a1 + 8)) {
    v3 += (unint64_t)(*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *((unsigned char *)a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  int v4 = *(char *)(a3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)a3;
  }
  else {
    uint64_t v5 = *(pxrInternal__aapl__pxrReserved__ **)a3;
  }
  if (v4 >= 0) {
    uint64_t v6 = (char *)*(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v6 = *(char **)(a3 + 8);
  }
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v5, v6);
}

uint64_t sub_216CF9B04(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (unint64_t)(*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return sub_216CF9B38(a1, a3);
}

uint64_t sub_216CF9B38(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)unint64_t result = v3;
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = (double *)a2[4];
    do
    {
      --v4;
      uint64_t v6 = v5 + 2;
      unint64_t result = sub_2168FC920(v2, v5);
      uint64_t v5 = v6;
    }
    while (v4);
  }
  return result;
}

unint64_t sub_216CF9BB0(uint64_t a1, uint64_t a2)
{
  unint64_t result = pxrInternal__aapl__pxrReserved__::hash_value(a2);
  if (*(unsigned char *)(a1 + 8)) {
    result += (*(void *)a1 + result + (*(void *)a1 + result) * (*(void *)a1 + result)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  if ((unint64_t)this - 0x20000000 >= 0xFFFFFFFFE0000001
    && ((unint64_t v1 = (unint64_t)(2 * (void)this + 7) >> 3, 0x7FFFFFFF - v1 >= 4 * (uint64_t)this)
      ? (BOOL v2 = 0x7FFFFFFF - v1 - 4 * (void)this >= 4)
      : (BOOL v2 = 0),
        v2))
  {
    return pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)(4 * (void)this + v1 + 4));
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize(0);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  if ((unint64_t)this - 0x20000000 < 0xFFFFFFFFE0000001) {
    return 0;
  }
  unint64_t v2 = (unint64_t)(2 * (void)this + 7) >> 3;
  if (0x7FFFFFFF - v2 >= 4 * (uint64_t)this && 0x7FFFFFFF - v2 - 4 * (void)this >= 4) {
    return 4 * (void)this + v2 + 4;
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this, const int *a2, char *a3, char *a4)
{
  uint64_t v5 = a2;
  unint64_t v7 = 4 * (void)a2;
  uint64_t v8 = 2 * (void)a2;
  if ((unint64_t)(a2 - 0x8000000) >= 0xFFFFFFFFE0000001)
  {
    unint64_t v11 = 0x7FFFFFFF - ((unint64_t)(v8 + 7) >> 3);
    if (v11 - 4 * (void)a2 >= 4 && v11 >= v7) {
      size_t v13 = v7 + ((unint64_t)(v8 + 7) >> 3) + 4;
    }
    else {
      size_t v13 = 0;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](v13);
    goto LABEL_11;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](0);
  if (v5)
  {
LABEL_11:
    v45 = a3;
    sub_216CFBFB0((uint64_t)&v46, 0, 0.0, 0.5);
    uint64_t v14 = 0;
    int v15 = 0;
    int v16 = 0;
    unint64_t v17 = 0;
    do
    {
      LODWORD(v49) = *(_DWORD *)((char *)this + v14) - v16;
      unint64_t v48 = &v49;
      long long v18 = sub_216CFC244(&v46, (int *)&v49, (uint64_t)&unk_2174BFD90, (int **)&v48);
      unint64_t v19 = *((void *)v18 + 2) + 1;
      *((void *)v18 + 2) = v19;
      if (v19 <= v17)
      {
        if (v19 == v17 && (int)v49 > v15) {
          int v15 = (int)v49;
        }
      }
      else
      {
        int v15 = (int)v49;
        unint64_t v17 = v19;
      }
      int v16 = *(_DWORD *)((char *)this + v14);
      v14 += 4;
    }
    while (v7 != v14);
    uint64_t v49 = (void **)&v47;
    sub_216CFC1E4(&v49);
    *(_DWORD *)uint64_t v9 = v15;
    long long v20 = (char *)v9 + 4;
    long long v21 = (char *)v9 + ((unint64_t)(v8 + 7) >> 3) + 4;
    if ((unint64_t)v5 < 4)
    {
      int v22 = 0;
      a3 = v45;
    }
    else
    {
      int v22 = 0;
      a3 = v45;
      do
      {
        int v23 = 0;
        char v24 = 0;
        do
        {
          int v25 = v22;
          int v26 = *(_DWORD *)this;
          this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)this + 4);
          int v22 = v26;
          int v27 = v26 - v25;
          if (v26 - v25 != v15)
          {
            if (v27 == (char)v27)
            {
              int v28 = 1 << v23;
              *long long v21 = v27;
              uint64_t v29 = 1;
            }
            else
            {
              int v28 = 3 << v23;
              *(_DWORD *)long long v21 = v27;
              uint64_t v29 = 4;
            }
            v21 += v29;
            v24 |= v28;
          }
          v23 += 2;
        }
        while (v23 != 8);
        *v20++ = v24;
        --v5;
      }
      while ((unint64_t)v5 > 3);
    }
    if (v5 == (const int *)1)
    {
      int v37 = *(_DWORD *)this - v22;
      if (v37 == v15)
      {
        char v31 = 0;
      }
      else if (v37 == (char)v37)
      {
        *v21++ = v37;
        char v31 = 1;
      }
      else
      {
        *(_DWORD *)long long v21 = v37;
        v21 += 4;
        char v31 = 3;
      }
    }
    else if (v5 == (const int *)2)
    {
      int v38 = *(_DWORD *)this;
      int v39 = *(_DWORD *)this - v22;
      if (v39 == v15)
      {
        char v31 = 0;
      }
      else if (v39 == (char)v39)
      {
        *v21++ = v39;
        char v31 = 1;
      }
      else
      {
        *(_DWORD *)long long v21 = v39;
        v21 += 4;
        char v31 = 3;
      }
      int v40 = *((_DWORD *)this + 1) - v38;
      if (v40 != v15)
      {
        if (v40 == (char)v40)
        {
          *long long v21 = v40;
          char v41 = 4;
          uint64_t v42 = 1;
        }
        else
        {
          *(_DWORD *)long long v21 = v40;
          char v41 = 12;
          uint64_t v42 = 4;
        }
        v21 += v42;
        v31 |= v41;
      }
    }
    else
    {
      if (v5 != (const int *)3)
      {
LABEL_57:
        unint64_t v10 = v21 - (unsigned char *)v9;
        goto LABEL_58;
      }
      int v30 = 0;
      char v31 = 0;
      do
      {
        int v33 = *(_DWORD *)this;
        this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)this + 4);
        int v32 = v33;
        int v34 = v33 - v22;
        if (v33 - v22 != v15)
        {
          if (v34 == (char)v34)
          {
            int v35 = 1 << v30;
            *long long v21 = v34;
            uint64_t v36 = 1;
          }
          else
          {
            int v35 = 3 << v30;
            *(_DWORD *)long long v21 = v34;
            uint64_t v36 = 4;
          }
          v21 += v36;
          v31 |= v35;
        }
        v30 += 2;
        int v22 = v32;
      }
      while (v30 != 6);
    }
    char *v20 = v31;
    goto LABEL_57;
  }
  unint64_t v10 = 0;
LABEL_58:
  uint64_t v43 = pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer(v9, a3, v10);
  operator delete[](v9);
  return v43;
}

void sub_216CFA058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete[](v10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this, const unsigned int *a2, char *a3, char *a4)
{
  uint64_t v5 = a2;
  unint64_t v7 = 4 * (void)a2;
  uint64_t v8 = 2 * (void)a2;
  if ((unint64_t)(a2 - 0x10000000) >= 0xFFFFFFFFC0000001)
  {
    unint64_t v11 = 0xFFFFFFFF - ((unint64_t)(v8 + 7) >> 3);
    if (v11 - 4 * (void)a2 >= 4 && v11 >= v7) {
      size_t v13 = v7 + ((unint64_t)(v8 + 7) >> 3) + 4;
    }
    else {
      size_t v13 = 0;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](v13);
    goto LABEL_11;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](0);
  if (v5)
  {
LABEL_11:
    v45 = a3;
    sub_216CFBFB0((uint64_t)&v46, 0, 0.0, 0.5);
    uint64_t v14 = 0;
    int v15 = 0;
    unint64_t v16 = 0;
    int v17 = 0;
    do
    {
      LODWORD(v49) = *(_DWORD *)((char *)this + v14) - v15;
      unint64_t v48 = &v49;
      long long v18 = sub_216CFC244(&v46, (int *)&v49, (uint64_t)&unk_2174BFD90, (int **)&v48);
      unint64_t v19 = *((void *)v18 + 2) + 1;
      *((void *)v18 + 2) = v19;
      if (v19 <= v16)
      {
        if (v19 == v16 && (int)v49 > v17) {
          int v17 = (int)v49;
        }
      }
      else
      {
        int v17 = (int)v49;
        unint64_t v16 = v19;
      }
      int v15 = *(_DWORD *)((char *)this + v14);
      v14 += 4;
    }
    while (v7 != v14);
    uint64_t v49 = (void **)&v47;
    sub_216CFC1E4(&v49);
    *(_DWORD *)uint64_t v9 = v17;
    long long v20 = (char *)v9 + 4;
    long long v21 = (char *)v9 + ((unint64_t)(v8 + 7) >> 3) + 4;
    if ((unint64_t)v5 < 4)
    {
      int v22 = 0;
      a3 = v45;
    }
    else
    {
      int v22 = 0;
      a3 = v45;
      do
      {
        int v23 = 0;
        char v24 = 0;
        do
        {
          int v25 = v22;
          int v26 = *(_DWORD *)this;
          this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)this + 4);
          int v22 = v26;
          int v27 = v26 - v25;
          if (v26 - v25 != v17)
          {
            if (v27 == (char)v27)
            {
              int v28 = 1 << v23;
              *long long v21 = v27;
              uint64_t v29 = 1;
            }
            else
            {
              int v28 = 3 << v23;
              *(_DWORD *)long long v21 = v27;
              uint64_t v29 = 4;
            }
            v21 += v29;
            v24 |= v28;
          }
          v23 += 2;
        }
        while (v23 != 8);
        *v20++ = v24;
        --v5;
      }
      while ((unint64_t)v5 > 3);
    }
    if (v5 == (const unsigned int *)1)
    {
      int v37 = *(_DWORD *)this - v22;
      if (v37 == v17)
      {
        char v31 = 0;
      }
      else if (v37 == (char)v37)
      {
        *v21++ = v37;
        char v31 = 1;
      }
      else
      {
        *(_DWORD *)long long v21 = v37;
        v21 += 4;
        char v31 = 3;
      }
    }
    else if (v5 == (const unsigned int *)2)
    {
      int v38 = *(_DWORD *)this;
      int v39 = *(_DWORD *)this - v22;
      if (v39 == v17)
      {
        char v31 = 0;
      }
      else if (v39 == (char)v39)
      {
        *v21++ = v39;
        char v31 = 1;
      }
      else
      {
        *(_DWORD *)long long v21 = v39;
        v21 += 4;
        char v31 = 3;
      }
      int v40 = *((_DWORD *)this + 1) - v38;
      if (v40 != v17)
      {
        if (v40 == (char)v40)
        {
          *long long v21 = v40;
          char v41 = 4;
          uint64_t v42 = 1;
        }
        else
        {
          *(_DWORD *)long long v21 = v40;
          char v41 = 12;
          uint64_t v42 = 4;
        }
        v21 += v42;
        v31 |= v41;
      }
    }
    else
    {
      if (v5 != (const unsigned int *)3)
      {
LABEL_57:
        unint64_t v10 = v21 - (unsigned char *)v9;
        goto LABEL_58;
      }
      int v30 = 0;
      char v31 = 0;
      do
      {
        int v33 = *(_DWORD *)this;
        this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)this + 4);
        int v32 = v33;
        int v34 = v33 - v22;
        if (v33 - v22 != v17)
        {
          if (v34 == (char)v34)
          {
            int v35 = 1 << v30;
            *long long v21 = v34;
            uint64_t v36 = 1;
          }
          else
          {
            int v35 = 3 << v30;
            *(_DWORD *)long long v21 = v34;
            uint64_t v36 = 4;
          }
          v21 += v36;
          v31 |= v35;
        }
        v30 += 2;
        int v22 = v32;
      }
      while (v30 != 6);
    }
    char *v20 = v31;
    goto LABEL_57;
  }
  unint64_t v10 = 0;
LABEL_58:
  uint64_t v43 = pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer(v9, a3, v10);
  operator delete[](v9);
  return v43;
}

void sub_216CFA448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete[](v10);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this, char *a2, _DWORD *a3, int64_t a4, char *__dst, char *a6)
{
  uint64_t v6 = __dst;
  unint64_t v7 = a4;
  if ((unint64_t)(a4 - 0x20000000) >= 0xFFFFFFFFE0000001)
  {
    unint64_t v13 = (unint64_t)(2 * a4 + 7) >> 3;
    if (0x7FFFFFFF - v13 >= 4 * a4 && 0x7FFFFFFF - v13 - 4 * a4 >= 4) {
      size_t v11 = 4 * a4 + v13 + 4;
    }
    else {
      size_t v11 = 0;
    }
    if (__dst) {
      goto LABEL_3;
    }
  }
  else
  {
    size_t v11 = 0;
    if (__dst)
    {
LABEL_3:
      int v12 = 0;
      goto LABEL_12;
    }
  }
  int v12 = (char *)operator new[](v11);
  uint64_t v6 = v12;
LABEL_12:
  unint64_t v15 = pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(this, v6, a2, v11);
  if (!v15)
  {
LABEL_30:
    unint64_t v7 = 0;
    goto LABEL_31;
  }
  if (v15 <= 3)
  {
    v51 = "usd/integerCoding.cpp";
    v52 = "_DecodeIntegers";
    uint64_t v53 = 400;
    v54 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = int]";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_30;
  }
  unint64_t v16 = 2 * v7 + 7;
  unint64_t v17 = (v16 >> 3) + 4;
  if (v17 > v15)
  {
    v51 = "usd/integerCoding.cpp";
    v52 = "_DecodeIntegers";
    uint64_t v53 = 413;
    v54 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = int]";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_30;
  }
  unint64_t v19 = v6 + 4;
  int v18 = *(_DWORD *)v6;
  if (v16 >= 8)
  {
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    int v23 = (unsigned __int8 *)(v6 + 4);
    do
    {
      uint64_t v24 = 0;
      unsigned int v26 = *v23++;
      unsigned int v25 = v26;
      unint64_t v27 = v21;
      do
      {
        if (v27 >= v7) {
          break;
        }
        switch((v25 >> v24) & 3)
        {
          case 1u:
            ++v20;
            break;
          case 2u:
            v20 += 2;
            break;
          case 3u:
            v20 += 4;
            break;
          default:
            break;
        }
        v24 += 2;
        ++v27;
      }
      while (v24 != 8);
      ++v22;
      v21 += 4;
    }
    while (v22 != v16 >> 3);
  }
  else
  {
    uint64_t v20 = 0;
  }
  if (v20 + v17 > v15)
  {
    v51 = "usd/integerCoding.cpp";
    v52 = "_DecodeIntegers";
    uint64_t v53 = 421;
    v54 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = int]";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read variable length integer data section.");
    goto LABEL_30;
  }
  uint64_t v29 = &v19[v16 >> 3];
  int v30 = 0;
  if (v7 < 4)
  {
    unint64_t i = v7;
  }
  else
  {
    for (unint64_t i = v7; i > 3; i -= 4)
    {
      int v32 = 0;
      unsigned int v34 = *v19++;
      unsigned int v33 = v34;
      do
      {
        int v35 = v18;
        switch((v33 >> v32) & 3)
        {
          case 1u:
            int v36 = *v29++;
            int v35 = v36;
            break;
          case 2u:
            int v37 = *(__int16 *)v29;
            v29 += 2;
            int v35 = v37;
            break;
          case 3u:
            int v38 = *(_DWORD *)v29;
            v29 += 4;
            int v35 = v38;
            break;
          default:
            break;
        }
        v30 += v35;
        *a3++ = v30;
        v32 += 2;
      }
      while (v32 != 8);
    }
    unint64_t v19 = &v6[((v7 - 4) >> 2) + 5];
  }
  switch(i)
  {
    case 3uLL:
      int v39 = 0;
      unsigned int v40 = *v19;
      do
      {
        int v41 = v18;
        switch((v40 >> v39) & 3)
        {
          case 1u:
            int v42 = *v29++;
            int v41 = v42;
            break;
          case 2u:
            int v43 = *(__int16 *)v29;
            v29 += 2;
            int v41 = v43;
            break;
          case 3u:
            int v44 = *(_DWORD *)v29;
            v29 += 4;
            int v41 = v44;
            break;
          default:
            break;
        }
        v30 += v41;
        *a3++ = v30;
        v39 += 2;
      }
      while (v39 != 6);
      break;
    case 2uLL:
      unsigned int v45 = *v19;
      int v46 = v18;
      switch(v45 & 3)
      {
        case 1u:
          int v47 = *v29++;
          int v46 = v47;
          break;
        case 2u:
          int v48 = *(__int16 *)v29;
          v29 += 2;
          int v46 = v48;
          break;
        case 3u:
          int v49 = *(_DWORD *)v29;
          v29 += 4;
          int v46 = v49;
          break;
        default:
          break;
      }
      int v50 = v46 + v30;
      *a3 = v50;
      switch((v45 >> 2) & 3)
      {
        case 1u:
          int v18 = *v29;
          break;
        case 2u:
          int v18 = *(__int16 *)v29;
          break;
        case 3u:
          int v18 = *(_DWORD *)v29;
          break;
        default:
          break;
      }
      a3[1] = v18 + v50;
      break;
    case 1uLL:
      switch(*v19 & 3)
      {
        case 1:
          int v18 = *v29;
          break;
        case 2:
          int v18 = *(__int16 *)v29;
          break;
        case 3:
          int v18 = *(_DWORD *)v29;
          break;
        default:
          break;
      }
      *a3 = v18 + v30;
      break;
  }
LABEL_31:
  if (v12) {
    operator delete[](v12);
  }
  return v7;
}

{
  char *v6;
  unint64_t v7;
  size_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  char *v29;
  int v30;
  unint64_t i;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  char *v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  char v55;

  uint64_t v6 = __dst;
  unint64_t v7 = a4;
  if ((unint64_t)(a4 - 0x20000000) >= 0xFFFFFFFFE0000001)
  {
    unint64_t v13 = (unint64_t)(2 * a4 + 7) >> 3;
    if (0x7FFFFFFF - v13 >= 4 * a4 && 0x7FFFFFFF - v13 - 4 * a4 >= 4) {
      size_t v11 = 4 * a4 + v13 + 4;
    }
    else {
      size_t v11 = 0;
    }
    if (__dst) {
      goto LABEL_3;
    }
  }
  else
  {
    size_t v11 = 0;
    if (__dst)
    {
LABEL_3:
      int v12 = 0;
      goto LABEL_12;
    }
  }
  int v12 = (char *)operator new[](v11);
  uint64_t v6 = v12;
LABEL_12:
  unint64_t v15 = pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(this, v6, a2, v11);
  if (!v15)
  {
LABEL_30:
    unint64_t v7 = 0;
    goto LABEL_31;
  }
  if (v15 <= 3)
  {
    v51 = "usd/integerCoding.cpp";
    v52 = "_DecodeIntegers";
    uint64_t v53 = 400;
    v54 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = unsigned int]";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_30;
  }
  unint64_t v16 = 2 * v7 + 7;
  unint64_t v17 = (v16 >> 3) + 4;
  if (v17 > v15)
  {
    v51 = "usd/integerCoding.cpp";
    v52 = "_DecodeIntegers";
    uint64_t v53 = 413;
    v54 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = unsigned int]";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_30;
  }
  unint64_t v19 = v6 + 4;
  int v18 = *(_DWORD *)v6;
  if (v16 >= 8)
  {
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    int v23 = (unsigned __int8 *)(v6 + 4);
    do
    {
      uint64_t v24 = 0;
      unsigned int v26 = *v23++;
      unsigned int v25 = v26;
      unint64_t v27 = v21;
      do
      {
        if (v27 >= v7) {
          break;
        }
        switch((v25 >> v24) & 3)
        {
          case 1u:
            ++v20;
            break;
          case 2u:
            v20 += 2;
            break;
          case 3u:
            v20 += 4;
            break;
          default:
            break;
        }
        v24 += 2;
        ++v27;
      }
      while (v24 != 8);
      ++v22;
      v21 += 4;
    }
    while (v22 != v16 >> 3);
  }
  else
  {
    uint64_t v20 = 0;
  }
  if (v20 + v17 > v15)
  {
    v51 = "usd/integerCoding.cpp";
    v52 = "_DecodeIntegers";
    uint64_t v53 = 421;
    v54 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = unsigned int]";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read variable length integer data section.");
    goto LABEL_30;
  }
  uint64_t v29 = &v19[v16 >> 3];
  int v30 = 0;
  if (v7 < 4)
  {
    unint64_t i = v7;
  }
  else
  {
    for (unint64_t i = v7; i > 3; i -= 4)
    {
      int v32 = 0;
      unsigned int v34 = *v19++;
      unsigned int v33 = v34;
      do
      {
        int v35 = v18;
        switch((v33 >> v32) & 3)
        {
          case 1u:
            int v36 = *v29++;
            int v35 = v36;
            break;
          case 2u:
            int v37 = *(__int16 *)v29;
            v29 += 2;
            int v35 = v37;
            break;
          case 3u:
            int v38 = *(_DWORD *)v29;
            v29 += 4;
            int v35 = v38;
            break;
          default:
            break;
        }
        v30 += v35;
        *a3++ = v30;
        v32 += 2;
      }
      while (v32 != 8);
    }
    unint64_t v19 = &v6[((v7 - 4) >> 2) + 5];
  }
  switch(i)
  {
    case 3uLL:
      int v39 = 0;
      unsigned int v40 = *v19;
      do
      {
        int v41 = v18;
        switch((v40 >> v39) & 3)
        {
          case 1u:
            int v42 = *v29++;
            int v41 = v42;
            break;
          case 2u:
            int v43 = *(__int16 *)v29;
            v29 += 2;
            int v41 = v43;
            break;
          case 3u:
            int v44 = *(_DWORD *)v29;
            v29 += 4;
            int v41 = v44;
            break;
          default:
            break;
        }
        v30 += v41;
        *a3++ = v30;
        v39 += 2;
      }
      while (v39 != 6);
      break;
    case 2uLL:
      unsigned int v45 = *v19;
      int v46 = v18;
      switch(v45 & 3)
      {
        case 1u:
          int v47 = *v29++;
          int v46 = v47;
          break;
        case 2u:
          int v48 = *(__int16 *)v29;
          v29 += 2;
          int v46 = v48;
          break;
        case 3u:
          int v49 = *(_DWORD *)v29;
          v29 += 4;
          int v46 = v49;
          break;
        default:
          break;
      }
      int v50 = v46 + v30;
      *a3 = v50;
      switch((v45 >> 2) & 3)
      {
        case 1u:
          int v18 = *v29;
          break;
        case 2u:
          int v18 = *(__int16 *)v29;
          break;
        case 3u:
          int v18 = *(_DWORD *)v29;
          break;
        default:
          break;
      }
      a3[1] = v18 + v50;
      break;
    case 1uLL:
      switch(*v19 & 3)
      {
        case 1:
          int v18 = *v29;
          break;
        case 2:
          int v18 = *(__int16 *)v29;
          break;
        case 3:
          int v18 = *(_DWORD *)v29;
          break;
        default:
          break;
      }
      *a3 = v18 + v30;
      break;
  }
LABEL_31:
  if (v12) {
    operator delete[](v12);
  }
  return v7;
}

void sub_216CFA8B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete[](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CFAD68(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete[](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  if ((unint64_t)this - 0x1000000000000000 >= 0xF000000000000001
    && ((unint64_t v1 = (unint64_t)(2 * (void)this + 7) >> 3, (v1 ^ 0x7FFFFFFFFFFFFFFFLL) >= 8 * (uint64_t)this)
      ? (BOOL v2 = (v1 ^ 0x7FFFFFFFFFFFFFFFLL) - 8 * (void)this >= 8)
      : (BOOL v2 = 0),
        v2))
  {
    return pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)(8 * (void)this + v1 + 8));
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize(0);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  if ((unint64_t)this - 0x1000000000000000 < 0xF000000000000001) {
    return 0;
  }
  unint64_t v2 = (unint64_t)(2 * (void)this + 7) >> 3;
  if ((v2 ^ 0x7FFFFFFFFFFFFFFFLL) >= 8 * (uint64_t)this && (v2 ^ 0x7FFFFFFFFFFFFFFFLL) - 8 * (void)this >= 8) {
    return 8 * (void)this + v2 + 8;
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::CompressToBuffer(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this, const uint64_t *a2, char *a3, char *a4)
{
  uint64_t v5 = a2;
  unint64_t v7 = 8 * (void)a2;
  uint64_t v8 = 2 * (void)a2;
  if ((unint64_t)(a2 - 0x200000000000000) >= 0xF000000000000001)
  {
    unint64_t v11 = ((unint64_t)(v8 + 7) >> 3) ^ 0x7FFFFFFFFFFFFFFFLL;
    if (v11 - 8 * (void)a2 >= 8 && v11 >= v7) {
      size_t v13 = v7 + ((unint64_t)(v8 + 7) >> 3) + 8;
    }
    else {
      size_t v13 = 0;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](v13);
    goto LABEL_11;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](0);
  if (v5)
  {
LABEL_11:
    unsigned int v45 = a3;
    sub_216CFC6D0((uint64_t)&v46, 0, 0.0, 0.5);
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      int v49 = (void **)(*(void *)((char *)this + v14) - v16);
      int v48 = &v49;
      int v18 = sub_216CFC91C(&v46, (uint64_t *)&v49, (uint64_t)&unk_2174BFD90, &v48);
      unint64_t v19 = *((void *)v18 + 2) + 1;
      *((void *)v18 + 2) = v19;
      if (v19 <= v17)
      {
        if (v19 == v17 && (uint64_t)v49 > (uint64_t)v15) {
          unint64_t v15 = v49;
        }
      }
      else
      {
        unint64_t v15 = v49;
        unint64_t v17 = v19;
      }
      uint64_t v16 = *(void *)((char *)this + v14);
      v14 += 8;
    }
    while (v7 != v14);
    int v49 = (void **)&v47;
    sub_216CFC1E4(&v49);
    *(void *)uint64_t v9 = v15;
    uint64_t v20 = (char *)v9 + 8;
    unint64_t v21 = (char *)v9 + ((unint64_t)(v8 + 7) >> 3) + 8;
    if ((unint64_t)v5 < 4)
    {
      uint64_t v22 = 0;
      a3 = v45;
    }
    else
    {
      uint64_t v22 = 0;
      a3 = v45;
      do
      {
        int v23 = 0;
        char v24 = 0;
        do
        {
          uint64_t v25 = v22;
          uint64_t v26 = *(void *)this;
          this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)((char *)this + 8);
          uint64_t v22 = v26;
          uint64_t v27 = v26 - v25;
          if ((void **)(v26 - v25) != v15)
          {
            if (v27 == (__int16)v27)
            {
              int v28 = 1 << v23;
              *(_WORD *)unint64_t v21 = v27;
              uint64_t v29 = 2;
            }
            else
            {
              int v28 = 3 << v23;
              *(void *)unint64_t v21 = v27;
              uint64_t v29 = 8;
            }
            v21 += v29;
            v24 |= v28;
          }
          v23 += 2;
        }
        while (v23 != 8);
        *v20++ = v24;
        uint64_t v5 = (const uint64_t *)((char *)v5 - 4);
      }
      while ((unint64_t)v5 > 3);
    }
    if (v5 == (const uint64_t *)1)
    {
      int v37 = (void **)(*(void *)this - v22);
      if (v37 == v15)
      {
        char v31 = 0;
      }
      else if (v37 == (void **)(__int16)v37)
      {
        *(_WORD *)unint64_t v21 = (_WORD)v37;
        v21 += 2;
        char v31 = 1;
      }
      else
      {
        *(void *)unint64_t v21 = v37;
        v21 += 8;
        char v31 = 3;
      }
    }
    else if (v5 == (const uint64_t *)2)
    {
      uint64_t v38 = *(void *)this;
      int v39 = (void **)(*(void *)this - v22);
      if (v39 == v15)
      {
        char v31 = 0;
      }
      else if (v39 == (void **)(__int16)v39)
      {
        *(_WORD *)unint64_t v21 = (_WORD)v39;
        v21 += 2;
        char v31 = 1;
      }
      else
      {
        *(void *)unint64_t v21 = v39;
        v21 += 8;
        char v31 = 3;
      }
      unsigned int v40 = (void **)(*((void *)this + 1) - v38);
      if (v40 != v15)
      {
        if (v40 == (void **)(__int16)v40)
        {
          *(_WORD *)unint64_t v21 = (_WORD)v40;
          char v41 = 4;
          uint64_t v42 = 2;
        }
        else
        {
          *(void *)unint64_t v21 = v40;
          char v41 = 12;
          uint64_t v42 = 8;
        }
        v21 += v42;
        v31 |= v41;
      }
    }
    else
    {
      if (v5 != (const uint64_t *)3)
      {
LABEL_57:
        unint64_t v10 = v21 - (char *)v9;
        goto LABEL_58;
      }
      int v30 = 0;
      char v31 = 0;
      do
      {
        uint64_t v33 = *(void *)this;
        this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)((char *)this + 8);
        uint64_t v32 = v33;
        uint64_t v34 = v33 - v22;
        if ((void **)(v33 - v22) != v15)
        {
          if (v34 == (__int16)v34)
          {
            int v35 = 1 << v30;
            *(_WORD *)unint64_t v21 = v34;
            uint64_t v36 = 2;
          }
          else
          {
            int v35 = 3 << v30;
            *(void *)unint64_t v21 = v34;
            uint64_t v36 = 8;
          }
          v21 += v36;
          v31 |= v35;
        }
        v30 += 2;
        uint64_t v22 = v32;
      }
      while (v30 != 6);
    }
    char *v20 = v31;
    goto LABEL_57;
  }
  unint64_t v10 = 0;
LABEL_58:
  uint64_t v43 = pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer(v9, a3, v10);
  operator delete[](v9);
  return v43;
}

void sub_216CFB230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete[](v10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::CompressToBuffer(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this, const unint64_t *a2, char *a3, char *a4)
{
  uint64_t v5 = a2;
  unint64_t v7 = 8 * (void)a2;
  uint64_t v8 = 2 * (void)a2;
  if ((unint64_t)(a2 - 0x400000000000000) >= 0xE000000000000001)
  {
    unint64_t v11 = ~((unint64_t)(v8 + 7) >> 3);
    if (v11 - 8 * (void)a2 >= 8 && v11 >= v7) {
      size_t v13 = v7 + ((unint64_t)(v8 + 7) >> 3) + 8;
    }
    else {
      size_t v13 = 0;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](v13);
    goto LABEL_11;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](0);
  if (v5)
  {
LABEL_11:
    unsigned int v45 = a3;
    sub_216CFC6D0((uint64_t)&v46, 0, 0.0, 0.5);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      int v49 = (void **)(*(void *)((char *)this + v14) - v15);
      int v48 = &v49;
      int v18 = sub_216CFC91C(&v46, (uint64_t *)&v49, (uint64_t)&unk_2174BFD90, &v48);
      unint64_t v19 = *((void *)v18 + 2) + 1;
      *((void *)v18 + 2) = v19;
      if (v19 <= v16)
      {
        if (v19 == v16 && (uint64_t)v49 > (uint64_t)v17) {
          unint64_t v17 = v49;
        }
      }
      else
      {
        unint64_t v17 = v49;
        unint64_t v16 = v19;
      }
      uint64_t v15 = *(void *)((char *)this + v14);
      v14 += 8;
    }
    while (v7 != v14);
    int v49 = (void **)&v47;
    sub_216CFC1E4(&v49);
    *(void *)uint64_t v9 = v17;
    uint64_t v20 = (char *)v9 + 8;
    unint64_t v21 = (char *)v9 + ((unint64_t)(v8 + 7) >> 3) + 8;
    if ((unint64_t)v5 < 4)
    {
      uint64_t v22 = 0;
      a3 = v45;
    }
    else
    {
      uint64_t v22 = 0;
      a3 = v45;
      do
      {
        int v23 = 0;
        char v24 = 0;
        do
        {
          uint64_t v25 = v22;
          uint64_t v26 = *(void *)this;
          this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)((char *)this + 8);
          uint64_t v22 = v26;
          uint64_t v27 = v26 - v25;
          if ((void **)(v26 - v25) != v17)
          {
            if (v27 == (__int16)v27)
            {
              int v28 = 1 << v23;
              *(_WORD *)unint64_t v21 = v27;
              uint64_t v29 = 2;
            }
            else
            {
              int v28 = 3 << v23;
              *(void *)unint64_t v21 = v27;
              uint64_t v29 = 8;
            }
            v21 += v29;
            v24 |= v28;
          }
          v23 += 2;
        }
        while (v23 != 8);
        *v20++ = v24;
        uint64_t v5 = (const unint64_t *)((char *)v5 - 4);
      }
      while ((unint64_t)v5 > 3);
    }
    if (v5 == (const unint64_t *)1)
    {
      int v37 = (void **)(*(void *)this - v22);
      if (v37 == v17)
      {
        char v31 = 0;
      }
      else if (v37 == (void **)(__int16)v37)
      {
        *(_WORD *)unint64_t v21 = (_WORD)v37;
        v21 += 2;
        char v31 = 1;
      }
      else
      {
        *(void *)unint64_t v21 = v37;
        v21 += 8;
        char v31 = 3;
      }
    }
    else if (v5 == (const unint64_t *)2)
    {
      uint64_t v38 = *(void *)this;
      int v39 = (void **)(*(void *)this - v22);
      if (v39 == v17)
      {
        char v31 = 0;
      }
      else if (v39 == (void **)(__int16)v39)
      {
        *(_WORD *)unint64_t v21 = (_WORD)v39;
        v21 += 2;
        char v31 = 1;
      }
      else
      {
        *(void *)unint64_t v21 = v39;
        v21 += 8;
        char v31 = 3;
      }
      unsigned int v40 = (void **)(*((void *)this + 1) - v38);
      if (v40 != v17)
      {
        if (v40 == (void **)(__int16)v40)
        {
          *(_WORD *)unint64_t v21 = (_WORD)v40;
          char v41 = 4;
          uint64_t v42 = 2;
        }
        else
        {
          *(void *)unint64_t v21 = v40;
          char v41 = 12;
          uint64_t v42 = 8;
        }
        v21 += v42;
        v31 |= v41;
      }
    }
    else
    {
      if (v5 != (const unint64_t *)3)
      {
LABEL_57:
        unint64_t v10 = v21 - (char *)v9;
        goto LABEL_58;
      }
      int v30 = 0;
      char v31 = 0;
      do
      {
        uint64_t v33 = *(void *)this;
        this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)((char *)this + 8);
        uint64_t v32 = v33;
        uint64_t v34 = v33 - v22;
        if ((void **)(v33 - v22) != v17)
        {
          if (v34 == (__int16)v34)
          {
            int v35 = 1 << v30;
            *(_WORD *)unint64_t v21 = v34;
            uint64_t v36 = 2;
          }
          else
          {
            int v35 = 3 << v30;
            *(void *)unint64_t v21 = v34;
            uint64_t v36 = 8;
          }
          v21 += v36;
          v31 |= v35;
        }
        v30 += 2;
        uint64_t v22 = v32;
      }
      while (v30 != 6);
    }
    char *v20 = v31;
    goto LABEL_57;
  }
  unint64_t v10 = 0;
LABEL_58:
  uint64_t v43 = pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer(v9, a3, v10);
  operator delete[](v9);
  return v43;
}

void sub_216CFB620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  operator delete[](v10);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this, char *a2, void *a3, int64_t a4, char *__dst, char *a6)
{
  uint64_t v6 = __dst;
  unint64_t v7 = a4;
  if ((unint64_t)(a4 - 0x1000000000000000) >= 0xF000000000000001)
  {
    unint64_t v13 = (unint64_t)(2 * a4 + 7) >> 3;
    if ((v13 ^ 0x7FFFFFFFFFFFFFFFLL) >= 8 * a4 && (v13 ^ 0x7FFFFFFFFFFFFFFFLL) - 8 * a4 >= 8) {
      size_t v11 = 8 * a4 + v13 + 8;
    }
    else {
      size_t v11 = 0;
    }
    if (__dst) {
      goto LABEL_3;
    }
  }
  else
  {
    size_t v11 = 0;
    if (__dst)
    {
LABEL_3:
      int v12 = 0;
      goto LABEL_12;
    }
  }
  int v12 = (char *)operator new[](v11);
  uint64_t v6 = v12;
LABEL_12:
  unint64_t v15 = pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(this, v6, a2, v11);
  if (!v15)
  {
LABEL_30:
    unint64_t v7 = 0;
    goto LABEL_31;
  }
  if (v15 <= 7)
  {
    v51 = "usd/integerCoding.cpp";
    v52 = "_DecodeIntegers";
    uint64_t v53 = 400;
    v54 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = long long]";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_30;
  }
  unint64_t v16 = 2 * v7 + 7;
  unint64_t v17 = (v16 >> 3) + 8;
  if (v17 > v15)
  {
    v51 = "usd/integerCoding.cpp";
    v52 = "_DecodeIntegers";
    uint64_t v53 = 413;
    v54 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = long long]";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_30;
  }
  unint64_t v19 = v6 + 8;
  uint64_t v18 = *(void *)v6;
  if (v16 >= 8)
  {
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    int v23 = (unsigned __int8 *)(v6 + 8);
    do
    {
      uint64_t v24 = 0;
      unsigned int v26 = *v23++;
      unsigned int v25 = v26;
      unint64_t v27 = v21;
      do
      {
        if (v27 >= v7) {
          break;
        }
        switch((v25 >> v24) & 3)
        {
          case 1u:
            v20 += 2;
            break;
          case 2u:
            v20 += 4;
            break;
          case 3u:
            v20 += 8;
            break;
          default:
            break;
        }
        v24 += 2;
        ++v27;
      }
      while (v24 != 8);
      ++v22;
      v21 += 4;
    }
    while (v22 != v16 >> 3);
  }
  else
  {
    uint64_t v20 = 0;
  }
  if (v20 + v17 > v15)
  {
    v51 = "usd/integerCoding.cpp";
    v52 = "_DecodeIntegers";
    uint64_t v53 = 421;
    v54 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = long long]";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read variable length integer data section.");
    goto LABEL_30;
  }
  uint64_t v29 = &v19[v16 >> 3];
  uint64_t v30 = 0;
  if (v7 < 4)
  {
    unint64_t i = v7;
  }
  else
  {
    for (unint64_t i = v7; i > 3; i -= 4)
    {
      int v32 = 0;
      unsigned int v34 = *v19++;
      unsigned int v33 = v34;
      do
      {
        uint64_t v35 = v18;
        switch((v33 >> v32) & 3)
        {
          case 1u:
            uint64_t v36 = *(__int16 *)v29;
            v29 += 2;
            uint64_t v35 = v36;
            break;
          case 2u:
            uint64_t v37 = *(int *)v29;
            v29 += 4;
            uint64_t v35 = v37;
            break;
          case 3u:
            uint64_t v38 = *(void *)v29;
            v29 += 8;
            uint64_t v35 = v38;
            break;
          default:
            break;
        }
        v30 += v35;
        *a3++ = v30;
        v32 += 2;
      }
      while (v32 != 8);
    }
    unint64_t v19 = &v6[((v7 - 4) >> 2) + 9];
  }
  switch(i)
  {
    case 3uLL:
      int v39 = 0;
      unsigned int v40 = *v19;
      do
      {
        uint64_t v41 = v18;
        switch((v40 >> v39) & 3)
        {
          case 1u:
            uint64_t v42 = *(__int16 *)v29;
            v29 += 2;
            uint64_t v41 = v42;
            break;
          case 2u:
            uint64_t v43 = *(int *)v29;
            v29 += 4;
            uint64_t v41 = v43;
            break;
          case 3u:
            uint64_t v44 = *(void *)v29;
            v29 += 8;
            uint64_t v41 = v44;
            break;
          default:
            break;
        }
        v30 += v41;
        *a3++ = v30;
        v39 += 2;
      }
      while (v39 != 6);
      break;
    case 2uLL:
      unsigned int v45 = *v19;
      uint64_t v46 = v18;
      switch(v45 & 3)
      {
        case 1u:
          uint64_t v47 = *(__int16 *)v29;
          v29 += 2;
          uint64_t v46 = v47;
          break;
        case 2u:
          uint64_t v48 = *(int *)v29;
          v29 += 4;
          uint64_t v46 = v48;
          break;
        case 3u:
          uint64_t v49 = *(void *)v29;
          v29 += 8;
          uint64_t v46 = v49;
          break;
        default:
          break;
      }
      uint64_t v50 = v46 + v30;
      *a3 = v50;
      switch((v45 >> 2) & 3)
      {
        case 1u:
          uint64_t v18 = *(__int16 *)v29;
          break;
        case 2u:
          uint64_t v18 = *(int *)v29;
          break;
        case 3u:
          uint64_t v18 = *(void *)v29;
          break;
        default:
          break;
      }
      a3[1] = v18 + v50;
      break;
    case 1uLL:
      switch(*v19 & 3)
      {
        case 1:
          uint64_t v18 = *(__int16 *)v29;
          break;
        case 2:
          uint64_t v18 = *(int *)v29;
          break;
        case 3:
          uint64_t v18 = *(void *)v29;
          break;
        default:
          break;
      }
      *a3 = v18 + v30;
      break;
  }
LABEL_31:
  if (v12) {
    operator delete[](v12);
  }
  return v7;
}

{
  char *v6;
  unint64_t v7;
  size_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  char *v29;
  uint64_t v30;
  unint64_t i;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  char v55;

  uint64_t v6 = __dst;
  unint64_t v7 = a4;
  if ((unint64_t)(a4 - 0x1000000000000000) >= 0xF000000000000001)
  {
    unint64_t v13 = (unint64_t)(2 * a4 + 7) >> 3;
    if ((v13 ^ 0x7FFFFFFFFFFFFFFFLL) >= 8 * a4 && (v13 ^ 0x7FFFFFFFFFFFFFFFLL) - 8 * a4 >= 8) {
      size_t v11 = 8 * a4 + v13 + 8;
    }
    else {
      size_t v11 = 0;
    }
    if (__dst) {
      goto LABEL_3;
    }
  }
  else
  {
    size_t v11 = 0;
    if (__dst)
    {
LABEL_3:
      int v12 = 0;
      goto LABEL_12;
    }
  }
  int v12 = (char *)operator new[](v11);
  uint64_t v6 = v12;
LABEL_12:
  unint64_t v15 = pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(this, v6, a2, v11);
  if (!v15)
  {
LABEL_30:
    unint64_t v7 = 0;
    goto LABEL_31;
  }
  if (v15 <= 7)
  {
    v51 = "usd/integerCoding.cpp";
    v52 = "_DecodeIntegers";
    uint64_t v53 = 400;
    v54 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = unsigned long long]";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_30;
  }
  unint64_t v16 = 2 * v7 + 7;
  unint64_t v17 = (v16 >> 3) + 8;
  if (v17 > v15)
  {
    v51 = "usd/integerCoding.cpp";
    v52 = "_DecodeIntegers";
    uint64_t v53 = 413;
    v54 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = unsigned long long]";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_30;
  }
  unint64_t v19 = v6 + 8;
  uint64_t v18 = *(void *)v6;
  if (v16 >= 8)
  {
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    int v23 = (unsigned __int8 *)(v6 + 8);
    do
    {
      uint64_t v24 = 0;
      unsigned int v26 = *v23++;
      unsigned int v25 = v26;
      unint64_t v27 = v21;
      do
      {
        if (v27 >= v7) {
          break;
        }
        switch((v25 >> v24) & 3)
        {
          case 1u:
            v20 += 2;
            break;
          case 2u:
            v20 += 4;
            break;
          case 3u:
            v20 += 8;
            break;
          default:
            break;
        }
        v24 += 2;
        ++v27;
      }
      while (v24 != 8);
      ++v22;
      v21 += 4;
    }
    while (v22 != v16 >> 3);
  }
  else
  {
    uint64_t v20 = 0;
  }
  if (v20 + v17 > v15)
  {
    v51 = "usd/integerCoding.cpp";
    v52 = "_DecodeIntegers";
    uint64_t v53 = 421;
    v54 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = unsigned long long]";
    char v55 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read variable length integer data section.");
    goto LABEL_30;
  }
  uint64_t v29 = &v19[v16 >> 3];
  uint64_t v30 = 0;
  if (v7 < 4)
  {
    unint64_t i = v7;
  }
  else
  {
    for (unint64_t i = v7; i > 3; i -= 4)
    {
      int v32 = 0;
      unsigned int v34 = *v19++;
      unsigned int v33 = v34;
      do
      {
        uint64_t v35 = v18;
        switch((v33 >> v32) & 3)
        {
          case 1u:
            uint64_t v36 = *(__int16 *)v29;
            v29 += 2;
            uint64_t v35 = v36;
            break;
          case 2u:
            uint64_t v37 = *(int *)v29;
            v29 += 4;
            uint64_t v35 = v37;
            break;
          case 3u:
            uint64_t v38 = *(void *)v29;
            v29 += 8;
            uint64_t v35 = v38;
            break;
          default:
            break;
        }
        v30 += v35;
        *a3++ = v30;
        v32 += 2;
      }
      while (v32 != 8);
    }
    unint64_t v19 = &v6[((v7 - 4) >> 2) + 9];
  }
  switch(i)
  {
    case 3uLL:
      int v39 = 0;
      unsigned int v40 = *v19;
      do
      {
        uint64_t v41 = v18;
        switch((v40 >> v39) & 3)
        {
          case 1u:
            uint64_t v42 = *(__int16 *)v29;
            v29 += 2;
            uint64_t v41 = v42;
            break;
          case 2u:
            uint64_t v43 = *(int *)v29;
            v29 += 4;
            uint64_t v41 = v43;
            break;
          case 3u:
            uint64_t v44 = *(void *)v29;
            v29 += 8;
            uint64_t v41 = v44;
            break;
          default:
            break;
        }
        v30 += v41;
        *a3++ = v30;
        v39 += 2;
      }
      while (v39 != 6);
      break;
    case 2uLL:
      unsigned int v45 = *v19;
      uint64_t v46 = v18;
      switch(v45 & 3)
      {
        case 1u:
          uint64_t v47 = *(__int16 *)v29;
          v29 += 2;
          uint64_t v46 = v47;
          break;
        case 2u:
          uint64_t v48 = *(int *)v29;
          v29 += 4;
          uint64_t v46 = v48;
          break;
        case 3u:
          uint64_t v49 = *(void *)v29;
          v29 += 8;
          uint64_t v46 = v49;
          break;
        default:
          break;
      }
      uint64_t v50 = v46 + v30;
      *a3 = v50;
      switch((v45 >> 2) & 3)
      {
        case 1u:
          uint64_t v18 = *(__int16 *)v29;
          break;
        case 2u:
          uint64_t v18 = *(int *)v29;
          break;
        case 3u:
          uint64_t v18 = *(void *)v29;
          break;
        default:
          break;
      }
      a3[1] = v18 + v50;
      break;
    case 1uLL:
      switch(*v19 & 3)
      {
        case 1:
          uint64_t v18 = *(__int16 *)v29;
          break;
        case 2:
          uint64_t v18 = *(int *)v29;
          break;
        case 3:
          uint64_t v18 = *(void *)v29;
          break;
        default:
          break;
      }
      *a3 = v18 + v30;
      break;
  }
LABEL_31:
  if (v12) {
    operator delete[](v12);
  }
  return v7;
}

void sub_216CFBA88(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete[](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216CFBF38(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete[](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216CFBFB0(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v12 = a2;
  sub_21686EB98((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0xAAAAAAAAAAAAAABLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  sub_216CFC15C((void *)(a1 + 8), v12);
  unint64_t v7 = *(__int16 **)(a1 + 8);
  if (v7 == *(__int16 **)(a1 + 16)) {
    unint64_t v7 = sub_216CFC0DC();
  }
  unint64_t v8 = v12;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8) {
    *(unsigned char *)(*(void *)(a1 + 16) - 22) = 1;
  }
  float v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(void *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_216CFC0C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__int16 *sub_216CFC0DC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C8D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798C8D8))
  {
    word_26798C8C0 = -1;
    byte_26798C8C2 = 1;
    __cxa_atexit((void (*)(void *))sub_216CFC22C, &word_26798C8C0, &dword_216758000);
    __cxa_guard_release(&qword_26798C8D8);
  }
  return &word_26798C8C0;
}

void *sub_216CFC15C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216782E84(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 24 * a2;
    do
    {
      *(_WORD *)uint64_t v4 = -1;
      *(unsigned char *)(v4 + 2) = 0;
      v4 += 24;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_216CFC1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216CFC1E4(void ***a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = (__int16 *)**a1;
  if (v2)
  {
    uint64_t v3 = (__int16 *)v1[1];
    if (v3 != v2)
    {
      uint64_t v4 = (__int16 *)v1[1];
      do
      {
        int v5 = *(v4 - 12);
        v4 -= 12;
        if (v5 != -1) {
          *(v3 - 12) = -1;
        }
        uint64_t v3 = v4;
      }
      while (v4 != v2);
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

__int16 *sub_216CFC22C(__int16 *result)
{
  if (*result != -1) {
    *unint64_t result = -1;
  }
  return result;
}

__int16 *sub_216CFC244(uint64_t *a1, int *a2, uint64_t a3, int **a4)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[4];
  uint64_t v9 = *a1 & v6;
  unint64_t result = (__int16 *)(v8 + 24 * v9);
  if (*result < 0)
  {
    LOWORD(v11) = 0;
  }
  else
  {
    if (*(_DWORD *)(v8 + 24 * v9 + 8) == v6) {
      return result;
    }
    LOWORD(v11) = 0;
    while (1)
    {
      int v11 = (__int16)(v11 + 1);
      uint64_t v9 = (v9 + 1) & v7;
      unint64_t result = (__int16 *)(v8 + 24 * v9);
      if (v11 > *result) {
        break;
      }
      if (*(_DWORD *)(v8 + 24 * v9 + 8) == v6) {
        return result;
      }
    }
  }
  char v12 = sub_216CFC3D8((uint64_t)a1);
  uint64_t v13 = a1[4];
  if (v12)
  {
    uint64_t v9 = *a1 & v6;
    if (*(__int16 *)(v13 + 24 * v9) < 0)
    {
      LOWORD(v11) = 0;
      int v14 = *(unsigned __int16 *)(v13 + 24 * v9);
    }
    else
    {
      LOWORD(v11) = 0;
      do
      {
        int v11 = (__int16)(v11 + 1);
        uint64_t v9 = (v9 + 1) & *a1;
      }
      while (v11 <= *(__int16 *)(v13 + 24 * v9));
      int v14 = *(unsigned __int16 *)(v13 + 24 * v9);
    }
  }
  else
  {
    int v14 = *(unsigned __int16 *)(v13 + 24 * v9);
  }
  if (v14 == 0xFFFF)
  {
    uint64_t v15 = v13 + 24 * v9;
    *(_DWORD *)(v15 + 8) = **a4;
    *(void *)(v15 + 16) = 0;
    *(_WORD *)uint64_t v15 = v11;
  }
  else
  {
    int v16 = **a4;
    uint64_t v17 = 0;
    sub_216CFC5F0(a1, v9, v11, v6, &v16);
    uint64_t v13 = a1[4];
  }
  ++a1[6];
  return (__int16 *)(v13 + 24 * v9);
}

uint64_t sub_216CFC3D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || (unint64_t v2 = *(void *)(a1 + 48), v2 >= *(void *)(a1 + 56)))
  {
    unint64_t v6 = sub_21686E8DC((void *)a1);
    sub_216CFC4A0(a1, v6);
    *(unsigned char *)(a1 + 72) = 0;
    return 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = 0;
    float v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      unint64_t v4 = *(void *)(a1 + 40);
      float v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        float v8 = *(float *)(a1 + 68);
        unint64_t v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        unint64_t v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        sub_216CFC4A0(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_216CFC4A0(uint64_t a1, unint64_t a2)
{
  sub_216CFBFB0((uint64_t)&v7, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  float v3 = *(int **)(a1 + 8);
  unint64_t v4 = *(int **)(a1 + 16);
  if (v3 != v4)
  {
    float v5 = v3 + 2;
    do
    {
      if (*((__int16 *)v5 - 4) != -1) {
        sub_216CFC578(&v7, v7 & *v5, 0, *v5, v5);
      }
      unint64_t v6 = v5 + 4;
      v5 += 6;
    }
    while (v6 != v4);
  }
  v8[5] = *(void *)(a1 + 48);
  sub_21686E9D4(&v7, (uint64_t *)a1);
  unint64_t v9 = (void **)v8;
  sub_216CFC1E4(&v9);
}

void sub_216CFC558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 40) = &a11;
  sub_216CFC1E4((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_216CFC578(void *a1, uint64_t a2, __int16 a3, uint64_t a4, int *a5)
{
  uint64_t v5 = a1[4];
  while (1)
  {
    unint64_t v6 = (__int16 *)(v5 + 24 * a2);
    int v7 = *v6;
    if (v7 >= a3) {
      goto LABEL_5;
    }
    float v8 = (int *)(v5 + 24 * a2 + 8);
    if (v7 == -1) {
      break;
    }
    int v9 = *a5;
    *a5 = *v8;
    *float v8 = v9;
    uint64_t v10 = v5 + 24 * a2;
    uint64_t v11 = *((void *)a5 + 1);
    *((void *)a5 + 1) = *(void *)(v10 + 16);
    *(void *)(v10 + 16) = v11;
    *unint64_t v6 = a3;
    a3 = v7;
LABEL_5:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  __n128 result = *(__n128 *)a5;
  *(_OWORD *)float v8 = *(_OWORD *)a5;
  *unint64_t v6 = a3;
  return result;
}

__n128 sub_216CFC5F0(uint64_t *a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, int *a5)
{
  uint64_t v5 = a1[4];
  unint64_t v6 = (unsigned __int16 *)(v5 + 24 * a2);
  int v7 = *a5;
  *a5 = *((_DWORD *)v6 + 2);
  *((_DWORD *)v6 + 2) = v7;
  uint64_t v8 = *((void *)a5 + 1);
  *((void *)a5 + 1) = *((void *)v6 + 2);
  *((void *)v6 + 2) = v8;
  LODWORD(v8) = *v6;
  *unint64_t v6 = a3;
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 & (a2 + 1);
  int v11 = v8 + 1;
  char v12 = (_WORD *)(v5 + 24 * v10);
  for (int i = (unsigned __int16)*v12; i != 0xFFFF; int i = (unsigned __int16)*v12)
  {
    if ((__int16)v11 <= (__int16)i)
    {
      int i = v11;
    }
    else
    {
      if ((__int16)v11 >= 4096) {
        *((unsigned char *)a1 + 72) = 1;
      }
      uint64_t v14 = v5 + 24 * v10;
      int v15 = *a5;
      *a5 = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      uint64_t v16 = *((void *)a5 + 1);
      *((void *)a5 + 1) = *(void *)(v14 + 16);
      *(void *)(v14 + 16) = v16;
      _WORD *v12 = v11;
      uint64_t v9 = *a1;
    }
    uint64_t v10 = v9 & (v10 + 1);
    int v11 = i + 1;
    char v12 = (_WORD *)(v5 + 24 * v10);
  }
  __n128 result = *(__n128 *)a5;
  *(_OWORD *)(v5 + 24 * v10 + 8) = *(_OWORD *)a5;
  _WORD *v12 = v11;
  return result;
}

uint64_t sub_216CFC6D0(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v12 = a2;
  sub_21686EB98((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0xAAAAAAAAAAAAAABLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  sub_216CFC87C((void *)(a1 + 8), v12);
  int v7 = *(__int16 **)(a1 + 8);
  if (v7 == *(__int16 **)(a1 + 16)) {
    int v7 = sub_216CFC7FC();
  }
  unint64_t v8 = v12;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8) {
    *(unsigned char *)(*(void *)(a1 + 16) - 22) = 1;
  }
  float v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(void *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_216CFC7E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__int16 *sub_216CFC7FC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798C8F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798C8F8))
  {
    word_26798C8E0 = -1;
    byte_26798C8E2 = 1;
    __cxa_atexit((void (*)(void *))sub_216CFC904, &word_26798C8E0, &dword_216758000);
    __cxa_guard_release(&qword_26798C8F8);
  }
  return &word_26798C8E0;
}

void *sub_216CFC87C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216782E84(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 24 * a2;
    do
    {
      *(_WORD *)uint64_t v4 = -1;
      *(unsigned char *)(v4 + 2) = 0;
      v4 += 24;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_216CFC8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

__int16 *sub_216CFC904(__int16 *result)
{
  if (*result != -1) {
    *__n128 result = -1;
  }
  return result;
}

__int16 *sub_216CFC91C(uint64_t *a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[4];
  uint64_t v9 = *a2 & *a1;
  __n128 result = (__int16 *)(v8 + 24 * v9);
  if (*result < 0)
  {
    LOWORD(v11) = 0;
  }
  else
  {
    if (*(void *)(v8 + 24 * v9 + 8) == v6) {
      return result;
    }
    LOWORD(v11) = 0;
    while (1)
    {
      int v11 = (__int16)(v11 + 1);
      uint64_t v9 = (v9 + 1) & v7;
      __n128 result = (__int16 *)(v8 + 24 * v9);
      if (v11 > *result) {
        break;
      }
      if (*(void *)(v8 + 24 * v9 + 8) == v6) {
        return result;
      }
    }
  }
  char v12 = sub_216CFCAA8((uint64_t)a1);
  uint64_t v13 = a1[4];
  if (v12)
  {
    uint64_t v9 = v6 & *a1;
    if (*(__int16 *)(v13 + 24 * v9) < 0)
    {
      LOWORD(v11) = 0;
      int v14 = *(unsigned __int16 *)(v13 + 24 * v9);
    }
    else
    {
      LOWORD(v11) = 0;
      do
      {
        int v11 = (__int16)(v11 + 1);
        uint64_t v9 = (v9 + 1) & *a1;
      }
      while (v11 <= *(__int16 *)(v13 + 24 * v9));
      int v14 = *(unsigned __int16 *)(v13 + 24 * v9);
    }
  }
  else
  {
    int v14 = *(unsigned __int16 *)(v13 + 24 * v9);
  }
  if (v14 == 0xFFFF)
  {
    uint64_t v15 = v13 + 24 * v9;
    *(void *)(v15 + 8) = **a4;
    *(void *)(v15 + 16) = 0;
    *(_WORD *)uint64_t v15 = v11;
  }
  else
  {
    __n128 v16 = (__n128)(unint64_t)**a4;
    sub_216CFCCAC(a1, v9, v11, v6, &v16);
    uint64_t v13 = a1[4];
  }
  ++a1[6];
  return (__int16 *)(v13 + 24 * v9);
}

uint64_t sub_216CFCAA8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || (unint64_t v2 = *(void *)(a1 + 48), v2 >= *(void *)(a1 + 56)))
  {
    unint64_t v6 = sub_21686E8DC((void *)a1);
    sub_216CFCB70(a1, v6);
    *(unsigned char *)(a1 + 72) = 0;
    return 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = 0;
    float v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      unint64_t v4 = *(void *)(a1 + 40);
      float v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        float v8 = *(float *)(a1 + 68);
        unint64_t v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        unint64_t v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        sub_216CFCB70(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_216CFCB70(uint64_t a1, unint64_t a2)
{
  sub_216CFC6D0((uint64_t)&v7, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(__n128 **)(a1 + 16);
  if ((__n128 *)v3 != v4)
  {
    float v5 = (__n128 *)(v3 + 8);
    do
    {
      if (v5[-1].n128_i16[4] != -1) {
        sub_216CFCC48(&v7, v7 & v5->n128_u64[0], 0, v5->n128_u64[0], v5);
      }
      unint64_t v6 = v5 + 1;
      float v5 = (__n128 *)((char *)v5 + 24);
    }
    while (v6 != v4);
  }
  v8[5] = *(void *)(a1 + 48);
  sub_21686E9D4(&v7, (uint64_t *)a1);
  unint64_t v9 = (void **)v8;
  sub_216CFC1E4(&v9);
}

void sub_216CFCC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 40) = &a11;
  sub_216CFC1E4((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_216CFCC48(void *a1, uint64_t a2, __int16 a3, uint64_t a4, __n128 *a5)
{
  uint64_t v5 = a1[4];
  while (1)
  {
    unint64_t v6 = (__int16 *)(v5 + 24 * a2);
    int v7 = *v6;
    if (v7 >= a3) {
      goto LABEL_5;
    }
    float v8 = (__n128 *)(v5 + 24 * a2 + 8);
    if (v7 == -1) {
      break;
    }
    __n128 v9 = *a5;
    *a5 = *v8;
    *float v8 = v9;
    *unint64_t v6 = a3;
    a3 = v7;
LABEL_5:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  __n128 result = *a5;
  *float v8 = *a5;
  *unint64_t v6 = a3;
  return result;
}

__n128 sub_216CFCCAC(uint64_t *a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, __n128 *a5)
{
  uint64_t v5 = a1[4];
  unint64_t v6 = (unsigned __int16 *)(v5 + 24 * a2);
  __n128 v7 = *a5;
  *a5 = *(__n128 *)(v6 + 4);
  *(__n128 *)(v6 + 4) = v7;
  int v8 = *v6;
  *unint64_t v6 = a3;
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 & (a2 + 1);
  int v11 = v8 + 1;
  char v12 = (_WORD *)(v5 + 24 * v10);
  for (int i = (unsigned __int16)*v12; i != 0xFFFF; int i = (unsigned __int16)*v12)
  {
    if ((__int16)v11 <= (__int16)i)
    {
      int i = v11;
    }
    else
    {
      if ((__int16)v11 >= 4096) {
        *((unsigned char *)a1 + 72) = 1;
      }
      uint64_t v14 = v5 + 24 * v10;
      __n128 v15 = *a5;
      *a5 = *(__n128 *)(v14 + 8);
      *(__n128 *)(v14 + 8) = v15;
      _WORD *v12 = v11;
      uint64_t v9 = *a1;
    }
    uint64_t v10 = v9 & (v10 + 1);
    int v11 = i + 1;
    char v12 = (_WORD *)(v5 + 24 * v10);
  }
  __n128 result = *a5;
  *(__n128 *)(v5 + 24 * v10 + 8) = *a5;
  _WORD *v12 = v11;
  return result;
}

uint64_t sub_216CFCD70(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 8), a2, v120);
  char v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)v120);
  int InterpolationType = pxrInternal__aapl__pxrReserved__::UsdStage::GetInterpolationType(v12);
  uint64_t v14 = v120[1];
  if (v120[1] && atomic_fetch_add_explicit((atomic_uint *volatile)v120[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))(*(void *)v14 + 8))(v14);
  }
  if (!InterpolationType) {
    goto LABEL_82;
  }
  v120[0] = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(*(pxrInternal__aapl__pxrReserved__::UsdAttribute **)(a1 + 8));
  __n128 v15 = *(pxrInternal__aapl__pxrReserved__::VtValue **)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v120);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v120);
  if (v120[0] == v15)
  {
    v120[0] = (pxrInternal__aapl__pxrReserved__::VtValue *)"usd/interpolators.cpp";
    v120[1] = (pxrInternal__aapl__pxrReserved__::VtValue *)"_Interpolate";
    *(void *)&long long v121 = 72;
    *((void *)&v121 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate(const Src &, c"
                             "onst SdfPath &, double, double, double) [Src = pxrInternal__aapl__pxrReserved__::TfRefPtr<p"
                             "xrInternal__aapl__pxrReserved__::SdfLayer>]";
    LOBYTE(v122) = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(*(pxrInternal__aapl__pxrReserved__::UsdAttribute **)(a1 + 8));
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (atomic_uint **)&v123);
    unint64_t v19 = v123 & 0xFFFFFFFFFFFFFFF8;
    if ((v123 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v20 = (const char *)(v19 + 16);
      if (*(char *)(v19 + 39) < 0) {
        uint64_t v20 = *(const char **)v20;
      }
    }
    else
    {
      uint64_t v20 = "";
    }
    sub_216D0162C(*(void *)(a1 + 8), &v125);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v125);
    if (*((char *)String + 23) >= 0) {
      unsigned int v25 = (const char *)String;
    }
    else {
      unsigned int v25 = (const char *)*String;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v120, 3, (pxrInternal__aapl__pxrReserved__ *)"Unknown value type '%s' for attribute '%s'", v20, v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v126);
    sub_21697C414(&v125);
    if ((v123 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v123 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    return 0;
  }
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C510, v41, v42);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v15)
  {
    v120[0] = (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26C766B30;
    v120[1] = (pxrInternal__aapl__pxrReserved__::VtValue *)&v123;
    uint64_t v18 = sub_216D01E50((uint64_t)v120, (uint64_t *)a2, a4, a5, a6);
    if (v18)
    {
      __int16 v21 = v123;
      uint64_t v22 = *(void *)(a1 + 16);
      uint64_t v23 = *(void *)(v22 + 8);
      if (v23 && (*(void *)(v22 + 8) & 3) != 3) {
        (*(void (**)(uint64_t))((v23 & 0xFFFFFFFFFFFFFFF8) + 32))(v22);
      }
      *(void *)(v22 + 8) = (char *)&off_26C750990 + 3;
      *(_WORD *)uint64_t v22 = v21;
    }
    return v18;
  }
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E268, v43, v44);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v15)
  {
    uint64_t v122 = 0;
    *(_OWORD *)v120 = 0u;
    long long v121 = 0u;
    unint64_t v123 = (unint64_t)&unk_26C766B68;
    v124 = v120;
    uint64_t v18 = sub_216D02580((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
    if (v18) {
      sub_2168F945C(*(void **)(a1 + 16), (uint64_t)v120);
    }
    goto LABEL_230;
  }
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C248], v45, v46);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v15)
  {
    LODWORD(v123) = 0;
    v120[0] = (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26C766BA0;
    v120[1] = (pxrInternal__aapl__pxrReserved__::VtValue *)&v123;
    uint64_t v18 = sub_216D02BE4((uint64_t)v120, (uint64_t *)a2, a4, a5, a6);
    if (v18)
    {
      int v27 = v123;
      uint64_t v28 = *(void *)(a1 + 16);
      uint64_t v29 = *(void *)(v28 + 8);
      if (v29 && (*(void *)(v28 + 8) & 3) != 3) {
        (*(void (**)(uint64_t))((v29 & 0xFFFFFFFFFFFFFFF8) + 32))(v28);
      }
      *(void *)(v28 + 8) = &unk_26C750A4B;
      *(_DWORD *)uint64_t v28 = v27;
    }
    return v18;
  }
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E250, v50, v51);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v15)
  {
    uint64_t v122 = 0;
    *(_OWORD *)v120 = 0u;
    long long v121 = 0u;
    unint64_t v123 = (unint64_t)&unk_26C766BD8;
    v124 = v120;
    uint64_t v18 = sub_216D0325C((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
    if (v18) {
      sub_2168F8898(*(void **)(a1 + 16), (uint64_t)v120);
    }
    goto LABEL_230;
  }
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C240], v52, v53);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v15)
  {
    unint64_t v123 = 0;
    v120[0] = (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26C766C10;
    v120[1] = (pxrInternal__aapl__pxrReserved__::VtValue *)&v123;
    uint64_t v18 = sub_216D03854((uint64_t)v120, (uint64_t *)a2, a4, a5, a6);
    if (!v18) {
      return v18;
    }
    unint64_t v30 = v123;
    char v31 = *(unint64_t **)(a1 + 16);
    unint64_t v32 = v31[1];
    if (v32 && (v31[1] & 3) != 3) {
      (*(void (**)(unint64_t *))((v32 & 0xFFFFFFFFFFFFFFF8) + 32))(v31);
    }
    unint64_t v33 = (unint64_t)&unk_26C750B00;
LABEL_115:
    v31[1] = v33 | 3;
    *char v31 = v30;
    return v18;
  }
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E238, v54, v55);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v15)
  {
    uint64_t v122 = 0;
    *(_OWORD *)v120 = 0u;
    long long v121 = 0u;
    unint64_t v123 = (unint64_t)&unk_26C766C48;
    v124 = v120;
    uint64_t v18 = sub_216D03EB0((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
    if (v18) {
      sub_2168F9F84(*(void **)(a1 + 16), (uint64_t)v120);
    }
    goto LABEL_230;
  }
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7557E0, v56, v57);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v15)
  {
    unint64_t v123 = 0;
    v120[0] = (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26C766C80;
    v120[1] = (pxrInternal__aapl__pxrReserved__::VtValue *)&v123;
    uint64_t v18 = sub_216D04494((uint64_t)v120, (uint64_t *)a2, a4, a5, a6);
    if (v18) {
      sub_216B8D904(*(void **)(a1 + 16), &v123);
    }
    return v18;
  }
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7558A8, v58, v59);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v15)
  {
    uint64_t v122 = 0;
    *(_OWORD *)v120 = 0u;
    long long v121 = 0u;
    unint64_t v123 = (unint64_t)&unk_26C766CB8;
    v124 = v120;
    uint64_t v18 = sub_216D04AF0((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
    if (v18) {
      sub_216B8DAC0(*(void **)(a1 + 16), (uint64_t)v120);
    }
    goto LABEL_230;
  }
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C570, v60, v61);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v15)
  {
    unint64_t v123 = (unint64_t)&unk_26C766CF0;
    v124 = v120;
    uint64_t v18 = sub_216D05118((uint64_t)&v123, (uint64_t *)a2, a4, a5, a6);
    if (v18) {
      sub_216B8F320(*(void **)(a1 + 16), v120);
    }
    return v18;
  }
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFE0, v62, v63);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v15)
  {
    uint64_t v122 = 0;
    *(_OWORD *)v120 = 0u;
    long long v121 = 0u;
    unint64_t v123 = (unint64_t)&unk_26C766D28;
    v124 = v120;
    uint64_t v18 = sub_216D05814((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
    if (v18) {
      sub_216B8F444(*(void **)(a1 + 16), (uint64_t)v120);
    }
    goto LABEL_230;
  }
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5A0, v64, v65);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v15)
  {
    unint64_t v123 = (unint64_t)&unk_26C766D60;
    v124 = v120;
    uint64_t v18 = sub_216D05F48((uint64_t)&v123, (uint64_t *)a2, a4, a5, a6);
    if (v18) {
      sub_216B8F78C(*(void **)(a1 + 16), (uint64_t)v120);
    }
    return v18;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFC8, v66, v67);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_ == v15)
  {
    uint64_t v122 = 0;
    *(_OWORD *)v120 = 0u;
    long long v121 = 0u;
    unint64_t v123 = (unint64_t)&unk_26C766D98;
    v124 = v120;
    uint64_t v18 = sub_216D067C0((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
    if (v18) {
      sub_216B8F8C0(*(void **)(a1 + 16), (uint64_t)v120);
    }
    goto LABEL_230;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5C0, v68, v69);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_ == v15)
  {
    unint64_t v123 = (unint64_t)&unk_26C766DD0;
    v124 = v120;
    uint64_t v18 = sub_216D06FDC((uint64_t)&v123, (uint64_t *)a2, a4, a5, a6);
    if (v18) {
      sub_216B8FB74(*(void **)(a1 + 16), v120);
    }
    return v18;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFB0, v70, v71);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_ == v15)
  {
    uint64_t v122 = 0;
    *(_OWORD *)v120 = 0u;
    long long v121 = 0u;
    unint64_t v123 = (unint64_t)&unk_26C766E08;
    v124 = v120;
    uint64_t v18 = sub_216D07890((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
    if (v18) {
      sub_2169026E8(*(void **)(a1 + 16), (uint64_t)v120);
    }
    goto LABEL_230;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C6F0, v72, v73);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_ == v15)
  {
    unint64_t v123 = (unint64_t)&unk_26C766E40;
    v124 = v120;
    uint64_t v18 = sub_216D07FBC((uint64_t)&v123, (uint64_t *)a2, a4, a5, a6);
    if (v18) {
      sub_216B90B54(*(unsigned int ***)(a1 + 16), v120);
    }
    return v18;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF50, v74, v75);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_ == v15)
  {
    uint64_t v122 = 0;
    *(_OWORD *)v120 = 0u;
    long long v121 = 0u;
    unint64_t v123 = (unint64_t)&unk_26C766E78;
    v124 = v120;
    uint64_t v18 = sub_216D08624((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
    if (v18) {
      sub_2168FC5E8(*(void **)(a1 + 16), (uint64_t)v120);
    }
    goto LABEL_230;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C700, v76, v77);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_ == v15)
  {
    v120[0] = (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26C766EB0;
    v120[1] = (pxrInternal__aapl__pxrReserved__::VtValue *)&v123;
    uint64_t v18 = sub_216D08C20((uint64_t)v120, (uint64_t *)a2, a4, a5, a6);
    if (!v18) {
      return v18;
    }
    unint64_t v30 = v123;
    char v31 = *(unint64_t **)(a1 + 16);
    unint64_t v34 = v31[1];
    if (v34 && (v31[1] & 3) != 3) {
      (*(void (**)(unint64_t *))((v34 & 0xFFFFFFFFFFFFFFF8) + 32))(v31);
    }
    unint64_t v33 = (unint64_t)&off_26C74E368;
    goto LABEL_115;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF08, v78, v79);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_ == v15)
  {
    uint64_t v122 = 0;
    *(_OWORD *)v120 = 0u;
    long long v121 = 0u;
    unint64_t v123 = (unint64_t)&unk_26C766EE8;
    v124 = v120;
    uint64_t v18 = sub_216D092A4((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
    if (v18) {
      sub_2168FAED8(*(void **)(a1 + 16), (uint64_t)v120);
    }
    goto LABEL_230;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C710, v80, v81);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_);
  }
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_ == v15)
  {
    v120[0] = (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26C766F20;
    v120[1] = (pxrInternal__aapl__pxrReserved__::VtValue *)&v123;
    uint64_t v18 = sub_216D09A9C((uint64_t)v120, (uint64_t *)a2, a4, a5, a6);
    if (v18)
    {
      int v35 = v123;
      uint64_t v36 = *(void *)(a1 + 16);
      uint64_t v37 = *(void *)(v36 + 8);
      if (v37 && (*(void *)(v36 + 8) & 3) != 3) {
        (*(void (**)(uint64_t))((v37 & 0xFFFFFFFFFFFFFFF8) + 32))(v36);
      }
      *(void *)(v36 + 8) = (char *)&off_26C74E2B0 + 3;
      *(_DWORD *)uint64_t v36 = v35;
    }
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DEC0, v82, v83);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_);
    }
    if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_ == v15)
    {
      uint64_t v122 = 0;
      *(_OWORD *)v120 = 0u;
      long long v121 = 0u;
      unint64_t v123 = (unint64_t)&unk_26C766F58;
      v124 = v120;
      uint64_t v18 = sub_216D0A160((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
      if (v18) {
        sub_2168FBA0C(*(void **)(a1 + 16), (uint64_t)v120);
      }
      goto LABEL_230;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C730, v84, v85);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_);
    }
    if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_ == v15)
    {
      unint64_t v123 = (unint64_t)&unk_26C766F90;
      v124 = v120;
      uint64_t v18 = sub_216D0A7A8((uint64_t)&v123, (uint64_t *)a2, a4, a5, a6);
      if (v18) {
        sub_216B916B4(*(void **)(a1 + 16), (uint64_t)v120);
      }
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_))
      {
        _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF38, v86, v87);
        __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_);
      }
      if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_ == v15)
      {
        uint64_t v122 = 0;
        *(_OWORD *)v120 = 0u;
        long long v121 = 0u;
        unint64_t v123 = (unint64_t)&unk_26C766FC8;
        v124 = v120;
        uint64_t v18 = sub_216D0AE5C((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
        if (v18) {
          sub_2168FEF20(*(void **)(a1 + 16), (uint64_t)v120);
        }
        goto LABEL_230;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_))
      {
        _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C740, v88, v89);
        __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_);
      }
      if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_ == v15)
      {
        v120[0] = (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26C767000;
        v120[1] = (pxrInternal__aapl__pxrReserved__::VtValue *)&v123;
        uint64_t v18 = sub_216D0B4B4((uint64_t)v120, (uint64_t *)a2, a4, a5, a6);
        if (v18) {
          sub_216B914DC(*(void **)(a1 + 16), (uint64_t)&v123);
        }
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_))
        {
          _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DEF0, v90, v91);
          __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_);
        }
        if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_ == v15)
        {
          uint64_t v122 = 0;
          *(_OWORD *)v120 = 0u;
          long long v121 = 0u;
          unint64_t v123 = (unint64_t)&unk_26C767038;
          v124 = v120;
          uint64_t v18 = sub_216D0BBAC((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
          if (v18) {
            sub_2168FD6E4(*(void **)(a1 + 16), (uint64_t)v120);
          }
          goto LABEL_230;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_))
        {
          _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C750, v92, v93);
          __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_);
        }
        if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_ == v15)
        {
          v120[0] = (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26C767070;
          v120[1] = (pxrInternal__aapl__pxrReserved__::VtValue *)&v123;
          uint64_t v18 = sub_216D0C248((uint64_t)v120, (uint64_t *)a2, a4, a5, a6);
          if (v18)
          {
            unint64_t v38 = v123 | ((unint64_t)WORD2(v123) << 32);
            uint64_t v39 = *(void *)(a1 + 16);
            uint64_t v40 = *(void *)(v39 + 8);
            if (v40 && (*(void *)(v39 + 8) & 3) != 3) {
              (*(void (**)(uint64_t))((v40 & 0xFFFFFFFFFFFFFFF8) + 32))(v39);
            }
            *(void *)(v39 + 8) = (char *)&off_26C74E4D8 + 3;
            *(_DWORD *)uint64_t v39 = v38;
            *(_WORD *)(v39 + 4) = WORD2(v38);
          }
        }
        else
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_))
          {
            _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DEA8, v94, v95);
            __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_);
          }
          if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_ == v15)
          {
            uint64_t v122 = 0;
            *(_OWORD *)v120 = 0u;
            long long v121 = 0u;
            unint64_t v123 = (unint64_t)&unk_26C7670A8;
            v124 = v120;
            uint64_t v18 = sub_216D0C984((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
            if (v18) {
              sub_2168FE24C(*(void **)(a1 + 16), (uint64_t)v120);
            }
            goto LABEL_230;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_))
          {
            _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C770, v96, v97);
            __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_);
          }
          if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_ == v15)
          {
            unint64_t v123 = (unint64_t)&unk_26C7670E0;
            v124 = v120;
            uint64_t v18 = sub_216D0CFF0((uint64_t)&v123, (uint64_t *)a2, a4, a5, a6);
            if (v18) {
              sub_216B921B4(*(void **)(a1 + 16), v120);
            }
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_))
            {
              _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF20, v98, v99);
              __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_);
            }
            if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_ == v15)
            {
              uint64_t v122 = 0;
              *(_OWORD *)v120 = 0u;
              long long v121 = 0u;
              unint64_t v123 = (unint64_t)&unk_26C767118;
              v124 = v120;
              uint64_t v18 = sub_216D0D68C((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
              if (v18) {
                sub_216901628(*(void **)(a1 + 16), (uint64_t)v120);
              }
              goto LABEL_230;
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_))
            {
              _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C780, v100, v101);
              __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_);
            }
            if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_ == v15)
            {
              unint64_t v123 = (unint64_t)&unk_26C767150;
              v124 = v120;
              uint64_t v18 = sub_216D0DCC8((uint64_t)&v123, (uint64_t *)a2, a4, a5, a6);
              if (v18) {
                sub_216B91FF4(*(unsigned int ***)(a1 + 16), v120);
              }
            }
            else
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_))
              {
                _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DED8, v102, v103);
                __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_);
              }
              if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_ == v15)
              {
                uint64_t v122 = 0;
                *(_OWORD *)v120 = 0u;
                long long v121 = 0u;
                unint64_t v123 = (unint64_t)&unk_26C767188;
                v124 = v120;
                uint64_t v18 = sub_216D0E380((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
                if (v18) {
                  sub_2168FFEA8(*(void **)(a1 + 16), (uint64_t)v120);
                }
                goto LABEL_230;
              }
              if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_))
              {
                _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C790, v104, v105);
                __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_);
              }
              if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_ == v15)
              {
                v120[0] = (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26C7671C0;
                v120[1] = (pxrInternal__aapl__pxrReserved__::VtValue *)&v123;
                uint64_t v18 = sub_216D0ECF4((uint64_t)v120, (uint64_t *)a2, a4, a5, a6);
                if (v18)
                {
                  unint64_t v47 = v123;
                  uint64_t v48 = *(unint64_t **)(a1 + 16);
                  unint64_t v49 = v48[1];
                  if (v49 && (v48[1] & 3) != 3) {
                    (*(void (**)(unint64_t *))((v49 & 0xFFFFFFFFFFFFFFF8) + 32))(v48);
                  }
                  *uint64_t v48 = v47;
                  v48[1] = (unint64_t)&off_26C74E700 + 3;
                }
              }
              else
              {
                if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_))
                {
                  _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DE90, v106, v107);
                  __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_);
                }
                if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_ == v15)
                {
                  uint64_t v122 = 0;
                  *(_OWORD *)v120 = 0u;
                  long long v121 = 0u;
                  unint64_t v123 = (unint64_t)&unk_26C7671F8;
                  v124 = v120;
                  uint64_t v18 = sub_216D0F3B0((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
                  if (v18) {
                    sub_216900A24(*(void **)(a1 + 16), (uint64_t)v120);
                  }
                  goto LABEL_230;
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_))
                {
                  _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5F0, v108, v109);
                  __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_);
                }
                if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_ == v15)
                {
                  unint64_t v123 = (unint64_t)&unk_26C767230;
                  v124 = v120;
                  uint64_t v18 = sub_216D0F9C4((uint64_t)&v123, (uint64_t *)a2, a4, a5, a6);
                  if (v18) {
                    sub_216B901C8(*(void **)(a1 + 16), v120);
                  }
                }
                else
                {
                  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_))
                  {
                    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E0E8, v110, v111);
                    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_);
                  }
                  if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_ == v15)
                  {
                    uint64_t v122 = 0;
                    *(_OWORD *)v120 = 0u;
                    long long v121 = 0u;
                    unint64_t v123 = (unint64_t)&unk_26C767268;
                    v124 = v120;
                    uint64_t v18 = sub_216D1001C((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
                    if (v18) {
                      sub_2169057B4(*(void **)(a1 + 16), (uint64_t)v120);
                    }
                    goto LABEL_230;
                  }
                  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_))
                  {
                    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C600, v112, v113);
                    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_);
                  }
                  if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_ == v15)
                  {
                    unint64_t v123 = (unint64_t)&unk_26C7672A0;
                    v124 = v120;
                    uint64_t v18 = sub_216D105F8((uint64_t)&v123, (uint64_t *)a2, a4, a5, a6);
                    if (v18) {
                      sub_216B8FFAC(*(unsigned int ***)(a1 + 16), v120);
                    }
                  }
                  else
                  {
                    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_))
                    {
                      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E0D0, v114, v115);
                      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_);
                    }
                    if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_ == v15)
                    {
                      uint64_t v122 = 0;
                      *(_OWORD *)v120 = 0u;
                      long long v121 = 0u;
                      unint64_t v123 = (unint64_t)&unk_26C7672D8;
                      v124 = v120;
                      uint64_t v18 = sub_216D10C50((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
                      if (v18) {
                        sub_21690403C(*(void **)(a1 + 16), (uint64_t)v120);
                      }
                      goto LABEL_230;
                    }
                    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_))
                    {
                      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C610, v116, v117);
                      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_);
                    }
                    if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_ != v15)
                    {
                      if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_))
                      {
                        _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E0B8, v118, v119);
                        __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_);
                      }
                      if ((pxrInternal__aapl__pxrReserved__::VtValue *)_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_ != v15)
                      {
LABEL_82:
                        __n128 v16 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 16);
                        v120[0] = (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26C766AF8;
                        v120[1] = v16;
                        uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)a2);
                        return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v17, a3, a5, v120[1]);
                      }
                      uint64_t v122 = 0;
                      *(_OWORD *)v120 = 0u;
                      long long v121 = 0u;
                      unint64_t v123 = (unint64_t)&unk_26C767348;
                      v124 = v120;
                      uint64_t v18 = sub_216D11874((uint64_t)&v123, (uint64_t *)a2, a3, a4, a5, a6);
                      if (v18) {
                        sub_216904BC0(*(void **)(a1 + 16), (uint64_t)v120);
                      }
LABEL_230:
                      sub_2168F83DC((uint64_t)v120);
                      return v18;
                    }
                    v120[0] = (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26C767310;
                    v120[1] = (pxrInternal__aapl__pxrReserved__::VtValue *)&v123;
                    uint64_t v18 = sub_216D11228((uint64_t)v120, (uint64_t *)a2, a4, a5, a6);
                    if (v18) {
                      sub_216B8FDDC(*(void **)(a1 + 16), &v123);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v18;
}

void sub_216CFEC88(_Unwind_Exception *a1)
{
}

uint64_t sub_216CFF150(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3, double a4)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 8), a2, &v94);
  int v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v94);
  int InterpolationType = pxrInternal__aapl__pxrReserved__::UsdStage::GetInterpolationType(v8);
  uint64_t v10 = *((void *)&v94 + 1);
  if (*((void *)&v94 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v94 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (!InterpolationType)
  {
LABEL_82:
    uint64_t v12 = *(void *)(a1 + 16);
    *(void *)&long long v94 = &unk_26C766AF8;
    *((void *)&v94 + 1) = v12;
    sub_216D017DC(a3, a4, (uint64_t)&v94, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
  }
  *(void *)&long long v94 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(*(pxrInternal__aapl__pxrReserved__::UsdAttribute **)(a1 + 8));
  uint64_t v11 = *(void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v94);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v94);
  if ((void)v94 != v11)
  {
    {
      pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C510, v18, v19);
    }
    if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v11)
    {
      *(void *)&long long v94 = &unk_26C766B30;
      *((void *)&v94 + 1) = &v97;
      sub_216D01A6C(a3, a4, (uint64_t)&v94, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    {
      pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E268, v20, v21);
    }
    if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C766B68;
      v98 = &v94;
      sub_216D02044(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    {
      pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C248], v22, v23);
    }
    if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v11)
    {
      LODWORD(v97) = 0;
      *(void *)&long long v94 = &unk_26C766BA0;
      *((void *)&v94 + 1) = &v97;
      sub_216D02850(a3, a4, (uint64_t)&v94, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    {
      pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E250, v24, v25);
    }
    if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C766BD8;
      v98 = &v94;
      sub_216D02D80(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    {
      pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C240], v26, v27);
    }
    if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v11)
    {
      unint64_t v97 = 0;
      *(void *)&long long v94 = &unk_26C766C10;
      *((void *)&v94 + 1) = &v97;
      sub_216D034CC(a3, a4, (uint64_t)&v94, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    {
      pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E238, v28, v29);
    }
    if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C766C48;
      v98 = &v94;
      sub_216D039E4(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    {
      pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7557E0, v30, v31);
    }
    if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v11)
    {
      unint64_t v97 = 0;
      *(void *)&long long v94 = &unk_26C766C80;
      *((void *)&v94 + 1) = &v97;
      sub_216D04110(a3, a4, (uint64_t)&v94, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    {
      pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7558A8, v32, v33);
    }
    if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C766CB8;
      v98 = &v94;
      sub_216D04624(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    {
      pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C570, v34, v35);
    }
    if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v11)
    {
      unint64_t v97 = (unint64_t)&unk_26C766CF0;
      v98 = &v94;
      sub_216D04D50(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    {
      pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFE0, v36, v37);
    }
    if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C766D28;
      v98 = &v94;
      sub_216D052E8(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    {
      pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5A0, v38, v39);
    }
    if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v11)
    {
      unint64_t v97 = (unint64_t)&unk_26C766D60;
      v98 = &v94;
      sub_216D05AD4(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFC8, v40, v41);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C766D98;
      v98 = &v94;
      sub_216D061CC(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5C0, v42, v43);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_ == v11)
    {
      unint64_t v97 = (unint64_t)&unk_26C766DD0;
      v98 = &v94;
      sub_216D06B48(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFB0, v44, v45);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C766E08;
      v98 = &v94;
      sub_216D07278(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C6F0, v46, v47);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_ == v11)
    {
      unint64_t v97 = (unint64_t)&unk_26C766E40;
      v98 = &v94;
      sub_216D07C3C(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF50, v48, v49);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C766E78;
      v98 = &v94;
      sub_216D0814C(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C700, v50, v51);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_ == v11)
    {
      *(void *)&long long v94 = &unk_26C766EB0;
      *((void *)&v94 + 1) = &v97;
      sub_216D08890(a3, a4, (uint64_t)&v94, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF08, v52, v53);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C766EE8;
      v98 = &v94;
      sub_216D08DC0(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C710, v54, v55);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_ == v11)
    {
      *(void *)&long long v94 = &unk_26C766F20;
      *((void *)&v94 + 1) = &v97;
      sub_216D0951C(a3, a4, (uint64_t)&v94, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DEC0, v56, v57);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C766F58;
      v98 = &v94;
      sub_216D09C54(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C730, v58, v59);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_ == v11)
    {
      unint64_t v97 = (unint64_t)&unk_26C766F90;
      v98 = &v94;
      sub_216D0A408(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF38, v60, v61);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C766FC8;
      v98 = &v94;
      sub_216D0A958(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C740, v62, v63);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_ == v11)
    {
      *(void *)&long long v94 = &unk_26C767000;
      *((void *)&v94 + 1) = &v97;
      sub_216D0B0F4(a3, a4, (uint64_t)&v94, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DEF0, v64, v65);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C767038;
      v98 = &v94;
      sub_216D0B684(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C750, v66, v67);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_ == v11)
    {
      *(void *)&long long v94 = &unk_26C767070;
      *((void *)&v94 + 1) = &v97;
      sub_216D0BE68(a3, a4, (uint64_t)&v94, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DEA8, v68, v69);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C7670A8;
      v98 = &v94;
      sub_216D0C438(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C770, v70, v71);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_ == v11)
    {
      unint64_t v97 = (unint64_t)&unk_26C7670E0;
      v98 = &v94;
      sub_216D0CC64(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF20, v72, v73);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C767118;
      v98 = &v94;
      sub_216D0D18C(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C780, v74, v75);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_ == v11)
    {
      unint64_t v97 = (unint64_t)&unk_26C767150;
      v98 = &v94;
      sub_216D0D920(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DED8, v76, v77);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C767188;
      v98 = &v94;
      sub_216D0DE80(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C790, v78, v79);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_ == v11)
    {
      *(void *)&long long v94 = &unk_26C7671C0;
      *((void *)&v94 + 1) = &v97;
      sub_216D0E614(a3, a4, (uint64_t)&v94, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DE90, v80, v81);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C7671F8;
      v98 = &v94;
      sub_216D0EEAC(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5F0, v82, v83);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_ == v11)
    {
      unint64_t v97 = (unint64_t)&unk_26C767230;
      v98 = &v94;
      sub_216D0F650(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E0E8, v84, v85);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C767268;
      v98 = &v94;
      sub_216D0FB48(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C600, v86, v87);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_ == v11)
    {
      unint64_t v97 = (unint64_t)&unk_26C7672A0;
      v98 = &v94;
      sub_216D10284(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E0D0, v88, v89);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C7672D8;
      v98 = &v94;
      sub_216D1077C(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C610, v90, v91);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_ == v11)
    {
      *(void *)&long long v94 = &unk_26C767310;
      *((void *)&v94 + 1) = &v97;
      sub_216D10EB8(a3, a4, (uint64_t)&v94, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_ = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E0B8, v92, v93);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_ == v11)
    {
      uint64_t v96 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      unint64_t v97 = (unint64_t)&unk_26C767348;
      v98 = &v94;
      sub_216D113A8(a3, a4, (uint64_t)&v97, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2);
    }
    goto LABEL_82;
  }
  *(void *)&long long v94 = "usd/interpolators.cpp";
  *((void *)&v94 + 1) = "_Interpolate";
  *(void *)&long long v95 = 72;
  *((void *)&v95 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate(const Src &, cons"
                          "t SdfPath &, double, double, double) [Src = std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>]";
  LOBYTE(v96) = 0;
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(*(pxrInternal__aapl__pxrReserved__::UsdAttribute **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (atomic_uint **)&v97);
  unint64_t v13 = v97 & 0xFFFFFFFFFFFFFFF8;
  if ((v97 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v14 = (const char *)(v13 + 16);
    if (*(char *)(v13 + 39) < 0) {
      uint64_t v14 = *(const char **)v14;
    }
  }
  else
  {
    uint64_t v14 = "";
  }
  sub_216D0162C(*(void *)(a1 + 8), &v99);
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v99);
  if (*((char *)String + 23) >= 0) {
    __n128 v16 = (const char *)String;
  }
  else {
    __n128 v16 = (const char *)*String;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v94, 3, (pxrInternal__aapl__pxrReserved__ *)"Unknown value type '%s' for attribute '%s'", v14, v16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v100);
  sub_21697C414(&v99);
  if ((v97 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 0;
}

void sub_216D0106C(_Unwind_Exception *a1)
{
}

uint64_t sub_216D01530(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    __n128 v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    void v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::UsdStage>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReserved__"
            "::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::UsdStage]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x8000000217498040 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_216D015D8(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5)
{
  int v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  char v9 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8);

  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v8, a3, a5, v9);
}

void sub_216D0162C(uint64_t a1@<X0>, int *a2@<X8>)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16)))
  {
    if (*(_DWORD *)a1 == 1)
    {
      sub_216981010(a2, v4);
      uint64_t v5 = a2 + 1;
      BOOL v6 = (_DWORD *)(a1 + 20);
LABEL_7:
      sub_21698105C(v5, v6);
      return;
    }
    int v8 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 24);
    char v9 = a2;
    uint64_t v10 = v4;
LABEL_15:
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v10, v8, v9);
    return;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    if (*(_DWORD *)a1 == 1)
    {
      sub_216981010(a2, (_DWORD *)(v7 + 16));
      uint64_t v5 = a2 + 1;
      BOOL v6 = (_DWORD *)(v7 + 20);
      goto LABEL_7;
    }
    int v8 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 24);
    char v9 = a2;
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 16);
    goto LABEL_15;
  }
  *(void *)a2 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a2 + 1);
}

void sub_216D017DC(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D0186C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  long long v9[2] = *MEMORY[0x263EF8340];
  int v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t result = sub_216D0199C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
    if (result)
    {
      if (sub_216A5F85C(a3))
      {
        v9[1] = 0;
        sub_2168ED33C(a3, v9);
        sub_2168EE084((uint64_t)v9);
        return 2;
      }
      else
      {
        return 1;
      }
    }
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_216D0199C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return HasField;
}

void sub_216D01A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

void sub_216D01A6C(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D01C48(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  int v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D01D10(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D01D10(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D01DDC(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D01DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D01DDC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C510;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DB28;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D01E50(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  __int16 v21 = &v19;
  uint64_t v22 = &stru_26C74C510;
  __int16 v23 = 0;
  uint64_t v20 = &unk_26C75DB28;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v23) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    __int16 v21 = &v18;
    uint64_t v22 = &stru_26C74C510;
    __int16 v23 = 0;
    uint64_t v20 = &unk_26C75DB28;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || (_BYTE)v23)
    {
      unsigned __int16 v18 = v19;
      int v14 = v19;
    }
    else
    {
      int v14 = v18;
    }
    float v15 = (1.0 - (a3 - a4) / (a5 - a4)) * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v19]
        + (a3 - a4) / (a5 - a4) * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v14];
    if (v15 == 0.0)
    {
      unsigned int v16 = HIWORD(LODWORD(v15));
    }
    else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v15) >> 23])
    {
      unsigned int v16 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v15) >> 23]
          + (((LODWORD(v15) & 0x7FFFFF) + ((LODWORD(v15) >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v16) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v15));
    }
    **(_WORD **)(a1 + 8) = v16;
  }
  return v12;
}

void sub_216D02044(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D02340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D02378(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D02440(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D02440(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0250C(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D024E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0250C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74E268;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DB60;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D02580(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  unsigned int v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C398C4(v12, a3, (uint64_t)&v43, a5);
  if (v13)
  {
    int v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C398C4(v14, a3, (uint64_t)&v40, a6) & 1) == 0) {
      sub_216C441D0((uint64_t)&v40, &v43);
    }
    if ((void)v43 != (void)v40 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      unsigned int v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v44;
      v16[4] = (unint64_t)v45;
      unsigned int v45 = (unsigned __int16 *)v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)unsigned int v16 = v43;
      long long v16[2] = v18;
      long long v43 = v20;
      *(void *)&long long v44 = v19;
      __int16 v21 = &v43;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    unsigned int v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v41;
      v16[4] = (unint64_t)v42;
      uint64_t v42 = (unsigned __int16 *)v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)unsigned int v16 = v40;
      long long v16[2] = v25;
      long long v40 = v27;
      *(void *)&long long v41 = v26;
      __int16 v21 = &v40;
      goto LABEL_7;
    }
    __int16 v46 = 0;
    unint64_t v47 = &v46;
    sub_2168F90A4(v16, v43, &v47);
    uint64_t v28 = v45;
    uint64_t v29 = v42;
    unint64_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2168F930C(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      unint64_t v34 = (_WORD *)*((void *)v30 + 4);
      do
      {
        int v35 = *v28++;
        double v36 = (1.0 - v15) * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v35];
        int v37 = *v29++;
        float v38 = v36 + v15 * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v37];
        if (v38 == 0.0)
        {
          unsigned int v39 = HIWORD(LODWORD(v38));
        }
        else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v38) >> 23])
        {
          unsigned int v39 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v38) >> 23]
              + (((LODWORD(v38) & 0x7FFFFF) + ((LODWORD(v38) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v39) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v38));
        }
        *v34++ = v39;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v40);
  sub_2168F83DC((uint64_t)&v43);
  return v13;
}

void sub_216D02814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D02850(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D029DC(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D02AA4(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D02AA4(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D02B70(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D02B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D02B70(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))MEMORY[0x263F8C248];
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DB98;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D02BE4(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v19 = 0;
  uint64_t v10 = sub_216AA5ECC(a2);
  uint64_t v11 = MEMORY[0x263F8C248];
  __int16 v21 = (char *)&v19 + 4;
  uint64_t v22 = MEMORY[0x263F8C248];
  __int16 v23 = 0;
  long long v20 = &unk_26C75DB98;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v23) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = TimeSample;
  }
  if (v13 == 1)
  {
    uint64_t v14 = sub_216AA5ECC(a2);
    __int16 v21 = (char *)&v19;
    uint64_t v22 = v11;
    __int16 v23 = 0;
    long long v20 = &unk_26C75DB98;
    unsigned __int8 v15 = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v14, a5);
    float v16 = *(float *)&v19;
    if ((v15 & ((_BYTE)v23 == 0)) == 0) {
      float v16 = *((float *)&v19 + 1);
    }
    float v17 = (1.0 - (a3 - a4) / (a5 - a4)) * *((float *)&v19 + 1) + (a3 - a4) / (a5 - a4) * v16;
    **(float **)(a1 + 8) = v17;
  }
  return v13;
}

void sub_216D02D80(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D03020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D03054(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0311C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0311C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D031E8(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D031C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D031E8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74E250;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DBD0;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0325C(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  long long v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C39CB4(v12, a3, (uint64_t)&v41, a5);
  if (v13)
  {
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C39CB4(v14, a3, (uint64_t)&v38, a6) & 1) == 0) {
      sub_2169412D4((uint64_t)&v38, &v41);
    }
    if ((void)v41 != (void)v38 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      float v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v42;
      v16[4] = (unint64_t)v43;
      long long v43 = (float *)v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)float v16 = v41;
      long long v16[2] = v18;
      long long v41 = v20;
      *(void *)&long long v42 = v19;
      __int16 v21 = &v41;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    float v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v39;
      v16[4] = (unint64_t)v40;
      long long v40 = (float *)v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)float v16 = v38;
      long long v16[2] = v25;
      long long v38 = v27;
      *(void *)&long long v39 = v26;
      __int16 v21 = &v38;
      goto LABEL_7;
    }
    int v44 = 0;
    unsigned int v45 = &v44;
    sub_2168F84A8(v16, v41, &v45);
    uint64_t v28 = v43;
    uint64_t v29 = v40;
    unint64_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2168F8710(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      unint64_t v34 = (_DWORD *)*((void *)v30 + 4);
      do
      {
        float v35 = *v28++;
        double v36 = (1.0 - v15) * v35;
        float v37 = *v29++;
        *(float *)&double v36 = v36 + v15 * v37;
        *v34++ = LODWORD(v36);
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v38);
  sub_2168F83DC((uint64_t)&v41);
  return v13;
}

void sub_216D03494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D034CC(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D0364C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D03714(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D03714(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D037E0(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D037B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D037E0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))MEMORY[0x263F8C240];
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DC08;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D03854(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  double v18 = 0.0;
  double v19 = 0.0;
  uint64_t v10 = sub_216AA5ECC(a2);
  uint64_t v11 = MEMORY[0x263F8C240];
  __int16 v21 = &v19;
  uint64_t v22 = MEMORY[0x263F8C240];
  __int16 v23 = 0;
  long long v20 = &unk_26C75DC08;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v23) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = TimeSample;
  }
  if (v13 == 1)
  {
    uint64_t v14 = sub_216AA5ECC(a2);
    __int16 v21 = &v18;
    uint64_t v22 = v11;
    __int16 v23 = 0;
    long long v20 = &unk_26C75DC08;
    unsigned __int8 v15 = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v14, a5);
    double v16 = v18;
    if ((v15 & ((_BYTE)v23 == 0)) == 0) {
      double v16 = v19;
    }
    **(double **)(a1 + 8) = (1.0 - (a3 - a4) / (a5 - a4)) * v19 + (a3 - a4) / (a5 - a4) * v16;
  }
  return v13;
}

void sub_216D039E4(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D03C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D03CA8(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D03D70(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D03D70(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D03E3C(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D03E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D03E3C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74E238;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DC40;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D03EB0(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  long long v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3A0A4(v12, a3, (uint64_t)&v41, a5);
  if (v13)
  {
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3A0A4(v14, a3, (uint64_t)&v38, a6) & 1) == 0) {
      sub_21693E46C((uint64_t)&v38, &v41);
    }
    if ((void)v41 != (void)v38 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      double v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v42;
      v16[4] = (unint64_t)v43;
      long long v43 = (double *)v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)double v16 = v41;
      long long v16[2] = v18;
      long long v41 = v20;
      *(void *)&long long v42 = v19;
      __int16 v21 = &v41;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    double v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v39;
      v16[4] = (unint64_t)v40;
      long long v40 = (double *)v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)double v16 = v38;
      long long v16[2] = v25;
      long long v38 = v27;
      *(void *)&long long v39 = v26;
      __int16 v21 = &v38;
      goto LABEL_7;
    }
    uint64_t v44 = 0;
    unsigned int v45 = &v44;
    sub_2168F9B94(v16, v41, &v45);
    uint64_t v28 = v43;
    uint64_t v29 = v40;
    unint64_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2168F9DFC(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      unint64_t v34 = (double *)*((void *)v30 + 4);
      do
      {
        double v35 = *v28++;
        double v36 = v35;
        double v37 = *v29++;
        *v34++ = (1.0 - v15) * v36 + v15 * v37;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v38);
  sub_2168F83DC((uint64_t)&v41);
  return v13;
}

void sub_216D040D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D04110(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D0428C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D04354(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D04354(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D04420(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D043F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D04420(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C7557E0;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DC78;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D04494(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  double v17 = 0.0;
  double v18 = 0.0;
  uint64_t v10 = sub_216AA5ECC(a2);
  long long v20 = &v18;
  __int16 v21 = &stru_26C7557E0;
  __int16 v22 = 0;
  unint64_t v19 = &unk_26C75DC78;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v22) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    long long v20 = &v17;
    __int16 v21 = &stru_26C7557E0;
    __int16 v22 = 0;
    unint64_t v19 = &unk_26C75DC78;
    unsigned __int8 v14 = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5);
    double v15 = v17;
    if ((v14 & ((_BYTE)v22 == 0)) == 0) {
      double v15 = v18;
    }
    **(double **)(a1 + 8) = (1.0 - (a3 - a4) / (a5 - a4)) * v18 + (a3 - a4) / (a5 - a4) * v15;
  }
  return v12;
}

void sub_216D04624(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D048B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D048E8(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D049B0(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D049B0(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D04A7C(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D04A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D04A7C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C7558A8;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DCB0;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D04AF0(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  long long v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3A4F0(v12, a3, (uint64_t)&v41, a5);
  if (v13)
  {
    unsigned __int8 v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3A4F0(v14, a3, (uint64_t)&v38, a6) & 1) == 0) {
      sub_216C44A4C((uint64_t)&v38, &v41);
    }
    if ((void)v41 != (void)v38 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      double v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v42;
      v16[4] = (unint64_t)v43;
      long long v43 = (double *)v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)double v16 = v41;
      long long v16[2] = v18;
      long long v41 = v20;
      *(void *)&long long v42 = v19;
      __int16 v21 = &v41;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    double v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v39;
      v16[4] = (unint64_t)v40;
      long long v40 = (double *)v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)double v16 = v38;
      long long v16[2] = v25;
      long long v38 = v27;
      *(void *)&long long v39 = v26;
      __int16 v21 = &v38;
      goto LABEL_7;
    }
    uint64_t v44 = 0;
    unsigned int v45 = &v44;
    sub_2169B11D8(v16, v41, &v45);
    uint64_t v28 = v43;
    uint64_t v29 = v40;
    unint64_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2169B1440(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      unint64_t v34 = (double *)*((void *)v30 + 4);
      do
      {
        double v35 = *v28++;
        double v36 = v35;
        double v37 = *v29++;
        *v34++ = (1.0 - v15) * v36 + v15 * v37;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v38);
  sub_2168F83DC((uint64_t)&v41);
  return v13;
}

void sub_216D04D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D04D50(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D04F10(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D04FD8(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D04FD8(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D050A4(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0507C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D050A4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C570;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DEA8;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D05118(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  *(void *)&v29.f64[1] = &v26;
  *(void *)&long long v30 = &stru_26C74C570;
  WORD4(v30) = 0;
  *(void *)&v29.f64[0] = &unk_26C75DEA8;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if (BYTE8(v30)) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    *(void *)&v29.f64[1] = &v24;
    *(void *)&long long v30 = &stru_26C74C570;
    WORD4(v30) = 0;
    *(void *)&v29.f64[0] = &unk_26C75DEA8;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || BYTE8(v30))
    {
      float64x2_t v24 = v26;
      long long v25 = v27;
    }
    double v14 = (a3 - a4) / (a5 - a4);
    float64x2_t v29 = v26;
    long long v30 = v27;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v29, 1.0 - v14);
    float64x2_t v23 = *(float64x2_t *)v15;
    uint64_t v16 = *(void *)(v15 + 16);
    uint64_t v17 = *(void *)(v15 + 24);
    float64x2_t v29 = v24;
    long long v30 = v25;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v29, v14);
    long long v19 = v18[1];
    v28[0] = *v18;
    v28[1] = v19;
    float64x2_t v29 = v23;
    *(void *)&long long v30 = v16;
    *((void *)&v30 + 1) = v17;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v29.f64, (double *)v28);
    long long v20 = v30;
    uint64_t v21 = *(void *)(a1 + 8);
    *(float64x2_t *)uint64_t v21 = v29;
    *(_OWORD *)(v21 + 16) = v20;
  }
  return v12;
}

void sub_216D052E8(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D055D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D0560C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D056D4(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D056D4(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D057A0(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D05778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D057A0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74DFE0;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DEE0;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D05814(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  unint64_t v50 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  unint64_t v47 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3BC90(v12, a3, (uint64_t)&v48, a5);
  if (v13)
  {
    double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3BC90(v14, a3, (uint64_t)&v45, a6) & 1) == 0) {
      sub_216C4600C((uint64_t)&v45, &v48);
    }
    if ((void)v48 != (void)v45 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      uint64_t v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v49;
      v16[4] = v50;
      unint64_t v50 = v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v48;
      long long v16[2] = v18;
      long long v48 = v20;
      *(void *)&long long v49 = v19;
      uint64_t v21 = &v48;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    uint64_t v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v46;
      v16[4] = v47;
      unint64_t v47 = v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v45;
      long long v16[2] = v25;
      long long v45 = v27;
      *(void *)&long long v46 = v26;
      uint64_t v21 = &v45;
      goto LABEL_7;
    }
    float64x2_t v52 = 0u;
    long long v53 = 0u;
    *(void *)&v51[0] = &v52;
    sub_2169C0824(v16, v48, (_OWORD **)v51);
    unint64_t v28 = v50;
    unint64_t v29 = v47;
    long long v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2169C0A9C(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      unint64_t v34 = (_OWORD *)(*((void *)v30 + 4) + 16);
      do
      {
        long long v35 = *(_OWORD *)(v28 + 16);
        float64x2_t v52 = *(float64x2_t *)v28;
        long long v53 = v35;
        pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, 1.0 - v15);
        float64_t v37 = *v36;
        float64_t v38 = v36[1];
        uint64_t v39 = *((void *)v36 + 2);
        uint64_t v40 = *((void *)v36 + 3);
        long long v41 = *(_OWORD *)(v29 + 16);
        float64x2_t v52 = *(float64x2_t *)v29;
        long long v53 = v41;
        pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, v15);
        long long v43 = v42[1];
        v51[0] = *v42;
        v51[1] = v43;
        v52.f64[0] = v37;
        v52.f64[1] = v38;
        *(void *)&long long v53 = v39;
        *((void *)&v53 + 1) = v40;
        pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)v51);
        long long v44 = v53;
        *(v34 - 1) = v52;
        *unint64_t v34 = v44;
        v34 += 2;
        v29 += 32;
        v28 += 32;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v45);
  sub_2168F83DC((uint64_t)&v48);
  return v13;
}

void sub_216D05A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D05AD4(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D05D40(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D05E08(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D05E08(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D05ED4(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D05EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D05ED4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C5A0;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DF18;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D05F48(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_216AA5ECC(a2);
  *(void *)&v39.f64[1] = &v32;
  *(void *)&long long v40 = &stru_26C74C5A0;
  WORD4(v40) = 0;
  *(void *)&v39.f64[0] = &unk_26C75DF18;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if (BYTE8(v40)) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    *(void *)&v39.f64[1] = &v27;
    *(void *)&long long v40 = &stru_26C74C5A0;
    WORD4(v40) = 0;
    *(void *)&v39.f64[0] = &unk_26C75DF18;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || BYTE8(v40))
    {
      long long v29 = v34;
      long long v30 = v35;
      uint64_t v31 = v36;
      float64x2_t v27 = v32;
      long long v28 = v33;
    }
    double v14 = (a3 - a4) / (a5 - a4);
    long long v41 = v34;
    long long v42 = v35;
    uint64_t v43 = v36;
    float64x2_t v39 = v32;
    long long v40 = v33;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v39, 1.0 - v14);
    long long v16 = *(_OWORD *)(v15 + 48);
    long long v46 = *(_OWORD *)(v15 + 32);
    long long v47 = v16;
    uint64_t v48 = *(void *)(v15 + 64);
    long long v17 = *(_OWORD *)(v15 + 16);
    float64x2_t v44 = *(float64x2_t *)v15;
    long long v45 = v17;
    long long v41 = v29;
    long long v42 = v30;
    uint64_t v43 = v31;
    float64x2_t v39 = v27;
    long long v40 = v28;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v39, v14);
    v37[0] = *(_OWORD *)v18;
    long long v19 = *(_OWORD *)(v18 + 16);
    long long v20 = *(_OWORD *)(v18 + 32);
    long long v21 = *(_OWORD *)(v18 + 48);
    uint64_t v38 = *(void *)(v18 + 64);
    v37[2] = v20;
    v37[3] = v21;
    v37[1] = v19;
    long long v41 = v46;
    long long v42 = v47;
    uint64_t v43 = v48;
    float64x2_t v39 = v44;
    long long v40 = v45;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v39.f64, (double *)v37);
    uint64_t v22 = *(void *)(a1 + 8);
    *(float64x2_t *)uint64_t v22 = v39;
    long long v23 = v40;
    long long v24 = v41;
    long long v25 = v42;
    *(void *)(v22 + 64) = v43;
    *(_OWORD *)(v22 + 32) = v24;
    *(_OWORD *)(v22 + 48) = v25;
    *(_OWORD *)(v22 + 16) = v23;
  }
  return v12;
}

void sub_216D061CC(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t v6 = &unk_26C766D98;
  __int16 v7 = v10;
  uint64_t v4 = &unk_26C766D98;
  uint64_t v5 = v8;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a4, a2);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>();
}

void sub_216D06570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_216D065B8(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D06680(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D06680(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0674C(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D06724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0674C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74DFC8;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DF50;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D067C0(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  unint64_t v63 = 0;
  long long v61 = 0u;
  long long v62 = 0u;
  unint64_t v60 = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  uint64_t v56 = &unk_26C766D98;
  unint64_t v57 = &v61;
  v54 = &unk_26C766D98;
  char v55 = &v58;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3C080(v12, a3, (uint64_t)&v61, a5);
  if (v13)
  {
    double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3C080(v14, a3, (uint64_t)&v58, a6) & 1) == 0) {
      sub_216C463F4((uint64_t)&v58, &v61);
    }
    if ((void)v61 != (void)v58 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      long long v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v62;
      v16[4] = v63;
      unint64_t v63 = v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)long long v16 = v61;
      long long v16[2] = v18;
      long long v61 = v20;
      *(void *)&long long v62 = v19;
      long long v21 = &v61;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    long long v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v59;
      v16[4] = v60;
      unint64_t v60 = v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)long long v16 = v58;
      long long v16[2] = v25;
      long long v58 = v27;
      *(void *)&long long v59 = v26;
      long long v21 = &v58;
      goto LABEL_7;
    }
    uint64_t v70 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    float64x2_t v66 = 0u;
    long long v67 = 0u;
    *(void *)&long long v71 = &v66;
    sub_2169C162C(v16, v61, (uint64_t *)&v71);
    unint64_t v28 = v63;
    unint64_t v29 = v60;
    long long v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2169C195C(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      uint64_t v34 = *((void *)v30 + 4);
      do
      {
        float64x2_t v66 = *(float64x2_t *)v28;
        long long v35 = *(_OWORD *)(v28 + 16);
        long long v36 = *(_OWORD *)(v28 + 32);
        long long v37 = *(_OWORD *)(v28 + 48);
        uint64_t v70 = *(void *)(v28 + 64);
        long long v68 = v36;
        long long v69 = v37;
        long long v67 = v35;
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v66, 1.0 - v15);
        long long v72 = v38[1];
        long long v73 = v38[2];
        long long v74 = v38[3];
        uint64_t v75 = *((void *)v38 + 8);
        long long v71 = *v38;
        float64x2_t v66 = *(float64x2_t *)v29;
        long long v39 = *(_OWORD *)(v29 + 16);
        long long v40 = *(_OWORD *)(v29 + 32);
        long long v41 = *(_OWORD *)(v29 + 48);
        uint64_t v70 = *(void *)(v29 + 64);
        long long v68 = v40;
        long long v69 = v41;
        long long v67 = v39;
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v66, v15);
        v64[0] = *(_OWORD *)v42;
        long long v43 = *(_OWORD *)(v42 + 16);
        long long v44 = *(_OWORD *)(v42 + 32);
        long long v45 = *(_OWORD *)(v42 + 48);
        uint64_t v65 = *(void *)(v42 + 64);
        v64[2] = v44;
        v64[3] = v45;
        v64[1] = v43;
        long long v51 = v73;
        long long v52 = v74;
        uint64_t v53 = v75;
        long long v49 = v71;
        long long v50 = v72;
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=((double *)&v49, (double *)v64);
        *(_OWORD *)uint64_t v34 = v49;
        long long v46 = v50;
        long long v47 = v51;
        long long v48 = v52;
        *(void *)(v34 + 64) = v53;
        *(_OWORD *)(v34 + 32) = v47;
        *(_OWORD *)(v34 + 48) = v48;
        *(_OWORD *)(v34 + 16) = v46;
        v34 += 72;
        v29 += 72;
        v28 += 72;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v58);
  sub_2168F83DC((uint64_t)&v61);
  return v13;
}

void sub_216D06AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_216D06B48(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D06DD4(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D06E9C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D06E9C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D06F68(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D06F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D06F68(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C5C0;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DF88;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D06FDC(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v10 = sub_216AA5ECC(a2);
  *(void *)&v52.f64[1] = &v43;
  *(void *)&v53.f64[0] = &stru_26C74C5C0;
  LOWORD(v53.f64[1]) = 0;
  *(void *)&v52.f64[0] = &unk_26C75DF88;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if (LOBYTE(v53.f64[1])) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    *(void *)&v52.f64[1] = &v35;
    *(void *)&v53.f64[0] = &stru_26C74C5C0;
    LOWORD(v53.f64[1]) = 0;
    *(void *)&v52.f64[0] = &unk_26C75DF88;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || LOBYTE(v53.f64[1]))
    {
      float64x2_t v39 = v47;
      float64x2_t v40 = v48;
      float64x2_t v41 = v49;
      float64x2_t v42 = v50;
      float64x2_t v35 = v43;
      float64x2_t v36 = v44;
      float64x2_t v37 = v45;
      float64x2_t v38 = v46;
    }
    double v14 = (a3 - a4) / (a5 - a4);
    float64x2_t v56 = v47;
    float64x2_t v57 = v48;
    float64x2_t v58 = v49;
    float64x2_t v59 = v50;
    float64x2_t v52 = v43;
    float64x2_t v53 = v44;
    float64x2_t v54 = v45;
    float64x2_t v55 = v46;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v52, 1.0 - v14);
    float64x2_t v16 = v15[5];
    float64x2_t v64 = v15[4];
    float64x2_t v65 = v16;
    float64x2_t v17 = v15[7];
    float64x2_t v66 = v15[6];
    float64x2_t v67 = v17;
    float64x2_t v18 = v15[1];
    float64x2_t v60 = *v15;
    float64x2_t v61 = v18;
    float64x2_t v19 = v15[3];
    float64x2_t v62 = v15[2];
    float64x2_t v63 = v19;
    float64x2_t v56 = v39;
    float64x2_t v57 = v40;
    float64x2_t v58 = v41;
    float64x2_t v59 = v42;
    float64x2_t v52 = v35;
    float64x2_t v53 = v36;
    float64x2_t v54 = v37;
    float64x2_t v55 = v38;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v52, v14);
    long long v21 = *v20;
    long long v22 = v20[1];
    long long v23 = v20[3];
    _OWORD v51[2] = v20[2];
    v51[3] = v23;
    v51[0] = v21;
    v51[1] = v22;
    long long v24 = v20[4];
    long long v25 = v20[5];
    long long v26 = v20[7];
    v51[6] = v20[6];
    v51[7] = v26;
    v51[4] = v24;
    v51[5] = v25;
    float64x2_t v58 = v66;
    float64x2_t v59 = v67;
    float64x2_t v56 = v64;
    float64x2_t v57 = v65;
    float64x2_t v54 = v62;
    float64x2_t v55 = v63;
    float64x2_t v52 = v60;
    float64x2_t v53 = v61;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v52.f64, (double *)v51);
    long long v27 = *(float64x2_t **)(a1 + 8);
    float64x2_t v28 = v52;
    float64x2_t v29 = v53;
    float64x2_t v30 = v55;
    void v27[2] = v54;
    void v27[3] = v30;
    *long long v27 = v28;
    v27[1] = v29;
    float64x2_t v31 = v56;
    float64x2_t v32 = v57;
    float64x2_t v33 = v59;
    v27[6] = v58;
    v27[7] = v33;
    void v27[4] = v31;
    v27[5] = v32;
  }
  return v12;
}

void sub_216D07278(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t v6 = &unk_26C766E08;
  __int16 v7 = v10;
  uint64_t v4 = &unk_26C766E08;
  uint64_t v5 = v8;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a4, a2);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>();
}

void sub_216D07640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t sub_216D07688(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D07750(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D07750(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0781C(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D077F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0781C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74DFB0;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DFC0;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D07890(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  uint64_t v78 = 0;
  long long v76 = 0u;
  long long v77 = 0u;
  uint64_t v75 = 0;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = &unk_26C766E08;
  long long v72 = &v76;
  long long v69 = &unk_26C766E08;
  uint64_t v70 = &v73;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3C470(v12, a3, (uint64_t)&v76, a5);
  if (v13)
  {
    double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3C470(v14, a3, (uint64_t)&v73, a6) & 1) == 0) {
      sub_216C467D8((uint64_t)&v73, &v76);
    }
    if ((void)v76 != (void)v73 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      float64x2_t v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v77;
      v16[4] = (unint64_t)v78;
      uint64_t v78 = (float64x2_t *)v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)float64x2_t v16 = v76;
      long long v16[2] = v18;
      long long v76 = v20;
      *(void *)&long long v77 = v19;
      long long v21 = &v76;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    float64x2_t v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v74;
      v16[4] = (unint64_t)v75;
      uint64_t v75 = (float64x2_t *)v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)float64x2_t v16 = v73;
      long long v16[2] = v25;
      long long v73 = v27;
      *(void *)&long long v74 = v26;
      long long v21 = &v73;
      goto LABEL_7;
    }
    float64x2_t v86 = 0u;
    float64x2_t v87 = 0u;
    float64x2_t v84 = 0u;
    float64x2_t v85 = 0u;
    float64x2_t v82 = 0u;
    float64x2_t v83 = 0u;
    float64x2_t v80 = 0u;
    float64x2_t v81 = 0u;
    *(void *)&long long v88 = &v80;
    sub_216902248(v16, v76, (long long **)&v88);
    float64x2_t v28 = v78;
    float64x2_t v29 = v75;
    float64x2_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_216902540(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      uint64_t v34 = (_OWORD *)*((void *)v30 + 4);
      do
      {
        float64x2_t v35 = *v28;
        float64x2_t v36 = v28[1];
        float64x2_t v37 = v28[3];
        float64x2_t v82 = v28[2];
        float64x2_t v83 = v37;
        float64x2_t v80 = v35;
        float64x2_t v81 = v36;
        float64x2_t v38 = v28[4];
        float64x2_t v39 = v28[5];
        float64x2_t v40 = v28[7];
        float64x2_t v86 = v28[6];
        float64x2_t v87 = v40;
        float64x2_t v84 = v38;
        float64x2_t v85 = v39;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v80, 1.0 - v15);
        long long v92 = v41[4];
        long long v93 = v41[5];
        long long v94 = v41[6];
        long long v95 = v41[7];
        long long v88 = *v41;
        long long v89 = v41[1];
        long long v90 = v41[2];
        long long v91 = v41[3];
        float64x2_t v42 = *v29;
        float64x2_t v43 = v29[1];
        float64x2_t v44 = v29[3];
        float64x2_t v82 = v29[2];
        float64x2_t v83 = v44;
        float64x2_t v80 = v42;
        float64x2_t v81 = v43;
        float64x2_t v45 = v29[4];
        float64x2_t v46 = v29[5];
        float64x2_t v47 = v29[7];
        float64x2_t v86 = v29[6];
        float64x2_t v87 = v47;
        float64x2_t v84 = v45;
        float64x2_t v85 = v46;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v80, v15);
        long long v49 = *v48;
        long long v50 = v48[1];
        long long v51 = v48[3];
        v79[2] = v48[2];
        v79[3] = v51;
        v79[0] = v49;
        v79[1] = v50;
        long long v52 = v48[4];
        long long v53 = v48[5];
        long long v54 = v48[7];
        v79[6] = v48[6];
        v79[7] = v54;
        v79[4] = v52;
        v79[5] = v53;
        long long v65 = v92;
        long long v66 = v93;
        long long v67 = v94;
        long long v68 = v95;
        long long v61 = v88;
        long long v62 = v89;
        long long v63 = v90;
        long long v64 = v91;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=((double *)&v61, (double *)v79);
        long long v55 = v61;
        long long v56 = v62;
        long long v57 = v64;
        v34[2] = v63;
        v34[3] = v57;
        *uint64_t v34 = v55;
        v34[1] = v56;
        long long v58 = v65;
        long long v59 = v66;
        long long v60 = v68;
        v34[6] = v67;
        v34[7] = v60;
        v34[4] = v58;
        v34[5] = v59;
        v34 += 8;
        v29 += 8;
        v28 += 8;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v73);
  sub_2168F83DC((uint64_t)&v76);
  return v13;
}

void sub_216D07BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_216D07C3C(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D07DB4(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D07E7C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D07E7C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D07F48(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D07F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D07F48(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C6F0;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E298;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D07FBC(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  unint64_t v18 = &v16;
  unint64_t v19 = &stru_26C74C6F0;
  __int16 v20 = 0;
  unint64_t v17 = &unk_26C75E298;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v20) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    unint64_t v18 = &v15;
    unint64_t v19 = &stru_26C74C6F0;
    __int16 v20 = 0;
    unint64_t v17 = &unk_26C75E298;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || (_BYTE)v20) {
      float64x2_t v15 = v16;
    }
    *(float64x2_t *)*(void *)(a1 + 8) = vaddq_f64(vmulq_n_f64(v16, 1.0 - (a3 - a4) / (a5 - a4)), vmulq_n_f64(v15, (a3 - a4) / (a5 - a4)));
  }
  return v12;
}

void sub_216D0814C(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D083E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D0841C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D084E4(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D084E4(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D085B0(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D08588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D085B0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74DF50;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E2D0;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D08624(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  float64x2_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  float64x2_t v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3E000(v12, a3, (uint64_t)&v41, a5);
  if (v13)
  {
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3E000(v14, a3, (uint64_t)&v38, a6) & 1) == 0) {
      sub_216C48340((uint64_t)&v38, &v41);
    }
    if ((void)v41 != (void)v38 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      float64x2_t v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v42;
      v16[4] = (unint64_t)v43;
      float64x2_t v43 = (float64x2_t *)v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)float64x2_t v16 = v41;
      long long v16[2] = v18;
      long long v41 = v20;
      *(void *)&long long v42 = v19;
      long long v21 = &v41;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    float64x2_t v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v39;
      v16[4] = (unint64_t)v40;
      float64x2_t v40 = (float64x2_t *)v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)float64x2_t v16 = v38;
      long long v16[2] = v25;
      long long v38 = v27;
      *(void *)&long long v39 = v26;
      long long v21 = &v38;
      goto LABEL_7;
    }
    v44[0] = 0;
    v44[1] = 0;
    float64x2_t v45 = v44;
    sub_2168FC1FC(v16, v41, &v45);
    float64x2_t v28 = v43;
    float64x2_t v29 = v40;
    float64x2_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2168FC460(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      uint64_t v34 = (float64x2_t *)*((void *)v30 + 4);
      do
      {
        float64x2_t v35 = *v28++;
        float64x2_t v36 = v35;
        float64x2_t v37 = *v29++;
        *v34++ = vaddq_f64(vmulq_n_f64(v36, 1.0 - (a4 - a5) / (a6 - a5)), vmulq_n_f64(v37, (a4 - a5) / (a6 - a5)));
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v38);
  sub_2168F83DC((uint64_t)&v41);
  return v13;
}

void sub_216D08858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D08890(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D08A18(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D08AE0(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D08AE0(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D08BAC(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D08B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D08BAC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C700;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E228;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D08C20(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  long long v20 = &v18;
  long long v21 = &stru_26C74C700;
  __int16 v22 = 0;
  unint64_t v19 = &unk_26C75E228;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v22) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    long long v20 = &v17;
    long long v21 = &stru_26C74C700;
    __int16 v22 = 0;
    unint64_t v19 = &unk_26C75E228;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || (_BYTE)v22)
    {
      float32x2_t v14 = v18;
      float32x2_t v15 = v18;
    }
    else
    {
      float32x2_t v15 = v17;
      float32x2_t v14 = v18;
    }
    **(float32x2_t **)(a1 + 8) = vadd_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v14), 1.0 - (a3 - a4) / (a5 - a4))), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v15), (a3 - a4) / (a5 - a4))));
  }
  return v12;
}

void sub_216D08DC0(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D09068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D0909C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D09164(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D09164(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D09230(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D09208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D09230(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74DF08;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E260;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D092A4(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  float64x2_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3DC10(v12, a3, (uint64_t)&v42, a5);
  if (v13)
  {
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3DC10(v14, a3, (uint64_t)&v39, a6) & 1) == 0) {
      sub_216C47F9C((uint64_t)&v39, &v42);
    }
    if ((void)v42 != (void)v39 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      float64x2_t v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v43;
      v16[4] = (unint64_t)v44;
      float64x2_t v44 = (float32x2_t *)v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)float64x2_t v16 = v42;
      long long v16[2] = v18;
      long long v42 = v20;
      *(void *)&long long v43 = v19;
      long long v21 = &v42;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    float64x2_t v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v40;
      v16[4] = (unint64_t)v41;
      long long v41 = (float32x2_t *)v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)float64x2_t v16 = v39;
      long long v16[2] = v25;
      long long v39 = v27;
      *(void *)&long long v40 = v26;
      long long v21 = &v39;
      goto LABEL_7;
    }
    double v38 = (a4 - a5) / (a6 - a5);
    uint64_t v45 = 0;
    float64x2_t v46 = &v45;
    sub_2168FAAE8(v16, v42, &v46);
    float64x2_t v28 = v44;
    float64x2_t v29 = v41;
    float64x2_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2168FAD50(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      uint64_t v34 = (float32x2_t *)*((void *)v30 + 4);
      do
      {
        float32x2_t v35 = *v28++;
        float32x2_t v36 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v35), 1.0 - v38));
        float32x2_t v37 = *v29++;
        *v34++ = vadd_f32(v36, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v37), v38)));
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v39);
  sub_2168F83DC((uint64_t)&v42);
  return v13;
}

void sub_216D094E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D0951C(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D096C4(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0978C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0978C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D09858(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D09830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D09858(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C710;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E1B8;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

unsigned __int16 *sub_216D098CC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  return a1;
}

unsigned __int16 *sub_216D099BC(unsigned __int16 *a1, double a2)
{
  float v3 = a2;
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] * v3;
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] * v3;
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  return a1;
}

uint64_t sub_216D09A9C(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  long long v21 = &v18;
  unint64_t v22 = &stru_26C74C710;
  __int16 v23 = 0;
  long long v20 = &unk_26C75E1B8;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v23) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    long long v21 = &v17;
    unint64_t v22 = &stru_26C74C710;
    __int16 v23 = 0;
    long long v20 = &unk_26C75E1B8;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || (_BYTE)v23) {
      int v17 = v18;
    }
    double v14 = (a3 - a4) / (a5 - a4);
    LODWORD(v20) = v18;
    int v15 = *(_DWORD *)sub_216D099BC((unsigned __int16 *)&v20, 1.0 - v14);
    LODWORD(v20) = v17;
    int v19 = *(_DWORD *)sub_216D099BC((unsigned __int16 *)&v20, v14);
    LODWORD(v20) = v15;
    **(_DWORD **)(a1 + 8) = *(_DWORD *)sub_216D098CC((unsigned __int16 *)&v20, (unsigned __int16 *)&v19);
  }
  return v12;
}

void sub_216D09C54(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D09F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D09F58(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  float v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0A020(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0A020(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0A0EC(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0A0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0A0EC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74DEC0;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E1F0;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0A160(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  long long v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3D820(v12, a3, (uint64_t)&v40, a5);
  if (v13)
  {
    double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3D820(v14, a3, (uint64_t)&v37, a6) & 1) == 0) {
      sub_216C47BF8((uint64_t)&v37, &v40);
    }
    if ((void)v40 != (void)v37 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      float64x2_t v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v41;
      v16[4] = (unint64_t)v42;
      long long v42 = (int *)v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)float64x2_t v16 = v40;
      long long v16[2] = v18;
      long long v40 = v20;
      *(void *)&long long v41 = v19;
      long long v21 = &v40;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    float64x2_t v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v38;
      v16[4] = (unint64_t)v39;
      long long v39 = (_DWORD *)v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)float64x2_t v16 = v37;
      long long v16[2] = v25;
      long long v37 = v27;
      *(void *)&long long v38 = v26;
      long long v21 = &v37;
      goto LABEL_7;
    }
    int v44 = 0;
    *(void *)long long v43 = &v44;
    sub_2168FB654(v16, v40, (_DWORD **)v43);
    float64x2_t v28 = v42;
    float64x2_t v29 = v39;
    float64x2_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2168FB8BC(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      uint64_t v34 = (_DWORD *)*((void *)v30 + 4);
      do
      {
        int v35 = *v28++;
        *(_DWORD *)long long v43 = v35;
        int v36 = *(_DWORD *)sub_216D099BC(v43, 1.0 - v15);
        *(_DWORD *)long long v43 = *v29;
        int v44 = *(_DWORD *)sub_216D099BC(v43, v15);
        *(_DWORD *)long long v43 = v36;
        *v34++ = *(_DWORD *)sub_216D098CC(v43, (unsigned __int16 *)&v44);
        ++v29;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v37);
  sub_2168F83DC((uint64_t)&v40);
  return v13;
}

void sub_216D0A3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D0A408(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D0A5A0(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0A668(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0A668(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0A734(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0A70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0A734(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C730;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E458;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0A7A8(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  __int16 v23 = &v20;
  unint64_t v24 = &stru_26C74C730;
  __int16 v25 = 0;
  unint64_t v22 = &unk_26C75E458;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v25) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    __int16 v23 = &v18;
    unint64_t v24 = &stru_26C74C730;
    __int16 v25 = 0;
    unint64_t v22 = &unk_26C75E458;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || (_BYTE)v25)
    {
      float64x2_t v18 = v20;
      double v19 = v21;
    }
    double v14 = (a3 - a4) / (a5 - a4);
    double v15 = (1.0 - v14) * v21 + v14 * v19;
    float64x2_t v16 = *(float64x2_t **)(a1 + 8);
    *float64x2_t v16 = vaddq_f64(vmulq_n_f64(v20, 1.0 - v14), vmulq_n_f64(v18, v14));
    v16[1].f64[0] = v15;
  }
  return v12;
}

void sub_216D0A958(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D0AC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D0AC54(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0AD1C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0AD1C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0ADE8(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0ADC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0ADE8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74DF38;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E490;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0AE5C(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  unint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  unint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3EFC0(v12, a3, (uint64_t)&v43, a5);
  if (v13)
  {
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3EFC0(v14, a3, (uint64_t)&v40, a6) & 1) == 0) {
      sub_216C492C4((uint64_t)&v40, &v43);
    }
    if ((void)v43 != (void)v40 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      float64x2_t v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v44;
      v16[4] = v45;
      unint64_t v45 = v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)float64x2_t v16 = v43;
      long long v16[2] = v18;
      long long v43 = v20;
      *(void *)&long long v44 = v19;
      double v21 = &v43;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    float64x2_t v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v41;
      v16[4] = v42;
      unint64_t v42 = v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)float64x2_t v16 = v40;
      long long v16[2] = v25;
      long long v40 = v27;
      *(void *)&long long v41 = v26;
      double v21 = &v40;
      goto LABEL_7;
    }
    double v39 = (a4 - a5) / (a6 - a5);
    memset(v46, 0, sizeof(v46));
    float64x2_t v47 = (long long *)v46;
    sub_2168FEAB4(v16, v43, &v47);
    unint64_t v28 = v45;
    unint64_t v29 = v42;
    float64x2_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2168FED88(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      double v34 = 1.0 - v39;
      int v35 = (double *)(*((void *)v30 + 4) + 16);
      int v36 = (double *)(v29 + 16);
      long long v37 = (double *)(v28 + 16);
      do
      {
        double v38 = v34 * *v37 + v39 * *v36;
        *((float64x2_t *)v35 - 1) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v37 - 2), v34), vmulq_n_f64(*(float64x2_t *)(v36 - 2), v39));
        *int v35 = v38;
        v35 += 3;
        v36 += 3;
        v37 += 3;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v40);
  sub_2168F83DC((uint64_t)&v43);
  return v13;
}

void sub_216D0B0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D0B0F4(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D0B2AC(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0B374(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0B374(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0B440(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0B418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0B440(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C740;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E3E8;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0B4B4(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  unint64_t v24 = &v21;
  unint64_t v25 = &stru_26C74C740;
  __int16 v26 = 0;
  __int16 v23 = &unk_26C75E3E8;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v26) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    unint64_t v24 = &v19;
    unint64_t v25 = &stru_26C74C740;
    __int16 v26 = 0;
    __int16 v23 = &unk_26C75E3E8;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || (_BYTE)v26)
    {
      float32x2_t v19 = v21;
      float v20 = v22;
    }
    double v14 = (a3 - a4) / (a5 - a4);
    float v15 = (1.0 - v14) * v22;
    float v16 = v14 * v20;
    unint64_t v17 = *(float32x2_t **)(a1 + 8);
    *unint64_t v17 = vadd_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v21), 1.0 - v14)), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v19), v14)));
    v17[1].f32[0] = v15 + v16;
  }
  return v12;
}

void sub_216D0B684(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D0B970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D0B9A4(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0BA6C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0BA6C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0BB38(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0BB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0BB38(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74DEF0;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E420;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0BBAC(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  unint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  unint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3EBD0(v12, a3, (uint64_t)&v44, a5);
  if (v13)
  {
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3EBD0(v14, a3, (uint64_t)&v41, a6) & 1) == 0) {
      sub_216C48F14((uint64_t)&v41, &v44);
    }
    if ((void)v44 != (void)v41 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      float v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v45;
      v16[4] = v46;
      unint64_t v46 = v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)float v16 = v44;
      long long v16[2] = v18;
      long long v44 = v20;
      *(void *)&long long v45 = v19;
      float32x2_t v21 = &v44;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    float v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v42;
      v16[4] = v43;
      unint64_t v43 = v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)float v16 = v41;
      long long v16[2] = v25;
      long long v41 = v27;
      *(void *)&long long v42 = v26;
      float32x2_t v21 = &v41;
      goto LABEL_7;
    }
    double v40 = (a4 - a5) / (a6 - a5);
    int v48 = 0;
    uint64_t v47 = 0;
    long long v49 = &v47;
    sub_2168FD278(v16, v44, &v49);
    unint64_t v28 = v46;
    unint64_t v29 = v43;
    float64x2_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2168FD54C(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      double v34 = 1.0 - v40;
      int v35 = (float *)(*((void *)v30 + 4) + 8);
      int v36 = (float *)(v29 + 8);
      long long v37 = (float *)(v28 + 8);
      do
      {
        float v38 = v34 * *v37;
        float v39 = v40 * *v36;
        *((float32x2_t *)v35 - 1) = vadd_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(v37 - 2)), v34)), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(v36 - 2)), v40)));
        *int v35 = v38 + v39;
        v35 += 3;
        v36 += 3;
        v37 += 3;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v41);
  sub_2168F83DC((uint64_t)&v44);
  return v13;
}

void sub_216D0BE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D0BE68(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D0C040(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0C108(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0C108(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0C1D4(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0C1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0C1D4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C750;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E378;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0C248(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  uint64_t v31 = &v26;
  float64x2_t v32 = &stru_26C74C750;
  __int16 v33 = 0;
  float64x2_t v30 = &unk_26C75E378;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v33) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    uint64_t v31 = &v24;
    float64x2_t v32 = &stru_26C74C750;
    __int16 v33 = 0;
    float64x2_t v30 = &unk_26C75E378;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || (_BYTE)v33)
    {
      int v24 = v26;
      __int16 v25 = v27;
    }
    double v14 = (a3 - a4) / (a5 - a4);
    LODWORD(v30) = v26;
    WORD2(v30) = v27;
    double v15 = sub_216895D54((unsigned __int16 *)&v30, 1.0 - v14);
    int v16 = *(_DWORD *)v15;
    unsigned __int16 v17 = v15[2];
    LODWORD(v30) = v24;
    WORD2(v30) = v25;
    unint64_t v18 = sub_216895D54((unsigned __int16 *)&v30, v14);
    int v19 = *(_DWORD *)v18;
    unsigned __int16 v29 = v18[2];
    int v28 = v19;
    WORD2(v30) = v17;
    LODWORD(v30) = v16;
    long long v20 = sub_21689606C((unsigned __int16 *)&v30, (unsigned __int16 *)&v28);
    int v21 = *(_DWORD *)v20;
    uint64_t v22 = *(void *)(a1 + 8);
    *(_WORD *)(v22 + 4) = v20[2];
    *(_DWORD *)uint64_t v22 = v21;
  }
  return v12;
}

void sub_216D0C438(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D0C744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D0C77C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0C844(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0C844(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0C910(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0C8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0C910(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74DEA8;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E3B0;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0C984(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  unint64_t v49 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  unint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3E7E0(v12, a3, (uint64_t)&v47, a5);
  if (v13)
  {
    double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3E7E0(v14, a3, (uint64_t)&v44, a6) & 1) == 0) {
      sub_216C48B64((uint64_t)&v44, &v47);
    }
    if ((void)v47 != (void)v44 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      int v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v48;
      v16[4] = v49;
      unint64_t v49 = v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)int v16 = v47;
      long long v16[2] = v18;
      long long v47 = v20;
      *(void *)&long long v48 = v19;
      int v21 = &v47;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    int v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v45;
      v16[4] = v46;
      unint64_t v46 = v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)int v16 = v44;
      long long v16[2] = v25;
      long long v44 = v27;
      *(void *)&long long v45 = v26;
      int v21 = &v44;
      goto LABEL_7;
    }
    unsigned __int16 v52 = 0;
    int v51 = 0;
    long long v50 = &v51;
    sub_2168FDE18(v16, v47, &v50);
    unint64_t v28 = v49;
    unint64_t v29 = v46;
    float64x2_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2168FE0EC(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      uint64_t v34 = *((void *)v30 + 4);
      do
      {
        int v35 = *(_DWORD *)v28;
        WORD2(v50) = *(_WORD *)(v28 + 4);
        LODWORD(v50) = v35;
        int v36 = sub_216895D54((unsigned __int16 *)&v50, 1.0 - v15);
        uint64_t v37 = v36[2];
        uint64_t v38 = *(unsigned int *)v36;
        int v39 = *(_DWORD *)v29;
        WORD2(v50) = *(_WORD *)(v29 + 4);
        LODWORD(v50) = v39;
        double v40 = sub_216895D54((unsigned __int16 *)&v50, v15);
        int v41 = *(_DWORD *)v40;
        unsigned __int16 v52 = v40[2];
        int v51 = v41;
        WORD2(v50) = (v38 | (unint64_t)(v37 << 32)) >> 32;
        LODWORD(v50) = v38;
        long long v42 = sub_21689606C((unsigned __int16 *)&v50, (unsigned __int16 *)&v51);
        int v43 = *(_DWORD *)v42;
        *(_WORD *)(v34 + 4) = v42[2];
        *(_DWORD *)uint64_t v34 = v43;
        v34 += 6;
        v29 += 6;
        v28 += 6;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v44);
  sub_2168F83DC((uint64_t)&v47);
  return v13;
}

void sub_216D0CC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D0CC64(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D0CDE8(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0CEB0(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0CEB0(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0CF7C(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0CF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0CF7C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C770;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E618;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0CFF0(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  unint64_t v24 = &v21;
  unint64_t v25 = &stru_26C74C770;
  __int16 v26 = 0;
  __int16 v23 = &unk_26C75E618;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v26) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    unint64_t v24 = &v19;
    unint64_t v25 = &stru_26C74C770;
    __int16 v26 = 0;
    __int16 v23 = &unk_26C75E618;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || (_BYTE)v26)
    {
      float64x2_t v19 = v21;
      float64x2_t v20 = v22;
    }
    double v14 = (a3 - a4) / (a5 - a4);
    float64x2_t v15 = vaddq_f64(vmulq_n_f64(v21, 1.0 - v14), vmulq_n_f64(v19, v14));
    int v16 = *(float64x2_t **)(a1 + 8);
    float64x2_t v17 = vaddq_f64(vmulq_n_f64(v22, 1.0 - v14), vmulq_n_f64(v20, v14));
    *int v16 = v15;
    v16[1] = v17;
  }
  return v12;
}

void sub_216D0D18C(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D0D450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D0D484(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0D54C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0D54C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0D618(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0D5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0D618(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74DF20;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E650;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0D68C(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  unint64_t v47 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  unint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3FF80(v12, a3, (uint64_t)&v45, a5);
  if (v13)
  {
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3FF80(v14, a3, (uint64_t)&v42, a6) & 1) == 0) {
      sub_216C4A210((uint64_t)&v42, &v45);
    }
    if ((void)v45 != (void)v42 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      int v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v46;
      v16[4] = v47;
      unint64_t v47 = v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)int v16 = v45;
      long long v16[2] = v18;
      long long v45 = v20;
      *(void *)&long long v46 = v19;
      float64x2_t v21 = &v45;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    int v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v43;
      v16[4] = v44;
      unint64_t v44 = v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)int v16 = v42;
      long long v16[2] = v25;
      long long v42 = v27;
      *(void *)&long long v43 = v26;
      float64x2_t v21 = &v42;
      goto LABEL_7;
    }
    double v41 = (a4 - a5) / (a6 - a5);
    memset(v48, 0, sizeof(v48));
    unint64_t v49 = v48;
    sub_216901228(v16, v45, &v49);
    unint64_t v28 = (float64x2_t *)v47;
    unint64_t v29 = (float64x2_t *)v44;
    float64x2_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2169014A0(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      double v34 = 1.0 - v41;
      int v35 = (float64x2_t *)(*((void *)v30 + 4) + 16);
      int v36 = v29 + 1;
      uint64_t v37 = v28 + 1;
      do
      {
        float64x2_t v38 = vaddq_f64(vmulq_n_f64(v37[-1], v34), vmulq_n_f64(v36[-1], v41));
        float64x2_t v39 = *v37;
        v37 += 2;
        float64x2_t v40 = vaddq_f64(vmulq_n_f64(v39, v34), vmulq_n_f64(*v36, v41));
        v35[-1] = v38;
        *int v35 = v40;
        v35 += 2;
        v36 += 2;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v42);
  sub_2168F83DC((uint64_t)&v45);
  return v13;
}

void sub_216D0D8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D0D920(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D0DAC0(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0DB88(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0DB88(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0DC54(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0DC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0DC54(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C780;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E5A8;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0DCC8(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  unint64_t v18 = &v16;
  unint64_t v19 = &stru_26C74C780;
  __int16 v20 = 0;
  unint64_t v17 = &unk_26C75E5A8;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v20) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    unint64_t v18 = &v15;
    unint64_t v19 = &stru_26C74C780;
    __int16 v20 = 0;
    unint64_t v17 = &unk_26C75E5A8;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || (_BYTE)v20) {
      float32x4_t v15 = v16;
    }
    *(float32x4_t *)*(void *)(a1 + 8) = vaddq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v16.f32), 1.0 - (a3 - a4) / (a5 - a4))), vmulq_n_f64(vcvt_hight_f64_f32(v16), 1.0 - (a3 - a4) / (a5 - a4))), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v15.f32), (a3 - a4) / (a5 - a4))), vmulq_n_f64(vcvt_hight_f64_f32(v15), (a3 - a4) / (a5 - a4))));
  }
  return v12;
}

void sub_216D0DE80(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D0E144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D0E178(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0E240(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0E240(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0E30C(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0E2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0E30C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74DED8;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E5E0;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0E380(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  unint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  double v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3FB90(v12, a3, (uint64_t)&v42, a5);
  if (v13)
  {
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3FB90(v14, a3, (uint64_t)&v39, a6) & 1) == 0) {
      sub_216C49E68((uint64_t)&v39, &v42);
    }
    if ((void)v42 != (void)v39 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      float32x4_t v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v43;
      v16[4] = (unint64_t)v44;
      unint64_t v44 = (float32x4_t *)v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)float32x4_t v16 = v42;
      long long v16[2] = v18;
      long long v42 = v20;
      *(void *)&long long v43 = v19;
      float64x2_t v21 = &v42;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    float32x4_t v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v40;
      v16[4] = (unint64_t)v41;
      double v41 = (float32x4_t *)v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)float32x4_t v16 = v39;
      long long v16[2] = v25;
      long long v39 = v27;
      *(void *)&long long v40 = v26;
      float64x2_t v21 = &v39;
      goto LABEL_7;
    }
    double v38 = (a4 - a5) / (a6 - a5);
    v45[0] = 0;
    v45[1] = 0;
    long long v46 = v45;
    sub_2168FFABC(v16, v42, &v46);
    unint64_t v28 = v44;
    unint64_t v29 = v41;
    float64x2_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2168FFD20(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      double v34 = (float32x4_t *)*((void *)v30 + 4);
      do
      {
        float32x4_t v35 = *v28++;
        float32x4_t v36 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v35.f32), 1.0 - v38)), vmulq_n_f64(vcvt_hight_f64_f32(v35), 1.0 - v38));
        float32x4_t v37 = *v29++;
        *v34++ = vaddq_f32(v36, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v37.f32), v38)), vmulq_n_f64(vcvt_hight_f64_f32(v37), v38)));
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v39);
  sub_2168F83DC((uint64_t)&v42);
  return v13;
}

void sub_216D0E5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D0E614(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D0E7BC(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0E884(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0E884(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0E950(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0E928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0E950(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C790;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E538;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

unsigned __int16 *sub_216D0E9C4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  float v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  if (v8 == 0.0)
  {
    unsigned int v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
      + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  if (v10 == 0.0)
  {
    unsigned int v11 = HIWORD(LODWORD(v10));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
  {
    unsigned int v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
        + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
  }
  a1[3] = v11;
  return a1;
}

unsigned __int16 *sub_216D0EB6C(unsigned __int16 *a1, double a2)
{
  float v3 = a2;
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] * v3;
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] * v3;
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  float v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] * v3;
  if (v8 == 0.0)
  {
    unsigned int v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]] * v3;
  if (v10 == 0.0)
  {
    unsigned int v11 = HIWORD(LODWORD(v10));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
  {
    unsigned int v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
        + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
  }
  a1[3] = v11;
  return a1;
}

uint64_t sub_216D0ECF4(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  float64x2_t v21 = &v18;
  unint64_t v22 = &stru_26C74C790;
  __int16 v23 = 0;
  long long v20 = &unk_26C75E538;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v23) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    float64x2_t v21 = &v17;
    unint64_t v22 = &stru_26C74C790;
    __int16 v23 = 0;
    long long v20 = &unk_26C75E538;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || (_BYTE)v23) {
      unint64_t v17 = v18;
    }
    double v14 = (a3 - a4) / (a5 - a4);
    long long v20 = v18;
    double v15 = *(void **)sub_216D0EB6C((unsigned __int16 *)&v20, 1.0 - v14);
    long long v20 = v17;
    uint64_t v19 = *(void *)sub_216D0EB6C((unsigned __int16 *)&v20, v14);
    long long v20 = v15;
    **(void **)(a1 + 8) = *(void *)sub_216D0E9C4((unsigned __int16 *)&v20, (unsigned __int16 *)&v19);
  }
  return v12;
}

void sub_216D0EEAC(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D0F170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D0F1A8(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  float v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0F270(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0F270(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0F33C(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0F314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0F33C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74DE90;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E570;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0F3B0(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  long long v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3F7A0(v12, a3, (uint64_t)&v40, a5);
  if (v13)
  {
    double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3F7A0(v14, a3, (uint64_t)&v37, a6) & 1) == 0) {
      sub_216C49AC0((uint64_t)&v37, &v40);
    }
    if ((void)v40 != (void)v37 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      float32x4_t v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v41;
      v16[4] = (unint64_t)v42;
      long long v42 = (uint64_t **)v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)float32x4_t v16 = v40;
      long long v16[2] = v18;
      long long v40 = v20;
      *(void *)&long long v41 = v19;
      float64x2_t v21 = &v40;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    float32x4_t v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v38;
      v16[4] = (unint64_t)v39;
      long long v39 = (uint64_t **)v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)float32x4_t v16 = v37;
      long long v16[2] = v25;
      long long v37 = v27;
      *(void *)&long long v38 = v26;
      float64x2_t v21 = &v37;
      goto LABEL_7;
    }
    uint64_t v43 = 0;
    unint64_t v44 = &v43;
    sub_21690066C(v16, v40, &v44);
    unint64_t v28 = v42;
    unint64_t v29 = v39;
    float64x2_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_2169008D4(v30, v31, v32);
    uint64_t v33 = **(void **)(a1 + 8);
    if (v33)
    {
      double v34 = (void *)*((void *)v30 + 4);
      do
      {
        float32x4_t v35 = *v28++;
        unint64_t v44 = v35;
        float32x4_t v36 = *(uint64_t **)sub_216D0EB6C((unsigned __int16 *)&v44, 1.0 - v15);
        unint64_t v44 = *v29;
        uint64_t v43 = *(void *)sub_216D0EB6C((unsigned __int16 *)&v44, v15);
        unint64_t v44 = v36;
        *v34++ = *(void *)sub_216D0E9C4((unsigned __int16 *)&v44, (unsigned __int16 *)&v43);
        ++v29;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v37);
  sub_2168F83DC((uint64_t)&v40);
  return v13;
}

void sub_216D0F614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D0F650(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D0F7BC(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0F884(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0F884(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0F950(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0F928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0F950(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C5F0;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E0D8;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D0F9C4(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  unint64_t v24 = v22;
  unint64_t v25 = &stru_26C74C5F0;
  __int16 v26 = 0;
  __int16 v23 = &unk_26C75E0D8;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v26) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    unint64_t v24 = v21;
    unint64_t v25 = &stru_26C74C5F0;
    __int16 v26 = 0;
    __int16 v23 = &unk_26C75E0D8;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || (_BYTE)v26)
    {
      v21[0] = v22[0];
      v21[1] = v22[1];
    }
    double v15 = pxrInternal__aapl__pxrReserved__::GfSlerp((pxrInternal__aapl__pxrReserved__ *)v22, (a3 - a4) / (a5 - a4), (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v21, v14);
    uint64_t v16 = *(void *)(a1 + 8);
    *(double *)uint64_t v16 = v15;
    *(void *)(v16 + 8) = v17;
    *(void *)(v16 + 16) = v18;
    *(void *)(v16 + 24) = v19;
  }
  return v12;
}

void sub_216D0FB48(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D0FDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D0FE14(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D0FEDC(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D0FEDC(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D0FFA8(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D0FF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D0FFA8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74E0E8;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E110;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D1001C(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  unint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3D040(v12, a3, (uint64_t)&v42, a5);
  if (v13)
  {
    double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3D040(v14, a3, (uint64_t)&v39, a6) & 1) == 0) {
      sub_216C47408((uint64_t)&v39, &v42);
    }
    if ((void)v42 != (void)v39 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      uint64_t v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v43;
      v16[4] = (unint64_t)v44;
      unint64_t v44 = (pxrInternal__aapl__pxrReserved__ *)v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v42;
      long long v16[2] = v18;
      long long v42 = v20;
      *(void *)&long long v43 = v19;
      float64x2_t v21 = &v42;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    uint64_t v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v40;
      v16[4] = (unint64_t)v41;
      long long v41 = (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v39;
      long long v16[2] = v25;
      long long v39 = v27;
      *(void *)&long long v40 = v26;
      float64x2_t v21 = &v39;
      goto LABEL_7;
    }
    long long v46 = &v45;
    sub_2169053B4(v16, v42, (_OWORD **)&v46);
    unint64_t v28 = v44;
    unint64_t v29 = v41;
    float64x2_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_21690562C(v30, v31, v32);
    uint64_t v34 = **(void **)(a1 + 8);
    if (v34)
    {
      float32x4_t v35 = (double *)(*((void *)v30 + 4) + 16);
      do
      {
        *(v35 - 2) = pxrInternal__aapl__pxrReserved__::GfSlerp(v28, v15, v29, v33);
        *((void *)v35 - 1) = v36;
        *(void *)float32x4_t v35 = v37;
        *((void *)v35 + 1) = v38;
        v35 += 4;
        unint64_t v29 = (const pxrInternal__aapl__pxrReserved__::GfQuatd *)((char *)v29 + 32);
        unint64_t v28 = (pxrInternal__aapl__pxrReserved__ *)((char *)v28 + 32);
        --v34;
      }
      while (v34);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v39);
  sub_2168F83DC((uint64_t)&v42);
  return v13;
}

void sub_216D10248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D10284(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D103F0(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D104B8(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D104B8(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D10584(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D1055C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D10584(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C600;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E068;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D105F8(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  unint64_t v24 = &v22;
  unint64_t v25 = &stru_26C74C600;
  __int16 v26 = 0;
  __int16 v23 = &unk_26C75E068;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v26) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    unint64_t v24 = &v21;
    unint64_t v25 = &stru_26C74C600;
    __int16 v26 = 0;
    __int16 v23 = &unk_26C75E068;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || (_BYTE)v26) {
      long long v21 = v22;
    }
    float v15 = pxrInternal__aapl__pxrReserved__::GfSlerp((pxrInternal__aapl__pxrReserved__ *)&v22, (a3 - a4) / (a5 - a4), (const pxrInternal__aapl__pxrReserved__::GfQuatf *)&v21, v14);
    uint64_t v16 = *(void *)(a1 + 8);
    *(float *)uint64_t v16 = v15;
    *(_DWORD *)(v16 + 4) = v17;
    *(_DWORD *)(v16 + 8) = v18;
    *(_DWORD *)(v16 + 12) = v19;
  }
  return v12;
}

void sub_216D1077C(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D10A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D10A48(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D10B10(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D10B10(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D10BDC(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D10BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D10BDC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74E0D0;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E0A0;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D10C50(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  unint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3CC50(v12, a3, (uint64_t)&v42, a5);
  if (v13)
  {
    double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3CC50(v14, a3, (uint64_t)&v39, a6) & 1) == 0) {
      sub_216C46FEC((uint64_t)&v39, &v42);
    }
    if ((void)v42 != (void)v39 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      uint64_t v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v43;
      v16[4] = (unint64_t)v44;
      unint64_t v44 = (pxrInternal__aapl__pxrReserved__ *)v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v42;
      long long v16[2] = v18;
      long long v42 = v20;
      *(void *)&long long v43 = v19;
      long long v21 = &v42;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    uint64_t v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v40;
      v16[4] = (unint64_t)v41;
      long long v41 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v39;
      long long v16[2] = v25;
      long long v39 = v27;
      *(void *)&long long v40 = v26;
      long long v21 = &v39;
      goto LABEL_7;
    }
    long long v46 = &v45;
    sub_216903C50(v16, v42, (_OWORD **)&v46);
    unint64_t v28 = v44;
    unint64_t v29 = v41;
    float64x2_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_216903EB4(v30, v31, v32);
    uint64_t v34 = **(void **)(a1 + 8);
    if (v34)
    {
      float32x4_t v35 = (float *)(*((void *)v30 + 4) + 8);
      do
      {
        *(v35 - 2) = pxrInternal__aapl__pxrReserved__::GfSlerp(v28, v15, v29, v33);
        *((_DWORD *)v35 - 1) = v36;
        *(_DWORD *)float32x4_t v35 = v37;
        *((_DWORD *)v35 + 1) = v38;
        v35 += 4;
        unint64_t v29 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)((char *)v29 + 16);
        unint64_t v28 = (pxrInternal__aapl__pxrReserved__ *)((char *)v28 + 16);
        --v34;
      }
      while (v34);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v39);
  sub_2168F83DC((uint64_t)&v42);
  return v13;
}

void sub_216D10E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D10EB8(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

uint64_t sub_216D11020(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D110E8(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D110E8(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D111B4(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D1118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D111B4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74C610;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75DFF8;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D11228(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v10 = sub_216AA5ECC(a2);
  unint64_t v19 = &v17;
  long long v20 = &stru_26C74C610;
  __int16 v21 = 0;
  unint64_t v18 = &unk_26C75DFF8;
  unsigned int TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v10, a4);
  if ((_BYTE)v21) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = TimeSample;
  }
  if (v12 == 1)
  {
    uint64_t v13 = sub_216AA5ECC(a2);
    unint64_t v19 = &v16;
    long long v20 = &stru_26C74C610;
    __int16 v21 = 0;
    unint64_t v18 = &unk_26C75DFF8;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v13, a5) || (_BYTE)v21) {
      uint64_t v16 = v17;
    }
    **(void **)(a1 + 8) = pxrInternal__aapl__pxrReserved__::GfSlerp((pxrInternal__aapl__pxrReserved__ *)&v17, (a3 - a4) / (a5 - a4), (const pxrInternal__aapl__pxrReserved__::GfQuath *)&v16, v14);
  }
  return v12;
}

void sub_216D113A8(double a1, double a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a4)
{
}

void sub_216D11634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D1166C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  unsigned int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216D11734(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5) {
      unsigned int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v8 = sub_216C53204(v4, a2, (uint64_t)v5 + 88);
    if (sub_21677EC50(v8, MEMORY[0x263F8C288]))
    {
      return 0;
    }
    else if (sub_21677EC50(v8, (uint64_t)&stru_26C757FD0))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_216D11734(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  uint64_t v9 = sub_216D11800(v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  sub_216ABB798(&v12);
  return v9;
}

void sub_216D117D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
}

uint64_t sub_216D11800(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C74E0B8;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C75E030;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

uint64_t sub_216D11874(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  long long v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  int v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
  uint64_t v13 = sub_216C3C860(v12, a3, (uint64_t)&v39, a5);
  if (v13)
  {
    double v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a2);
    if ((sub_216C3C860(v14, a3, (uint64_t)&v36, a6) & 1) == 0) {
      sub_216C46BD0((uint64_t)&v36, &v39);
    }
    if ((void)v39 != (void)v36 || (double v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      uint64_t v16 = *(unint64_t **)(a1 + 8);
      unint64_t v17 = v16[4];
      unint64_t v18 = v40;
      v16[4] = (unint64_t)v41;
      long long v41 = (pxrInternal__aapl__pxrReserved__ *)v17;
      unint64_t v19 = v16[2];
      long long v20 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v39;
      long long v16[2] = v18;
      long long v39 = v20;
      *(void *)&long long v40 = v19;
      __int16 v21 = &v39;
LABEL_7:
      unint64_t v22 = v16[3];
      void v16[3] = *((void *)v21 + 3);
      *((void *)v21 + 3) = v22;
      goto LABEL_8;
    }
    uint64_t v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      unint64_t v24 = v16[4];
      unint64_t v25 = v37;
      v16[4] = (unint64_t)v38;
      int v38 = (const pxrInternal__aapl__pxrReserved__::GfQuath *)v24;
      unint64_t v26 = v16[2];
      long long v27 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = v36;
      long long v16[2] = v25;
      long long v36 = v27;
      *(void *)&long long v37 = v26;
      __int16 v21 = &v36;
      goto LABEL_7;
    }
    long long v43 = &v42;
    sub_216904808(v16, v39, (uint64_t **)&v43);
    unint64_t v28 = v41;
    unint64_t v29 = v38;
    float64x2_t v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_216904A70(v30, v31, v32);
    uint64_t v34 = **(void **)(a1 + 8);
    if (v34)
    {
      float32x4_t v35 = (uint64_t *)*((void *)v30 + 4);
      do
      {
        *v35++ = pxrInternal__aapl__pxrReserved__::GfSlerp(v28, v15, v29, v33);
        unint64_t v29 = (const pxrInternal__aapl__pxrReserved__::GfQuath *)((char *)v29 + 8);
        unint64_t v28 = (pxrInternal__aapl__pxrReserved__ *)((char *)v28 + 8);
        --v34;
      }
      while (v34);
    }
  }
LABEL_8:
  sub_2168F83DC((uint64_t)&v36);
  sub_2168F83DC((uint64_t)&v39);
  return v13;
}

void sub_216D11A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Usd_PrimTypeInfoCache::ComputeInvalidPrimTypeToFallbackMap(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtDictionary *this, uint64_t a3)
{
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(this);
  uint64_t v7 = v6;
  long long v36 = (void *)v5;
  uint64_t v37 = v6;
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::end(this);
  uint64_t v10 = result;
  uint64_t v11 = v9;
  if (v9) {
    BOOL v12 = v5 == (void)result;
  }
  else {
    BOOL v12 = 1;
  }
  char v13 = v12;
  if (v7 != v9 || (v13 & 1) == 0)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v35);
      *(void *)uint64_t v33 = v35;
      if ((v35 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)v33 &= 0xFFFFFFFFFFFFFFF8;
      }
      *(_OWORD *)&v33[8] = 0u;
      long long v34 = 0u;
      uint64_t v14 = sub_216D11E88(a1, v33);
      pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v32);
      uint64_t v15 = *(void *)(v14 + 40);
      uint64_t v16 = v32;
      *(void *)&long long v32 = &v33[16];
      sub_216889A04((void ***)&v32);
      if ((v33[8] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v33[8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v33[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v15 == v16)
      {
        if (sub_21699807C((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 56)))
        {
          uint64_t v19 = *(void *)(v5 + 64);
          if ((v19 & 4) != 0) {
            long long v20 = (void *)(*(uint64_t (**)(uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(v5 + 56);
          }
          else {
            long long v20 = *(void **)(v5 + 56);
          }
          if (*v20)
          {
            __int16 v21 = (uint64_t *)v20[4];
            uint64_t v22 = 8 * *v20;
            while (1)
            {
              uint64_t v23 = *v21;
              *(void *)uint64_t v33 = v23;
              if ((v23 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                *(void *)v33 &= 0xFFFFFFFFFFFFFFF8;
              }
              *(_OWORD *)&v33[8] = 0u;
              long long v34 = 0u;
              uint64_t v24 = sub_216D11E88(a1, v33);
              pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v32);
              uint64_t v25 = *(void *)(v24 + 40);
              uint64_t v26 = v32;
              *(void *)&long long v32 = &v33[16];
              sub_216889A04((void ***)&v32);
              if ((v33[8] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v33[8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((v33[0] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (v25 != v26) {
                break;
              }
              ++v21;
              v22 -= 8;
              if (!v22) {
                goto LABEL_37;
              }
            }
            sub_216B12870((uint64_t *)&v32, &v35, v21);
            *(_OWORD *)uint64_t v33 = v32;
            long long v32 = 0uLL;
            sub_216D12EB8(a3, v33, (uint64_t *)v33);
            if ((v33[8] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v33[8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v33[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((BYTE8(v32) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v32 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v32 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
        }
        else
        {
          *(void *)uint64_t v33 = "usd/primTypeInfoCache.cpp";
          *(void *)&v33[8] = "ComputeInvalidPrimTypeToFallbackMap";
          *(void *)&v33[16] = 47;
          *(void *)&long long v34 = "void pxrInternal__aapl__pxrReserved__::Usd_PrimTypeInfoCache::ComputeInvalidPrimTypeToFallba"
                            "ckMap(const VtDictionary &, TfHashMap<TfToken, TfToken, TfHash> *)";
          BYTE8(v34) = 0;
          unint64_t v27 = v35 & 0xFFFFFFFFFFFFFFF8;
          if ((v35 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v28 = (const char *)(v27 + 16);
            if (*(char *)(v27 + 39) < 0) {
              unint64_t v28 = *(const char **)v28;
            }
          }
          else
          {
            unint64_t v28 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v33, (pxrInternal__aapl__pxrReserved__ *)"Value for key '%s' in fallbackPrimTypes metadata dictionary is not a VtTokenArray.", v18, v28);
        }
      }
LABEL_37:
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t result = sub_2168EF104(&v36, v17, v18);
      uint64_t v5 = (uint64_t)v36;
      if (v11) {
        BOOL v29 = v36 == v10;
      }
      else {
        BOOL v29 = 1;
      }
      char v30 = v29;
    }
    while (v37 != v11 || (v30 & 1) == 0);
  }
  return result;
}

void sub_216D11E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if ((a20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D11E88(uint64_t *a1, void *a2)
{
  if (*(_OWORD *)a2 == 0 && a2[2] == a2[3]) {
    return a1[73];
  }
  uint64_t v4 = sub_216D11FCC(a1, a2);
  if (!v4)
  {
    uint64_t v5 = (char *)operator new(0x48uLL);
    pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::UsdPrimTypeInfo(v5, a2);
    uint64_t v8 = v5;
    uint64_t v4 = sub_216D12044(a1, (void **)&v8);
    uint64_t v6 = v8;
    uint64_t v8 = 0;
    if (v6) {
      sub_216D12CA0((uint64_t)&v8, v6);
    }
  }
  return v4;
}

void sub_216D11F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    sub_216D12CA0((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D11F60(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 16);
  sub_216889A04(&v4);
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t sub_216D11FCC(uint64_t *a1, void *a2)
{
  uint64_t v4 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  if (sub_216D120D8(a1, (uint64_t)&v4, a2)) {
    uint64_t v2 = *(void *)(v6 + 56);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v6 = 0;
  sub_21685C048(&v4);
  return v2;
}

void sub_216D1202C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_21685C048(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216D12044(uint64_t *a1, void **a2)
{
  float v3 = *a2;
  uint64_t v10 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  int v4 = sub_216D12A6C(a1, (uint64_t)&v10, v3);
  uint64_t v5 = v12;
  if (v4)
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    uint64_t v7 = *(char **)(v5 + 56);
    *(void *)(v5 + 56) = v6;
    if (v7)
    {
      sub_216D12CA0(v5 + 56, v7);
      uint64_t v5 = v12;
    }
  }
  uint64_t v8 = *(void *)(v5 + 56);
  uint64_t v12 = 0;
  sub_21685C048(&v10);
  return v8;
}

void sub_216D120C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_21685C048(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216D120D8(uint64_t *a1, uint64_t a2, void *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216D12158(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, void *, uint64_t))sub_216D12488, 0);
}

uint64_t sub_216D12158(uint64_t *a1, int a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, void *, uint64_t), void *a8)
{
  uint64_t v31 = 0;
  char v32 = 0;
  sub_216D1265C((uint64_t)&v31, a3, a3 + 1, (uint64_t)(a3 + 2));
  unint64_t v29 = 0;
  uint64_t v13 = bswap64(0x9E3779B97F4A7C55 * (void)v31);
  uint64_t v14 = *a1;
  __dmb(0xBu);
  uint64_t v28 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_216D126D0((uint64_t)&v31, (uint64_t)a1, v14 & v13, 0);
    uint64_t v15 = (void *)(v33 + 16);
    do
      uint64_t v15 = (void *)*v15;
    while ((unint64_t)v15 >= 0x40 && !sub_216D12968(a3, v15 + 2));
    if (a2) {
      break;
    }
    if (v15)
    {
      uint64_t v16 = 1;
LABEL_10:
      uint64_t v17 = (uint64_t)a8;
      if (!a5) {
        goto LABEL_46;
      }
      goto LABEL_11;
    }
    unint64_t v24 = *a1;
    __dmb(0xBu);
    if (v14 == v24 || !sub_21686CF40((uint64_t)a1, v13, v14, v24))
    {
      sub_21685C048(&v31);
      return 0;
    }
LABEL_31:
    sub_21685C048(&v31);
    uint64_t v14 = v24;
  }
  if (v15)
  {
LABEL_7:
    uint64_t v16 = 0;
    goto LABEL_10;
  }
  if (!a8) {
    a8 = (void *)a7(v28, a3, a4);
  }
  if (!v32)
  {
    char v32 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v31) & 1) == 0)
    {
      uint64_t v15 = (void *)(v33 + 16);
      while (1)
      {
        uint64_t v15 = (void *)*v15;
        if ((unint64_t)v15 < 0x40) {
          break;
        }
        if (sub_216D12968(a3, v15 + 2))
        {
          if (!v32) {
            goto LABEL_7;
          }
          uint64_t v16 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v31, 3uLL);
          char v32 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  unint64_t v24 = *a1;
  __dmb(0xBu);
  if (v14 != v24)
  {
    if (!sub_21686CF40((uint64_t)a1, v13, v14, v24)) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  unint64_t v24 = v14;
LABEL_33:
  unint64_t v29 = sub_21686C9CC((uint64_t)a1, v33, a8, v24);
  uint64_t v17 = 0;
  uint64_t v16 = 1;
  uint64_t v15 = a8;
  if (!a5)
  {
LABEL_46:
    sub_21685C048(&v31);
    goto LABEL_41;
  }
LABEL_11:
  if ((sub_21686CAA4(a5, v15 + 1, a6) & 1) == 0)
  {
    sched_yield();
    int v18 = 2;
    while ((sub_21686CAA4(a5, v15 + 1, a6) & 1) == 0)
    {
      sched_yield();
      BOOL v19 = v18 < 16;
      v18 *= 2;
      if (!v19)
      {
        long long v20 = (atomic_ullong *)v31;
        uint64_t v31 = 0;
        if (v32)
        {
LABEL_16:
          atomic_ullong v21 = *v20;
          unint64_t v22 = *v20 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v23 = v21;
            atomic_compare_exchange_strong(v20, (unint64_t *)&v23, v22);
            if (v23 == v21) {
              break;
            }
            if (atomic_fetch_add_explicit(v20, 0, memory_order_relaxed) != v21)
            {
              sched_yield();
              goto LABEL_16;
            }
          }
        }
        else
        {
          atomic_fetch_add(v20, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v24 = *a1;
        __dmb(0xBu);
        a8 = (void *)v17;
        goto LABEL_31;
      }
    }
  }
  sub_21685C048(&v31);
  *(void *)(a5 + 16) = v15;
  *(void *)(a5 + 24) = v13;
LABEL_41:
  if (v29) {
    sub_216D12490(a1, v29, v28, 0);
  }
  if (v17) {
    sub_216D12628((uint64_t)a1, v17);
  }
  return v16;
}

void sub_216D12460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D12488()
{
  return 0;
}

void sub_216D12490(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    uint64_t v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    uint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        uint64_t v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    int v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    uint64_t v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    uint64_t v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      uint64_t v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        void *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_216D12618(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_216D12628(uint64_t a1, uint64_t a2)
{
  sub_216D129F4(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_216D1265C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unint64_t v4 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_216D12698(a1, a3, a4);
}

uint64_t sub_216D12698(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return sub_2169E2964(a1, a3);
}

uint64_t sub_216D126D0(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (uint64_t v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3) {
      sub_216D127AC(a2, v11, a3);
    }
  }
  else
  {
    uint64_t v12 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v12;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v12);
    }
  }
  return a1;
}

void sub_216D12798(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_216D127AC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_216D126D0(&v15, a1, v10 & a3, 0);
  uint64_t v11 = (void *)(v17 + 16);
  uint64_t v12 = *(void **)(v17 + 16);
  __dmb(0xBu);
  if ((unint64_t)v12 >= 0x40)
  {
    uint64_t v13 = (2 * v10) | 1;
    while (1)
    {
      uint64_t v18 = 0;
      char v19 = 0;
      sub_216D1265C((uint64_t)&v18, v12 + 2, v12 + 3, (uint64_t)(v12 + 4));
      if ((bswap64(0x9E3779B97F4A7C55 * v18) & v13) != a3) {
        break;
      }
      if (v16 || (char v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v15) & 1) != 0))
      {
        void *v11 = *v12;
        void *v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_24:
        uint64_t v12 = (void *)*v11;
        if (*v11 <= 0x3FuLL) {
          return sub_21685C048(&v15);
        }
      }
      else
      {
        uint64_t v11 = (void *)(v17 + 16);
        uint64_t v12 = *(void **)(v17 + 16);
        __dmb(0xBu);
        if ((unint64_t)v12 < 0x40) {
          return sub_21685C048(&v15);
        }
      }
    }
    uint64_t v11 = v12;
    goto LABEL_24;
  }
  return sub_21685C048(&v15);
}

void sub_216D12954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_216D12968(void *a1, void *a2)
{
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }
  if ((a1[1] & 0xFFFFFFFFFFFFFFF8) != (a2[1] & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }
  uint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  unint64_t v4 = (uint64_t *)a2[2];
  if (v2 - v3 != a2[3] - (void)v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = (*(void *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) == (v6 & 0xFFFFFFFFFFFFFFF8);
    BOOL v8 = (*(void *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) != (v6 & 0xFFFFFFFFFFFFFFF8) || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

void sub_216D129F4(uint64_t a1)
{
  unint64_t v4 = *(char **)(a1 + 40);
  uint64_t v2 = (void *)(a1 + 40);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_216D12CA0((uint64_t)v2, v3);
  }
  uint64_t v6 = (void **)(a1 + 16);
  sub_216889A04(&v6);
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t sub_216D12A6C(uint64_t *a1, uint64_t a2, void *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216D12158(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, void *, uint64_t))sub_216D12AEC, 0);
}

uint64_t sub_216D12AEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2;
  return sub_216D12B20(a1, (uint64_t)&unk_2174BFD90, &v3);
}

uint64_t sub_216D12B20(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x40);
  v8[0] = v5;
  v8[1] = a1;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  sub_216D12BA4((uint64_t *)(v5 + 16), *a3);
  *(void *)(v5 + 56) = 0;
  v8[0] = 0;
  sub_216D12C6C(v8, v6);
  return v5;
}

void sub_216D12B90(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216D12BA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = a2[1];
  a1[1] = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    a1[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_21698FA28(a1 + 2, (uint64_t *)a2[2], (uint64_t *)a2[3], (a2[3] - a2[2]) >> 3);
  return a1;
}

void sub_216D12C40(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[1];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216D12C6C(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

void sub_216D12CA0(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_216D12D3C((uint64_t *)a2 + 8, 0);
    uint64_t v3 = *((void *)a2 + 6);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v5 = (void **)(a2 + 16);
    sub_216889A04(&v5);
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((*(void *)a2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

void sub_216D12D3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216D12D7C(v3);
    operator delete(v4);
  }
}

uint64_t sub_216D12D7C(uint64_t a1)
{
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 104));
  uint64_t v3 = (void **)(a1 + 80);
  sub_216889A04(&v3);
  uint64_t v3 = (void **)(a1 + 56);
  sub_216889A04(&v3);
  sub_216D12DEC(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_216D12DEC(uint64_t a1)
{
  sub_216D12E28(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216D12E28(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216D12E6C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_216D12E6C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  BOOL result = sub_21697C414((_DWORD *)(a1 + 16));
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t *sub_216D12EB8(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (int i = *v10; i; int i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (uint64_t *)(a1 + 16);
  int i = (uint64_t *)operator new(0x20uLL);
  uint64_t *i = 0;
  i[1] = v7;
  sub_216B15074(i + 2, a3);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  int8x16_t v21 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    uint64_t *i = *v21;
LABEL_38:
    *int8x16_t v21 = (uint64_t)i;
    goto LABEL_39;
  }
  uint64_t *i = *v13;
  *uint64_t v13 = (uint64_t)i;
  *(void *)(v20 + 8 * v3) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    int8x16_t v21 = (uint64_t *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216D13104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_2169738AC(v11, v10);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::GetInstance(pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B918C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B918C8))
  {
    pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::Usd_UsdzResolverCache((pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *)&unk_267B91868);
    __cxa_atexit((void (*)(void *))sub_216D131C0, &unk_267B91868, &dword_216758000);
    __cxa_guard_release(&qword_267B918C8);
  }
  return &unk_267B91868;
}

void sub_216D131A4(_Unwind_Exception *a1)
{
}

void sub_216D131CC(atomic_ullong *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (!a2 || *((void *)a2 + 1) && (sub_216D14AF4(a2) & 1) == 0)
  {
    uint64_t v20 = "ar/threadLocalScopedCache.h";
    int8x16_t v21 = "BeginCacheScope";
    uint64_t v22 = 79;
    uint64x2_t v23 = "void pxrInternal__aapl__pxrReserved__::ArThreadLocalScopedCache<pxrInternal__aapl__pxrReserved__::Usd_UsdzReso"
          "lverCache::_Cache>::BeginCacheScope(VtValue *) [CachedType = pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache]";
    LOBYTE(v24) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected cache scope data");
    return;
  }
  LOBYTE(v20) = 0;
  uint64_t v4 = (uint64_t *)sub_2168520EC(a1, &v20);
  if (sub_216D14AF4(a2))
  {
    uint64_t v5 = *((void *)a2 + 1);
    if ((v5 & 4) != 0) {
      unint64_t v6 = (long long *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(a2);
    else {
      unint64_t v6 = *(long long **)a2;
    }
  }
  else
  {
    uint64_t v7 = v4[1];
    if (*v4 == v7)
    {
      sub_216D14EA4(&v19);
      unint64_t v8 = v4[2];
      uint8x8_t v9 = (_OWORD *)v4[1];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v10 = ((uint64_t)v9 - *v4) >> 4;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v12 = v8 - *v4;
        if (v12 >> 3 > v11) {
          unint64_t v11 = v12 >> 3;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        int8x16_t v24 = v4 + 2;
        float v14 = (char *)sub_216787EE0((uint64_t)(v4 + 2), v13);
        float v15 = &v14[16 * v10];
        uint64_t v20 = v14;
        int8x16_t v21 = v15;
        uint64x2_t v23 = &v14[16 * v16];
        *(_OWORD *)float v15 = v19;
        long long v19 = 0uLL;
        uint64_t v22 = (uint64_t)(v15 + 16);
        sub_216D14D60(v4, &v20);
        uint64_t v17 = v4[1];
        sub_216788028((void **)&v20);
        unint64_t v18 = (std::__shared_weak_count *)*((void *)&v19 + 1);
        v4[1] = v17;
        if (v18) {
          sub_216784EC4(v18);
        }
      }
      else
      {
        *uint8x8_t v9 = v19;
        v4[1] = (uint64_t)(v9 + 1);
      }
      goto LABEL_11;
    }
    unint64_t v6 = (long long *)(v7 - 16);
  }
  sub_216D14B80(v4, v6);
LABEL_11:
  sub_216D14C9C(a2, (void *)(v4[1] - 16));
}

void sub_216D13390(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216788028((void **)va);
  if (a3) {
    sub_216784EC4(a3);
  }
  _Unwind_Resume(a1);
}

void sub_216D133BC(atomic_ullong *a1)
{
  LOBYTE(v4[0]) = 0;
  uint64_t v1 = (void *)sub_2168520EC(a1, v4);
  uint64_t v2 = v1[1];
  if (*v1 == v2)
  {
    v4[0] = "ar/threadLocalScopedCache.h";
    v4[1] = "EndCacheScope";
    double v4[2] = 101;
    void v4[3] = "void pxrInternal__aapl__pxrReserved__::ArThreadLocalScopedCache<pxrInternal__aapl__pxrReserved__::Usd_UsdzRe"
            "solverCache::_Cache>::EndCacheScope(VtValue *) [CachedType = pxrInternal__aapl__pxrReserved__::Usd_UsdzResol"
            "verCache::_Cache]";
    char v5 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v4, "!cacheStack.empty()", 0)) {
      return;
    }
    uint64_t v2 = v1[1];
  }
  unint64_t v3 = *(std::__shared_weak_count **)(v2 - 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  v1[1] = v2 - 16;
}

void *sub_216D1345C@<X0>(atomic_ullong *a1@<X0>, void *a2@<X8>)
{
  char v7 = 0;
  BOOL result = (void *)sub_2168520EC(a1, &v7);
  uint64_t v4 = result[1];
  if (*result == v4)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(v4 - 16);
    uint64_t v5 = *(void *)(v4 - 8);
    *a2 = v6;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_OpenZipFile(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__ *)sub_216D142F4(a2);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v4);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__sFILE __p = *(_OWORD *)a1;
    uint64_t v12 = *(void *)(a1 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  long long v6 = v13;
  long long v13 = 0uLL;
  char v7 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = v6;
  if (v7)
  {
    sub_216784EC4(v7);
    if (*((void *)&v13 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (*a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Open(a2, (uint64_t)__p);
    uint8x8_t v9 = __p[0];
    unint64_t v8 = __p[1];
    if (__p[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (std::__shared_weak_count *)a2[3];
    a2[2] = (uint64_t)v9;
    a2[3] = (uint64_t)v8;
    if (v10) {
      sub_216784EC4(v10);
    }
    pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)__p);
  }
}

void sub_216D135AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_216D135E0(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_216D135E0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)(a1 + 16));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::FindOrOpenZipFile(atomic_ullong *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_216D1345C(a1, &v25);
  uint64_t v5 = v25;
  if (v25)
  {
    uint64_t v22 = 0;
    char v23 = 0;
    int8x16_t v24 = 0;
    sub_216D142F4(&v10);
    sub_216D14338((char *)__dst, a2, (uint64_t)&v10);
    *(_OWORD *)__sFILE __p = *(_OWORD *)__dst;
    uint64_t v19 = v14;
    __dst[0] = 0;
    __dst[1] = 0;
    long long v20 = v15;
    uint64_t v14 = 0;
    long long v15 = 0uLL;
    v21[0] = v16;
    v21[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    int v6 = sub_216D1544C(v5, (uint64_t)&v22, __p);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v21);
    if (*((void *)&v20 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v20 + 1));
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&v16);
    if (*((void *)&v15 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(__dst[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&v12);
    if (v11) {
      sub_216784EC4(v11);
    }
    if (v6)
    {
      pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_OpenZipFile((uint64_t)a2, (uint64_t *)__p);
      sub_216D13888((uint64_t)(v24 + 5), (long long *)__p);
      pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&v19);
      if (__p[1]) {
        sub_216784EC4((std::__shared_weak_count *)__p[1]);
      }
    }
    char v7 = v24;
    *a3 = v24[5];
    uint64_t v8 = v7[6];
    a3[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    a3[2] = v7[7];
    uint64_t v9 = v7[8];
    a3[3] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    int8x16_t v24 = 0;
    sub_21685C048(&v22);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_OpenZipFile((uint64_t)a2, a3);
  }
  if (v26) {
    sub_216784EC4(v26);
  }
}

void sub_216D137E8(_Unwind_Exception *a1)
{
  *(void *)(v1 - 80) = 0;
  sub_21685C048((void *)(v1 - 96));
  unint64_t v3 = *(std::__shared_weak_count **)(v1 - 56);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216D13840(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)(a1 + 40));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_216784EC4(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216D13888(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    sub_216784EC4(v5);
  }
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v6 = *((void *)a2 + 3);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  if (v8) {
    sub_216784EC4(v8);
  }
  return a1;
}

uint64_t sub_216D138EC()
{
  v0 = sub_216D143B0();

  return sub_216D144DC(v0);
}

void *pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::Usd_UsdzResolver(pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver *this)
{
  BOOL result = pxrInternal__aapl__pxrReserved__::ArPackageResolver::ArPackageResolver(this);
  *BOOL result = &unk_26C767380;
  return result;
}

{
  void *result;

  BOOL result = pxrInternal__aapl__pxrReserved__::ArPackageResolver::ArPackageResolver(this);
  *BOOL result = &unk_26C767380;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::BeginCacheScope(pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver *this, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::GetInstance(this);

  sub_216D131CC(qword_267B91868, a2);
}

void pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::EndCacheScope(pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver *this, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::GetInstance(this);

  sub_216D133BC(qword_267B91868);
}

void pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::Resolve(long long *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *)pxrInternal__aapl__pxrReserved__::UsdZipFile::UsdZipFile(v10);
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::GetInstance(v6);
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::FindOrOpenZipFile(qword_267B91868, a1, (uint64_t *)&v8);
  v7[0] = &v11;
  v7[1] = v10;
  sub_216D13B64((uint64_t *)v7, &v8);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&v9);
  if (*((void *)&v8 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v8 + 1));
  }
  if (v10[0])
  {
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Find(v10, (unsigned __int8 *)a2, &v8);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::end(v7);
    if (pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator!=((void **)&v8, (void **)v7))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_216778F24((unsigned char *)a3, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(void *)(a3 + 16) = *(void *)(a2 + 16);
      }
    }
    else
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(v7);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator((void **)&v8);
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v10);
  if (v12) {
    sub_216784EC4(v12);
  }
}

void sub_216D13B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator((void **)va);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)va1);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 - 40);
  if (v5) {
    sub_216784EC4(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216D13B64(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *a1;
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
  *(_OWORD *)uint64_t v4 = v5;
  if (v6) {
    sub_216784EC4(v6);
  }
  uint64_t v7 = (void *)a1[1];
  uint64_t v9 = *((void *)a2 + 2);
  uint64_t v8 = *((void *)a2 + 3);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)v7[1];
  *uint64_t v7 = v9;
  v7[1] = v8;
  if (v10) {
    sub_216784EC4(v10);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::OpenAsset(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  long long v27 = 0uLL;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *)pxrInternal__aapl__pxrReserved__::UsdZipFile::UsdZipFile(v26);
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::GetInstance(v6);
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::FindOrOpenZipFile(qword_267B91868, (long long *)a1, (uint64_t *)&v22);
  uint64_t v17 = (char *)&v27;
  unint64_t v18 = (const char *)v26;
  sub_216D13B64((uint64_t *)&v17, &v22);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v23);
  if (*((void *)&v22 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v22 + 1));
  }
  if (!v26[0])
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_24;
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Find(v26, (unsigned __int8 *)a2, &v25);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::end(&v22);
  BOOL v7 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator==((void **)&v25, (void **)&v22);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator((void **)&v22);
  if (!v7)
  {
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::GetFileInfo((pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator *)&v25, (uint64_t)&v22);
    if (v23[8])
    {
      uint64_t v17 = "usd/usdzResolver.cpp";
      unint64_t v18 = "OpenAsset";
      uint64_t v19 = 237;
      long long v20 = "virtual std::shared_ptr<ArAsset> pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::OpenAsset(const std::st"
            "ring &, const std::string &)";
      char v21 = 0;
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v8 = (const char *)a2;
      }
      else {
        uint64_t v8 = *(const char **)a2;
      }
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v9 = (const char *)a1;
      }
      else {
        uint64_t v9 = *(const char **)a1;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot open %s in %s: compressed files are not supported", v8, v9);
    }
    else
    {
      if (!v24)
      {
        uint64_t v12 = (char *)operator new(0x40uLL);
        uint64_t File = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::GetFile((pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator *)&v25);
        long long v14 = v22;
        pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(v12);
        *(void *)uint64_t v12 = &unk_26C767510;
        *(_OWORD *)(v12 + 8) = v27;
        long long v27 = 0uLL;
        long long v15 = v26[1];
        *((void **)v12 + 3) = v26[0];
        *((void *)v12 + 4) = v15;
        if (v15) {
          atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
        }
        *((void *)v12 + 5) = File;
        *((_OWORD *)v12 + 3) = v14;
        *a3 = v12;
        uint64_t v16 = operator new(0x20uLL);
        *uint64_t v16 = &unk_26C7676E8;
        v16[1] = 0;
        long long v16[2] = 0;
        void v16[3] = v12;
        a3[1] = v16;
        goto LABEL_23;
      }
      uint64_t v17 = "usd/usdzResolver.cpp";
      unint64_t v18 = "OpenAsset";
      uint64_t v19 = 244;
      long long v20 = "virtual std::shared_ptr<ArAsset> pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::OpenAsset(const std::st"
            "ring &, const std::string &)";
      char v21 = 0;
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v10 = (const char *)a2;
      }
      else {
        uint64_t v10 = *(const char **)a2;
      }
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v11 = (const char *)a1;
      }
      else {
        uint64_t v11 = *(const char **)a1;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot open %s in %s: encrypted files are not supported", v10, v11);
    }
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_23:
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&v25);
LABEL_24:
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v26);
  if (*((void *)&v27 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v27 + 1));
  }
}

void sub_216D13E4C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator((void **)(v2 - 88));
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)(v2 - 80));
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    sub_216784EC4(v4);
  }
  _Unwind_Resume(a1);
}

void sub_216D13EE0(pxrInternal__aapl__pxrReserved__::ArPackageResolver *a1)
{
  pxrInternal__aapl__pxrReserved__::ArPackageResolver::~ArPackageResolver(a1);

  operator delete(v1);
}

void *sub_216D13F0C(void *a1)
{
  *a1 = &unk_26C7673D8;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_216850D6C((uint64_t)a1);
  sub_216D14094(a1 + 4);
  *a1 = &unk_26C74B518;
  return a1;
}

uint64_t sub_216D13FA8(uint64_t a1)
{
  uint64_t v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((atomic_ullong *)(a1 + 40), 1uLL, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>>>::initialize_array, 0);
  unint64_t v3 = sub_216851020((unint64_t)v2);
  uint64_t v4 = *(void *)(a1 + 64);
  __dmb(0xBu);
  uint64_t v5 = *(void *)(v4 + 8 * v3) + (((void)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5);
  *(unsigned char *)(v5 + 24) = 1;
  return v5;
}

uint64_t sub_216D14050(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_216D14064(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_216D1406C(void *a1)
{
  uint64_t v1 = sub_216D13F0C(a1);

  operator delete(v1);
}

unint64_t *sub_216D14094(unint64_t *a1)
{
  uint64_t v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  unint64_t v3 = (void *)a1[4];
  unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>>>::destroy_array);
  sub_216850F48((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>>>::destroy_array(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = a1 + (a2 << 7) - 128;
    do
    {
      if (*(unsigned char *)(v3 + 24))
      {
        unint64_t v4 = (void **)v3;
        sub_216787968(&v4);
        *(unsigned char *)(v3 + 24) = 0;
      }
      v3 -= 128;
      --v2;
    }
    while (v2);
  }
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    bzero(a1, a3 << 7);
  }
}

pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::Usd_UsdzResolverCache(pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *this)
{
  *(void *)this = &unk_26C74B518;
  __dmb(0xBu);
  *((void *)this + 1) = 0;
  __dmb(0xBu);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26C7673D8;
  uint64_t v2 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  void *v2 = &unk_26C767438;
  *((void *)this + 3) = v2;
  for (uint64_t i = 72; i != 96; i += 8)
    *(void *)((char *)this + i) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 8) = (char *)this + 72;
  *((void *)this + 5) = sub_216D142E4;
  return this;
}

void sub_216D14238(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

void *sub_216D14240()
{
  BOOL result = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *BOOL result = &unk_26C767438;
  return result;
}

uint64_t sub_216D14278(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);

  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_216D142D8(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t sub_216D142E4(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void *sub_216D142F4(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdZipFile::UsdZipFile(a1 + 2);
  return a1;
}

void sub_216D14320(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_216D14338(char *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  *(_OWORD *)(__dst + 24) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v6 = *(void *)(a3 + 24);
  *((void *)__dst + 5) = *(void *)(a3 + 16);
  *((void *)__dst + 6) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return __dst;
}

uint64_t *sub_216D143B0()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D14584((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216D14490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216D144DC(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = &unk_26C7674D0;
  long long v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  long long v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_216D14568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D14584(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D145F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D1461C(pxrInternal__aapl__pxrReserved__::Ar_PackageResolverFactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::Ar_PackageResolverFactoryBase::~Ar_PackageResolverFactoryBase(a1);

  operator delete(v1);
}

void *sub_216D14644()
{
  v0 = operator new(8uLL);
  pxrInternal__aapl__pxrReserved__::ArPackageResolver::ArPackageResolver(v0);
  void *v0 = &unk_26C767380;
  return v0;
}

void sub_216D14690(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216D146A4(void *a1)
{
  *a1 = &unk_26C767510;
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)(a1 + 3));
  unint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset((pxrInternal__aapl__pxrReserved__::ArAsset *)a1);
}

void sub_216D14704(void *a1)
{
  *a1 = &unk_26C767510;
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)(a1 + 3));
  unint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset((pxrInternal__aapl__pxrReserved__::ArAsset *)a1);

  operator delete(v3);
}

uint64_t sub_216D14768(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

void sub_216D14770(void *a1@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdZipFile::UsdZipFile(&v11);
  uint64_t v4 = a1[3];
  char v5 = (std::__shared_weak_count *)a1[4];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = v12;
  uint64_t v11 = v4;
  uint64_t v12 = v5;
  if (v6)
  {
    sub_216784EC4(v6);
    uint64_t v4 = v11;
    char v5 = v12;
  }
  uint64_t v7 = a1[5];
  v10[0] = v4;
  v10[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a2 = v7;
  uint64_t v8 = operator new(0x30uLL);
  uint64_t v9 = v8;
  v13[0] = v4;
  v13[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8[1] = 0;
  uint64_t v8[2] = 0;
  *uint64_t v8 = &unk_26C767570;
  void v13[2] = v7;
  v14[0] = v4;
  v14[1] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    void v8[3] = v7;
    void v8[4] = v4;
    v8[5] = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    void v8[3] = v7;
    void v8[4] = v4;
    v8[5] = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v14);
  a2[1] = v9;
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v13);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v10);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&v11);
}

void sub_216D14890(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_begin_catch(a1);
  sub_216D14968((uint64_t *)va);
  __cxa_rethrow();
}

void sub_216D148A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  __cxa_end_catch();
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)va);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)va1);
  _Unwind_Resume(a1);
}

size_t sub_216D148C8(uint64_t a1, void *__dst, size_t a3, uint64_t a4)
{
  if (a4 + a3 > *(void *)(a1 + 56)) {
    return 0;
  }
  size_t v4 = a3;
  memcpy(__dst, (const void *)(*(void *)(a1 + 40) + a4), a3);
  return v4;
}

uint64_t sub_216D14918(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
}

void sub_216D14968(void *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdZipFile::UsdZipFile(&v5);
  uint64_t v3 = v5;
  uint64_t v2 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v4 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v4) {
    sub_216784EC4(v4);
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&v5);
}

void sub_216D149C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C767570;
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&a1[1].__shared_owners_);

  std::__shared_weak_count::~__shared_weak_count(a1);
}

void sub_216D14A18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C767570;
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v2);
}

void sub_216D14A70(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdZipFile *)(a1 + 32);
  sub_216D14968((void *)(a1 + 32));

  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile(v1);
}

uint64_t sub_216D14AB0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7675B0)) {
    return a1 + 32;
  }
  else {
    return 0;
  }
}

uint64_t sub_216D14AF4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002174977E8 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C7675C0);
}

void **sub_216D14B80(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    long long v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    sub_216D14D60(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = sub_216788028(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_216D14C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

void *sub_216D14C9C(void *a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  sub_216D151F8(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216D14D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D14D60(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216D14DD8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216D14DD8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216D14E6C((uint64_t)v12);
  return v10;
}

uint64_t sub_216D14E6C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

uint64_t sub_216D14EA4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x260uLL);
  uint64_t result = sub_216D14EF0((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_216D14EDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D14EF0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C7675E0;
  bzero((void *)(a1 + 24), 0x248uLL);
  uint64_t v2 = (_OWORD *)(a1 + 552);
  for (uint64_t i = 560; i != 608; i += 24)
    *(void *)(a1 + i) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  __dmb(0xBu);
  *(void *)(a1 + 24) = 0;
  __dmb(0xBu);
  *(void *)(a1 + 544) = 0;
  _OWORD *v2 = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 32) = v2;
  __dmb(0xBu);
  *(void *)(a1 + 24) = 1;
  return a1;
}

void sub_216D14FC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7675E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216D14FE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7675E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216D15024(uint64_t a1)
{
  return sub_216D15048((unint64_t *)(a1 + 24));
}

uint64_t sub_216D15048(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      unint64_t v11 = (void *)(v9 + 16);
      uint64_t v10 = (void *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          void *v11 = *v10;
          sub_216D15118((uint64_t)a1, (uint64_t)v10);
          uint64_t v10 = (void *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_216D1514C((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_216D15118(uint64_t a1, uint64_t a2)
{
  sub_216D1519C(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_216D1514C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  unint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *unint64_t v4 = 0;
  return result;
}

void sub_216D1519C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)(a1 + 40));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_216784EC4(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *sub_216D151F8(void *a1, void *a2)
{
  a1[1] = &off_26C767620;
  uint64_t result = operator new(0x18uLL);
  uint64_t v5 = a2[1];
  *(void *)uint64_t result = *a2;
  *((void *)result + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  atomic_store(0, (unsigned int *)result + 4);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t *sub_216D1525C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_216D1527C(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_21696D11C(a1);
}

uint64_t sub_216D1528C()
{
  return 0;
}

uint64_t sub_216D15294(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL sub_216D152B8(void **a1, void **a2)
{
  return **a1 == **a2;
}

BOOL sub_216D152D4(void **a1, void *a2)
{
  return **a1 == *a2;
}

uint64_t sub_216D152F0()
{
  return 0;
}

uint64_t sub_216D152FC()
{
  return std::ostream::operator<<();
}

void *sub_216D15310()
{
  return &unk_26C7675C0;
}

uint64_t sub_216D1531C()
{
  return 0;
}

uint64_t sub_216D15324()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216D15330()
{
  return 0;
}

uint64_t sub_216D15338()
{
  return 0;
}

BOOL sub_216D15340(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174977E8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216D1537C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7675C0, a2, a3);
}

void *sub_216D153A0()
{
  return &unk_26C7675C0;
}

uint64_t sub_216D153AC(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_216D153B4@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = 0;
  return sub_216D151F8(a2, v2);
}

uint64_t sub_216D153C4(void **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 4);
  if (v2 != 1)
  {
    unint64_t v3 = operator new(0x18uLL);
    unint64_t v4 = *a1;
    uint64_t v5 = (*a1)[1];
    *(void *)unint64_t v3 = **a1;
    *((void *)v3 + 1) = v5;
    if (v5)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 4);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 4, 1u, memory_order_relaxed);
    uint64_t v7 = v4;
    *a1 = v3;
    sub_21696D11C((uint64_t *)&v7);
  }
  return (uint64_t)*a1;
}

uint64_t sub_216D1544C(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_216D154CC(a1, 1, a3, (uint64_t)(a3 + 24), a2, 1, (uint64_t (*)(uint64_t, unsigned char *, uint64_t))sub_216D15808, 0);
}

uint64_t sub_216D154CC(uint64_t *a1, int a2, unsigned char *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, unsigned char *, uint64_t), void *a8)
{
  if ((char)a3[23] >= 0) {
    char v13 = a3;
  }
  else {
    char v13 = *(unsigned char **)a3;
  }
  char v14 = *v13;
  if (*v13)
  {
    unint64_t v15 = 0;
    uint64_t v16 = v13 + 1;
    do
    {
      unint64_t v15 = (0x9E3779B97F4A7C15 * v15) ^ v14;
      int v17 = *v16++;
      char v14 = v17;
    }
    while (v17);
  }
  else
  {
    unint64_t v15 = 0;
  }
  unint64_t v33 = 0;
  uint64_t v18 = *a1;
  __dmb(0xBu);
  uint64_t v32 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_216D159A4((uint64_t)&v35, (uint64_t)a1, v18 & v15, 0);
    unint64_t v19 = v37 + 16;
    do
      unint64_t v19 = *(void *)v19;
    while (v19 >= 0x40 && !sub_21691B1C8(a3, (unsigned __int8 *)(v19 + 16)));
    if (a2) {
      break;
    }
    if (v19)
    {
      uint64_t v20 = 1;
LABEL_18:
      uint64_t v21 = (uint64_t)a8;
      if (!a5) {
        goto LABEL_54;
      }
      goto LABEL_19;
    }
    unint64_t v28 = *a1;
    __dmb(0xBu);
    if (v18 == v28 || !sub_21686CF40((uint64_t)a1, v15, v18, v28))
    {
      sub_21685C048(&v35);
      return 0;
    }
LABEL_39:
    sub_21685C048(&v35);
    uint64_t v18 = v28;
  }
  if (v19)
  {
LABEL_15:
    uint64_t v20 = 0;
    goto LABEL_18;
  }
  if (!a8) {
    a8 = (void *)a7(v32, a3, a4);
  }
  if (!v36)
  {
    char v36 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v35) & 1) == 0)
    {
      unint64_t v19 = v37 + 16;
      while (1)
      {
        unint64_t v19 = *(void *)v19;
        if (v19 < 0x40) {
          break;
        }
        if (sub_21691B1C8(a3, (unsigned __int8 *)(v19 + 16)))
        {
          if (!v36) {
            goto LABEL_15;
          }
          uint64_t v20 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v35, 3uLL);
          char v36 = 0;
          goto LABEL_18;
        }
      }
    }
  }
  unint64_t v28 = *a1;
  __dmb(0xBu);
  if (v18 != v28)
  {
    if (!sub_21686CF40((uint64_t)a1, v15, v18, v28)) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  unint64_t v28 = v18;
LABEL_41:
  unint64_t v33 = sub_21686C9CC((uint64_t)a1, v37, a8, v28);
  uint64_t v21 = 0;
  uint64_t v20 = 1;
  unint64_t v19 = (unint64_t)a8;
  if (!a5)
  {
LABEL_54:
    sub_21685C048(&v35);
    goto LABEL_49;
  }
LABEL_19:
  if ((sub_21686CAA4(a5, (atomic_ullong *)(v19 + 8), a6) & 1) == 0)
  {
    sched_yield();
    int v22 = 2;
    while ((sub_21686CAA4(a5, (atomic_ullong *)(v19 + 8), a6) & 1) == 0)
    {
      sched_yield();
      BOOL v23 = v22 < 16;
      v22 *= 2;
      if (!v23)
      {
        char v24 = (atomic_ullong *)v35;
        uint64_t v35 = 0;
        if (v36)
        {
LABEL_24:
          atomic_ullong v25 = *v24;
          unint64_t v26 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v27 = v25;
            atomic_compare_exchange_strong(v24, (unint64_t *)&v27, v26);
            if (v27 == v25) {
              break;
            }
            if (atomic_fetch_add_explicit(v24, 0, memory_order_relaxed) != v25)
            {
              sched_yield();
              goto LABEL_24;
            }
          }
        }
        else
        {
          atomic_fetch_add(v24, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v28 = *a1;
        __dmb(0xBu);
        a8 = (void *)v21;
        goto LABEL_39;
      }
    }
  }
  sub_21685C048(&v35);
  *(void *)(a5 + 16) = v19;
  *(void *)(a5 + 24) = v15;
LABEL_49:
  if (v33) {
    sub_216D1580C(a1, v33, v32, 0);
  }
  if (v21) {
    sub_216D15118((uint64_t)a1, v21);
  }
  return v20;
}

void sub_216D157E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216D1580C(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    unint64_t v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    uint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        unint64_t v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    uint64_t v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    uint64_t v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    char v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      unint64_t v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        void *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_216D15994(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_216D159A4(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_216851020(a3);
  unint64_t v9 = *(void *)(a2 + 8 * v8 + 8) + 24 * (a3 - ((1 << v8) & 0xFFFFFFFFFFFFFFFELL));
  *(void *)(a1 + 16) = v9;
  uint64_t v10 = *(void *)(v9 + 16);
  __dmb(0xBu);
  if (v10 == 3
    && (uint64_t v11 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v11)))
  {
    *(void *)a1 = v11;
    uint64_t v12 = *(void *)(a1 + 16);
    if (*(void *)(v12 + 16) == 3) {
      sub_216D15A98(a2, v12, a3);
    }
  }
  else
  {
    uint64_t v13 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v13;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v13);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v13);
    }
  }
  return a1;
}

void sub_216D15A84(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_216D15A98(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_216D159A4(&v20, a1, v10 & a3, 0);
  uint64_t v11 = (unint64_t *)(v22 + 16);
  unint64_t v12 = *(void *)(v22 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    uint64_t v13 = (2 * v10) | 1;
    while (1)
    {
      uint64_t v14 = *(unsigned char **)(v12 + 16);
      if (*(char *)(v12 + 39) >= 0) {
        uint64_t v14 = (unsigned char *)(v12 + 16);
      }
      char v15 = *v14;
      if (*v14)
      {
        unint64_t v16 = 0;
        int64x2_t v17 = v14 + 1;
        do
        {
          unint64_t v16 = (0x9E3779B97F4A7C15 * v16) ^ v15;
          int v18 = *v17++;
          char v15 = v18;
        }
        while (v18);
      }
      else
      {
        unint64_t v16 = 0;
      }
      if ((v16 & v13) != a3) {
        break;
      }
      if (v21 || (char v21 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v20) & 1) != 0))
      {
        unint64_t *v11 = *(void *)v12;
        *(void *)unint64_t v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_31:
        unint64_t v12 = *v11;
        if (*v11 <= 0x3F) {
          return sub_21685C048(&v20);
        }
      }
      else
      {
        uint64_t v11 = (unint64_t *)(v22 + 16);
        unint64_t v12 = *(void *)(v22 + 16);
        __dmb(0xBu);
        if (v12 < 0x40) {
          return sub_21685C048(&v20);
        }
      }
    }
    uint64_t v11 = (unint64_t *)v12;
    goto LABEL_31;
  }
  return sub_21685C048(&v20);
}

void sub_216D15C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D15C6C(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x48);
  v9[1] = a1;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(void *)(v6 + 64) = 0;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  sub_216D14338((char *)(v6 + 16), a2, a3);
  v9[0] = 0;
  sub_216D15CF8(v9, v7);
  return v6;
}

void sub_216D15CE4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216D15CF8(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

void sub_216D15D30(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216D15D58(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216D15D88(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C767738)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::Usd_MergeTimeSamples(void **a1, double **a2, void **a3)
{
  __sFILE __p = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  if (a3) {
    p_p = a3;
  }
  else {
    p_p = &__p;
  }
  sub_21677C0AC((uint64_t)p_p, a2[1] - *a2 + (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3));
  BOOL v7 = (double *)*a1;
  unsigned int v8 = (double *)a1[1];
  char v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = (double *)*p_p;
  while (v7 != v8)
  {
    if (v9 == v10)
    {
      size_t v14 = (char *)v8 - (char *)v7;
      char v15 = v11;
      char v9 = v7;
      goto LABEL_13;
    }
    double v12 = *v9;
    BOOL v13 = *v9 >= *v7;
    if (*v9 >= *v7) {
      double v12 = *v7;
    }
    v9 += *v9 <= *v7;
    v7 += v13;
    *v11++ = v12;
  }
  size_t v14 = (char *)v10 - (char *)v9;
  if (v10 == v9) {
    goto LABEL_14;
  }
  char v15 = v11;
LABEL_13:
  memmove(v15, v9, v14);
LABEL_14:
  sub_21677C0AC((uint64_t)p_p, ((char *)v11 + v14 - (unsigned char *)*p_p) >> 3);
  unint64_t v16 = (double *)*a1;
  *a1 = *p_p;
  const char *p_p = v16;
  int64x2_t v17 = &__p;
  if (a3) {
    int64x2_t v17 = a3;
  }
  int v18 = a1[1];
  a1[1] = v17[1];
  v17[1] = v18;
  uint64x2_t v19 = a1[2];
  a1[2] = v17[2];
  void v17[2] = v19;
  if (__p)
  {
    char v21 = __p;
    operator delete(__p);
  }
}

void sub_216D15F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Usd_ApplyLayerOffsetToValue(const void *****this, pxrInternal__aapl__pxrReserved__::VtValue *a2, const pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a3)
{
  if (sub_216B8D878((pxrInternal__aapl__pxrReserved__::VtValue *)this))
  {
    unint64_t v5 = sub_216B8D9A4(this);
    uint64_t v6 = *v5;
    uint64_t *v5 = 0;
    *(void *)&long long v29 = v6;
    *(void *)&long long v29 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)a2, (double *)&v29);
    BOOL v7 = sub_216B8D9A4(this);
    *BOOL v7 = v29;
  }
  else if (sub_216B8DA34((pxrInternal__aapl__pxrReserved__::VtValue *)this))
  {
    uint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v8 = sub_216B8DB90(this);
    char v9 = *(double **)(v8 + 32);
    *(void *)(v8 + 32) = 0;
    uint64_t v31 = v9;
    long long v10 = *(_OWORD *)v8;
    *(_OWORD *)uint64_t v8 = v29;
    uint64_t v11 = *(void *)(v8 + 16);
    uint64_t v12 = *(void *)(v8 + 24);
    *(_OWORD *)(v8 + 16) = __PAIR128__(*((unint64_t *)&v30 + 1), 0);
    long long v29 = v10;
    *(void *)&long long v30 = v11;
    *((void *)&v30 + 1) = v12;
    sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v29, v13, v14);
    char v15 = v31;
    sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v29, v16, v17);
    int v18 = &v31[v29];
    while (v15 != v18)
    {
      *char v15 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)a2, v15);
      ++v15;
    }
    uint64_t v21 = sub_216B8DB90(this);
    uint64_t v22 = *(double **)(v21 + 32);
    unint64_t v23 = v30;
    *(void *)(v21 + 32) = v31;
    uint64_t v31 = v22;
    long long v24 = *(_OWORD *)v21;
    *(_OWORD *)uint64_t v21 = v29;
    uint64_t v25 = *(void *)(v21 + 16);
    uint64_t v26 = *(void *)(v21 + 24);
    *(_OWORD *)(v21 + 16) = __PAIR128__(*((unint64_t *)&v30 + 1), v23);
    long long v29 = v24;
    *(void *)&long long v30 = v25;
    *((void *)&v30 + 1) = v26;
    sub_2168F83DC((uint64_t)&v29);
  }
  else if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)this))
  {
    uint64_t v32 = 0;
    uint64x2_t v19 = (uint64_t *)sub_2168EEFE0(this);
    pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v19, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v32);
    *(void *)&long long v29 = a2;
    sub_216D1616C((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v32, (pxrInternal__aapl__pxrReserved__::VtValue **)&v29);
    uint64x2_t v20 = (uint64_t *)sub_2168EEFE0(this);
    pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v20, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v32);
    sub_2168EBBB8(&v32, 0);
  }
  else if (sub_216995B54((pxrInternal__aapl__pxrReserved__::VtValue *)this))
  {
    *(void *)&long long v30 = 0;
    long long v29 = (unint64_t)&v29 + 8;
    atomic_ullong v27 = (uint64_t *)sub_216A9E608((uint64_t *)this);
    sub_2168A6B2C(v27, (uint64_t)&v29);
    sub_216D16278((uint64_t)&v29, (double *)a2);
    unint64_t v28 = (uint64_t *)sub_216A9E608((uint64_t *)this);
    sub_2168A6B2C(v28, (uint64_t)&v29);
    sub_216997EC4((uint64_t)&v29, *((void **)&v29 + 1));
  }
}

void sub_216D16124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *sub_216D1616C(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, pxrInternal__aapl__pxrReserved__::VtValue **a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(a1);
  uint64_t v6 = v5;
  uint64_t v22 = v4;
  uint64_t v23 = v5;
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::end(a1);
  char v9 = result;
  uint64_t v10 = v8;
  if (v8) {
    BOOL v11 = v4 == (void)result;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = v11;
  if (v6 != v8 || (v12 & 1) == 0)
  {
    do
    {
      uint64_t v13 = (const void *****)(v4 + 56);
      if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)v13))
      {
        uint64_t v21 = 0;
        char v15 = (uint64_t *)sub_2168EEFE0(v13);
        pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v15, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v21);
        sub_216D1616C(&v21, a2);
        uint64_t v16 = (uint64_t *)sub_2168EEFE0(v13);
        pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v16, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v21);
        sub_2168EBBB8(&v21, 0);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Usd_ApplyLayerOffsetToValue((pxrInternal__aapl__pxrReserved__ *)v13, *a2, v14);
      }
      uint64_t result = sub_2168EF1B0(&v22, v17, v18);
      uint64_t v4 = v22;
      if (v10) {
        BOOL v19 = v22 == (void)v9;
      }
      else {
        BOOL v19 = 1;
      }
      char v20 = v19;
    }
    while (v23 != v10 || (v20 & 1) == 0);
  }
  return result;
}

void sub_216D16260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EBBB8((void ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_216D16278(uint64_t a1, double *a2)
{
  uint64_t v3 = &v14;
  uint64_t v4 = *(void **)(a1 + 8);
  size_t v14 = *(uint64_t **)a1;
  v15[0] = v4;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  v15[1] = v5;
  if (v5) {
    uint64_t v3 = (uint64_t **)(v4 + 2);
  }
  void *v3 = v15;
  *(void *)a1 = a1 + 8;
  uint64_t v6 = v14;
  if (v14 != v15)
  {
    do
    {
      double v13 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(a2, *((double *)v6 + 4));
      uint64_t v16 = &v13;
      uint64_t v8 = sub_216A9E780((uint64_t **)a1, &v13, (uint64_t)&unk_2174BFD90, (uint64_t **)&v16) + 5;
      sub_2168EC6DC(v8, v6 + 5);
      pxrInternal__aapl__pxrReserved__::Usd_ApplyLayerOffsetToValue((pxrInternal__aapl__pxrReserved__ *)v8, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, v9);
      uint64_t v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (uint64_t *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v12);
      }
      uint64_t v6 = v11;
    }
    while (v11 != v15);
    uint64_t v4 = (void *)v15[0];
  }
  sub_216997EC4((uint64_t)&v14, v4);
}

void sub_216D1639C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  *(void *)this = &unk_26C767760;
  uint64_t v1 = *((void *)this + 3);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::~UsdSchemaBase(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  return 1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B918D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B918D8))
  {
    __cxa_guard_release(&qword_267B918D8);
  }
  return &qword_267B918D0;
}

void sub_216D16470(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B918E8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)__cxa_guard_acquire(&qword_267B918E8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetStaticTfType(v2);
      byte_267B918E0 = sub_216D16508((char *)&qword_267B918D0, v3, v4);
      __cxa_guard_release(&qword_267B918E8);
    }
  }
  return byte_267B918E0;
}

void sub_216D164F0(_Unwind_Exception *a1)
{
}

uint64_t sub_216D16508(char *a1, const std::type_info *a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, v4, v5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  return &qword_267B918D0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91908, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91908))
  {
    qword_267B918F0 = 0;
    *(void *)algn_267B918F8 = 0;
    qword_267B91900 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B918F0, &dword_216758000);
    __cxa_guard_release(&qword_267B91908);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91928, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91928))
  {
    uint64_t v3 = (uint64_t **)sub_216D16694();
    qword_267B91910 = 0;
    *(void *)algn_267B91918 = 0;
    qword_267B91920 = 0;
    sub_21698FA28(&qword_267B91910, *v3, v3[1], v3[1] - *v3);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B91910, &dword_216758000);
    __cxa_guard_release(&qword_267B91928);
  }
  if (v1) {
    return &qword_267B91910;
  }
  else {
    return &qword_267B918F0;
  }
}

void sub_216D1667C(_Unwind_Exception *a1)
{
}

uint64_t sub_216D16694()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798CDC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798CDC8))
  {
    int v1 = operator new(0x18uLL);
    *int v1 = 0;
    v1[1] = 0;
    v1[2] = 0;
    qword_26798CDC0 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798CDC8);
  }
  return qword_26798CDC0;
}

void sub_216D166FC(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetMultipleApplyInstanceNames(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(this, a2, &v14);
  if (v14 != v15)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAPISchemaTypeName(a2, (atomic_uint **)&v13);
    uint64_t v6 = v14;
    for (uint64_t i = v15; v6 != i; ++v6)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeNameAndInstance(v6, (atomic_uint **)&v11);
      if ((v11 & 0xFFFFFFFFFFFFFFF8) == (v13 & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v8 = *(void **)(a3 + 8);
        if ((unint64_t)v8 >= *(void *)(a3 + 16))
        {
          uint64_t v10 = sub_216973984((char **)a3, &v12);
        }
        else
        {
          uint64_t v9 = v12;
          *uint64_t v8 = v12;
          if ((v9 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v8 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v10 = (char *)(v8 + 1);
        }
        *(void *)(a3 + 8) = v10;
      }
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  unint64_t v11 = (unint64_t)&v14;
  sub_216889A04((void ***)&v11);
}

void sub_216D16860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, void **a12)
{
  a9 = &a12;
  sub_216889A04((void ***)&a9);
  sub_216889A04(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_IsCompatible(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_IsCompatible(this);
  if (result)
  {
    if ((*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *))(*(void *)this + 16))(this) != 5
      && (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *))(*(void *)this + 16))(this) != 6)
    {
      return 1;
    }
    if ((*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *))(*(void *)this + 16))(this) == 6)
    {
      if (!*((void *)this + 3)) {
        return 0;
      }
      sub_216D16CFC((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
      uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::TfType *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *))(*(void *)this + 40))(this);
      char HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, v3, (pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)((char *)this + 24));
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      sub_216D16CFC((uint64_t)&v6, (uint64_t *)this + 1, (_DWORD *)this + 4);
      uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *))(*(void *)this + 40))(this);
      char HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v6, v5);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
    if (v7) {
      sub_216D16E0C(v7);
    }
    return (HasAPI & 1) != 0;
  }
  return result;
}

void sub_216D16AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D16AD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t sub_216D16B34()
{
  return 1;
}

uint64_t *sub_216D16B3C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D16C68((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216D16C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216D16C68(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D16CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D16CFC(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = 1;
  uint64_t v5 = *a2;
  *(void *)(a1 + 8) = *a2;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)(a1 + 16);
  sub_216981010((_DWORD *)(a1 + 16), a3);
  sub_21698105C((_DWORD *)(a1 + 20), a3 + 1);
  *(void *)(a1 + 24) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7 && (*(unsigned char *)(v7 + 57) & 8) == 0 && *(void *)(v7 + 16) == *v6)
  {
    v9[0] = "usd/object.h";
    v9[1] = "UsdObject";
    uint64_t v9[2] = 704;
    void v9[3] = "pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(const Usd_PrimDataHandle &, const SdfPath &)";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "!_prim || _prim->GetPath() != _proxyPrimPath", 0);
  }
  return a1;
}

void sub_216D16DD4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(v2);
  uint64_t v5 = *(atomic_ullong **)(v1 + 8);
  if (v5) {
    sub_216D16E0C(v5);
  }
  _Unwind_Resume(a1);
}

void sub_216D16E0C(atomic_ullong *a1)
{
  unint64_t add_explicit = atomic_fetch_add_explicit(a1 + 6, 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
  if (a1 && add_explicit == 1)
  {
    pxrInternal__aapl__pxrReserved__::Usd_PrimData::~Usd_PrimData((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a1);
    operator delete(v2);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446B80);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446AE0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<BOOL>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<BOOL>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<unsigned char>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446BB0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446B10);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<unsigned char>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<unsigned char>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446BC0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446B20);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<int>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<int>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<unsigned int>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446BD0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446B30);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<unsigned int>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<unsigned int>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<long long>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446BE0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446B40);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<long long>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<long long>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<unsigned long long>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446BF0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446B50);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<unsigned long long>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<unsigned long long>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::pxr_half::half>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446B60);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446AC0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::pxr_half::half>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::pxr_half::half>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446BA0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446B00);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<float>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446B90);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446AF0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<double>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<double>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446810);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446980);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D444FB0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D445130);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446B70);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446AD0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<std::string>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<std::string>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446940);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446AB0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446820);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446990);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446830);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4469A0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446840);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4469B0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D444FF0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D445160);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4467E0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446950);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfMatrix2d>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4467F0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446960);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfMatrix3d>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446800);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446970);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446870);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4469E0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfQuath>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446860);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4469D0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfQuatf>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfQuatd>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446850);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4469C0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfQuatd>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfQuatd>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4468B0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446A20);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec2i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2i>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4468A0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446A10);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2h>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446890);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446A00);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec2f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2f>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446880);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4469F0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec2d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2d>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4468F0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446A60);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3i>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4468E0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446A50);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3h>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4468D0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446A40);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3f>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D4468C0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446A30);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3d>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446930);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446AA0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4i>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446920);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446A90);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4h>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec4f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446910);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446A80);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec4f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4f>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec4d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446900);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x21D446A70);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec4d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4d>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::SdfValueBlock>();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetVariability(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v4 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v3;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetVariability(v4, this);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::SetVariability(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216D1D064(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 464));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  uint64_t v5 = 0;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v6 = 0;
  sub_216D1D1CC((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 448), (uint64_t)&v5, &v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

atomic_uint **pxrInternal__aapl__pxrReserved__::UsdAttribute::GetRoleName@<X0>(pxrInternal__aapl__pxrReserved__::UsdAttribute *this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  uint64_t result = (atomic_uint **)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetRole((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
  uint64_t v4 = *result;
  *a2 = *result;
  if ((v4 & 7) != 0)
  {
    uint64_t v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v5;
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::SetTypeName(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 448);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a2, v6);
  v6[1] = 0;
  sub_216D1CF30((uint64_t)this, v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Block(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear(this, a2);
  uint64_t v5 = (char *)&off_26C75B258 + 3;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v4, NAN);
  return sub_2168EE084((uint64_t)v4);
}

void sub_216D1AC1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearAtTime((uint64_t)this, a2, NAN);
  if (result)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4) {
      uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 432));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Set(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6 = a1[1];
  if (!v6 || (*((unsigned char *)v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  }
  uint64_t v7 = *(void *)v6;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue(v7, (pxrInternal__aapl__pxrReserved__ *)a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4 || (*(unsigned char *)(v4 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v5 = *(void *)v4;
  unint64_t v7 = 0xFFF0000000000000;
  char v8 = 0;
  uint64_t v9 = 0x7FF0000000000000;
  char v10 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInInterval(v5, (_DWORD *)a1, (uint64_t)&v7, (uint64_t)a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetNumTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v4 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v3;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetNumTimeSamples(v4, this);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::GetBracketingTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, double a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, double *a4, BOOL *a5)
{
  uint64_t v10 = *((void *)this + 1);
  if (!v10 || (*(unsigned char *)(v10 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a3);
  }
  unint64_t v11 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v10;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetBracketingTimeSamples(v11, this, a2, 0, (double *)a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamplesInInterval(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6 || (*(unsigned char *)(v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v7 = *(void *)v6;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInInterval(v7, (_DWORD *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetUnionedTimeSamples(pxrInternal__aapl__pxrReserved__::UsdObject **a1, uint64_t a2)
{
  unint64_t v3 = 0xFFF0000000000000;
  char v4 = 0;
  uint64_t v5 = 0x7FF0000000000000;
  char v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdAttribute::GetUnionedTimeSamplesInInterval(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetUnionedTimeSamplesInInterval(pxrInternal__aapl__pxrReserved__::UsdObject **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  *(void *)(a3 + 8) = *(void *)a3;
  unint64_t v3 = *a1;
  char v4 = a1[1];
  if (*a1 == v4) {
    return 1;
  }
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  __sFILE __p = 0;
  char v15 = 0;
  LODWORD(v7) = 1;
  uint64_t v16 = 0;
  do
  {
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, a2))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v3, a2, &v12);
      uint64_t v8 = sub_216D01530(&v12);
      int TimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInInterval(v8, v3, (uint64_t)a2, (uint64_t)&v17);
      uint64_t v10 = v13;
      if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      pxrInternal__aapl__pxrReserved__::Usd_MergeTimeSamples((void **)a3, (double **)&v17, &__p);
      uint64_t v7 = TimeSamplesInInterval & v7;
    }
    else
    {
      uint64_t v7 = 0;
    }
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v3 + 32);
  }
  while (v3 != v4);
  if (__p)
  {
    char v15 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    int v18 = v17;
    operator delete(v17);
  }
  return v7;
}

void sub_216D1B044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValueOpinion(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  sub_216D1CEAC((uint64_t)&v10);
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(*(void *)v3, this, &v10, 0);
  int v4 = v14[1];
  int v5 = v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v14);
  sub_21697C414(&v13);
  uint64_t v6 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return (v4 - 2) < 3 || v5 != 0;
}

void sub_216D1B1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D1B1E8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_21697C414((_DWORD *)(a1 + 64));
  uint64_t v2 = *(atomic_uint **)(a1 + 24);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  sub_216D1CEAC((uint64_t)&v8);
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(*(void *)v3, this, &v8, 0);
  int v4 = v12[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
  sub_21697C414(&v11);
  uint64_t v5 = v10;
  if (v10 && atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return (v4 - 2) < 3;
}

void sub_216D1B3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  sub_216D1CEAC((uint64_t)&v8);
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(*(void *)v3, this, &v8, 0);
  int v4 = v12[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
  sub_21697C414(&v11);
  uint64_t v5 = v10;
  if (v10 && atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return v4 != 0;
}

void sub_216D1B4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasFallbackValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaAttribute(this, v5);
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::IsAttribute((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v5);
  if (result) {
    uint64_t result = sub_216D1B570((uint64_t)v5, 0);
  }
  if ((v5[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_216D1B570(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3 = *(pxrInternal__aapl__pxrReserved__::SdfLayer ***)(a1 + 8);
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 88);
  uint64_t v6 = *v3;

  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 1), v5, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  int v4 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v3;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_ValueMightBeTimeVarying(v4, this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Get(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, __n128 a3)
{
  unint64_t v3 = a3.n128_u64[0];
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  if (!v6 || (*((unsigned char *)v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v7 = *v6;
  a3.n128_u64[0] = v3;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValue(v7, a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::GetResolveInfo(uint64_t a1@<X0>, _DWORD *a2@<X8>, void *a3@<D0>)
{
  uint64_t v7 = a3;
  sub_216D1CEAC((uint64_t)a2);
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6 || (*(unsigned char *)(v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), v5);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(*(void *)v6, (_DWORD *)a1, a2, &v7);
}

void sub_216D1B700(_Unwind_Exception *a1)
{
  sub_216D1B1E8(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::GetResolveInfo(pxrInternal__aapl__pxrReserved__::UsdAttribute *this@<X0>, _DWORD *a2@<X8>)
{
  sub_216D1CEAC((uint64_t)a2);
  uint64_t v5 = *((void *)this + 1);
  if (!v5 || (*(unsigned char *)(v5 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v4);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(*(void *)v5, this, a2, 0);
}

void sub_216D1B774(_Unwind_Exception *a1)
{
  sub_216D1B1E8(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::Set(uint64_t a1, char *a2)
{
  sub_216779094(&__p, a2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<std::string>();
}

void sub_216D1B7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearDefault(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearAtTime((uint64_t)this, a2, NAN);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearAtTime(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5 || (*(unsigned char *)(v5 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v6 = *(uint64_t **)v5;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_ClearValue(v6, a1, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace@<W0>(pxrInternal__aapl__pxrReserved__::UsdAttribute *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v6 = 0;
  BOOL result = sub_216D1D1CC((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 40), (uint64_t)a2, &v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216D1B8F4(_Unwind_Exception *a1)
{
  if ((*v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::SetColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    unint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216D1CF30((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 40));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 40));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 40));
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, char a3@<W2>, int *a4@<X3>, pxrInternal__aapl__pxrReserved__::SdfSpec *a5@<X8>)
{
  uint64_t v10 = (uint64_t *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 8);
  if (!v11 || (*(unsigned char *)(v11 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v12 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v11;
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v27);
  pxrInternal__aapl__pxrReserved__::UsdStage::_CreateAttributeSpecForEditing(v12, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a5))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v13, a5);
    unint64_t v14 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v14) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v15 = v27;
    unint64_t v16 = atomic_load((unint64_t *)(v14 + 144));
    if (v15 >= v16
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v27, (atomic_ullong *)v14))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v26);
      sub_216D16CFC((uint64_t)v20, v10, (_DWORD *)(a1 + 16));
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v20, &v25);
      if ((*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
      }
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(&v25, (uint64_t)EmptyString, a2, *a4, a3, a5);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v19, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v25);
      if ((v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
      sub_21697C414(&v22);
      if (v21) {
        sub_216D16E0C(v21);
      }
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v26);
    }
    else
    {
      *(void *)a5 = 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v27);
}

void sub_216D1BC08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  sub_216D16AD8((uint64_t)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  int v4 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v3;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_CreateAttributeSpecForEditing(v4, this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Create(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, char a3, int *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(a1, a2, a3, a4, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v7) ^ 1;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v5, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  return v4;
}

void sub_216D1BD04(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::UsdAttribute::_GetPathForAuthoring@<D0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X2>, int *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    sub_216D0162C(a1, &v31);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, &v33);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, (int *)&v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    sub_21697C414(&v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
    sub_21697C414(&v31);
    if (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)&v25, v9))
    {
      if (a3) {
        MEMORY[0x21D4477E0](a3, "Cannot refer to a prototype or an object within a prototype.");
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_21697C414(&v25);
      return result;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
    sub_21697C414(&v25);
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (!v11 || (*(unsigned char *)(v11 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), v8);
  }
  EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v11);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, a2, &v33);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, (int *)&v25);
    sub_21697DE94(a4, (int *)&v25);
    sub_21697DEEC(a4 + 1, (int *)&v25 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
    sub_21697C414(&v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    int v13 = &v33;
  }
  else
  {
    sub_216D0162C(a1, (int *)&v33);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, &v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    sub_21697C414(&v33);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, &v31);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, (int *)&v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
    sub_21697C414(&v31);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, &v27);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, &v29);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, &v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_21697C414(&v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_21697C414(&v27);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, &v33, &v29);
    sub_21697DE94(a4, &v29);
    sub_21697DEEC(a4 + 1, &v30);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_21697C414(&v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
    sub_21697C414(&v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    sub_21697C414(&v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
    int v13 = (char **)&v25;
  }
  sub_21697C414(v13);
  BOOL v14 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
  if (a3) {
    char v15 = v14;
  }
  else {
    char v15 = 1;
  }
  if ((v15 & 1) == 0)
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    int v18 = *(pxrInternal__aapl__pxrReserved__ **)(a1 + 8);
    if (!v18 || (*((unsigned char *)v18 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v18, v16);
    }
    uint64_t v19 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v18);
    char v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v19);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v20);
    if (*(char *)(Identifier + 23) >= 0) {
      uint64_t v24 = Identifier;
    }
    else {
      uint64_t v24 = *(void *)Identifier;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot map <%s> to layer @%s@ via stage's EditTarget", v22, v23, Text, v24);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    double result = *(double *)&v25;
    *(_OWORD *)a3 = v25;
    *(void *)(a3 + 16) = v26;
  }
  return result;
}

void sub_216D1C088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  sub_21697B754((uint64_t *)va1);
  sub_21697B754((int *)va2);
  sub_21697B754((uint64_t *)va);
  sub_21697B754(v4);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::AddConnection(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v23 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_GetPathForAuthoring((uint64_t)a1, a2, (uint64_t)v22, &v20);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v20))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v18);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(a1, v6);
    int IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v17);
    if ((IsDormant & 1) == 0)
    {
      uint64_t v9 = (atomic_uint **)sub_216A64148(&v17);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(v9, &v15);
      sub_216D1C358(&v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, a3);
      if (v16) {
        sub_216784EC4(v16);
      }
    }
    uint64_t v10 = IsDormant ^ 1u;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v7, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v17);
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v18);
  }
  else
  {
    v18[0] = "usd/attribute.cpp";
    v18[1] = "AddConnection";
    void v18[2] = 425;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::AddConnection(const SdfPath &, UsdListPosition) const";
    char v19 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    sub_216D0162C((uint64_t)a1, (int *)&v17);
    uint64_t v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
    int v13 = (const char *)v22;
    if (v23 < 0) {
      int v13 = (const char *)v22[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot append connection <%s> to attribute <%s>: %s", Text, v12, v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_21697C414(&v17);
    uint64_t v10 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_21697C414(&v20);
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
  return v10;
}

void sub_216D1C2D4(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  if (a8) {
    sub_216784EC4(a8);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  sub_21697B754((_DWORD *)(v8 - 64));
  if (*(char *)(v8 - 33) < 0) {
    operator delete(*(void **)(v8 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_216D1C350()
{
}

void sub_216D1C358(void *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  switch(a3)
  {
    case 0:
      uint64_t v5 = *a1;
      uint64_t v6 = (std::__shared_weak_count *)a1[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = v5;
      int v7 = 1;
      goto LABEL_9;
    case 1:
      uint64_t v8 = *a1;
      uint64_t v6 = (std::__shared_weak_count *)a1[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v7 = 0;
      uint64_t v16 = v8;
LABEL_9:
      int v9 = 4;
      goto LABEL_17;
    case 2:
      uint64_t v10 = *a1;
      uint64_t v6 = (std::__shared_weak_count *)a1[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = v10;
      int v7 = 1;
      goto LABEL_16;
    case 3:
      uint64_t v11 = *a1;
      uint64_t v6 = (std::__shared_weak_count *)a1[1];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v7 = 0;
      uint64_t v16 = v11;
LABEL_16:
      int v9 = 5;
LABEL_17:
      uint64_t v17 = v6;
      int v18 = v9;
      break;
    default:
      uint64_t v6 = 0;
      int v7 = 0;
      break;
  }
  if (!sub_2169918D8((uint64_t)a1) || (*(unsigned int (**)(void))(*(void *)*a1 + 16))())
  {
    uint64_t v13 = *a1;
    uint64_t v12 = (std::__shared_weak_count *)a1[1];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = v13;
    uint64_t v17 = v12;
    if (v6) {
      sub_216784EC4(v6);
    }
    int v18 = 0;
  }
  if (!sub_216991950((uint64_t)&v16))
  {
    sub_216D1D274((unsigned int *)&v16, 0xFFFFFFFFLL, a2);
    goto LABEL_34;
  }
  uint64_t v14 = sub_216B591D4((uint64_t)&v16, a2);
  if (v14 == -1) {
    goto LABEL_33;
  }
  if (v7) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = sub_216991950((uint64_t)&v16) - 1;
  }
  if (v14 != v15)
  {
    sub_216B5922C((unsigned int *)&v16, v14);
LABEL_33:
    sub_216D1D274((unsigned int *)&v16, (v7 - 1), a2);
  }
LABEL_34:
  if (v17) {
    sub_216784EC4(v17);
  }
}

void sub_216D1C538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::RemoveConnection(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v24 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_GetPathForAuthoring((uint64_t)this, a2, (uint64_t)v23, &v21);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v21))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v14);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(this, v4);
    int IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v13);
    if ((IsDormant & 1) == 0)
    {
      int v7 = (atomic_uint **)sub_216A64148(&v13);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(v7, &v16);
      sub_216D1C758((uint64_t *)&v16, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21);
      if (v17) {
        sub_216784EC4(v17);
      }
    }
    uint64_t v8 = IsDormant ^ 1u;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v5, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v14);
  }
  else
  {
    uint64_t v16 = "usd/attribute.cpp";
    uint64_t v17 = (std::__shared_weak_count *)"RemoveConnection";
    uint64_t v18 = 453;
    char v19 = "BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::RemoveConnection(const SdfPath &) const";
    char v20 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    sub_216D0162C((uint64_t)this, &v14);
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14);
    uint64_t v11 = (const char *)v23;
    if (v24 < 0) {
      uint64_t v11 = (const char *)v23[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot remove connection <%s> from attribute <%s>: %s", Text, v10, v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    uint64_t v8 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  return v8;
}

void sub_216D1C6D0(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7, char a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a6);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a8);
  sub_21697B754((_DWORD *)(v10 - 48));
  if (*(char *)(v10 - 17) < 0) {
    operator delete(*(void **)(v10 - 40));
  }
  _Unwind_Resume(a1);
}

void sub_216D1C750()
{
}

void sub_216D1C758(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (sub_216A5F518((uint64_t)a1))
  {
    if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))())
    {
      uint64_t v4 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 0;
      sub_216B590F4((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
    }
    else if (((*(uint64_t (**)(void))(*(void *)*a1 + 24))() & 1) == 0)
    {
      uint64_t v5 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 1;
      sub_216B590F4((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
      uint64_t v6 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 4;
      sub_216B590F4((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
      int v7 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 5;
      sub_216B590F4((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
      sub_216D1D344(a1, 2, a2);
    }
  }
}

void sub_216D1C8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t v29 = 0;
  int v30 = 0;
  unint64_t v31 = 0;
  sub_216A6E72C(&v29, (a2[1] - *a2) >> 3);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
LABEL_9:
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v19);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(a1, v8);
    int IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v18);
    if ((IsDormant & 1) == 0)
    {
      uint64_t v11 = (atomic_uint **)sub_216A64148(&v18);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(v11, &v21);
      if (sub_216A5F518((uint64_t)&v21)) {
        (*v21)[7]((void **)v21);
      }
      if (v22) {
        sub_216784EC4(v22);
      }
      uint64_t v12 = (atomic_uint **)sub_216A64148(&v18);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(v12, &__p);
      int v21 = (void (***)(void **))__p;
      int v22 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      LODWORD(v23) = 0;
      sub_216D1CC48((unsigned int *)&v21, &v29);
      if (v22) {
        sub_216784EC4(v22);
      }
      if (v27) {
        sub_216784EC4(v27);
      }
    }
    uint64_t v13 = IsDormant ^ 1u;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v18);
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v19);
  }
  else
  {
    while (1)
    {
      __sFILE __p = 0;
      int v27 = 0;
      uint64_t v28 = 0;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_GetPathForAuthoring((uint64_t)a1, v4, (uint64_t)&__p, (int *)&v21);
      uint64_t v6 = v30;
      if ((unint64_t)v30 >= v31)
      {
        int v7 = (_DWORD *)sub_216AE5CE4(&v29, &v21);
      }
      else
      {
        sub_21697D878(v30, &v21);
        sub_21697D8B4(v6 + 1, (_DWORD *)&v21 + 1);
        int v7 = v6 + 2;
      }
      int v30 = v7;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
      sub_21697C414(&v21);
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v30 - 2)) {
        break;
      }
      if (SHIBYTE(v28) < 0) {
        operator delete(__p);
      }
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 8);
      if (v4 == v5) {
        goto LABEL_9;
      }
    }
    int v21 = (void (***)(void **))"usd/attribute.cpp";
    int v22 = (std::__shared_weak_count *)"SetConnections";
    uint64_t v23 = 484;
    uint64_t v24 = "BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections(const SdfPathVector &) const";
    char v25 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v4);
    sub_216D0162C((uint64_t)a1, &v19);
    int v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v19);
    p_p = (const char *)&__p;
    if (v28 < 0) {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set connection <%s> on attribute <%s>: %s", Text, v15, p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_21697C414(&v19);
    if (SHIBYTE(v28) < 0) {
      operator delete(__p);
    }
    uint64_t v13 = 0;
  }
  int v21 = (void (***)(void **))&v29;
  sub_216981168((void ***)&v21);
  return v13;
}

void sub_216D1CB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  a17 = v27 - 72;
  sub_216981168((void ***)&a17);
  _Unwind_Resume(a1);
}

unsigned int *sub_216D1CC48(unsigned int *a1, void *a2)
{
  uint64_t v4 = *(void *)a1;
  if (v4)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 112))(v4, a1[4]);
    uint64_t v6 = (uint64_t)(v5[1] - *v5) >> 3;
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_216B59290(a1, 0, v6, a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v10);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(this, v2);
  int IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v9);
  if ((IsDormant & 1) == 0)
  {
    uint64_t v5 = (atomic_uint **)sub_216A64148(&v9);
    pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(v5, &v7);
    if (sub_216A5F518((uint64_t)&v7)) {
      (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
    }
    if (v8) {
      sub_216784EC4(v8);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v3, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v9);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v10);
  return IsDormant ^ 1u;
}

void sub_216D1CD78(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  if (a4) {
    sub_216784EC4(a4);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections(uint64_t a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdProperty::_GetTargets(a1, 1, a2, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 56));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(pxrInternal__aapl__pxrReserved__::UsdProperty *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (*(_DWORD *)this > 4u || ((1 << *(_DWORD *)this) & 0x1A) == 0) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  if (!v4 || (*(unsigned char *)(v4 + 57) & 8) != 0) {
    return 0;
  }
  if (*(_DWORD *)this == 1) {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(this, a2);
  if (*(_DWORD *)this != 3 || result != 1) {
    return *(_DWORD *)this == 4 && result == 8;
  }
  return result;
}

uint64_t sub_216D1CEAC(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = -1;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)(a1 + 48), 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 68));
  *(_DWORD *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 76) = 0;
  return a1;
}

void sub_216D1CF10(_Unwind_Exception *a1)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 24);
  if (v3) {
    sub_217324328(v3);
  }
  sub_217324EA8(v1);
  _Unwind_Resume(a1);
}

void sub_216D1CF30(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_216D1CFD0(uint64_t a1, uint64_t *a2)
{
  return 1;
}

uint64_t sub_216D1CFF8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  uint64_t result = sub_21695DC44(a2);
  if (result)
  {
    uint64_t v5 = *((void *)v2 + 1);
    if ((v5 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    return (*(void *)v2 & 0xFFFFFFFFFFFFFFF8) == (**(void **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  return result;
}

void sub_216D1D064(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_216D1D104(uint64_t a1, uint64_t a2)
{
  int v3 = **(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  }
  *(void *)(a2 + 8) = (char *)&off_26C756E60 + 3;
  *(_DWORD *)a2 = v3;
  return 1;
}

uint64_t sub_216D1D168(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = (uint64_t)a2;
  uint64_t result = sub_2169DC5C4(a2);
  if (result)
  {
    uint64_t v5 = *(void *)(v2 + 8);
    if ((v5 & 4) != 0) {
      uint64_t v2 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    return *(_DWORD *)v2 == **(_DWORD **)(a1 + 8);
  }
  return result;
}

BOOL sub_216D1D1CC(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8 || (*(unsigned char *)(v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v9 = *(void *)v8;
  v11[1] = a3;
  void v11[2] = &stru_26C74C2C0;
  __int16 v12 = 0;
  v11[0] = &unk_26C758B08;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

void sub_216D1D274(unsigned int *a1, uint64_t a2, _DWORD *a3)
{
  if (a2 == -1)
  {
    uint64_t v5 = *(void *)a1;
    if (*(void *)a1)
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 112))(v5, a1[4]);
      a2 = (v6[1] - *v6) >> 3;
    }
    else
    {
      LODWORD(a2) = 0;
    }
  }
  uint64_t v7 = (int)a2;
  sub_216ABE8A8(v8, 1uLL, a3);
  sub_216B59290(a1, v7, 0, v8);
  uint64_t v9 = (void **)v8;
  sub_216981168(&v9);
}

void sub_216D1D32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216D1D344(uint64_t *a1, int a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  uint64_t v5 = *a1;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = a2;
  if (sub_216B591D4((uint64_t)&v5, a3) == -1) {
    sub_216D1D3CC((unsigned int *)&v5, a3);
  }
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_216D1D3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D1D3CC(unsigned int *a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)a1;
  if (v4)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 112))(v4, a1[4]);
    uint64_t v6 = (uint64_t)(v5[1] - *v5) >> 3;
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_216ABE8A8(v7, 1uLL, a2);
  sub_216B59290(a1, v6, 0, v7);
  uint64_t v8 = (void **)v7;
  sub_216981168(&v8);
}

void sub_216D1D478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdClipsAPI::~UsdClipsAPI(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdClipsAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C767828;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usd/clipsAPI.cpp";
    int v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdClipsAPI pxrInternal__aapl__pxrReserved__::UsdClipsAPI::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    int v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C767828;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216D1D64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this)
{
  return 4;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91938, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91938))
  {
    __cxa_guard_release(&qword_267B91938);
  }
  return &qword_267B91930;
}

void sub_216D1D6DC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91948, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPI *)__cxa_guard_acquire(&qword_267B91948);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdClipsAPI::_GetStaticTfType(v2);
      byte_267B91940 = sub_216D16508((char *)&qword_267B91930, v3, v4);
      __cxa_guard_release(&qword_267B91948);
    }
  }
  return byte_267B91940;
}

void sub_216D1D75C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this)
{
  return &qword_267B91930;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91968))
  {
    qword_267B91950 = 0;
    *(void *)algn_267B91958 = 0;
    qword_267B91960 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B91950, &dword_216758000);
    __cxa_guard_release(&qword_267B91968);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91988, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91988))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_267B91970 = 0;
    *(void *)algn_267B91978 = 0;
    qword_267B91980 = 0;
    sub_21698FA28(&qword_267B91970, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B91970, &dword_216758000);
    __cxa_guard_release(&qword_267B91988);
  }
  if (v1) {
    return &qword_267B91970;
  }
  else {
    return &qword_267B91950;
  }
}

void sub_216D1D8A4(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType::~UsdClipsAPIInfoKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *this)
{
  unint64_t v12 = (void **)((char *)this + 88);
  sub_216889A04(&v12);
  uint64_t v2 = *((void *)this + 10);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 9);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 8);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 7);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 5);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 3);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 2);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 1);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType::UsdClipsAPIInfoKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *this)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v19 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "active", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v19, "assetPaths", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "interpolateMissingClipValues", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "manifestAssetPath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "primPath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "templateAssetPath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "templateEndTime", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "templateStartTime", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "templateStride", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "templateActiveOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "times", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v20 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v19;
  uint64_t v21 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v22 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v23 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v24 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v25 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v26 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v27 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v28 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v29 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v30 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  char v13 = (char *)operator new(0x58uLL);
  uint64_t v14 = 0;
  *((void *)this + 11) = v13;
  *((void *)this + 12) = v13;
  *((void *)this + 13) = v13 + 88;
  do
  {
    uint64_t v15 = *(uint64_t *)((char *)&v20 + v14);
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 8;
  }
  while (v14 != 88);
  *((void *)this + 12) = v13 + 88;
  for (uint64_t i = 80; i != -8; i -= 8)
  {
    uint64_t v17 = *(uint64_t *)((char *)&v20 + i);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216D1DE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void **a11, uint64_t a12, char a13)
{
  sub_216889A04(&a11);
  uint64_t v23 = 80;
  while (1)
  {
    uint64_t v24 = *(void *)(&a13 + v23);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v23 -= 8;
    if (v23 == -8)
    {
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216D1DF8C()
{
}

void sub_216D1DF94()
{
}

void pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType::~UsdClipsAPISetNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType::UsdClipsAPISetNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "default", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  *uint64_t v4 = v3;
  uint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_216D1E110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  sub_216889A04(&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClips(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC((uint64_t)this, v9);
  uint64_t v4 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v3);
  uint64_t v5 = v9[0];
  uint64_t v6 = *v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v9 + 1);
  sub_21697C414(v9);
  if (v5 != v6)
  {
    sub_216D16CFC((uint64_t)v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v7) {
      uint64_t v7 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    void v9[4] = 0;
    sub_216D241E4((uint64_t)v9, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v7 + 8));
  }
  return 0;
}

void sub_216D1E260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216D1E2AC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v4 = (_DWORD *)(a1 + 16);
  BOOL v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
  if (v5)
  {
    sub_216981010(a2, v4);
    uint64_t v6 = a2 + 1;
    uint64_t v7 = (_DWORD *)(a1 + 20);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8)
    {
      sub_216981010(a2, (_DWORD *)(v8 + 16));
      uint64_t v7 = (_DWORD *)(v8 + 20);
    }
    else
    {
      uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v5);
      sub_216981010(a2, v9);
      uint64_t v7 = (_DWORD *)v9 + 1;
    }
    uint64_t v6 = a2 + 1;
  }

  return sub_21698105C(v6, v7);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClips(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC((uint64_t)this, v9);
  uint64_t v4 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v3);
  uint64_t v5 = v9[0];
  uint64_t v6 = *v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v9 + 1);
  sub_21697C414(v9);
  if (v5 != v6)
  {
    sub_216D16CFC((uint64_t)v9, (uint64_t *)this + 1, (_DWORD *)this + 4);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v7) {
      uint64_t v7 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    void v9[4] = 0;
    sub_216D24260((uint64_t)v9, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v7 + 8));
  }
  return 0;
}

void sub_216D1E464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipSets(uint64_t a1, uint64_t (**a2)(void, uint64_t))
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v19);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v19;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
  sub_21697C414(&v19);
  if (v6 == v7) {
    return 0;
  }
  sub_216D16CFC((uint64_t)&v19, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19, v9, &v24);
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(&v24);
  EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v10);
  sub_216D1E2AC(a1, &v17);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPrimSpecForScenePath(EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v17, &v26);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  uint64_t v12 = v25;
  if (v25 && atomic_fetch_add_explicit((atomic_uint *volatile)(v25 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  sub_21697C414(&v21);
  if (v20) {
    sub_216D16E0C(v20);
  }
  char v13 = sub_216A663FC(&v26);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v14) {
    uint64_t v14 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v8 = sub_216D1E6E0(v13, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v14 + 16), a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v15, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v26);
  return v8;
}

void sub_216D1E64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_21697B754(&a9);
  uint64_t v17 = a16;
  if (a16)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  sub_216D16AD8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *sub_216D1E6E0(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t (**a3)(void, uint64_t))
{
  if (a3)
  {
    v5[1] = a3;
    void v5[2] = (uint64_t (**)(void, uint64_t))&stru_26C7551C0;
    __int16 v6 = 0;
    v5[0] = (uint64_t (**)(void, uint64_t))&unk_26C75C2B0;
    return pxrInternal__aapl__pxrReserved__::SdfSpec::_HasField(a1, a2, v5);
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, a2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipSets(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, v8);
  uint64_t v3 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v2);
  uint64_t v4 = v8[0];
  uint64_t v5 = *v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v8 + 1);
  sub_21697C414(v8);
  if (v4 != v5)
  {
    sub_216D16CFC((uint64_t)v8, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    __int16 v6 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v6) {
      __int16 v6 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    void v8[4] = 0;
    sub_216D242D8((uint64_t)v8, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v6 + 16));
  }
  return 0;
}

void sub_216D1E85C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipAssetPaths(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipAssetPaths(a1, a2, (uint64_t)EmptyString);
}

void sub_216D1E968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipAssetPaths(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v26);
  uint64_t v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  uint64_t v7 = v26;
  uint64_t v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v7 != v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a3 + 8);
    }
    if (v9)
    {
      uint64_t v11 = *(char **)a3;
      if (v10 >= 0) {
        uint64_t v11 = (char *)a3;
      }
      int v12 = *v11;
      if (*v11) {
        BOOL v13 = (v12 - 48) >= 0xA;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13 && (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19))
      {
        uint64_t v15 = v11;
        do
        {
          int v17 = *v15++;
          char v16 = v17;
          unsigned int v18 = (v17 & 0xFFFFFFDF) - 65;
          unsigned int v19 = v17 - 48;
        }
        while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
        if (!v16)
        {
          sub_216D16CFC((uint64_t)&v26, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          uint64_t v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v23) {
            uint64_t v23 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          }
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v24) {
            uint64_t v24 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216D1EBFC((const void **)a3, (void *)v24 + 1, (uint64_t)&v25);
          sub_216D244D4((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v23 + 8));
        }
      }
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipAssetPaths";
      uint64_t v28 = 268;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipAssetPaths(const VtArray<SdfAssetPath> &, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    }
    else
    {
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipAssetPaths";
      uint64_t v28 = 268;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipAssetPaths(const VtArray<SdfAssetPath> &, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    }
  }
  return 0;
}

void sub_216D1EBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216D1EBFC(const void **a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  uint64_t v7 = &v16;
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2167940B4((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *a1;
    }
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v7, v9, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 58;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  }
  int v11 = *((char *)EmptyString + 23);
  if (v11 >= 0) {
    int v12 = (const std::string::value_type *)EmptyString;
  }
  else {
    int v12 = (const std::string::value_type *)*EmptyString;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    std::string::size_type v13 = EmptyString[1];
  }
  uint64_t v14 = std::string::append(&v16, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v18 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__sFILE __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_216D1ED18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipAssetPaths(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipAssetPaths(a1, a2, (uint64_t)EmptyString);
}

void sub_216D1EE0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipAssetPaths(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v26);
  uint64_t v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  uint64_t v7 = v26;
  uint64_t v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v7 != v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a3 + 8);
    }
    if (v9)
    {
      uint64_t v11 = *(char **)a3;
      if (v10 >= 0) {
        uint64_t v11 = (char *)a3;
      }
      int v12 = *v11;
      if (*v11) {
        BOOL v13 = (v12 - 48) >= 0xA;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13 && (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19))
      {
        long long v15 = v11;
        do
        {
          int v17 = *v15++;
          char v16 = v17;
          unsigned int v18 = (v17 & 0xFFFFFFDF) - 65;
          unsigned int v19 = v17 - 48;
        }
        while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
        if (!v16)
        {
          sub_216D16CFC((uint64_t)&v26, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          uint64_t v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v23) {
            uint64_t v23 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          }
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v24) {
            uint64_t v24 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216D1EBFC((const void **)a3, (void *)v24 + 1, (uint64_t)&v25);
          sub_216D2460C((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v23 + 8));
        }
      }
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "GetClipAssetPaths";
      uint64_t v28 = 327;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipAssetPaths(VtArray<SdfAssetPath> *, const std::string &) const";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    }
    else
    {
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "GetClipAssetPaths";
      uint64_t v28 = 327;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipAssetPaths(VtArray<SdfAssetPath> *, const std::string &) const";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    }
  }
  return 0;
}

void sub_216D1F050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::ComputeClipAssetPaths@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, v47);
  uint64_t v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  uint64_t v8 = *(void *)&v47[0];
  uint64_t v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v47 + 1);
  uint64_t result = sub_21697C414(v47);
  if (v8 == v9)
  {
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  sub_216C56260((uint64_t)v47);
  uint64_t v11 = sub_216D16CFC((uint64_t)v51, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  if (sub_216D1F558(v11, a2, (uint64_t)v47))
  {
    int v12 = v49;
    if ((v55 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
    sub_21697C414(&v53);
    if (v52) {
      sub_216D16E0C(v52);
    }
    if (v12)
    {
      BOOL v13 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v56);
      Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v13);
      long long v15 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(v50);
      Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v15);
      uint64_t v17 = v50[3];
      uint64_t v18 = *Layers;
      unsigned int v19 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBCEA8(v50);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v19);
      pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v51, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(Identifier + 32));
      sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47, v21, v22);
      uint64_t v23 = v48;
      sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47, v24, v25);
      uint64_t v26 = v48;
      uint64_t v27 = v48 + 48 * *(void *)&v47[0];
      if (v23 != v27)
      {
        uint64_t v28 = (uint64_t *)(v18 + 8 * v17);
        do
        {
          sub_216ABBA60((uint64_t *)__p, v28);
          pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)__p, v23, (uint64_t)&v45);
          uint64_t v29 = __p[1];
          if (__p[1]
            && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(void *))(*(void *)v29 + 8))(v29);
          }
          pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
          if (SHIBYTE(v40) < 0)
          {
            sub_216778F24(__dst, __p[0], (unint64_t)__p[1]);
            if (SHIBYTE(v40) < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_OWORD *)long long __dst = *(_OWORD *)__p;
            uint64_t v44 = v40;
          }
          char v30 = (void *)HIBYTE(v44);
          char v31 = HIBYTE(v44);
          if (v44 < 0) {
            char v30 = __dst[1];
          }
          if (v30)
          {
            pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p, v23, __dst);
            if (*(char *)(v23 + 23) < 0) {
              operator delete(*(void **)v23);
            }
            long long v32 = *(_OWORD *)__p;
            *(void *)(v23 + 16) = v40;
            *(_OWORD *)uint64_t v23 = v32;
            HIBYTE(v40) = 0;
            LOBYTE(__p[0]) = 0;
            unint64_t v33 = (void **)(v23 + 24);
            if (*(char *)(v23 + 47) < 0)
            {
              operator delete(*v33);
              int v35 = SHIBYTE(v40);
              long long v36 = v41;
              *(void *)(v23 + 40) = v42;
              *(_OWORD *)unint64_t v33 = v36;
              HIBYTE(v42) = 0;
              LOBYTE(v41) = 0;
              if (v35 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v34 = v41;
              *(void *)(v23 + 40) = v42;
              *(_OWORD *)unint64_t v33 = v34;
            }
            char v31 = HIBYTE(v44);
          }
          if (v31 < 0) {
            operator delete(__dst[0]);
          }
          if (v46 < 0) {
            operator delete(v45);
          }
          v23 += 48;
        }
        while (v23 != v27);
        uint64_t v26 = v48;
      }
      long long v37 = v47[1];
      *(_OWORD *)a3 = v47[0];
      *(_OWORD *)(a3 + 16) = v37;
      *(void *)(a3 + 32) = v26;
      if (v26)
      {
        int v38 = (atomic_ullong *)(v26 - 16);
        if (*(void *)(a3 + 24)) {
          int v38 = *(atomic_ullong **)(a3 + 24);
        }
        atomic_fetch_add_explicit(v38, 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v51);
      pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v56);
      return (_DWORD *)sub_216C4C23C((uint64_t)v47);
    }
  }
  else
  {
    if ((v55 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
    sub_21697C414(&v53);
    if (v52) {
      sub_216D16E0C(v52);
    }
  }
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return (_DWORD *)sub_216C4C23C((uint64_t)v47);
}

void sub_216D1F444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)(v31 - 152));
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)(v31 - 104));
  sub_216C4C23C((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_216D1F558(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_216D240F8(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
  pxrInternal__aapl__pxrReserved__::Usd_ComputeClipSetDefinitionsForPrimIndex(v5, &v22, &v19);
  uint64_t v6 = sub_2169CAFD0(v19, v20, (unsigned __int8 **)a2);
  if (v6 == v20)
  {
    uint64_t v14 = (void **)"usd/clipsAPI.cpp";
    long long v15 = "_ComputeClipSetDefinition";
    uint64_t v16 = 150;
    uint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ComputeClipSetDefinition(const UsdPrim &, const"
          " std::string &, Usd_ClipSetDefinition *)";
    char v18 = 0;
    if (a2[23] >= 0) {
      int v12 = a2;
    }
    else {
      int v12 = *(const char **)a2;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"No clip set named '%s'", v12);
    goto LABEL_8;
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v19) >> 3);
  uint64_t v8 = v22;
  if (v7 >= 0xF0F0F0F0F0F0F0F1 * ((v23 - v22) >> 4))
  {
    uint64_t v14 = (void **)"usd/clipsAPI.cpp";
    long long v15 = "_ComputeClipSetDefinition";
    uint64_t v16 = 155;
    uint64_t v17 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ComputeClipSetDefinition(const UsdPrim &, const"
          " std::string &, Usd_ClipSetDefinition *)";
    char v18 = 0;
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v14, "clipDefIndex < clipSetDefs.size()", 0))
    {
      uint64_t v8 = v22;
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v11 = 0;
    goto LABEL_9;
  }
LABEL_3:
  sub_216CF5CAC(a3, (long long *)(v8 + 272 * v7));
  sub_216CF5D38((std::string *)(a3 + 48), (std::string *)(v8 + 272 * v7 + 48));
  sub_216B6E498((std::string *)(a3 + 104), (const std::string *)(v8 + 272 * v7 + 104));
  sub_216CF5E24(a3 + 136, (long long *)(v8 + 272 * v7 + 136));
  sub_216CF5E24(a3 + 184, (long long *)(v8 + 272 * v7 + 184));
  unint64_t v9 = v8 + 272 * v7;
  *(_WORD *)(a3 + 232) = *(_WORD *)(v9 + 232);
  *(void *)(a3 + 240) = *(void *)(v9 + 240);
  sub_2168CD2FC((atomic_uint **)(a3 + 248), (atomic_uint **)(v9 + 248));
  unint64_t v10 = v8 + 272 * v7;
  sub_2169C487C((int *)(a3 + 256), (_DWORD *)(v10 + 256));
  sub_2169C48D4((int *)(a3 + 260), (_DWORD *)(v10 + 260));
  *(void *)(a3 + 264) = *(void *)(v10 + 264);
  uint64_t v11 = 1;
LABEL_9:
  uint64_t v14 = (void **)&v19;
  sub_216782F20(&v14);
  uint64_t v14 = (void **)&v22;
  sub_216C4C1B8(&v14);
  return v11;
}

void sub_216D1F774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a10 = (void **)&a15;
  sub_216782F20(&a10);
  a10 = (void **)(v15 - 56);
  sub_216C4C1B8(&a10);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::ComputeClipAssetPaths@<X0>(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v4) {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }

  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::ComputeClipAssetPaths((uint64_t)this, (char *)EmptyString, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipManifestAssetPath(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC((uint64_t)this, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipManifestAssetPath((uint64_t)this, (uint64_t)a2, (uint64_t)EmptyString);
}

void sub_216D1F8E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipManifestAssetPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v26);
  uint64_t v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  uint64_t v7 = v26;
  uint64_t v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v7 != v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a3 + 8);
    }
    if (v9)
    {
      uint64_t v11 = *(char **)a3;
      if (v10 >= 0) {
        uint64_t v11 = (char *)a3;
      }
      int v12 = *v11;
      if (*v11) {
        BOOL v13 = (v12 - 48) >= 0xA;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13 && (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19))
      {
        uint64_t v15 = v11;
        do
        {
          int v17 = *v15++;
          char v16 = v17;
          unsigned int v18 = (v17 & 0xFFFFFFDF) - 65;
          unsigned int v19 = v17 - 48;
        }
        while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
        if (!v16)
        {
          sub_216D16CFC((uint64_t)&v26, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          uint64_t v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v23) {
            uint64_t v23 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          }
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v24) {
            uint64_t v24 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216D1EBFC((const void **)a3, (void *)v24 + 3, (uint64_t)&v25);
          sub_216D24688((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v23 + 8));
        }
      }
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipManifestAssetPath";
      uint64_t v28 = 342;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipManifestAssetPath(const SdfAssetPath &, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    }
    else
    {
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipManifestAssetPath";
      uint64_t v28 = 342;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipManifestAssetPath(const SdfAssetPath &, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    }
  }
  return 0;
}

void sub_216D1FB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipManifestAssetPath(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC((uint64_t)this, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipManifestAssetPath((uint64_t)this, (uint64_t)a2, (uint64_t)EmptyString);
}

void sub_216D1FC38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipManifestAssetPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v26);
  uint64_t v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  uint64_t v7 = v26;
  uint64_t v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v7 != v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a3 + 8);
    }
    if (v9)
    {
      uint64_t v11 = *(char **)a3;
      if (v10 >= 0) {
        uint64_t v11 = (char *)a3;
      }
      int v12 = *v11;
      if (*v11) {
        BOOL v13 = (v12 - 48) >= 0xA;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13 && (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19))
      {
        uint64_t v15 = v11;
        do
        {
          int v17 = *v15++;
          char v16 = v17;
          unsigned int v18 = (v17 & 0xFFFFFFDF) - 65;
          unsigned int v19 = v17 - 48;
        }
        while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
        if (!v16)
        {
          sub_216D16CFC((uint64_t)&v26, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          uint64_t v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v23) {
            uint64_t v23 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          }
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v24) {
            uint64_t v24 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216D1EBFC((const void **)a3, (void *)v24 + 3, (uint64_t)&v25);
          sub_216D247C0((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v23 + 8));
        }
      }
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "GetClipManifestAssetPath";
      uint64_t v28 = 357;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipManifestAssetPath(SdfAssetPath *, const std::string &) const";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    }
    else
    {
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "GetClipManifestAssetPath";
      uint64_t v28 = 357;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipManifestAssetPath(SdfAssetPath *, const std::string &) const";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    }
  }
  return 0;
}

void sub_216D1FE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GenerateClipManifest@<X0>(uint64_t a1@<X0>, char *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, v27);
  uint64_t v9 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v8);
  uint64_t v10 = v27[0];
  uint64_t v11 = *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
  uint64_t result = sub_21697C414(v27);
  if (v10 == v11)
  {
    *a4 = 0;
  }
  else
  {
    sub_216C56260((uint64_t)v27);
    sub_216D16CFC((uint64_t)&__p, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    char v13 = sub_216D1F558((uint64_t)&__p, a2, (uint64_t)v27);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
    sub_21697C414(&v19);
    if (v18) {
      sub_216D16E0C(v18);
    }
    if (v13)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      pxrInternal__aapl__pxrReserved__::Usd_ClipSet::New((long long *)a2, (uint64_t)v27, (uint64_t)&v24, &v22);
      if (v22)
      {
        __sFILE __p = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest((pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(v22 + 88), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v22 + 64), (uint64_t *)&__p, a3, a4);
        if (SHIBYTE(v19) < 0) {
          operator delete(__p);
        }
      }
      else
      {
        uint64_t v14 = HIBYTE(v26);
        if (v26 < 0) {
          uint64_t v14 = v25;
        }
        if (v14)
        {
          __sFILE __p = "usd/clipsAPI.cpp";
          unsigned int v18 = (atomic_ullong *)"GenerateClipManifest";
          uint64_t v19 = 381;
          unint64_t v20 = (unint64_t)"SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GenerateClipManifest(con"
                                  "st std::string &, BOOL) const";
          char v21 = 0;
          if (a2[23] >= 0) {
            uint64_t v15 = a2;
          }
          else {
            uint64_t v15 = *(const char **)a2;
          }
          char v16 = (const char *)&v24;
          if (v26 < 0) {
            char v16 = (const char *)v24;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid clips in clip set '%s': %s", v15, v16);
        }
        *a4 = 0;
      }
      if (v23) {
        sub_216784EC4(v23);
      }
      if (SHIBYTE(v26) < 0) {
        operator delete(v24);
      }
    }
    else
    {
      *a4 = 0;
    }
    return (_DWORD *)sub_216C4C23C((uint64_t)v27);
  }
  return result;
}

void sub_216D200B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a20) {
    sub_216784EC4(a20);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_216C4C23C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GenerateClipManifest@<X0>(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v6) {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }

  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GenerateClipManifest((uint64_t)this, (char *)EmptyString, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GenerateClipManifestFromLayers(std::string::size_type *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest(a2, a1, (uint64_t *)__p, 0, a3);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D20208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetInterpolateMissingClipValues(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, char a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC((uint64_t)this, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetInterpolateMissingClipValues((uint64_t)this, a2, (uint64_t)EmptyString);
}

void sub_216D202E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetInterpolateMissingClipValues(uint64_t a1, char a2, uint64_t a3)
{
  char v31 = a2;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v26);
  uint64_t v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  uint64_t v7 = v26;
  uint64_t v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v7 != v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a3 + 8);
    }
    if (v9)
    {
      uint64_t v11 = *(char **)a3;
      if (v10 >= 0) {
        uint64_t v11 = (char *)a3;
      }
      int v12 = *v11;
      if (*v11) {
        BOOL v13 = (v12 - 48) >= 0xA;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13 && (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19))
      {
        uint64_t v15 = v11;
        do
        {
          int v17 = *v15++;
          char v16 = v17;
          unsigned int v18 = (v17 & 0xFFFFFFDF) - 65;
          unsigned int v19 = v17 - 48;
        }
        while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
        if (!v16)
        {
          sub_216D16CFC((uint64_t)&v26, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          uint64_t v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v23) {
            uint64_t v23 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          }
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v24) {
            uint64_t v24 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216D1EBFC((const void **)a3, (void *)v24 + 2, (uint64_t)&v25);
          sub_216D2483C((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v23 + 8));
        }
      }
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetInterpolateMissingClipValues";
      uint64_t v28 = 420;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetInterpolateMissingClipValues(BOOL, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    }
    else
    {
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetInterpolateMissingClipValues";
      uint64_t v28 = 420;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetInterpolateMissingClipValues(BOOL, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    }
  }
  return 0;
}

void sub_216D20528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetInterpolateMissingClipValues(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, BOOL *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC((uint64_t)this, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetInterpolateMissingClipValues((uint64_t)this, (uint64_t)a2, (uint64_t)EmptyString);
}

void sub_216D20638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetInterpolateMissingClipValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v28);
  uint64_t v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  uint64_t v8 = v28;
  uint64_t v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  sub_21697C414(&v28);
  if (v8 == v9) {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (!v10)
  {
    uint64_t v28 = "usd/clipsAPI.cpp";
    uint64_t v29 = (atomic_ullong *)"GetInterpolateMissingClipValues";
    uint64_t v30 = 435;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetInterpolateMissingClipValues(BOOL *, "
                            "const std::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  int v12 = *(char **)a3;
  if (v11 >= 0) {
    int v12 = (char *)a3;
  }
  int v13 = *v12;
  if (*v12) {
    BOOL v14 = (v13 - 48) >= 0xA;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    goto LABEL_26;
  }
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19) {
    goto LABEL_26;
  }
  char v16 = v12;
  do
  {
    int v18 = *v16++;
    char v17 = v18;
    unsigned int v19 = (v18 & 0xFFFFFFDF) - 65;
    unsigned int v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    uint64_t v28 = "usd/clipsAPI.cpp";
    uint64_t v29 = (atomic_ullong *)"GetInterpolateMissingClipValues";
    uint64_t v30 = 435;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetInterpolateMissingClipValues(BOOL *, "
                            "const std::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_216D16CFC((uint64_t)&v28, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25) {
    uint64_t v25 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26) {
    uint64_t v26 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  }
  sub_216D1EBFC((const void **)a3, (void *)v26 + 2, (uint64_t)&v27);
  BOOL v23 = sub_216D249A4((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v27);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  if (v29) {
    sub_216D16E0C(v29);
  }
  return v23;
}

void sub_216D2087C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipPrimPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipPrimPath(a1, a2, (uint64_t)EmptyString);
}

void sub_216D2098C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipPrimPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v26);
  uint64_t v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  uint64_t v7 = v26;
  uint64_t v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v7 != v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a3 + 8);
    }
    if (v9)
    {
      uint64_t v11 = *(char **)a3;
      if (v10 >= 0) {
        uint64_t v11 = (char *)a3;
      }
      int v12 = *v11;
      if (*v11) {
        BOOL v13 = (v12 - 48) >= 0xA;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13 && (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19))
      {
        uint64_t v15 = v11;
        do
        {
          int v17 = *v15++;
          char v16 = v17;
          unsigned int v18 = (v17 & 0xFFFFFFDF) - 65;
          unsigned int v19 = v17 - 48;
        }
        while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
        if (!v16)
        {
          sub_216D16CFC((uint64_t)&v26, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          BOOL v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v23) {
            BOOL v23 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          }
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v24) {
            uint64_t v24 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216D1EBFC((const void **)a3, (void *)v24 + 4, (uint64_t)&v25);
          sub_216D24A4C((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v23 + 8));
        }
      }
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipPrimPath";
      uint64_t v28 = 450;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipPrimPath(const std::string &, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    }
    else
    {
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipPrimPath";
      uint64_t v28 = 450;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipPrimPath(const std::string &, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    }
  }
  return 0;
}

void sub_216D20BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipPrimPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipPrimPath(a1, a2, (uint64_t)EmptyString);
}

void sub_216D20CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipPrimPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v28);
  uint64_t v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  uint64_t v8 = v28;
  uint64_t v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  sub_21697C414(&v28);
  if (v8 == v9) {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (!v10)
  {
    uint64_t v28 = "usd/clipsAPI.cpp";
    uint64_t v29 = (atomic_ullong *)"GetClipPrimPath";
    uint64_t v30 = 465;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipPrimPath(std::string *, const std"
                            "::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  int v12 = *(char **)a3;
  if (v11 >= 0) {
    int v12 = (char *)a3;
  }
  int v13 = *v12;
  if (*v12) {
    BOOL v14 = (v13 - 48) >= 0xA;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    goto LABEL_26;
  }
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19) {
    goto LABEL_26;
  }
  char v16 = v12;
  do
  {
    int v18 = *v16++;
    char v17 = v18;
    unsigned int v19 = (v18 & 0xFFFFFFDF) - 65;
    unsigned int v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    uint64_t v28 = "usd/clipsAPI.cpp";
    uint64_t v29 = (atomic_ullong *)"GetClipPrimPath";
    uint64_t v30 = 465;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipPrimPath(std::string *, const std"
                            "::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_216D16CFC((uint64_t)&v28, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25) {
    uint64_t v25 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26) {
    uint64_t v26 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  }
  sub_216D1EBFC((const void **)a3, (void *)v26 + 4, (uint64_t)&v27);
  BOOL v23 = sub_216D24BF8((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v27);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  if (v29) {
    sub_216D16E0C(v29);
  }
  return v23;
}

void sub_216D20F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipActive(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipActive(a1, a2, (uint64_t)EmptyString);
}

void sub_216D21034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipActive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v26);
  uint64_t v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  uint64_t v7 = v26;
  uint64_t v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v7 != v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a3 + 8);
    }
    if (v9)
    {
      uint64_t v11 = *(char **)a3;
      if (v10 >= 0) {
        uint64_t v11 = (char *)a3;
      }
      int v12 = *v11;
      if (*v11) {
        BOOL v13 = (v12 - 48) >= 0xA;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13 && (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19))
      {
        uint64_t v15 = v11;
        do
        {
          int v17 = *v15++;
          char v16 = v17;
          unsigned int v18 = (v17 & 0xFFFFFFDF) - 65;
          unsigned int v19 = v17 - 48;
        }
        while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
        if (!v16)
        {
          sub_216D16CFC((uint64_t)&v26, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          BOOL v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v23) {
            BOOL v23 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          }
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v24) {
            uint64_t v24 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216D1EBFC((const void **)a3, v24, (uint64_t)&v25);
          sub_216D24CA0((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v23 + 8));
        }
      }
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipActive";
      uint64_t v28 = 480;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipActive(const VtVec2dArray &, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    }
    else
    {
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipActive";
      uint64_t v28 = 480;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipActive(const VtVec2dArray &, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    }
  }
  return 0;
}

void sub_216D21278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipActive(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipActive(a1, a2, (uint64_t)EmptyString);
}

void sub_216D21388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipActive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v28);
  uint64_t v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  uint64_t v8 = v28;
  uint64_t v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  sub_21697C414(&v28);
  if (v8 == v9) {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (!v10)
  {
    uint64_t v28 = "usd/clipsAPI.cpp";
    uint64_t v29 = (atomic_ullong *)"GetClipActive";
    uint64_t v30 = 495;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipActive(VtVec2dArray *, const std:"
                            ":string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  int v12 = *(char **)a3;
  if (v11 >= 0) {
    int v12 = (char *)a3;
  }
  int v13 = *v12;
  if (*v12) {
    BOOL v14 = (v13 - 48) >= 0xA;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    goto LABEL_26;
  }
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19) {
    goto LABEL_26;
  }
  char v16 = v12;
  do
  {
    int v18 = *v16++;
    char v17 = v18;
    unsigned int v19 = (v18 & 0xFFFFFFDF) - 65;
    unsigned int v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    uint64_t v28 = "usd/clipsAPI.cpp";
    uint64_t v29 = (atomic_ullong *)"GetClipActive";
    uint64_t v30 = 495;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipActive(VtVec2dArray *, const std:"
                            ":string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_216D16CFC((uint64_t)&v28, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25) {
    uint64_t v25 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26) {
    uint64_t v26 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  }
  sub_216D1EBFC((const void **)a3, v26, (uint64_t)&v27);
  BOOL v23 = sub_216D24DD8((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v27);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  if (v29) {
    sub_216D16E0C(v29);
  }
  return v23;
}

void sub_216D215CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTimes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTimes(a1, a2, (uint64_t)EmptyString);
}

void sub_216D216DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTimes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v26);
  uint64_t v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  uint64_t v7 = v26;
  uint64_t v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v7 != v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a3 + 8);
    }
    if (v9)
    {
      uint64_t v11 = *(char **)a3;
      if (v10 >= 0) {
        uint64_t v11 = (char *)a3;
      }
      int v12 = *v11;
      if (*v11) {
        BOOL v13 = (v12 - 48) >= 0xA;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13 && (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19))
      {
        uint64_t v15 = v11;
        do
        {
          int v17 = *v15++;
          char v16 = v17;
          unsigned int v18 = (v17 & 0xFFFFFFDF) - 65;
          unsigned int v19 = v17 - 48;
        }
        while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
        if (!v16)
        {
          sub_216D16CFC((uint64_t)&v26, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          BOOL v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v23) {
            BOOL v23 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          }
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v24) {
            uint64_t v24 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216D1EBFC((const void **)a3, (void *)v24 + 10, (uint64_t)&v25);
          sub_216D24CA0((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v23 + 8));
        }
      }
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipTimes";
      uint64_t v28 = 510;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTimes(const VtVec2dArray &, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    }
    else
    {
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipTimes";
      uint64_t v28 = 510;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTimes(const VtVec2dArray &, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    }
  }
  return 0;
}

void sub_216D21920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTimes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTimes(a1, a2, (uint64_t)EmptyString);
}

void sub_216D21A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTimes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v28);
  uint64_t v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  uint64_t v8 = v28;
  uint64_t v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  sub_21697C414(&v28);
  if (v8 == v9) {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (!v10)
  {
    uint64_t v28 = "usd/clipsAPI.cpp";
    uint64_t v29 = (atomic_ullong *)"GetClipTimes";
    uint64_t v30 = 525;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTimes(VtVec2dArray *, const std::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  int v12 = *(char **)a3;
  if (v11 >= 0) {
    int v12 = (char *)a3;
  }
  int v13 = *v12;
  if (*v12) {
    BOOL v14 = (v13 - 48) >= 0xA;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    goto LABEL_26;
  }
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19) {
    goto LABEL_26;
  }
  char v16 = v12;
  do
  {
    int v18 = *v16++;
    char v17 = v18;
    unsigned int v19 = (v18 & 0xFFFFFFDF) - 65;
    unsigned int v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    uint64_t v28 = "usd/clipsAPI.cpp";
    uint64_t v29 = (atomic_ullong *)"GetClipTimes";
    uint64_t v30 = 525;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTimes(VtVec2dArray *, const std::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_216D16CFC((uint64_t)&v28, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25) {
    uint64_t v25 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26) {
    uint64_t v26 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  }
  sub_216D1EBFC((const void **)a3, (void *)v26 + 10, (uint64_t)&v27);
  BOOL v23 = sub_216D24DD8((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v27);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  if (v29) {
    sub_216D16E0C(v29);
  }
  return v23;
}

void sub_216D21C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateAssetPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateAssetPath(a1, a2, (uint64_t)EmptyString);
}

void sub_216D21D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateAssetPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v28);
  uint64_t v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  uint64_t v8 = v28;
  uint64_t v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  sub_21697C414(&v28);
  if (v8 == v9) {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (!v10)
  {
    uint64_t v28 = "usd/clipsAPI.cpp";
    uint64_t v29 = (atomic_ullong *)"GetClipTemplateAssetPath";
    uint64_t v30 = 540;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateAssetPath(std::string *, "
                            "const std::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  int v12 = *(char **)a3;
  if (v11 >= 0) {
    int v12 = (char *)a3;
  }
  int v13 = *v12;
  if (*v12) {
    BOOL v14 = (v13 - 48) >= 0xA;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    goto LABEL_26;
  }
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19) {
    goto LABEL_26;
  }
  char v16 = v12;
  do
  {
    int v18 = *v16++;
    char v17 = v18;
    unsigned int v19 = (v18 & 0xFFFFFFDF) - 65;
    unsigned int v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    uint64_t v28 = "usd/clipsAPI.cpp";
    uint64_t v29 = (atomic_ullong *)"GetClipTemplateAssetPath";
    uint64_t v30 = 540;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateAssetPath(std::string *, "
                            "const std::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_216D16CFC((uint64_t)&v28, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25) {
    uint64_t v25 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26) {
    uint64_t v26 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  }
  sub_216D1EBFC((const void **)a3, (void *)v26 + 5, (uint64_t)&v27);
  BOOL v23 = sub_216D24BF8((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v27);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  if (v29) {
    sub_216D16E0C(v29);
  }
  return v23;
}

void sub_216D21FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateAssetPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateAssetPath(a1, a2, (uint64_t)EmptyString);
}

void sub_216D220D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateAssetPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v26);
  uint64_t v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  uint64_t v7 = v26;
  uint64_t v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v7 != v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a3 + 8);
    }
    if (v9)
    {
      uint64_t v11 = *(char **)a3;
      if (v10 >= 0) {
        uint64_t v11 = (char *)a3;
      }
      int v12 = *v11;
      if (*v11) {
        BOOL v13 = (v12 - 48) >= 0xA;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13 && (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19))
      {
        uint64_t v15 = v11;
        do
        {
          int v17 = *v15++;
          char v16 = v17;
          unsigned int v18 = (v17 & 0xFFFFFFDF) - 65;
          unsigned int v19 = v17 - 48;
        }
        while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
        if (!v16)
        {
          sub_216D16CFC((uint64_t)&v26, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          BOOL v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v23) {
            BOOL v23 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          }
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v24) {
            uint64_t v24 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216D1EBFC((const void **)a3, (void *)v24 + 5, (uint64_t)&v25);
          sub_216D24A4C((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v23 + 8));
        }
      }
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipTemplateAssetPath";
      uint64_t v28 = 555;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateAssetPath(const std::string &, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    }
    else
    {
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipTemplateAssetPath";
      uint64_t v28 = 555;
      uint64_t v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateAssetPath(const std::string &, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    }
  }
  return 0;
}

void sub_216D2231C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStride(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC((uint64_t)this, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStride((uint64_t)this, (uint64_t)a2, (uint64_t)EmptyString);
}

void sub_216D2242C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStride(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v28);
  uint64_t v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  uint64_t v8 = v28;
  uint64_t v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  sub_21697C414(&v28);
  if (v8 == v9) {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (!v10)
  {
    uint64_t v28 = "usd/clipsAPI.cpp";
    uint64_t v29 = (atomic_ullong *)"GetClipTemplateStride";
    uint64_t v30 = 570;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStride(double *, const st"
                            "d::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  int v12 = *(char **)a3;
  if (v11 >= 0) {
    int v12 = (char *)a3;
  }
  int v13 = *v12;
  if (*v12) {
    BOOL v14 = (v13 - 48) >= 0xA;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    goto LABEL_26;
  }
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19) {
    goto LABEL_26;
  }
  char v16 = v12;
  do
  {
    int v18 = *v16++;
    char v17 = v18;
    unsigned int v19 = (v18 & 0xFFFFFFDF) - 65;
    unsigned int v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    uint64_t v28 = "usd/clipsAPI.cpp";
    uint64_t v29 = (atomic_ullong *)"GetClipTemplateStride";
    uint64_t v30 = 570;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStride(double *, const st"
                            "d::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_216D16CFC((uint64_t)&v28, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25) {
    uint64_t v25 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26) {
    uint64_t v26 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  }
  sub_216D1EBFC((const void **)a3, (void *)v26 + 8, (uint64_t)&v27);
  BOOL v23 = sub_216D24E80((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v27);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  if (v29) {
    sub_216D16E0C(v29);
  }
  return v23;
}

void sub_216D22670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double a2)
{
  if (a2 <= 0.0)
  {
    v19[0] = "usd/clipsAPI.cpp";
    v19[1] = "SetClipTemplateStride";
    v19[2] = 580;
    v19[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride(const double)";
    char v20 = 0;
    sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
    sub_216D0162C((uint64_t)v12, &v17);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid clipTemplateStride %f for prim <%s>. clipTemplateStride must be greater than 0.", a2, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
    sub_21697C414(&v17);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    if (v13) {
      sub_216D16E0C(v13);
    }
    return 0;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC((uint64_t)this, v19);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v19[0];
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v19 + 1);
  sub_21697C414(v19);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v8) {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride((uint64_t)this, (uint64_t)EmptyString, a2);
}

void sub_216D22844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride(uint64_t a1, uint64_t a2, double a3)
{
  double v39 = a3;
  if (a3 <= 0.0)
  {
    long long v34 = "usd/clipsAPI.cpp";
    int v35 = "SetClipTemplateStride";
    uint64_t v36 = 596;
    long long v37 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride(const double, const std::string &)";
    char v38 = 0;
    sub_216D16CFC((uint64_t)&v27, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    sub_216D0162C((uint64_t)&v27, &v32);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v32);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid clipTemplateStride %f for prim <%s>. clipTemplateStride must be greater than 0.", a3, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
    sub_21697C414(&v32);
    if ((v31 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_21697C414(&v29);
    if (v28) {
      sub_216D16E0C(v28);
    }
  }
  else
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v34);
    uint64_t v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
    uint64_t v7 = v34;
    uint64_t v8 = *v6;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    sub_21697C414(&v34);
    if (v7 != v8)
    {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
      int v10 = (char)v9;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(a2 + 8);
      }
      if (v9)
      {
        int v11 = *(char **)a2;
        if (v10 >= 0) {
          int v11 = (char *)a2;
        }
        int v12 = *v11;
        if (*v11) {
          BOOL v13 = (v12 - 48) >= 0xA;
        }
        else {
          BOOL v13 = 0;
        }
        if (v13 && (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19))
        {
          int v15 = v11;
          do
          {
            int v17 = *v15++;
            char v16 = v17;
            unsigned int v18 = (v17 & 0xFFFFFFDF) - 65;
            unsigned int v19 = v17 - 48;
          }
          while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
          if (!v16)
          {
            sub_216D16CFC((uint64_t)&v34, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
            uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
            if (!v25) {
              uint64_t v25 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
            }
            uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v26) {
              uint64_t v26 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            }
            sub_216D1EBFC((const void **)a2, (void *)v26 + 8, (uint64_t)&v27);
            sub_216D24F28((uint64_t)&v34, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8));
          }
        }
        long long v34 = "usd/clipsAPI.cpp";
        int v35 = "SetClipTemplateStride";
        uint64_t v36 = 601;
        long long v37 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride(const double, const std::string &)";
        char v38 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
      }
      else
      {
        long long v34 = "usd/clipsAPI.cpp";
        int v35 = "SetClipTemplateStride";
        uint64_t v36 = 601;
        long long v37 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride(const double, const std::string &)";
        char v38 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
      }
    }
  }
  return 0;
}

void sub_216D22B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateActiveOffset(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v4) {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }

  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateActiveOffset((uint64_t)this, (uint64_t)a2, (uint64_t)EmptyString);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateActiveOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v28);
  uint64_t v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  uint64_t v8 = v28;
  uint64_t v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  sub_21697C414(&v28);
  if (v8 == v9) {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (!v10)
  {
    uint64_t v28 = "usd/clipsAPI.cpp";
    int v29 = (atomic_ullong *)"GetClipTemplateActiveOffset";
    uint64_t v30 = 617;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateActiveOffset(double *, co"
                            "nst std::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  int v12 = *(char **)a3;
  if (v11 >= 0) {
    int v12 = (char *)a3;
  }
  int v13 = *v12;
  if (*v12) {
    BOOL v14 = (v13 - 48) >= 0xA;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    goto LABEL_26;
  }
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19) {
    goto LABEL_26;
  }
  char v16 = v12;
  do
  {
    int v18 = *v16++;
    char v17 = v18;
    unsigned int v19 = (v18 & 0xFFFFFFDF) - 65;
    unsigned int v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    uint64_t v28 = "usd/clipsAPI.cpp";
    int v29 = (atomic_ullong *)"GetClipTemplateActiveOffset";
    uint64_t v30 = 617;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateActiveOffset(double *, co"
                            "nst std::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_216D16CFC((uint64_t)&v28, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25) {
    uint64_t v25 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26) {
    uint64_t v26 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  }
  sub_216D1EBFC((const void **)a3, (void *)v26 + 9, (uint64_t)&v27);
  BOOL v23 = sub_216D24E80((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v27);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  if (v29) {
    sub_216D16E0C(v29);
  }
  return v23;
}

void sub_216D22E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateActiveOffset(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v4) {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }

  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateActiveOffset((uint64_t)this, (uint64_t)EmptyString, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateActiveOffset(uint64_t a1, uint64_t a2, double a3)
{
  double v31 = a3;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v26);
  uint64_t v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  uint64_t v7 = v26;
  uint64_t v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v7 != v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (v9)
    {
      int v11 = *(char **)a2;
      if (v10 >= 0) {
        int v11 = (char *)a2;
      }
      int v12 = *v11;
      if (*v11) {
        BOOL v13 = (v12 - 48) >= 0xA;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13 && (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19))
      {
        int v15 = v11;
        do
        {
          int v17 = *v15++;
          char v16 = v17;
          unsigned int v18 = (v17 & 0xFFFFFFDF) - 65;
          unsigned int v19 = v17 - 48;
        }
        while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
        if (!v16)
        {
          sub_216D16CFC((uint64_t)&v26, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          BOOL v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v23) {
            BOOL v23 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          }
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v24) {
            uint64_t v24 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216D1EBFC((const void **)a2, (void *)v24 + 9, (uint64_t)&v25);
          sub_216D24F28((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v23 + 8));
        }
      }
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipTemplateActiveOffset";
      uint64_t v28 = 633;
      int v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateActiveOffset(const double, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    }
    else
    {
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipTemplateActiveOffset";
      uint64_t v28 = 633;
      int v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateActiveOffset(const double, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    }
  }
  return 0;
}

void sub_216D23198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStartTime(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC((uint64_t)this, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStartTime((uint64_t)this, (uint64_t)a2, (uint64_t)EmptyString);
}

void sub_216D232A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStartTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v28);
  uint64_t v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  uint64_t v8 = v28;
  uint64_t v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  sub_21697C414(&v28);
  if (v8 == v9) {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (!v10)
  {
    uint64_t v28 = "usd/clipsAPI.cpp";
    int v29 = (atomic_ullong *)"GetClipTemplateStartTime";
    uint64_t v30 = 648;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStartTime(double *, const"
                            " std::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  int v12 = *(char **)a3;
  if (v11 >= 0) {
    int v12 = (char *)a3;
  }
  int v13 = *v12;
  if (*v12) {
    BOOL v14 = (v13 - 48) >= 0xA;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    goto LABEL_26;
  }
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19) {
    goto LABEL_26;
  }
  char v16 = v12;
  do
  {
    int v18 = *v16++;
    char v17 = v18;
    unsigned int v19 = (v18 & 0xFFFFFFDF) - 65;
    unsigned int v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    uint64_t v28 = "usd/clipsAPI.cpp";
    int v29 = (atomic_ullong *)"GetClipTemplateStartTime";
    uint64_t v30 = 648;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStartTime(double *, const"
                            " std::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_216D16CFC((uint64_t)&v28, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25) {
    uint64_t v25 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26) {
    uint64_t v26 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  }
  sub_216D1EBFC((const void **)a3, (void *)v26 + 7, (uint64_t)&v27);
  BOOL v23 = sub_216D24E80((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v27);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  if (v29) {
    sub_216D16E0C(v29);
  }
  return v23;
}

void sub_216D234EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStartTime(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC((uint64_t)this, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStartTime((uint64_t)this, (uint64_t)EmptyString, a2);
}

void sub_216D235FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStartTime(uint64_t a1, uint64_t a2, double a3)
{
  double v31 = a3;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v26);
  uint64_t v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  uint64_t v7 = v26;
  uint64_t v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v7 != v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (v9)
    {
      uint64_t v11 = *(char **)a2;
      if (v10 >= 0) {
        uint64_t v11 = (char *)a2;
      }
      int v12 = *v11;
      if (*v11) {
        BOOL v13 = (v12 - 48) >= 0xA;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13 && (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19))
      {
        int v15 = v11;
        do
        {
          int v17 = *v15++;
          char v16 = v17;
          unsigned int v18 = (v17 & 0xFFFFFFDF) - 65;
          unsigned int v19 = v17 - 48;
        }
        while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
        if (!v16)
        {
          sub_216D16CFC((uint64_t)&v26, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          BOOL v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v23) {
            BOOL v23 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          }
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v24) {
            uint64_t v24 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216D1EBFC((const void **)a2, (void *)v24 + 7, (uint64_t)&v25);
          sub_216D24F28((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v23 + 8));
        }
      }
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipTemplateStartTime";
      uint64_t v28 = 663;
      int v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStartTime(const double, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    }
    else
    {
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipTemplateStartTime";
      uint64_t v28 = 663;
      int v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStartTime(const double, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    }
  }
  return 0;
}

void sub_216D23840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateEndTime(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC((uint64_t)this, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateEndTime((uint64_t)this, (uint64_t)a2, (uint64_t)EmptyString);
}

void sub_216D23950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateEndTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v28);
  uint64_t v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  uint64_t v8 = v28;
  uint64_t v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v28 + 1);
  sub_21697C414(&v28);
  if (v8 == v9) {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (!v10)
  {
    uint64_t v28 = "usd/clipsAPI.cpp";
    int v29 = (atomic_ullong *)"GetClipTemplateEndTime";
    uint64_t v30 = 678;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateEndTime(double *, const s"
                            "td::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  int v12 = *(char **)a3;
  if (v11 >= 0) {
    int v12 = (char *)a3;
  }
  int v13 = *v12;
  if (*v12) {
    BOOL v14 = (v13 - 48) >= 0xA;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    goto LABEL_26;
  }
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19) {
    goto LABEL_26;
  }
  char v16 = v12;
  do
  {
    int v18 = *v16++;
    char v17 = v18;
    unsigned int v19 = (v18 & 0xFFFFFFDF) - 65;
    unsigned int v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    uint64_t v28 = "usd/clipsAPI.cpp";
    int v29 = (atomic_ullong *)"GetClipTemplateEndTime";
    uint64_t v30 = 678;
    unint64_t v31 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateEndTime(double *, const s"
                            "td::string &) const";
    char v32 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_216D16CFC((uint64_t)&v28, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25) {
    uint64_t v25 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26) {
    uint64_t v26 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  }
  sub_216D1EBFC((const void **)a3, (void *)v26 + 6, (uint64_t)&v27);
  BOOL v23 = sub_216D24E80((uint64_t)&v28, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v27);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
  sub_21697C414(&v30);
  if (v29) {
    sub_216D16E0C(v29);
  }
  return v23;
}

void sub_216D23B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateEndTime(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC((uint64_t)this, &v11);
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  uint64_t v6 = v11;
  uint64_t v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D24410(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  }
  if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateEndTime((uint64_t)this, (uint64_t)EmptyString, a2);
}

void sub_216D23CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateEndTime(uint64_t a1, uint64_t a2, double a3)
{
  double v31 = a3;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D1E2AC(a1, &v26);
  uint64_t v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  uint64_t v7 = v26;
  uint64_t v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
  sub_21697C414(&v26);
  if (v7 != v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (v9)
    {
      uint64_t v11 = *(char **)a2;
      if (v10 >= 0) {
        uint64_t v11 = (char *)a2;
      }
      int v12 = *v11;
      if (*v11) {
        BOOL v13 = (v12 - 48) >= 0xA;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13 && (v12 == 95 || (v12 & 0xFFFFFFDF) - 65 <= 0x19))
      {
        int v15 = v11;
        do
        {
          int v17 = *v15++;
          char v16 = v17;
          unsigned int v18 = (v17 & 0xFFFFFFDF) - 65;
          unsigned int v19 = v17 - 48;
        }
        while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
        if (!v16)
        {
          sub_216D16CFC((uint64_t)&v26, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
          BOOL v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v23) {
            BOOL v23 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          }
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          if (!v24) {
            uint64_t v24 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
          }
          sub_216D1EBFC((const void **)a2, (void *)v24 + 6, (uint64_t)&v25);
          sub_216D24F28((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v23 + 8));
        }
      }
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipTemplateEndTime";
      uint64_t v28 = 693;
      int v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateEndTime(const double, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    }
    else
    {
      uint64_t v26 = "usd/clipsAPI.cpp";
      uint64_t v27 = "SetClipTemplateEndTime";
      uint64_t v28 = 693;
      int v29 = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateEndTime(const double, const std::string &)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    }
  }
  return 0;
}

void sub_216D23EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216D23F38()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216D24018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216D24064(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D240D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216D240F8(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  unint64_t v2 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (!v2 || (*((unsigned char *)v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  return pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v2);
}

uint64_t (*sub_216D24140(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return sub_216D241A0;
  }
}

uint64_t sub_216D241A0(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(sub_216850B68(v2) + 14)) {
    return *a1;
  }
  return 0;
}

void sub_216D241E4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::VtDictionary>();
}

void sub_216D24260(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::VtDictionary>();
}

void sub_216D242D8(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_216D24378(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t sub_216D243A0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result = sub_21698F724(a2);
  if (result)
  {
    uint64_t v4 = *((void *)a2 + 1);
    if ((v4 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==();
  }
  return result;
}

unint64_t sub_216D24410(atomic_ullong *a1)
{
  uint64_t v2 = sub_216D24490();
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    if (v2)
    {
      uint64_t v6 = (void **)((char *)v2 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v3);
    }
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType *sub_216D24490()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType::UsdClipsAPISetNames_StaticTokenType(v0);
  return v0;
}

void sub_216D244C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216D244D4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_216D24574(uint64_t a1, void *a2)
{
  return 1;
}

uint64_t sub_216D2459C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result = sub_216998140(a2);
  if (result)
  {
    uint64_t v5 = *((void *)a2 + 1);
    if ((v5 & 4) != 0) {
      uint64_t v6 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a2);
    else {
      uint64_t v6 = *(uint64_t **)a2;
    }
    uint64_t v7 = *(void *)(a1 + 8);
    return sub_2169B42A0(v6, v7);
  }
  return result;
}

void sub_216D2460C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>();
}

void sub_216D24688(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_216D24728(uint64_t a1, void *a2)
{
  return 1;
}

uint64_t sub_216D24750(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result = sub_2169980B4(a2);
  if (result)
  {
    uint64_t v5 = *((void *)a2 + 1);
    if ((v5 & 4) != 0) {
      uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v6 = *(unsigned __int8 **)a2;
    }
    uint64_t v7 = *(unsigned __int8 **)(a1 + 8);
    return sub_2169B3B54(v6, v7);
  }
  return result;
}

void sub_216D247C0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
}

void sub_216D2483C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_216D248DC(uint64_t a1, uint64_t a2)
{
  char v3 = **(unsigned char **)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  }
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(unsigned char *)a2 = v3;
  return 1;
}

uint64_t sub_216D24940(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  uint64_t result = sub_216959490(a2);
  if (result)
  {
    uint64_t v5 = *((void *)v2 + 1);
    if ((v5 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    return *(unsigned __int8 *)v2 == **(unsigned __int8 **)(a1 + 8);
  }
  return result;
}

BOOL sub_216D249A4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8 || (*(unsigned char *)(v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v9 = *(void *)v8;
  v11[1] = a3;
  void v11[2] = MEMORY[0x263F8C230];
  __int16 v12 = 0;
  v11[0] = &unk_26C75BAE8;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

void sub_216D24A4C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_216D24AEC(uint64_t a1, uint64_t a2)
{
  return 1;
}

BOOL sub_216D24B14(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (!sub_21695C360(a2)) {
    return 0;
  }
  uint64_t v4 = *((void *)a2 + 1);
  if ((v4 & 4) != 0) {
    uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  }
  else {
    uint64_t v5 = *(unsigned __int8 **)a2;
  }
  uint64_t v6 = *(unsigned __int8 ***)(a1 + 8);
  uint64_t v7 = v5[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (unsigned __int8 *)v5[23];
  }
  else {
    uint64_t v8 = (unsigned __int8 *)*((void *)v5 + 1);
  }
  uint64_t v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  int v10 = (char)v9;
  if ((char)v9 < 0) {
    uint64_t v9 = v6[1];
  }
  if (v8 != v9) {
    return 0;
  }
  if (v10 >= 0) {
    uint64_t v11 = *(unsigned __int8 **)(a1 + 8);
  }
  else {
    uint64_t v11 = *v6;
  }
  if ((v7 & 0x80) != 0) {
    return memcmp(*(const void **)v5, v11, *((void *)v5 + 1)) == 0;
  }
  if (!v5[23]) {
    return 1;
  }
  uint64_t v12 = v7 - 1;
  do
  {
    int v14 = *v5++;
    int v13 = v14;
    int v16 = *v11++;
    int v15 = v16;
    BOOL v18 = v12-- != 0;
    BOOL v19 = v13 == v15;
    BOOL v20 = v13 == v15;
  }
  while (v19 && v18);
  return v20;
}

BOOL sub_216D24BF8(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8 || (*(unsigned char *)(v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v9 = *(void *)v8;
  v11[1] = a3;
  void v11[2] = &stru_26C747090;
  __int16 v12 = 0;
  v11[0] = &unk_26C75D628;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

void sub_216D24CA0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_216D24D40(uint64_t a1, void *a2)
{
  return 1;
}

uint64_t sub_216D24D68(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result = sub_2168FC5B0(a2);
  if (result)
  {
    uint64_t v5 = *((void *)a2 + 1);
    if ((v5 & 4) != 0) {
      uint64_t v6 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                            + 168))(a2);
    else {
      uint64_t v6 = *(void **)a2;
    }
    uint64_t v7 = *(void *)(a1 + 8);
    return sub_2168FC990(v6, v7);
  }
  return result;
}

BOOL sub_216D24DD8(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8 || (*(unsigned char *)(v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v9 = *(void *)v8;
  v11[1] = a3;
  void v11[2] = &stru_26C74DF50;
  __int16 v12 = 0;
  v11[0] = &unk_26C75E2D0;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

BOOL sub_216D24E80(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8 || (*(unsigned char *)(v8 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v9 = *(void *)v8;
  v11[1] = a3;
  void v11[2] = MEMORY[0x263F8C240];
  __int16 v12 = 0;
  v11[0] = &unk_26C75DC08;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

void sub_216D24F28(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_216D24FC8(uint64_t a1, void *a2)
{
  uint64_t v3 = **(void **)(a1 + 8);
  uint64_t v4 = a2[1];
  if (v4) {
    BOOL v5 = (a2[1] & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  }
  a2[1] = &unk_26C750B03;
  *a2 = v3;
  return 1;
}

uint64_t sub_216D25034(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = (uint64_t)a2;
  uint64_t result = sub_21691CE68(a2);
  if (result)
  {
    uint64_t v5 = *(void *)(v2 + 8);
    if ((v5 & 4) != 0) {
      uint64_t v2 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    return *(double *)v2 == **(double **)(a1 + 8);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<BOOL>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<BOOL>();
}

void sub_216D252D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>();
}

void sub_216D25534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<unsigned char>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<unsigned char>();
}

void sub_216D25790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>();
}

void sub_216D259EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<int>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<int>();
}

void sub_216D25C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
}

void sub_216D25EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<unsigned int>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<unsigned int>();
}

void sub_216D26100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>();
}

void sub_216D2635C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<long long>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<long long>();
}

void sub_216D265B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>();
}

void sub_216D26814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<unsigned long long>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<unsigned long long>();
}

void sub_216D26A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>();
}

void sub_216D26CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::pxr_half::half>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>();
}

void sub_216D26F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>();
}

void sub_216D27184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<float>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<float>();
}

void sub_216D273E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
}

void sub_216D2763C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<double>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<double>();
}

void sub_216D27898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>();
}

void sub_216D27AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>();
}

void sub_216D27D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>();
}

void sub_216D27FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<std::string>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<std::string>();
}

void sub_216D28208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>();
}

void sub_216D28464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_216D286C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
}

void sub_216D2891C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
}

void sub_216D28B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>();
}

void sub_216D28DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>();
}

void sub_216D29030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>();
}

void sub_216D2928C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfPathExpression>();
}

void sub_216D294E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>();
}

void sub_216D29744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>();
}

void sub_216D299A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>();
}

void sub_216D29BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>();
}

void sub_216D29E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>();
}

void sub_216D2A0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
}

void sub_216D2A310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>();
}

void sub_216D2A56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfQuath>();
}

void sub_216D2A7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>();
}

void sub_216D2AA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>();
}

void sub_216D2AC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>();
}

void sub_216D2AEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfQuatd>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>();
}

void sub_216D2B138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>();
}

void sub_216D2B394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec2i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>();
}

void sub_216D2B5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>();
}

void sub_216D2B84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>();
}

void sub_216D2BAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>();
}

void sub_216D2BD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec2f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>();
}

void sub_216D2BF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>();
}

void sub_216D2C1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec2d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>();
}

void sub_216D2C418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>();
}

void sub_216D2C674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>();
}

void sub_216D2C8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>();
}

void sub_216D2CB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>();
}

void sub_216D2CD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>();
}

void sub_216D2CFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>();
}

void sub_216D2D240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
}

void sub_216D2D49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>();
}

void sub_216D2D6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>();
}

void sub_216D2D954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>();
}

void sub_216D2DBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>();
}

void sub_216D2DE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>();
}

void sub_216D2E068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>();
}

void sub_216D2E2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec4f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>();
}

void sub_216D2E520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>();
}

void sub_216D2E77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec4d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>();
}

void sub_216D2E9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>();
}

void sub_216D2EC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_21698105C((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)this + 3) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216D1CEAC((uint64_t)this + 32);
  *((void *)this + 14) = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Initialize(this, v6);
  return this;
}

void sub_216D2ED00(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  sub_216817474(v4, 0);
  sub_216D1B1E8(v2);
  sub_216D2EDA0(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Initialize(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2))
  {
    uint64_t v4 = *((void *)this + 1);
    if (!v4 || (*(unsigned char *)(v4 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v3);
    }
    uint64_t v5 = *(void *)v4;
    pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(v5, this, (_DWORD *)this + 8, 0);
  }
}

uint64_t sub_216D2EDA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a2, a3, (uint64_t)&v5);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(this, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v5);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return this;
}

{
  uint64_t v5;
  atomic_ullong *v6;
  int v7;
  int v8;
  uint64_t v9;

  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a2, a3, (uint64_t)&v5);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(this, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v5);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return this;
}

void sub_216D2EE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216D2EF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::UsdResolveTarget *a3)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  *((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_21698105C((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  uint64_t v7 = *((void *)a2 + 3);
  *((void *)this + 3) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216D1CEAC((uint64_t)this + 32);
  *((void *)this + 14) = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Initialize(this, a3);
  return this;
}

void sub_216D2EFE8(_Unwind_Exception *a1)
{
  sub_216817474(v3, 0);
  sub_216D1B1E8(v2);
  sub_216D2EDA0(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Initialize(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::UsdResolveTarget *a2)
{
  if (*(void *)a2)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2))
    {
      uint64_t v4 = sub_216D2F758((uint64_t)this);
      if (*v4 == *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)a2))
      {
        uint64_t v6 = *((void *)this + 1);
        if (!v6 || (*(unsigned char *)(v6 + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v5);
        }
        pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfoWithResolveTarget(*(void *)v6, this, a2, (_DWORD *)this + 8, 0);
        uint64_t v7 = operator new(0x60uLL);
        uint64_t v8 = *((void *)a2 + 1);
        *uint64_t v7 = *(void *)a2;
        v7[1] = v8;
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
        }
        long long v9 = *((_OWORD *)a2 + 4);
        *((_OWORD *)v7 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)v7 + 4) = v9;
        *((_OWORD *)v7 + 5) = *((_OWORD *)a2 + 5);
        long long v10 = *((_OWORD *)a2 + 2);
        *((_OWORD *)v7 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)v7 + 2) = v10;
        v15[0] = 0;
        sub_216817474((void **)this + 14, v7);
        sub_216817474(v15, 0);
      }
      else
      {
        v15[0] = "usd/attributeQuery.cpp";
        v15[1] = "_Initialize";
        void v15[2] = (void *)129;
        v15[3] = "void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Initialize(const UsdResolveTarget &)";
        char v16 = 0;
        uint64_t v11 = sub_216D2F758((uint64_t)this);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v11);
        Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)a2);
        int v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)Path);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid resolve target for attribute '%s'. The given resolve target is only valid for attributes on the prim '%s'.", Text, v14);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Initialize(this, a2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::CreateQueries@<X0>(const pxrInternal__aapl__pxrReserved__::UsdPrim *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = sub_216D2F24C(a3, (a2[1] - *a2) >> 3);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  while (v7 != v8)
  {
    pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)v9, a1, v7);
    sub_216D2F300(a3, (uint64_t)v9);
    uint64_t result = sub_216D2FE74((uint64_t)v9);
    uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v7 + 8);
  }
  return result;
}

void sub_216D2F220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D2FF70((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D2F24C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_216D3007C(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 120 * v6;
    sub_216D2FFF4(a1, v7);
    return sub_216D30178((uint64_t)v7);
  }
  return result;
}

void sub_216D2F2EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D30178((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D2F300(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x222222222222222) {
      sub_21677CB10();
    }
    unint64_t v11 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x111111111111111) {
      unint64_t v13 = 0x222222222222222;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      int v14 = (char *)sub_216D3007C(v4, v13);
    }
    else {
      int v14 = 0;
    }
    int v15 = v14;
    char v16 = &v14[120 * v10];
    BOOL v18 = &v14[120 * v13];
    sub_216D300C4((uint64_t)v16, a2);
    int v17 = v16 + 120;
    sub_216D2FFF4(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = sub_216D30178((uint64_t)&v15);
  }
  else
  {
    uint64_t result = sub_216D300C4(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 120;
    a1[1] = v7 + 120;
  }
  a1[1] = v9;
  return result;
}

void sub_216D2F410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D30178((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  *(_DWORD *)this = 3;
  *((void *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 5);
  *((void *)this + 3) = 0;
  sub_216D1CEAC((uint64_t)this + 32);
  *((void *)this + 14) = 0;
  return this;
}

void sub_216D2F47C(_Unwind_Exception *a1)
{
  sub_216D2EDA0(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_21698105C((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)this + 3) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)a2 + 5);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)this + 5) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v7 = *((void *)a2 + 7);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)this + 7) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
  }
  long long v8 = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 5) = v8;
  sub_216981010((_DWORD *)this + 24, (_DWORD *)a2 + 24);
  sub_21698105C((_DWORD *)this + 25, (_DWORD *)a2 + 25);
  int v9 = *((_DWORD *)a2 + 26);
  char v10 = *((unsigned char *)a2 + 108);
  *((void *)this + 14) = 0;
  *((unsigned char *)this + 108) = v10;
  *((_DWORD *)this + 26) = v9;
  uint64_t v11 = *((void *)a2 + 14);
  if (v11)
  {
    uint64_t v12 = operator new(0x60uLL);
    uint64_t v13 = *(void *)(v11 + 8);
    void *v12 = *(void *)v11;
    v12[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    *((_OWORD *)v12 + 1) = *(_OWORD *)(v11 + 16);
    long long v14 = *(_OWORD *)(v11 + 32);
    long long v15 = *(_OWORD *)(v11 + 48);
    long long v16 = *(_OWORD *)(v11 + 80);
    *((_OWORD *)v12 + 4) = *(_OWORD *)(v11 + 64);
    *((_OWORD *)v12 + 5) = v16;
    *((_OWORD *)v12 + 2) = v14;
    *((_OWORD *)v12 + 3) = v15;
    BOOL v18 = 0;
    sub_216817474((void **)this + 14, v12);
    sub_216817474(&v18, 0);
  }
  return this;
}

void sub_216D2F5F8(_Unwind_Exception *a1)
{
  sub_216817474(v3, 0);
  sub_216D1B1E8(v2);
  sub_216D2EDA0(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(atomic_ullong **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    sub_216D16E0C(v5);
  }
  sub_2169C487C((int *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_2169C48D4((int *)(a1 + 20), (_DWORD *)(a2 + 20));
  sub_2168D2318((void *)(a1 + 24), (void *)(a2 + 24));
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_2168CD2FC((atomic_uint **)(a1 + 40), (atomic_uint **)(a2 + 40));
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  sub_2168CD2FC((atomic_uint **)(a1 + 56), (atomic_uint **)(a2 + 56));
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  sub_2169C487C((int *)(a1 + 96), (_DWORD *)(a2 + 96));
  sub_2169C48D4((int *)(a1 + 100), (_DWORD *)(a2 + 100));
  int v7 = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v7;
  uint64_t v8 = *(void *)(a2 + 112);
  if (v8)
  {
    int v9 = operator new(0x60uLL);
    uint64_t v10 = *(void *)(v8 + 8);
    *int v9 = *(void *)v8;
    v9[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    *((_OWORD *)v9 + 1) = *(_OWORD *)(v8 + 16);
    long long v11 = *(_OWORD *)(v8 + 32);
    long long v12 = *(_OWORD *)(v8 + 48);
    long long v13 = *(_OWORD *)(v8 + 80);
    *((_OWORD *)v9 + 4) = *(_OWORD *)(v8 + 64);
    *((_OWORD *)v9 + 5) = v13;
    *((_OWORD *)v9 + 2) = v11;
    *((_OWORD *)v9 + 3) = v12;
    long long v15 = 0;
    sub_216817474((void **)(a1 + 112), v9);
    sub_216817474(&v15, 0);
  }
  return a1;
}

uint64_t *sub_216D2F758(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  BOOL v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
  if (v3) {
    return (uint64_t *)v2;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    return (uint64_t *)(v4 + 16);
  }

  return pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
}

uint64_t sub_216D2F7C0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6 || (*(unsigned char *)(v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  int v7 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v6;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo(v7, (uint64_t *)(a1 + 32), (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double))a1, (uint64_t (**)(void, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double))a2, a3);
}

void sub_216D2FA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216D1B1E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamples(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4 || (*(unsigned char *)(v4 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v5 = *(void *)v4;
  unint64_t v7 = 0xFFF0000000000000;
  char v8 = 0;
  uint64_t v9 = 0x7FF0000000000000;
  char v10 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInIntervalFromResolveInfo(v5, a1 + 32, a1, (uint64_t)&v7, (uint64_t)a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6 || (*(unsigned char *)(v6 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v7 = *(void *)v6;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInIntervalFromResolveInfo(v7, a1 + 32, a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetUnionedTimeSamples(pxrInternal__aapl__pxrReserved__::UsdObject **a1, uint64_t a2)
{
  unint64_t v3 = 0xFFF0000000000000;
  char v4 = 0;
  uint64_t v5 = 0x7FF0000000000000;
  char v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetUnionedTimeSamplesInInterval(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetUnionedTimeSamplesInInterval(pxrInternal__aapl__pxrReserved__::UsdObject **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  *(void *)(a3 + 8) = *(void *)a3;
  unint64_t v3 = *a1;
  char v4 = a1[1];
  if (*a1 == v4)
  {
    char v7 = 1;
  }
  else
  {
    int v17 = 0;
    BOOL v18 = 0;
    uint64_t v19 = 0;
    __sFILE __p = 0;
    long long v15 = 0;
    char v7 = 1;
    uint64_t v16 = 0;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, a2))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v3, a2, &v12);
        uint64_t v8 = sub_216D01530(&v12);
        char TimeSamplesInIntervalFromResolveInfo = pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInIntervalFromResolveInfo(v8, (uint64_t)v3 + 32, (uint64_t)v3, (uint64_t)a2, (uint64_t)&v17);
        uint64_t v10 = v13;
        if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
        pxrInternal__aapl__pxrReserved__::Usd_MergeTimeSamples((void **)a3, (double **)&v17, &__p);
        v7 &= TimeSamplesInIntervalFromResolveInfo;
      }
      unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v3 + 120);
    }
    while (v3 != v4);
    if (__p)
    {
      long long v15 = __p;
      operator delete(__p);
    }
    if (v17)
    {
      BOOL v18 = v17;
      operator delete(v17);
    }
  }
  return v7 & 1;
}

void sub_216D2FC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetNumTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v4 = *(void *)v3;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetNumTimeSamplesFromResolveInfo(v4, (uint64_t)this + 32, this);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetBracketingTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, double a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, double *a4, BOOL *a5)
{
  uint64_t v10 = *((void *)this + 1);
  if (!v10 || (*(unsigned char *)(v10 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a3);
  }
  uint64_t v11 = *(void *)v10;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetBracketingTimeSamplesFromResolveInfo(v11, (uint64_t)this + 32, this, 0, (double *)a3, a4, a5, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasValue(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  return *((_DWORD *)this + 26) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasAuthoredValueOpinion(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  return (*((_DWORD *)this + 26) - 2) < 3 || *((unsigned char *)this + 108) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasAuthoredValue(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  return (*((_DWORD *)this + 26) - 2) < 3;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  }
  uint64_t v4 = *(void *)v3;

  return pxrInternal__aapl__pxrReserved__::UsdStage::_ValueMightBeTimeVaryingFromResolveInfo(v4, (uint64_t)this + 32, (uint64_t)this);
}

uint64_t sub_216D2FE74(uint64_t a1)
{
  sub_216817474((void **)(a1 + 112), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 100));
  sub_21697C414((_DWORD *)(a1 + 96));
  uint64_t v2 = *(atomic_uint **)(a1 + 56);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(atomic_uint **)(a1 + 40);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v5 = *(atomic_ullong **)(a1 + 8);
  if (v5) {
    sub_216D16E0C(v5);
  }
  return a1;
}

void sub_216D2FF70(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_216D2FE74(v4 - 120);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216D2FFF4(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 120;
    uint64_t result = sub_216D300C4(result - 120, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_216D3007C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    sub_21677CA1C();
  }
  return operator new(120 * a2);
}

uint64_t sub_216D300C4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  sub_21697D878((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  sub_21697D878((_DWORD *)(a1 + 96), (_DWORD *)(a2 + 96));
  sub_21697D8B4((_DWORD *)(a1 + 100), (_DWORD *)(a2 + 100));
  int v5 = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v5;
  uint64_t v6 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 112) = v6;
  return a1;
}

uint64_t sub_216D30178(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 120;
    sub_216D2FE74(i - 120);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Get(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v8 & 1 | (unint64_t)v6)
  {
    uint64_t v12 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IsCollectionAPIPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, v7))
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v11);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (uint64_t)&v13);
      sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13, &v12);
      *(void *)a3 = &unk_26C767A08;
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
      sub_21697C414(&v15);
      if (v14) {
        sub_216D16E0C(v14);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
      sub_21697C414(&v11);
    }
    else
    {
      uint64_t v13 = "usd/collectionAPI.cpp";
      long long v14 = (atomic_ullong *)"Get";
      uint64_t v15 = 63;
      unint64_t v16 = (unint64_t)"static UsdCollectionAPI pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Get(const UsdS"
                              "tagePtr &, const SdfPath &)";
      char v17 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid collection path <%s>.", Text);
      LODWORD(v13) = 1;
      long long v14 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
      unint64_t v16 = 0;
      uint64_t v11 = 0;
      sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13, &v11);
      *(void *)a3 = &unk_26C767A08;
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
      sub_21697C414(&v15);
      if (v14) {
        sub_216D16E0C(v14);
      }
    }
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v13 = "usd/collectionAPI.cpp";
    long long v14 = (atomic_ullong *)"Get";
    uint64_t v15 = 58;
    unint64_t v16 = (unint64_t)"static UsdCollectionAPI pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    long long v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    unint64_t v16 = 0;
    uint64_t v12 = 0;
    sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13, &v12);
    *(void *)a3 = &unk_26C767A08;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
    if (v14) {
      sub_216D16E0C(v14);
    }
  }
}

void sub_216D30500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  if ((a4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IsCollectionAPIPath(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this)) {
    return 0;
  }
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  if (*((char *)Name + 23) < 0)
  {
    sub_216778F24(&__p, (void *)*Name, Name[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)Name;
    __p.__r_.__value_.__r.__words[2] = Name[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens((unsigned __int8 *)&__p, (uint64_t *)&v20);
  unint64_t v9 = *(void *)(v21 - 8);
  unint64_t v19 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v19 = v9 & 0xFFFFFFFFFFFFFFF8;
    v9 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IsSchemaPropertyBaseName((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v19, v8)&& (uint64_t v10 = v20, (unint64_t)(v21 - (void)v20) >= 9)&& (*v10 & 0xFFFFFFFFFFFFFFF8) == (*(void *)sub_216D30D80() & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216D30D80();
    if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)EmptyString + 23) < 0) {
      uint64_t v14 = EmptyString[1];
    }
    else {
      uint64_t v14 = *((unsigned __int8 *)EmptyString + 23);
    }
    std::string::basic_string(&v17, &__p, v14 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v18);
    uint64_t v15 = *(void *)a2;
    uint64_t v16 = *(void *)a2 & 7;
    if (&v18 == (uint64_t *)a2)
    {
      if (v16) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v16) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)a2 = v18;
      uint64_t v18 = 0;
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = 1;
    unint64_t v9 = v19;
  }
  else
  {
    uint64_t v7 = 0;
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  sub_216889A04((void ***)&v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_216D30780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string __p = &a17;
  sub_216889A04((void ***)&__p);
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Get@<X0>(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t result = sub_216D36868(a3, this, (uint64_t *)a2);
  *(void *)uint64_t result = &unk_26C767A08;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetAll(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetStaticTfType(this);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetMultipleApplyInstanceNames(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&qword_267B919B8, (uint64_t)&v8);
  int v5 = v8;
  long long v6 = v9;
  if (v8 != v9)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a2[1];
    do
    {
      if ((unint64_t)v7 >= a2[2])
      {
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_216D375E4(a2, this, v5);
      }
      else
      {
        sub_216D36868(v7, this, v5);
        *(void *)uint64_t v7 = &unk_26C767A08;
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v7 + 32);
        a2[1] = (uint64_t)v7;
      }
      a2[1] = (uint64_t)v7;
      ++v5;
    }
    while (v5 != v6);
  }
  uint64_t v10 = (void **)&v8;
  sub_216889A04(&v10);
}

void sub_216D30904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D37524((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B919C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B919C0))
  {
    __cxa_guard_release(&qword_267B919C0);
  }
  return &qword_267B919B8;
}

void sub_216D309AC(_Unwind_Exception *a1)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IsSchemaPropertyBaseName(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  v25[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B919A8, memory_order_acquire) & 1) == 0)
  {
    long long v4 = this;
    int v5 = __cxa_guard_acquire(&qword_267B919A8);
    this = v4;
    if (v5)
    {
      long long v6 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v6) {
        long long v6 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      if ((*((void *)v6 + 6) & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*((void *)v6 + 6) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)EmptyString, &v20);
      char v8 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v8) {
        char v8 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      if ((*((void *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v9 = (uint64_t *)((*((void *)v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v9, &v21);
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v10) {
        uint64_t v10 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      if ((*((void *)v10 + 9) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v11 = (uint64_t *)((*((void *)v10 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v11 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v11, &v22);
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v12) {
        uint64_t v12 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      if ((*((void *)v12 + 4) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v13 = (uint64_t *)((*((void *)v12 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v13, &v23);
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v14) {
        uint64_t v14 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      if ((*((void *)v14 + 8) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v15 = (uint64_t *)((*((void *)v14 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v15, &v24);
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v16) {
        uint64_t v16 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      if ((*((void *)v16 + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
        std::string v17 = (uint64_t *)((*((void *)v16 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        std::string v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v17, v25);
      sub_216D30CFC(qword_267B91990, &v20, 6uLL);
      for (uint64_t i = 40; i != -8; i -= 8)
      {
        uint64_t v19 = *(uint64_t *)((char *)&v20 + i);
        if ((v19 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      __cxa_atexit((void (*)(void *))sub_216B554D0, qword_267B91990, &dword_216758000);
      __cxa_guard_release(&qword_267B919A8);
      this = v4;
    }
  }
  uint64_t v2 = (void *)qword_267B91990[0];
  if (qword_267B91990[0] != unk_267B91998)
  {
    while ((*v2 & 0xFFFFFFFFFFFFFFF8) != (*(void *)this & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v2 == (void *)unk_267B91998)
      {
        uint64_t v2 = (void *)unk_267B91998;
        return v2 != (void *)unk_267B91998;
      }
    }
  }
  return v2 != (void *)unk_267B91998;
}

void sub_216D30C88(_Unwind_Exception *a1)
{
  uint64_t v3 = 40;
  while (1)
  {
    uint64_t v4 = *(void *)(v1 + v3);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v3 -= 8;
    if (v3 == -8)
    {
      __cxa_guard_abort(&qword_267B919A8);
      _Unwind_Resume(a1);
    }
  }
}

void *sub_216D30CFC(void *a1, uint64_t *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_21677CACC(a1, a3);
    sub_21698FAA0((uint64_t)a1, a2, &a2[a3]);
  }
  return a1;
}

void sub_216D30D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

unint64_t sub_216D30D80()
{
  v0 = (char *)atomic_load((unint64_t *)&qword_267B919B0);
  if (!v0)
  {
    v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "collection", 0);
    uint64_t v2 = *(void *)v0;
    if ((*(void *)v0 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)v0 + 1) = 0;
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    long long v6 = (void **)(v0 + 8);
    char v7 = 0;
    uint64_t v3 = operator new(8uLL);
    *((void *)v0 + 1) = v3;
    *((void *)v0 + 2) = v3;
    void *v3 = v2;
    uint64_t v4 = v3 + 1;
    *((void *)v0 + 3) = v3 + 1;
    if ((v2 & 7) != 0)
    {
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        *v3 &= 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)v0 + 2) = v4;
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    else
    {
      *((void *)v0 + 2) = v4;
    }
    uint64_t v5 = 0;
    atomic_compare_exchange_strong(&qword_267B919B0, (unint64_t *)&v5, (unint64_t)v0);
    if (v5)
    {
      long long v6 = (void **)(v0 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B919B0);
    }
  }
  return (unint64_t)v0;
}

void sub_216D30EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_216889A04(&a9);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  return 6;
}

uint64_t sub_216D30F00(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B919B8, v6);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a2, a3);
  }
  else
  {
    v14[0] = "usd/prim.h";
    v14[1] = "CanApplyAPI";
    _DWORD v14[2] = 1059;
    void v14[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(const TfToken &, std::string *) const [SchemaTy"
             "pe = pxrInternal__aapl__pxrReserved__::UsdCollectionAPI]";
    char v15 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v11);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v13 = (const char *)TypeName;
    }
    else {
      uint64_t v13 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v13);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if (sub_216D31134(this, a2))
  {
    sub_216D36868(a3, this, (uint64_t *)a2);
    *(void *)a3 = &unk_26C767A08;
  }
  else
  {
    int v8 = 1;
    unint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v11);
    uint64_t v12 = 0;
    uint64_t v7 = 0;
    sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, &v7);
    *(void *)a3 = &unk_26C767A08;
    if ((v7 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_21697C414(&v10);
    if (v9) {
      sub_216D16E0C(v9);
    }
  }
}

void sub_216D31108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D31134(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B919B8, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "ApplyAPI";
    v12[2] = 1188;
    _DWORD v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(const TfToken &) const [SchemaType = pxrInternal__"
             "aapl__pxrReserved__::UsdCollectionAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      int v11 = (const char *)TypeName;
    }
    else {
      int v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B919D0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)__cxa_guard_acquire(&qword_267B919D0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetStaticTfType(v2);
      byte_267B919C8 = sub_216D16508((char *)&qword_267B919B8, v3, v4);
      __cxa_guard_release(&qword_267B919D0);
    }
  }
  return byte_267B919C8;
}

void sub_216D3126C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  return &qword_267B919B8;
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExpansionRuleAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 6);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v10 = (uint64_t *)(v9 + 4);
  }
  else {
    int v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_216D3140C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExpansionRuleAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v10 = *((void *)EmptyString + 6);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v12 = (uint64_t)EmptyString;
  }
  char v13 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v14 = (uint64_t *)(v13 + 4);
  }
  else {
    int v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v16);
  int v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    int v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 88), 0, 1, a2, a3, a4);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216D315DC(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludeRootAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 7);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_216D3178C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludeRootAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v10 = *((void *)EmptyString + 7);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v12 = (uint64_t)EmptyString;
  }
  char v13 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v14 = (uint64_t *)(v13 + 4);
  }
  else {
    int v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v16);
  int v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    int v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, v15, 0, 1, a2, a3, a4);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216D3195C(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetMembershipExpressionAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 9);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_216D31B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateMembershipExpressionAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v10 = *((void *)EmptyString + 9);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v12 = (uint64_t)EmptyString;
  }
  char v13 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v14 = (uint64_t *)(v13 + 4);
  }
  else {
    int v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v16);
  int v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    int v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 440), 0, 1, a2, a3, a4);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216D31CDC(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 4);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_216D31E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateCollectionAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v10 = *((void *)EmptyString + 4);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v12 = (uint64_t)EmptyString;
  }
  char v13 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v14 = (uint64_t *)(v13 + 4);
  }
  else {
    int v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v16);
  int v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    int v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 424), 0, 1, a2, a3, a4);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216D3205C(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludesRel(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 8);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_216D3220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 8);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, 0, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_216D323DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExcludesRel(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 5);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_216D325A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExcludesRel(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 5);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, 0, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_216D32778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  int v1 = (int)this;
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B919F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B919F0))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v3) {
      uint64_t v3 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    uint64_t v4 = *((void *)v3 + 6);
    uint64_t v14 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v5) {
      uint64_t v5 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    uint64_t v6 = *((void *)v5 + 7);
    uint64_t v15 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v7) {
      uint64_t v7 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    uint64_t v8 = *((void *)v7 + 9);
    uint64_t v16 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v9) {
      unint64_t v9 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    uint64_t v10 = *((void *)v9 + 4);
    uint64_t v17 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B919D8, &v14, 4uLL);
    for (uint64_t i = 24; i != -8; i -= 8)
    {
      uint64_t v12 = *(uint64_t *)((char *)&v14 + i);
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B919D8, &dword_216758000);
    __cxa_guard_release(&qword_267B919F0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91A10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91A10))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_216D32AF8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B919F8, &dword_216758000);
    __cxa_guard_release(&qword_267B91A10);
  }
  if (v1) {
    return &qword_267B919F8;
  }
  else {
    return &qword_267B919D8;
  }
}

void sub_216D32A74(_Unwind_Exception *a1)
{
}

void *sub_216D32AF8(uint64_t **a1)
{
  qword_267B91A00 = 0;
  unk_267B91A08 = 0;
  qword_267B919F8 = 0;
  sub_216973388((char **)&qword_267B919F8, ((unk_267B919E0 - qword_267B919D8) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B919F8, (void *)qword_267B91A00, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B919F8, (void *)qword_267B91A00, (uint64_t *)qword_267B919D8, unk_267B919E0, (unk_267B919E0 - qword_267B919D8) >> 3);
}

void sub_216D32B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetSchemaAttributeNames(this);
  uint64_t v7 = SchemaAttributeNames;
  uint64_t v8 = *a2;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v8)
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216973388((char **)a3, (SchemaAttributeNames[1] - *SchemaAttributeNames) >> 3);
    uint64_t v10 = (void *)*v7;
    uint64_t v11 = (void *)v7[1];
    if ((void *)*v7 != v11)
    {
      do
      {
        if ((*v10 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v12 = (*v10 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          uint64_t v12 = (uint64_t)EmptyString;
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
          char v13 = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v13, (uint64_t)&v37);
        uint64_t v15 = *(void **)(a3 + 8);
        unint64_t v14 = *(void *)(a3 + 16);
        if ((unint64_t)v15 >= v14)
        {
          uint64_t v18 = ((uint64_t)v15 - *(void *)a3) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v19 = v14 - *(void *)a3;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          uint64_t v36 = a3 + 16;
          if (v21) {
            uint64_t v22 = (char *)sub_21677CB28(a3 + 16, v21);
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v23 = &v22[8 * v18];
          uint64_t v24 = &v22[8 * v21];
          int v35 = v24;
          *(void *)uint64_t v23 = v37;
          uint64_t v17 = v23 + 8;
          uint64_t v37 = 0;
          v34.i64[1] = (uint64_t)(v23 + 8);
          uint64_t v26 = *(char **)a3;
          uint64_t v25 = *(char **)(a3 + 8);
          if (v25 == *(char **)a3)
          {
            int64x2_t v28 = vdupq_n_s64((unint64_t)v25);
          }
          else
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *((void *)v23 - 1) = v27;
              v23 -= 8;
              *(void *)uint64_t v25 = 0;
            }
            while (v25 != v26);
            int64x2_t v28 = *(int64x2_t *)a3;
            uint64_t v17 = (void *)v34.i64[1];
            uint64_t v24 = v35;
          }
          *(void *)a3 = v23;
          *(void *)(a3 + 8) = v17;
          int64x2_t v34 = v28;
          int v29 = *(char **)(a3 + 16);
          *(void *)(a3 + 16) = v24;
          int v35 = v29;
          uint64_t v33 = v28.i64[0];
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168BE9D8((uint64_t)&v33);
          uint64_t v16 = v37;
        }
        else
        {
          uint64_t v16 = 0;
          *uint64_t v15 = v37;
          uint64_t v17 = v15 + 1;
          uint64_t v37 = 0;
        }
        *(void *)(a3 + 8) = v17;
        if ((v16 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        ++v10;
      }
      while (v10 != v11);
    }
  }
  else
  {
    char v30 = (uint64_t *)*SchemaAttributeNames;
    double v31 = (uint64_t *)SchemaAttributeNames[1];
    unint64_t v32 = ((uint64_t)v31 - *SchemaAttributeNames) >> 3;
    sub_21698FA28((void *)a3, v30, v31, v32);
  }
}

void sub_216D32DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X1>, uint64_t *a2@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a4@<X8>)
{
  uint64_t v15 = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IsCollectionAPIPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, a3))
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(this, &v9);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, (uint64_t)&v10);
    sub_216D36868(a4, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10, &v15);
    *(void *)a4 = &unk_26C767A08;
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
    sub_21697C414(&v12);
    if (v11) {
      sub_216D16E0C(v11);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
    sub_21697C414(&v9);
  }
  else
  {
    uint64_t v10 = "usd/collectionAPI.cpp";
    uint64_t v11 = (atomic_ullong *)"GetCollection";
    uint64_t v12 = 408;
    unint64_t v13 = (unint64_t)"static UsdCollectionAPI pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection(co"
                            "nst UsdStagePtr &, const SdfPath &)";
    char v14 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid collection path <%s>.", Text);
    LODWORD(v10) = 1;
    uint64_t v11 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v12 + 1);
    unint64_t v13 = 0;
    uint64_t v9 = 0;
    sub_216D36868(a4, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10, &v9);
    *(void *)a4 = &unk_26C767A08;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
    sub_21697C414(&v12);
    if (v11) {
      sub_216D16E0C(v11);
    }
  }
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216D3301C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  sub_216D16AD8((uint64_t)va1);
  sub_21697B754((uint64_t *)va);
  uint64_t v4 = *(void *)(v2 - 40);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection@<X0>(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t result = sub_216D36868(a3, this, (uint64_t *)a2);
  *(void *)uint64_t result = &unk_26C767A08;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, int *a2@<X8>)
{
  sub_216D1E2AC((uint64_t)this, &v13);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 4);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  uint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v12);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a2);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  return sub_21697C414(&v13);
}

void sub_216D33210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetNamedCollectionPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, int *a3@<X8>)
{
  sub_216D0162C((uint64_t)this, &v15);
  uint64_t v6 = *(void *)a2;
  if ((*(void *)a2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString) {
    EmptyString = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  uint64_t v8 = *((void *)EmptyString + 4);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v10 = (uint64_t)(v9 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v10 = (uint64_t)EmptyString;
  }
  uint64_t v11 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v12 = (uint64_t *)(v11 + 4);
  }
  else {
    uint64_t v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v10, (uint64_t)v12, (uint64_t)&v14);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v14, a3);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_21697C414(&v15);
}

void sub_216D333B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetAllCollections(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  size_t AppliedSchemas = (size_t)pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(this, a2, &v24);
  if (v24 != v25)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91A30, memory_order_acquire) & 1) == 0)
    {
      size_t AppliedSchemas = __cxa_guard_acquire(&qword_267B91A30);
      if (AppliedSchemas)
      {
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v19) {
          uint64_t v19 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        }
        if ((*((void *)v19 + 17) & 0xFFFFFFFFFFFFFFF8) != 0) {
          EmptyString = (uint64_t *)((*((void *)v19 + 17) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v19);
        }
        char v21 = sub_216D33724();
        sub_216B9C180((const void **)EmptyString, v21, (uint64_t)&qword_267B91A18);
        __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267B91A18, &dword_216758000);
        __cxa_guard_release(&qword_267B91A30);
      }
    }
    uint64_t v6 = v24;
    for (uint64_t i = v25; v6 != i; ++v6)
    {
      if ((*v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v8 = (uint64_t *)((*v6 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)AppliedSchemas);
      }
      std::string::size_type v9 = byte_267B91A2F;
      if (byte_267B91A2F >= 0) {
        uint64_t v10 = (const char *)&qword_267B91A18;
      }
      else {
        uint64_t v10 = (const char *)qword_267B91A18;
      }
      int v11 = *((char *)v8 + 23);
      if (v11 >= 0) {
        size_t v12 = *((unsigned __int8 *)v8 + 23);
      }
      else {
        size_t v12 = v8[1];
      }
      size_t AppliedSchemas = strlen(v10);
      if (v12 >= AppliedSchemas)
      {
        size_t v13 = AppliedSchemas;
        uint64_t v14 = v11 >= 0 ? (const char *)v8 : (const char *)*v8;
        size_t AppliedSchemas = strncmp(v14, v10, v13);
        if (!AppliedSchemas)
        {
          if ((*v6 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            int v15 = (const std::string *)((*v6 & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else
          {
            int v15 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)AppliedSchemas);
            std::string::size_type v9 = byte_267B91A2F;
          }
          if ((v9 & 0x80u) == 0) {
            std::string::size_type v16 = v9;
          }
          else {
            std::string::size_type v16 = qword_267B91A20;
          }
          std::string::basic_string(&v23, v15, v16, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v22);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v22);
          uint64_t v17 = *(void **)(a3 + 8);
          if ((unint64_t)v17 >= *(void *)(a3 + 16))
          {
            size_t AppliedSchemas = sub_216D378F8((uint64_t *)a3, this, &v22);
            uint64_t v18 = (void *)AppliedSchemas;
          }
          else
          {
            size_t AppliedSchemas = (size_t)sub_216D36868(*(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a3 + 8), this, &v22);
            *uint64_t v17 = &unk_26C767A08;
            uint64_t v18 = v17 + 4;
            *(void *)(a3 + 8) = v18;
          }
          *(void *)(a3 + 8) = v18;
          if ((v22 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v23.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  sub_216889A04((void ***)&v23);
}

void sub_216D33698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  std::string __p = &a17;
  sub_216889A04((void ***)&__p);
  sub_216D37524((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_216D33724()
{
  v0 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if (!v0) {
    v0 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  }
  unint64_t v1 = *((void *)v0 + 10) & 0xFFFFFFFFFFFFFFF8;
  if (v1)
  {
    uint64_t v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0) {
      uint64_t v2 = *(const char **)v2;
    }
  }
  else
  {
    uint64_t v2 = "";
  }
  return *v2;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IncludePath(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v48[4] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery(this, (uint64_t)&v27);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D33DE4((uint64_t)&v27, a2, 0);
  if ((_BYTE)v4)
  {
LABEL_8:
    uint64_t v5 = 1;
    goto LABEL_9;
  }
  if (*(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4))
  {
    v38.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&unk_26C7501AB;
    LOBYTE(v38.__vftable) = 1;
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludeRootAttr(this, &v38, 0, (uint64_t)v22);
    if ((v26 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
    sub_21697C414(&v24);
    if (v23) {
      sub_216D16E0C(v23);
    }
    sub_2168EE084((uint64_t)&v38);
    goto LABEL_8;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExcludesRel(this, (uint64_t)v14);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v14, v8))
  {
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)v14, (uint64_t *)&v19);
    std::string::size_type v9 = v19;
    if (v19 != v20)
    {
      while (*v9 != *(void *)a2)
      {
        if (++v9 == v20)
        {
          std::string::size_type v9 = v20;
          break;
        }
      }
    }
    if (v9 != v20)
    {
      pxrInternal__aapl__pxrReserved__::UsdRelationship::RemoveTarget((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v14, a2);
      sub_216D37ACC((uint64_t)v13, (uint64_t)v28);
      uint64_t v10 = sub_216A62F60(v13, (unsigned int *)a2);
      if (v10
        || (v38.__vftable = (std::type_info_vtbl *)"usd/collectionAPI.cpp",
            v38.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"IncludePath",
            uint64_t v39 = 493,
            unint64_t v40 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IncludePath(const SdfPath &) const",
            char v41 = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v38, "it != map.end()", 0) & 1) != 0))
      {
        sub_216851DB0(v13, v10, (uint64_t)&v38);
        sub_216D37DC4((uint64_t)&v38, 0);
        pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase((uint64_t)&v38, (uint64_t)v13, (uint64_t)&v29);
        memset(v48, 0, 32);
        long long v46 = 0u;
        long long v47 = 0u;
        if ((v27 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v27 = v38.__vftable;
        v38.__vftable = 0;
        sub_216D368D4((uint64_t)v28, (uint64_t *)&v38.__type_name);
        sub_216981EE8((uint64_t)&v29, v30[0]);
        int v29 = v42;
        v30[0] = v43;
        v30[1] = v44;
        if (v44)
        {
          v43[2] = v30;
          uint64_t v42 = &v43;
          long long v43 = 0;
          uint64_t v44 = 0;
        }
        else
        {
          int v29 = v30;
        }
        char v31 = v45;
        int v11 = (atomic_uint *)*((void *)&v32 + 1);
        long long v32 = v46;
        *((void *)&v46 + 1) = 0;
        if (v11 && atomic_fetch_add_explicit(v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v11 + 8))(v11);
        }
        *(void *)&long long v46 = 0;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = v47;
        uint64_t v34 = v48[0];
        v48[0] = 0;
        long long v47 = 0uLL;
        sub_216D36A6C((void **)&v35);
        long long v35 = *(_OWORD *)&v48[1];
        uint64_t v36 = v48[3];
        memset(&v48[1], 0, 24);
        uint64_t v37 = (void **)&v48[1];
        sub_216D373D0(&v37);
        if ((void)v47)
        {
          *((void *)&v47 + 1) = v47;
          operator delete((void *)v47);
        }
        uint64_t v12 = *((void *)&v46 + 1);
        if (*((void *)&v46 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v46 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
        sub_216981EE8((uint64_t)&v42, v43);
        sub_216D37A04((uint64_t)&v38.__type_name);
        if (((uint64_t)v38.__vftable & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v38.__vftable & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      sub_216D37A04((uint64_t)v13);
    }
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
  if (sub_216D33DE4((uint64_t)&v27, a2, 0) == 1)
  {
    uint64_t v5 = 1;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(this, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v38);
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v38, a2, 1);
    if ((v40 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
    sub_21697C414(&v39);
    if (v38.__type_name) {
      sub_216D16E0C((atomic_ullong *)v38.__type_name);
    }
  }
  v38.__vftable = (std::type_info_vtbl *)&v19;
  sub_216981168((void ***)&v38);
LABEL_9:
  v38.__vftable = (std::type_info_vtbl *)&v35;
  sub_216D373D0((void ***)&v38);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v6 = *((void *)&v32 + 1);
  if (*((void *)&v32 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v32 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_216981EE8((uint64_t)&v29, v30[0]);
  sub_216D37A04((uint64_t)v28);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v5;
}

void sub_216D33CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_216D37A04((uint64_t)&a9);
  sub_216D33F64((uint64_t)&a14);
  *(void *)(v25 - 232) = &a18;
  sub_216981168((void ***)(v25 - 232));
  sub_216D33EAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 40) = 1065353216;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 48) = a2 + 56;
  *(unsigned char *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery(this, a2);
}

void sub_216D33DD0(_Unwind_Exception *a1)
{
  sub_216D33EAC(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_216D33DE4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_HasEmptyRuleMap((pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase *)a1))
  {
    unint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator::Match((pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator *)(a1 + 80), a2);
    BOOL IsPathIncludedByRuleMap = v6;
    uint64_t v8 = v6 >> 8;
    if (a3)
    {
      std::string::size_type v9 = (pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens);
      if ((_BYTE)v6)
      {
        if (!v9) {
          std::string::size_type v9 = sub_216D37A40(&pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens);
        }
      }
      else
      {
        if (!v9) {
          std::string::size_type v9 = sub_216D37A40(&pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens);
        }
        std::string::size_type v9 = (pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *)((char *)v9 + 8);
      }
      sub_2168D2318(a3, v9);
    }
  }
  else
  {
    BOOL IsPathIncludedByRuleMap = pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_IsPathIncludedByRuleMap((pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase *)a1, a2, a3);
    uint64_t v8 = 0x1000000;
  }
  return IsPathIncludedByRuleMap | (unint64_t)(v8 << 8);
}

uint64_t sub_216D33EAC(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 120);
  sub_216D373D0(&v5);
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(atomic_uint **)(a1 + 88);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  sub_216981EE8(a1 + 48, *(void **)(a1 + 56));
  sub_216D37A04(a1 + 8);
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t sub_216D33F64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ExcludePath(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v49[4] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery(this, (uint64_t)&v27);
  if (v29)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216D33DE4((uint64_t)&v27, a2, 0);
    if (v4 != 1)
    {
LABEL_9:
      uint64_t v5 = 1;
      goto LABEL_47;
    }
  }
  if (*(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4))
  {
    v39.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&unk_26C7501AB;
    LOBYTE(v39.__vftable) = 0;
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludeRootAttr(this, &v39, 0, (uint64_t)v22);
    if ((v26 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
    sub_21697C414(&v24);
    if (v23) {
      sub_216D16E0C(v23);
    }
    sub_2168EE084((uint64_t)&v39);
    goto LABEL_9;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludesRel(this, (uint64_t)v14);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v14, v6))
  {
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)v14, (uint64_t *)&v19);
    uint64_t v7 = v19;
    if (v19 != v20)
    {
      while (*v7 != *(void *)a2)
      {
        if (++v7 == v20)
        {
          uint64_t v7 = v20;
          break;
        }
      }
    }
    if (v7 != v20)
    {
      pxrInternal__aapl__pxrReserved__::UsdRelationship::RemoveTarget((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v14, a2);
      sub_216D37ACC((uint64_t)v13, (uint64_t)v28);
      uint64_t v8 = sub_216A62F60(v13, (unsigned int *)a2);
      if (v8
        || (v39.__vftable = (std::type_info_vtbl *)"usd/collectionAPI.cpp",
            v39.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"ExcludePath",
            uint64_t v40 = 538,
            unint64_t v41 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ExcludePath(const SdfPath &) const",
            char v42 = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "it != map.end()", 0) & 1) != 0))
      {
        sub_216851DB0(v13, v8, (uint64_t)&v39);
        sub_216D37DC4((uint64_t)&v39, 0);
        pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase((uint64_t)&v39, (uint64_t)v13, (uint64_t)&v30);
        memset(v49, 0, 32);
        long long v47 = 0u;
        long long v48 = 0u;
        if ((v27 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v27 = v39.__vftable;
        v39.__vftable = 0;
        sub_216D368D4((uint64_t)v28, (uint64_t *)&v39.__type_name);
        sub_216981EE8((uint64_t)&v30, v31[0]);
        char v30 = v43;
        v31[0] = v44;
        v31[1] = v45;
        if (v45)
        {
          void v44[2] = v31;
          long long v43 = &v44;
          uint64_t v44 = 0;
          char v45 = 0;
        }
        else
        {
          char v30 = v31;
        }
        char v32 = v46;
        std::string::size_type v9 = (atomic_uint *)*((void *)&v33 + 1);
        long long v33 = v47;
        *((void *)&v47 + 1) = 0;
        if (v9 && atomic_fetch_add_explicit(v9 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
        }
        *(void *)&long long v47 = 0;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = v48;
        uint64_t v35 = v49[0];
        v49[0] = 0;
        long long v48 = 0uLL;
        sub_216D36A6C((void **)&v36);
        long long v36 = *(_OWORD *)&v49[1];
        uint64_t v37 = v49[3];
        memset(&v49[1], 0, 24);
        std::type_info v38 = (void **)&v49[1];
        sub_216D373D0(&v38);
        if ((void)v48)
        {
          *((void *)&v48 + 1) = v48;
          operator delete((void *)v48);
        }
        uint64_t v10 = *((void *)&v47 + 1);
        if (*((void *)&v47 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v47 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
        sub_216981EE8((uint64_t)&v43, v44);
        sub_216D37A04((uint64_t)&v39.__type_name);
        if (((uint64_t)v39.__vftable & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v39.__vftable & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      sub_216D37A04((uint64_t)v13);
    }
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
  if (v29 && !sub_216D33DE4((uint64_t)&v27, a2, 0))
  {
    uint64_t v5 = 1;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExcludesRel(this, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v39);
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v39, a2, 1);
    if ((v41 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v40 + 1);
    sub_21697C414(&v40);
    if (v39.__type_name) {
      sub_216D16E0C((atomic_ullong *)v39.__type_name);
    }
  }
  v39.__vftable = (std::type_info_vtbl *)&v19;
  sub_216981168((void ***)&v39);
LABEL_47:
  v39.__vftable = (std::type_info_vtbl *)&v36;
  sub_216D373D0((void ***)&v39);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v11 = *((void *)&v33 + 1);
  if (*((void *)&v33 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  sub_216981EE8((uint64_t)&v30, v31[0]);
  sub_216D37A04((uint64_t)v28);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v5;
}

void sub_216D34520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_216D37A04((uint64_t)&a9);
  sub_216D33F64((uint64_t)&a14);
  *(void *)(v25 - 232) = &a18;
  sub_216981168((void ***)(v25 - 232));
  sub_216D33EAC((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::HasNoIncludedPaths(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  memset(v7, 0, sizeof(v7));
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludesRel(this, (uint64_t)&v2);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)&v2, v7);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
  sub_21697C414(&v4);
  if (v3) {
    sub_216D16E0C(v3);
  }
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludeRootAttr(this, (uint64_t)&v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>();
}

void sub_216D346C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a10 = (void **)&a14;
  sub_216981168(&a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ResolveCompleteMembershipExpression(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  memset(__p, 0, sizeof(__p));
  long long v14 = 0u;
  *(_OWORD *)uint64_t v12 = 0u;
  memset(v13, 0, sizeof(v13));
  sub_216D16CFC((uint64_t)&v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v7, v4))
  {
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetMembershipExpressionAttr(this, (uint64_t)&v6);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfPathExpression>();
  }
  *(_OWORD *)a2 = *(_OWORD *)v12;
  *(void *)(a2 + 16) = *(void *)&v13[0];
  v12[0] = 0;
  v12[1] = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)v13 + 8);
  *(void *)(a2 + 40) = *((void *)&v13[1] + 1);
  memset(v13, 0, sizeof(v13));
  *(_OWORD *)(a2 + 48) = v14;
  *(void **)(a2 + 64) = __p[0];
  long long v14 = 0uLL;
  long long v5 = *(_OWORD *)&__p[1];
  *(void **)(a2 + 88) = __p[3];
  *(_OWORD *)(a2 + 72) = v5;
  memset(__p, 0, sizeof(__p));
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  uint64_t v7 = (void **)&v14;
  sub_2169B81EC(&v7);
  uint64_t v7 = (void **)v13 + 1;
  sub_2169B74B8(&v7);
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_216D348D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_216D16AD8((uint64_t)va);
  sub_2169B5940((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_216D34914(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_2169B70E4(v7, a1);
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::ResolveReferences(v7, a2, a3, a4);
  if (v11 < 0) {
    operator delete(__p);
  }
  uint64_t v12 = (void **)&v9;
  sub_2169B81EC(&v12);
  uint64_t v12 = (void **)&v8;
  sub_2169B74B8(&v12);
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
}

void sub_216D349B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169B5940((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath(a1, (int *)v6);
    sub_216D37E1C((uint64_t)v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v6 + 1);
    sub_21697C414(v6);
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_ComputeMembershipQueryImpl(a1, a2);
    uint64_t v4 = 0;
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExpansionRuleAttr(a1, (uint64_t)v6);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
  v6[0] = "usd/collectionAPI.cpp";
  v6[1] = "ComputeMembershipQuery";
  v6[2] = (void *)635;
  v6[3] = "void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery(UsdCollectionMembershipQuery *) const";
  char v7 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid query pointer.");
}

void sub_216D34EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,void *a33)
{
  if ((a31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216981EE8((uint64_t)&a32, a33);
  _Unwind_Resume(a1);
}

void sub_216D34FDC()
{
}

void sub_216D34FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_ComputeMembershipQueryImpl(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *a1, uint64_t a2)
{
  if (a2
    || (v5[0] = "usd/collectionAPI.cpp",
        v5[1] = "_ComputeMembershipQueryImpl",
        void v5[2] = 665,
        void v5[3] = "void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_ComputeMembershipQueryImpl(UsdCollectionMember"
                "shipQuery *, const SdfPathSet &, BOOL *) const",
        LOBYTE(v6) = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "query", 0),
        (result & 1) != 0))
  {
    sub_216D37ACC((uint64_t)v9, a2 + 8);
    sub_216D37E9C(&v8, a2 + 48);
    uint64_t v7 = 0;
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExpansionRuleAttr(a1, (uint64_t)v5);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
  return result;
}

void sub_216D35AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v58 = *(void *)(v56 - 176);
  if ((v58 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216981EE8(v56 - 168, *(void **)(v56 - 160));
  sub_216D37A04(v56 - 144);
  _Unwind_Resume(a1);
}

__n128 sub_216D35C9C(uint64_t a1, uint64_t a2)
{
  sub_21697D0EC(a1 + 80, a2);
  sub_216B08220(a1 + 96, (__n128 *)(a2 + 16));
  sub_216D36A6C((void **)(a1 + 120));
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 120) = result;
  *(void *)(a1 + 136) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

uint64_t *sub_216D35CF4(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_2169814FC(v5, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28), (_DWORD *)v4 + 7);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Validate(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExpansionRuleAttr(a1, (uint64_t)v15);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v15, v4))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>(); {
  if ((BYTE8(v16) & 7) != 0)
  }
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v16 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_21697C414(&v16);
  if (v15[1]) {
    sub_216D16E0C((atomic_ullong *)v15[1]);
  }
  char v11 = 0;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath(a1, (int *)v15);
  sub_216D37E1C((uint64_t)v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v15, 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v15 + 1);
  sub_21697C414(v15);
  uint64_t v17 = 0;
  *(_OWORD *)int v15 = 0u;
  long long v16 = 0u;
  int v18 = 1065353216;
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v19 = v20;
  char v21 = 0;
  long long v22 = 0u;
  long long __p = 0u;
  memset(v24, 0, 32);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_ComputeMembershipQueryImpl(a1, (uint64_t)v15);
  if (v11)
  {
    if (!a2) {
      goto LABEL_14;
    }
    std::string::append((std::string *)a2, "Found one or more circular dependencies amongst the set of included (directly and transitively) collections.");
    goto LABEL_10;
  }
  if (!v21) {
    goto LABEL_13;
  }
  v13[0] = (void **)&unk_26C767A60;
  long long v14 = v13;
  int v5 = sub_216D36228(&v15[1], (uint64_t)v13);
  sub_216D38270(v13);
  v13[0] = (void **)&unk_26C767AF0;
  long long v14 = v13;
  int v6 = sub_216D36228(&v15[1], (uint64_t)v13);
  sub_216D38270(v13);
  if (((v5 | v6) & 1) == 0)
  {
    if (a2)
    {
      std::string::append((std::string *)a2, "Found both includes and excludes among the root-most rules -- interpretation is ambiguous");
LABEL_10:
      a2 = 0;
    }
  }
  else
  {
LABEL_13:
    a2 = 1;
  }
LABEL_14:
  v13[0] = (void **)&v24[8];
  sub_216D373D0(v13);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  uint64_t v7 = *((void *)&v22 + 1);
  if (*((void *)&v22 + 1)
    && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_216981EE8((uint64_t)&v19, v20[0]);
  sub_216D37A04((uint64_t)&v15[1]);
  if (((uint64_t)v15[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216981EE8((uint64_t)v9, v10);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a2;
}

void sub_216D36178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D36228(void *a1, uint64_t a2)
{
  if (!a1[3]) {
    return 0;
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    while (2)
    {
      for (uint64_t i = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 2), &v10);
            ;
            uint64_t i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21697C414(&v12))
      {
        int v6 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(i);
        if (v10 == *v6) {
          break;
        }
        if (sub_216A9DB14(a1, (unsigned int *)&v10))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
          sub_21697C414(&v10);
          goto LABEL_13;
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v12);
        sub_21697DE94((int *)&v10, &v12);
        sub_21697DEEC((int *)&v10 + 1, &v13);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
      sub_21697C414(&v10);
      sub_216D374C0((uint64_t)&v10, (uint64_t)(v3 + 2));
      uint64_t v7 = *(void *)(a2 + 24);
      if (!v7) {
        sub_21683A7CC();
      }
      int v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v7 + 48))(v7, &v10);
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
      sub_21697C414(&v10);
      if (!v8) {
        return 0;
      }
LABEL_13:
      uint64_t v3 = (void *)*v3;
      if (v3) {
        continue;
      }
      break;
    }
  }
  return 1;
}

void sub_216D363A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D37468((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ResetCollection(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludesRel(this, (uint64_t)&v6);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v6, v2))uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v6, 1); {
  else
  }
    uint64_t v3 = 1;
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExcludesRel(this, (uint64_t)&v6);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v6, v4))uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v6, 1) & v3; {
  if ((v10 & 7) != 0)
  }
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  if (v7) {
    sub_216D16E0C(v7);
  }
  return v3;
}

void sub_216D364E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::BlockCollection(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludesRel(this, (uint64_t)v9);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v9, v2))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v9, &v6);
    long long v14 = &v6;
    sub_216981168((void ***)&v14);
  }
  else
  {
    uint64_t v3 = 1;
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExcludesRel(this, (uint64_t)v9);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v9, v4))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v9, &v6) & v3;
    long long v14 = &v6;
    sub_216981168((void ***)&v14);
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  return v3;
}

void sub_216D36624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *(void *)(v5 - 40) = v4;
  sub_216981168((void ***)(v5 - 40));
  sub_216D33F64((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CanContainPropertyName(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v3) {
    uint64_t v3 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  if ((*((void *)v3 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v4 = (uint64_t *)((*((void *)v3 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  if (*((char *)v4 + 23) >= 0) {
    uint64_t v5 = (const char *)v4;
  }
  else {
    uint64_t v5 = (const char *)*v4;
  }
  int v6 = *((char *)EmptyString + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v7 = EmptyString[1];
  }
  size_t v8 = strlen(v5);
  if (v7 < v8) {
    return 0;
  }
  size_t v10 = v8;
  if (v6 >= 0) {
    int v11 = (const char *)EmptyString;
  }
  else {
    int v11 = (const char *)*EmptyString;
  }
  return strncmp(v11, v5, v10) == 0;
}

uint64_t *sub_216D36738()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216D36818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_216D36868(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  __n128 result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a1, a2);
  *(void *)__n128 result = &unk_26C767760;
  uint64_t v5 = *a3;
  *((void *)result + 3) = *a3;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)result + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void sub_216D368D4(uint64_t a1, uint64_t *a2)
{
  sub_216D36978(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  int v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *int v7 = 0;
    v7[1] = 0;
  }
}

void sub_216D36978(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_216D369D0(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_216D369D0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216D36A14((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_216D36A14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

void sub_216D36A6C(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 136;
        sub_216D36ADC((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_DWORD *sub_216D36ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void **)(a2 + 112);
  sub_216D36B68(&v6);
  uint64_t v6 = (void **)(a2 + 80);
  sub_216D36D50(&v6);
  uint64_t v6 = (void **)(a2 + 56);
  sub_216782F20(&v6);
  uint64_t v3 = *(void **)(a2 + 32);
  if (v3)
  {
    *(void *)(a2 + 40) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 8);
  if (v4)
  {
    *(void *)(a2 + 16) = v4;
    operator delete(v4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));
  return sub_21697C414((_DWORD *)a2);
}

void sub_216D36B68(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_216D36C00((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216D36C00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 24);
  sub_216D36C48(&v4);
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void sub_216D36C48(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_216D36CCC(v4 - 4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_216D36CCC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216D36D50(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)(v4 - 48));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216D36DD4(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = a2[31];
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 2);
  }
  if (!v6)
  {
    uint64_t v44 = "usd/collectionAPI.cpp";
    char v45 = "operator()";
    uint64_t v46 = 586;
    long long v47 = "auto pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ResolveCompleteMembershipExpression()::(anonymous cla"
          "ss)::operator()(const SdfPathExpression::ExpressionReference &) const";
    char v48 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)&v38, *(pxrInternal__aapl__pxrReserved__::SdfPathExpression **)a1);
    if (v41 >= 0) {
      unint64_t v12 = (const char *)&v38;
    }
    else {
      unint64_t v12 = (const char *)v38;
    }
    uint64_t v13 = *(void *)(v5 + 24);
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      int v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        int v15 = *(const char **)v15;
      }
    }
    else
    {
      int v15 = "";
    }
    sub_216D0162C(*(void *)(a1 + 16), (int *)v33);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v33, (uint64_t)&__p);
    if (v37 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v44, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected reference to empty name in expression '%s' from collection '%s' on prim <%s>; substituting empty expression",
      v12,
      v15,
      p_p);
    if (v37 < 0) {
      operator delete(__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v33 + 1);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_21697C414(v33);
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)v14, 0xFFFFFFFE, memory_order_release);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v38);
    }
    goto LABEL_45;
  }
  uint64_t v44 = a2;
  char v45 = a2 + 8;
  std::type_info v38 = (void *)pxrInternal__aapl__pxrReserved__::SdfPathExpression::ExpressionReference::Weaker((pxrInternal__aapl__pxrReserved__::SdfPathExpression::ExpressionReference *)a1);
  std::type_info v39 = (atomic_ullong *)((char *)v38 + 8);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_2169B6920((uint64_t)&__p, (uint64_t)&v44, (uint64_t)&v38);
  if (v8)
  {
LABEL_45:
    uint64_t v22 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v8);
    sub_2169B70E4(a3, v22);
    return;
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v43);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), v9, &v44);
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530((uint64_t *)&v44);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (uint64_t)&v38);
    unint64_t v11 = v45;
    if (v45 && atomic_fetch_add_explicit((atomic_uint *volatile)v45 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v11 + 8))(v11);
    }
  }
  else
  {
    sub_216D16CFC((uint64_t)&v38, (uint64_t *)(v5 + 8), (_DWORD *)(v5 + 16));
  }
  sub_216D36868((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v38, &v43);
  long long __p = &unk_26C767A08;
  if (v36
    && (*(unsigned char *)(v36 + 57) & 8) == 0
    && (pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&__p) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ResolveCompleteMembershipExpression((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&__p);
  }
  else
  {
    uint64_t v44 = "usd/collectionAPI.cpp";
    char v45 = "operator()";
    uint64_t v46 = 611;
    long long v47 = "auto pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ResolveCompleteMembershipExpression()::(anonymous cla"
          "ss)::operator()(const SdfPathExpression::ExpressionReference &) const";
    char v48 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (uint64_t)v33);
    if (v34 >= 0) {
      uint64_t v16 = v33;
    }
    else {
      uint64_t v16 = (void **)v33[0];
    }
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)v31, *(pxrInternal__aapl__pxrReserved__::SdfPathExpression **)a1);
    if (v32 >= 0) {
      uint64_t v17 = v31;
    }
    else {
      uint64_t v17 = (void **)v31[0];
    }
    uint64_t v18 = *(void *)(v5 + 24);
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    if ((v18 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v20 = (const char *)(v19 + 16);
      if (*(char *)(v19 + 39) < 0) {
        uint64_t v20 = *(const char **)v20;
      }
    }
    else
    {
      uint64_t v20 = "";
    }
    sub_216D0162C(*(void *)(a1 + 16), &v27);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, (uint64_t)v29);
    if (v30 >= 0) {
      int v24 = v29;
    }
    else {
      int v24 = (void **)v29[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v44, (pxrInternal__aapl__pxrReserved__ *)"No collection at path <%s> resolving references in expression '%s' from collection '%s' on prim <%s>; substituting empty expression",
      v23,
      v16,
      v17,
      v20,
      v24);
    if (v30 < 0) {
      operator delete(v29[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_21697C414(&v27);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)v19, 0xFFFFFFFE, memory_order_release);
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    uint64_t v26 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v25);
    sub_2169B70E4(a3, v26);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&__p);
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
  sub_21697C414(&v40);
  if (v39) {
    sub_216D16E0C(v39);
  }
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216D37220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45)
{
  uint64_t v46 = *(void *)(v45 - 112);
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D373D0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        sub_216D36ADC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_216D37468(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216D374C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_216D37524(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      int v7 = v4 - 32;
      uint64_t v8 = v4 - 32;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 32;
        (*v9)(v7);
        v6 -= 32;
        BOOL v10 = v7 == v2;
        int v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216D375E4(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  unint64_t v19 = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)sub_2168707F4(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  int v15 = v12;
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12[32 * v5];
  uint64_t v17 = v16;
  uint64_t v18 = &v12[32 * v11];
  *(void *)sub_216D36868(v16, a2, a3) = &unk_26C767A08;
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v17 + 32);
  sub_216D376F0(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216D3788C((uint64_t)&v15);
  return v13;
}

void sub_216D376DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D3788C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D376F0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216D37768((int)a1 + 16, a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216D37768(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        sub_216D377FC(a1, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(i + a7), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(i + a3)))
  {
    i -= 32;
  }
  return a6;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_216D377FC(int a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, a3);
  *(void *)uint64_t result = &unk_26C767760;
  uint64_t v5 = *((void *)a3 + 3);
  *((void *)result + 3) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)result + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)uint64_t result = &unk_26C767A08;
  return result;
}

uint64_t sub_216D3788C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 32);
    *(void *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216D378F8(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  unint64_t v19 = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)sub_2168707F4(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  int v15 = v12;
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12[32 * v5];
  uint64_t v17 = v16;
  uint64_t v18 = &v12[32 * v11];
  *(void *)sub_216D36868(v16, a2, a3) = &unk_26C767A08;
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v17 + 32);
  sub_216D376F0(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216D3788C((uint64_t)&v15);
  return v13;
}

void sub_216D379F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D3788C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D37A04(uint64_t a1)
{
  sub_216D369D0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *sub_216D37A40(atomic_ullong *a1)
{
  uint64_t result = sub_216D37A88();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType::~UsdCollectionMembershipQueryTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *sub_216D37A88()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType::UsdCollectionMembershipQueryTokens_StaticTokenType(v0);
  return v0;
}

void sub_216D37AB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D37ACC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_21678A04C(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    sub_216D37B44(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_216D37B2C(_Unwind_Exception *a1)
{
  sub_216D37A04(v1);
  _Unwind_Resume(a1);
}

void *sub_216D37B44(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(void *)a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 16;
  uint64_t v13 = operator new(0x20uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *uint64_t v13 = 0;
  v13[1] = v6;
  sub_216D374C0((uint64_t)(v13 + 2), a3);
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    void *v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  uint64_t v10 = (void *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216D37DC4((uint64_t)v23, 0);
  return v10;
}

void sub_216D37DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D37DC4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_216D37DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216D36A14((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_216D37E1C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_2169814FC((uint64_t **)a1, v4, a2, a2);
      a2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_216D37E84(_Unwind_Exception *a1)
{
  sub_216981EE8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216D37E9C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_216D35CF4(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_216D37EDC(_Unwind_Exception *a1)
{
  sub_216981EE8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *sub_216D37EF4(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = v6;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = v6 & (v7 - 1);
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(void *)a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_216AE5C30(a1, v6, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  unint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    *unint64_t v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  uint64_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216D37DC4((uint64_t)v21, 0);
  return v10;
}

void sub_216D3814C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D37DC4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_216D3816C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C767A60;
  return result;
}

void sub_216D381A4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C767A60;
}

BOOL sub_216D381CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v3) {
    unint64_t v3 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  return (*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) == (*((void *)v3 + 10) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_216D38224(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C767AD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D38264()
{
  return &unk_26C767AD0;
}

void *sub_216D38270(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_216D382FC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C767AF0;
  return result;
}

void sub_216D38334(uint64_t a1, void *a2)
{
  *a2 = &unk_26C767AF0;
}

BOOL sub_216D3835C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v3) {
    unint64_t v3 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  }
  return (*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) != (*((void *)v3 + 10) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_216D383B4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C767B50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D383F4()
{
  return &unk_26C767B50;
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType::~UsdCollectionMembershipQueryTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *this)
{
  unint64_t v3 = (void **)((char *)this + 16);
  sub_216889A04(&v3);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType::UsdCollectionMembershipQueryTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "IncludedByMembershipExpression", 0)
                      + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "ExcludedByMembershipExpression", 0);
  unint64_t v3 = *this;
  float v13 = v3;
  if ((v3 & 7) != 0)
  {
    unint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      float v13 = v4;
    }
  }
  uint64_t v5 = *v2;
  BOOL v14 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      BOOL v14 = v6;
    }
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  unint64_t v7 = (atomic_uint *)operator new(0x10uLL);
  unint64_t v8 = 0;
  this[2] = v7;
  this[3] = v7;
  this[4] = v7 + 4;
  do
  {
    uint64_t v9 = (&v13)[v8 / 2];
    *(void *)&v7[v8] = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v7[v8] &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 += 2;
  }
  while (v8 != 4);
  this[3] = v7 + 4;
  for (uint64_t i = 1; i != -1; --i)
  {
    unint64_t v11 = (&v13)[i];
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *)this;
}

void sub_216D385DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

pxrInternal__aapl__pxrReserved__ *pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator::UsdObjectCollectionExpressionEvaluator(pxrInternal__aapl__pxrReserved__ *a1, void *a2, pxrInternal__aapl__pxrReserved__::SdfPathExpression *a3)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  uint64_t CollectionPredicateLibrary = pxrInternal__aapl__pxrReserved__::UsdGetCollectionPredicateLibrary(a1);
  sub_216D386C4(a3, CollectionPredicateLibrary, (uint64_t)a1 + 16);
  return a1;
}

void sub_216D386AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324248(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D386C4(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v6[0] = a3;
  v6[1] = a2;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_MakePathExpressionEvalImpl((char *)a3, this, (uint64_t)v6, (void (*)(uint64_t, uint64_t))sub_216D3C23C))
  {
    unint64_t v4 = *(void **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v4;
      operator delete(v4);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_216D36A6C((void **)(a3 + 24));
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    memset(v5, 0, sizeof(v5));
    unint64_t v7 = (void **)v5;
    sub_216D373D0(&v7);
  }
}

void sub_216D38788(_Unwind_Exception *a1)
{
  sub_216D3C1F0(v1);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator::Match(pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v5 = sub_216D24140(this);
  if (!(v6 & 1 | (unint64_t)v5)) {
    return 0;
  }
  unint64_t v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530((uint64_t *)this);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v7, a2, (uint64_t)v17);
  int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v17, v8);
  char v10 = IsDefined;
  if (IsDefined)
  {
    uint64_t v11 = *((void *)this + 1);
    uint64_t v14 = *(void *)this;
    uint64_t v15 = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 1u, memory_order_relaxed);
    }
    unint64_t v2 = sub_216D388E8((uint64_t)this + 16, (uint64_t)v17, (uint64_t)&v16, (uint64_t)&v14);
    uint64_t v12 = v15;
    if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (v18) {
    sub_216D16E0C(v18);
  }
  if ((v10 & 1) == 0) {
    return 0;
  }
  return v2;
}

void sub_216D388BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a4) {
    sub_217324208(a4);
  }
  sub_216D38940((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_216D388E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 24) == *(void *)(a1 + 32)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  v5[0] = &v6;
  v5[1] = a2;
  void v5[2] = a3;
  void v5[3] = a4;
  return pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_EvalExpr((int **)a1, (uint64_t)v5, (uint64_t (*)(uint64_t, uint64_t))sub_216D3DA44);
}

uint64_t sub_216D38940(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator::Match(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = sub_216D24140(a1);
  if (!(v5 & 1 | (unint64_t)v4)) {
    return 0;
  }
  uint64_t v6 = a1[1];
  uint64_t v10 = *a1;
  uint64_t v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  unint64_t v7 = sub_216D388E8((uint64_t)(a1 + 2), a2, (uint64_t)&v12, (uint64_t)&v10);
  uint64_t v8 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return v7;
}

void sub_216D38A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    sub_217324208(a11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator::MakeIncrementalSearcher@<X0>(pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = (unint64_t)sub_216D24140(this);
  if (v5 & 1 | result)
  {
    uint64_t v7 = *(void *)this;
    uint64_t v6 = *((void *)this + 1);
    if (v6) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
    }
    *(void *)a2 = (char *)this + 16;
    unint64_t result = (unint64_t)sub_216D3DBAC((void *)(a2 + 8), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3));
    *(void *)(a2 + 40) = v7;
    *(void *)(a2 + 48) = v6;
  }
  else
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
  }
  *(_DWORD *)(a2 + 56) = 0;
  return result;
}

void sub_216D38AFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324248(v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdComputeIncludedObjectsFromCollection(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)a4 = a4 + 8;
  sub_216D38B64(a1, a2, a3, (uint64_t **)a4, 0);
}

void sub_216D38B4C(_Unwind_Exception *a1)
{
  sub_216D3C194(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_216D38B64(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  if ((a4 != 0) == (a5 != 0))
  {
    long long v69 = (int **)"usd/collectionMembershipQuery.cpp";
    uint64_t v70 = "_ComputeIncludedImpl";
    uint64_t v71 = 56;
    unint64_t v72 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ComputeIncludedImpl(const Usd"
                            "CollectionMembershipQuery &, const UsdStageWeakPtr &, const Usd_PrimFlagsPredicate &, std::s"
                            "et<UsdObject> *, SdfPathSet *)";
    char v73 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v69, 1, (pxrInternal__aapl__pxrReserved__ *)"Either includedObjects or includedPaths must be valid, but not both");
  }
  v87[0] = 0;
  v87[1] = 0;
  int v57 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v7 = a2[1];
  uint64_t v84 = *a2;
  uint64_t v85 = v7;
  float64x2_t v86 = v87;
  if (v7) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
  }
  char v82 = v57;
  sub_216D37ACC((uint64_t)v83, a1 + 8);
  for (uint64_t i = *(void **)(a1 + 24); i; uint64_t i = (void *)*i)
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v9) {
      uint64_t v9 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    if ((i[3] & 0xFFFFFFFFFFFFFFF8) == (*((void *)v9 + 10) & 0xFFFFFFFFFFFFFFF8)) {
      continue;
    }
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v10) {
      uint64_t v10 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    if ((i[3] & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 13) & 0xFFFFFFFFFFFFFFF8))
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2)))
      {
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a2);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2), (uint64_t)&v69);
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v69, v15)&& pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::operator()(a3, (pxrInternal__aapl__pxrReserved__::UsdProperty *)&v69))
        {
          if (a4)
          {
            sub_216D3B1B0(a4, (uint64_t)&v69, (uint64_t)&v69);
          }
          else if (a5)
          {
            sub_216D0162C((uint64_t)&v69, (int *)&v64);
            sub_216D3B53C(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v64, &v64);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
            sub_21697C414(&v64);
          }
        }
        if ((v72 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2)))
        {
          long long v69 = (int **)"usd/collectionMembershipQuery.cpp";
          uint64_t v70 = "_ComputeIncludedImpl";
          uint64_t v71 = 118;
          unint64_t v72 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ComputeIncludedImpl(con"
                                  "st UsdCollectionMembershipQuery &, const UsdStageWeakPtr &, const Usd_PrimFlagsPredica"
                                  "te &, std::set<UsdObject> *, SdfPathSet *)";
          char v73 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v69, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown path type in membership-map.");
          continue;
        }
        sub_216D3AC3C(&v84, (pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2), (uint64_t)&v69);
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v69, v32))
        {
          sub_216D3B5F8((uint64_t)&v64, (int)v69, (uint64_t *)&v70, &v71, (uint64_t *)&v72);
          if (a4)
          {
            sub_216D3B1B0(a4, (uint64_t)&v64, (uint64_t)&v64);
          }
          else if (a5)
          {
            sub_216D0162C((uint64_t)&v64, (int *)&v78);
            sub_216D3B53C(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v78, &v78);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v78 + 1);
            sub_21697C414(&v78);
          }
          if ((v68 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
          sub_21697C414(&v66);
          if (v65) {
            sub_216D16E0C(v65);
          }
        }
        if ((v72 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
    }
    else
    {
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v11) {
        uint64_t v11 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      if ((i[3] & 0xFFFFFFFFFFFFFFF8) != (*((void *)v11 + 11) & 0xFFFFFFFFFFFFFFF8))
      {
        char v12 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v12) {
          char v12 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        }
        if ((i[3] & 0xFFFFFFFFFFFFFFF8) != (*((void *)v12 + 12) & 0xFFFFFFFFFFFFFFF8)) {
          continue;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2)))
      {
        char v16 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a2);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2), (uint64_t)&v64);
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v64, v17))
        {
          sub_216D3B730((uint64_t)&v69, (uint64_t)&v64, a3);
          sub_216D3ADBC((uint64_t *)&v69, (uint64_t)&v78);
          while (1)
          {
            *(void *)&long long v75 = v70;
            *((void *)&v75 + 1) = &v69;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v76);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v76 + 1);
            LODWORD(v77) = 0;
            WORD2(v77) = 0;
            if (v78 == v75)
            {
              BOOL v18 = 1;
              if (v79 == v76 && !v80 && !(_BYTE)v81) {
                BOOL v18 = HIBYTE(v81) != 0;
              }
            }
            else
            {
              BOOL v18 = 1;
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v76 + 1);
            sub_21697C414(&v76);
            if (!v18) {
              break;
            }
            sub_216D3AE90((uint64_t)&v78, (uint64_t)&v75);
            if (v57
              && (sub_216D0162C((uint64_t)&v75, (int *)&v92),
                  char v19 = sub_216D33DE4(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v92, 0),
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v92 + 1),
                  sub_21697C414(&v92),
                  v19 != 1))
            {
              pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v78);
            }
            else
            {
              uint64_t v20 = sub_216D3B5F8((uint64_t)&v92, v75, (uint64_t *)&v75 + 1, &v76, &v77);
              if (a4)
              {
                sub_216D3B1B0(a4, (uint64_t)&v92, (uint64_t)&v92);
              }
              else if (a5)
              {
                sub_216D0162C(v20, (int *)&v89);
                sub_216D3B53C(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v89, &v89);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v89 + 1);
                sub_21697C414(&v89);
              }
              if ((v94 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
              sub_21697C414(&v93);
              if (*((void *)&v92 + 1)) {
                sub_216D16E0C(*((atomic_ullong **)&v92 + 1));
              }
              uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
              if (!v21) {
                uint64_t v21 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
              }
              if ((i[3] & 0xFFFFFFFFFFFFFFF8) == (*((void *)v21 + 12) & 0xFFFFFFFFFFFFFFF8))
              {
                if (a4)
                {
                  uint64_t v94 = 0;
                  pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties((uint64_t)&v75, (uint64_t)&v92, (uint64_t *)&v89);
                  sub_216D3BB5C(&v92);
                  uint64_t v23 = *((void *)&v89 + 1);
                  for (uint64_t j = v89; j != v23; j += 32)
                  {
                    sub_216D0162C(j, (int *)&v92);
                    if (v82)
                    {
                      char v24 = sub_216A9DB14(v83, (unsigned int *)&v92);
                      if (v24)
                      {
                        uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
                        if (!v25) {
                          uint64_t v25 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
                        }
                        LOBYTE(v24) = (v24[3] & 0xFFFFFFFFFFFFFFF8) == (*((void *)v25 + 10) & 0xFFFFFFFFFFFFFFF8);
                      }
                    }
                    else
                    {
                      LOBYTE(v24) = 0;
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v92 + 1);
                    uint64_t v26 = sub_21697C414(&v92);
                    if ((v24 & 1) == 0)
                    {
                      sub_216D3B5F8((uint64_t)v26, *(_DWORD *)j, (uint64_t *)(j + 8), (_DWORD *)(j + 16), (uint64_t *)(j + 24));
                      sub_216D3B1B0(a4, (uint64_t)&v92, (uint64_t)&v92);
                      if ((v94 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
                      sub_21697C414(&v93);
                      if (*((void *)&v92 + 1)) {
                        sub_216D16E0C(*((atomic_ullong **)&v92 + 1));
                      }
                    }
                  }
                  *(void *)&long long v92 = &v89;
                  sub_216D3BBE0((void ***)&v92);
                }
                else
                {
                  uint64_t v94 = 0;
                  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyNames((uint64_t)&v75, (uint64_t)&v92, &v89);
                  int v27 = (void ***)sub_216D3BB5C(&v92);
                  uint64_t v29 = (const pxrInternal__aapl__pxrReserved__::TfToken *)*((void *)&v89 + 1);
                  for (k = (const pxrInternal__aapl__pxrReserved__::TfToken *)v89;
                        k != v29;
                        k = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)k + 8))
                  {
                    sub_216D0162C((uint64_t)&v75, (int *)&v59);
                    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, k, (int *)&v92);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
                    sub_21697C414(&v59);
                    if (!v82) {
                      goto LABEL_73;
                    }
                    char v30 = sub_216A9DB14(v83, (unsigned int *)&v92);
                    if (!v30) {
                      goto LABEL_73;
                    }
                    char v31 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
                    if (!v31) {
                      char v31 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
                    }
                    if ((v30[3] & 0xFFFFFFFFFFFFFFF8) != (*((void *)v31 + 10) & 0xFFFFFFFFFFFFFFF8)) {
LABEL_73:
                    }
                      sub_216A5CF30(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v92, &v92);
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v92 + 1);
                    int v27 = (void ***)sub_21697C414(&v92);
                  }
                  *(void *)&long long v92 = &v89;
                  sub_216889A04(v27);
                }
              }
            }
            if ((v77 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v76 + 1);
            sub_21697C414(&v76);
            if (*((void *)&v75 + 1)) {
              sub_216D16E0C(*((atomic_ullong **)&v75 + 1));
            }
            pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v78);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v79 + 1);
          sub_21697C414(&v79);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v71 + 1);
          sub_21697C414(&v71);
        }
        if ((v68 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
        sub_21697C414(&v66);
        long long v33 = v65;
        if (!v65) {
          continue;
        }
LABEL_114:
        sub_216D16E0C(v33);
        continue;
      }
      sub_216D3AC3C(&v84, (pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2), (uint64_t)&v69);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v69, v13))
      {
        sub_216D3B5F8((uint64_t)&v64, (int)v69, (uint64_t *)&v70, &v71, (uint64_t *)&v72);
        if (a4)
        {
          sub_216D3B1B0(a4, (uint64_t)&v64, (uint64_t)&v64);
        }
        else if (a5)
        {
          sub_216D0162C((uint64_t)&v64, (int *)&v78);
          sub_216D3B53C(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v78, &v78);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v78 + 1);
          sub_21697C414(&v78);
        }
        if ((v68 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
        sub_21697C414(&v66);
        if (v65) {
          sub_216D16E0C(v65);
        }
      }
      if ((v72 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v71 + 1);
    sub_21697C414(&v71);
    long long v33 = (atomic_ullong *)v70;
    if (v70) {
      goto LABEL_114;
    }
  }
  uint64_t v34 = *(void *)a1;
  if ((*(void *)a1 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v54 = v34;
  uint64_t v35 = sub_216D24140((void *)(a1 + 80));
  if (v36 & 1 | (unint64_t)v35 && *(void *)(a1 + 120) != *(void *)(a1 + 128))
  {
    char v37 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v37) {
      char v37 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    unint64_t v38 = v54 & 0xFFFFFFFFFFFFFFF8;
    if ((v54 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v37 + 11) & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_133;
    }
    std::type_info v39 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v39) {
      std::type_info v39 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    if (v38 == (*((void *)v39 + 12) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_133:
      int v41 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v41) {
        int v41 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      uint64_t v42 = *((void *)v41 + 12);
      pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator::MakeIncrementalSearcher((pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator *)(a1 + 80), (uint64_t)&v69);
      uint64_t v43 = sub_216D01530(a2);
      pxrInternal__aapl__pxrReserved__::UsdStage::Traverse(v43, a3, (uint64_t)&v64);
      sub_216D3ADBC((uint64_t *)&v64, (uint64_t)&v78);
      unint64_t v44 = v42 & 0xFFFFFFFFFFFFFFF8;
      *(void *)&long long v75 = v65;
      *((void *)&v75 + 1) = &v64;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v76);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v76 + 1);
      LODWORD(v77) = 0;
      WORD2(v77) = 0;
      while (1)
      {
        if (v78 == v75
          && v79 == v76
          && v80 == v77
          && v81 == BYTE4(v77)
          && HIBYTE(v81) == BYTE5(v77))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v76 + 1);
          sub_21697C414(&v76);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v79 + 1);
          sub_21697C414(&v79);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
          sub_21697C414(&v66);
          uint64_t v52 = v74;
          if (v74 && atomic_fetch_add_explicit((atomic_uint *volatile)(v74 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
          }
          long long v64 = &v70;
          sub_216D3C0E8((void ***)&v64);
          break;
        }
        sub_216D3AE90((uint64_t)&v78, (uint64_t)&v92);
        unint64_t v45 = sub_216D3AF3C(&v69, (uint64_t)&v92);
        if ((v94 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
        sub_21697C414(&v93);
        if (*((void *)&v92 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v92 + 1));
        }
        unint64_t v46 = HIDWORD(v45);
        if ((_BYTE)v45)
        {
          if (HIDWORD(v45))
          {
            sub_216D3AE90((uint64_t)&v78, (uint64_t)&v92);
            if (a4)
            {
              sub_216D3B1B0(a4, (uint64_t)&v92, (uint64_t)&v92);
            }
            else if (a5)
            {
              sub_216D0162C((uint64_t)&v92, (int *)&v89);
              sub_216D3B53C(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v89, &v89);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v89 + 1);
              sub_21697C414(&v89);
            }
            if ((v94 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
            sub_21697C414(&v93);
            if (*((void *)&v92 + 1)) {
              sub_216D16E0C(*((atomic_ullong **)&v92 + 1));
            }
            goto LABEL_202;
          }
          long long v92 = v78;
          sub_216981010(&v93, &v79);
          sub_21698105C((_DWORD *)&v93 + 1, (_DWORD *)&v79 + 1);
          LODWORD(v94) = v80;
          WORD2(v94) = v81;
          long long v89 = v92;
          sub_216981010(&v90, &v93);
          sub_21698105C((_DWORD *)&v90 + 1, (_DWORD *)&v93 + 1);
          LODWORD(v91) = v94;
          WORD2(v91) = WORD2(v94);
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v89);
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v89);
          char v47 = 0;
          while (v92 != v89
               || v93 != v90
               || v94 != v91
               || BYTE4(v94) != BYTE4(v91)
               || BYTE5(v94) != BYTE5(v91))
          {
            sub_216D3AE90((uint64_t)&v92, (uint64_t)&v59);
            if (a4)
            {
              sub_216D3B1B0(a4, (uint64_t)&v59, (uint64_t)&v59);
            }
            else if (a5)
            {
              sub_216D0162C((uint64_t)&v59, (int *)v88);
              sub_216D3B53C(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)v88, v88);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v88 + 1);
              sub_21697C414(v88);
            }
            if ((v63 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
            sub_21697C414(&v61);
            if (v60) {
              sub_216D16E0C(v60);
            }
            if (v38 == v44)
            {
              sub_216D3B00C((uint64_t)&v92, (uint64_t)&v59);
              v88[3] = 0;
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties((uint64_t)&v59, (uint64_t)v88, v58);
              sub_216D3BB5C(v88);
              if ((v63 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
              sub_21697C414(&v61);
              if (v60) {
                sub_216D16E0C(v60);
              }
              uint64_t v48 = v58[0];
              uint64_t v49 = v58[1];
              while (v48 != v49)
              {
                if (a4)
                {
                  sub_216D3B1B0(a4, v48, v48);
                }
                else if (a5)
                {
                  sub_216D0162C(v48, (int *)v88);
                  sub_216D3B53C(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)v88, v88);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v88 + 1);
                  sub_21697C414(v88);
                }
                v48 += 32;
              }
              long long v59 = (void **)v58;
              sub_216D3BBE0(&v59);
              char v47 = 1;
              LODWORD(v46) = 0;
            }
            pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v92);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v90 + 1);
          sub_21697C414(&v90);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
          sub_21697C414(&v93);
          if (v38 == v44 && (v47 & 1) == 0)
          {
LABEL_181:
            sub_216D3B00C((uint64_t)&v78, (uint64_t)&v92);
            uint64_t v91 = 0;
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties((uint64_t)&v92, (uint64_t)&v89, (uint64_t *)&v59);
            sub_216D3BB5C(&v89);
            if ((v94 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
            sub_21697C414(&v93);
            if (*((void *)&v92 + 1)) {
              sub_216D16E0C(*((atomic_ullong **)&v92 + 1));
            }
            long long v50 = v59;
            int v51 = v60;
            while (v50 != (void **)v51)
            {
              if (sub_216D3AF3C(&v69, (uint64_t)v50))
              {
                if (a4)
                {
                  sub_216D3B1B0(a4, (uint64_t)v50, (uint64_t)v50);
                }
                else if (a5)
                {
                  sub_216D0162C((uint64_t)v50, (int *)&v89);
                  sub_216D3B53C(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v89, &v89);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v89 + 1);
                  sub_21697C414(&v89);
                }
              }
              v50 += 4;
            }
            *(void *)&long long v92 = &v59;
            sub_216D3BBE0((void ***)&v92);
          }
        }
        else if (v38 == v44)
        {
          goto LABEL_181;
        }
        if (!v46) {
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v78);
        }
LABEL_202:
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v78);
      }
    }
  }
  if ((v54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D37A04((uint64_t)v83);
  uint64_t v40 = v85;
  if (v85 && atomic_fetch_add_explicit((atomic_uint *volatile)(v85 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  sub_216D3C194((uint64_t)&v86, v87[0]);
}

void sub_216D39CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if ((a18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D37A04(a29);
  char v31 = *(atomic_uint **)(v29 - 240);
  if (v31)
  {
    if (atomic_fetch_add_explicit(v31 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v31 + 8))(v31);
    }
  }
  sub_216D3C194(v29 - 232, *(void **)(v29 - 224));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdComputeIncludedPathsFromCollection(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)a4 = a4 + 8;
  sub_216D38B64(a1, a2, a3, 0, (uint64_t **)a4);
}

void sub_216D3A0E0(_Unwind_Exception *a1)
{
  sub_216981EE8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_216D37ACC((uint64_t)v8, a2);
  sub_216D37E9C(v7, a3);
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(a1, v8, v7, &v6);
  sub_216981EE8((uint64_t)v7, (void *)v7[1]);
  sub_216D37A04((uint64_t)v8);
  return a1;
}

{
  uint64_t v6;
  uint64_t v7[3];
  uint64_t v8[5];

  sub_216D37ACC((uint64_t)v8, a2);
  sub_216D37E9C(v7, a3);
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(a1, v8, v7, &v6);
  sub_216981EE8((uint64_t)v7, (void *)v7[1]);
  sub_216D37A04((uint64_t)v8);
  return a1;
}

void sub_216D3A168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  sub_216981EE8((uint64_t)va, v6);
  sub_216D37A04((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  *(void *)a1 = *a4;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2168C06A4(a1 + 8, a2);
  *(void *)(a1 + 48) = *a3;
  uint64_t v7 = a3 + 1;
  uint64_t v8 = a3[1];
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = a1 + 56;
  uint64_t v10 = a3[2];
  *(void *)(a1 + 64) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *a3 = v7;
    *uint64_t v7 = 0;
    a3[2] = 0;
  }
  else
  {
    *(void *)(a1 + 48) = v9;
  }
  *(unsigned char *)(a1 + 72) = 0;
  uint64_t v11 = (void *)(a1 + 24);
  while (1)
  {
    uint64_t v11 = (void *)*v11;
    if (!v11) {
      break;
    }
    char v12 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v12) {
      char v12 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    if ((v11[3] & 0xFFFFFFFFFFFFFFF8) == (*((void *)v12 + 10) & 0xFFFFFFFFFFFFFFF8))
    {
      *(unsigned char *)(a1 + 72) = 1;
      return a1;
    }
  }
  return a1;
}

void sub_216D3A28C(_Unwind_Exception *a1)
{
  sub_216981EE8(v3, *(void **)(v1 + 56));
  sub_216D37A04(v2);
  if ((*(void *)v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216D3A334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  sub_216981EE8((uint64_t)va, v6);
  sub_216D37A04((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = 0;
  return pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(a1, a2, a3, &v4);
}

{
  uint64_t v4;

  uint64_t v4 = 0;
  return pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(a1, a2, a3, &v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_216D37ACC((uint64_t)v9, a2);
  sub_216D37E9C(v8, a3);
  pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(a1, v9, v8, a4);
  sub_216981EE8((uint64_t)v8, (void *)v8[1]);
  sub_216D37A04((uint64_t)v9);
  return a1;
}

{
  uint64_t v8[3];
  uint64_t v9[5];

  sub_216D37ACC((uint64_t)v9, a2);
  sub_216D37E9C(v8, a3);
  pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(a1, v9, v8, a4);
  sub_216981EE8((uint64_t)v8, (void *)v8[1]);
  sub_216D37A04((uint64_t)v9);
  return a1;
}

void sub_216D3A428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12)
{
}

void sub_216D3A4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12)
{
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_IsPathIncludedByRuleMap(pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    v32[0] = "usd/collectionMembershipQuery.cpp";
    v32[1] = "_IsPathIncludedByRuleMap";
    v32[2] = 371;
    v32[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_IsPathIncludedByRuleMap(const Sd"
             "fPath &, TfToken *) const";
    char v33 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Relative paths are not allowed");
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a2)
    && !pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2))
  {
    return 0;
  }
  uint64_t v7 = (void *)((char *)this + 8);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a2))
  {
    sub_216981010(v32, a2);
    for (uint64_t i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21698105C((_DWORD *)v32 + 1, (_DWORD *)a2 + 1);
          ;
          uint64_t i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21697C414(&v30))
    {
      char v19 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(i);
      uint64_t v10 = v32[0];
      uint64_t v11 = *v19;
      if (v32[0] == *v19) {
        goto LABEL_47;
      }
      uint64_t v20 = sub_216A9DB14(v7, (unsigned int *)v32);
      if (v20)
      {
        uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v21) {
          uint64_t v21 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        }
        uint64_t v23 = v20[3];
        uint64_t v22 = v20 + 3;
        unint64_t v24 = *((void *)v21 + 10) & 0xFFFFFFFFFFFFFFF8;
        BOOL v3 = (v23 & 0xFFFFFFFFFFFFFFF8) != v24;
        if ((v23 & 0xFFFFFFFFFFFFFFF8) == v24)
        {
          if (!a3)
          {
            BOOL v3 = 0;
            goto LABEL_47;
          }
          int v27 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v27) {
            int v27 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          }
          uint64_t v22 = (void *)((char *)v27 + 80);
LABEL_39:
          sub_2168D2318(a3, v22);
          goto LABEL_47;
        }
        uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v25) {
          uint64_t v25 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        }
        if ((*v22 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v25 + 12) & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_33;
        }
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v26) {
          uint64_t v26 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        }
        if ((*v22 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v26 + 13) & 0xFFFFFFFFFFFFFFF8) && v32[0] == *(void *)a2)
        {
LABEL_33:
          if (!a3)
          {
            BOOL v3 = 1;
            goto LABEL_47;
          }
          goto LABEL_39;
        }
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v32, &v30);
      sub_21697DE94((int *)v32, &v30);
      sub_21697DEEC((int *)v32 + 1, &v31);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    }
  }
  sub_216981010(v32, a2);
  for (uint64_t j = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21698105C((_DWORD *)v32 + 1, (_DWORD *)a2 + 1);
        ;
        uint64_t j = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21697C414(&v30))
  {
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(j);
    uint64_t v10 = v32[0];
    uint64_t v11 = *v9;
    if (v32[0] == *v9) {
      goto LABEL_47;
    }
    char v12 = sub_216A9DB14(v7, (unsigned int *)v32);
    if (!v12) {
      goto LABEL_15;
    }
    float v13 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v13) {
      float v13 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    uint64_t v15 = v12[3];
    uint64_t v14 = v12 + 3;
    unint64_t v16 = *((void *)v13 + 10) & 0xFFFFFFFFFFFFFFF8;
    BOOL v3 = (v15 & 0xFFFFFFFFFFFFFFF8) != v16;
    if ((v15 & 0xFFFFFFFFFFFFFFF8) == v16) {
      break;
    }
    size_t v17 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v17) {
      size_t v17 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    if ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v17 + 13) & 0xFFFFFFFFFFFFFFF8) || v32[0] == *(void *)a2)
    {
      if (!a3)
      {
        BOOL v3 = 1;
        goto LABEL_47;
      }
      goto LABEL_44;
    }
LABEL_15:
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v32, &v30);
    sub_21697DE94((int *)v32, &v30);
    sub_21697DEEC((int *)v32 + 1, &v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
  }
  if (a3)
  {
    int v28 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v28) {
      int v28 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    uint64_t v14 = (void *)((char *)v28 + 80);
LABEL_44:
    sub_2168D2318(a3, v14);
    goto LABEL_47;
  }
  BOOL v3 = 0;
LABEL_47:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v32 + 1);
  sub_21697C414(v32);
  if (v10 == v11) {
    return 0;
  }
  return v3;
}

void sub_216D3A87C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_IsPathIncludedByRuleMap(pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    v24[0] = "usd/collectionMembershipQuery.cpp";
    v24[1] = "_IsPathIncludedByRuleMap";
    void v24[2] = 431;
    void v24[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_IsPathIncludedByRuleMap(const Sd"
             "fPath &, const TfToken &, TfToken *) const";
    char v25 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v24, 1, (pxrInternal__aapl__pxrReserved__ *)"Relative paths are not allowed");
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a2)
    || (uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2), result))
  {
    uint64_t v9 = sub_216A9DB14((void *)this + 1, (unsigned int *)a2);
    if (v9)
    {
      uint64_t v10 = v9;
      if (a4) {
        sub_2168D2318(a4, v9 + 3);
      }
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v11) {
        uint64_t v11 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      return (v10[3] & 0xFFFFFFFFFFFFFFF8) != (*((void *)v11 + 10) & 0xFFFFFFFFFFFFFFF8);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a2))
    {
      char v12 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v12) {
        char v12 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v12 + 10) & 0xFFFFFFFFFFFFFFF8))
      {
        if (!a4)
        {
          BOOL v16 = 1;
          return !v16;
        }
      }
      else
      {
        float v13 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v13) {
          float v13 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        }
        unint64_t v14 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v15 = *((void *)v13 + 13) & 0xFFFFFFFFFFFFFFF8;
        BOOL v16 = v14 == v15;
        if (!a4) {
          return !v16;
        }
        if (v14 != v15)
        {
          BOOL v16 = 0;
LABEL_32:
          sub_2168D2318(a4, a3);
          return !v16;
        }
      }
      uint64_t v22 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v22) {
        uint64_t v22 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      a3 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v22 + 80);
      BOOL v16 = 1;
      goto LABEL_32;
    }
    if (a4)
    {
      size_t v17 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v17) {
        size_t v17 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      unint64_t v18 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v19 = *((void *)v17 + 12) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (v18 == v19)
      {
        if (!v20) {
          uint64_t v20 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        }
        uint64_t v21 = (void *)((char *)v20 + 96);
      }
      else
      {
        if (!v20) {
          uint64_t v20 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        }
        uint64_t v21 = (void *)((char *)v20 + 80);
      }
      sub_2168D2318(a4, v21);
    }
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v23) {
      uint64_t v23 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    }
    return (*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v23 + 12) & 0xFFFFFFFFFFFFFFF8);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_HasEmptyRuleMap(pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase *this)
{
  return *((void *)this + 4) == 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_Hash::operator()(uint64_t a1, void *a2)
{
  BOOL v3 = (void *)a2[3];
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  unint64_t v4 = 0;
  if (v3)
  {
    char v5 = v3;
    do
    {
      ++v4;
      char v5 = (void *)*v5;
    }
    while (v5);
  }
  sub_216D3DC34(&v10, v3, 0, v4);
  unint64_t v6 = 126 - 2 * __clz((v11 - v10) >> 4);
  if (v11 == v10) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  sub_216D3DEC8((uint64_t)v10, v11, (uint64_t)&v13, v7, 1);
  float v13 = 0;
  char v14 = 0;
  sub_216D3F6CC((uint64_t)&v13, (uint64_t *)&v10, a2);
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * (void)v13);
  float v13 = &v10;
  sub_216D3DE30((void ***)&v13);
  return v8;
}

void sub_216D3AC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216D3DE30((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216D3AC3C(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v10);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (uint64_t)v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v12, v6);
  char v8 = IsDefined;
  if (IsDefined)
  {
    NameToken = (atomic_uint **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, NameToken, a3);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
  if ((v8 & 1) == 0)
  {
    *(_DWORD *)a3 = 2;
    *(void *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(void *)(a3 + 24) = 0;
  }
}

void sub_216D3AD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D3AD60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  BOOL v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

_DWORD *sub_216D3ADBC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  sub_216981010(&v7, (_DWORD *)a1 + 4);
  sub_21698105C(&v8, (_DWORD *)a1 + 5);
  int v5 = *((_DWORD *)a1 + 12);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = a1;
  sub_216981010((_DWORD *)(a2 + 16), &v7);
  sub_21698105C((_DWORD *)(a2 + 20), &v8);
  *(_DWORD *)(a2 + 24) = v5;
  *(_WORD *)(a2 + 28) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_21697C414(&v7);
}

uint64_t sub_216D3AE58(uint64_t a1)
{
  return a1;
}

void sub_216D3AE90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(atomic_ullong **)a1;
  int v5 = v4;
  if (v4) {
    atomic_fetch_add_explicit(v4 + 6, 1uLL, memory_order_relaxed);
  }
  sub_216D16CFC(a2, (uint64_t *)&v5, (_DWORD *)(a1 + 16));
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216D3AEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *a10)
{
  if (a10) {
    sub_216D16E0C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D3AF04(uint64_t a1)
{
  return a1;
}

unint64_t sub_216D3AF3C(int ***a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  int v11 = (*a1)[3];
  int v10 = v4;
  sub_216D0162C(a2, (int *)v8);
  int PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v8 + 1);
  sub_21697C414(v8);
  if (*((_DWORD *)a1 + 14) >= PathElementCount) {
    int v6 = PathElementCount;
  }
  else {
    int v6 = 0;
  }
  int v9 = v6;
  v8[0] = &v9;
  v8[1] = &v10;
  uint64_t v8[2] = &v11;
  uint64_t v8[3] = a2;
  void v8[4] = a1;
  *((_DWORD *)a1 + 14) = PathElementCount;
  return pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_EvalExpr(*a1, (uint64_t)v8, (uint64_t (*)(uint64_t, uint64_t))sub_216D3BCE8);
}

void sub_216D3AFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

void sub_216D3B00C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v8 = *(atomic_ullong **)a1;
  if (v8) {
    atomic_fetch_add_explicit(v8 + 6, 1uLL, memory_order_relaxed);
  }
  sub_216D16CFC((uint64_t)v3, (uint64_t *)&v8, (_DWORD *)(a1 + 16));
  if (v8) {
    sub_216D16E0C(v8);
  }
  sub_216D3C05C(a2, (uint64_t)v3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
}

void sub_216D3B0B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D3B0D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  BOOL v3 = *(atomic_ullong **)(a1 + 8);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

uint64_t sub_216D3B134(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 48);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v4 = (void **)(a1 + 8);
  sub_216D3C0E8(&v4);
  return a1;
}

uint64_t *sub_216D3B1B0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  int v5 = (uint64_t **)sub_216D3B244((uint64_t)a1, &v10, a2);
  int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    sub_216D3B2D8((uint64_t)a1, a3, (uint64_t)v9);
    sub_21677B358(a1, v10, v7, v9[0]);
    int v6 = v9[0];
    v9[0] = 0;
    sub_216D3B474((uint64_t)v9, 0);
  }
  return v6;
}

void *sub_216D3B244(uint64_t a1, void *a2, uint64_t a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!sub_216D3B348(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        int v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_216D3B348(v8, a3)) {
        break;
      }
      int v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_DWORD *sub_216D3B2D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_216D3B3EC(v5, (uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216D3B330(_Unwind_Exception *a1)
{
  sub_216D3B474(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216D3B348(uint64_t a1, uint64_t a2)
{
  sub_216D0162C(a1, &v7);
  sub_216D0162C(a2, &v5);
  uint64_t v3 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  return v3;
}

void sub_216D3B3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
}

_DWORD *sub_216D3B3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a2 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  uint64_t result = sub_21698105C((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
  uint64_t v7 = *(void *)(a3 + 24);
  *(void *)(a2 + 24) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a2 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void sub_216D3B474(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216D3B4CC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_216D3B4CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  if (v3)
  {
    sub_216D16E0C(v3);
  }
}

uint64_t *sub_216D3B53C(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  uint64_t v5 = (void **)sub_216981754((uint64_t)a1, &v11, a2);
  int v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    int v6 = (uint64_t *)operator new(0x28uLL);
    v9[1] = a1 + 1;
    sub_21697D878((_DWORD *)v6 + 7, a3);
    sub_21697D8B4((_DWORD *)v6 + 8, a3 + 1);
    char v10 = 1;
    sub_21677B358(a1, v11, v7, v6);
    v9[0] = 0;
    sub_216981880((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_216D3B5F8(uint64_t a1, int a2, uint64_t *a3, _DWORD *a4, uint64_t *a5)
{
  *(_DWORD *)a1 = a2;
  uint64_t v8 = *a3;
  *(void *)(a1 + 8) = *a3;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 48), 1uLL, memory_order_relaxed);
  }
  int v9 = (void *)(a1 + 16);
  sub_216981010((_DWORD *)(a1 + 16), a4);
  sub_21698105C((_DWORD *)(a1 + 20), a4 + 1);
  uint64_t v10 = *a5;
  *(void *)(a1 + 24) = *a5;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11 && (*(unsigned char *)(v11 + 57) & 8) == 0 && *(void *)(v11 + 16) == *v9)
  {
    v13[0] = "usd/object.h";
    v13[1] = "UsdObject";
    _OWORD v13[2] = 717;
    void v13[3] = "pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(UsdObjType, const Usd_PrimDataHandle &, const SdfPat"
             "h &, const TfToken &)";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "!_prim || _prim->GetPath() != _proxyPrimPath", 0);
  }
  return a1;
}

void sub_216D3B6F8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(v2);
  uint64_t v5 = *(atomic_ullong **)(v1 + 8);
  if (v5) {
    sub_216D16E0C(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216D3B730(uint64_t a1, uint64_t a2, void *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    goto LABEL_20;
  }
  uint64_t v7 = *(void *)(v6 + 40) & 7;
  unint64_t v8 = *(void *)(v6 + 40) & 0xFFFFFFFFFFFFFFF8;
  if (v8) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    goto LABEL_21;
  }
  if (!v7 || v8 == 0)
  {
LABEL_20:
    unint64_t v8 = 0;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v11 = *(void *)(v8 + 40);
    unint64_t v8 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 7) == 0 && v8 != 0) {
      break;
    }
    if (v8) {
      BOOL v13 = (v11 & 7) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_20;
    }
  }
LABEL_21:
  sub_216D3B800(a1, v6, v8, (_DWORD *)(a2 + 16), a3);
  return a1;
}

void sub_216D3B7EC(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_216D3B800(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, void *a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  sub_2169C487C((int *)(a1 + 16), a4);
  sub_2169C48D4((int *)(a1 + 20), a4 + 1);
  uint64_t v8 = *a5;
  uint64_t v9 = a5[1];
  if (*(void *)a1)
  {
    uint64_t v10 = a5[2];
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4)
      && ((v8 & 0x2000) != 0 || (v9 & 0x2000) == 0))
    {
      v8 |= 0x2000uLL;
      v9 &= ~0x2000uLL;
    }
  }
  else
  {
    LOBYTE(v10) = *((unsigned char *)a5 + 16);
  }
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  sub_216D3ADBC((uint64_t *)a1, (uint64_t)v12);
  if (v12[0] != *(void *)(a1 + 8) && !sub_216D3B924((uint64_t *)(a1 + 24), (uint64_t)v12, a4))
  {
    char v15 = 1;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)v12);
    sub_216D3B970(a1, (uint64_t)v12);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  return sub_21697C414(&v13);
}

void sub_216D3B910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_216D3B924(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  BOOL v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3);

  return sub_216D3BA0C(a1, a2, v5);
}

int *sub_216D3B970(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 29))
  {
    v5[0] = "usd/primRange.h";
    v5[1] = "set_begin";
    void v5[2] = 364;
    void v5[3] = "void pxrInternal__aapl__pxrReserved__::UsdPrimRange::set_begin(const iterator &)";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "!newBegin.IsPostVisit()", 0);
  }
  *(void *)a1 = *(void *)a2;
  sub_2169C487C((int *)(a1 + 16), (_DWORD *)(a2 + 16));
  uint64_t result = sub_2169C48D4((int *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 24);
  return result;
}

BOOL sub_216D3BA0C(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0x2000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  unint64_t v4 = *(void *)(*(void *)a2 + 56) & 0xFFFFFFFFFFFFDFFFLL | v3;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v9 = *a1 & v4;
  uint64_t v8 = v6 & v5;
  return *((unsigned __int8 *)a1 + 16) != sub_216D3BA90(&v9, 0, (uint64_t)&v9, 0xFu, &v8);
}

uint64_t sub_216D3BA90(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2)) {
        unint64_t v6 = 64 - a2;
      }
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0) {
        return 0;
      }
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64;
        if (v8) {
          goto LABEL_14;
        }
      }
      return 0;
    }
    uint64_t v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7) {
      return 0;
    }
  }
  return 1;
}

void *sub_216D3BB5C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_216D3BBE0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_216D3BC78((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216D3BC78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_21697C414((_DWORD *)(a2 + 16));
  uint64_t v4 = *(atomic_ullong **)(a2 + 8);
  if (v4)
  {
    sub_216D16E0C(v4);
  }
}

unint64_t sub_216D3BCE8(int **a1, char a2)
{
  uint64_t v2 = a1[4];
  int v3 = **a1;
  if (v3)
  {
    uint64_t v4 = *(void *)a1[1];
    int64_t v5 = *(_DWORD **)v4;
    uint64_t v6 = *(void *)(v4 + 8);
    if (*(void *)v4 != v6)
    {
      uint64_t v7 = (_DWORD *)(v6 - 4);
      do
      {
        if (*v7 < v3) {
          break;
        }
        *(void *)(v4 + 8) = v7;
      }
      while (v7-- != v5);
    }
    if (*(_DWORD *)(v4 + 24) >= v3) {
      *(_DWORD *)(v4 + 24) = -1;
    }
  }
  unint64_t v9 = (uint64_t *)a1[2];
  uint64_t v10 = *v9;
  *v9 += 136;
  if (a2) {
    return 0x100000000;
  }
  uint64_t v12 = (uint64_t)a1[3];
  int v13 = (uint64_t *)a1[1];
  uint64_t v14 = *v13;
  *v13 += 32;
  return sub_216D3BD84(v10, v12, v14, (uint64_t)(v2 + 8), (uint64_t)(v2 + 10));
}

unint64_t sub_216D3BD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a1;
  v11[1] = a5;
  sub_216D0162C(a2, &v9);
  unint64_t v7 = pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Next(a1, a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, (uint64_t)v11, (uint64_t (*)(uint64_t, uint64_t, void *))sub_216D3BE20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  return v7;
}

void sub_216D3BE0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_216D3BE24(uint64_t **a1, int a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v4 = (int **)((*a1)[14] + 48 * a2);
  int64_t v5 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1[1]);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v5, a3, (uint64_t)&v8);
  unint64_t v6 = sub_216D3BED0(v4, (uint64_t)&v8);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
  return v6;
}

void sub_216D3BEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_216D3BED0(int **a1, uint64_t a2)
{
  int v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2)
  {
    unsigned int v6 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    int v7 = 0;
    uint64_t v8 = a1[3];
    do
    {
      switch(*v3)
      {
        case 0:
          uint64_t v13 = *((void *)v8 + 3);
          if (!v13) {
            sub_21683A7CC();
          }
          v8 += 8;
          unint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 48))(v13, a2);
          unsigned int v6 = v14 & 1;
          if (HIDWORD(v14) == 1 && v5 == 0) {
            uint64_t v5 = 1;
          }
          else {
            uint64_t v5 = v5;
          }
          break;
        case 1:
          v6 ^= 1u;
          break;
        case 2:
          ++v7;
          break;
        case 3:
          --v7;
          break;
        case 4:
        case 5:
          if (v3 != v2 && ((v6 ^ (*v3 != 4)) & 1) == 0)
          {
            int v9 = v7;
            int v10 = v7;
            do
            {
              int v11 = *v3;
              if (*v3 == 3)
              {
                int v9 = v10 - 1;
                int v10 = v9;
                if (v9 == v7) {
                  goto LABEL_26;
                }
              }
              else
              {
                uint64_t v12 = v8 + 8;
                if (v11) {
                  uint64_t v12 = v8;
                }
                if (v11 == 2) {
                  int v9 = ++v10;
                }
                else {
                  uint64_t v8 = v12;
                }
              }
              ++v3;
            }
            while (v3 != v2);
            int v3 = v2;
            int v7 = v9;
          }
          break;
        default:
          break;
      }
LABEL_26:
      ++v3;
    }
    while (v3 != v2);
  }
  return v6 | (unint64_t)(v5 << 32);
}

uint64_t sub_216D3C05C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_216D3C0E8(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216D3C13C((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void sub_216D3C13C(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      unsigned int v6 = *(void **)(v4 - 32);
      v4 -= 32;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 24) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_216D3C194(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216D3C194(a1, *a2);
    sub_216D3C194(a1, a2[1]);
    sub_216D3B4CC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_216D3C1F0(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 24);
  sub_216D373D0(&v4);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216D3C240(void *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = *(void *)(*a1 + 32);
  if (v5 >= *(void *)(*a1 + 40))
  {
    uint64_t v6 = sub_216D3C358((uint64_t *)(v4 + 24), a2, v3);
  }
  else
  {
    sub_216D3C468(*(void *)(*a1 + 32), a2, v3);
    uint64_t v6 = v5 + 136;
    *(void *)(v4 + 32) = v5 + 136;
  }
  *(void *)(v4 + 32) = v6;
  uint64_t v7 = *a1;
  uint64_t v8 = *(_DWORD **)(v7 + 8);
  unint64_t v9 = *(void *)(v7 + 16);
  if ((unint64_t)v8 >= v9)
  {
    int v11 = *(_DWORD **)v7;
    uint64_t v12 = ((uint64_t)v8 - *(void *)v7) >> 2;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v14 = v9 - (void)v11;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      uint64_t v16 = (char *)sub_21677EA28(v7 + 16, v15);
      int v11 = *(_DWORD **)v7;
      uint64_t v8 = *(_DWORD **)(v7 + 8);
    }
    else
    {
      uint64_t v16 = 0;
    }
    size_t v17 = &v16[4 * v12];
    unint64_t v18 = &v16[4 * v15];
    *(_DWORD *)size_t v17 = 0;
    int v10 = v17 + 4;
    while (v8 != v11)
    {
      int v19 = *--v8;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    *(void *)uint64_t v7 = v17;
    *(void *)(v7 + 8) = v10;
    *(void *)(v7 + 16) = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *uint64_t v8 = 0;
    int v10 = v8 + 1;
  }
  *(void *)(v7 + 8) = v10;
}

void sub_216D3C350(_Unwind_Exception *a1)
{
  *(void *)(v2 + 32) = v1;
  _Unwind_Resume(a1);
}

uint64_t sub_216D3C358(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x1E1E1E1E1E1E1E1) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0xF0F0F0F0F0F0F0) {
    unint64_t v11 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v11 = v6;
  }
  int v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_216D3D750(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  unint64_t v15 = v12;
  uint64_t v16 = &v12[136 * v5];
  unint64_t v18 = &v12[136 * v11];
  sub_216D3C468((uint64_t)v16, a2, a3);
  size_t v17 = v16 + 136;
  sub_216D3D6D8(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216D3D9C8(&v15);
  return v13;
}

void sub_216D3C454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D3D9C8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D3C468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v6 + 1);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  v8[0] = a1;
  v8[1] = a3;
  pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Init(a1, a2, (uint64_t)v8, (uint64_t (*)(uint64_t, uint64_t))sub_216D3C5A0);
  return a1;
}

void sub_216D3C504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_216D36B68(&a9);
  sub_216D3C524(v9);
  _Unwind_Resume(a1);
}

_DWORD *sub_216D3C524(uint64_t a1)
{
  unint64_t v5 = (void **)(a1 + 80);
  sub_216D36D50(&v5);
  unint64_t v5 = (void **)(a1 + 56);
  sub_216782F20(&v5);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

unint64_t sub_216D3C5A0(uint64_t **a1, void *a2)
{
  return sub_216D3C5B8(a1, a2);
}

unint64_t sub_216D3C5B8(uint64_t **a1, void *a2)
{
  uint64_t v2 = *a1;
  sub_216D3C6A0(a2, (uint64_t)a1[1], (uint64_t)__p);
  uint64_t v3 = (void *)v2[15];
  if ((unint64_t)v3 >= v2[16])
  {
    uint64_t v4 = sub_216D3C854(v2 + 14, (uint64_t)__p);
  }
  else
  {
    _OWORD v3[2] = 0;
    v3[3] = 0;
    void *v3 = 0;
    v3[1] = 0;
    *(_OWORD *)uint64_t v3 = *(_OWORD *)__p;
    _OWORD v3[2] = v7;
    __p[0] = 0;
    __p[1] = 0;
    v3[4] = 0;
    v3[5] = 0;
    *(_OWORD *)(v3 + 3) = v8;
    v3[5] = v9;
    uint64_t v7 = 0;
    long long v8 = 0uLL;
    uint64_t v9 = 0;
    uint64_t v4 = (uint64_t)(v3 + 6);
  }
  v2[15] = v4;
  unint64_t v10 = (void **)&v8;
  sub_216D36C48(&v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v2[15] - v2[14]) >> 4) - 1;
}

void sub_216D3C68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216D3C6A0(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v14[0] = a3;
  v14[1] = &v15;
  v13[0] = a2;
  v13[1] = a3;
  _OWORD v13[2] = &v16;
  pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::Walk(a1, (uint64_t)v14, (uint64_t)sub_216D3CBC4, (uint64_t)v13, (void (*)(uint64_t, uint64_t))sub_216D3CEE8);
  uint64_t v4 = HIBYTE(v18);
  char v5 = HIBYTE(v18);
  if (v18 < 0) {
    uint64_t v4 = v17;
  }
  if (v4)
  {
    unint64_t v6 = *(void **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v6;
      operator delete(v6);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    long long v8 = 0;
    uint64_t v9 = 0;
    long long __p = 0;
    sub_216D3D678((void **)(a3 + 24));
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v10 = 0;
    int v19 = &v10;
    sub_216D36C48((void ***)&v19);
    if (__p)
    {
      long long v8 = (const char *)__p;
      operator delete(__p);
    }
    long long __p = "sdf/predicateProgram.h";
    long long v8 = "SdfLinkPredicateExpression";
    uint64_t v9 = 229;
    unint64_t v10 = "SdfPredicateProgram<DomainType> pxrInternal__aapl__pxrReserved__::SdfLinkPredicateExpression(const SdfPredicat"
          "eExpression &, const SdfPredicateLibrary<DomainType> &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject]";
    LOBYTE(v11) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (uint64_t *)&v16);
    char v5 = HIBYTE(v18);
  }
  if (v5 < 0) {
    operator delete(v16);
  }
}

void sub_216D3C7E0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 25) < 0) {
    operator delete(*(void **)(v2 - 48));
  }
  sub_216D3C808(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D3C808(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 24);
  sub_216D36C48(&v4);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_216D3C854(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  void v15[4] = a1 + 2;
  unint64_t v10 = (char *)sub_2168073F4(v7, v9);
  uint64_t v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[48 * v12];
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)uint64_t v11 = 0;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  void v15[2] = v11 + 48;
  sub_216D3C980(a1, v15);
  uint64_t v13 = a1[1];
  sub_216D3CB48(v15);
  return v13;
}

void sub_216D3C96C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D3CB48((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D3C980(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216D3C9F8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216D3C9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      long long v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(v7 - 32) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 8) = *(void *)(a3 + 40);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216D3CABC((uint64_t)v11);
  return v9;
}

uint64_t sub_216D3CABC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216D3CAF4((uint64_t *)a1);
  }
  return a1;
}

void sub_216D3CAF4(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216D36C00(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **sub_216D3CB48(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216D3CB7C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_216D36C00(v4, i - 48);
  }
}

void sub_216D3CBC8(uint64_t *a1, int a2, int a3)
{
  unsigned int v4 = a2 - 2;
  if ((a2 - 2) < 3)
  {
    if (a3 != 2)
    {
      if (a3 != 1) {
        return;
      }
      uint64_t v5 = *a1;
      if (v4 > 2) {
        int v6 = -1;
      }
      else {
        int v6 = dword_2174983F0[v4];
      }
      unint64_t v12 = *(void *)(v5 + 16);
      long long v13 = *(int **)(v5 + 8);
      if ((unint64_t)v13 >= v12)
      {
        uint64_t v21 = *(int **)v5;
        uint64_t v22 = ((uint64_t)v13 - *(void *)v5) >> 2;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62) {
          sub_21677CB10();
        }
        uint64_t v24 = v12 - (void)v21;
        if (v24 >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          uint64_t v26 = (char *)sub_21677EA28(v5 + 16, v25);
          uint64_t v21 = *(int **)v5;
          long long v13 = *(int **)(v5 + 8);
        }
        else
        {
          uint64_t v26 = 0;
        }
        char v36 = (int *)&v26[4 * v22];
        char v37 = &v26[4 * v25];
        *char v36 = v6;
        long long v14 = v36 + 1;
        while (v13 != v21)
        {
          int v38 = *--v13;
          *--char v36 = v38;
        }
        *(void *)uint64_t v5 = v36;
        *(void *)(v5 + 8) = v14;
        *(void *)(v5 + 16) = v37;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *long long v13 = v6;
        long long v14 = v13 + 1;
      }
      *(void *)(v5 + 8) = v14;
      uint64_t v7 = *a1;
      long long v8 = *(int **)(v7 + 8);
      unint64_t v39 = *(void *)(v7 + 16);
      if ((unint64_t)v8 < v39)
      {
        int v10 = 2;
        goto LABEL_51;
      }
      char v15 = *(int **)v7;
      uint64_t v40 = ((uint64_t)v8 - *(void *)v7) >> 2;
      unint64_t v41 = v40 + 1;
      if (!((unint64_t)(v40 + 1) >> 62))
      {
        uint64_t v42 = v39 - (void)v15;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          unint64_t v44 = (char *)sub_21677EA28(v7 + 16, v43);
          char v15 = *(int **)v7;
          long long v8 = *(int **)(v7 + 8);
        }
        else
        {
          unint64_t v44 = 0;
        }
        char v32 = &v44[4 * v40];
        char v33 = &v44[4 * v43];
        *(_DWORD *)char v32 = 2;
        uint64_t v34 = v32 + 4;
        while (v8 != v15)
        {
          int v45 = *--v8;
          *((_DWORD *)v32 - 1) = v45;
          v32 -= 4;
        }
LABEL_68:
        *(void *)uint64_t v7 = v32;
        *(void *)(v7 + 8) = v34;
        *(void *)(v7 + 16) = v33;
        if (v15) {
          operator delete(v15);
        }
        goto LABEL_70;
      }
      goto LABEL_72;
    }
    uint64_t v7 = *a1;
    long long v8 = *(int **)(*a1 + 8);
    unint64_t v11 = *(void *)(*a1 + 16);
    if ((unint64_t)v8 >= v11)
    {
      char v15 = *(int **)v7;
      uint64_t v16 = ((uint64_t)v8 - *(void *)v7) >> 2;
      unint64_t v17 = v16 + 1;
      if (!((unint64_t)(v16 + 1) >> 62))
      {
        uint64_t v18 = v11 - (void)v15;
        if (v18 >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          uint64_t v20 = (char *)sub_21677EA28(v7 + 16, v19);
          char v15 = *(int **)v7;
          long long v8 = *(int **)(v7 + 8);
        }
        else
        {
          uint64_t v20 = 0;
        }
        char v32 = &v20[4 * v16];
        char v33 = &v20[4 * v19];
        *(_DWORD *)char v32 = 3;
        uint64_t v34 = v32 + 4;
        while (v8 != v15)
        {
          int v35 = *--v8;
          *((_DWORD *)v32 - 1) = v35;
          v32 -= 4;
        }
        goto LABEL_68;
      }
LABEL_72:
      sub_21677CB10();
    }
    int v10 = 3;
LABEL_51:
    *long long v8 = v10;
    uint64_t v34 = v8 + 1;
LABEL_70:
    *(void *)(v7 + 8) = v34;
    return;
  }
  if (a2 == 1 && a3 == 1)
  {
    uint64_t v7 = *a1;
    long long v8 = *(int **)(*a1 + 8);
    unint64_t v9 = *(void *)(*a1 + 16);
    if ((unint64_t)v8 >= v9)
    {
      char v15 = *(int **)v7;
      uint64_t v27 = ((uint64_t)v8 - *(void *)v7) >> 2;
      unint64_t v28 = v27 + 1;
      if (!((unint64_t)(v27 + 1) >> 62))
      {
        uint64_t v29 = v9 - (void)v15;
        if (v29 >> 1 > v28) {
          unint64_t v28 = v29 >> 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          int v31 = (char *)sub_21677EA28(v7 + 16, v30);
          char v15 = *(int **)v7;
          long long v8 = *(int **)(v7 + 8);
        }
        else
        {
          int v31 = 0;
        }
        char v32 = &v31[4 * v27];
        char v33 = &v31[4 * v30];
        *(_DWORD *)char v32 = 1;
        uint64_t v34 = v32 + 4;
        while (v8 != v15)
        {
          int v46 = *--v8;
          *((_DWORD *)v32 - 1) = v46;
          v32 -= 4;
        }
        goto LABEL_68;
      }
      goto LABEL_72;
    }
    int v10 = 1;
    goto LABEL_51;
  }
}

void *sub_216D3CEEC(uint64_t a1, uint64_t a2)
{
  v22[4] = *MEMORY[0x263EF8340];
  sub_216D3D0F0(*(void **)a1, a2 + 8, v22);
  if (v22[3])
  {
    sub_216D3D25C((uint64_t *)(*(void *)(a1 + 8) + 24), (uint64_t)v22);
    uint64_t v3 = *(void *)(a1 + 8);
    unsigned int v4 = *(_DWORD **)(v3 + 8);
    unint64_t v5 = *(void *)(v3 + 16);
    if ((unint64_t)v4 >= v5)
    {
      long long v8 = *(_DWORD **)v3;
      uint64_t v9 = ((uint64_t)v4 - *(void *)v3) >> 2;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        sub_21677CB10();
      }
      uint64_t v11 = v5 - (void)v8;
      if (v11 >> 1 > v10) {
        unint64_t v10 = v11 >> 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        long long v13 = (char *)sub_21677EA28(v3 + 16, v12);
        long long v8 = *(_DWORD **)v3;
        unsigned int v4 = *(_DWORD **)(v3 + 8);
      }
      else
      {
        long long v13 = 0;
      }
      uint64_t v16 = &v13[4 * v9];
      unint64_t v17 = &v13[4 * v12];
      *(_DWORD *)uint64_t v16 = 0;
      int v6 = v16 + 4;
      while (v4 != v8)
      {
        int v18 = *--v4;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }
      *(void *)uint64_t v3 = v16;
      *(void *)(v3 + 8) = v6;
      *(void *)(v3 + 16) = v17;
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *unsigned int v4 = 0;
      int v6 = v4 + 1;
    }
    *(void *)(v3 + 8) = v6;
    return sub_216D36CCC(v22);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(void *)(v7 + 8)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (*(unsigned char *)(v7 + 23)) {
LABEL_16:
  }
    std::string::append((std::string *)v7, ", ");
LABEL_17:
  std::operator+<char>();
  if ((v21 & 0x80u) == 0) {
    long long v14 = __p;
  }
  else {
    long long v14 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v15 = v21;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  std::string::append(*(std::string **)(a1 + 16), (const std::string::value_type *)v14, v15);
  if ((char)v21 < 0) {
    operator delete(__p[0]);
  }
  return sub_216D36CCC(v22);
}

void sub_216D3D0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_216D36CCC(&a15);
  _Unwind_Resume(a1);
}

void sub_216D3D0F0(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  a3[3] = 0;
  unint64_t v6 = sub_216891D24((uint64_t)a1, a2);
  uint64_t v7 = sub_216D3D360(a1, (unsigned __int8 *)a2, v6);
  if (a1[4] + 56 * a1[5] == v7)
  {
    v12[0] = "sdf/predicateLibrary.h";
    v12[1] = "_BindCall";
    void v12[2] = 326;
    _DWORD v12[3] = "PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved__::U"
             "sdObject>::_BindCall(const std::string &, const std::vector<SdfPredicateExpression::FnArg> &) const [Domain"
             "Type = pxrInternal__aapl__pxrReserved__::UsdObject]";
    char v13 = 0;
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v11 = (const char *)a2;
    }
    else {
      uint64_t v11 = *(const char **)a2;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 3, (pxrInternal__aapl__pxrReserved__ *)"No registered function '%s'", v11);
  }
  else
  {
    uint64_t v9 = *(void *)(v7 + 32);
    uint64_t v8 = *(void *)(v7 + 40);
    do
    {
      if (v8 == v9) {
        break;
      }
      uint64_t v10 = *(void *)(v8 - 8);
      v8 -= 8;
      (*(void (**)(void *__return_ptr))(*(void *)v10 + 24))(v12);
      sub_216D3D414(a3, (uint64_t)v12);
      sub_216D36CCC(v12);
    }
    while (!a3[3]);
  }
}

void sub_216D3D230(_Unwind_Exception *a1)
{
  sub_216D36CCC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D3D25C(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)sub_2168707F4(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    std::string::size_type v15 = v14;
    uint64_t v16 = &v14[32 * v10];
    int v18 = &v14[32 * v13];
    sub_216D3D520((uint64_t)v16, a2);
    unint64_t v17 = v16 + 32;
    sub_216D3D5A0(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = sub_216D3D628((uint64_t)&v15);
  }
  else
  {
    uint64_t result = sub_216D3D520(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_216D3D34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D3D628((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D3D360(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *a1 & a3;
  uint64_t v5 = a1[4];
  if (*(__int16 *)(v5 + 56 * v4 + 4) < 0) {
    return v5 + 56 * a1[5];
  }
  LOWORD(v7) = 0;
  while (!sub_2168513F8((uint64_t)a1, (unsigned __int8 *)(v5 + 56 * v4 + 8), a2))
  {
    uint64_t v4 = *a1 & (v4 + 1);
    int v7 = (__int16)(v7 + 1);
    uint64_t v5 = a1[4];
    if (v7 > *(__int16 *)(v5 + 56 * v4 + 4)) {
      return v5 + 56 * a1[5];
    }
  }
  return a1[4] + 56 * v4;
}

void *sub_216D3D414(void *a1, uint64_t a2)
{
  sub_216D3D498(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_216D3D498(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_216D3D520(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t sub_216D3D5A0(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    uint64_t result = sub_216D3D520(result - 32, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216D3D628(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    sub_216D36CCC((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216D3D678(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        uint64_t v3 = sub_216D36CCC(v3 - 4);
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_216D3D6D8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216D3D798((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216D3D750(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    sub_21677CA1C();
  }
  return operator new(136 * a2);
}

uint64_t sub_216D3D798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 136;
      sub_216D3D850(a1, v7 - 136, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 136;
      *((void *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216D3D93C((uint64_t)v13);
  return v11;
}

__n128 sub_216D3D850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21697D878((_DWORD *)a2, (_DWORD *)a3);
  sub_21697D8B4((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(void *)(a2 + 96) = *(void *)(a3 + 96);
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  __int16 v5 = *(_WORD *)(a3 + 104);
  *(unsigned char *)(a2 + 106) = *(unsigned char *)(a3 + 106);
  *(_WORD *)(a2 + 104) = v5;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 112) = 0;
  __n128 result = *(__n128 *)(a3 + 112);
  *(__n128 *)(a2 + 112) = result;
  *(void *)(a2 + 128) = *(void *)(a3 + 128);
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  return result;
}

uint64_t sub_216D3D93C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216D3D974((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216D3D974(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      __n128 result = (uint64_t *)sub_216D36ADC(v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216D3D9C8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216D3D9FC(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 136;
      __n128 result = sub_216D36ADC(v4, v1 - 136);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

unint64_t sub_216D3DA44(uint64_t a1, char a2)
{
  uint64_t v2 = **(void **)a1;
  **(void **)a1 = v2 + 136;
  if (a2) {
    return 0x100000000;
  }
  else {
    return sub_216D3DA70(v2, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  }
}

unint64_t sub_216D3DA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[0] = a1;
  v9[1] = a4;
  sub_216D0162C(a2, &v7);
  unint64_t v5 = pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Match(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, (uint64_t)v9, (uint64_t)sub_216D3DAFC);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  return v5;
}

void sub_216D3DAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_216D3DB00(uint64_t **a1, int a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v4 = (int **)((*a1)[14] + 48 * a2);
  unint64_t v5 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1[1]);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v5, a3, (uint64_t)&v8);
  unint64_t v6 = sub_216D3BED0(v4, (uint64_t)&v8);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
  return v6;
}

void sub_216D3DB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216D3DBAC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2168C5234(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 32 * a2;
    do
    {
      *(_OWORD *)uint64_t v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_DWORD *)(v4 + 24) = -1;
      v4 += 32;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_216D3DC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_216D3DC34(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_21682BF78(result, a4);
    __n128 result = (void *)sub_216D3DCBC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216D3DC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216D3DE30(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216D3DCBC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      sub_216D374C0(v4, (uint64_t)(v6 + 2));
      unint64_t v6 = (void *)*v6;
      uint64_t v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216D3DD4C((uint64_t)v8);
  return v4;
}

uint64_t sub_216D3DD4C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216D3DD84((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216D3DD84(uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 16;
      __n128 result = (uint64_t *)sub_216D3DDD8(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *sub_216D3DDD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));

  return sub_21697C414((_DWORD *)a2);
}

void sub_216D3DE30(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        sub_216D3DDD8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216D3DEC8(uint64_t result, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = ((uint64_t)a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          __n128 result = sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11);
          if (result)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)v11, (int *)a2 - 4);
            __n128 result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(v11 + 4), (int *)a2 - 3);
            uint64_t v22 = *(void *)(v11 + 8);
            *(void *)(v11 + 8) = *((void *)a2 - 1);
            *((void *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          __n128 result = sub_216D3E644(v11, v11 + 16, (uint64_t)a2 - 16, a3);
          break;
        case 4uLL:
          __n128 result = sub_216D3EDFC(v11, v11 + 16, v11 + 32, (uint64_t)a2 - 16, a3);
          break;
        case 5uLL:
          __n128 result = sub_216D3EF00(v11, v11 + 16, v11 + 32, v11 + 48, (uint64_t)a2 - 16, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if ((pxrInternal__aapl__pxrReserved__::SdfPath *)v11 != a2)
      {
        return sub_216D3F0B4(v11, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = v11 + 16 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x801)
    {
      sub_216D3E644(v11, v11 + 16 * (v15 >> 1), (uint64_t)a2 - 16, a3);
      sub_216D3E644(v11 + 16, v17 - 16, (uint64_t)a2 - 32, a3);
      sub_216D3E644(v11 + 32, v11 + 16 + 16 * v16, (uint64_t)a2 - 48, a3);
      sub_216D3E644(v17 - 16, v17, v11 + 16 + 16 * v16, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)v11, (int *)v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(v11 + 4), (int *)(v17 + 4));
      uint64_t v18 = *(void *)(v11 + 8);
      *(void *)(v11 + 8) = *(void *)(v17 + 8);
      *(void *)(v17 + 8) = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_216D3E644(v11 + 16 * (v15 >> 1), v11, (uint64_t)a2 - 16, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if ((sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 - 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11) & 1) == 0)
    {
      __n128 result = sub_216D3E7C0(v11, (unint64_t)a2, a3);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = sub_216D3E994(v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = sub_216D3EB80(v11, v19, a3);
    uint64_t v11 = v19 + 16;
    __n128 result = sub_216D3EB80(v19 + 16, (uint64_t)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      __n128 result = sub_216D3DEC8(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 16;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_216D3E3B0(v11, a2, a3);
  }
  else
  {
    return sub_216D3E514(v11, a2, a3);
  }
}

uint64_t sub_216D3E2C0(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  if (sub_2169817E8(a2, a3)) {
    return 1;
  }
  if (sub_2169817E8(a3, a2)) {
    return 0;
  }
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a3 + 1);
  if (v6 && v7)
  {
    if (v6 == v7) {
      return 0;
    }
    unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v10 = *(void *)(v8 + 8);
    unint64_t v11 = *(void *)(v9 + 8);
    if (v10 < v11) {
      return 1;
    }
    if (v10 != v11) {
      return 0;
    }
    uint64_t v14 = *(const void **)(v9 + 16);
    unint64_t v12 = v9 + 16;
    uint64_t v13 = v14;
    int v15 = *(char *)(v12 + 23);
    uint64_t v18 = *(const void **)(v8 + 16);
    unint64_t v16 = v8 + 16;
    uint64_t v17 = v18;
    int v19 = *(char *)(v16 + 23);
    if (v19 >= 0) {
      size_t v20 = *(unsigned __int8 *)(v16 + 23);
    }
    else {
      size_t v20 = *(void *)(v16 + 8);
    }
    if (v19 >= 0) {
      BOOL v21 = (const void *)v16;
    }
    else {
      BOOL v21 = v17;
    }
    if (v15 >= 0) {
      size_t v22 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      size_t v22 = *(void *)(v12 + 8);
    }
    if (v15 >= 0) {
      unint64_t v23 = (const void *)v12;
    }
    else {
      unint64_t v23 = v13;
    }
    if (v22 >= v20) {
      size_t v24 = v20;
    }
    else {
      size_t v24 = v22;
    }
    int v25 = memcmp(v21, v23, v24);
    if (v25) {
      return v25 < 0;
    }
    else {
      return v20 < v22;
    }
  }
  else
  {
    if (v6) {
      BOOL v26 = 1;
    }
    else {
      BOOL v26 = v7 == 0;
    }
    return !v26;
  }
}

uint64_t sub_216D3E3B0(uint64_t result, _DWORD *a2, uint64_t a3)
{
  if ((_DWORD *)result != a2)
  {
    uint64_t v4 = result;
    char v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16);
    if ((_DWORD *)(result + 16) != a2)
    {
      uint64_t v7 = 0;
      unint64_t v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)result;
      do
      {
        unint64_t v9 = v5;
        __n128 result = sub_216D3E2C0(a3, v5, v8);
        if (result)
        {
          int v13 = *(_DWORD *)v9;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v9);
          int v14 = *((_DWORD *)v8 + 5);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v8 + 5);
          uint64_t v15 = *((void *)v8 + 3);
          *((void *)v8 + 3) = 0;
          uint64_t v10 = v7;
          while (1)
          {
            sub_216D3F050(v4 + v10 + 16, v4 + v10);
            if (!v10) {
              break;
            }
            char v11 = sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + v10 - 16));
            v10 -= 16;
            if ((v11 & 1) == 0)
            {
              uint64_t v12 = v4 + v10 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v12 = v4;
LABEL_10:
          sub_216D3F050(v12, (uint64_t)&v13);
          if ((v15 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
          __n128 result = (uint64_t)sub_21697C414(&v13);
        }
        char v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 16);
        v7 += 16;
        unint64_t v8 = v9;
      }
      while ((_DWORD *)((char *)v9 + 16) != a2);
    }
  }
  return result;
}

void sub_216D3E500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D3E514(uint64_t result, _DWORD *a2, uint64_t a3)
{
  if ((_DWORD *)result != a2)
  {
    uint64_t v4 = result;
    char v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16);
    if ((_DWORD *)(result + 16) != a2)
    {
      do
      {
        uint64_t v7 = v5;
        __n128 result = sub_216D3E2C0(a3, v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4);
        if (result)
        {
          int v8 = *(_DWORD *)v7;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v7);
          int v9 = *(_DWORD *)(v4 + 20);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v4 + 20));
          uint64_t v10 = *(void *)(v4 + 24);
          *(void *)(v4 + 24) = 0;
          do
          {
            sub_216D3F050(v4 + 16, v4);
            v4 -= 16;
          }
          while ((sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4) & 1) != 0);
          sub_216D3F050(v4 + 16, (uint64_t)&v8);
          if ((v10 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
          __n128 result = (uint64_t)sub_21697C414(&v8);
        }
        char v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 16);
        uint64_t v4 = (uint64_t)v7;
      }
      while ((_DWORD *)((char *)v7 + 16) != a2);
    }
  }
  return result;
}

void sub_216D3E630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D3E644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = sub_216D3E2C0(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  uint64_t result = sub_216D3E2C0(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if (v8)
  {
    if (result)
    {
      uint64_t v10 = (uint64_t *)(a1 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a3 + 4));
      char v11 = (uint64_t *)(a3 + 8);
      uint64_t result = 1;
LABEL_10:
      uint64_t v14 = *v10;
      *uint64_t v10 = *v11;
      uint64_t *v11 = v14;
      return result;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a2 + 4));
    uint64_t v10 = (uint64_t *)(a2 + 8);
    uint64_t v13 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v13;
    if (sub_216D3E2C0(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a2, (int *)a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a2 + 4), (int *)(a3 + 4));
      char v11 = (uint64_t *)(a3 + 8);
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a2, (int *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a2 + 4), (int *)(a3 + 4));
    char v11 = (uint64_t *)(a2 + 8);
    uint64_t v12 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = v12;
    if (sub_216D3E2C0(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)a2);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a2 + 4));
      uint64_t v10 = (uint64_t *)(a1 + 8);
LABEL_9:
      uint64_t result = 2;
      goto LABEL_10;
    }
  }
  return 1;
}

unint64_t sub_216D3E7C0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v11 = *(_DWORD *)a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)a1);
  int v12 = *(_DWORD *)(a1 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 4));
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 16)))
  {
    unint64_t v6 = a1;
    do
      v6 += 16;
    while ((sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
    do
    {
      unint64_t v6 = (unint64_t)v7;
      if ((unint64_t)v7 >= a2) {
        break;
      }
      int v8 = sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, v7);
      uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 16);
    }
    while (!v8);
  }
  if (v6 < a2)
  {
    do
      a2 -= 16;
    while ((sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2) & 1) != 0);
  }
  while (v6 < a2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)v6, (int *)a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(v6 + 4), (int *)(a2 + 4));
    uint64_t v9 = *(void *)(v6 + 8);
    *(void *)(v6 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v9;
    do
      v6 += 16;
    while (!sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6));
    do
      a2 -= 16;
    while ((sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2) & 1) != 0);
  }
  if (v6 - 16 != a1) {
    sub_216D3F050(a1, v6 - 16);
  }
  sub_216D3F050(v6 - 16, (uint64_t)&v11);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  return v6;
}

void sub_216D3E964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D3E994(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  int v14 = *(_DWORD *)a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)a1);
  int v15 = *(_DWORD *)(a1 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 4));
  uint64_t v6 = 0;
  uint64_t v16 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  do
  {
    char v7 = sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + v6 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14);
    v6 += 16;
  }
  while ((v7 & 1) != 0);
  unint64_t v8 = a1 + v6;
  if (v6 == 16)
  {
    do
    {
      if (v8 >= (unint64_t)a2) {
        break;
      }
      a2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 16);
    }
    while ((sub_216D3E2C0(a3, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14) & 1) == 0);
  }
  else
  {
    do
      a2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 16);
    while (!sub_216D3E2C0(a3, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14));
  }
  if (v8 >= (unint64_t)a2)
  {
    uint64_t v12 = v8 - 16;
  }
  else
  {
    unint64_t v9 = a1 + v6;
    uint64_t v10 = a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)v9, (int *)v10);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(v9 + 4), (int *)v10 + 1);
      uint64_t v11 = *(void *)(v9 + 8);
      *(void *)(v9 + 8) = *((void *)v10 + 1);
      *((void *)v10 + 1) = v11;
      do
        v9 += 16;
      while ((sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14) & 1) != 0);
      do
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 - 16);
      while (!sub_216D3E2C0(a3, v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14));
    }
    while (v9 < (unint64_t)v10);
    uint64_t v12 = v9 - 16;
  }
  if (v12 != a1) {
    sub_216D3F050(a1, v12);
  }
  sub_216D3F050(v12, (uint64_t)&v14);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  return v12;
}

void sub_216D3EB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_216D3EB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)(a2 - 16));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a2 - 12));
        uint64_t v8 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v8;
      }
      return 1;
    case 3:
      sub_216D3E644(a1, a1 + 16, a2 - 16, a3);
      return 1;
    case 4:
      sub_216D3EDFC(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      sub_216D3EF00(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16, a3);
      return 1;
    default:
      unint64_t v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32);
      sub_216D3E644(a1, a1 + 16, a1 + 32, a3);
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)v10, v9))
    {
      int v16 = *(_DWORD *)v10;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v10);
      int v17 = *(_DWORD *)(v10 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v10 + 4));
      uint64_t v18 = *(void *)(v10 + 8);
      *(void *)(v10 + 8) = 0;
      uint64_t v13 = v11;
      while (1)
      {
        sub_216D3F050(a1 + v13 + 48, a1 + v13 + 32);
        if (v13 == -32) {
          break;
        }
        char v14 = sub_216D3E2C0(a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + v13 + 16));
        v13 -= 16;
        if ((v14 & 1) == 0)
        {
          uint64_t v15 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v15 = a1;
LABEL_12:
      sub_216D3F050(v15, (uint64_t)&v16);
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      ++v12;
      sub_21697C414(&v16);
      if (v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    unint64_t v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

void sub_216D3EDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D3EDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_216D3E644(a1, a2, a3, a5);
  uint64_t result = sub_216D3E2C0(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a3, (int *)a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a3 + 4), (int *)(a4 + 4));
    uint64_t v11 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v11;
    uint64_t result = sub_216D3E2C0(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a2, (int *)a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a2 + 4), (int *)(a3 + 4));
      uint64_t v12 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v12;
      uint64_t result = sub_216D3E2C0(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
      if (result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)a2);
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a2 + 4));
        uint64_t v13 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v13;
      }
    }
  }
  return result;
}

uint64_t sub_216D3EF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_216D3EDFC(a1, a2, a3, a4, a6);
  uint64_t result = sub_216D3E2C0(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a4);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a4, (int *)a5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a4 + 4), (int *)(a5 + 4));
    uint64_t v13 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v13;
    uint64_t result = sub_216D3E2C0(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a3, (int *)a4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a3 + 4), (int *)(a4 + 4));
      uint64_t v14 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = *(void *)(a4 + 8);
      *(void *)(a4 + 8) = v14;
      uint64_t result = sub_216D3E2C0(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      if (result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a2, (int *)a3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a2 + 4), (int *)(a3 + 4));
        uint64_t v15 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v15;
        uint64_t result = sub_216D3E2C0(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, (int *)a2);
          uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a1 + 4), (int *)(a2 + 4));
          uint64_t v16 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = v16;
        }
      }
    }
  }
  return result;
}

uint64_t sub_216D3F050(uint64_t a1, uint64_t a2)
{
  sub_21697DE94((int *)a1, (int *)a2);
  sub_21697DEEC((int *)(a1 + 4), (int *)(a2 + 4));
  if (a2 != a1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
  }
  return a1;
}

uint64_t sub_216D3F0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 16 * v10;
      do
      {
        sub_216D3F200(a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6 + 4;
      do
      {
        if (sub_216D3E2C0(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v14 - 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)(v14 - 4), (int *)a1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)v14, (int *)(a1 + 4));
          uint64_t v15 = *(void *)(v14 + 4);
          *(void *)(v14 + 4) = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v15;
          sub_216D3F200(a1, a4, v9, a1);
        }
        uint64_t v16 = v14 + 12;
        v14 += 16;
      }
      while (v16 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      unint64_t v17 = (unint64_t)v8 >> 4;
      do
      {
        sub_216D3F3BC((int *)a1, v6, a4, v17);
        v6 -= 16;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_216D3F200(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - result) >> 4)
    {
      uint64_t v10 = (a4 - result) >> 3;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = result + 16 * (v10 + 1);
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3
        && sub_216D3E2C0(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16 * (v10 + 1)), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 16)))
      {
        v12 += 16;
        uint64_t v11 = v13;
      }
      uint64_t result = sub_216D3E2C0(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v5);
      if ((result & 1) == 0)
      {
        int v16 = *(_DWORD *)v5;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v5);
        int v17 = *(_DWORD *)(v5 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v5 + 4));
        uint64_t v18 = *(void *)(v5 + 8);
        *(void *)(v5 + 8) = 0;
        do
        {
          uint64_t v14 = v12;
          sub_216D3F050(v5, v12);
          if (v7 < v11) {
            break;
          }
          uint64_t v15 = (2 * v11) | 1;
          uint64_t v12 = v6 + 16 * v15;
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v15;
          }
          else if (sub_216D3E2C0(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 16 * v15), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 16)))
          {
            v12 += 16;
          }
          else
          {
            uint64_t v11 = v15;
          }
          uint64_t v5 = v14;
        }
        while (!sub_216D3E2C0(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16));
        sub_216D3F050(v14, (uint64_t)&v16);
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
        return (uint64_t)sub_21697C414(&v16);
      }
    }
  }
  return result;
}

void sub_216D3F3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int *sub_216D3F3BC(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = (uint64_t)result;
    int v11 = *result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(result);
    int v12 = *(_DWORD *)(v7 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v7 + 4));
    uint64_t v13 = *(void *)(v7 + 8);
    *(void *)(v7 + 8) = 0;
    uint64_t v8 = sub_216D3F4E0(v7, a3, a4);
    uint64_t v9 = v8;
    uint64_t v10 = a2 - 16;
    if (v8 == v10)
    {
      sub_216D3F050(v8, (uint64_t)&v11);
    }
    else
    {
      sub_216D3F050(v8, v10);
      sub_216D3F050(v10, (uint64_t)&v11);
      sub_216D3F594((_DWORD *)v7, v9 + 16, a3, (v9 + 16 - v7) >> 4);
    }
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    return sub_21697C414(&v11);
  }
  return result;
}

void sub_216D3F4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D3F4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 16 * v6 + 16;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && sub_216D3E2C0(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16 * v6 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16 * v6 + 32)))
    {
      v9 += 16;
      uint64_t v10 = v11;
    }
    sub_216D3F050(a1, v9);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

_DWORD *sub_216D3F594(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&result[4 * (v4 >> 1)];
    uint64_t v10 = (int *)(a2 - 16);
    uint64_t result = (_DWORD *)sub_216D3E2C0(a3, v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 16));
    if (result)
    {
      int v12 = *v10;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v10);
      int v13 = *(_DWORD *)(a2 - 12);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 12));
      uint64_t v14 = *(void *)(a2 - 8);
      *(void *)(a2 - 8) = 0;
      do
      {
        uint64_t v11 = (uint64_t)v9;
        sub_216D3F050((uint64_t)v10, (uint64_t)v9);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&v7[4 * v8];
        uint64_t v10 = (int *)v11;
      }
      while ((sub_216D3E2C0(a3, v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12) & 1) != 0);
      sub_216D3F050(v11, (uint64_t)&v12);
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
      return sub_21697C414(&v12);
    }
  }
  return result;
}

void sub_216D3F6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216D3F6CC(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - v6;
  if (v7)
  {
    uint64_t v8 = v7 >> 4;
    do
    {
      --v8;
      uint64_t v9 = v6 + 16;
      uint64_t result = sub_216D3F758(v5, v6);
      uint64_t v6 = v9;
    }
    while (v8);
  }
  unint64_t v10 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(v5 + 8)) {
    v10 += (*(void *)v5 + v10 + (*(void *)v5 + v10) * (*(void *)v5 + v10)) >> 1;
  }
  else {
    *(unsigned char *)(v5 + 8) = 1;
  }
  *(void *)uint64_t v5 = v10;
  return result;
}

uint64_t sub_216D3F758(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_2169827F8(a1, (unsigned int *)a2);
  unint64_t v5 = *(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGetCollectionPredicateLibrary(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91A40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91A40))
  {
    qword_267B91A38 = (uint64_t)sub_216D3F824();
    __cxa_guard_release(&qword_267B91A40);
  }
  return qword_267B91A38;
}

void sub_216D3F80C(_Unwind_Exception *a1)
{
}

uint64_t *sub_216D3F824()
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  v0 = (uint64_t *)operator new(0x50uLL);
  sub_216D40D48((uint64_t)v0, 0, 0.0, 0.5);
  sub_216779094(v142, "abstract");
  sub_216779094(v161, "isAbstract");
  v164 = &unk_26C7501AB;
  v163[0] = 1;
  v138[0] = v161;
  v138[1] = 1;
  sub_216D42804((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v139, (uint64_t)v138);
  uint64_t v1 = operator new(0x30uLL);
  *uint64_t v1 = &unk_26C767BC8;
  v1[2] = 0;
  v1[3] = 0;
  v1[1] = 0;
  sub_216D41474(v1 + 1, v139, v140, 0xCCCCCCCCCCCCCCCDLL * (((char *)v140 - (char *)v139) >> 3));
  v1[4] = v141;
  *uint64_t v1 = &unk_26C767B70;
  if (!pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v139)) {
    goto LABEL_4;
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v140 - (char *)v139) >> 3) >= 2)
  {
    v144 = (long long **)"sdf/predicateLibrary.h";
    v145 = "_CheckNamesAndDefaultsWithSignature";
    uint64_t v146 = 424;
    v147 = "static BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved__::UsdObject"
           ">::_CheckNamesAndDefaultsWithSignature(const NamesAndDefaults &) [DomainType = pxrInternal__aapl__pxrReserved"
           "__::UsdObject, Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredica"
           "teLibrary.cpp:79:29)]";
    LOBYTE(v148) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v144, 1, (pxrInternal__aapl__pxrReserved__ *)"Predicate named arguments (%zu) exceed number of C++ function arguments (%zu)", 0xCCCCCCCCCCCCCCCDLL * (((char *)v140 - (char *)v139) >> 3), 1uLL);
LABEL_4:
    (*(void (**)(void *))(*v1 + 8))(v1);
    goto LABEL_5;
  }
  if (v139 != v140)
  {
    LOBYTE(v144) = 1;
    sub_216D41D10(&v144, 0, 1, &v139);
    if (!(_BYTE)v144) {
      goto LABEL_4;
    }
  }
  v144 = (long long **)v142;
  int v16 = (uint64_t *)sub_216D41EA0(v0, (unsigned __int8 *)v142, (uint64_t)&unk_2174BFD90, (long long **)&v144);
  int v17 = (void *)v16[5];
  unint64_t v18 = v16[6];
  if ((unint64_t)v17 >= v18)
  {
    uint64_t v82 = v16[4];
    uint64_t v83 = ((uint64_t)v17 - v82) >> 3;
    if ((unint64_t)(v83 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v84 = v18 - v82;
    uint64_t v85 = v84 >> 2;
    if (v84 >> 2 <= (unint64_t)(v83 + 1)) {
      uint64_t v85 = v83 + 1;
    }
    if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v86 = v85;
    }
    v148 = v16 + 6;
    if (v86) {
      float64x2_t v87 = (long long **)sub_21677CB28((uint64_t)(v16 + 6), v86);
    }
    else {
      float64x2_t v87 = 0;
    }
    v106 = (char *)&v87[v83];
    v144 = v87;
    v145 = v106;
    v147 = (const char *)&v87[v86];
    *(void *)v106 = v1;
    uint64_t v146 = (uint64_t)(v106 + 8);
    sub_216D425A8(v16 + 4, &v144);
    int v19 = (void *)v16[5];
    sub_216D42758((void **)&v144);
  }
  else
  {
    *int v17 = v1;
    int v19 = v17 + 1;
    v16[5] = (uint64_t)v19;
  }
  v16[5] = (uint64_t)v19;
LABEL_5:
  sub_216779094(v136, "defined");
  sub_216779094(v157, "isDefined");
  v160 = &unk_26C7501AB;
  v159[0] = 1;
  v132[0] = v157;
  v132[1] = 1;
  sub_216D42804((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v133, (uint64_t)v132);
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26C767BC8;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  sub_216D41474(v2 + 1, v133, v134, 0xCCCCCCCCCCCCCCCDLL * (((char *)v134 - (char *)v133) >> 3));
  v2[4] = v135;
  void *v2 = &unk_26C767C88;
  if (!pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v133))
  {
LABEL_8:
    (*(void (**)(void *))(*v2 + 8))(v2);
    goto LABEL_9;
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v134 - (char *)v133) >> 3) >= 2)
  {
    v144 = (long long **)"sdf/predicateLibrary.h";
    v145 = "_CheckNamesAndDefaultsWithSignature";
    uint64_t v146 = 424;
    v147 = "static BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved__::UsdObject"
           ">::_CheckNamesAndDefaultsWithSignature(const NamesAndDefaults &) [DomainType = pxrInternal__aapl__pxrReserved"
           "__::UsdObject, Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredica"
           "teLibrary.cpp:87:28)]";
    LOBYTE(v148) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v144, 1, (pxrInternal__aapl__pxrReserved__ *)"Predicate named arguments (%zu) exceed number of C++ function arguments (%zu)", 0xCCCCCCCCCCCCCCCDLL * (((char *)v134 - (char *)v133) >> 3), 1uLL);
    goto LABEL_8;
  }
  if (v133 != v134)
  {
    LOBYTE(v144) = 1;
    sub_216D41D10(&v144, 0, 1, &v133);
    if (!(_BYTE)v144) {
      goto LABEL_8;
    }
  }
  v144 = (long long **)v136;
  size_t v20 = (uint64_t *)sub_216D41EA0(v0, (unsigned __int8 *)v136, (uint64_t)&unk_2174BFD90, (long long **)&v144);
  BOOL v21 = (void *)v20[5];
  unint64_t v22 = v20[6];
  if ((unint64_t)v21 >= v22)
  {
    uint64_t v88 = v20[4];
    uint64_t v89 = ((uint64_t)v21 - v88) >> 3;
    if ((unint64_t)(v89 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v90 = v22 - v88;
    uint64_t v91 = v90 >> 2;
    if (v90 >> 2 <= (unint64_t)(v89 + 1)) {
      uint64_t v91 = v89 + 1;
    }
    if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v92 = v91;
    }
    v148 = v20 + 6;
    if (v92) {
      uint64_t v93 = (long long **)sub_21677CB28((uint64_t)(v20 + 6), v92);
    }
    else {
      uint64_t v93 = 0;
    }
    v107 = (char *)&v93[v89];
    v144 = v93;
    v145 = v107;
    v147 = (const char *)&v93[v92];
    *(void *)v107 = v2;
    uint64_t v146 = (uint64_t)(v107 + 8);
    sub_216D425A8(v20 + 4, &v144);
    unint64_t v23 = (void *)v20[5];
    sub_216D42758((void **)&v144);
  }
  else
  {
    *BOOL v21 = v2;
    unint64_t v23 = v21 + 1;
    v20[5] = (uint64_t)v23;
  }
  v20[5] = (uint64_t)v23;
LABEL_9:
  sub_216779094(v130, "model");
  sub_216779094(v153, "isModel");
  v156 = &unk_26C7501AB;
  v155[0] = 1;
  v126[0] = v153;
  v126[1] = 1;
  sub_216D42804((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v127, (uint64_t)v126);
  uint64_t v3 = operator new(0x30uLL);
  void *v3 = &unk_26C767BC8;
  _OWORD v3[2] = 0;
  v3[3] = 0;
  v3[1] = 0;
  sub_216D41474(v3 + 1, v127, v128, 0xCCCCCCCCCCCCCCCDLL * (((char *)v128 - (char *)v127) >> 3));
  v3[4] = v129;
  void *v3 = &unk_26C767D50;
  if (!pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v127))
  {
LABEL_12:
    (*(void (**)(void *))(*v3 + 8))(v3);
    goto LABEL_13;
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v128 - (char *)v127) >> 3) >= 2)
  {
    v144 = (long long **)"sdf/predicateLibrary.h";
    v145 = "_CheckNamesAndDefaultsWithSignature";
    uint64_t v146 = 424;
    v147 = "static BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved__::UsdObject"
           ">::_CheckNamesAndDefaultsWithSignature(const NamesAndDefaults &) [DomainType = pxrInternal__aapl__pxrReserved"
           "__::UsdObject, Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredica"
           "teLibrary.cpp:95:26)]";
    LOBYTE(v148) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v144, 1, (pxrInternal__aapl__pxrReserved__ *)"Predicate named arguments (%zu) exceed number of C++ function arguments (%zu)", 0xCCCCCCCCCCCCCCCDLL * (((char *)v128 - (char *)v127) >> 3), 1uLL);
    goto LABEL_12;
  }
  if (v127 != v128)
  {
    LOBYTE(v144) = 1;
    sub_216D41D10(&v144, 0, 1, &v127);
    if (!(_BYTE)v144) {
      goto LABEL_12;
    }
  }
  v144 = (long long **)v130;
  size_t v24 = (uint64_t *)sub_216D41EA0(v0, (unsigned __int8 *)v130, (uint64_t)&unk_2174BFD90, (long long **)&v144);
  int v25 = (void *)v24[5];
  unint64_t v26 = v24[6];
  if ((unint64_t)v25 >= v26)
  {
    uint64_t v94 = v24[4];
    uint64_t v95 = ((uint64_t)v25 - v94) >> 3;
    if ((unint64_t)(v95 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v96 = v26 - v94;
    uint64_t v97 = v96 >> 2;
    if (v96 >> 2 <= (unint64_t)(v95 + 1)) {
      uint64_t v97 = v95 + 1;
    }
    if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v98 = v97;
    }
    v148 = v24 + 6;
    if (v98) {
      int v99 = (long long **)sub_21677CB28((uint64_t)(v24 + 6), v98);
    }
    else {
      int v99 = 0;
    }
    v108 = (char *)&v99[v95];
    v144 = v99;
    v145 = v108;
    v147 = (const char *)&v99[v98];
    *(void *)v108 = v3;
    uint64_t v146 = (uint64_t)(v108 + 8);
    sub_216D425A8(v24 + 4, &v144);
    uint64_t v27 = (void *)v24[5];
    sub_216D42758((void **)&v144);
  }
  else
  {
    *int v25 = v3;
    uint64_t v27 = v25 + 1;
    v24[5] = (uint64_t)v27;
  }
  v24[5] = (uint64_t)v27;
LABEL_13:
  sub_216779094(v124, "group");
  sub_216779094(v149, "isGroup");
  v152 = &unk_26C7501AB;
  v151[0] = 1;
  v120[0] = v149;
  v120[1] = 1;
  sub_216D42804((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v121, (uint64_t)v120);
  unint64_t v4 = operator new(0x30uLL);
  *unint64_t v4 = &unk_26C767BC8;
  double v4[2] = 0;
  void v4[3] = 0;
  v4[1] = 0;
  sub_216D41474(v4 + 1, v121, v122, 0xCCCCCCCCCCCCCCCDLL * (((char *)v122 - (char *)v121) >> 3));
  void v4[4] = v123;
  *unint64_t v4 = &unk_26C767E18;
  if (!pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity((pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *)&v121))
  {
LABEL_16:
    (*(void (**)(void *))(*v4 + 8))(v4);
    goto LABEL_17;
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v122 - (char *)v121) >> 3) >= 2)
  {
    v144 = (long long **)"sdf/predicateLibrary.h";
    v145 = "_CheckNamesAndDefaultsWithSignature";
    uint64_t v146 = 424;
    v147 = "static BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved__::UsdObject"
           ">::_CheckNamesAndDefaultsWithSignature(const NamesAndDefaults &) [DomainType = pxrInternal__aapl__pxrReserved"
           "__::UsdObject, Fn = (lambda at /Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredica"
           "teLibrary.cpp:107:26)]";
    LOBYTE(v148) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v144, 1, (pxrInternal__aapl__pxrReserved__ *)"Predicate named arguments (%zu) exceed number of C++ function arguments (%zu)", 0xCCCCCCCCCCCCCCCDLL * (((char *)v122 - (char *)v121) >> 3), 1uLL);
    goto LABEL_16;
  }
  if (v121 != v122)
  {
    LOBYTE(v144) = 1;
    sub_216D41D10(&v144, 0, 1, &v121);
    if (!(_BYTE)v144) {
      goto LABEL_16;
    }
  }
  v144 = (long long **)v124;
  unint64_t v28 = (uint64_t *)sub_216D41EA0(v0, (unsigned __int8 *)v124, (uint64_t)&unk_2174BFD90, (long long **)&v144);
  uint64_t v29 = (void *)v28[5];
  unint64_t v30 = v28[6];
  if ((unint64_t)v29 >= v30)
  {
    uint64_t v100 = v28[4];
    uint64_t v101 = ((uint64_t)v29 - v100) >> 3;
    if ((unint64_t)(v101 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v102 = v30 - v100;
    uint64_t v103 = v102 >> 2;
    if (v102 >> 2 <= (unint64_t)(v101 + 1)) {
      uint64_t v103 = v101 + 1;
    }
    if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v104 = v103;
    }
    v148 = v28 + 6;
    if (v104) {
      v105 = (long long **)sub_21677CB28((uint64_t)(v28 + 6), v104);
    }
    else {
      v105 = 0;
    }
    v109 = (char *)&v105[v101];
    v144 = v105;
    v145 = v109;
    v147 = (const char *)&v105[v104];
    *(void *)v109 = v4;
    uint64_t v146 = (uint64_t)(v109 + 8);
    sub_216D425A8(v28 + 4, &v144);
    int v31 = (void *)v28[5];
    sub_216D42758((void **)&v144);
  }
  else
  {
    *uint64_t v29 = v4;
    int v31 = v29 + 1;
    v28[5] = (uint64_t)v31;
  }
  v28[5] = (uint64_t)v31;
LABEL_17:
  sub_216779094(v118, "kind");
  unint64_t v5 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)unint64_t v5 = &unk_26C767EE0;
  v144 = (long long **)v118;
  uint64_t v6 = (uint64_t *)sub_216D41EA0(v0, (unsigned __int8 *)v118, (uint64_t)&unk_2174BFD90, (long long **)&v144);
  uint64_t v7 = (void *)v6[5];
  unint64_t v8 = v6[6];
  if ((unint64_t)v7 >= v8)
  {
    uint64_t v10 = v6[4];
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v12 = v8 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    v148 = v6 + 6;
    if (v14) {
      uint64_t v15 = (long long **)sub_21677CB28((uint64_t)(v6 + 6), v14);
    }
    else {
      uint64_t v15 = 0;
    }
    char v32 = (char *)&v15[v11];
    v144 = v15;
    v145 = v32;
    v147 = (const char *)&v15[v14];
    *(void *)char v32 = v5;
    uint64_t v146 = (uint64_t)(v32 + 8);
    sub_216D425A8(v6 + 4, &v144);
    uint64_t v9 = (void *)v6[5];
    sub_216D42758((void **)&v144);
  }
  else
  {
    *uint64_t v7 = v5;
    uint64_t v9 = v7 + 1;
    v6[5] = (uint64_t)v9;
  }
  v6[5] = (uint64_t)v9;
  sub_216779094(v116, "specifier");
  char v33 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v33 + 24) = 0u;
  *(_OWORD *)(v33 + 8) = 0u;
  *(void *)char v33 = &unk_26C767FA8;
  v144 = (long long **)v116;
  uint64_t v34 = (uint64_t *)sub_216D41EA0(v0, (unsigned __int8 *)v116, (uint64_t)&unk_2174BFD90, (long long **)&v144);
  int v35 = (void *)v34[5];
  unint64_t v36 = v34[6];
  if ((unint64_t)v35 >= v36)
  {
    uint64_t v38 = v34[4];
    uint64_t v39 = ((uint64_t)v35 - v38) >> 3;
    if ((unint64_t)(v39 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v40 = v36 - v38;
    uint64_t v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
      uint64_t v41 = v39 + 1;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    v148 = v34 + 6;
    if (v42) {
      unint64_t v43 = (long long **)sub_21677CB28((uint64_t)(v34 + 6), v42);
    }
    else {
      unint64_t v43 = 0;
    }
    unint64_t v44 = (char *)&v43[v39];
    v144 = v43;
    v145 = v44;
    v147 = (const char *)&v43[v42];
    *(void *)unint64_t v44 = v33;
    uint64_t v146 = (uint64_t)(v44 + 8);
    sub_216D425A8(v34 + 4, &v144);
    char v37 = (void *)v34[5];
    sub_216D42758((void **)&v144);
  }
  else
  {
    *int v35 = v33;
    char v37 = v35 + 1;
    v34[5] = (uint64_t)v37;
  }
  v34[5] = (uint64_t)v37;
  sub_216779094(v114, "isa");
  int v45 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v45 + 24) = 0u;
  *(_OWORD *)(v45 + 8) = 0u;
  *(void *)int v45 = &unk_26C768070;
  v144 = (long long **)v114;
  int v46 = (uint64_t *)sub_216D41EA0(v0, (unsigned __int8 *)v114, (uint64_t)&unk_2174BFD90, (long long **)&v144);
  char v47 = (void *)v46[5];
  unint64_t v48 = v46[6];
  if ((unint64_t)v47 >= v48)
  {
    uint64_t v50 = v46[4];
    uint64_t v51 = ((uint64_t)v47 - v50) >> 3;
    if ((unint64_t)(v51 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v52 = v48 - v50;
    uint64_t v53 = v52 >> 2;
    if (v52 >> 2 <= (unint64_t)(v51 + 1)) {
      uint64_t v53 = v51 + 1;
    }
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v54 = v53;
    }
    v148 = v46 + 6;
    if (v54) {
      uint64_t v55 = (long long **)sub_21677CB28((uint64_t)(v46 + 6), v54);
    }
    else {
      uint64_t v55 = 0;
    }
    uint64_t v56 = (char *)&v55[v51];
    v144 = v55;
    v145 = v56;
    v147 = (const char *)&v55[v54];
    *(void *)uint64_t v56 = v45;
    uint64_t v146 = (uint64_t)(v56 + 8);
    sub_216D425A8(v46 + 4, &v144);
    uint64_t v49 = (void *)v46[5];
    sub_216D42758((void **)&v144);
  }
  else
  {
    void *v47 = v45;
    uint64_t v49 = v47 + 1;
    v46[5] = (uint64_t)v49;
  }
  v46[5] = (uint64_t)v49;
  sub_216779094(v112, "hasAPI");
  int v57 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v57 + 24) = 0u;
  *(_OWORD *)(v57 + 8) = 0u;
  *(void *)int v57 = &unk_26C768138;
  v144 = (long long **)v112;
  uint64_t v58 = (uint64_t *)sub_216D41EA0(v0, (unsigned __int8 *)v112, (uint64_t)&unk_2174BFD90, (long long **)&v144);
  long long v59 = (void *)v58[5];
  unint64_t v60 = v58[6];
  if ((unint64_t)v59 >= v60)
  {
    uint64_t v62 = v58[4];
    uint64_t v63 = ((uint64_t)v59 - v62) >> 3;
    if ((unint64_t)(v63 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v64 = v60 - v62;
    uint64_t v65 = v64 >> 2;
    if (v64 >> 2 <= (unint64_t)(v63 + 1)) {
      uint64_t v65 = v63 + 1;
    }
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v66 = v65;
    }
    v148 = v58 + 6;
    if (v66) {
      int v67 = (long long **)sub_21677CB28((uint64_t)(v58 + 6), v66);
    }
    else {
      int v67 = 0;
    }
    uint64_t v68 = (char *)&v67[v63];
    v144 = v67;
    v145 = v68;
    v147 = (const char *)&v67[v66];
    *(void *)uint64_t v68 = v57;
    uint64_t v146 = (uint64_t)(v68 + 8);
    sub_216D425A8(v58 + 4, &v144);
    int v61 = (void *)v58[5];
    sub_216D42758((void **)&v144);
  }
  else
  {
    void *v59 = v57;
    int v61 = v59 + 1;
    v58[5] = (uint64_t)v61;
  }
  v58[5] = (uint64_t)v61;
  sub_216779094(__p, "variant");
  long long v69 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v69 + 24) = 0u;
  *(_OWORD *)(v69 + 8) = 0u;
  *(void *)long long v69 = &unk_26C768200;
  v144 = (long long **)__p;
  uint64_t v70 = (uint64_t *)sub_216D41EA0(v0, (unsigned __int8 *)__p, (uint64_t)&unk_2174BFD90, (long long **)&v144);
  uint64_t v71 = (void *)v70[5];
  unint64_t v72 = v70[6];
  if ((unint64_t)v71 >= v72)
  {
    uint64_t v74 = v70[4];
    uint64_t v75 = ((uint64_t)v71 - v74) >> 3;
    if ((unint64_t)(v75 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v76 = v72 - v74;
    uint64_t v77 = v76 >> 2;
    if (v76 >> 2 <= (unint64_t)(v75 + 1)) {
      uint64_t v77 = v75 + 1;
    }
    if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v78 = v77;
    }
    v148 = v70 + 6;
    if (v78) {
      uint64_t v79 = (long long **)sub_21677CB28((uint64_t)(v70 + 6), v78);
    }
    else {
      uint64_t v79 = 0;
    }
    int v80 = (char *)&v79[v75];
    v144 = v79;
    v145 = v80;
    v147 = (const char *)&v79[v78];
    *(void *)int v80 = v69;
    uint64_t v146 = (uint64_t)(v80 + 8);
    sub_216D425A8(v70 + 4, &v144);
    char v73 = (void *)v70[5];
    sub_216D42758((void **)&v144);
  }
  else
  {
    *uint64_t v71 = v69;
    char v73 = v71 + 1;
    v70[5] = (uint64_t)v73;
  }
  v70[5] = (uint64_t)v73;
  if (v111 < 0) {
    operator delete(__p[0]);
  }
  if (v113 < 0) {
    operator delete(v112[0]);
  }
  if (v115 < 0) {
    operator delete(v114[0]);
  }
  if (v117 < 0) {
    operator delete(v116[0]);
  }
  if (v119 < 0) {
    operator delete(v118[0]);
  }
  v144 = &v121;
  sub_2169B5D08((void ***)&v144);
  sub_2168EE084((uint64_t)v151);
  if (v150 < 0) {
    operator delete(v149[0]);
  }
  if (v125 < 0) {
    operator delete(v124[0]);
  }
  v144 = &v127;
  sub_2169B5D08((void ***)&v144);
  sub_2168EE084((uint64_t)v155);
  if (v154 < 0) {
    operator delete(v153[0]);
  }
  if (v131 < 0) {
    operator delete(v130[0]);
  }
  v144 = &v133;
  sub_2169B5D08((void ***)&v144);
  sub_2168EE084((uint64_t)v159);
  if (v158 < 0) {
    operator delete(v157[0]);
  }
  if (v137 < 0) {
    operator delete(v136[0]);
  }
  v144 = &v139;
  sub_2169B5D08((void ***)&v144);
  sub_2168EE084((uint64_t)v163);
  if (v162 < 0) {
    operator delete(v161[0]);
  }
  if (v143 < 0) {
    operator delete(v142[0]);
  }
  return v0;
}

void sub_216D408C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  sub_216D42758(&a73);
  a23 = &a28;
  sub_2169B5D08((void ***)&a23);
  sub_2168EC808(v73 - 248);
  if (a37 < 0) {
    operator delete(__p);
  }
  *(void *)(v73 - 248) = &a40;
  sub_2169B5D08((void ***)(v73 - 248));
  sub_2168EC808(v73 - 208);
  if (a49 < 0) {
    operator delete(a44);
  }
  *(void *)(v73 - 208) = &a52;
  sub_2169B5D08((void ***)(v73 - 208));
  sub_2168EC808(v73 - 168);
  if (a61 < 0) {
    operator delete(a56);
  }
  *(void *)(v73 - 168) = &a64;
  sub_2169B5D08((void ***)(v73 - 168));
  sub_2168EC808(v73 - 128);
  if (a72 < 0) {
    operator delete(a68);
  }
  _Unwind_Resume(a1);
}

void sub_216D40BAC()
{
}

void sub_216D40BB4()
{
}

void sub_216D40BD0()
{
}

void sub_216D40BD8()
{
}

void sub_216D40BE0()
{
}

void sub_216D40BFC()
{
}

void sub_216D40C04()
{
}

void sub_216D40C0C()
{
}

void sub_216D40C28()
{
}

void sub_216D40C30()
{
}

void sub_216D40C38()
{
}

void sub_216D40C54()
{
}

void sub_216D40C5C()
{
}

void sub_216D40C64()
{
}

void sub_216D40C6C()
{
}

uint64_t sub_216D40D48(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v12 = a2;
  sub_21686EB98((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0x492492492492493)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  sub_216D40EFC((void *)(a1 + 8), v12);
  uint64_t v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16)) {
    uint64_t v7 = sub_216D40E78();
  }
  unint64_t v8 = v12;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8) {
    *(unsigned char *)(*(void *)(a1 + 16) - 50) = 1;
  }
  float v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(void *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_216D40E64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_216D40E78()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798CE08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798CE08))
  {
    dword_26798CDD0 = 0;
    word_26798CDD4 = -1;
    byte_26798CDD6 = 1;
    __cxa_atexit((void (*)(void *))sub_216D41044, &dword_26798CDD0, &dword_216758000);
    __cxa_guard_release(&qword_26798CE08);
  }
  return &dword_26798CDD0;
}

void *sub_216D40EFC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2167B8760(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 56 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(unsigned char *)(v4 + 6) = 0;
      v4 += 56;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_216D40F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216D40F88(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216D40FDC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_216D40FDC(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = v2 - 56;
    do
    {
      if (*(__int16 *)(v4 + 4) != -1)
      {
        sub_216D41084(v4);
        *(_WORD *)(v4 + 4) = -1;
      }
      BOOL v5 = v4 == v3;
      v4 -= 56;
    }
    while (!v5);
  }
  a1[1] = v3;
}

uint64_t sub_216D41044(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    sub_216D41084(a1);
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

void sub_216D41084(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  sub_216D410CC(&v2);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void sub_216D410CC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_216D41120(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_216D41120(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t sub_216D4118C(uint64_t a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v3 = (void **)(a1 + 8);
  sub_2169B5D08(&v3);
  return a1;
}

void sub_216D411E4(char *a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v2 = (void **)(a1 + 8);
  sub_2169B5D08(&v2);
  operator delete(a1);
}

void *sub_216D41240@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  *uint64_t v4 = &unk_26C767BC8;
  double v4[2] = 0;
  void v4[3] = 0;
  v4[1] = 0;
  uint64_t result = sub_216D41474(v4 + 1, *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  void v4[4] = *(void *)(a1 + 32);
  *uint64_t v4 = &unk_26C767B70;
  *a2 = v4;
  return result;
}

void sub_216D412E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216D412F4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
  if (v4 < 1 - *(void *)(a1 + 32))
  {
    long long __p = "sdf/predicateLibrary.h";
    float v9 = "_TryToBindCall";
    uint64_t v10 = 638;
    uint64_t v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:79:29)]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function requires at least %zu argument%s, %zu given");
LABEL_5:
    *(void *)(a3 + 24) = 0;
    return;
  }
  if (v4 >= 2)
  {
    long long __p = "sdf/predicateLibrary.h";
    float v9 = "_TryToBindCall";
    uint64_t v10 = 643;
    uint64_t v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:79:29)]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function takes at most %zu argument%s, %zu given");
    goto LABEL_5;
  }
  BOOL v7 = 0;
  long long __p = 0;
  float v9 = 0;
  uint64_t v10 = 0;
  if (sub_216D41654(&v7, a2, (void *)(a1 + 8), (uint64_t *)&__p))
  {
    __int16 v5 = v7;
    *(void *)a3 = &unk_26C767BF8;
    *(_WORD *)(a3 + 8) = v5;
    uint64_t v6 = a3;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)(a3 + 24) = v6;
  if (__p) {
    operator delete(__p);
  }
}

void sub_216D4145C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216D41474(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2168724E8(result, a4);
    uint64_t result = sub_216D414FC((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216D414DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2169B5D08(&a9);
  _Unwind_Resume(a1);
}

void *sub_216D414FC(uint64_t a1, long long *a2, long long *a3, void *__dst)
{
  unint64_t v4 = __dst;
  uint64_t v11 = __dst;
  char v12 = (char *)__dst;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      sub_216D415A8(v7, v4, v6);
      uint64_t v6 = (long long *)((char *)v6 + 40);
      unint64_t v4 = v12 + 40;
      v12 += 40;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_216D4161C((uint64_t)v9);
  return v4;
}

void sub_216D41594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216D415A8(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    __n128 __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  return sub_2168EE4C4(__dst + 3, (void *)a3 + 3);
}

void sub_216D41600(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D4161C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2169B7FF4((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_216D41654(BOOL *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  unsigned __int8 v11 = 1;
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
  char v10 = 0;
  sub_216BEBB34((uint64_t)a4, v8, &v10);
  sub_216D416E4(0, 1, a1, &v11, a2, a4, a3);
  return v11;
}

unint64_t sub_216D416E4(unint64_t result, uint64_t a2, BOOL *a3, unsigned char *a4, uint64_t *a5, uint64_t *a6, void *a7)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!*a4) {
    return result;
  }
  unint64_t v10 = result;
  unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a7[1] - *a7) >> 3) - a2;
  BOOL v12 = result >= v11;
  uint64_t v13 = *a7 + 40 * (result - v11);
  if (v12) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v16 = *a5;
  uint64_t v15 = a5[1];
  unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - *a5) >> 3);
  if (v17 > result)
  {
    uint64_t v18 = v16 + 40 * result;
    if (*(char *)(v18 + 23) < 0) {
      uint64_t v19 = *(void *)(v18 + 8);
    }
    else {
      uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
    }
    if (v19) {
      uint64_t v18 = 0;
    }
    if (v14)
    {
      if (v18)
      {
        sub_216B8C3A4((void *)(v18 + 24), (pxrInternal__aapl__pxrReserved__::VtValue *)&v29);
        if (!v30) {
          goto LABEL_46;
        }
LABEL_16:
        *a3 = sub_216BC9548(&v29);
        *(void *)(*a6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        return sub_2168EE084((uint64_t)&v29);
      }
      goto LABEL_17;
    }
    if (v18)
    {
      if (*(char *)(v18 + 23) < 0)
      {
        if (*(void *)(v18 + 8)) {
          goto LABEL_41;
        }
      }
      else if (*(unsigned char *)(v18 + 23))
      {
        goto LABEL_41;
      }
      sub_216B8C3A4((void *)(v18 + 24), (pxrInternal__aapl__pxrReserved__::VtValue *)&v29);
      if (!v30) {
        goto LABEL_46;
      }
      goto LABEL_16;
    }
LABEL_41:
    *a4 = 0;
    return result;
  }
  if (!v14) {
    goto LABEL_41;
  }
LABEL_17:
  if (v15 == v16)
  {
LABEL_36:
    sub_216B8C3A4((void *)(v14 + 24), (pxrInternal__aapl__pxrReserved__::VtValue *)&v29);
    if (v30)
    {
      *a3 = sub_216BC9548(&v29);
      return sub_2168EE084((uint64_t)&v29);
    }
    goto LABEL_46;
  }
  unint64_t v20 = 0;
  uint64_t v21 = *a6;
  while (1)
  {
    if ((*(void *)(v21 + 8 * (v20 >> 6)) & (1 << v20)) != 0) {
      goto LABEL_35;
    }
    unint64_t v22 = (unsigned __int8 *)(v16 + 40 * v20);
    uint64_t v23 = v22[23];
    if ((v23 & 0x80u) == 0) {
      uint64_t v24 = v22[23];
    }
    else {
      uint64_t v24 = *((void *)v22 + 1);
    }
    uint64_t v25 = *(unsigned __int8 *)(v14 + 23);
    int v26 = (char)v25;
    if ((v25 & 0x80u) != 0) {
      uint64_t v25 = *(void *)(v14 + 8);
    }
    if (v24 != v25) {
      goto LABEL_35;
    }
    uint64_t v27 = v26 >= 0 ? (unsigned __int8 *)v14 : *(unsigned __int8 **)v14;
    if ((v23 & 0x80) != 0) {
      break;
    }
    if (!v22[23]) {
      goto LABEL_42;
    }
    while (*v22 == *v27)
    {
      ++v22;
      ++v27;
      if (!--v23) {
        goto LABEL_42;
      }
    }
LABEL_35:
    if (++v20 == v17) {
      goto LABEL_36;
    }
  }
  if (memcmp(*(const void **)v22, v27, *((void *)v22 + 1))) {
    goto LABEL_35;
  }
LABEL_42:
  sub_216B8C3A4((void *)(v16 + 40 * v20 + 24), (pxrInternal__aapl__pxrReserved__::VtValue *)&v29);
  if (v30)
  {
    *a3 = sub_216BC9548(&v29);
    *(void *)(*a6 + 8 * (v20 >> 6)) |= 1 << v20;
    return sub_2168EE084((uint64_t)&v29);
  }
LABEL_46:
  *a4 = 0;
  return sub_2168EE084((uint64_t)&v29);
}

void sub_216D41998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

_WORD *sub_216D419C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26C767BF8;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_216D41A14(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C767BF8;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

uint64_t sub_216D41A44(uint64_t a1, uint64_t a2)
{
  sub_216D3C05C((uint64_t)v10, a2);
  sub_216D41CB0((uint64_t)&v15, (uint64_t)v10);
  int v3 = *(unsigned __int8 *)(a1 + 8);
  char v20 = *(unsigned char *)(a1 + 8);
  sub_216D16CFC((uint64_t)v21, (uint64_t *)&v16, &v17);
  long long v5 = v22;
  if (!v22 || (unint64_t v6 = v22[7], (v6 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v22, v4);
    unint64_t v6 = v5[7];
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_21697C414(&v23);
  if (v22) {
    sub_216D16E0C(v22);
  }
  int v7 = v15;
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  if (v7 == 1) {
    int v8 = (v6 >> 5) & 1;
  }
  else {
    int v8 = 1;
  }
  if (v8) {
    return (v3 != 0) == ((v6 & 0x20) != 0);
  }
  else {
    return (v3 == 0) | 0x100000000;
  }
}

void sub_216D41B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, atomic_ullong *a16, int a17, int a18, uint64_t a19)
{
  uint64_t v22 = *(void *)(v20 - 40);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v20 - 44));
  sub_21697C414((_DWORD *)(v20 - 48));
  int v23 = *(atomic_ullong **)(v20 - 56);
  if (v23) {
    sub_216D16E0C(v23);
  }
  if ((a19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a18);
  sub_21697C414(v19);
  if (a16) {
    sub_216D16E0C(a16);
  }
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a13);
  sub_217324F58((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_216D41C64(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C767C68)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D41CA4()
{
  return &unk_26C767C68;
}

uint64_t sub_216D41CB0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  sub_21697D878((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  return a1;
}

void sub_216D41D10(unsigned char *a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[1] - *a4) >> 3);
  if (~a2 + a3 < v4)
  {
    uint64_t v6 = *a4 + 40 * (v4 + a2 - a3);
    if (*(void *)(v6 + 32))
    {
      int v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 24);
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 24));
      uint64_t v10 = MEMORY[0x263F8C230];
      if (!pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C230], v11))
      {
        v22[0] = "sdf/predicateLibrary.h";
        v22[1] = "_CheckOneNameAndDefault";
        _OWORD v22[2] = 367;
        v22[3] = "static void pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved__::Usd"
                 "Object>::_CheckOneNameAndDefault(BOOL &, size_t, size_t, const NamesAndDefaults &) [DomainType = pxrInt"
                 "ernal__aapl__pxrReserved__::UsdObject, ParamType = BOOL]";
        char v23 = 0;
        if (*(char *)(v6 + 23) < 0) {
          uint64_t v6 = *(void *)v6;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(v8, v12, v13, (uint64_t)v20);
        int v14 = v21;
        int v15 = (void **)v20[0];
        pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(v10 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
        if (v14 >= 0) {
          uint64_t v16 = v20;
        }
        else {
          uint64_t v16 = v15;
        }
        if (v19 >= 0) {
          int v17 = __p;
        }
        else {
          int v17 = (void **)__p[0];
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Predicate default parameter '%s' value of type '%s' cannot convert to c++ argument of type '%s' at index %zu", (const char *)v6, (const char *)v16, (const char *)v17, a2);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
        *a1 = 0;
      }
    }
  }
}

void sub_216D41E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D41EA0(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = sub_216891D24((uint64_t)a1, (uint64_t)a2);
  uint64_t v9 = *a1 & v8;
  uint64_t v10 = a1[4];
  if (*(__int16 *)(v10 + 56 * v9 + 4) < 0)
  {
    LOWORD(v11) = 0;
LABEL_7:
    char v12 = sub_216D42080((uint64_t)a1);
    uint64_t v13 = a1[4];
    if (v12)
    {
      uint64_t v9 = v8 & *a1;
      if (*(__int16 *)(v13 + 56 * v9 + 4) < 0)
      {
        LOWORD(v11) = 0;
        int v14 = *(unsigned __int16 *)(v13 + 56 * v9 + 4);
      }
      else
      {
        LOWORD(v11) = 0;
        do
        {
          int v11 = (__int16)(v11 + 1);
          uint64_t v9 = (v9 + 1) & *a1;
        }
        while (v11 <= *(__int16 *)(v13 + 56 * v9 + 4));
        int v14 = *(unsigned __int16 *)(v13 + 56 * v9 + 4);
      }
    }
    else
    {
      int v14 = *(unsigned __int16 *)(v13 + 56 * v9 + 4);
    }
    if (v14 == 0xFFFF)
    {
      uint64_t v15 = v13 + 56 * v9;
      uint64_t v16 = (unsigned char *)(v15 + 8);
      int v17 = *a4;
      if (*((char *)*a4 + 23) < 0)
      {
        sub_216778F24(v16, *(void **)v17, *((void *)v17 + 1));
      }
      else
      {
        long long v18 = *v17;
        *(void *)(v13 + 56 * v9 + 24) = *((void *)v17 + 2);
        *(_OWORD *)uint64_t v16 = v18;
      }
      char v19 = (void *)(v13 + 56 * v9);
      void v19[4] = 0;
      v19[5] = 0;
      v19[6] = 0;
      *(_DWORD *)uint64_t v15 = v8;
      *(_WORD *)(v15 + 4) = v11;
    }
    else
    {
      sub_216D42148(a1, v9, v11, v8, a3, a4);
    }
    ++a1[6];
  }
  else
  {
    LOWORD(v11) = 0;
    while ((sub_2168513F8((uint64_t)a1, (unsigned __int8 *)(v10 + 56 * v9 + 8), a2) & 1) == 0)
    {
      uint64_t v9 = *a1 & (v9 + 1);
      int v11 = (__int16)(v11 + 1);
      uint64_t v10 = a1[4];
      if (v11 > *(__int16 *)(v10 + 56 * v9 + 4)) {
        goto LABEL_7;
      }
    }
  }
  return a1[4] + 56 * v9;
}

uint64_t sub_216D42080(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || (unint64_t v2 = *(void *)(a1 + 48), v2 >= *(void *)(a1 + 56)))
  {
    unint64_t v6 = sub_21686E8DC((void *)a1);
    sub_216D421FC(a1, v6);
    *(unsigned char *)(a1 + 72) = 0;
    return 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = 0;
    float v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      unint64_t v4 = *(void *)(a1 + 40);
      float v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        float v8 = *(float *)(a1 + 68);
        unint64_t v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        unint64_t v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        sub_216D421FC(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_216D42148(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5, long long **a6)
{
  unint64_t v10 = *a6;
  if (*((char *)*a6 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    uint64_t v13 = *((void *)v10 + 2);
    *(_OWORD *)long long __p = v11;
  }
  memset(v14, 0, 24);
  sub_216D423FC(a1, a2, a3, a4, (long long *)__p);
  uint64_t v15 = (void **)v14;
  sub_216D410CC(&v15);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D421FC(uint64_t a1, unint64_t a2)
{
  sub_216D40D48((uint64_t)&v7, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  float v3 = *(unsigned int **)(a1 + 8);
  unint64_t v4 = *(unsigned int **)(a1 + 16);
  if (v3 != v4)
  {
    unint64_t v5 = (unint64_t)(v8[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v3 + 2) != -1)
      {
        if (v5) {
          unint64_t v6 = sub_216891D24((uint64_t)&v7, (uint64_t)(v3 + 2));
        }
        else {
          unint64_t v6 = *v3;
        }
        sub_216D422F8(&v7, v7 & v6, 0, v6, (long long *)(v3 + 2));
      }
      v3 += 14;
    }
    while (v3 != v4);
  }
  void v8[5] = *(void *)(a1 + 48);
  sub_21686E9D4(&v7, (uint64_t *)a1);
  unint64_t v9 = (void **)v8;
  sub_216D40F88(&v9);
}

void sub_216D422D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 56) = &a11;
  sub_216D40F88((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

__n128 sub_216D422F8(void *a1, uint64_t a2, __int16 a3, int a4, long long *a5)
{
  while (1)
  {
    uint64_t v5 = a1[4];
    unint64_t v6 = (int *)(v5 + 56 * a2);
    uint64_t v7 = v6 + 1;
    int v8 = *((__int16 *)v6 + 2);
    if (v8 >= a3) {
      goto LABEL_4;
    }
    unint64_t v9 = (long long *)(v5 + 56 * a2 + 8);
    if (v8 == -1) {
      break;
    }
    uint64_t v10 = *((void *)a5 + 2);
    long long v11 = *a5;
    uint64_t v12 = *(void *)(v5 + 56 * a2 + 24);
    *a5 = *v9;
    *((void *)a5 + 2) = v12;
    *unint64_t v9 = v11;
    *(void *)(v5 + 56 * a2 + 24) = v10;
    uint64_t v13 = (void *)(v5 + 56 * a2);
    uint64_t v14 = *((void *)a5 + 3);
    *((void *)a5 + 3) = v13[4];
    void v13[4] = v14;
    uint64_t v15 = *((void *)a5 + 4);
    *((void *)a5 + 4) = v13[5];
    void v13[5] = v15;
    uint64_t v16 = *((void *)a5 + 5);
    *((void *)a5 + 5) = v13[6];
    v13[6] = v16;
    LOWORD(v13) = *v7;
    *uint64_t v7 = a3;
    int v17 = *v6;
    *unint64_t v6 = a4;
    a3 = (__int16)v13;
    a4 = v17;
LABEL_4:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  long long v18 = *a5;
  *(void *)(v5 + 56 * a2 + 24) = *((void *)a5 + 2);
  *unint64_t v9 = v18;
  *((void *)a5 + 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  char v19 = (__n128 *)(v5 + 56 * a2);
  v19[2].n128_u64[0] = 0;
  v19[2].n128_u64[1] = 0;
  v19[3].n128_u64[0] = 0;
  __n128 result = *(__n128 *)((char *)a5 + 24);
  v19[2] = result;
  v19[3].n128_u64[0] = *((void *)a5 + 5);
  *((void *)a5 + 3) = 0;
  *((void *)a5 + 4) = 0;
  *((void *)a5 + 5) = 0;
  *unint64_t v6 = a4;
  *uint64_t v7 = a3;
  return result;
}

__n128 sub_216D423FC(uint64_t *a1, uint64_t a2, __int16 a3, int a4, long long *a5)
{
  uint64_t v5 = a1[4] + 56 * a2;
  uint64_t v6 = *((void *)a5 + 2);
  long long v7 = *a5;
  uint64_t v8 = *(void *)(v5 + 24);
  *a5 = *(_OWORD *)(v5 + 8);
  *((void *)a5 + 2) = v8;
  *(_OWORD *)(v5 + 8) = v7;
  *(void *)(v5 + 24) = v6;
  uint64_t v9 = *((void *)a5 + 3);
  *((void *)a5 + 3) = *(void *)(v5 + 32);
  *(void *)(v5 + 32) = v9;
  uint64_t v10 = *((void *)a5 + 4);
  *((void *)a5 + 4) = *(void *)(v5 + 40);
  *(void *)(v5 + 40) = v10;
  uint64_t v11 = *((void *)a5 + 5);
  *((void *)a5 + 5) = *(void *)(v5 + 48);
  *(void *)(v5 + 48) = v11;
  __int16 v12 = *(_WORD *)(v5 + 4);
  *(_WORD *)(v5 + 4) = a3;
  int v13 = *(_DWORD *)v5;
  *(_DWORD *)uint64_t v5 = a4;
  uint64_t v14 = a2 + 1;
  uint64_t v15 = *a1;
  uint64_t v16 = *a1 & v14;
  __int16 v17 = v12 + 1;
  uint64_t v18 = a1[4];
  char v19 = (int *)(v18 + 56 * v16);
  char v21 = v19 + 1;
  for (unsigned __int16 i = *((_WORD *)v19 + 2); i != 0xFFFF; unsigned __int16 i = *((_WORD *)v19 + 2))
  {
    if (v17 > (__int16)i)
    {
      if (v17 >= 4096) {
        *((unsigned char *)a1 + 72) = 1;
      }
      uint64_t v22 = v18 + 56 * v16;
      long long v23 = *a5;
      uint64_t v24 = *((void *)a5 + 2);
      uint64_t v25 = *(void *)(v22 + 24);
      *a5 = *(_OWORD *)(v22 + 8);
      *((void *)a5 + 2) = v25;
      *(void *)(v22 + 24) = v24;
      *(_OWORD *)(v22 + 8) = v23;
      uint64_t v26 = *((void *)a5 + 3);
      *((void *)a5 + 3) = *(void *)(v22 + 32);
      *(void *)(v22 + 32) = v26;
      uint64_t v27 = *((void *)a5 + 4);
      *((void *)a5 + 4) = *(void *)(v22 + 40);
      *(void *)(v22 + 40) = v27;
      uint64_t v28 = *((void *)a5 + 5);
      *((void *)a5 + 5) = *(void *)(v22 + 48);
      *(void *)(v22 + 48) = v28;
      LOWORD(v25) = *v21;
      *char v21 = v17;
      int v29 = *v19;
      *char v19 = v13;
      uint64_t v15 = *a1;
      uint64_t v18 = a1[4];
      __int16 v17 = v25;
      int v13 = v29;
    }
    uint64_t v16 = v15 & (v16 + 1);
    ++v17;
    char v19 = (int *)(v18 + 56 * v16);
    char v21 = v19 + 1;
  }
  uint64_t v30 = v18 + 56 * v16;
  long long v31 = *a5;
  *(void *)(v30 + 24) = *((void *)a5 + 2);
  *(_OWORD *)(v30 + 8) = v31;
  *((void *)a5 + 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  *(void *)(v30 + 32) = 0;
  *(void *)(v30 + 40) = 0;
  *(void *)(v30 + 48) = 0;
  __n128 result = *(__n128 *)((char *)a5 + 24);
  *(__n128 *)(v30 + 32) = result;
  *(void *)(v30 + 48) = *((void *)a5 + 5);
  *((void *)a5 + 3) = 0;
  *((void *)a5 + 4) = 0;
  *((void *)a5 + 5) = 0;
  *char v19 = v13;
  *char v21 = v17;
  return result;
}

uint64_t sub_216D425A8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216D42620((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216D42620(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216D426B8((uint64_t)v13);
  return v11;
}

uint64_t sub_216D426B8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216D426F0((void *)a1);
  }
  return a1;
}

void *sub_216D426F0(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  unint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_216D42758(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_216D42790(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    unint64_t v4 = result;
    do
    {
      double v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *sub_216D42804(pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *a1, uint64_t a2)
{
  unint64_t v4 = *(long long **)a2;
  unint64_t v3 = *(void *)(a2 + 8);
  uint64_t v5 = (long long *)(*(void *)a2 + 40 * v3);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  sub_216D42870(a1, v4, v5, v3);
  *((void *)a1 + 3) = pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::_CountDefaults(a1);
  return a1;
}

void sub_216D42858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169B5D08((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_216D42870(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2168724E8(result, a4);
    uint64_t result = sub_216D428F8((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216D428D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2169B5D08(&a9);
  _Unwind_Resume(a1);
}

void *sub_216D428F8(uint64_t a1, long long *a2, long long *a3, void *__dst)
{
  unint64_t v4 = __dst;
  uint64_t v11 = __dst;
  __int16 v12 = (char *)__dst;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      sub_216D429A4(v7, v4, v6);
      uint64_t v6 = (long long *)((char *)v6 + 40);
      unint64_t v4 = v12 + 40;
      v12 += 40;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_216D4161C((uint64_t)v9);
  return v4;
}

void sub_216D42990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216D429A4(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    __n128 __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  return sub_2168EE4C4(__dst + 3, (void *)a3 + 3);
}

void sub_216D429FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D42A18(uint64_t a1)
{
  *(void *)a1 = &unk_26C767BC8;
  unint64_t v3 = (void **)(a1 + 8);
  sub_2169B5D08(&v3);
  return a1;
}

void sub_216D42A70(char *a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v2 = (void **)(a1 + 8);
  sub_2169B5D08(&v2);
  operator delete(a1);
}

void *sub_216D42ACC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x30uLL);
  *unint64_t v4 = &unk_26C767BC8;
  double v4[2] = 0;
  void v4[3] = 0;
  v4[1] = 0;
  uint64_t result = sub_216D41474(v4 + 1, *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  void v4[4] = *(void *)(a1 + 32);
  *unint64_t v4 = &unk_26C767C88;
  *a2 = v4;
  return result;
}

void sub_216D42B6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216D42B80(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
  if (v4 < 1 - *(void *)(a1 + 32))
  {
    long long __p = "sdf/predicateLibrary.h";
    uint64_t v9 = "_TryToBindCall";
    uint64_t v10 = 638;
    uint64_t v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:87:28)]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function requires at least %zu argument%s, %zu given");
LABEL_5:
    *(void *)(a3 + 24) = 0;
    return;
  }
  if (v4 >= 2)
  {
    long long __p = "sdf/predicateLibrary.h";
    uint64_t v9 = "_TryToBindCall";
    uint64_t v10 = 643;
    uint64_t v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:87:28)]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function takes at most %zu argument%s, %zu given");
    goto LABEL_5;
  }
  BOOL v7 = 0;
  long long __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (sub_216D41654(&v7, a2, (void *)(a1 + 8), (uint64_t *)&__p))
  {
    __int16 v5 = v7;
    *(void *)a3 = &unk_26C767CD0;
    *(_WORD *)(a3 + 8) = v5;
    uint64_t v6 = a3;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)(a3 + 24) = v6;
  if (__p) {
    operator delete(__p);
  }
}

void sub_216D42CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_216D42D08(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26C767CD0;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_216D42D54(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C767CD0;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

uint64_t sub_216D42D84(uint64_t a1, uint64_t a2)
{
  sub_216D3C05C((uint64_t)v9, a2);
  sub_216D41CB0((uint64_t)&v14, (uint64_t)v9);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 8);
  char v19 = *(unsigned char *)(a1 + 8);
  sub_216D16CFC((uint64_t)v20, (uint64_t *)&v15, &v16);
  __int16 v5 = v21;
  if (!v21 || (unint64_t v6 = v21[7], (v6 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v21, v4);
    unint64_t v6 = v5[7];
  }
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_21697C414(&v22);
  if (v21) {
    sub_216D16E0C(v21);
  }
  int v7 = v14;
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (v15) {
    sub_216D16E0C(v15);
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
  if ((v6 & 0x40) != 0 && v7 == 1) {
    return v3 | 0x100000000;
  }
  else {
    return (v3 == 0) ^ (v6 >> 6) & 1;
  }
}

void sub_216D42ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, atomic_ullong *a16, int a17, int a18, uint64_t a19)
{
  uint64_t v22 = *(void *)(v20 - 40);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v20 - 44));
  sub_21697C414((_DWORD *)(v20 - 48));
  int v23 = *(atomic_ullong **)(v20 - 56);
  if (v23) {
    sub_216D16E0C(v23);
  }
  if ((a19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a18);
  sub_21697C414(v19);
  if (a16) {
    sub_216D16E0C(a16);
  }
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a13);
  sub_217324F58((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_216D42F9C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C767D30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D42FDC()
{
  return &unk_26C767D30;
}

uint64_t sub_216D42FE8(uint64_t a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v3 = (void **)(a1 + 8);
  sub_2169B5D08(&v3);
  return a1;
}

void sub_216D43040(char *a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v2 = (void **)(a1 + 8);
  sub_2169B5D08(&v2);
  operator delete(a1);
}

void *sub_216D4309C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x30uLL);
  *unint64_t v4 = &unk_26C767BC8;
  double v4[2] = 0;
  void v4[3] = 0;
  v4[1] = 0;
  uint64_t result = sub_216D41474(v4 + 1, *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  void v4[4] = *(void *)(a1 + 32);
  *unint64_t v4 = &unk_26C767D50;
  *a2 = v4;
  return result;
}

void sub_216D4313C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216D43150(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
  if (v4 < 1 - *(void *)(a1 + 32))
  {
    long long __p = "sdf/predicateLibrary.h";
    uint64_t v9 = "_TryToBindCall";
    uint64_t v10 = 638;
    int v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:95:26)]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function requires at least %zu argument%s, %zu given");
LABEL_5:
    *(void *)(a3 + 24) = 0;
    return;
  }
  if (v4 >= 2)
  {
    long long __p = "sdf/predicateLibrary.h";
    uint64_t v9 = "_TryToBindCall";
    uint64_t v10 = 643;
    int v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:95:26)]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function takes at most %zu argument%s, %zu given");
    goto LABEL_5;
  }
  BOOL v7 = 0;
  long long __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (sub_216D41654(&v7, a2, (void *)(a1 + 8), (uint64_t *)&__p))
  {
    __int16 v5 = v7;
    *(void *)a3 = &unk_26C767D98;
    *(_WORD *)(a3 + 8) = v5;
    uint64_t v6 = a3;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)(a3 + 24) = v6;
  if (__p) {
    operator delete(__p);
  }
}

void sub_216D432B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_216D432D8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26C767D98;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_216D43324(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C767D98;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

uint64_t sub_216D43354(uint64_t a1, uint64_t a2)
{
  sub_216D3C05C((uint64_t)v10, a2);
  sub_216D41CB0((uint64_t)v15, (uint64_t)v10);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 8);
  char v20 = *(unsigned char *)(a1 + 8);
  sub_216D435AC((uint64_t)v15, (uint64_t)v21);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v21, v4))
  {
    uint64_t v6 = v22;
    if (!v22 || (atomic_ullong v7 = v22[7], (v7 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v22, v5);
      atomic_ullong v7 = v6[7];
    }
    if ((v7 & 4) != 0) {
      uint64_t v8 = v3 | 0x100000000;
    }
    else {
      uint64_t v8 = v3 == 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_21697C414(&v23);
  if (v22) {
    sub_216D16E0C(v22);
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  return v8;
}

void sub_216D43494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, atomic_ullong *a16, int a17, int a18, uint64_t a19)
{
  uint64_t v21 = *(void *)(v19 - 24);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v19 - 28));
  sub_21697C414((_DWORD *)(v19 - 32));
  uint64_t v22 = *(atomic_ullong **)(v19 - 40);
  if (v22) {
    sub_216D16E0C(v22);
  }
  if ((a19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a18);
  sub_21697C414(&a17);
  if (a16) {
    sub_216D16E0C(a16);
  }
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a13);
  sub_217324F58((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_216D43560(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C767DF8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D435A0()
{
  return &unk_26C767DF8;
}

_DWORD *sub_216D435AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)a1 == 1)
  {
    return (_DWORD *)sub_216D3B5F8(a2, 1, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  }
  else
  {
    *(_DWORD *)a2 = 1;
    *(void *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 16));
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a2 + 20));
    *(void *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t sub_216D43630(uint64_t a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v3 = (void **)(a1 + 8);
  sub_2169B5D08(&v3);
  return a1;
}

void sub_216D43688(char *a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v2 = (void **)(a1 + 8);
  sub_2169B5D08(&v2);
  operator delete(a1);
}

void *sub_216D436E4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x30uLL);
  *unint64_t v4 = &unk_26C767BC8;
  double v4[2] = 0;
  void v4[3] = 0;
  v4[1] = 0;
  uint64_t result = sub_216D41474(v4 + 1, *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  void v4[4] = *(void *)(a1 + 32);
  *unint64_t v4 = &unk_26C767E18;
  *a2 = v4;
  return result;
}

void sub_216D43784(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216D43798(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3);
  if (v4 < 1 - *(void *)(a1 + 32))
  {
    long long __p = "sdf/predicateLibrary.h";
    uint64_t v9 = "_TryToBindCall";
    uint64_t v10 = 638;
    int v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:107:26)]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function requires at least %zu argument%s, %zu given");
LABEL_5:
    *(void *)(a3 + 24) = 0;
    return;
  }
  if (v4 >= 2)
  {
    long long __p = "sdf/predicateLibrary.h";
    uint64_t v9 = "_TryToBindCall";
    uint64_t v10 = 643;
    int v11 = "static PredicateFunction pxrInternal__aapl__pxrReserved__::SdfPredicateLibrary<pxrInternal__aapl__pxrReserved_"
          "_::UsdObject>::_TryToBindCall(const Fn &, const std::vector<SdfPredicateExpression::FnArg> &, const NamesAndDe"
          "faults &) [DomainType = pxrInternal__aapl__pxrReserved__::UsdObject, Fn = (lambda at /Library/Caches/com.apple"
          ".xbs/Sources/USDLib/USD/pxr/usd/usd/collectionPredicateLibrary.cpp:107:26)]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Function takes at most %zu argument%s, %zu given");
    goto LABEL_5;
  }
  BOOL v7 = 0;
  long long __p = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (sub_216D41654(&v7, a2, (void *)(a1 + 8), (uint64_t *)&__p))
  {
    __int16 v5 = v7;
    *(void *)a3 = &unk_26C767E60;
    *(_WORD *)(a3 + 8) = v5;
    uint64_t v6 = a3;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)(a3 + 24) = v6;
  if (__p) {
    operator delete(__p);
  }
}

void sub_216D43900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_WORD *sub_216D43920(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26C767E60;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_216D4396C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C767E60;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

uint64_t sub_216D4399C(uint64_t a1, uint64_t a2)
{
  sub_216D3C05C((uint64_t)v10, a2);
  sub_216D41CB0((uint64_t)v15, (uint64_t)v10);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 8);
  char v20 = *(unsigned char *)(a1 + 8);
  sub_216D435AC((uint64_t)v15, (uint64_t)v21);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v21, v4))
  {
    uint64_t v6 = v22;
    if (!v22 || (atomic_ullong v7 = v22[7], (v7 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v22, v5);
      atomic_ullong v7 = v6[7];
    }
    if ((v7 & 8) != 0) {
      uint64_t v8 = v3 | 0x100000000;
    }
    else {
      uint64_t v8 = v3 == 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_21697C414(&v23);
  if (v22) {
    sub_216D16E0C(v22);
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (v16) {
    sub_216D16E0C(v16);
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  return v8;
}

void sub_216D43ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, atomic_ullong *a16, int a17, int a18, uint64_t a19)
{
  uint64_t v21 = *(void *)(v19 - 24);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v19 - 28));
  sub_21697C414((_DWORD *)(v19 - 32));
  uint64_t v22 = *(atomic_ullong **)(v19 - 40);
  if (v22) {
    sub_216D16E0C(v22);
  }
  if ((a19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a18);
  sub_21697C414(&a17);
  if (a16) {
    sub_216D16E0C(a16);
  }
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a13);
  sub_217324F58((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_216D43BA8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C767EC0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D43BE8()
{
  return &unk_26C767EC0;
}

uint64_t sub_216D43BF4(uint64_t a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v3 = (void **)(a1 + 8);
  sub_2169B5D08(&v3);
  return a1;
}

void sub_216D43C4C(char *a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v2 = (void **)(a1 + 8);
  sub_2169B5D08(&v2);
  operator delete(a1);
}

void *sub_216D43CA8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x30uLL);
  *unint64_t v4 = &unk_26C767BC8;
  double v4[2] = 0;
  void v4[3] = 0;
  v4[1] = 0;
  uint64_t result = sub_216D41474(v4 + 1, *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  void v4[4] = *(void *)(a1 + 32);
  *unint64_t v4 = &unk_26C767EE0;
  *a2 = v4;
  return result;
}

void sub_216D43D48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216D43D5C(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  char v4 = sub_216D44040(a1);
  int64x2_t v24 = 0uLL;
  v25[0] = 0;
  __int16 v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 == v6) {
    goto LABEL_33;
  }
  char v7 = v4 ^ 1;
  do
  {
    if (*((char *)v5 + 23) < 0)
    {
      if (v5[1]) {
        goto LABEL_30;
      }
    }
    else if (*((unsigned char *)v5 + 23))
    {
      goto LABEL_30;
    }
    if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 3)))
    {
      uint64_t v8 = v5[4];
      if ((v8 & 4) != 0) {
        (*(void (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v5 + 3);
      }
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v29);
      if (pxrInternal__aapl__pxrReserved__::KindRegistry::HasKind((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v29, v9))
      {
        uint64_t v10 = v24.i64[1];
        if (v24.i64[1] >= v25[0])
        {
          uint64_t v12 = (v24.i64[1] - v24.i64[0]) >> 3;
          if ((unint64_t)(v12 + 1) >> 61) {
            sub_21677CB10();
          }
          unint64_t v13 = (v25[0] - v24.i64[0]) >> 2;
          if (v13 <= v12 + 1) {
            unint64_t v13 = v12 + 1;
          }
          if (v25[0] - v24.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          uint64_t v28 = v25;
          if (v14) {
            long long v15 = (char *)sub_21677CB28((uint64_t)v25, v14);
          }
          else {
            long long v15 = 0;
          }
          int v16 = (unint64_t *)&v15[8 * v12];
          int v17 = &v15[8 * v14];
          uint64_t v27 = v17;
          *int v16 = v29;
          int v11 = v16 + 1;
          unint64_t v29 = 0;
          *(void *)&v26[16] = v16 + 1;
          int v18 = (void *)v24.i64[1];
          uint64_t v19 = (void *)v24.i64[0];
          if (v24.i64[1] == v24.i64[0])
          {
            int64x2_t v21 = vdupq_n_s64(v24.u64[1]);
          }
          else
          {
            do
            {
              unint64_t v20 = *--v18;
              *--int v16 = v20;
              *int v18 = 0;
            }
            while (v18 != v19);
            int64x2_t v21 = v24;
            int v11 = *(void **)&v26[16];
            int v17 = v27;
          }
          v24.i64[0] = (uint64_t)v16;
          v24.i64[1] = (uint64_t)v11;
          *(int64x2_t *)&char v26[8] = v21;
          uint64_t v22 = (char *)v25[0];
          v25[0] = v17;
          uint64_t v27 = v22;
          *(void *)uint64_t v26 = v21.i64[0];
          sub_2168BE9D8((uint64_t)v26);
        }
        else
        {
          *(void *)v24.i64[1] = v29;
          int v11 = (void *)(v10 + 8);
          unint64_t v29 = 0;
        }
        v24.i64[1] = (uint64_t)v11;
      }
      if ((v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
LABEL_30:
    v5 += 5;
  }
  while (v5 != v6);
  if (v24.i64[0] == v24.i64[1])
  {
LABEL_33:
    *(void *)(a2 + 24) = 0;
    goto LABEL_34;
  }
  memset(v26, 0, sizeof(v26));
  sub_21698FA28(v26, (uint64_t *)v24.i64[0], (uint64_t *)v24.i64[1], (v24.i64[1] - v24.i64[0]) >> 3);
  LOBYTE(v27) = v7;
  *(void *)(a2 + 24) = 0;
  int v23 = (char *)operator new(0x28uLL);
  *(void *)int v23 = &unk_26C767F28;
  *(_OWORD *)(v23 + 8) = *(_OWORD *)v26;
  *((void *)v23 + 3) = *(void *)&v26[16];
  memset(v26, 0, sizeof(v26));
  v23[32] = v7;
  *(void *)(a2 + 24) = v23;
  unint64_t v29 = (unint64_t)v26;
  sub_216889A04((void ***)&v29);
LABEL_34:
  unint64_t v29 = (unint64_t)&v24;
  sub_216889A04((void ***)&v29);
}

void sub_216D43FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a13;
  sub_216889A04(&a18);
  a18 = (void **)&a9;
  sub_216889A04(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_216D44040(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  while (1)
  {
    int v3 = *((char *)v2 + 23);
    if (v3 < 0) {
      break;
    }
    char v4 = (int *)v2;
    if (v3 == 6) {
      goto LABEL_7;
    }
LABEL_11:
    v2 += 5;
    if (v2 == v1) {
      return 0;
    }
  }
  if (v2[1] != 6) {
    goto LABEL_11;
  }
  char v4 = (int *)*v2;
LABEL_7:
  int v5 = *v4;
  int v6 = *((unsigned __int16 *)v4 + 2);
  if (v5 != 1769108595 || v6 != 29795) {
    goto LABEL_11;
  }
  uint64_t v9 = (unsigned __int8 *)(v2 + 3);
  if (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 3)))
  {
    uint64_t v10 = v2[4];
    if ((v10 & 4) != 0) {
      uint64_t v9 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(v2 + 3);
    }
    int v11 = *v9;
    return v11 != 0;
  }
  if (!sub_21695A85C((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 3)))
  {
    uint64_t result = sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 3));
    if (!result) {
      return result;
    }
    uint64_t v13 = v2[4];
    if ((v13 & 4) != 0) {
      unint64_t v14 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(v2 + 3);
    }
    else {
      unint64_t v14 = *(unsigned __int8 **)v9;
    }
    if ((char)v14[23] < 0)
    {
      if (!*((void *)v14 + 1)) {
        return 0;
      }
      unint64_t v14 = *(unsigned __int8 **)v14;
    }
    else if (!v14[23])
    {
      return 0;
    }
    int v15 = *v14;
    uint64_t result = 1;
    if (v15 == 49 || v15 == 89 || v15 == 121) {
      return result;
    }
    return 0;
  }
  uint64_t v12 = v2[4];
  if ((v12 & 4) != 0) {
    uint64_t v9 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t *))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(v2 + 3);
  }
  int v11 = *(_DWORD *)v9;
  return v11 != 0;
}

uint64_t sub_216D441A0(uint64_t a1)
{
  *(void *)a1 = &unk_26C767F28;
  int v3 = (void **)(a1 + 8);
  sub_216889A04(&v3);
  return a1;
}

void sub_216D441F8(char *a1)
{
  *(void *)a1 = &unk_26C767F28;
  uint64_t v2 = (void **)(a1 + 8);
  sub_216889A04(&v2);
  operator delete(a1);
}

void *sub_216D44254(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_26C767F28;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  sub_21698FA28(v2 + 1, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  *((unsigned char *)v2 + 32) = *(unsigned char *)(a1 + 32);
  return v2;
}

void sub_216D442C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216D442D4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C767F28;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t result = sub_21698FA28((void *)(a2 + 8), *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a1 + 32);
  return result;
}

void sub_216D44338(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  sub_216889A04(&v1);
}

void sub_216D44364(void **a1)
{
  uint64_t v2 = a1 + 1;
  sub_216889A04(&v2);
  operator delete(a1);
}

uint64_t sub_216D443A4(uint64_t a1, uint64_t a2)
{
  sub_216D435AC(a2, (uint64_t)v12);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v12, v3))
  {
    uint64_t v11 = 0;
    char v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4) {
      char v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v17 = 0;
    BOOL v5 = sub_216D1D1CC((uint64_t)v12, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 208), (uint64_t)&v11, &v17);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v5)
    {
      char v7 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a1 + 8);
      uint64_t v8 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(a1 + 16);
      while (v7 != v8)
      {
        if (*(unsigned char *)(a1 + 32))
        {
          if (pxrInternal__aapl__pxrReserved__::KindRegistry::IsA((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v11, v7, v6))
          {
            goto LABEL_23;
          }
        }
        else if ((v11 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v7 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_23:
          uint64_t v9 = 0x100000001;
          goto LABEL_16;
        }
        char v7 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v7 + 8);
      }
    }
    uint64_t v9 = 0x100000000;
LABEL_16:
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
  return v9;
}

void sub_216D444F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, int a13, uint64_t a14)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a13);
  sub_217324F58((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_216D44578(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C767F88)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D445B8()
{
  return &unk_26C767F88;
}

uint64_t sub_216D445C4(uint64_t a1)
{
  *(void *)a1 = &unk_26C767BC8;
  int v3 = (void **)(a1 + 8);
  sub_2169B5D08(&v3);
  return a1;
}

void sub_216D4461C(char *a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v2 = (void **)(a1 + 8);
  sub_2169B5D08(&v2);
  operator delete(a1);
}

void *sub_216D44678@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v4 = operator new(0x30uLL);
  *char v4 = &unk_26C767BC8;
  double v4[2] = 0;
  void v4[3] = 0;
  v4[1] = 0;
  uint64_t result = sub_216D41474(v4 + 1, *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  void v4[4] = *(void *)(a1 + 32);
  *char v4 = &unk_26C767FA8;
  *a2 = v4;
  return result;
}

void sub_216D44718(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216D4472C(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    __int16 v5 = 0;
    char v6 = 0;
    unsigned __int8 v7 = 0;
    while (1)
    {
      if (*(char *)(v3 + 23) < 0)
      {
        if (*(void *)(v3 + 8)) {
          goto LABEL_43;
        }
      }
      else if (*(unsigned char *)(v3 + 23))
      {
        goto LABEL_43;
      }
      if ((sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 24)) & 1) == 0)
      {
LABEL_43:
        *(void *)(a2 + 24) = 0;
        return;
      }
      uint64_t v8 = *(void *)(v3 + 32);
      if ((v8 & 4) != 0) {
        uint64_t v9 = (int *)(*(uint64_t (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v3 + 24);
      }
      else {
        uint64_t v9 = *(int **)(v3 + 24);
      }
      if (*((char *)v9 + 23) < 0)
      {
        uint64_t v11 = *((void *)v9 + 1);
        if (v11 == 3)
        {
          if (**(_WORD **)v9 != 25956 || *(unsigned char *)(*(void *)v9 + 2) != 102) {
            goto LABEL_43;
          }
          goto LABEL_36;
        }
        if (v11 == 4)
        {
          int v14 = **(_DWORD **)v9;
          goto LABEL_38;
        }
        if (v11 != 5) {
          goto LABEL_43;
        }
        uint64_t v9 = *(int **)v9;
      }
      else
      {
        int v10 = *((unsigned __int8 *)v9 + 23);
        if (v10 == 3)
        {
          if (*(_WORD *)v9 != 25956 || *((unsigned char *)v9 + 2) != 102) {
            goto LABEL_43;
          }
LABEL_36:
          unsigned __int8 v7 = 1;
          goto LABEL_40;
        }
        if (v10 == 4)
        {
          int v14 = *v9;
LABEL_38:
          if (v14 != 1919252079) {
            goto LABEL_43;
          }
          __int16 v5 = 1;
          goto LABEL_40;
        }
        if (v10 != 5) {
          goto LABEL_43;
        }
      }
      if (*v9 != 1935764579 || *((unsigned char *)v9 + 4) != 115) {
        goto LABEL_43;
      }
      char v6 = 1;
LABEL_40:
      v3 += 40;
      if (v3 == v4) {
        goto LABEL_45;
      }
    }
  }
  __int16 v5 = 0;
  char v6 = 0;
  unsigned __int8 v7 = 0;
LABEL_45:
  *(void *)a2 = &unk_26C767FF0;
  *(unsigned char *)(a2 + 10) = v6;
  *(_WORD *)(a2 + 8) = v7 | (unsigned __int16)(v5 << 8);
  *(void *)(a2 + 24) = a2;
}

_WORD *sub_216D44900(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26C767FF0;
  result[4] = *(_WORD *)(a1 + 8);
  *((unsigned char *)result + 10) = *(unsigned char *)(a1 + 10);
  return result;
}

uint64_t sub_216D44954(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26C767FF0;
  __int16 v2 = *(_WORD *)(result + 8);
  *(unsigned char *)(a2 + 10) = *(unsigned char *)(result + 10);
  *(_WORD *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_216D4498C(uint64_t a1, uint64_t a2)
{
  sub_216D435AC(a2, (uint64_t)&v7);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v7, v3))uint64_t v5 = *(unsigned __int8 *)(a1 + 8 + sub_216D44AB0((uint64_t)&v7, v4)) | 0x100000000; {
  else
  }
    uint64_t v5 = 0;
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  return v5;
}

void sub_216D44A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13)
{
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a12);
  sub_217324F58((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216D44A64(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C768050)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D44AA4()
{
  return &unk_26C768050;
}

uint64_t sub_216D44AB0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  __int16 v2 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (!v2 || (*((unsigned char *)v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  return pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSpecifier(v2);
}

uint64_t sub_216D44AF8(uint64_t a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v3 = (void **)(a1 + 8);
  sub_2169B5D08(&v3);
  return a1;
}

void sub_216D44B50(char *a1)
{
  *(void *)a1 = &unk_26C767BC8;
  __int16 v2 = (void **)(a1 + 8);
  sub_2169B5D08(&v2);
  operator delete(a1);
}

void *sub_216D44BAC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  *uint64_t v4 = &unk_26C767BC8;
  double v4[2] = 0;
  void v4[3] = 0;
  v4[1] = 0;
  uint64_t result = sub_216D41474(v4 + 1, *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  void v4[4] = *(void *)(a1 + 32);
  *uint64_t v4 = &unk_26C768070;
  *a2 = v4;
  return result;
}

void sub_216D44C4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216D44C60(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  char v4 = sub_216D44040(a1);
  long long __p = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v5 = *a1;
  char v6 = a1[1];
  if (*a1 != v6)
  {
    while (1)
    {
      if (*((char *)v5 + 23) < 0)
      {
        if (!v5[1])
        {
LABEL_6:
          if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 3)))
          {
            uint64_t v7 = v5[4];
            if ((v7 & 4) != 0) {
              (*(void (**)(uint64_t *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v5 + 3);
            }
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v23);
            TypeFromSchemauint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeFromSchemaTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v23, v8);
            if ((v23 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v23);
            if ((void)v23 != TypeFromSchemaTypeName)
            {
              int v10 = v27;
              if (v27 >= v28)
              {
                uint64_t v12 = ((char *)v27 - (unsigned char *)__p) >> 3;
                if ((unint64_t)(v12 + 1) >> 61) {
                  sub_21677CB10();
                }
                unint64_t v13 = ((char *)v28 - (unsigned char *)__p) >> 2;
                if (v13 <= v12 + 1) {
                  unint64_t v13 = v12 + 1;
                }
                if ((unint64_t)((char *)v28 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v14 = v13;
                }
                if (v14) {
                  int v15 = (char *)sub_21677CB28((uint64_t)&v28, v14);
                }
                else {
                  int v15 = 0;
                }
                uint64_t v16 = (uint64_t *)&v15[8 * v12];
                *uint64_t v16 = TypeFromSchemaTypeName;
                uint64_t v11 = v16 + 1;
                int v18 = (char *)__p;
                uint64_t v17 = (char *)v27;
                if (v27 != __p)
                {
                  do
                  {
                    uint64_t v19 = *((void *)v17 - 1);
                    v17 -= 8;
                    *--uint64_t v16 = v19;
                  }
                  while (v17 != v18);
                  uint64_t v17 = (char *)__p;
                }
                long long __p = v16;
                uint64_t v27 = v11;
                uint64_t v28 = (uint64_t *)&v15[8 * v14];
                if (v17) {
                  operator delete(v17);
                }
              }
              else
              {
                *uint64_t v27 = TypeFromSchemaTypeName;
                uint64_t v11 = v10 + 1;
              }
              uint64_t v27 = v11;
            }
          }
        }
      }
      else if (!*((unsigned char *)v5 + 23))
      {
        goto LABEL_6;
      }
      v5 += 5;
      if (v5 == v6)
      {
        unint64_t v20 = __p;
        uint64_t v21 = (uint64_t)v27;
        goto LABEL_32;
      }
    }
  }
  uint64_t v21 = 0;
  unint64_t v20 = 0;
LABEL_32:
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  sub_2168915D4(&v23, v20, v21, (v21 - (uint64_t)v20) >> 3);
  char v25 = v4;
  *(void *)(a2 + 24) = 0;
  uint64_t v22 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v22 = &unk_26C7680B8;
  *(_OWORD *)(v22 + 8) = v23;
  *((void *)v22 + 3) = v24;
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  v22[32] = v4;
  *(void *)(a2 + 24) = v22;
  if (__p)
  {
    uint64_t v27 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_216D44EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216D44F10(void *a1)
{
  *a1 = &unk_26C7680B8;
  __int16 v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216D44F60(void *__p)
{
  *long long __p = &unk_26C7680B8;
  __int16 v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void *sub_216D44FC0(uint64_t a1)
{
  __int16 v2 = operator new(0x28uLL);
  void *v2 = &unk_26C7680B8;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  sub_2168915D4(v2 + 1, *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  *((unsigned char *)v2 + 32) = *(unsigned char *)(a1 + 32);
  return v2;
}

void sub_216D4502C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216D45040(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7680B8;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t result = sub_2168915D4((void *)(a2 + 8), *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a1 + 32);
  return result;
}

void sub_216D450A4(uint64_t a1)
{
  __int16 v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void sub_216D450BC(void *__p)
{
  __int16 v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

uint64_t sub_216D45100(uint64_t a1, uint64_t a2)
{
  sub_216D435AC(a2, (uint64_t)&v12);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v12, v3))
  {
    uint64_t v10 = 0;
    goto LABEL_15;
  }
  char v6 = v13;
  if (!v13 || (*((unsigned char *)v13 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v13, v4);
  }
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *(uint64_t **)(a1 + 16);
  if (v7 == v8)
  {
LABEL_12:
    uint64_t v10 = 0x100000000;
    goto LABEL_15;
  }
  int v9 = (char *)(*((void *)v6 + 3) + 40);
  while (*(unsigned char *)(a1 + 32))
  {
    if (*(void *)v9 == *v7) {
      goto LABEL_14;
    }
LABEL_11:
    if (++v7 == v8) {
      goto LABEL_12;
    }
  }
  if ((pxrInternal__aapl__pxrReserved__::TfType::IsA(v9, *v7, v5) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v10 = 0x100000001;
LABEL_15:
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C((atomic_ullong *)v13);
  }
  return v10;
}

void sub_216D451FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13)
{
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a12);
  sub_217324F58((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216D45244(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C768118)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D45284()
{
  return &unk_26C768118;
}

uint64_t sub_216D45290(uint64_t a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v3 = (void **)(a1 + 8);
  sub_2169B5D08(&v3);
  return a1;
}

void sub_216D452E8(char *a1)
{
  *(void *)a1 = &unk_26C767BC8;
  __int16 v2 = (void **)(a1 + 8);
  sub_2169B5D08(&v2);
  operator delete(a1);
}

void *sub_216D45344@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  char v4 = operator new(0x30uLL);
  *char v4 = &unk_26C767BC8;
  double v4[2] = 0;
  void v4[3] = 0;
  v4[1] = 0;
  uint64_t result = sub_216D41474(v4 + 1, *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  void v4[4] = *(void *)(a1 + 32);
  *char v4 = &unk_26C768138;
  *a2 = v4;
  return result;
}

void sub_216D453E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216D453F8(uint64_t ***a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = a1[1];
  if (*a1 == v4)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v14 = 0;
    long long __p = 0;
    unint64_t v36 = 0;
    char v37 = 0;
LABEL_50:
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    sub_2168915D4(&v32, v14, v13, (v13 - (uint64_t)v14) >> 3);
    uint64_t v34 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(a2 + 24) = 0;
    unint64_t v29 = (char *)operator new(0x28uLL);
    *(void *)unint64_t v29 = &unk_26C768180;
    *(_OWORD *)(v29 + 8) = v32;
    long long v32 = 0uLL;
    uint64_t v30 = v33;
    uint64_t v31 = v34;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    *((void *)v29 + 3) = v30;
    *((void *)v29 + 4) = v31;
    *(void *)(a2 + 24) = v29;
    if (__p)
    {
      unint64_t v36 = (uint64_t *)__p;
      operator delete(__p);
    }
    goto LABEL_55;
  }
  char v6 = *a1;
  while (1)
  {
    int v7 = *((char *)v6 + 23);
    if (v7 < 0) {
      break;
    }
    uint64_t v8 = (uint64_t *)v6;
    if (v7 == 12) {
      goto LABEL_8;
    }
LABEL_12:
    v6 += 5;
    if (v6 == v4)
    {
      uint64_t v12 = 0;
LABEL_19:
      long long __p = 0;
      unint64_t v36 = 0;
      char v37 = 0;
      if (v3 == v4)
      {
        uint64_t v13 = 0;
        int v14 = 0;
        goto LABEL_50;
      }
      while (1)
      {
        if (*((char *)v3 + 23) < 0)
        {
          if (!v3[1])
          {
LABEL_24:
            if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 3)))
            {
              uint64_t v16 = v3[4];
              if ((v16 & 4) != 0) {
                (*(void (**)(uint64_t **))(((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v3 + 3);
              }
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v32);
              TypeFromSchemauint64_t TypeName = pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeFromSchemaTypeName((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&v32, v17);
              if ((v32 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v32);
              if ((void)v32 != TypeFromSchemaTypeName)
              {
                uint64_t v19 = v36;
                if (v36 >= v37)
                {
                  uint64_t v21 = ((char *)v36 - (unsigned char *)__p) >> 3;
                  if ((unint64_t)(v21 + 1) >> 61) {
                    sub_21677CB10();
                  }
                  unint64_t v22 = ((char *)v37 - (unsigned char *)__p) >> 2;
                  if (v22 <= v21 + 1) {
                    unint64_t v22 = v21 + 1;
                  }
                  if ((unint64_t)((char *)v37 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v23 = v22;
                  }
                  if (v23) {
                    uint64_t v24 = (char *)sub_21677CB28((uint64_t)&v37, v23);
                  }
                  else {
                    uint64_t v24 = 0;
                  }
                  char v25 = (uint64_t *)&v24[8 * v21];
                  *char v25 = TypeFromSchemaTypeName;
                  unint64_t v20 = v25 + 1;
                  uint64_t v27 = (char *)__p;
                  uint64_t v26 = (char *)v36;
                  if (v36 != __p)
                  {
                    do
                    {
                      uint64_t v28 = *((void *)v26 - 1);
                      v26 -= 8;
                      *--char v25 = v28;
                    }
                    while (v26 != v27);
                    uint64_t v26 = (char *)__p;
                  }
                  long long __p = v25;
                  unint64_t v36 = v20;
                  char v37 = (uint64_t *)&v24[8 * v23];
                  if (v26) {
                    operator delete(v26);
                  }
                }
                else
                {
                  *unint64_t v36 = TypeFromSchemaTypeName;
                  unint64_t v20 = v19 + 1;
                }
                unint64_t v36 = v20;
              }
            }
          }
        }
        else if (!*((unsigned char *)v3 + 23))
        {
          goto LABEL_24;
        }
        v3 += 5;
        if (v3 == v4)
        {
          int v14 = __p;
          uint64_t v13 = (uint64_t)v36;
          goto LABEL_50;
        }
      }
    }
  }
  if (v6[1] != (uint64_t *)12) {
    goto LABEL_12;
  }
  uint64_t v8 = *v6;
LABEL_8:
  uint64_t v9 = *v8;
  int v10 = *((_DWORD *)v8 + 2);
  if (v9 != 0x65636E6174736E69 || v10 != 1701667150) {
    goto LABEL_12;
  }
  if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 3)))
  {
    int v15 = v6[4];
    if ((v15 & 4) != 0) {
      (*(void (**)(uint64_t **))(((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v6 + 3);
    }
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v32);
    uint64_t v12 = v32;
    uint64_t v3 = *a1;
    char v4 = a1[1];
    goto LABEL_19;
  }
  uint64_t v12 = 0;
  *(void *)(a2 + 24) = 0;
LABEL_55:
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_216D45748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

void *sub_216D457E8(void *a1)
{
  *a1 = &unk_26C768180;
  uint64_t v2 = a1[4];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_216D45850(void *__p)
{
  *long long __p = &unk_26C768180;
  uint64_t v2 = __p[4];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = (void *)__p[1];
  if (v3)
  {
    __p[2] = v3;
    operator delete(v3);
  }

  operator delete(__p);
}

void *sub_216D458C8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_26C768180;
  sub_216D45B24(v2 + 1, v1);
  return v2;
}

void sub_216D4591C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216D45930(uint64_t a1, void *a2)
{
  *a2 = &unk_26C768180;
  return sub_216D45B24(a2 + 1, a1 + 8);
}

void sub_216D4595C(uint64_t a1)
{
}

void sub_216D45964(void *a1)
{
  sub_216D45B94((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_216D459A0(uint64_t a1, uint64_t a2)
{
  sub_216D435AC(a2, (uint64_t)&v10);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v10, v3))
  {
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  char v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 32);
  char v6 = (const pxrInternal__aapl__pxrReserved__::TfType *)*((void *)v4 - 3);
  int v7 = (const pxrInternal__aapl__pxrReserved__::TfType *)*((void *)v4 - 2);
  if (!v5)
  {
    if (v6 != v7)
    {
      while ((pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10, v6) & 1) == 0)
      {
        char v6 = (const pxrInternal__aapl__pxrReserved__::TfType *)((char *)v6 + 8);
        if (v6 == v7) {
          goto LABEL_11;
        }
      }
      goto LABEL_12;
    }
LABEL_11:
    uint64_t v8 = 0x100000000;
    goto LABEL_13;
  }
  if (v6 == v7) {
    goto LABEL_11;
  }
  while (!pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10, v6, v4))
  {
    char v6 = (const pxrInternal__aapl__pxrReserved__::TfType *)((char *)v6 + 8);
    if (v6 == v7) {
      goto LABEL_11;
    }
  }
LABEL_12:
  uint64_t v8 = 0x100000001;
LABEL_13:
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11) {
    sub_216D16E0C(v11);
  }
  return v8;
}

void sub_216D45A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13)
{
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&a12);
  sub_217324F58((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216D45AD8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7681E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D45B18()
{
  return &unk_26C7681E0;
}

void *sub_216D45B24(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_2168915D4(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v4 = *(void *)(a2 + 24);
  a1[3] = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    a1[3] &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_216D45B94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t sub_216D45BC4(uint64_t a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v3 = (void **)(a1 + 8);
  sub_2169B5D08(&v3);
  return a1;
}

void sub_216D45C1C(char *a1)
{
  *(void *)a1 = &unk_26C767BC8;
  uint64_t v2 = (void **)(a1 + 8);
  sub_2169B5D08(&v2);
  operator delete(a1);
}

void *sub_216D45C78@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  *uint64_t v4 = &unk_26C767BC8;
  double v4[2] = 0;
  void v4[3] = 0;
  v4[1] = 0;
  uint64_t result = sub_216D41474(v4 + 1, *(long long **)(a1 + 8), *(long long **)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  void v4[4] = *(void *)(a1 + 32);
  *uint64_t v4 = &unk_26C768200;
  *a2 = v4;
  return result;
}

void sub_216D45D18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216D45D2C(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    while (1)
    {
      if (*(char *)(v3 + 23) < 0)
      {
        if (!*(void *)(v3 + 8)) {
          goto LABEL_45;
        }
      }
      else if (!*(unsigned char *)(v3 + 23))
      {
        goto LABEL_45;
      }
      if ((sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 24)) & 1) == 0)
      {
LABEL_45:
        *(void *)(a2 + 24) = 0;
        goto LABEL_48;
      }
      uint64_t v5 = *(void *)(v3 + 32);
      if ((v5 & 4) != 0) {
        uint64_t v6 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v3 + 24);
      }
      else {
        uint64_t v6 = *(void *)(v3 + 24);
      }
      if (*(char *)(v6 + 23) >= 0) {
        int v7 = (unsigned char *)v6;
      }
      else {
        int v7 = *(unsigned char **)v6;
      }
      int v8 = (char)*v7;
      if (*v7) {
        BOOL v9 = (v8 - 48) >= 0xA;
      }
      else {
        BOOL v9 = 0;
      }
      if (!v9) {
        goto LABEL_30;
      }
      if (v8 != 95 && (v8 & 0xFFFFFFDF) - 65 > 0x19) {
        goto LABEL_30;
      }
      do
      {
        int v12 = (char)*v7++;
        char v11 = v12;
        unsigned int v13 = (v12 & 0xFFFFFFDF) - 65;
        unsigned int v14 = v12 - 48;
      }
      while (v12 == 95 || v13 < 0x1A || v14 < 0xA);
      if (v11)
      {
LABEL_30:
        pxrInternal__aapl__pxrReserved__::ArchRegex::ArchRegex(v29, v6, 2);
        if (!pxrInternal__aapl__pxrReserved__::ArchRegex::operator BOOL((uint64_t)v29))
        {
          *(void *)(a2 + 24) = 0;
          pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)v29);
          goto LABEL_48;
        }
        sub_216D465B4((char *)__p, (long long *)v3, (uint64_t)v29);
        uint64_t v17 = v31;
        if ((unint64_t)v31 >= v32)
        {
          unint64_t v20 = (long long *)sub_216D461C0((uint64_t *)&v30, (uint64_t)__p);
        }
        else
        {
          long long v18 = *(_OWORD *)__p;
          *((void *)v31 + 2) = v25;
          *uint64_t v17 = v18;
          __p[1] = 0;
          uint64_t v25 = 0;
          __p[0] = 0;
          *((_DWORD *)v17 + 6) = v26[0];
          long long v19 = *(_OWORD *)&v26[1];
          *((void *)v17 + 6) = v27;
          void v17[2] = v19;
          void v26[2] = 0;
          uint64_t v27 = 0;
          v26[1] = 0;
          *(long long *)((char *)v17 + 56) = v28;
          long long v28 = 0uLL;
          unint64_t v20 = (long long *)((char *)v17 + 72);
        }
        uint64_t v31 = v20;
        pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)v26);
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)v29);
      }
      else
      {
        sub_216D46128((char *)__p, (long long *)v3, (long long *)v6);
        sub_216830030((uint64_t *)&v33, (long long *)__p);
        if (SHIBYTE(v26[2]) < 0) {
          operator delete(v26[0]);
        }
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
      }
      v3 += 40;
      if (v3 == v4)
      {
        uint64_t v21 = v33;
        unint64_t v22 = v34;
        goto LABEL_46;
      }
    }
  }
  unint64_t v22 = 0;
  uint64_t v21 = 0;
LABEL_46:
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v25 = 0;
  sub_216CF5044((char *)__p, v21, v22, 0xAAAAAAAAAAAAAAABLL * (v22 - v21));
  memset(v26, 0, sizeof(v26));
  sub_216D46634(v26, v30, v31, 0x8E38E38E38E38E39 * (((char *)v31 - (char *)v30) >> 3));
  *(void *)(a2 + 24) = 0;
  unint64_t v23 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v23 = &unk_26C768248;
  *(_OWORD *)(v23 + 8) = *(_OWORD *)__p;
  *((void *)v23 + 3) = v25;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v25 = 0;
  *((_OWORD *)v23 + 2) = *(_OWORD *)v26;
  *((void **)v23 + 6) = v26[2];
  memset(v26, 0, sizeof(v26));
  *(void *)(a2 + 24) = v23;
  v29[0] = v26;
  sub_216D468D4(v29);
  v29[0] = __p;
  sub_21682E488(v29);
LABEL_48:
  v29[0] = (void **)&v30;
  sub_216D468D4(v29);
  v29[0] = (void **)&v33;
  sub_21682E488(v29);
}

void sub_216D46064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  a25 = v25 - 112;
  sub_216D468D4((void ***)&a25);
  a25 = v25 - 88;
  sub_21682E488((void ***)&a25);
  _Unwind_Resume(a1);
}

char *sub_216D46128(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  uint64_t v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return __dst;
}

void sub_216D461A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D461C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  v17[4] = a1 + 2;
  uint64_t v10 = (char *)sub_216815D10(v7, v9);
  char v11 = &v10[72 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[72 * v12];
  uint64_t v13 = *(void *)(a2 + 16);
  *(_OWORD *)char v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = v13;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  long long v14 = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *((_OWORD *)v11 + 2) = v14;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  void v17[2] = v11 + 72;
  sub_216D46308(a1, v17);
  uint64_t v15 = a1[1];
  sub_216D46538(v17);
  return v15;
}

void sub_216D462F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D46538((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D46308(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216D46380((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216D46380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 72);
      *(void *)(v8 - 56) = *(void *)(a3 + v7 - 56);
      *(_OWORD *)(v8 - 72) = v10;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 72) = 0;
      *(_DWORD *)(v8 - 48) = *(_DWORD *)(a3 + v7 - 48);
      long long v11 = *(_OWORD *)(a3 + v7 - 40);
      *(void *)(v8 - 24) = *(void *)(a3 + v7 - 24);
      *(_OWORD *)(v8 - 40) = v11;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 40) = 0;
      *(_OWORD *)(v8 - 16) = *(_OWORD *)(a3 + v7 - 16);
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      *((void *)&v17 + 1) = a7 + v7 - 72;
      v7 -= 72;
    }
    while (a3 + v7 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_216D4645C((uint64_t)v14);
  return v12;
}

uint64_t sub_216D4645C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216D46494((uint64_t *)a1);
  }
  return a1;
}

void sub_216D46494(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216D464E8(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void sub_216D464E8(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void **sub_216D46538(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216D4656C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    sub_216D464E8(v4, i - 72);
  }
}

char *sub_216D465B4(char *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  *((_DWORD *)__dst + 6) = *(_DWORD *)a3;
  long long v6 = *(_OWORD *)(a3 + 8);
  *((void *)__dst + 6) = *(void *)(a3 + 24);
  *((_OWORD *)__dst + 2) = v6;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(__dst + 56) = *(_OWORD *)(a3 + 32);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  return __dst;
}

void *sub_216D46634(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_216873544(result, a4);
    uint64_t result = sub_216D466BC((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216D4669C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216D468D4(&a9);
  _Unwind_Resume(a1);
}

void *sub_216D466BC(uint64_t a1, long long *a2, long long *a3, void *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v10 = __dst;
  long long v11 = (char *)__dst;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      sub_216D46760(v4, v6);
      long long v6 = (long long *)((char *)v6 + 72);
      uint64_t v4 = v11 + 72;
      v11 += 72;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216D46848((uint64_t)v8);
  return v4;
}

void sub_216D4674C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216D46760(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __n128 __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_216D467D8((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_216D467BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D467D8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

uint64_t sub_216D46848(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216D46880((uint64_t *)a1);
  }
  return a1;
}

void sub_216D46880(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 72;
      sub_216D464E8(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_216D468D4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_216D464E8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216D4696C(uint64_t a1)
{
  *(void *)a1 = &unk_26C768248;
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v4 = (void **)(a1 + 32);
  sub_216D468D4(&v4);
  uint64_t v4 = v2;
  sub_21682E488(&v4);
  return a1;
}

void sub_216D469D4(char *a1)
{
  *(void *)a1 = &unk_26C768248;
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 32);
  sub_216D468D4(&v3);
  uint64_t v3 = v2;
  sub_21682E488(&v3);
  operator delete(a1);
}

void *sub_216D46A40(uint64_t a1)
{
  uint64_t v1 = (long long **)(a1 + 8);
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = &unk_26C768248;
  sub_216D46E54((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_216D46A94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D46AA8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C768248;
  return sub_216D46E54((uint64_t)(a2 + 1), (long long **)(a1 + 8));
}

void sub_216D46AD4(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = (void **)(a1 + 32);
  sub_216D468D4(&v2);
  uint64_t v2 = v1;
  sub_21682E488(&v2);
}

void sub_216D46B18(void **a1)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1 + 4;
  sub_216D468D4(&v3);
  uint64_t v3 = v2;
  sub_21682E488(&v3);
  operator delete(a1);
}

uint64_t sub_216D46B68(void *a1, uint64_t a2)
{
  sub_216D435AC(a2, (uint64_t)v30);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v30, v3))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets((pxrInternal__aapl__pxrReserved__::UsdPrim *)v30, (uint64_t)v25);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    if (v4 == v5)
    {
LABEL_24:
      long long v16 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a1[4];
      long long v17 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a1[5];
      while (v16 != v17)
      {
        pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdProperty *)v25, v16, (uint64_t)&__s1);
        long long v18 = (char *)v16 + 24;
        unsigned __int8 v19 = pxrInternal__aapl__pxrReserved__::ArchRegex::Match((uint64_t)v16 + 24, (const char *)&__s1);
        if ((char)v24 < 0) {
          operator delete(__s1);
        }
        if ((v19 & 1) == 0) {
          goto LABEL_34;
        }
        long long v16 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v18 + 48);
      }
      uint64_t v20 = 0x100000001;
    }
    else
    {
      while (1)
      {
        pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSelection((pxrInternal__aapl__pxrReserved__::UsdProperty *)v25, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v4, (uint64_t)&__s1);
        if ((v24 & 0x80u) == 0) {
          size_t v6 = v24;
        }
        else {
          size_t v6 = __n;
        }
        uint64_t v7 = *(unsigned __int8 *)(v4 + 47);
        int v8 = (char)v7;
        if ((v7 & 0x80u) != 0) {
          uint64_t v7 = *(void *)(v4 + 32);
        }
        if (v6 != v7) {
          break;
        }
        if (v8 >= 0) {
          char v9 = (unsigned __int8 *)(v4 + 24);
        }
        else {
          char v9 = *(unsigned __int8 **)(v4 + 24);
        }
        if ((v24 & 0x80) != 0)
        {
          long long v14 = __s1;
          int v15 = memcmp(__s1, v9, __n);
          operator delete(v14);
          if (v15) {
            goto LABEL_34;
          }
        }
        else if (v24)
        {
          uint64_t v10 = 0;
          do
          {
            int v11 = *((unsigned __int8 *)&__s1 + v10);
            int v12 = v9[v10];
          }
          while (v11 == v12 && v24 - 1 != v10++);
          if (v11 != v12) {
            goto LABEL_34;
          }
        }
        v4 += 48;
        if (v4 == v5) {
          goto LABEL_24;
        }
      }
      if ((v24 & 0x80) != 0) {
        operator delete(__s1);
      }
LABEL_34:
      uint64_t v20 = 0x100000000;
    }
    if ((v29 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_21697C414(&v27);
    if (v26) {
      sub_216D16E0C(v26);
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
  sub_21697C414(&v32);
  if (v31) {
    sub_216D16E0C(v31);
  }
  return v20;
}

void sub_216D46D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if ((a23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&a22 + 1);
  sub_217324F58((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_216D46E08(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7682A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D46E48()
{
  return &unk_26C7682A8;
}

uint64_t sub_216D46E54(uint64_t a1, long long **a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_216CF5044((char *)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_216D46634((void *)(a1 + 24), a2[3], a2[4], 0x8E38E38E38E38E39 * (((char *)a2[4] - (char *)a2[3]) >> 3));
  return a1;
}

void sub_216D46EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21682E488((void ***)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216D46EF4(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)(a1 + 16);
  return sub_21697C414(v2);
}

void sub_216D46F0C()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_SHADING_MODEL)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>();
  }
}

void sub_216D46F54()
{
  sub_216779094(v2, "UsdListPositionFrontOfPrependList");
  sub_216779094(__p, "The front of the prepend list.");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7682B8, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdListPositionBackOfPrependList");
  sub_216779094(__p, "The back of the prepend list.");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7682B8, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdListPositionFrontOfAppendList");
  sub_216779094(__p, "The front of the append list.");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7682B8, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdListPositionBackOfAppendList");
  sub_216779094(__p, "The back of the append list.");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7682B8, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdLoadWithDescendants");
  sub_216779094(__p, "Load prim and all descendants");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7682C8, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdLoadWithoutDescendants");
  sub_216779094(__p, "Load prim and no descendants");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7682C8, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216D47188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdCrateInfo::Open(pxrInternal__aapl__pxrReserved__ *a1@<X0>, char *a2@<X2>, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Open(a1, 0, a2, &v9);
  if (v9)
  {
    uint64_t v4 = operator new(8uLL);
    *uint64_t v4 = 0;
    sub_216D47294(a3, (uint64_t)v4);
    uint64_t v5 = *a3;
    size_t v6 = v9;
    char v9 = 0;
    sub_216C658D4(v5, v6);
    uint64_t v7 = v9;
    char v9 = 0;
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::~CrateFile(v7);
      operator delete(v8);
    }
  }
}

void sub_216D47260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a10)
{
  int v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    sub_216784EC4(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D47294(void *a1, uint64_t a2)
{
  sub_216D475DC(&v5, a2);
  char v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetSummaryStats(pxrInternal__aapl__pxrReserved__::UsdCrateInfo *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    char v3 = *(void **)v2;
    uint64_t v4 = (uint64_t)(v3[13] - v3[12]) >> 3;
    *(void *)a2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)v2 + 8) - **(void **)v2) >> 2);
    *(void *)(a2 + 8) = v4;
    uint64_t v5 = (uint64_t)(v3[19] - v3[18]) >> 2;
    *(void *)(a2 + 16) = (uint64_t)(v3[16] - v3[15]) >> 3;
    *(void *)(a2 + 24) = v5;
    *(void *)(a2 + 32) = (uint64_t)(v3[7] - v3[6]) >> 4;
    size_t v6 = (int *)v3[9];
    uint64_t v7 = (int *)v3[10];
    if (v6 == v7)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 0;
      do
      {
        int v9 = *v6++;
        if (v9 == -1) {
          ++v8;
        }
      }
      while (v6 != v7);
    }
    *(void *)(a2 + 40) = v8;
  }
  else
  {
    v10[0] = "usd/crateInfo.cpp";
    v10[1] = "GetSummaryStats";
    void v10[2] = 56;
    void v10[3] = "UsdCrateInfo::SummaryStats pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetSummaryStats() const";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdCrateInfo object");
  }
}

void pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetSections(pxrInternal__aapl__pxrReserved__::UsdCrateInfo *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(void *)this)
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetSectionsNameStartSize(**(void ***)this, (uint64_t *)&v8);
    char v3 = (long long *)v8;
    uint64_t v4 = (long long *)v9;
    if (v8 != v9)
    {
      unint64_t v5 = a2[1];
      do
      {
        size_t v6 = (uint64_t *)v3 + 3;
        uint64_t v7 = (uint64_t *)(v3 + 2);
        if (v5 >= a2[2])
        {
          unint64_t v5 = sub_216D477E0(a2, v3, v6, v7);
        }
        else
        {
          sub_216D4776C(a2, v3, v6, v7);
          v5 += 40;
        }
        a2[1] = v5;
        char v3 = (long long *)((char *)v3 + 40);
      }
      while (v3 != v4);
    }
    uint64_t v13 = &v8;
    sub_216886328((void ***)&v13);
  }
  else
  {
    uint64_t v8 = "usd/crateInfo.cpp";
    int v9 = "GetSections";
    uint64_t v10 = 74;
    char v11 = "vector<UsdCrateInfo::Section> pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetSections() const";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdCrateInfo object");
  }
}

void sub_216D474C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetFileVersion(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***this@<X0>, const char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  if (*this)
  {
    unint64_t v5 = **this;
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetFileVersionToken(v5, a2, a3, (uint64_t)a4);
  }
  else
  {
    v6[0] = "usd/crateInfo.cpp";
    v6[1] = "GetFileVersion";
    void v6[2] = 89;
    v6[3] = "TfToken pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetFileVersion() const";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdCrateInfo object");
    *a4 = 0;
  }
}

atomic_uint **pxrInternal__aapl__pxrReserved__::UsdCrateInfo::GetSoftwareVersion@<X0>(pxrInternal__aapl__pxrReserved__::UsdCrateInfo *this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t result = (atomic_uint **)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetSoftwareVersionToken(this);
  uint64_t v4 = *result;
  *a2 = *result;
  if ((v4 & 7) != 0)
  {
    unint64_t v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v5;
    }
  }
  return result;
}

void *sub_216D475DC(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C7682E8;
  v4[1] = 0;
  double v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216D47640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D47718((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_216D4765C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216D47684(uint64_t a1)
{
  char v1 = *(void **)(a1 + 24);
  if (v1)
  {
    sub_216C658D4(*(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***)(a1 + 24), 0);
    operator delete(v1);
  }
}

uint64_t sub_216D476D4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C768338)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216D47718(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_216C658D4(v2, 0);
    operator delete(v2);
  }
}

void *sub_216D4776C(void *result, long long *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = result;
  uint64_t v5 = result[1];
  uint64_t v6 = *a3;
  uint64_t v7 = *a4;
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v8;
  }
  *(void *)(v5 + 24) = v6;
  *(void *)(v5 + 32) = v7;
  v4[1] = v5 + 40;
  return result;
}

void sub_216D477D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_216D477E0(uint64_t *a1, long long *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    sub_21677CB10();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x333333333333333) {
    unint64_t v13 = 0x666666666666666;
  }
  else {
    unint64_t v13 = v7;
  }
  uint64_t v25 = a1 + 2;
  if (v13) {
    long long v14 = (char *)sub_2168720A4(v11, v13);
  }
  else {
    long long v14 = 0;
  }
  int v15 = &v14[40 * v6];
  v22[0] = v14;
  v22[1] = v15;
  unint64_t v23 = v15;
  unsigned __int8 v24 = &v14[40 * v13];
  uint64_t v16 = *a3;
  uint64_t v17 = *a4;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(v15, *(void **)a2, *((void *)a2 + 1));
    int v15 = v23;
  }
  else
  {
    long long v18 = *a2;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *(_OWORD *)int v15 = v18;
  }
  unsigned __int8 v19 = &v14[40 * v6];
  *((void *)v19 + 3) = v16;
  *((void *)v19 + 4) = v17;
  unint64_t v23 = v15 + 40;
  sub_216D47928(a1, v22);
  uint64_t v20 = a1[1];
  sub_2168867A0((uint64_t)v22);
  return v20;
}

void sub_216D47914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168867A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D47928(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216D479A0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216D479A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 40) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      uint64_t v7 = *((void *)&v14 + 1) - 40;
      *((void *)&v14 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216D47A4C((uint64_t)v11);
  return v9;
}

uint64_t sub_216D47A4C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216886758(a1);
  }
  return a1;
}

void sub_216D47A84()
{
  sub_216779094(v20, "USD_AUTO_APPLY_API_SCHEMAS");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 0, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v0 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "USD_AUTO_APPLY_API_SCHEMAS", "USD API schema auto application details");
  sub_216779094(v20, "USD_CHANGES");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 1, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v1 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "USD_CHANGES", "USD change processing");
  sub_216779094(v20, "USD_CLIPS");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 2, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v2 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 8, "USD_CLIPS", "USD clip details");
  sub_216779094(v20, "USD_COMPOSITION");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 3, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v3 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 12, "USD_COMPOSITION", "USD composition details");
  sub_216779094(v20, "USD_DATA_BD");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 4, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v4 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v4 + 16, "USD_DATA_BD", "USD BD file format traces");
  sub_216779094(v20, "USD_DATA_BD_TRY");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 5, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v5 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v5 + 20, "USD_DATA_BD_TRY", "USD BD call traces. Prints names, errors and results.");
  sub_216779094(v20, "USD_INSTANCING");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 6, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v6 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v6 + 24, "USD_INSTANCING", "USD instancing diagnostics");
  sub_216779094(v20, "USD_PATH_RESOLUTION");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 7, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v7 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v7 + 28, "USD_PATH_RESOLUTION", "USD path resolution diagnostics");
  sub_216779094(v20, "USD_PAYLOADS");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 8, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v8 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v8 + 32, "USD_PAYLOADS", "USD payload load/unload messages");
  sub_216779094(v20, "USD_PRIM_LIFETIMES");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 9, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v9 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v9 + 36, "USD_PRIM_LIFETIMES", "USD prim ctor/dtor messages");
  sub_216779094(v20, "USD_SCHEMA_REGISTRATION");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 10, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v10 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v10 + 40, "USD_SCHEMA_REGISTRATION", "USD schema registration details.");
  sub_216779094(v20, "USD_STAGE_CACHE");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 11, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v11 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v11 + 44, "USD_STAGE_CACHE", "USD stage cache details");
  sub_216779094(v20, "USD_STAGE_LIFETIMES");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 12, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v12 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v12 + 48, "USD_STAGE_LIFETIMES", "USD stage ctor/dtor messages");
  sub_216779094(v20, "USD_STAGE_OPEN");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 13, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v13 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v13 + 52, "USD_STAGE_OPEN", "USD stage opening details");
  sub_216779094(v20, "USD_STAGE_INSTANTIATION_TIME");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 14, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v14 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v14 + 56, "USD_STAGE_INSTANTIATION_TIME", "USD stage instantiation timing");
  sub_216779094(v20, "USD_VALIDATE_VARIABILITY");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 16, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v15 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v15 + 64, "USD_VALIDATE_VARIABILITY", "USD attribute variability validation");
  sub_216779094(v20, "USD_VALUE_RESOLUTION");
  long long __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768350, 15, (uint64_t)v20, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v16 = sub_216C4C130();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v16 + 60, "USD_VALUE_RESOLUTION", "USD trace of layers inspected as values are resolved");
}

void sub_216D481D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = *a2;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v5 = sub_216D24140(a2);
  if (v6 & 1 | (unint64_t)v5)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a2);
    uint64_t EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    *(void *)(a1 + 16) = *(void *)EditTarget;
    uint64_t v9 = *(void *)(EditTarget + 8);
    *(void *)(a1 + 24) = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
    }
    sub_216BBEE18((_DWORD *)(a1 + 32), EditTarget + 16);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(EditTarget + 56);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 16));
  }
  uint64_t v10 = sub_216D24140((void *)a1);
  if (!(v11 & 1 | (unint64_t)v10))
  {
    v13[0] = "usd/editContext.cpp";
    v13[1] = "UsdEditContext";
    _OWORD v13[2] = 36;
    void v13[3] = "pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(const UsdStagePtr &)";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot construct EditContext with invalid stage");
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t (*v5)(uint64_t *);
  char v6;
  pxrInternal__aapl__pxrReserved__::UsdStage *v7;
  uint64_t EditTarget;
  uint64_t v9;
  uint64_t (*v10)(uint64_t *);
  char v11;
  pxrInternal__aapl__pxrReserved__::UsdStage *v12;
  void v14[4];
  char v15;

  *(void *)a1 = *a2;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v5 = sub_216D24140(a2);
  if (v6 & 1 | (unint64_t)v5)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a2);
    uint64_t EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    *(void *)(a1 + 16) = *(void *)EditTarget;
    uint64_t v9 = *(void *)(EditTarget + 8);
    *(void *)(a1 + 24) = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
    }
    sub_216BBEE18((_DWORD *)(a1 + 32), EditTarget + 16);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(EditTarget + 56);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 16));
  }
  uint64_t v10 = sub_216D24140((void *)a1);
  if (v11 & 1 | (unint64_t)v10)
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(v12, (const pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a2 + 2));
  }
  else
  {
    v14[0] = "usd/editContext.cpp";
    v14[1] = "UsdEditContext";
    void v14[2] = 62;
    void v14[3] = "pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(const std::pair<UsdStagePtr, UsdEditTarget> &)";
    uint64_t v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot construct EditContext with invalid stage");
  }
  return a1;
}

void sub_216D4834C(_Unwind_Exception *a1)
{
  sub_216D483F4(v2);
  uint64_t v4 = *(atomic_uint **)(v1 + 8);
  if (v4)
  {
    if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216D483F4(uint64_t a1)
{
  sub_216BBED8C(a1 + 16);
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a3)
{
  *(void *)a1 = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v7 = sub_216D24140(a2);
  if (v8 & 1 | (unint64_t)v7)
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a2);
    uint64_t EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v9);
    *(void *)(a1 + 16) = *(void *)EditTarget;
    uint64_t v11 = *(void *)(EditTarget + 8);
    *(void *)(a1 + 24) = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 1u, memory_order_relaxed);
    }
    sub_216BBEE18((_DWORD *)(a1 + 32), EditTarget + 16);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(EditTarget + 56);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)(a1 + 16));
  }
  uint64_t v12 = sub_216D24140((void *)a1);
  if (v13 & 1 | (unint64_t)v12)
  {
    char v14 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(v14, a3);
  }
  else
  {
    v16[0] = "usd/editContext.cpp";
    v16[1] = "UsdEditContext";
    long long v16[2] = 46;
    void v16[3] = "pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext(const UsdStagePtr &, const UsdEditTarget &)";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot construct EditContext with invalid stage");
  }
  return a1;
}

void sub_216D4858C(_Unwind_Exception *a1)
{
  sub_216D483F4(v2);
  uint64_t v4 = *(atomic_uint **)(v1 + 8);
  if (v4)
  {
    if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
  }
  _Unwind_Resume(a1);
}

void sub_216D4875C(_Unwind_Exception *a1)
{
  sub_216D483F4(v2);
  uint64_t v4 = *(atomic_uint **)(v1 + 8);
  if (v4)
  {
    if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext(pxrInternal__aapl__pxrReserved__::UsdEditContext *this)
{
  uint64_t v2 = sub_216D24140(this);
  if (v3 & 1 | (unint64_t)v2)
  {
    uint64_t v4 = sub_21697CF14((void *)this + 2);
    if (v5 & 1 | (unint64_t)v4
      || (v9[0] = "usd/editContext.cpp",
          v9[1] = "~UsdEditContext",
          void v9[2] = 72,
          void v9[3] = "pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext()",
          char v10 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "_originalEditTarget.IsValid()", 0) & 1) != 0))
    {
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)this);
      pxrInternal__aapl__pxrReserved__::UsdStage::SetEditTarget(v6, (pxrInternal__aapl__pxrReserved__::UsdEditContext *)((char *)this + 16));
    }
  }
  sub_216BBED8C((uint64_t)this + 32);
  uint64_t v7 = (atomic_uint *)*((void *)this + 3);
  if (v7 && atomic_fetch_add_explicit(v7 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v7 + 8))(v7);
  }
  char v8 = (atomic_uint *)*((void *)this + 1);
  if (v8)
  {
    if (atomic_fetch_add_explicit(v8 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v8 + 8))(v8);
    }
  }
}

pxrInternal__aapl__pxrReserved__::UsdEditTarget *pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  sub_216BBED3C((uint64_t)this + 16);
  return this;
}

void sub_216D4896C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324248(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(uint64_t a1, void *a2, double a3, double a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(double *)char v13 = a3;
  *(double *)&v13[1] = a4;
  *(void *)a1 = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v6 = (unsigned char *)(a1 + 16);
  sub_216BBED3C(a1 + 16);
  BOOL IsIdentity = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v13);
  if (IsIdentity)
  {
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::Identity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)IsIdentity);
    if (v6 != (unsigned char *)v8)
    {
      uint64_t v9 = (_DWORD *)sub_216BBED8C(a1 + 16);
      sub_216BBEE18(v9, v8);
    }
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v8 + 40);
  }
  else
  {
    char v10 = (void **)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)IsIdentity);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v10, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v13, (uint64_t)v14);
    if (v6 != v14)
    {
      uint64_t v11 = (_DWORD *)sub_216BBED8C(a1 + 16);
      sub_216BBFB70(v11, (uint64_t)v14);
    }
    *(_OWORD *)(a1 + 56) = v15;
    sub_216BBED8C((uint64_t)v14);
  }
  return a1;
}

void sub_216D48A8C(_Unwind_Exception *a1)
{
  sub_216BBED8C(v2);
  uint64_t v4 = *(atomic_uint **)(v1 + 8);
  if (v4)
  {
    if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(void *a1, void *a2, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v5 = a2[1];
  uint64_t v8 = *a2;
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  sub_216D48BC4(a3, &v8, (uint64_t)(a1 + 2));
  uint64_t v6 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

void sub_216D48BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  sub_217324F84(v10);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfLayerOffset *sub_216D48BC4@<X0>(pxrInternal__aapl__pxrReserved__::PcpNodeRef *this@<X1>, uint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  v25[7] = *(_DWORD **)MEMORY[0x263EF8340];
  MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(this);
  uint64_t v9 = (char *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v7, v8);
  sub_216BBEE18((_DWORD *)a3, (uint64_t)v9);
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(v9 + 40);
  Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(Path);
  uint64_t v12 = (_OWORD *)(a3 + 40);
  if (v11)
  {
    unint64_t v13 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap(v11);
    sub_216D4984C((uint64_t *)v22, v13);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(Path, (int *)v23);
    v25[0] = Path;
    char v14 = sub_216C089DC(v22, (unint64_t *)Path, (uint64_t)&unk_2174BFD90, v25);
    sub_21697DE94((int *)v14 + 9, (int *)v23);
    sub_21697DEEC((int *)v14 + 10, (int *)v23 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 1);
    sub_21697C414(v23);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v23, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v22, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v23, (uint64_t)v25);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Compose((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)a3, (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)v25, (uint64_t)v23);
    if (v23 != (double *)a3)
    {
      long long v15 = (_DWORD *)sub_216BBED8C(a3);
      sub_216BBFB70(v15, (uint64_t)v23);
    }
    _OWORD *v12 = v24;
    sub_216BBED8C((uint64_t)v23);
    sub_216BBED8C((uint64_t)v25);
    sub_21698F21C((uint64_t)v22, v22[1]);
  }
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
  char v17 = (void *)sub_216BBBFA8(LayerStack);
  uint64_t result = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(v17, a2);
  uint64_t v19 = result;
  if (result)
  {
    uint64_t v20 = (void **)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap(result);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v20, v19, (uint64_t)v25);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Compose((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)a3, (const pxrInternal__aapl__pxrReserved__::PcpMapFunction *)v25, (uint64_t)v23);
    if (v23 != (double *)a3)
    {
      char v21 = (_DWORD *)sub_216BBED8C(a3);
      sub_216BBFB70(v21, (uint64_t)v23);
    }
    _OWORD *v12 = v24;
    sub_216BBED8C((uint64_t)v23);
    return (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)sub_216BBED8C((uint64_t)v25);
  }
  return result;
}

void sub_216D48DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_216BBED8C((uint64_t)va1);
  sub_21698F21C((uint64_t)va, v6);
  sub_216BBED8C(v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(uint64_t a1, uint64_t *a2, double a3, double a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(double *)uint64_t v12 = a3;
  *(double *)&v12[1] = a4;
  uint64_t v5 = sub_216ABBA60((uint64_t *)a1, a2) + 2;
  sub_216BBED3C((uint64_t)v5);
  BOOL IsIdentity = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v12);
  if (IsIdentity)
  {
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::Identity((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)IsIdentity);
    if (v5 != (uint64_t *)v7)
    {
      uint64_t v8 = (_DWORD *)sub_216BBED8C((uint64_t)v5);
      sub_216BBEE18(v8, v7);
    }
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v7 + 40);
  }
  else
  {
    uint64_t v9 = (void **)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)IsIdentity);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v9, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v12, (uint64_t)v13);
    if (v5 != (uint64_t *)v13)
    {
      uint64_t v10 = (_DWORD *)sub_216BBED8C((uint64_t)v5);
      sub_216BBFB70(v10, (uint64_t)v13);
    }
    *(_OWORD *)(a1 + 56) = v14;
    sub_216BBED8C((uint64_t)v13);
  }
  return a1;
}

void sub_216D48F24(_Unwind_Exception *a1)
{
  sub_216BBED8C(v2);
  uint64_t v4 = *(atomic_uint **)(v1 + 8);
  if (v4)
  {
    if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(uint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3)
{
  sub_216ABBA60(a1, a2);
  sub_216ABBA60(&v8, a2);
  sub_216D48BC4(a3, &v8, (uint64_t)(a1 + 2));
  uint64_t v6 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

void sub_216D4902C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10 && atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
  }
  uint64_t v12 = *(atomic_uint **)(v10 + 8);
  if (v12)
  {
    if (atomic_fetch_add_explicit(v12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v12 + 8))(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  sub_216BBEE18((_DWORD *)(a1 + 16), a3);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a3 + 40);
  return a1;
}

void sub_216D49118(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324248(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdEditTarget::ForLocalDirectVariant(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X1>, void *a2@<X0>, pxrInternal__aapl__pxrReserved__::UsdEditTarget *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  IsPrimVariantSelectionPath = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(this);
  if (IsPrimVariantSelectionPath)
  {
    unint64_t v7 = pxrInternal__aapl__pxrReserved__::PcpMapFunction::IdentityPathMap(IsPrimVariantSelectionPath);
    sub_216D4984C((uint64_t *)v11, v7);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(this, (int *)v10);
    v12[0] = this;
    uint64_t v8 = sub_216C089DC(v11, (unint64_t *)this, (uint64_t)&unk_2174BFD90, v12);
    sub_21697DE94((int *)v8 + 9, (int *)v10);
    sub_21697DEEC((int *)v8 + 10, (int *)v10 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v10 + 1);
    sub_21697C414(v10);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v10, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::Create(v11, (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v10, (uint64_t)v12);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget((uint64_t)a3, a2, (uint64_t)v12);
    sub_216BBED8C((uint64_t)v12);
    sub_21698F21C((uint64_t)v11, v11[1]);
  }
  else
  {
    v12[0] = "usd/editTarget.cpp";
    v12[1] = "ForLocalDirectVariant";
    void v12[2] = (_DWORD *)131;
    _DWORD v12[3] = "static UsdEditTarget pxrInternal__aapl__pxrReserved__::UsdEditTarget::ForLocalDirectVariant(const SdfLayerH"
             "andle &, const SdfPath &)";
    char v13 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Provided varSelPath <%s> must be a prim variant selection path.", Text);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(a3);
  }
}

void sub_216D492AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_216BBED8C((uint64_t)va1);
  sub_21698F21C((uint64_t)va, v8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216851B24(a1);
  if (v4 != sub_216851B24(a2)) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::PcpMapFunction::operator==(a1 + 16, a2 + 16);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)((char *)this + 16);
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)((char *)this + 16), a2, &v13);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::ContainsTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13)) {
    goto LABEL_9;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively((uint64_t)&v13, (uint64_t *)&v10);
  uint64_t v5 = v10;
  uint64_t v6 = v11;
  if (v10 == v11)
  {
LABEL_8:
    uint64_t v15 = &v10;
    sub_216981168((void ***)&v15);
LABEL_9:
    sub_21697D878(a3, &v13);
    sub_21697D8B4(a3 + 1, &v14);
    goto LABEL_10;
  }
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapTargetToSource(v4, v5, &v9);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, (int *)&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
    sub_21697C414(&v9);
    BOOL v7 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, 1);
      sub_21697DE94(&v13, (int *)&v9);
      sub_21697DEEC(&v14, (int *)&v9 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
      sub_21697C414(&v9);
    }
    else
    {
      *(void *)a3 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
    if (!v7) {
      break;
    }
    uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 8);
    if (v5 == v6) {
      goto LABEL_8;
    }
  }
  uint64_t v15 = &v10;
  sub_216981168((void ***)&v15);
LABEL_10:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  return sub_21697C414(&v13);
}

void sub_216D49520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, void **a14)
{
  a14 = (void **)&a10;
  sub_216981168(&a14);
  sub_21697B754(&a13);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPrimSpecForScenePath@<X0>(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  unint64_t result = (unint64_t)sub_21697CF14(this);
  if (v7 & 1 | result)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(this, a2, &v9);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    return (unint64_t)sub_21697C414(&v9);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_216D4961C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPropertySpecForScenePath@<X0>(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t result = (unint64_t)sub_21697CF14(this);
  if (v7 & 1 | result)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(this, a2, &v9);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath(a3, v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    return (unint64_t)sub_21697C414(&v9);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_216D496CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetSpecForScenePath@<X0>(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  unint64_t result = (unint64_t)sub_21697CF14(this);
  if (v7 & 1 | result)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)this);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(this, a2, &v9);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    return (unint64_t)sub_21697C414(&v9);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_216D4977C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditTarget::ComposeOver@<X0>(pxrInternal__aapl__pxrReserved__::UsdEditTarget *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2@<X1>, uint64_t a3@<X8>)
{
  v10[7] = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_21697CF14(this);
  if (v7 & 1 | (unint64_t)v6) {
    uint64_t v8 = this;
  }
  else {
    uint64_t v8 = a2;
  }
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::Compose((pxrInternal__aapl__pxrReserved__::UsdEditTarget *)((char *)this + 16), (const pxrInternal__aapl__pxrReserved__::UsdEditTarget *)((char *)a2 + 16), (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::UsdEditTarget(a3, v8, (uint64_t)v10);
  return sub_216BBED8C((uint64_t)v10);
}

void sub_216D49830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216D4984C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_216D498A4(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_216D4988C(_Unwind_Exception *a1)
{
  sub_21698F21C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216D498A4(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      unint64_t result = sub_216C13A1C(v5, v6, (void *)((char *)v4 + 28), (_DWORD *)v4 + 7);
      char v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          char v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdExpiredPrimAccessError::~UsdExpiredPrimAccessError(std::exception *this)
{
  pxrInternal__aapl__pxrReserved__::TfBaseException::~TfBaseException(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::_Reduce<pxrInternal__aapl__pxrReserved__::VtDictionary>(const void ****a1@<X0>, const char **a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(a1, a2, 0, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v4);
  *(void *)(a3 + 8) = &off_26C74DD80;
  sub_2168EEEA8((unsigned int **)a3, (const void ****)&v4);
  sub_2168EBBB8(&v4, 0);
}

void sub_216D499B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EBBB8((void ***)va, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::_Reduce<std::map<std::string,std::string>>(void *a1@<X0>, const void ***a2@<X1>, void *a3@<X8>)
{
  sub_2167898D0((uint64_t *)v12, a2);
  char v7 = (void *)*a1;
  uint64_t v5 = a1 + 1;
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      int v13 = (long long *)(v6 + 4);
      uint64_t v8 = sub_21677B174(v12, (const void **)v6 + 4, (uint64_t)&unk_2174BFD90, &v13);
      std::string::operator=((std::string *)(v8 + 7), (const std::string *)(v6 + 7));
      BOOL v9 = (void *)v6[1];
      if (v9)
      {
        do
        {
          int v10 = v9;
          BOOL v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (void *)v6[2];
          BOOL v11 = *v10 == (void)v6;
          uint64_t v6 = v10;
        }
        while (!v11);
      }
      uint64_t v6 = v10;
    }
    while (v10 != v5);
  }
  a3[1] = &off_26C756CD0;
  sub_2169DC07C(a3, (const void ***)v12);
  sub_2167877AC((uint64_t)v12, v12[1]);
}

void sub_216D49AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

int *pxrInternal__aapl__pxrReserved__::_Reduce<pxrInternal__aapl__pxrReserved__::SdfSpecifier>@<X0>(int *result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *result;
  *(void *)(a3 + 8) = (char *)&off_26C758118 + 3;
  if (v3 == 1) {
    int v3 = *a2;
  }
  *(_DWORD *)a3 = v3;
  return result;
}

void pxrInternal__aapl__pxrReserved__::_Reduce(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a2;
  if (!*((void *)this + 1))
  {
    int v14 = a4;
    goto LABEL_8;
  }
  char v7 = this;
  if (!*((void *)a2 + 1)
    || (sub_216A5F85C(this) & 1) != 0
    || sub_216A5F85C(v5)
    || (uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(v7, v9, v10),
        Type != pxrInternal__aapl__pxrReserved__::VtValue::GetType(v5, v12, v13)))
  {
LABEL_6:
    int v14 = a4;
    a2 = v7;
LABEL_8:
    sub_2168EE4C4(v14, a2);
    return;
  }
  if (sub_216A94450(v7))
  {
    uint64_t v15 = *((void *)v7 + 1);
    if ((v15 & 4) != 0) {
      char v7 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    }
    uint64_t v16 = *((void *)v5 + 1);
    if ((v16 & 4) != 0) {
      uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
    }
    int v17 = *(_DWORD *)v7;
    a4[1] = (char *)&off_26C758118 + 3;
    if (v17 == 1) {
      int v17 = *(_DWORD *)v5;
    }
    *(_DWORD *)a4 = v17;
  }
  else
  {
    if (sub_21698F4F4(v7))
    {
      uint64_t v18 = *((void *)v7 + 1);
      if ((v18 & 4) != 0) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__ *))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      uint64_t v19 = *((void *)v5 + 1);
      if ((v19 & 4) != 0) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      sub_216D4A30C();
    }
    if (sub_21698F60C(v7))
    {
      uint64_t v20 = *((void *)v7 + 1);
      if ((v20 & 4) != 0) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__ *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      uint64_t v21 = *((void *)v5 + 1);
      if ((v21 & 4) != 0) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      sub_216D4A478();
    }
    if (sub_21698F580(v7))
    {
      uint64_t v22 = *((void *)v7 + 1);
      if ((v22 & 4) != 0) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__ *))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      uint64_t v23 = *((void *)v5 + 1);
      if ((v23 & 4) != 0) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      sub_216D4A5E4();
    }
    if (sub_21698F698(v7))
    {
      uint64_t v24 = *((void *)v7 + 1);
      if ((v24 & 4) != 0) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__ *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      uint64_t v25 = *((void *)v5 + 1);
      if ((v25 & 4) != 0) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      sub_216D4A750();
    }
    if (sub_21698F7B0(v7))
    {
      uint64_t v26 = *((void *)v7 + 1);
      if ((v26 & 4) != 0) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__ *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      uint64_t v27 = *((void *)v5 + 1);
      if ((v27 & 4) != 0) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v27 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      sub_216D4A8BC();
    }
    if (sub_21698F724(v7))
    {
      uint64_t v28 = *((void *)v7 + 1);
      if ((v28 & 4) != 0) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__ *))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      uint64_t v29 = *((void *)v5 + 1);
      if ((v29 & 4) != 0) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      sub_216D4AA28();
    }
    if (sub_216980CE8(v7))
    {
      uint64_t v30 = *((void *)v7 + 1);
      if ((v30 & 4) != 0) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__ *))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      uint64_t v31 = *((void *)v5 + 1);
      if ((v31 & 4) != 0) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      sub_216D4AB94();
    }
    if (sub_21698E94C(v7))
    {
      uint64_t v32 = *((void *)v7 + 1);
      if ((v32 & 4) != 0) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__ *))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      uint64_t v33 = *((void *)v5 + 1);
      if ((v33 & 4) != 0) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      sub_216D4AD00();
    }
    if (sub_21698E9D8(v7))
    {
      uint64_t v34 = *((void *)v7 + 1);
      if ((v34 & 4) != 0) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__ *))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      uint64_t v35 = *((void *)v5 + 1);
      if ((v35 & 4) != 0) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      sub_216D4AE6C();
    }
    if (sub_21698F468(v7))
    {
      uint64_t v36 = *((void *)v7 + 1);
      if ((v36 & 4) != 0) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__ *))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      uint64_t v37 = *((void *)v5 + 1);
      if ((v37 & 4) != 0) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      sub_216D4AFD8();
    }
    if (sub_2168EC434(v7))
    {
      uint64_t v38 = *((void *)v7 + 1);
      if ((v38 & 4) != 0) {
        uint64_t v39 = (const void ****)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v38 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                             + 168))(v7);
      else {
        uint64_t v39 = *(const void *****)v7;
      }
      uint64_t v40 = *((void *)v5 + 1);
      if ((v40 & 4) != 0) {
        uint64_t v41 = (const char **)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      else {
        uint64_t v41 = *(const char ***)v5;
      }
      pxrInternal__aapl__pxrReserved__::_Reduce<pxrInternal__aapl__pxrReserved__::VtDictionary>(v39, v41, (uint64_t)a4);
    }
    else if (sub_216995B54(v7))
    {
      uint64_t v42 = *((void *)v7 + 1);
      if ((v42 & 4) != 0) {
        uint64_t v43 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v42 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
      }
      else {
        uint64_t v43 = *(void *)v7;
      }
      uint64_t v44 = *((void *)v5 + 1);
      if ((v44 & 4) != 0) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v44 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      a4[1] = &off_26C758890;
      sub_216A9EC50(a4, v43);
    }
    else
    {
      if (!sub_2169DBB2C(v7))
      {
        uint64_t v49 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v49) {
          uint64_t v49 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v49 + 56) & 0xFFFFFFFFFFFFFFF8)
          && sub_21695DC44(v7))
        {
          uint64_t v50 = *((void *)v7 + 1);
          uint64_t v51 = v7;
          if ((v50 & 4) != 0) {
            uint64_t v51 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
          }
          if (*(void *)v51) {
            a2 = v7;
          }
          else {
            a2 = v5;
          }
          int v14 = a4;
          goto LABEL_8;
        }
        goto LABEL_6;
      }
      uint64_t v45 = *((void *)v7 + 1);
      if ((v45 & 4) != 0) {
        int v46 = (const void ****)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__ *))((v45 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                             + 168))(v7);
      else {
        int v46 = *(const void *****)v7;
      }
      uint64_t v47 = *((void *)v5 + 1);
      if ((v47 & 4) != 0) {
        unint64_t v48 = (const void ***)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v47 & 0xFFFFFFFFFFFFFFF8) + 168))(v5);
      }
      else {
        unint64_t v48 = *(const void ****)v5;
      }
      pxrInternal__aapl__pxrReserved__::_Reduce<std::map<std::string,std::string>>(v46, v48, a4);
    }
  }
}

void sub_216D4A30C()
{
}

void sub_216D4A434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D4A478()
{
}

void sub_216D4A5A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D4A5E4()
{
}

void sub_216D4A70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D4A750()
{
}

void sub_216D4A878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D4A8BC()
{
}

void sub_216D4A9E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D4AA28()
{
}

void sub_216D4AB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D4AB94()
{
}

void sub_216D4ACBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D4AD00()
{
}

void sub_216D4AE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D4AE6C()
{
}

void sub_216D4AF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_216D4AFD8()
{
}

void sub_216D4B100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStack(uint64_t *a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  uint64_t Identifier = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v8);
  int v10 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  BOOL v11 = (const pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariables::Compute(Identifier, v11, 0, v26);
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  uint64_t v13 = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v12);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v30, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(v13 + 32));
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  pxrInternal__aapl__pxrReserved__::TfGetExtension(a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (size)
    {
LABEL_3:
      if (*(char *)(a3 + 23) < 0) {
        sub_216778F24(&__p, *(void **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string __p = *(std::string *)a3;
      }
      goto LABEL_18;
    }
  }
  else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
    goto LABEL_3;
  }
  if (*(char *)(a3 + 23) >= 0) {
    size_t v15 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v15 = *(void *)(a3 + 8);
  }
  p_p = &__p;
  sub_2167940B4((uint64_t)&__p, v15 + 5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v15)
  {
    if (*(char *)(a3 + 23) >= 0) {
      int v17 = (const void *)a3;
    }
    else {
      int v17 = *(const void **)a3;
    }
    memmove(p_p, v17, v15);
  }
  strcpy((char *)p_p + v15, ".usda");
LABEL_18:
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(&__p, (pxrInternal__aapl__pxrReserved__::TfToken *)&v23, a4);
  sub_2167877AC((uint64_t)&v23, v24[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a4);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v18, &v22);
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)v22;
  if (v22) {
    atomic_fetch_add(v22, 1u);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C768640;
  __p.__r_.__value_.__l.__size_ = a2;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v26;
  uint64_t v29 = &__p;
  sub_216D4B4A8(a1, &v23, (uint64_t)&__p);
  sub_216D52D98(&__p);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v23);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v19, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v22);
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(a4);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v20, &v23);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C768640;
  __p.__r_.__value_.__l.__size_ = a2;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v26;
  uint64_t v29 = &__p;
  sub_216D4B930(a1, &v23, (uint64_t)&__p);
  sub_216D52D98(&__p);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v21, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v23);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v30);
  sub_2168EBBB8(&v27, 0);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v26);
}

void sub_216D4B3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
}

_DWORD *sub_216D4B4A8(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, uint64_t a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v6);
  uint64_t v8 = (uint64_t **)sub_21697F2E0(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&v41);
  BOOL v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v41);
  uint64_t Schema = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v9);
  uint64_t v11 = v42;
  if (v42 && atomic_fetch_add_explicit((atomic_uint *volatile)(v42 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = sub_21697F2E0(a2);
  Specuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v12);
  int v14 = sub_21697F2E0(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v37);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFields(Schema, SpecType, &v41);
  size_t v15 = v41;
  for (uint64_t i = (uint64_t *)v42; v15 != i; ++v15)
  {
    unint64_t v17 = sub_216D4C944();
    uint64_t v18 = sub_216A8E1C4(v17, v15);
    if ((void *)(sub_216D4C944() + 8) == v18)
    {
      sub_216D4CB00(a1, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v15, a3, (pxrInternal__aapl__pxrReserved__ *)&v39);
      uint64_t v19 = (uint64_t **)sub_21697F2E0(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v19, &v35);
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v35);
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (const pxrInternal__aapl__pxrReserved__::TfToken *)v15, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v39);
      uint64_t v21 = v36;
      if (v36 && atomic_fetch_add_explicit((atomic_uint *volatile)(v36 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      sub_2168EE084((uint64_t)&v39);
    }
  }
  uint64_t v39 = (void **)&v41;
  sub_216889A04(&v39);
  if (SpecType == 1)
  {
    uint64_t v22 = *Layers;
    if (Layers[1] != *Layers)
    {
      uint64_t v23 = 0;
      unint64_t v24 = 0;
      while (1)
      {
        uint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)(v22 + v23));
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v26) {
          uint64_t v26 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v26 + 432), 0))break; {
        uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)(*Layers + v23));
        }
        uint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v28) {
          uint64_t v28 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if (!pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v28 + 88), 0))
        {
          ++v24;
          uint64_t v22 = *Layers;
          v23 += 8;
          if (v24 < (Layers[1] - *Layers) >> 3) {
            continue;
          }
        }
        goto LABEL_30;
      }
      uint64_t v29 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v29) {
        uint64_t v29 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      sub_216D4CB00(a1, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v29 + 432), a3, (pxrInternal__aapl__pxrReserved__ *)&v41);
      uint64_t v30 = (uint64_t **)sub_21697F2E0(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v30, (uint64_t *)&v39);
      uint64_t v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v39);
      uint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v32) {
        uint64_t v32 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v32 + 432), (const pxrInternal__aapl__pxrReserved__::VtValue *)&v41);
      uint64_t v33 = v40;
      if (v40 && atomic_fetch_add_explicit((atomic_uint *volatile)(v40 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
      }
      sub_2168EE084((uint64_t)&v41);
    }
  }
LABEL_30:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
  return sub_21697C414(&v37);
}

void sub_216D4B818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216D4B930(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, uint64_t a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v6);
  unint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  sub_216BDFC40((uint64_t)&v70, 0, 0.0, 0.5);
  uint64_t v8 = sub_216A663FC(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v8, &__p);
  BOOL v9 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v9) {
    BOOL v9 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  int v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10) {
    int v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(Layers, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (char *)v9 + 32, (void **)&v72, &v70, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 216));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21697C414(&__p);
  uint64_t v12 = v72;
  for (uint64_t i = v73; v12 != i; v12 += 8)
  {
    if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
    }
    std::string __p = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::New(a2, 0, &v80);
    if (SHIBYTE(v77) < 0) {
      operator delete(__p);
    }
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v80) & 1) == 0)
    {
      std::string __p = v80;
      if (v80) {
        atomic_fetch_add((atomic_uint *volatile)v80, 1u);
      }
      sub_216D4B4A8(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p, a3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
      sub_216D4B930(a1, &v80, a3);
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v14, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v80);
  }
  size_t v15 = sub_216A663FC(a2);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v15) != 7)
  {
    uint64_t v16 = v72;
    for (uint64_t j = v73; j != v16; j -= 8)
    {
      uint64_t v19 = *((void *)j - 1);
      uint64_t v18 = v19;
      if ((v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v73 = v16;
    sub_216BF4ABC(&v70);
    uint64_t v20 = sub_216A663FC(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v20, &__p);
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v21) {
      uint64_t v21 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(Layers, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (char *)v21 + 64, (void **)&v72, &v70, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21697C414(&__p);
    uint64_t v23 = v72;
    unint64_t v24 = v73;
    if (v72 != v73)
    {
      do
      {
        if ((*(void *)v23 & 0xFFFFFFFFFFFFFFF8) != 0) {
          EmptyString = (uint64_t *)((*(void *)v23 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
        }
        pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::New(a2, (uint64_t)EmptyString, &v69);
        if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v69) & 1) == 0)
        {
          std::string __p = v69;
          if (v69) {
            atomic_fetch_add((atomic_uint *volatile)v69, 1u);
          }
          sub_216D4B4A8(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p, a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
          int v80 = 0;
          __int16 v81 = 0;
          uint64_t v82 = 0;
          sub_216BDFC40((uint64_t)&__p, 0, 0.0, 0.5);
          uint64_t v27 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
          uint64_t v28 = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v27);
          uint64_t v29 = sub_216A694A0(&v69);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v29, v63);
          uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v30) {
            uint64_t v30 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          }
          pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(v28, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v63, (char *)v30 + 56, &v80, (int *)&__p, 0);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v63 + 1);
          uint64_t v31 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21697C414(v63);
          uint64_t v32 = v80;
          uint64_t v33 = v81;
          while (v32 != v33)
          {
            if ((*v32 & 0xFFFFFFFFFFFFFFF8) != 0) {
              uint64_t v34 = (uint64_t *)((*v32 & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              uint64_t v34 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v31);
            }
            pxrInternal__aapl__pxrReserved__::SdfVariantSpec::New(&v69, (long long *)v34, &v83);
            if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v83) & 1) == 0)
            {
              v63[0] = v83;
              if (v83) {
                atomic_fetch_add((atomic_uint *volatile)v83, 1u);
              }
              sub_216D4B4A8(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v63, a3);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v63);
              uint64_t v36 = (uint64_t **)sub_216992ED0(&v83);
              pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetPrimSpec(v36, v63);
              sub_216D4B930(a1, v63, a3);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v37, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v63);
            }
            uint64_t v31 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v35, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v83);
            ++v32;
          }
          v63[0] = &v76;
          sub_216BDFE6C((void ***)v63);
          std::string __p = &v80;
          sub_216889A04((void ***)&__p);
        }
        uint64_t v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v26, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v69);
        v23 += 8;
      }
      while (v23 != v24);
      uint64_t v23 = v72;
      for (k = v73; k != v23; k -= 8)
      {
        uint64_t v40 = *((void *)k - 1);
        uint64_t v39 = v40;
        if ((v40 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
    }
    uint64_t v73 = v23;
    sub_216BF4ABC(&v70);
    uint64_t v41 = sub_216A663FC(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v41, &__p);
    uint64_t v42 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v42) {
      uint64_t v42 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    pxrInternal__aapl__pxrReserved__::PcpComposeSiteChildNames(Layers, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, (char *)v42 + 40, (void **)&v72, &v70, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    uint64_t v43 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v72;
    uint64_t v44 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v73;
    if (v72 != v73)
    {
      do
      {
        uint64_t v45 = sub_216A663FC(a2);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v45, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, v43, (int *)&v83);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
        uint64_t v47 = (uint64_t *)*Layers;
        int v46 = (uint64_t *)Layers[1];
        while (1)
        {
          if (v47 == v46)
          {
            LODWORD(SpecType) = 0;
            goto LABEL_55;
          }
          unint64_t v48 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v47);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v83))break; {
          ++v47;
          }
        }
        uint64_t v53 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v47);
        Specuint64_t Type = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v53, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v83);
        if (SpecType == 8)
        {
          if ((*(void *)v43 & 0xFFFFFFFFFFFFFFF8) != 0) {
            uint64_t v55 = (uint64_t *)((*(void *)v43 & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else {
            uint64_t v55 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(SpecType);
          }
          pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New(a2, (uint64_t)v55, 1, 1, &__p);
          if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p) & 1) == 0)
          {
            int v80 = __p;
            if (__p) {
              atomic_fetch_add((atomic_uint *volatile)__p, 1u);
            }
            sub_216D4B4A8(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v80, a3);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v80);
            int v80 = __p;
            if (__p) {
              atomic_fetch_add((atomic_uint *volatile)__p, 1u);
            }
            int v61 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v61) {
              int v61 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v62 = (atomic_uint **)sub_216A67AC0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p);
            pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(v62, &v65);
            sub_216D51A1C(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v80, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v61 + 424), &v65, a3);
            unint64_t v60 = v66;
            if (v66) {
LABEL_81:
            }
              sub_216784EC4(v60);
LABEL_82:
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v80);
          }
LABEL_85:
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v57, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
          goto LABEL_86;
        }
        if (SpecType == 1)
        {
          if ((*(void *)v43 & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v54 = (uint64_t *)((*(void *)v43 & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else {
            unint64_t v54 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(SpecType);
          }
          uint64_t v56 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v56) {
            uint64_t v56 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(a2, (uint64_t)v54, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v56 + 16), 0, 0, &__p);
          if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p) & 1) == 0)
          {
            int v80 = __p;
            if (__p) {
              atomic_fetch_add((atomic_uint *volatile)__p, 1u);
            }
            sub_216D4B4A8(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v80, a3);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v80);
            int v80 = __p;
            if (__p) {
              atomic_fetch_add((atomic_uint *volatile)__p, 1u);
            }
            uint64_t v58 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v58) {
              uint64_t v58 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            long long v59 = (atomic_uint **)sub_216A64148((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&__p);
            pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(v59, &v67);
            sub_216D51A1C(a1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v80, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v58 + 56), &v67, a3);
            unint64_t v60 = v68;
            if (v68) {
              goto LABEL_81;
            }
            goto LABEL_82;
          }
          goto LABEL_85;
        }
LABEL_55:
        std::string __p = "usd/flattenUtils.cpp";
        uint64_t v76 = "_FlattenSpec";
        uint64_t v77 = 705;
        unint64_t v78 = "void pxrInternal__aapl__pxrReserved__::_FlattenSpec(const PcpLayerStackRefPtr &, const SdfPrimSpecHandle &"
              ", const _ResolveAssetPathFn &)";
        char v79 = 0;
        pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C755200, SpecType, (uint64_t)&v80);
        if (v82 >= 0) {
          uint64_t v50 = (const char *)&v80;
        }
        else {
          uint64_t v50 = (const char *)v80;
        }
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v83);
        sub_216BC26E0(a1);
        uint64_t v52 = v63;
        if (v64 < 0) {
          uint64_t v52 = (void **)v63[0];
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Unknown spec type %s at <%s> in %s\n", v50, Text, (const char *)v52);
        if (v64 < 0) {
          operator delete(v63[0]);
        }
        if (SHIBYTE(v82) < 0) {
          operator delete(v80);
        }
LABEL_86:
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v83 + 1);
        sub_21697C414(&v83);
        uint64_t v43 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v43 + 8);
      }
      while (v43 != v44);
    }
  }
  std::string __p = &v71;
  sub_216BDFE6C((void ***)&__p);
  std::string __p = &v72;
  sub_216889A04((void ***)&__p);
}

void sub_216D4C198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  a41 = &a29;
  sub_216BDFE6C((void ***)&a41);
  a41 = (uint64_t *)&a38;
  sub_216889A04((void ***)&a41);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStack@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26C7686D0;
  v4[1] = pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStackResolveAssetPathAdvanced;
  void v4[3] = v4;
  pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStack(a1, (std::string::size_type)v4, a2, a3);
  return sub_216D53164(v4);
}

void sub_216D4C424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D53164((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStackResolveAssetPathAdvanced(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void **)(a1 + 2);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfVariableExpression::IsExpression(a1 + 2))
  {
    sub_216D4C57C((uint64_t)v4, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 5), (uint64_t)&v5);
    *(_OWORD *)std::string __p = v5;
    uint64_t v8 = v6;
    uint64_t v4 = __p;
  }
  pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStackResolveAssetPath(a1, (uint64_t)v4, a2);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D4C4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStack@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_26C768780;
  v5[1] = a2;
  void v5[3] = v5;
  pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStack(a1, (std::string::size_type)v5, a3, a4);
  return sub_216D53164(v5);
}

void sub_216D4C568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D53164((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D4C57C@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X1>, uint64_t a3@<X8>)
{
  v19[5] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfVariableExpression::SdfVariableExpression(v13, a1);
  sub_216BD5918((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)v13, a2, &v15);
  pxrInternal__aapl__pxrReserved__::SdfVariableExpression::~SdfVariableExpression((pxrInternal__aapl__pxrReserved__::SdfVariableExpression *)v13);
  if (v17 != v18)
  {
    sub_216881C38("; ", v17, v18, &__p);
    v13[0] = (void **)"usd/flattenUtils.cpp";
    v13[1] = (void **)"_EvaluateAssetPathExpression";
    void v13[2] = (void **)725;
    void v13[3] = (void **)"std::string pxrInternal__aapl__pxrReserved__::_EvaluateAssetPathExpression(const std::string &, co"
                      "nst VtDictionary &)";
    char v14 = 0;
    uint64_t v7 = *(char *)(a1 + 23) >= 0 ? a1 : *(void *)a1;
    uint64_t v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v13, (pxrInternal__aapl__pxrReserved__ *)"Error evaluating expression %s: %s", v6, v7, v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
  {
    if ((v16 & 4) != 0) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
    }
    else {
      uint64_t v9 = v15;
    }
    if (*(char *)(v9 + 23) < 0)
    {
      sub_216778F24((unsigned char *)a3, *(void **)v9, *(void *)(v9 + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)v9;
      *(void *)(a3 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)a3 = v10;
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  sub_216850298((uint64_t)v19);
  v13[0] = (void **)&v17;
  sub_216782F20(v13);
  return sub_2168EE084((uint64_t)&v15);
}

void sub_216D4C718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_216BD5B64((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdFlattenLayerStackResolveAssetPath(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (void **)a2;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 23))
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      return;
    }
LABEL_5:
    pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(a1, a2, (uint64_t)&v18);
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v5);
    pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
    uint64_t v7 = v17;
    if ((v17 & 0x80u) == 0) {
      size_t v8 = v17;
    }
    else {
      size_t v8 = __n;
    }
    unint64_t v9 = v20;
    int v10 = (char)v20;
    unint64_t v11 = v19;
    if ((v20 & 0x80u) != 0) {
      unint64_t v9 = v19;
    }
    if (v8 != v9) {
      goto LABEL_24;
    }
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = (unsigned __int8 *)&v18;
    }
    else {
      uint64_t v12 = (unsigned __int8 *)v18;
    }
    if ((v17 & 0x80) != 0)
    {
      if (memcmp(__s1, v12, __n)) {
        goto LABEL_24;
      }
    }
    else if (v17)
    {
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *v12)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        ++v12;
        if (!--v7) {
          goto LABEL_26;
        }
      }
LABEL_24:
      int v3 = &v18;
      if (v10 < 0) {
        goto LABEL_29;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (*((char *)v3 + 23) < 0)
    {
      unint64_t v11 = (unint64_t)v3[1];
LABEL_29:
      sub_216778F24((unsigned char *)a3, *v3, v11);
      goto LABEL_30;
    }
LABEL_27:
    *(_OWORD *)a3 = *(_OWORD *)v3;
    *(void *)(a3 + 16) = v3[2];
LABEL_30:
    if ((char)v17 < 0) {
      operator delete(__s1);
    }
    if ((char)v20 < 0) {
      operator delete(v18);
    }
    return;
  }
  if (*(void *)(a2 + 8)) {
    goto LABEL_5;
  }
  char v14 = *(void **)a2;

  sub_216778F24((unsigned char *)a3, v14, 0);
}

void sub_216D4C8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_216D4C944()
{
  uint64_t v0 = (uint64_t **)atomic_load((unint64_t *)&qword_267B91A48);
  if (!v0)
  {
    uint64_t v0 = (uint64_t **)operator new(0x18uLL);
    v0[1] = 0;
    v0[2] = 0;
    uint64_t *v0 = (uint64_t *)(v0 + 1);
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v2) {
      uint64_t v2 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    int v3 = (uint64_t *)*((void *)v2 + 9);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v4) {
      uint64_t v4 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    long long v5 = (uint64_t *)*((void *)v4 + 10);
    while (v3 != v5)
    {
      sub_216A5D070(v0, v0 + 1, v3, v3);
      ++v3;
    }
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6) {
      uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_216A8E144(v0, (uint64_t *)v6 + 53, (uint64_t *)v6 + 53);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_216A8E144(v0, (uint64_t *)v7 + 7, (uint64_t *)v7 + 7);
    size_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v8) {
      size_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_216A8E144(v0, (uint64_t *)v8 + 45, (uint64_t *)v8 + 45);
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v9) {
      unint64_t v9 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_216A8E144(v0, (uint64_t *)v9 + 46, (uint64_t *)v9 + 46);
    int v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v10) {
      int v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_216A8E144(v0, (uint64_t *)v10 + 54, (uint64_t *)v10 + 54);
    uint64_t v11 = 0;
    atomic_compare_exchange_strong(&qword_267B91A48, (unint64_t *)&v11, (unint64_t)v0);
    if (v11)
    {
      sub_2168CB05C((uint64_t)v0, v0[1]);
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B91A48);
    }
  }
  return (unint64_t)v0;
}

_DWORD *sub_216D4CB00@<X0>(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, uint64_t a4@<X3>, pxrInternal__aapl__pxrReserved__ *a5@<X8>)
{
  v121[3] = *(void **)MEMORY[0x263EF8340];
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
  Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v9);
  uint64_t v11 = sub_21697F2E0(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v11, &v73);
  uint64_t v12 = sub_21697F2E0(a2);
  Specuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v12);
  *((void *)a5 + 1) = 0;
  uint64_t v14 = *Layers;
  if (Layers[1] != *Layers)
  {
    unsigned int v15 = SpecType;
    unint64_t v16 = 0;
    uint64_t v72 = SpecType;
    while (1)
    {
      unsigned __int8 v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)(v14 + 8 * v16));
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v73))break; {
LABEL_75:
      }
      ++v16;
      uint64_t v14 = *Layers;
      if (v16 >= (Layers[1] - *Layers) >> 3) {
        goto LABEL_147;
      }
    }
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)(*Layers + 8 * v16));
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v73) != v15)
    {
      char v113 = "usd/flattenUtils.cpp";
      v114 = (atomic_uint *)"_ReduceField";
      uint64_t v115 = 500;
      v116 = "VtValue pxrInternal__aapl__pxrReserved__::_ReduceField(const PcpLayerStackRefPtr &, const SdfSpecHandle &, "
             "const TfToken &, const _ResolveAssetPathFn &)";
      LOBYTE(v117[0]) = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v73);
      uint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)(*Layers + 8 * v16));
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v28);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v30 = Identifier;
      }
      else {
        uint64_t v30 = *(void *)Identifier;
      }
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C755200, v72, (uint64_t)&v99);
      if (SHIBYTE(v101) >= 0) {
        uint64_t v31 = &v99;
      }
      else {
        uint64_t v31 = v99;
      }
      uint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)(*Layers + 8 * v16));
      unsigned int v33 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v32, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v73);
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C755200, v33, (uint64_t)&__p);
      p_p = &__p;
      if (v91 < 0) {
        p_p = __p;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v113, (pxrInternal__aapl__pxrReserved__ *)"UsdFlattenLayerStack: Ignoring spec at <%s> in @%s@: expected spec type %s but found %s", v34, Text, v30, v31, p_p);
      if (v91 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v101) < 0) {
        operator delete(v99);
      }
      goto LABEL_75;
    }
    uint64_t v98 = 0;
    unint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC((uint64_t *)(*Layers + 8 * v16));
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v73, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v97) & 1) == 0)
    {
LABEL_74:
      sub_2168EE084((uint64_t)&v97);
      goto LABEL_75;
    }
    unsigned __int8 v20 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(a1);
    LayerOffsetForLayer = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayerOffsetForLayer(v20, v16);
    uint64_t v22 = (double *)LayerOffsetForLayer;
    if (LayerOffsetForLayer && !pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity(LayerOffsetForLayer))
    {
      int v37 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v37) {
        int v37 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v37 + 1) & 0xFFFFFFFFFFFFFFF8))
      {
        if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
        {
          if ((v98 & 4) != 0) {
            uint64_t v42 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(&v97);
          }
          else {
            uint64_t v42 = v97;
          }
          pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&__p, v42);
          int v70 = a5;
          uint64_t v43 = a4;
          char v113 = (char *)pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)&__p);
          v114 = v44;
          uint64_t v45 = (char *)pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)&__p);
          uint64_t v47 = v46;
          while (1)
          {
            unint64_t v48 = v113;
            BOOL v49 = !v47 || v113 == v45;
            BOOL v50 = v49;
            if (v114 == v47 && v50) {
              break;
            }
            uint64_t v52 = (const pxrInternal__aapl__pxrReserved__::VtDictionary **)(v113 + 56);
            if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)(v113 + 56)))
            {
              uint64_t v55 = *((void *)v48 + 8);
              if ((v55 & 4) != 0) {
                uint64_t v56 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(char *))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(v48 + 56);
              }
              else {
                uint64_t v56 = *v52;
              }
              pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v82, v56);
              int v57 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              if (!v57) {
                int v57 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              }
              sub_216D4E644(v22, v57, (pxrInternal__aapl__pxrReserved__::TfToken *)&v82);
              uint64_t v58 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              if (!v58) {
                uint64_t v58 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              }
              sub_216D4E644(v22, (void *)v58 + 10, (pxrInternal__aapl__pxrReserved__::TfToken *)&v82);
              uint64_t v100 = &off_26C74DD80;
              sub_2168EEEA8((unsigned int **)&v99, (const void ****)&v82);
              sub_2168ED33C(v52, &v99);
              sub_2168EE084((uint64_t)&v99);
              sub_2168EBBB8(&v82, 0);
            }
            sub_2168EF1B0(&v113, v53, v54);
          }
          sub_2168EC844((pxrInternal__aapl__pxrReserved__::VtValue *)&v97, (const void ****)&__p);
          sub_2168EBBB8((void ***)&__p, 0);
          a4 = v43;
          a5 = v70;
        }
      }
      else
      {
        int v38 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v38) {
          int v38 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v38 + 35) & 0xFFFFFFFFFFFFFFF8))
        {
          if (sub_21698E9D8((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
          {
            if ((v98 & 4) != 0) {
              long long v59 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(&v97);
            }
            else {
              long long v59 = v97;
            }
            sub_2169D73B4((uint64_t)&v113, (uint64_t)v59);
            unint64_t v60 = operator new(0x20uLL);
            void *v60 = &unk_26C7683B0;
            v60[1] = sub_216D4E71C;
            *((_OWORD *)v60 + 1) = *(_OWORD *)v22;
            uint64_t v102 = v60;
            pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ModifyOperations();
          }
        }
        else
        {
          uint64_t v39 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v39) {
            uint64_t v39 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v39 + 30) & 0xFFFFFFFFFFFFFFF8))
          {
            if (sub_21698E94C((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
            {
              if ((v98 & 4) != 0) {
                uint64_t v62 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(&v97);
              }
              else {
                uint64_t v62 = v97;
              }
              sub_2169DA0D8((uint64_t)&v113, (uint64_t)v62);
              uint64_t v63 = operator new(0x20uLL);
              void *v63 = &unk_26C768460;
              v63[1] = sub_216D4E7D0;
              *((_OWORD *)v63 + 1) = *(_OWORD *)v22;
              uint64_t v102 = v63;
              pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ModifyOperations();
            }
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Usd_ApplyLayerOffsetToValue((const void *****)&v97, (pxrInternal__aapl__pxrReserved__::VtValue *)v22, v23);
          }
        }
      }
    }
    unint64_t v24 = sub_216ABBA60((uint64_t *)&v113, (uint64_t *)(*Layers + 8 * v16));
    sub_216D4DC40((uint64_t)v24, a3, a4, (pxrInternal__aapl__pxrReserved__::VtValue *)&v97);
    uint64_t v25 = v114;
    if (v114 && atomic_fetch_add_explicit(v114 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v25 + 8))(v25);
    }
    if (sub_21698F4F4((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
    {
      if ((v98 & 4) != 0) {
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(&v97);
      }
      else {
        uint64_t v26 = v97;
      }
      sub_2169DD444((uint64_t)&v99, (uint64_t)v26);
      sub_216D4FBAC((uint64_t)&v99, (uint64_t)&v113);
      sub_2169DD694((uint64_t)&v97, (uint64_t)&v113);
    }
    else if (sub_21698F60C((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
    {
      if ((v98 & 4) != 0) {
        uint64_t v36 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(&v97);
      }
      else {
        uint64_t v36 = v97;
      }
      sub_2169DEF68((uint64_t)&v99, (uint64_t)v36);
      sub_216D4FEF8((uint64_t)&v99, (uint64_t)&v113);
      sub_2169DF1B8((uint64_t)&v97, (uint64_t)&v113);
    }
    else if (sub_21698F580((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
    {
      if ((v98 & 4) != 0) {
        uint64_t v40 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(&v97);
      }
      else {
        uint64_t v40 = v97;
      }
      sub_2169DE38C((uint64_t)&v99, (uint64_t)v40);
      sub_216D50244((uint64_t)&v99, (uint64_t)&v113);
      sub_2169DE5DC((uint64_t)&v97, (uint64_t)&v113);
    }
    else
    {
      if (!sub_21698F698((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
      {
        if (sub_21698F7B0((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
        {
          if ((v98 & 4) != 0) {
            int v61 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(&v97);
          }
          else {
            int v61 = v97;
          }
          sub_2169E21E0((uint64_t)&__p, (uint64_t)v61);
          sub_216D50904((uint64_t)&__p, (uint64_t)&v113);
          sub_2169E2430((uint64_t)&v97, (uint64_t)&v113);
          int v99 = v121;
          sub_216889A04((void ***)&v99);
          int v99 = v120;
          sub_216889A04((void ***)&v99);
          int v99 = v119;
          sub_216889A04((void ***)&v99);
          int v99 = v118;
          sub_216889A04((void ***)&v99);
          int v99 = v117;
          sub_216889A04((void ***)&v99);
          int v99 = &v114;
          sub_216889A04((void ***)&v99);
          int v99 = &v96;
          sub_216889A04((void ***)&v99);
          int v99 = &v95;
          sub_216889A04((void ***)&v99);
          int v99 = &v94;
          sub_216889A04((void ***)&v99);
          int v99 = &v93;
          sub_216889A04((void ***)&v99);
          int v99 = &v92;
          sub_216889A04((void ***)&v99);
          int v99 = &v90;
          sub_216889A04((void ***)&v99);
        }
        else if (sub_21698F724((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
        {
          if ((v98 & 4) != 0) {
            char v64 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(&v97);
          }
          else {
            char v64 = v97;
          }
          sub_2169DAE8C((uint64_t)&v82, (uint64_t)v64);
          sub_216D50BEC((uint64_t)&v82, (uint64_t)&v113);
          sub_2169DB10C((uint64_t)&v97, (uint64_t)&v113);
          int v99 = v121;
          sub_216782F20((void ***)&v99);
          int v99 = v120;
          sub_216782F20((void ***)&v99);
          int v99 = v119;
          sub_216782F20((void ***)&v99);
          int v99 = v118;
          sub_216782F20((void ***)&v99);
          int v99 = v117;
          sub_216782F20((void ***)&v99);
          int v99 = &v114;
          sub_216782F20((void ***)&v99);
          int v99 = &v88;
          sub_216782F20((void ***)&v99);
          int v99 = &v87;
          sub_216782F20((void ***)&v99);
          int v99 = &v86;
          sub_216782F20((void ***)&v99);
          int v99 = &v85;
          sub_216782F20((void ***)&v99);
          int v99 = &v84;
          sub_216782F20((void ***)&v99);
          int v99 = &v83;
          sub_216782F20((void ***)&v99);
        }
        else if (sub_216980CE8((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
        {
          if ((v98 & 4) != 0) {
            uint64_t v65 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(&v97);
          }
          else {
            uint64_t v65 = v97;
          }
          sub_216980D74((uint64_t)v75, (uint64_t)v65);
          sub_216D50EC8((uint64_t)v75, (uint64_t)&v113);
          sub_2169D4EDC((uint64_t)&v97, (uint64_t)&v113);
          int v99 = v121;
          sub_216981168((void ***)&v99);
          int v99 = v120;
          sub_216981168((void ***)&v99);
          int v99 = v119;
          sub_216981168((void ***)&v99);
          int v99 = v118;
          sub_216981168((void ***)&v99);
          int v99 = v117;
          sub_216981168((void ***)&v99);
          int v99 = &v114;
          sub_216981168((void ***)&v99);
          int v99 = &v81;
          sub_216981168((void ***)&v99);
          int v99 = &v80;
          sub_216981168((void ***)&v99);
          int v99 = &v79;
          sub_216981168((void ***)&v99);
          int v99 = &v78;
          sub_216981168((void ***)&v99);
          int v99 = &v77;
          sub_216981168((void ***)&v99);
          int v99 = &v76;
          sub_216981168((void ***)&v99);
        }
        else if (sub_21698E94C((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
        {
          if ((v98 & 4) != 0) {
            unint64_t v66 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(&v97);
          }
          else {
            unint64_t v66 = v97;
          }
          sub_2169DA0D8((uint64_t)&v99, (uint64_t)v66);
          sub_216D51198((uint64_t)&v99, (uint64_t)&v113);
          sub_2169DA358((uint64_t)&v97, (uint64_t)&v113);
          sub_2169D8044((void **)&v113);
          sub_2169D8044(&v99);
        }
        else if (sub_21698E9D8((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
        {
          if ((v98 & 4) != 0) {
            uint64_t v67 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(&v97);
          }
          else {
            uint64_t v67 = v97;
          }
          sub_2169D73B4((uint64_t)&v99, (uint64_t)v67);
          sub_216D51490((uint64_t)&v99, (uint64_t)&v113);
          sub_2169D764C((uint64_t)&v97, (uint64_t)&v113);
          sub_2169D5040((void **)&v113);
          sub_2169D5040(&v99);
        }
        else if (sub_21698F468((pxrInternal__aapl__pxrReserved__::VtValue *)&v97))
        {
          if ((v98 & 4) != 0) {
            uint64_t v68 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(&v97);
          }
          else {
            uint64_t v68 = v97;
          }
          sub_2169E2B3C((uint64_t)&v99, (uint64_t)v68);
          sub_216D5177C((uint64_t)&v99, (uint64_t)&v113);
          sub_216CEB2FC((uint64_t)&v97, (uint64_t)&v113);
          sub_2169D3664((void **)&v113);
          sub_2169D3664(&v99);
        }
        goto LABEL_73;
      }
      if ((v98 & 4) != 0) {
        uint64_t v41 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(&v97);
      }
      else {
        uint64_t v41 = v97;
      }
      sub_2169DFB7C((uint64_t)&v99, (uint64_t)v41);
      sub_216D505A4((uint64_t)&v99, (uint64_t)&v113);
      sub_2169DFDCC((uint64_t)&v97, (uint64_t)&v113);
    }
    if (v121[0])
    {
      v121[1] = v121[0];
      operator delete(v121[0]);
    }
    if (v120[0])
    {
      v120[1] = v120[0];
      operator delete(v120[0]);
    }
    if (v119[0])
    {
      v119[1] = v119[0];
      operator delete(v119[0]);
    }
    if (v118[0])
    {
      v118[1] = v118[0];
      operator delete(v118[0]);
    }
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    if (v114)
    {
      uint64_t v115 = (uint64_t)v114;
      operator delete(v114);
    }
    if (v111)
    {
      v112 = v111;
      operator delete(v111);
    }
    if (v109)
    {
      v110 = v109;
      operator delete(v109);
    }
    if (v107)
    {
      v108 = v107;
      operator delete(v107);
    }
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
    if (v103)
    {
      unint64_t v104 = v103;
      operator delete(v103);
    }
    if (v100)
    {
      uint64_t v101 = v100;
      operator delete(v100);
    }
LABEL_73:
    pxrInternal__aapl__pxrReserved__::_Reduce(a5, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v97, a3, &v113);
    sub_2168ED33C(a5, &v113);
    sub_2168EE084((uint64_t)&v113);
    goto LABEL_74;
  }
LABEL_147:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v74);
  return sub_21697C414(&v73);
}

void sub_216D4D93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41)
{
  sub_2169D3664((void **)(v42 - 248));
  sub_2169D3664((void **)&STACK[0x2E0]);
  sub_2168EE084((uint64_t)&STACK[0x2D0]);
  sub_2168EE084(v41);
  sub_21697B754(&a41);
  _Unwind_Resume(a1);
}

void sub_216D4DC40(uint64_t a1, void *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  v57[1] = *(void ***)MEMORY[0x263EF8340];
  if (sub_2169980B4(a4))
  {
    sub_216D4EA9C(a1, a3, a4);
  }
  else if (sub_216998140(a4))
  {
    sub_216D4EC24(a1, a3, a4);
  }
  else if (sub_216995B54(a4))
  {
    uint64_t v8 = *((void *)a4 + 1);
    if ((v8 & 4) != 0) {
      unint64_t v9 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a4);
    }
    else {
      unint64_t v9 = *(const pxrInternal__aapl__pxrReserved__::VtDictionary **)a4;
    }
    if (*((void *)v9 + 2))
    {
      int v10 = sub_2169980B4((pxrInternal__aapl__pxrReserved__::VtValue *)(*(void *)v9 + 40));
      int v11 = sub_216998140((pxrInternal__aapl__pxrReserved__::VtValue *)(*(void *)v9 + 40));
      if ((v10 & 1) != 0 || v11)
      {
        __p[1] = 0;
        uint64_t v48 = 0;
        __p[0] = &__p[1];
        sub_216A9D208(a4, (uint64_t)__p);
        uint64_t v12 = (void **)__p[0];
        if (v10)
        {
          if (__p[0] != &__p[1])
          {
            do
            {
              sub_216D4EA9C(a1, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)(v12 + 5));
              uint64_t v13 = (void **)v12[1];
              if (v13)
              {
                do
                {
                  uint64_t v14 = v13;
                  uint64_t v13 = (void **)*v13;
                }
                while (v13);
              }
              else
              {
                do
                {
                  uint64_t v14 = (void **)v12[2];
                  BOOL v26 = *v14 == v12;
                  uint64_t v12 = v14;
                }
                while (!v26);
              }
              uint64_t v12 = v14;
            }
            while (v14 != &__p[1]);
          }
        }
        else if (__p[0] != &__p[1])
        {
          do
          {
            sub_216D4EC24(a1, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)(v12 + 5));
            unint64_t v16 = (void **)v12[1];
            if (v16)
            {
              do
              {
                unsigned __int8 v17 = v16;
                unint64_t v16 = (void **)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                unsigned __int8 v17 = (void **)v12[2];
                BOOL v26 = *v17 == v12;
                uint64_t v12 = v17;
              }
              while (!v26);
            }
            uint64_t v12 = v17;
          }
          while (v17 != &__p[1]);
        }
        sub_216A9D208(a4, (uint64_t)__p);
        sub_216997EC4((uint64_t)__p, (void *)__p[1]);
      }
    }
  }
  else if (sub_216B6E53C(a4))
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v48 = 0;
    int v46 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v46);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v46 + 1);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v45, 0.0, 1.0);
    uint64_t v44 = 0;
    pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(&v52, __p, &v46, v45, &v44);
    sub_2168EBBB8(&v44, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_21697C414(&v46);
    if (SHIBYTE(v48) < 0) {
      operator delete(__p[0]);
    }
    sub_216D4EDF8(a4, &v52);
    sub_216D4EF58(a3, &v52, (char *)__p);
    if (SHIBYTE(v53) < 0) {
      operator delete((void *)v52);
    }
    long long v52 = *(_OWORD *)__p;
    uint64_t v53 = v48;
    HIBYTE(v48) = 0;
    LOBYTE(__p[0]) = 0;
    sub_21697DE94(&v54, (int *)&v49);
    sub_21697DEEC(&v55, (int *)&v49 + 1);
    long long v56 = v50;
    unsigned int v15 = v51;
    uint64_t v51 = 0;
    sub_2168EBBB8(v57, v15);
    sub_216ADDBA8((uint64_t)__p);
    sub_216D4EDF8(a4, &v52);
    sub_2168EBBB8(v57, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
    sub_21697C414(&v54);
    if (SHIBYTE(v53) < 0) {
      operator delete((void *)v52);
    }
  }
  else
  {
    if (sub_21698E9D8(a4)) {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp();
    }
    if (sub_216B6E1CC(a4))
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v48 = 0;
      int v46 = 0;
      sub_2169C4380(&v46);
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)v45, 0.0, 1.0);
      pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(&v52, __p, &v46, v45);
      sub_21697B754(&v46);
      if (SHIBYTE(v48) < 0) {
        operator delete(__p[0]);
      }
      sub_216CE3AB8(a4, &v52);
      sub_216D4F0E4(a3, (uint64_t)&v52, __p);
      sub_216D4F238((uint64_t)&v52, (long long *)__p);
      sub_216ADDCD4((uint64_t)__p);
      sub_216CE3AB8(a4, &v52);
      sub_2169D8488((uint64_t)&v52);
    }
    else
    {
      if (sub_21698E94C(a4)) {
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp();
      }
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v18) {
        uint64_t v18 = sub_216C425D4(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      }
      if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v18 + 1) & 0xFFFFFFFFFFFFFFF8)
        && sub_2168EC434(a4))
      {
        uint64_t v19 = *((void *)a4 + 1);
        if ((v19 & 4) != 0) {
          unsigned __int8 v20 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(a4);
        }
        else {
          unsigned __int8 v20 = *(const pxrInternal__aapl__pxrReserved__::VtDictionary **)a4;
        }
        pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)v45, v20);
        *(void *)&long long v52 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin((pxrInternal__aapl__pxrReserved__::VtDictionary *)v45);
        *((void *)&v52 + 1) = v21;
        uint64_t v22 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)v45);
        uint64_t v24 = v23;
        while (1)
        {
          uint64_t v25 = v52;
          BOOL v26 = !v24 || (void)v52 == v22;
          BOOL v27 = v26;
          if (*((void *)&v52 + 1) == v24 && v27) {
            break;
          }
          uint64_t v29 = (const pxrInternal__aapl__pxrReserved__::VtDictionary **)(v52 + 56);
          if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)(v52 + 56)))
          {
            uint64_t v31 = *(void *)(v25 + 64);
            if ((v31 & 4) != 0) {
              uint64_t v32 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(uint64_t))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(v25 + 56);
            }
            else {
              uint64_t v32 = *v29;
            }
            pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v46, v32);
            unsigned int v33 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v33) {
              unsigned int v33 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            }
            uint64_t v34 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_216C561E4((pxrInternal__aapl__pxrReserved__::TfToken *)&v46, (void *)v33 + 1);
            uint64_t v35 = v34;
            if (v34 && sub_216998140(v34))
            {
              uint64_t v36 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              if (!v36) {
                uint64_t v36 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              }
              sub_216D4DC40(a1, (char *)v36 + 8, a3, v35);
            }
            int v37 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            if (!v37) {
              int v37 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
            }
            int v38 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_216C561E4((pxrInternal__aapl__pxrReserved__::TfToken *)&v46, (void *)v37 + 3);
            uint64_t v39 = v38;
            if (v38 && sub_2169980B4(v38))
            {
              uint64_t v40 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              if (!v40) {
                uint64_t v40 = sub_216C5079C(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
              }
              sub_216D4DC40(a1, (char *)v40 + 24, a3, v39);
            }
            __p[1] = &off_26C74DD80;
            sub_2168EEEA8((unsigned int **)__p, (const void ****)&v46);
            sub_2168ED33C(v29, __p);
            sub_2168EE084((uint64_t)__p);
            sub_2168EBBB8(&v46, 0);
          }
          else
          {
            uint64_t v43 = (void *)(v25 + 32);
            __p[0] = "usd/flattenUtils.cpp";
            __p[1] = "_FixAssetPaths";
            uint64_t v48 = 432;
            BOOL v49 = "void pxrInternal__aapl__pxrReserved__::_FixAssetPaths(const SdfLayerHandle &, const TfToken &, const _"
                  "ResolveAssetPathFn &, VtValue *)";
            LOBYTE(v50) = 0;
            if (*(char *)(v25 + 55) < 0) {
              uint64_t v43 = (void *)*v43;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Expected dictionary for entry '%s' in 'clips'", v30, v43);
          }
          sub_2168EF1B0(&v52, v41, v42);
        }
        sub_2168EC844(a4, (const void ****)v45);
        sub_2168EBBB8(v45, 0);
      }
    }
  }
}

void sub_216D4E4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, void **a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
}

void sub_216D4E644(double *a1, void *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_216C561E4(a3, a2);
  if (v4)
  {
    long long v5 = v4;
    if (sub_2168FC5B0(v4))
    {
      uint64_t v13 = 0;
      memset(v12, 0, sizeof(v12));
      sub_2168FC4F8(v5, v12);
      sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
      uint64_t v8 = v13;
      sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
      int v11 = &v13[2 * v12[0].n128_u64[0]];
      while (v8 != v11)
      {
        *uint64_t v8 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(a1, *v8);
        v8 += 2;
      }
      sub_2168FC4F8(v5, v12);
      sub_2168F83DC((uint64_t)v12);
    }
  }
}

void sub_216D4E6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216D4E71C(double *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  sub_2169D5338((char *)__p, (long long *)a2);
  double v11 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(a1, (double *)(a2 + 32));
  uint64_t v12 = v6;
  sub_2169D5338(a3, (long long *)__p);
  a3[56] = 1;
  sub_2168EBBB8(&v13, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D4E7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169D5474((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216D4E7D0(double *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
  }
  sub_216981010(&v9, (_DWORD *)(a2 + 24));
  sub_21698105C(&v10, (_DWORD *)(a2 + 28));
  long long v11 = *(_OWORD *)(a2 + 32);
  *(void *)&long long v11 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(a1, (double *)(a2 + 32));
  *((void *)&v11 + 1) = v6;
  sub_216ABE38C(a3, (long long *)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D4E8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_216D4E8C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C7683B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216D4E918(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C7683B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216D4E950(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a1 + 16);
}

uint64_t sub_216D4E960(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C768438)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D4E9A0()
{
  return &unk_26C768438;
}

__n128 sub_216D4E9B4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C768460;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216D4EA08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C768460;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216D4EA40(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a1 + 16);
}

uint64_t sub_216D4EA50(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7684E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D4EA90()
{
  return &unk_26C7684E8;
}

void sub_216D4EA9C(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)__p);
  __n128 v5 = sub_216B8E324(a3, (uint64_t)__p);
  uint64_t v6 = *(void *)(a2 + 24);
  if (!v6) {
    sub_21683A7CC();
  }
  (*(void (**)(void **__return_ptr, __n128))(*(void *)v6 + 48))(&v7, v5);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v9);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)v9;
  uint64_t v14 = v10;
  HIBYTE(v10) = 0;
  LOBYTE(v9[0]) = 0;
  if (SHIBYTE(v16) < 0)
  {
    operator delete((void *)v15);
    long long v15 = v11;
    uint64_t v16 = v12;
    HIBYTE(v12) = 0;
    LOBYTE(v11) = 0;
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[0]);
    }
  }
  else
  {
    long long v15 = v11;
    uint64_t v16 = v12;
    HIBYTE(v12) = 0;
    LOBYTE(v11) = 0;
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  sub_216B8E324(a3, (uint64_t)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D4EBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_21682E578((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_216D4EC24(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  sub_216B8E3E8(a3, v23);
  sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23, v5, v6);
  uint64_t v7 = v24;
  sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23, v8, v9);
  for (uint64_t i = v24 + 48 * v23[0].n128_u64[0]; v7 != i; v7 += 48)
  {
    uint64_t v11 = *(void *)(a2 + 24);
    if (!v11) {
      sub_21683A7CC();
    }
    (*(void (**)(void **__return_ptr))(*(void *)v11 + 48))(&v17);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p);
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    long long v12 = *(_OWORD *)__p;
    *(void *)(v7 + 16) = v20;
    *(_OWORD *)uint64_t v7 = v12;
    HIBYTE(v20) = 0;
    LOBYTE(__p[0]) = 0;
    uint64_t v13 = (void **)(v7 + 24);
    if (*(char *)(v7 + 47) < 0)
    {
      operator delete(*v13);
      int v15 = SHIBYTE(v20);
      long long v16 = v21;
      *(void *)(v7 + 40) = v22;
      *(_OWORD *)uint64_t v13 = v16;
      HIBYTE(v22) = 0;
      LOBYTE(v21) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v14 = v21;
      *(void *)(v7 + 40) = v22;
      *(_OWORD *)uint64_t v13 = v14;
      HIBYTE(v22) = 0;
      LOBYTE(v21) = 0;
    }
    if (v18 < 0) {
      operator delete(v17);
    }
  }
  sub_216B8E3E8(a3, v23);
  sub_2169B4408(v23);
}

void sub_216D4EDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

void sub_216D4EDF8(pxrInternal__aapl__pxrReserved__::VtValue *a1, long long *a2)
{
  if ((sub_216B6E53C(a1) & 1) == 0)
  {
    v8[0] = 0;
    v8[1] = 0;
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v7 + 1);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v6, 0.0, 1.0);
    uint64_t v5 = 0;
    pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__p, v8, &v7, v6, &v5);
    sub_216D4F2A8(a1, (long long *)__p);
    sub_2168EBBB8(&v14, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
    sub_21697C414(&v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    sub_2168EBBB8(&v5, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
    sub_21697C414(&v7);
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[0]);
    }
  }
  uint64_t v4 = sub_216D4F374((long long **)a1);
  sub_2169D66C8((uint64_t)v4, a2);
}

void sub_216D4EF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216D4EF58(uint64_t a1@<X0>, long long *a2@<X2>, char *a3@<X8>)
{
  sub_2169D5338((char *)__dst, a2);
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_21683A7CC();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v5 + 48))(&__p);
  sub_216ABDCAC((uint64_t)__dst);
  if (v7 < 0) {
    operator delete(__p);
  }
  sub_2169D5338(a3, (long long *)__dst);
  a3[56] = 1;
  sub_2168EBBB8(&v12, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v11);
  sub_21697C414(&v10);
  if (v9 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_216D4F048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_216D4F078(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 48);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  sub_216D52D98((void *)(a1 + 8));
  return a1;
}

void sub_216D4F0E4(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
  }
  sub_216981010(&v11, (_DWORD *)(a2 + 24));
  sub_21698105C(&v12, (_DWORD *)(a2 + 28));
  long long v13 = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    sub_21683A7CC();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v6 + 48))(&__p);
  sub_216ABE2D8((uint64_t)__dst);
  if (v8 < 0) {
    operator delete(__p);
  }
  sub_216ABE38C(a3, (long long *)__dst);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (SHIBYTE(v10) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_216D4F208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_216D4F238(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  sub_21697DE94((int *)(a1 + 24), (int *)a2 + 6);
  sub_21697DEEC((int *)(a1 + 28), (int *)a2 + 7);
  *(_OWORD *)(a1 + 32) = a2[2];
  return a1;
}

void *sub_216D4F2A8(void *a1, long long *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C75A4A0;
  sub_216B53430(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216D4F33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

long long *sub_216D4F374(long long **a1)
{
  double v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, long long **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216B533A4(a1);
}

uint64_t sub_216D4F408(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_216D4F4A0(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 24) = 0;
  long long v4 = operator new(0x40uLL);
  uint64_t v5 = *a2;
  *long long v4 = &unk_26C768510;
  v4[1] = v5;
  sub_216D4F748((uint64_t)(v4 + 2), (uint64_t)(a2 + 1));
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 5);
  a2[5] = 0;
  a2[6] = 0;
  *(void *)(a1 + 24) = v4;
  return a1;
}

void *sub_216D4F518(void *a1)
{
  *a1 = &unk_26C768510;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  sub_216D52D98(a1 + 2);
  return a1;
}

void sub_216D4F5A0(void *a1)
{
  *a1 = &unk_26C768510;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  sub_216D52D98(a1 + 2);

  operator delete(a1);
}

void *sub_216D4F638(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x40uLL);
  sub_216D4F7C8(v2, v1);
  return v2;
}

void sub_216D4F67C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216D4F690(uint64_t a1, void *a2)
{
  return sub_216D4F7C8(a2, (uint64_t *)(a1 + 8));
}

void *sub_216D4F6A0(uint64_t a1)
{
  return sub_216D4F82C(a1 + 8);
}

void sub_216D4F6A8(void *a1)
{
  sub_216D4F82C((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_216D4F6E4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1 + 16, a1 + 48, a2);
}

uint64_t sub_216D4F6FC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C768580)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D4F73C()
{
  return &unk_26C768580;
}

uint64_t sub_216D4F748(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_216D4F7C8(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a1 = &unk_26C768510;
  a1[1] = v4;
  sub_216D4F408((uint64_t)(a1 + 2), (uint64_t)(a2 + 1));
  uint64_t v5 = a2[6];
  a1[6] = a2[5];
  a1[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  return a1;
}

void *sub_216D4F82C(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 48);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  return sub_216D52D98((void *)(a1 + 8));
}

uint64_t sub_216D4F8A0(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = operator new(0x40uLL);
  uint64_t v5 = *a2;
  *uint64_t v4 = &unk_26C7685A8;
  v4[1] = v5;
  sub_216D4F748((uint64_t)(v4 + 2), (uint64_t)(a2 + 1));
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 5);
  a2[5] = 0;
  a2[6] = 0;
  *(void *)(a1 + 24) = v4;
  return a1;
}

void *sub_216D4F918(void *a1)
{
  *a1 = &unk_26C7685A8;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  sub_216D52D98(a1 + 2);
  return a1;
}

void sub_216D4F9A0(void *a1)
{
  *a1 = &unk_26C7685A8;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  sub_216D52D98(a1 + 2);

  operator delete(a1);
}

void *sub_216D4FA38(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x40uLL);
  sub_216D4FB48(v2, v1);
  return v2;
}

void sub_216D4FA7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216D4FA90(uint64_t a1, void *a2)
{
  return sub_216D4FB48(a2, (uint64_t *)(a1 + 8));
}

void *sub_216D4FAA0(uint64_t a1)
{
  return sub_216D4F82C(a1 + 8);
}

void sub_216D4FAA8(void *a1)
{
  sub_216D4F82C((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_216D4FAE4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1 + 16, a1 + 48, a2);
}

uint64_t sub_216D4FAFC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C768618)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D4FB3C()
{
  return &unk_26C768618;
}

void *sub_216D4FB48(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a1 = &unk_26C7685A8;
  a1[1] = v4;
  sub_216D4F408((uint64_t)(a1 + 2), (uint64_t)(a2 + 1));
  uint64_t v5 = a2[6];
  a1[6] = a2[5];
  a1[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  return a1;
}

__n128 sub_216D4FBAC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    __s = 0;
    char v18 = 0;
    uint64_t v19 = 0;
    if (&__s != (__int32 **)(a1 + 80)) {
      sub_216825D78((char *)&__s, *(char **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2);
    }
    uint64_t v4 = *(__int32 **)(a1 + 32);
    uint64_t v5 = *(__int32 **)(a1 + 40);
    if (v4 != v5)
    {
      uint64_t v6 = v18;
      do
      {
        uint64_t v7 = wmemchr(__s, *v4, v6 - __s);
        if (v7) {
          char v8 = v7;
        }
        else {
          char v8 = v6;
        }
        uint64_t v6 = v18;
        if (v8 == v18)
        {
          if (v8 >= v19)
          {
            char v9 = __s;
            uint64_t v10 = v18 - __s;
            unint64_t v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 62) {
              sub_21677CB10();
            }
            uint64_t v12 = (char *)v19 - (char *)__s;
            if (((char *)v19 - (char *)__s) >> 1 > v11) {
              unint64_t v11 = v12 >> 1;
            }
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v13 = v11;
            }
            if (v13)
            {
              long long v14 = (char *)sub_21677EA28((uint64_t)&v19, v13);
              char v9 = __s;
              char v8 = v18;
            }
            else
            {
              long long v14 = 0;
            }
            int v15 = (__int32 *)&v14[4 * v10];
            *int v15 = *v4;
            uint64_t v6 = v15 + 1;
            while (v8 != v9)
            {
              __int32 v16 = *--v8;
              *--int v15 = v16;
            }
            __s = v15;
            char v18 = v6;
            uint64_t v19 = (__int32 *)&v14[4 * v13];
            if (v9) {
              operator delete(v9);
            }
          }
          else
          {
            *char v8 = *v4;
            uint64_t v6 = v8 + 1;
          }
          char v18 = v6;
        }
        ++v4;
      }
      while (v4 != v5);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems();
  }
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a2 + 8sub_2168EBBB8((void ***)&a9, 0) = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 12sub_2168EBBB8((void ***)&a9, 0) = *(void *)(a1 + 120);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  __n128 result = *(__n128 *)(a1 + 128);
  *(__n128 *)(a2 + 128) = result;
  *(void *)(a2 + 144) = *(void *)(a1 + 144);
  *(void *)(a1 + 12sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return result;
}

void sub_216D4FEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216D4FEF8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    __s = 0;
    char v18 = 0;
    uint64_t v19 = 0;
    if (&__s != (__int32 **)(a1 + 80)) {
      sub_216825D78((char *)&__s, *(char **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2);
    }
    uint64_t v4 = *(__int32 **)(a1 + 32);
    uint64_t v5 = *(__int32 **)(a1 + 40);
    if (v4 != v5)
    {
      uint64_t v6 = v18;
      do
      {
        uint64_t v7 = wmemchr(__s, *v4, v6 - __s);
        if (v7) {
          char v8 = v7;
        }
        else {
          char v8 = v6;
        }
        uint64_t v6 = v18;
        if (v8 == v18)
        {
          if (v8 >= v19)
          {
            char v9 = __s;
            uint64_t v10 = v18 - __s;
            unint64_t v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 62) {
              sub_21677CB10();
            }
            uint64_t v12 = (char *)v19 - (char *)__s;
            if (((char *)v19 - (char *)__s) >> 1 > v11) {
              unint64_t v11 = v12 >> 1;
            }
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v13 = v11;
            }
            if (v13)
            {
              long long v14 = (char *)sub_21677EA28((uint64_t)&v19, v13);
              char v9 = __s;
              char v8 = v18;
            }
            else
            {
              long long v14 = 0;
            }
            int v15 = (__int32 *)&v14[4 * v10];
            *int v15 = *v4;
            uint64_t v6 = v15 + 1;
            while (v8 != v9)
            {
              __int32 v16 = *--v8;
              *--int v15 = v16;
            }
            __s = v15;
            char v18 = v6;
            uint64_t v19 = (__int32 *)&v14[4 * v13];
            if (v9) {
              operator delete(v9);
            }
          }
          else
          {
            *char v8 = *v4;
            uint64_t v6 = v8 + 1;
          }
          char v18 = v6;
        }
        ++v4;
      }
      while (v4 != v5);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems();
  }
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a2 + 8sub_2168EBBB8((void ***)&a9, 0) = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 12sub_2168EBBB8((void ***)&a9, 0) = *(void *)(a1 + 120);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  __n128 result = *(__n128 *)(a1 + 128);
  *(__n128 *)(a2 + 128) = result;
  *(void *)(a2 + 144) = *(void *)(a1 + 144);
  *(void *)(a1 + 12sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return result;
}

void sub_216D50204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216D50244@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    std::string __p = 0;
    char v18 = 0;
    uint64_t v19 = 0;
    if (&__p != (void **)(a1 + 80)) {
      sub_21677CC7C((char *)&__p, *(char **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
    }
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 40);
    if (v4 != v5)
    {
      uint64_t v6 = v18;
      do
      {
        uint64_t v7 = (char *)__p;
        char v8 = v6;
        if (__p != v6)
        {
          char v8 = (char *)__p;
          do
          {
            if (*(void *)v8 == *v4) {
              goto LABEL_12;
            }
            v8 += 8;
          }
          while (v8 != v6);
          char v8 = v6;
        }
LABEL_12:
        if (v8 == v6)
        {
          if (v6 >= v19)
          {
            uint64_t v10 = (v6 - (unsigned char *)__p) >> 3;
            unint64_t v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 61) {
              sub_21677CB10();
            }
            uint64_t v12 = v19 - (unsigned char *)__p;
            if ((v19 - (unsigned char *)__p) >> 2 > v11) {
              unint64_t v11 = v12 >> 2;
            }
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v13 = v11;
            }
            if (v13)
            {
              long long v14 = (char *)sub_21677CB28((uint64_t)&v19, v13);
              uint64_t v7 = (char *)__p;
              uint64_t v6 = v18;
            }
            else
            {
              long long v14 = 0;
            }
            int v15 = &v14[8 * v10];
            *(void *)int v15 = *v4;
            char v9 = v15 + 8;
            while (v6 != v7)
            {
              uint64_t v16 = *((void *)v6 - 1);
              v6 -= 8;
              *((void *)v15 - 1) = v16;
              v15 -= 8;
            }
            std::string __p = v15;
            char v18 = v9;
            uint64_t v19 = &v14[8 * v13];
            if (v7) {
              operator delete(v7);
            }
          }
          else
          {
            *(void *)uint64_t v6 = *v4;
            char v9 = v6 + 8;
          }
          char v18 = v9;
          uint64_t v6 = v9;
        }
        ++v4;
      }
      while (v4 != v5);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems();
  }
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a2 + 8sub_2168EBBB8((void ***)&a9, 0) = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 12sub_2168EBBB8((void ***)&a9, 0) = *(void *)(a1 + 120);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  __n128 result = *(__n128 *)(a1 + 128);
  *(__n128 *)(a2 + 128) = result;
  *(void *)(a2 + 144) = *(void *)(a1 + 144);
  *(void *)(a1 + 12sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return result;
}

void sub_216D50564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216D505A4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    std::string __p = 0;
    char v18 = 0;
    uint64_t v19 = 0;
    if (&__p != (void **)(a1 + 80)) {
      sub_21677CC7C((char *)&__p, *(char **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
    }
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 40);
    if (v4 != v5)
    {
      uint64_t v6 = v18;
      do
      {
        uint64_t v7 = (char *)__p;
        char v8 = v6;
        if (__p != v6)
        {
          char v8 = (char *)__p;
          do
          {
            if (*(void *)v8 == *v4) {
              goto LABEL_12;
            }
            v8 += 8;
          }
          while (v8 != v6);
          char v8 = v6;
        }
LABEL_12:
        if (v8 == v6)
        {
          if (v6 >= v19)
          {
            uint64_t v10 = (v6 - (unsigned char *)__p) >> 3;
            unint64_t v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 61) {
              sub_21677CB10();
            }
            uint64_t v12 = v19 - (unsigned char *)__p;
            if ((v19 - (unsigned char *)__p) >> 2 > v11) {
              unint64_t v11 = v12 >> 2;
            }
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v13 = v11;
            }
            if (v13)
            {
              long long v14 = (char *)sub_21677CB28((uint64_t)&v19, v13);
              uint64_t v7 = (char *)__p;
              uint64_t v6 = v18;
            }
            else
            {
              long long v14 = 0;
            }
            int v15 = &v14[8 * v10];
            *(void *)int v15 = *v4;
            char v9 = v15 + 8;
            while (v6 != v7)
            {
              uint64_t v16 = *((void *)v6 - 1);
              v6 -= 8;
              *((void *)v15 - 1) = v16;
              v15 -= 8;
            }
            std::string __p = v15;
            char v18 = v9;
            uint64_t v19 = &v14[8 * v13];
            if (v7) {
              operator delete(v7);
            }
          }
          else
          {
            *(void *)uint64_t v6 = *v4;
            char v9 = v6 + 8;
          }
          char v18 = v9;
          uint64_t v6 = v9;
        }
        ++v4;
      }
      while (v4 != v5);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems();
  }
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a2 + 8sub_2168EBBB8((void ***)&a9, 0) = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 12sub_2168EBBB8((void ***)&a9, 0) = *(void *)(a1 + 120);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  __n128 result = *(__n128 *)(a1 + 128);
  *(__n128 *)(a2 + 128) = result;
  *(void *)(a2 + 144) = *(void *)(a1 + 144);
  *(void *)(a1 + 12sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return result;
}

void sub_216D508C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_216D50904@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    char v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    if (&v9 != (char **)(a1 + 80)) {
      sub_216ABF1B0(&v9, *(uint64_t **)(a1 + 80), *(uint64_t **)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
    }
    uint64_t v4 = *(uint64_t **)(a1 + 32);
    uint64_t v5 = *(uint64_t **)(a1 + 40);
    if (v4 != v5)
    {
      uint64_t v6 = v10;
      do
      {
        uint64_t v7 = v6;
        if (v9 != v6)
        {
          uint64_t v7 = v9;
          do
          {
            if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == (*v4 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_12;
            }
            v7 += 8;
          }
          while (v7 != v6);
          uint64_t v7 = v6;
        }
LABEL_12:
        if (v7 == v6)
        {
          if ((unint64_t)v6 >= v11)
          {
            uint64_t v6 = sub_216973984(&v9, v4);
          }
          else
          {
            uint64_t v8 = *v4;
            *(void *)uint64_t v6 = *v4;
            if ((v8 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *(void *)v6 &= 0xFFFFFFFFFFFFFFF8;
            }
            v6 += 8;
          }
          uint64_t v10 = v6;
        }
        ++v4;
      }
      while (v4 != v5);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems();
  }
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a2 + 8sub_2168EBBB8((void ***)&a9, 0) = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 12sub_2168EBBB8((void ***)&a9, 0) = *(void *)(a1 + 120);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  __n128 result = *(__n128 *)(a1 + 128);
  *(__n128 *)(a2 + 128) = result;
  *(void *)(a2 + 144) = *(void *)(a1 + 144);
  *(void *)(a1 + 12sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return result;
}

void sub_216D50BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_216889A04((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

__n128 sub_216D50BEC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    if (&v10 != (uint64_t *)(a1 + 80)) {
      sub_21680F694((uint64_t)&v10, *(std::string **)(a1 + 80), *(long long **)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
    }
    uint64_t v4 = *(long long **)(a1 + 32);
    uint64_t v5 = *(long long **)(a1 + 40);
    if (v4 != v5)
    {
      uint64_t v6 = v11;
      do
      {
        unint64_t v7 = sub_2169CAFD0(v10, v6, (unsigned __int8 **)v4);
        uint64_t v6 = v11;
        if (v7 == v11)
        {
          unint64_t v8 = v7;
          if (v7 >= v12)
          {
            uint64_t v6 = sub_2167E9A44(&v10, v4);
          }
          else
          {
            if (*((char *)v4 + 23) < 0)
            {
              sub_216778F24((unsigned char *)v7, *(void **)v4, *((void *)v4 + 1));
            }
            else
            {
              long long v9 = *v4;
              *(void *)(v7 + 16) = *((void *)v4 + 2);
              *(_OWORD *)unint64_t v7 = v9;
            }
            uint64_t v6 = v8 + 24;
          }
          uint64_t v11 = v6;
        }
        uint64_t v4 = (long long *)((char *)v4 + 24);
      }
      while (v4 != v5);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems();
  }
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a2 + 8sub_2168EBBB8((void ***)&a9, 0) = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 12sub_2168EBBB8((void ***)&a9, 0) = *(void *)(a1 + 120);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  __n128 result = *(__n128 *)(a1 + 128);
  *(__n128 *)(a2 + 128) = result;
  *(void *)(a2 + 144) = *(void *)(a1 + 144);
  *(void *)(a1 + 12sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return result;
}

void sub_216D50E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_216782F20((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

__n128 sub_216D50EC8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    if (&v8 != (void **)(a1 + 80)) {
      sub_216A98D9C((uint64_t)&v8, *(_DWORD **)(a1 + 80), *(_DWORD **)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
    }
    uint64_t v4 = *(_DWORD **)(a1 + 32);
    uint64_t v5 = *(_DWORD **)(a1 + 40);
    if (v4 != v5)
    {
      uint64_t v6 = v9;
      do
      {
        uint64_t v7 = v6;
        if (v8 != (void *)v6)
        {
          uint64_t v7 = v8;
          do
          {
            if (*v7 == *(void *)v4) {
              goto LABEL_12;
            }
            ++v7;
          }
          while (v7 != (void *)v6);
          uint64_t v7 = v6;
        }
LABEL_12:
        if (v7 == (void *)v6)
        {
          if ((unint64_t)v6 >= v10)
          {
            uint64_t v6 = (_DWORD *)sub_216981B30((uint64_t *)&v8, v4);
          }
          else
          {
            sub_216981010(v6, v4);
            sub_21698105C(v6 + 1, v4 + 1);
            v6 += 2;
          }
          uint64_t v9 = v6;
        }
        v4 += 2;
      }
      while (v4 != v5);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems();
  }
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a2 + 8sub_2168EBBB8((void ***)&a9, 0) = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 12sub_2168EBBB8((void ***)&a9, 0) = *(void *)(a1 + 120);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  __n128 result = *(__n128 *)(a1 + 128);
  *(__n128 *)(a2 + 128) = result;
  *(void *)(a2 + 144) = *(void *)(a1 + 144);
  *(void *)(a1 + 12sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return result;
}

void sub_216D51160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_216981168((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

__n128 sub_216D51198@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    unint64_t v8 = 0;
    long long __dst = 0;
    unint64_t v10 = 0;
    if (&v8 != (__n128 **)(a1 + 80)) {
      sub_216A99C60((uint64_t)&v8, *(std::string **)(a1 + 80), *(std::string **)(a1 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 4));
    }
    uint64_t v4 = *(unsigned __int8 **)(a1 + 32);
    uint64_t v5 = *(unsigned __int8 **)(a1 + 40);
    if (v4 != v5)
    {
      uint64_t v6 = (__n128 *)__dst;
      do
      {
        uint64_t v7 = (unsigned __int8 *)v8;
        if (v8 == v6)
        {
          uint64_t v7 = (unsigned __int8 *)v6;
        }
        else
        {
          do
          {
            if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v7, v4)) {
              goto LABEL_11;
            }
            v7 += 48;
          }
          while (v7 != (unsigned __int8 *)v6);
          uint64_t v7 = (unsigned __int8 *)v6;
LABEL_11:
          uint64_t v6 = (__n128 *)__dst;
        }
        if (v7 == (unsigned __int8 *)v6)
        {
          if ((unint64_t)v6 >= v10)
          {
            uint64_t v6 = (__n128 *)sub_216AE9558((uint64_t *)&v8, (uint64_t)v4);
          }
          else
          {
            sub_2169D8390((int)&v10, v6, (uint64_t)v4);
            v6 += 3;
          }
          long long __dst = v6;
        }
        v4 += 48;
      }
      while (v4 != v5);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems();
  }
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a2 + 8sub_2168EBBB8((void ***)&a9, 0) = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 12sub_2168EBBB8((void ***)&a9, 0) = *(void *)(a1 + 120);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  __n128 result = *(__n128 *)(a1 + 128);
  *(__n128 *)(a2 + 128) = result;
  *(void *)(a2 + 144) = *(void *)(a1 + 144);
  *(void *)(a1 + 12sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return result;
}

void sub_216D51448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_2169CC78C((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_2169CC78C((void ***)va);
  _Unwind_Resume(a1);
}

__n128 sub_216D51490@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    unint64_t v8 = 0;
    long long __dst = 0;
    unint64_t v10 = 0;
    if (&v8 != (unsigned __int8 **)(a1 + 80)) {
      sub_216A993D8((uint64_t)&v8, *(long long **)(a1 + 80), *(long long **)(a1 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3));
    }
    uint64_t v4 = *(unsigned __int8 **)(a1 + 32);
    uint64_t v5 = *(unsigned __int8 **)(a1 + 40);
    if (v4 != v5)
    {
      uint64_t v6 = (char *)__dst;
      do
      {
        uint64_t v7 = v8;
        if (v8 == (unsigned __int8 *)v6)
        {
          uint64_t v7 = (unsigned __int8 *)v6;
        }
        else
        {
          do
          {
            if (pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v7, v4)) {
              goto LABEL_11;
            }
            v7 += 56;
          }
          while (v7 != (unsigned __int8 *)v6);
          uint64_t v7 = (unsigned __int8 *)v6;
LABEL_11:
          uint64_t v6 = (char *)__dst;
        }
        if (v7 == (unsigned __int8 *)v6)
        {
          if ((unint64_t)v6 >= v10)
          {
            uint64_t v6 = (char *)sub_216AE6EA0((uint64_t *)&v8, (long long *)v4);
          }
          else
          {
            sub_2169D5338(v6, (long long *)v4);
            v6 += 56;
          }
          long long __dst = v6;
        }
        v4 += 56;
      }
      while (v4 != v5);
    }
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems();
  }
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a2 + 8sub_2168EBBB8((void ***)&a9, 0) = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 12sub_2168EBBB8((void ***)&a9, 0) = *(void *)(a1 + 120);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  __n128 result = *(__n128 *)(a1 + 128);
  *(__n128 *)(a2 + 128) = result;
  *(void *)(a2 + 144) = *(void *)(a1 + 144);
  *(void *)(a1 + 12sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return result;
}

void sub_216D51734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_2169CC68C((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_2169CC68C((void ***)va);
  _Unwind_Resume(a1);
}

__n128 sub_216D5177C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)a1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    if (&v9 != (uint64_t *)(a1 + 80)) {
      sub_216AE3120((uint64_t)&v9, *(void **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 4);
    }
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 40);
    while (1)
    {
      if (v4 == v5) {
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems();
      }
      uint64_t v6 = v9;
      uint64_t v7 = v10;
      if (v9 == v10)
      {
        uint64_t v8 = v9;
      }
      else
      {
        do
        {
          if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v6, v4)) {
            goto LABEL_11;
          }
          v6 += 16;
        }
        while (v6 != v7);
        uint64_t v6 = v7;
LABEL_11:
        uint64_t v8 = v6;
        uint64_t v6 = v10;
      }
      if (v8 == v6) {
        sub_216AD3B24(&v9, v4);
      }
      v4 += 2;
    }
  }
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a2 + 8sub_2168EBBB8((void ***)&a9, 0) = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 96) = *(void *)(a1 + 96);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 12sub_2168EBBB8((void ***)&a9, 0) = *(void *)(a1 + 120);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  __n128 result = *(__n128 *)(a1 + 128);
  *(__n128 *)(a2 + 128) = result;
  *(void *)(a2 + 144) = *(void *)(a1 + 144);
  *(void *)(a1 + 12sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return result;
}

void sub_216D519E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_216932118((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_216932118((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D51A1C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, void *a4, uint64_t a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  sub_216D4CB00(a1, a2, a3, a5, (pxrInternal__aapl__pxrReserved__ *)&v22);
  if (sub_216980CE8((pxrInternal__aapl__pxrReserved__::VtValue *)&v22))
  {
    if ((v23 & 4) != 0) {
      uint64_t v6 = (*(uint64_t (**)(uint64_t *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(&v22);
    }
    else {
      uint64_t v6 = v22;
    }
    sub_216980D74((uint64_t)v15, v6);
    if (v15[0])
    {
      if (sub_216A5F518((uint64_t)a4)) {
        (*(void (**)(void))(*(void *)*a4 + 56))();
      }
      uint64_t v7 = (std::__shared_weak_count *)a4[1];
      unint64_t v12 = (void **)*a4;
      unint64_t v13 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = 0;
      sub_216D1CC48((unsigned int *)&v12, v16);
    }
    else
    {
      if (sub_216A5F518((uint64_t)a4)) {
        (*(void (**)(void))(*(void *)*a4 + 48))();
      }
      uint64_t v8 = (std::__shared_weak_count *)a4[1];
      unint64_t v12 = (void **)*a4;
      unint64_t v13 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = 4;
      sub_216D1CC48((unsigned int *)&v12, v18);
      if (v13) {
        sub_216784EC4(v13);
      }
      uint64_t v9 = (std::__shared_weak_count *)a4[1];
      unint64_t v12 = (void **)*a4;
      unint64_t v13 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = 5;
      sub_216D1CC48((unsigned int *)&v12, v19);
      if (v13) {
        sub_216784EC4(v13);
      }
      uint64_t v10 = (std::__shared_weak_count *)a4[1];
      unint64_t v12 = (void **)*a4;
      unint64_t v13 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = 2;
      sub_216D1CC48((unsigned int *)&v12, v20);
    }
    if (v13) {
      sub_216784EC4(v13);
    }
    unint64_t v12 = (void **)&v21;
    sub_216981168(&v12);
    unint64_t v12 = (void **)v20;
    sub_216981168(&v12);
    unint64_t v12 = (void **)v19;
    sub_216981168(&v12);
    unint64_t v12 = (void **)v18;
    sub_216981168(&v12);
    unint64_t v12 = (void **)&v17;
    sub_216981168(&v12);
    unint64_t v12 = (void **)v16;
    sub_216981168(&v12);
  }
  return sub_2168EE084((uint64_t)&v22);
}

void sub_216D51C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_216980BCC((void **)va);
  sub_2168EE084(v5 - 40);
  _Unwind_Resume(a1);
}

void sub_216D51CC4()
{
  sub_21677B834((uint64_t)&v0);
  pxrInternal__aapl__pxrReserved__::operator<<<int>();
}

void sub_216D51DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D51E0C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(void *)(a1 + 136) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 104);
    if (v3)
    {
      *(void *)(a1 + 112) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(a1 + 80);
    if (v4)
    {
      *(void *)(a1 + 88) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(a1 + 56);
    if (v5)
    {
      *(void *)(a1 + 64) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(a1 + 32);
    if (v6)
    {
      *(void *)(a1 + 4sub_2168EBBB8((void ***)&a9, 0) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(a1 + 8);
    if (v7)
    {
      *(void *)(a1 + 16) = v7;
      operator delete(v7);
    }
  }
  return a1;
}

void sub_216D51E98()
{
  sub_21677B834((uint64_t)&v0);
  pxrInternal__aapl__pxrReserved__::operator<<<unsigned int>();
}

void sub_216D51FCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216D51FE0()
{
  sub_21677B834((uint64_t)&v0);
  pxrInternal__aapl__pxrReserved__::operator<<<long long>();
}

void sub_216D52114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216D52128()
{
  sub_21677B834((uint64_t)&v0);
  pxrInternal__aapl__pxrReserved__::operator<<<unsigned long long>();
}

void sub_216D5225C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216D52270()
{
  sub_21677B834((uint64_t)&v0);
  pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_216D523A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D523B8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = (void **)(a1 + 128);
    sub_216889A04(&v3);
    uint64_t v3 = (void **)(a1 + 104);
    sub_216889A04(&v3);
    uint64_t v3 = (void **)(a1 + 80);
    sub_216889A04(&v3);
    uint64_t v3 = (void **)(a1 + 56);
    sub_216889A04(&v3);
    uint64_t v3 = (void **)(a1 + 32);
    sub_216889A04(&v3);
    uint64_t v3 = (void **)(a1 + 8);
    sub_216889A04(&v3);
  }
  return a1;
}

void sub_216D5244C()
{
  sub_21677B834((uint64_t)&v0);
  pxrInternal__aapl__pxrReserved__::operator<<<std::string>();
}

void sub_216D52580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D52594(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = (void **)(a1 + 128);
    sub_216782F20(&v3);
    uint64_t v3 = (void **)(a1 + 104);
    sub_216782F20(&v3);
    uint64_t v3 = (void **)(a1 + 80);
    sub_216782F20(&v3);
    uint64_t v3 = (void **)(a1 + 56);
    sub_216782F20(&v3);
    uint64_t v3 = (void **)(a1 + 32);
    sub_216782F20(&v3);
    uint64_t v3 = (void **)(a1 + 8);
    sub_216782F20(&v3);
  }
  return a1;
}

void sub_216D52628()
{
  sub_21677B834((uint64_t)&v0);
  pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPath>();
}

void sub_216D5275C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D52770(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = (void **)(a1 + 128);
    sub_216981168(&v3);
    uint64_t v3 = (void **)(a1 + 104);
    sub_216981168(&v3);
    uint64_t v3 = (void **)(a1 + 80);
    sub_216981168(&v3);
    uint64_t v3 = (void **)(a1 + 56);
    sub_216981168(&v3);
    uint64_t v3 = (void **)(a1 + 32);
    sub_216981168(&v3);
    uint64_t v3 = (void **)(a1 + 8);
    sub_216981168(&v3);
  }
  return a1;
}

void sub_216D52804()
{
  sub_21677B834((uint64_t)&v0);
  pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfPayload>();
}

void sub_216D52938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D5294C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = (void **)(a1 + 128);
    sub_2169CC78C(&v3);
    uint64_t v3 = (void **)(a1 + 104);
    sub_2169CC78C(&v3);
    uint64_t v3 = (void **)(a1 + 80);
    sub_2169CC78C(&v3);
    uint64_t v3 = (void **)(a1 + 56);
    sub_2169CC78C(&v3);
    uint64_t v3 = (void **)(a1 + 32);
    sub_2169CC78C(&v3);
    uint64_t v3 = (void **)(a1 + 8);
    sub_2169CC78C(&v3);
  }
  return a1;
}

void sub_216D529E0()
{
  sub_21677B834((uint64_t)&v0);
  pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfReference>();
}

void sub_216D52B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D52B28(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = (void **)(a1 + 128);
    sub_2169CC68C(&v3);
    uint64_t v3 = (void **)(a1 + 104);
    sub_2169CC68C(&v3);
    uint64_t v3 = (void **)(a1 + 80);
    sub_2169CC68C(&v3);
    uint64_t v3 = (void **)(a1 + 56);
    sub_2169CC68C(&v3);
    uint64_t v3 = (void **)(a1 + 32);
    sub_2169CC68C(&v3);
    uint64_t v3 = (void **)(a1 + 8);
    sub_2169CC68C(&v3);
  }
  return a1;
}

void sub_216D52BBC()
{
  sub_21677B834((uint64_t)&v0);
  pxrInternal__aapl__pxrReserved__::operator<<<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>();
}

void sub_216D52CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D52D04(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v3 = (void **)(a1 + 128);
    sub_216932118(&v3);
    uint64_t v3 = (void **)(a1 + 104);
    sub_216932118(&v3);
    uint64_t v3 = (void **)(a1 + 80);
    sub_216932118(&v3);
    uint64_t v3 = (void **)(a1 + 56);
    sub_216932118(&v3);
    uint64_t v3 = (void **)(a1 + 32);
    sub_216932118(&v3);
    uint64_t v3 = (void **)(a1 + 8);
    sub_216932118(&v3);
  }
  return a1;
}

void *sub_216D52D98(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 sub_216D52E24(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C768640;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216D52E70(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C768640;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216D52EA0(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = a2[1];
  uint64_t v8 = *a2;
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(&__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __p = *a3;
    uint64_t v11 = *((void *)a3 + 2);
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v12, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(void *)(a1 + 16) + 16));
  uint64_t v6 = *(void *)(v4 + 24);
  if (!v6) {
    sub_21683A7CC();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v8);
  sub_2168EBBB8(&v12, 0);
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__p);
  }
  uint64_t result = v9;
  if (v9)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216D52FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D53044(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7686B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D53084()
{
  return &unk_26C7686B0;
}

void *sub_216D53098(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C7686D0;
  result[1] = v3;
  return result;
}

uint64_t sub_216D530E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C7686D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_216D5310C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_216D53118(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C768750)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D53158()
{
  return &unk_26C768750;
}

void *sub_216D53164(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_216D531F0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C768780;
  result[1] = v3;
  return result;
}

uint64_t sub_216D53238(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C768780;
  a2[1] = v2;
  return result;
}

void sub_216D53264(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  if (pxrInternal__aapl__pxrReserved__::SdfVariableExpression::IsExpression(a2 + 16))
  {
    sub_216D4C57C(v4, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a2 + 40), (uint64_t)__p);
    uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 24);
    if (!v5) {
      sub_21683A7CC();
    }
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v5 + 48))(v5, a2, __p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 24);
    if (!v6) {
      sub_21683A7CC();
    }
    uint64_t v7 = *(void (**)(void))(*(void *)v6 + 48);
    v7();
  }
}

void sub_216D53370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D5338C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7687E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D533CC()
{
  return &unk_26C7687E0;
}

void pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdInherits,pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::_GetListEditorForSpec(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (atomic_uint **)sub_216A663FC(a1);

  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInheritPathList(v3, a2);
}

BOOL sub_216D53414(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, int a3)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2))
  {
    sub_216981010(&v21, a2);
    sub_21698105C(&v22, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v6, &v23);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v23);
    uint64_t EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
    char v9 = sub_216D54248(&v21, EditTarget);
    uint64_t v10 = v24;
    if (v24
      && atomic_fetch_add_explicit((atomic_uint *volatile)&v24->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
    {
      ((void (*)(std::__shared_weak_count *))v10->~__shared_weak_count_0)(v10);
    }
    if (v9)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v19);
      sub_216D543C4(a1, v11, &v23);
      if (v23
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v23 + 1) & 1) == 0)
      {
        uint64_t v17 = v23;
        char v18 = v24;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_216D1C358(&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, a3);
        if (v18) {
          sub_216784EC4(v18);
        }
        unint64_t v14 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v14) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        unint64_t v15 = v19;
        unint64_t v16 = atomic_load((unint64_t *)(v14 + 144));
        BOOL v12 = v15 >= v16
           || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v19, (atomic_ullong *)v14);
      }
      else
      {
        BOOL v12 = 0;
      }
      if (v24) {
        sub_216784EC4(v24);
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v19);
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
    }
    else
    {
      BOOL v12 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_21697C414(&v21);
  }
  else
  {
    uint64_t v23 = "usd/listEditImpl.h";
    uint64_t v24 = (std::__shared_weak_count *)"Add";
    uint64_t v25 = 117;
    BOOL v26 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdInherits, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::Add"
          "(const UsdListEditorType &, const ListOpValueType &, UsdListPosition) [UsdListEditoruint64_t Type = pxrInternal__aapl__"
          "pxrReserved__::UsdInherits, ListOpProxyuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal"
          "__aapl__pxrReserved__::SdfPathKeyPolicy>]";
    char v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v12;
}

void sub_216D53610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, int a12, char a13, int a14, int a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (a17) {
    sub_216784EC4(a17);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a11);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a13);
  sub_21697B754(&a15);
  _Unwind_Resume(a1);
}

BOOL sub_216D536C0(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2))
  {
    sub_216981010(&v20, a2);
    sub_21698105C(&v21, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, &v22);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v22);
    uint64_t EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    char v7 = sub_216D54248(&v20, EditTarget);
    uint64_t v8 = v23;
    if (v23
      && atomic_fetch_add_explicit((atomic_uint *volatile)&v23->__shared_owners_, 0xFFFFFFFF, memory_order_release) == 1)
    {
      ((void (*)(std::__shared_weak_count *))v8->~__shared_weak_count_0)(v8);
    }
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
      sub_216D543C4(a1, v9, &v22);
      if (v22
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22 + 1) & 1) == 0)
      {
        sub_216D1C758((uint64_t *)&v22, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
        unint64_t v15 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v15) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        unint64_t v16 = v18;
        unint64_t v17 = atomic_load((unint64_t *)(v15 + 144));
        BOOL v10 = v16 >= v17
           || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18, (atomic_ullong *)v15);
      }
      else
      {
        BOOL v10 = 0;
      }
      if (v23) {
        sub_216784EC4(v23);
      }
      uint64_t v11 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v11) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      BOOL v12 = sub_216862604(&v18, 0);
      LOBYTE(v22) = 0;
      unint64_t v13 = (void *)sub_2168520EC(v11 + 19, &v22);
      if (v13 != v12) {
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v11, v12, v13);
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
    }
    else
    {
      BOOL v10 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_21697C414(&v20);
  }
  else
  {
    int v22 = "usd/listEditImpl.h";
    uint64_t v23 = (std::__shared_weak_count *)"Remove";
    uint64_t v24 = 148;
    uint64_t v25 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdInherits, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::Rem"
          "ove(const UsdListEditorType &, const ListOpValueType &) [UsdListEditoruint64_t Type = pxrInternal__aapl__pxrReserved__:"
          ":UsdInherits, ListOpProxyuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrRes"
          "erved__::SdfPathKeyPolicy>]";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v10;
}

void sub_216D538E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, int a12)
{
}

BOOL sub_216D53980(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
    sub_216D543C4(a1, v3, &v14);
    if (v14
      && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v14 + 1) & 1) == 0
      && sub_216A5F518((uint64_t)&v14)
      && (*((unsigned int (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*v14 + 6))(v14))
    {
      unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v4) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      unint64_t v5 = v12;
      unint64_t v6 = atomic_load((unint64_t *)(v4 + 144));
      BOOL v7 = v5 >= v6
        || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12, (atomic_ullong *)v4);
    }
    else
    {
      BOOL v7 = 0;
    }
    if (v15) {
      sub_216784EC4(v15);
    }
    uint64_t v8 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    char v9 = sub_216862604(&v12, 0);
    LOBYTE(v14) = 0;
    BOOL v10 = (void *)sub_2168520EC(v8 + 19, &v14);
    if (v10 != v9) {
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v8, v9, v10);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
  }
  else
  {
    unint64_t v14 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)"usd/listEditImpl.h";
    unint64_t v15 = (std::__shared_weak_count *)"Clear";
    uint64_t v16 = 174;
    unint64_t v17 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdInherits, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::Cle"
          "ar(const UsdListEditorType &) [UsdListEditoruint64_t Type = pxrInternal__aapl__pxrReserved__::UsdInherits, ListOpProxyT"
          "ype = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>]";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v7;
}

void sub_216D53B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  _Unwind_Resume(a1);
}

BOOL sub_216D53B64(pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v4, &v31);
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v31);
    uint64_t EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v5);
    BOOL v7 = v32;
    if (v32 && atomic_fetch_add_explicit((atomic_uint *volatile)v32 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(char *))(*(void *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    sub_216A6E72C((uint64_t *)&v31, (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3);
    uint64_t v8 = *(_DWORD **)a2;
    char v9 = (_DWORD *)*((void *)a2 + 1);
    if (*(_DWORD **)a2 != v9)
    {
      do
      {
        sub_216981010(&v24, v8);
        sub_21698105C((_DWORD *)&v24 + 1, v8 + 1);
        if (sub_216D54248((int *)&v24, EditTarget))
        {
          BOOL v10 = v32;
          if ((unint64_t)v32 >= v33)
          {
            uint64_t v11 = (char *)sub_216981B30((uint64_t *)&v31, &v24);
          }
          else
          {
            sub_216981010(v32, &v24);
            sub_21698105C((_DWORD *)v10 + 1, (_DWORD *)&v24 + 1);
            uint64_t v11 = v10 + 8;
          }
          uint64_t v32 = v11;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
        sub_21697C414(&v24);
        v8 += 2;
      }
      while (v8 != v9);
    }
    unint64_t v12 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v12) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v13 = v30;
    unint64_t v14 = atomic_load((unint64_t *)(v12 + 144));
    if (v13 >= v14
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30, (atomic_ullong *)v12))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v29);
      sub_216D543C4(a1, v15, &v27);
      if (v27
        && (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v27 + 8)) & 1) == 0)
      {
        if (v31 == v32)
        {
          if (sub_216A5F518((uint64_t)&v27)) {
            (*(void (**)(uint64_t))(*(void *)v27 + 56))(v27);
          }
        }
        else
        {
          uint64_t v24 = (char **)v27;
          uint64_t v25 = v28;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v26 = 0;
          sub_216D1CC48((unsigned int *)&v24, &v31);
          if (v25) {
            sub_216784EC4(v25);
          }
        }
      }
      if (v28) {
        sub_216784EC4(v28);
      }
      unint64_t v17 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v17) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      unint64_t v18 = v30;
      unint64_t v19 = atomic_load((unint64_t *)(v17 + 144));
      BOOL v16 = v18 >= v19
         || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30, (atomic_ullong *)v17);
      int v20 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v20) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      int v21 = sub_216862604(&v30, 0);
      LOBYTE(v27) = 0;
      int v22 = (void *)sub_2168520EC(v20 + 19, &v27);
      if (v22 != v21) {
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v20, v21, v22);
      }
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v29);
    }
    else
    {
      BOOL v16 = 0;
    }
    uint64_t v24 = &v31;
    sub_216981168((void ***)&v24);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v30);
  }
  else
  {
    uint64_t v31 = "usd/listEditImpl.h";
    uint64_t v32 = "Set";
    unint64_t v33 = 195;
    uint64_t v34 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__::UsdInherits, "
          "pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::Set"
          "(const UsdListEditorType &, const ListOpValueVector &) [UsdListEditoruint64_t Type = pxrInternal__aapl__pxrReserved__::"
          "UsdInherits, ListOpProxyuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrRese"
          "rved__::SdfPathKeyPolicy>]";
    char v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim");
    return 0;
  }
  return v16;
}

void sub_216D53EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14, int a15, char a16, int a17, char a18)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (a13) {
    sub_216784EC4(a13);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a14);
  a9 = (void **)&a18;
  sub_216981168(&a9);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInherits::GetAllDirectInherits(pxrInternal__aapl__pxrReserved__::UsdInherits *this@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2))
  {
    long long v29 = 0u;
    long long v30 = 0u;
    int v31 = 1065353216;
    v28[0] = (uint64_t)&v29;
    v28[1] = (uint64_t)a3;
    pxrInternal__aapl__pxrReserved__::UsdPrim::ComputeExpandedPrimIndex(this, v5, v6, (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)&v24);
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)&v24, 1u, &v20);
    uint64_t v8 = v20;
    uint64_t v7 = v21;
    uint64_t v9 = v22;
    if (v20 != v22 || v21 != v23)
    {
      uint64_t v10 = v23 - 1;
      do
      {
        do
        {
          uint64_t v11 = v7;
          uint64_t v18 = v8;
          uint64_t v19 = v7;
          sub_216D54150(v28, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v18);
          uint64_t v7 = v11 + 1;
        }
        while (v8 != v9);
      }
      while (v10 != v11);
    }
    pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeRange((uint64_t *)&v24, 5u, &v20);
    uint64_t v13 = v20;
    uint64_t v12 = v21;
    uint64_t v14 = v22;
    if (v20 != v22 || v21 != v23)
    {
      uint64_t v15 = v23 - 1;
      do
      {
        do
        {
          uint64_t v16 = v12;
          uint64_t v18 = v13;
          uint64_t v19 = v12;
          sub_216D54150(v28, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v18);
          uint64_t v12 = v16 + 1;
        }
        while (v13 != v14);
      }
      while (v15 != v16);
    }
    sub_2168BBAAC(&v27, 0);
    if (__p)
    {
      int v26 = __p;
      operator delete(__p);
    }
    sub_216BDCEE8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v24);
    sub_216BE0588((uint64_t)&v29);
  }
  else
  {
    *(void *)&long long v29 = "usd/inherits.cpp";
    *((void *)&v29 + 1) = "GetAllDirectInherits";
    *(void *)&long long v30 = 79;
    *((void *)&v30 + 1) = "SdfPathVector pxrInternal__aapl__pxrReserved__::UsdInherits::GetAllDirectInherits() const";
    LOBYTE(v31) = 0;
    pxrInternal__aapl__pxrReserved__::UsdDescribe((uint64_t *)&v24, this, v5);
    if (SHIBYTE(v26) >= 0) {
      unint64_t v17 = (const char *)&v24;
    }
    else {
      unint64_t v17 = (const char *)v24;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid prim: %s", v17);
    if (SHIBYTE(v26) < 0) {
      operator delete(v24);
    }
  }
}

void sub_216D540F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  *(void *)(v22 - 96) = v21;
  sub_216981168((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

unint64_t sub_216D54150(uint64_t *a1, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this)
{
  unint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetArcType(this);
  if (result == 1)
  {
    LayerStack = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack(this);
    pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetRootNode((pxrInternal__aapl__pxrReserved__::PcpPrimIndex_Graph **)this);
    v16[0] = v6;
    v16[1] = v7;
    unint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v16);
    if (*LayerStack == *(void *)result)
    {
      v15[0] = pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetOriginRootNode(this);
      v15[1] = v8;
      unint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v15);
      if ((result & 1) == 0)
      {
        uint64_t v9 = *a1;
        Path = (unsigned int *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
        unint64_t result = (unint64_t)sub_216BE0D70(v9, Path, Path);
        if (v11)
        {
          uint64_t v12 = (uint64_t *)a1[1];
          uint64_t v13 = (_DWORD *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath(this);
          unint64_t v14 = v12[1];
          if (v14 >= v12[2])
          {
            unint64_t result = sub_216981B30(v12, v13);
          }
          else
          {
            sub_216981010((_DWORD *)v12[1], v13);
            sub_21698105C((_DWORD *)(v14 + 4), v13 + 1);
            unint64_t result = v14 + 8;
          }
          v12[1] = result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_216D54248(int *a1, pxrInternal__aapl__pxrReserved__::UsdEditTarget *a2)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
    {
      return 1;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1, &v7);
      BOOL v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
      if (v4)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, (int *)&v9);
        sub_21697DE94(a1, (int *)&v9);
        sub_21697DEEC(a1 + 1, (int *)&v9 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
        sub_21697C414(&v9);
      }
      else
      {
        uint64_t v9 = "usd/listEditImpl.h";
        uint64_t v10 = "_TranslatePath";
        uint64_t v11 = 60;
        uint64_t v12 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImplBase::_TranslatePath(SdfPath *, const UsdEditTarget &)";
        char v13 = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot map <%s> to current edit target.", Text);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
      sub_21697C414(&v7);
    }
  }
  else
  {
    uint64_t v9 = "usd/listEditImpl.h";
    uint64_t v10 = "_TranslatePath";
    uint64_t v11 = 46;
    uint64_t v12 = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_ListEditImplBase::_TranslatePath(SdfPath *, const UsdEditTarget &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid empty path");
    return 0;
  }
  return v4;
}

void sub_216D543A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D543C4@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, void *a3@<X8>)
{
  if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(a1, a2) & 1) != 0
    || (uint64_t v12 = "usd/listEditImpl.h",
        char v13 = "_GetListEditor",
        uint64_t v14 = 238,
        uint64_t v15 = "static ListOpProxyType pxrInternal__aapl__pxrReserved__::Usd_ListEditImpl<pxrInternal__aapl__pxrReserved__"
              "::UsdInherits, pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfP"
              "athKeyPolicy>>::_GetListEditor(const UsdPrim &) [UsdListEditoruint64_t Type = pxrInternal__aapl__pxrReserved__::Usd"
              "Inherits, ListOpProxyuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrRes"
              "erved__::SdfPathKeyPolicy>]",
        char v16 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "prim", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v5, &v12);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530((uint64_t *)&v12);
    pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(v6, a1, &v11);
    int v7 = v13;
    if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)v13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v7 + 8))(v7);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v11))
    {
      *a3 = 0;
      a3[1] = 0;
    }
    else
    {
      uint64_t v9 = (atomic_uint **)sub_216A663FC(&v11);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInheritPathList(v9, a3);
    }
    return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_216D544CC(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_216D544F4()
{
  sub_216779094(v2, "UsdInterpolationTypeHeld");
  sub_216779094(__p, "Held");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7687F0, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "UsdInterpolationTypeLinear");
  sub_216779094(__p, "Linear");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C7687F0, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_216D545C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::~UsdModelAPI(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C768810;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usd/modelAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdModelAPI pxrInternal__aapl__pxrReserved__::UsdModelAPI::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C768810;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_216D547C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  return 4;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdModelAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91A58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91A58))
  {
    __cxa_guard_release(&qword_267B91A58);
  }
  return &qword_267B91A50;
}

void sub_216D54850(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91A68, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdModelAPI *)__cxa_guard_acquire(&qword_267B91A68);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdModelAPI::_GetStaticTfType(v2);
      byte_267B91A60 = sub_216D16508((char *)&qword_267B91A50, v3, v4);
      __cxa_guard_release(&qword_267B91A68);
    }
  }
  return byte_267B91A60;
}

void sub_216D548D0(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdModelAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  return &qword_267B91A50;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91A88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91A88))
  {
    qword_267B91A70 = 0;
    *(void *)algn_267B91A78 = 0;
    qword_267B91A80 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B91A70, &dword_216758000);
    __cxa_guard_release(&qword_267B91A88);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91AA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91AA8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_267B91A90 = 0;
    *(void *)algn_267B91A98 = 0;
    qword_267B91AA0 = 0;
    sub_21698FA28(&qword_267B91A90, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B91A90, &dword_216758000);
    __cxa_guard_release(&qword_267B91AA8);
  }
  if (v1) {
    return &qword_267B91A90;
  }
  else {
    return &qword_267B91A70;
  }
}

void sub_216D54A18(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType::~UsdModelAPIAssetInfoKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType *this)
{
  unint64_t v5 = (void **)((char *)this + 32);
  sub_216889A04(&v5);
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 2);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 1);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType::UsdModelAPIAssetInfoKeys_StaticTokenType(atomic_uint **this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "identifier", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "name", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "version", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "payloadAssetDependencies", 0);
  uint64_t v3 = *this;
  unint64_t v17 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v17 = v4;
    }
  }
  unint64_t v5 = *v2;
  uint64_t v18 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v18 = v6;
    }
  }
  char v7 = this[2];
  uint64_t v19 = v7;
  if ((v7 & 7) != 0)
  {
    int v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v19 = v8;
    }
  }
  uint64_t v9 = this[3];
  uint64_t v20 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v20 = v10;
    }
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  uint64_t v11 = (atomic_uint *)operator new(0x20uLL);
  unint64_t v12 = 0;
  this[4] = v11;
  this[5] = v11;
  this[6] = v11 + 8;
  do
  {
    char v13 = (&v17)[v12 / 2];
    *(void *)&v11[v12] = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v11[v12] &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 += 2;
  }
  while (v12 != 8);
  this[5] = v11 + 8;
  for (uint64_t i = 3; i != -1; --i)
  {
    uint64_t v15 = (&v17)[i];
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType *)this;
}

void sub_216D54CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216D54D78()
{
  sub_216779094(v3, "UsdModelAPI::KindValidationNone");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768858, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "UsdModelAPI::KindValidationModelHierarchy");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C768858, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216D54E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetKind(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  BOOL Kind = pxrInternal__aapl__pxrReserved__::UsdPrim::GetKind((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5, a2);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return Kind;
}

void sub_216D54EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetKind(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdPrim::SetKind((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5, a2);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C(v6);
  }
  return v3;
}

void sub_216D54F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::IsKind(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, pxrInternal__aapl__pxrReserved__::KindRegistry *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (a3 != 1) {
    goto LABEL_6;
  }
  uint64_t v5 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::KindTokens);
  if (!v5) {
    uint64_t v5 = sub_2169738F8(&pxrInternal__aapl__pxrReserved__::KindTokens);
  }
  if (!pxrInternal__aapl__pxrReserved__::KindRegistry::IsA(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v5, a3)|| (unint64_t result = pxrInternal__aapl__pxrReserved__::UsdModelAPI::IsModel(this), result))
  {
LABEL_6:
    uint64_t v8 = 0;
    unint64_t result = pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetKind(this, (pxrInternal__aapl__pxrReserved__::TfToken *)&v8)&& pxrInternal__aapl__pxrReserved__::KindRegistry::IsA((pxrInternal__aapl__pxrReserved__::KindRegistry *)&v8, a2, v7);
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::IsModel(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v2 = v6;
  if (!v6 || (unint64_t v3 = *((void *)v6 + 7), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v6, v1);
    unint64_t v3 = *((void *)v2 + 7);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C((atomic_ullong *)v6);
  }
  return (v3 >> 2) & 1;
}

void sub_216D550FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::IsGroup(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
  sub_216D16CFC((uint64_t)&v5, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v2 = v6;
  if (!v6 || (unint64_t v3 = *((void *)v6 + 7), (v3 & 0x800) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v6, v1);
    unint64_t v3 = *((void *)v2 + 7);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  if (v6) {
    sub_216D16E0C((atomic_ullong *)v6);
  }
  return (v3 >> 3) & 1;
}

void sub_216D551A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetAssetIdentifier(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, std::string *a2)
{
  char v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v4) {
    char v4 = sub_216D55EC4(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  }

  return sub_216D55218((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)v4, a2);
}

uint64_t sub_216D55218(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, std::string *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  sub_216D16CFC((uint64_t)v8, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&__str);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
  if (v14 && sub_2169980B4((pxrInternal__aapl__pxrReserved__::VtValue *)&__str))
  {
    if ((v14 & 4) != 0) {
      uint64_t v5 = (std::string *)(*(uint64_t (**)(std::string **))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(&__str);
    }
    else {
      uint64_t v5 = __str;
    }
    std::string::operator=(a3, v5);
    std::string::operator=(a3 + 1, v5 + 1);
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_2168EE084((uint64_t)&__str);
  return v6;
}

void sub_216D55330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetAssetIdentifier(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  void v5[2] = *MEMORY[0x263EF8340];
  sub_216D16CFC((uint64_t)v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v3) {
    unint64_t v3 = sub_216D55EC4(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  }
  v5[1] = &off_26C755A30;
  sub_2169B3DA8(v5, (long long *)a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)v3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v5);
}

void sub_216D5545C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetAssetName(uint64_t a1, std::string *a2)
{
  char v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v4) {
    char v4 = sub_216D55EC4(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  }

  return sub_216D554FC(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 1), a2);
}

uint64_t sub_216D554FC(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, std::string *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  sub_216D16CFC((uint64_t)v8, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&__str);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
  if (v14 && sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)&__str))
  {
    if ((v14 & 4) != 0) {
      uint64_t v5 = (std::string *)(*(uint64_t (**)(std::string **))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(&__str);
    }
    else {
      uint64_t v5 = __str;
    }
    std::string::operator=(a3, v5);
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_2168EE084((uint64_t)&__str);
  return v6;
}

void sub_216D55604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetAssetName(uint64_t a1, uint64_t a2)
{
  void v5[2] = *(unsigned int **)MEMORY[0x263EF8340];
  sub_216D16CFC((uint64_t)v4, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  unint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v3) {
    unint64_t v3 = sub_216D55EC4(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  }
  v5[1] = (unsigned int *)&off_26C750BB8;
  sub_21691B31C(v5, a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 1), (const pxrInternal__aapl__pxrReserved__::VtValue *)v5);
}

void sub_216D55730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetAssetVersion(uint64_t a1, std::string *a2)
{
  char v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v4) {
    char v4 = sub_216D55EC4(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  }

  return sub_216D554FC(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 2), a2);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetAssetVersion(uint64_t a1, uint64_t a2)
{
  void v5[2] = *(unsigned int **)MEMORY[0x263EF8340];
  sub_216D16CFC((uint64_t)v4, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  unint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v3) {
    unint64_t v3 = sub_216D55EC4(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  }
  v5[1] = (unsigned int *)&off_26C750BB8;
  sub_21691B31C(v5, a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 2), (const pxrInternal__aapl__pxrReserved__::VtValue *)v5);
}

void sub_216D558C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetPayloadAssetDependencies(uint64_t a1, uint64_t a2)
{
  char v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v4) {
    char v4 = sub_216D55EC4(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  }

  return sub_216D55960(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 3), a2);
}

uint64_t sub_216D55960(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  sub_216D16CFC((uint64_t)v8, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v8, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v9) {
    sub_216D16E0C(v9);
  }
  if (v14 && sub_216998140((pxrInternal__aapl__pxrReserved__::VtValue *)&v13))
  {
    if ((v14 & 4) != 0) {
      uint64_t v5 = (long long *)(*(uint64_t (**)(long long **))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(&v13);
    }
    else {
      uint64_t v5 = v13;
    }
    sub_216C45344(a3, v5);
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_2168EE084((uint64_t)&v13);
  return v6;
}

void sub_216D55A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetPayloadAssetDependencies(uint64_t a1, uint64_t a2)
{
  void v5[2] = *MEMORY[0x263EF8340];
  sub_216D16CFC((uint64_t)v4, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  unint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  if (!v3) {
    unint64_t v3 = sub_216D55EC4(&pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys);
  }
  v5[1] = off_26C755AE8;
  sub_2168F8DBC(v5, a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey((pxrInternal__aapl__pxrReserved__::UsdObject *)v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 3), (const pxrInternal__aapl__pxrReserved__::VtValue *)v5);
}

void sub_216D55B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::GetAssetInfo(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v2 = (uint64_t *)((char *)this + 8);
  unint64_t v3 = (_DWORD *)((char *)this + 16);
  sub_216D16CFC((uint64_t)v7, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t HasAssetInfo = pxrInternal__aapl__pxrReserved__::UsdObject::HasAssetInfo((pxrInternal__aapl__pxrReserved__::UsdObject *)v7);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  if (v8) {
    sub_216D16E0C(v8);
  }
  if (HasAssetInfo)
  {
    sub_216D16CFC((uint64_t)v7, v2, v3);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetAssetInfo((pxrInternal__aapl__pxrReserved__::UsdObject *)v7, &v6);
  }
  return HasAssetInfo;
}

void sub_216D55CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetAssetInfo(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  sub_216D16CFC((uint64_t)&v3, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfo((pxrInternal__aapl__pxrReserved__::UsdObject *)&v3, a2);
}

void sub_216D55D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_216D55D94()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216D55E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

atomic_uint **sub_216D55EC4(atomic_ullong *a1)
{
  unint64_t result = sub_216D55F0C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType::~UsdModelAPIAssetInfoKeys_StaticTokenType((pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_216D55F0C()
{
  uint64_t v0 = (atomic_uint **)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::UsdModelAPIAssetInfoKeys_StaticTokenType::UsdModelAPIAssetInfoKeys_StaticTokenType(v0);
  return v0;
}

void sub_216D55F3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::UsdNamespaceEditor(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  sub_2168BD80C((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 12));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimDelete(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  sub_216D56FD4((uint64_t)this + 32);
  sub_2169C487C((int *)this + 2, a2);
  sub_2169C48D4((int *)this + 3, (_DWORD *)a2 + 1);
  v8[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v8 + 1);
  sub_21697DE94((int *)this + 4, (int *)v8);
  sub_21697DEEC((int *)this + 5, (int *)v8 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v8 + 1);
  sub_21697C414(v8);
  uint64_t v4 = sub_216D56F54(a2);
  if (v4)
  {
    int v5 = 1;
  }
  else
  {
    v8[0] = "usd/namespaceEditor.cpp";
    v8[1] = "_AddPrimDelete";
    void v8[2] = 452;
    void v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimDelete(const SdfPath &)";
    char v9 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid path '%s' provided as the source for a prim namespace edit.", Text);
    int v5 = 0;
  }
  *((_DWORD *)this + 6) = v5;
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimMove(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  sub_216D56FD4((uint64_t)this + 32);
  sub_2169C487C((int *)this + 2, a2);
  sub_2169C48D4((int *)this + 3, (_DWORD *)a2 + 1);
  sub_2169C487C((int *)this + 4, a3);
  sub_2169C48D4((int *)this + 5, (_DWORD *)a3 + 1);
  if ((sub_216D56F54(a2) & 1) == 0)
  {
    uint64_t v11 = "usd/namespaceEditor.cpp";
    uint64_t v12 = "_AddPrimMove";
    uint64_t v13 = 473;
    uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimMove(const SdfPath &, const SdfPath &)";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid path '%s' provided as the source for a prim namespace edit.");
LABEL_7:
    uint64_t result = 0;
    *((_DWORD *)this + 6) = 0;
    return result;
  }
  if ((sub_216D56F54(a3) & 1) == 0)
  {
    uint64_t v11 = "usd/namespaceEditor.cpp";
    uint64_t v12 = "_AddPrimMove";
    uint64_t v13 = 480;
    uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimMove(const SdfPath &, const SdfPath &)";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid path '%s' provided as the destination for a prim namespace edit.");
    goto LABEL_7;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v11);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v10);
  int v7 = v10;
  uint64_t v6 = v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_21697C414(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    int v8 = 2;
  }
  else {
    int v8 = 3;
  }
  *((_DWORD *)this + 6) = v8;
  return 1;
}

void sub_216D5625C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::DeletePrim(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v3 = sub_216D2F758((uint64_t)a2);

  return pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimDelete(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::RenamePrim(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v6 = sub_216D2F758((uint64_t)a2);
  int v7 = sub_216D2F758((uint64_t)a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName((pxrInternal__aapl__pxrReserved__::SdfPath *)v7, a3, &v10);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimMove(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  return v8;
}

void sub_216D56338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::ReparentPrim(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::UsdPrim *a3)
{
  uint64_t v6 = sub_216D2F758((uint64_t)a2);
  int v7 = sub_216D2F758((uint64_t)a3);
  uint64_t v8 = sub_216D563F8(a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v7, v8, &v11);
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimMove(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  return v9;
}

void sub_216D563E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *sub_216D563F8(_DWORD *a1)
{
  if (*a1 != 1) {
    return (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)(a1 + 6);
  }
  uint64_t v1 = sub_216D2F758((uint64_t)a1);

  return pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::ReparentPrim(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::UsdPrim *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  int v7 = sub_216D2F758((uint64_t)a2);
  uint64_t v8 = sub_216D2F758((uint64_t)a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v8, a4, &v11);
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPrimMove(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  return v9;
}

void sub_216D564C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyDelete(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  sub_216D56FD4((uint64_t)this + 32);
  sub_2169C487C((int *)this + 2, a2);
  sub_2169C48D4((int *)this + 3, (_DWORD *)a2 + 1);
  v8[0] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v8 + 1);
  sub_21697DE94((int *)this + 4, (int *)v8);
  sub_21697DEEC((int *)this + 5, (int *)v8 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v8 + 1);
  sub_21697C414(v8);
  uint64_t v4 = sub_216D56F94(a2);
  if (v4)
  {
    int v5 = 1;
  }
  else
  {
    v8[0] = "usd/namespaceEditor.cpp";
    v8[1] = "_AddPropertyDelete";
    void v8[2] = 508;
    void v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyDelete(const SdfPath &)";
    char v9 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid path '%s' provided as the source for a property namespace edit.", Text);
    int v5 = 0;
  }
  *((_DWORD *)this + 6) = v5;
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyMove(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  sub_216D56FD4((uint64_t)this + 32);
  sub_2169C487C((int *)this + 2, a2);
  sub_2169C48D4((int *)this + 3, (_DWORD *)a2 + 1);
  sub_2169C487C((int *)this + 4, a3);
  sub_2169C48D4((int *)this + 5, (_DWORD *)a3 + 1);
  if ((sub_216D56F94(a2) & 1) == 0)
  {
    int v11 = "usd/namespaceEditor.cpp";
    int v12 = "_AddPropertyMove";
    uint64_t v13 = 530;
    uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyMove(const SdfPath &, const SdfPath &)";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid path '%s' provided as the source for a property namespace edit.");
LABEL_7:
    uint64_t result = 0;
    *((_DWORD *)this + 6) = 0;
    return result;
  }
  if ((sub_216D56F94(a3) & 1) == 0)
  {
    int v11 = "usd/namespaceEditor.cpp";
    int v12 = "_AddPropertyMove";
    uint64_t v13 = 537;
    uint64_t v14 = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyMove(const SdfPath &, const SdfPath &)";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid path '%s' provided as the destination for a property namespace edit.");
    goto LABEL_7;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v11);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a3, &v10);
  int v7 = v10;
  uint64_t v6 = v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  sub_21697C414(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v6 == v7) {
    int v8 = 2;
  }
  else {
    int v8 = 3;
  }
  *((_DWORD *)this + 6) = v8;
  return 1;
}

void sub_216D56770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::DeleteProperty(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2)
{
  sub_216D0162C((uint64_t)a2, &v5);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyDelete(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  return v3;
}

void sub_216D567E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::RenameProperty(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  sub_216D0162C((uint64_t)a2, &v12);
  sub_216D0162C((uint64_t)a2, &v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3, &v10);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyMove(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  return v6;
}

void sub_216D568B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  sub_21697B754((uint64_t *)va1);
  sub_21697B754((uint64_t *)va);
  sub_21697B754((int *)va2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::ReparentProperty(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2, const pxrInternal__aapl__pxrReserved__::UsdPrim *a3)
{
  sub_216D0162C((uint64_t)a2, &v12);
  uint64_t v6 = sub_216D2F758((uint64_t)a3);
  int v7 = sub_216D563F8(a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v7, &v10);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyMove(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  return v8;
}

void sub_216D5699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::ReparentProperty(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this, const pxrInternal__aapl__pxrReserved__::UsdProperty *a2, const pxrInternal__aapl__pxrReserved__::UsdPrim *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  sub_216D0162C((uint64_t)a2, &v12);
  int v7 = sub_216D2F758((uint64_t)a3);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)v7, a4, &v10);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_AddPropertyMove(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  return v8;
}

void sub_216D56A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::ApplyEdits(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this)
{
  pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessEditsIfNeeded(this);
  if (*((unsigned char *)this + 168))
  {
    uint64_t v2 = (std::string **)((char *)this + 32);
    uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::Apply(v2);
    sub_216D56FD4((uint64_t)v2);
    return v3;
  }
  else
  {
    v5[0] = "usd/namespaceEditor.cpp";
    v5[1] = "ApplyEdits";
    void v5[2] = 403;
    void v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::ApplyEdits()";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to process edits");
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessEditsIfNeeded(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this)
{
  if (!*((unsigned char *)this + 168))
  {
    uint64_t v1 = (char *)this + 32;
    pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::ProcessEdit((uint64_t *)this, (_DWORD *)this + 2, (uint64_t)v2);
    sub_216D57B78((uint64_t)v1, (uint64_t)v2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v8);
    sub_21697C414(&v7);
    int v9 = (void **)&v6;
    sub_216782F20(&v9);
    int v9 = (void **)&v5;
    sub_216D59E34(&v9);
    int v9 = (void **)&v4;
    sub_216850BF4(&v9);
    pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit(&v3);
    int v9 = (void **)v2;
    sub_216782F20(&v9);
  }
}

void sub_216D56BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::Apply(std::string **this)
{
  memset(&v25, 0, sizeof(v25));
  BOOL CanApply = pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::CanApply(this, (uint64_t)&v25);
  if (!CanApply)
  {
    uint64_t v20 = "usd/namespaceEditor.cpp";
    uint64_t v21 = "Apply";
    uint64_t v22 = 1201;
    uint64_t v23 = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::Apply()";
    char v24 = 0;
    uint64_t v5 = &v25;
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v5 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to apply edits to the stage because of the following errors: %s", v2, v3, v5);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (uint64_t *)__p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (CanApply)
    {
LABEL_8:
      __p[0] = this;
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
      if (*((unsigned char *)this + 128))
      {
        pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler::SdfCleanupEnabler((pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *)&v20);
        char v6 = sub_216D59BE4((uint64_t *)__p);
        pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler::~SdfCleanupEnabler((pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *)&v20);
        if (v6) {
          goto LABEL_10;
        }
      }
      else if (sub_216D59BE4((uint64_t *)__p))
      {
LABEL_10:
        int v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this[9];
        uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this[10];
        while (v7 != v8)
        {
          if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v7) & 1) == 0)
          {
            int v9 = sub_216990F1C(v7);
            sub_216D59D88(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 1), (uint64_t)(v7 + 2));
          }
          v7 += 21;
        }
        int v11 = this[12];
        int v12 = this[13];
        int v13 = this + 12;
        if (v11 != v12)
        {
          uint64_t v20 = "usd/namespaceEditor.cpp";
          uint64_t v21 = "Apply";
          uint64_t v22 = 1273;
          uint64_t v23 = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::Apply()";
          char v24 = 0;
          pxrInternal__aapl__pxrReserved__::TfStringJoin("; ", v13, &v25);
          char v15 = (v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v25
              : (std::string *)v25.__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v20, (pxrInternal__aapl__pxrReserved__ *)"The follow target path or connections could not be updated for the namespace edit: %s", v14, v15);
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v25.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v10 = 1;
        goto LABEL_26;
      }
      uint64_t v10 = 0;
LABEL_26:
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
      return v10;
    }
  }
  else if (CanApply)
  {
    goto LABEL_8;
  }
  return 0;
}

void sub_216D56DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (*(char *)(v18 - 33) < 0) {
    operator delete(*(void **)(v18 - 56));
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ClearProcessedEdits(pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *this)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::CanApplyEdits(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessEditsIfNeeded((pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor *)a1);
  if (*(unsigned char *)(a1 + 168))
  {
    return pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::CanApply((std::string **)(a1 + 32), a2);
  }
  else
  {
    v5[0] = "usd/namespaceEditor.cpp";
    v5[1] = "CanApplyEdits";
    void v5[2] = 418;
    void v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::CanApplyEdits(std::string *) const";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to process edits");
    return 0;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::CanApply(std::string **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (a2 && v2 != v3)
  {
    pxrInternal__aapl__pxrReserved__::TfStringJoin("; ", a1, &v6);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v6;
  }
  return v2 == v3;
}

uint64_t sub_216D56F54(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a1);
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a1);
    if (result) {
      return pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(a1) ^ 1;
    }
  }
  return result;
}

uint64_t sub_216D56F94(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(a1);
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a1);
    if (result) {
      return pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(a1) ^ 1;
    }
  }
  return result;
}

void sub_216D56FD4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 124));
    sub_21697C414((_DWORD *)(a1 + 120));
    uint64_t v2 = (void **)(a1 + 96);
    sub_216782F20(&v2);
    uint64_t v2 = (void **)(a1 + 72);
    sub_216D59E34(&v2);
    uint64_t v2 = (void **)(a1 + 48);
    sub_216850BF4(&v2);
    pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit((void **)(a1 + 24));
    uint64_t v2 = (void **)a1;
    sub_216782F20(&v2);
    *(unsigned char *)(a1 + 136) = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::ProcessEdit(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::string v6 = (uint64_t *)(a3 + 24);
  pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit((void *)(a3 + 24));
  *(void *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 8sub_2168EBBB8((void ***)&a9, 0) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 120));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 124));
  *(_WORD *)(a3 + 128) = 0;
  if (a2[4])
  {
    sub_216D57CF0(v6, a2, a2 + 2, -2);
    int v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D57D70(a1);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v86);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v86, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
    sub_21697C414(&v86);
    v81[0] = 0;
    v81[1] = 0;
    uint64_t v82 = 0;
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
    {
      NameToken = (atomic_uint **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      if (!pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, NameToken))
      {
        uint64_t v10 = "The property to edit is not a valid property";
        goto LABEL_30;
      }
      if (sub_216D59FC8((uint64_t)__p))
      {
        uint64_t v10 = "The property to edit belongs to a prototype prim";
        goto LABEL_30;
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v84))
      {
        uint64_t v10 = "The property to edit belongs to an instance prototype proxy";
        goto LABEL_30;
      }
      uint64_t v40 = (void *)sub_216D5A03C((uint64_t)__p, v33);
      pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetPropertyDefinition(v40, NameToken, (atomic_uint **)&v86);
      uint64_t v41 = v87;
      if ((v86 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v41)
      {
        uint64_t v10 = "The property to edit is a built-in property of its prim";
LABEL_30:
        MEMORY[0x21D4477E0](v81, v10);
        uint64_t v20 = a3 + 16;
        unint64_t v28 = *(void *)(a3 + 16);
        unint64_t v22 = *(void *)(a3 + 8);
        if (v22 < v28) {
          goto LABEL_31;
        }
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *(void *)a3) >> 3);
        unint64_t v31 = v23 + 1;
        if (v23 + 1 <= 0xAAAAAAAAAAAAAAALL)
        {
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *(void *)a3) >> 3);
          if (2 * v32 > v31) {
            unint64_t v31 = 2 * v32;
          }
          if (v32 >= 0x555555555555555) {
            unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v26 = v31;
          }
          uint64_t v90 = a3 + 16;
          if (!v26)
          {
            uint64_t v27 = 0;
            goto LABEL_49;
          }
LABEL_28:
          uint64_t v27 = (atomic_uint *)sub_216782ED8(v20, v26);
LABEL_49:
          int v38 = (pxrInternal__aapl__pxrReserved__ *)&v27[6 * v23];
          unint64_t v86 = (unint64_t)v27;
          uint64_t v87 = v38;
          uint64_t v89 = &v27[6 * v26];
          long long v39 = *(_OWORD *)v81;
          *((void *)v38 + 2) = v82;
          *(_OWORD *)int v38 = v39;
          v81[1] = 0;
          uint64_t v82 = 0;
          v81[0] = 0;
          uint64_t v88 = (uint64_t)v38 + 24;
          sub_216790CCC((uint64_t *)a3, &v86);
          unint64_t v30 = *(void *)(a3 + 8);
          sub_216790E64((uint64_t)&v86);
          goto LABEL_50;
        }
        goto LABEL_132;
      }
LABEL_62:
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 2))
      {
        uint64_t v42 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D57D70(a1);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2), (uint64_t)&v86);
        int IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v86, v43);
        if ((v89 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v88 + 1);
        sub_21697C414(&v88);
        if (v87) {
          sub_216D16E0C((atomic_ullong *)v87);
        }
        if (IsDefined)
        {
          sub_216779094(v79, "An object already exists at the new path");
          unint64_t v45 = *(void *)(a3 + 16);
          unint64_t v46 = *(void *)(a3 + 8);
          if (v46 >= v45)
          {
            unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - *(void *)a3) >> 3);
            unint64_t v57 = v56 + 1;
            if (v56 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - *(void *)a3) >> 3);
            if (2 * v58 > v57) {
              unint64_t v57 = 2 * v58;
            }
            if (v58 >= 0x555555555555555) {
              unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v59 = v57;
            }
            uint64_t v90 = a3 + 16;
            if (v59) {
              unint64_t v60 = (atomic_uint *)sub_216782ED8(a3 + 16, v59);
            }
            else {
              unint64_t v60 = 0;
            }
            unint64_t v66 = (pxrInternal__aapl__pxrReserved__ *)&v60[6 * v56];
            unint64_t v86 = (unint64_t)v60;
            uint64_t v87 = v66;
            uint64_t v89 = &v60[6 * v59];
            long long v67 = *(_OWORD *)v79;
            *((void *)v66 + 2) = v80;
            *(_OWORD *)unint64_t v66 = v67;
            v79[1] = 0;
            uint64_t v80 = 0;
            v79[0] = 0;
            uint64_t v88 = (uint64_t)v66 + 24;
            sub_216790CCC((uint64_t *)a3, &v86);
            uint64_t v68 = *(void *)(a3 + 8);
            sub_216790E64((uint64_t)&v86);
            int v69 = SHIBYTE(v80);
            *(void *)(a3 + 8) = v68;
            if (v69 < 0) {
              operator delete(v79[0]);
            }
          }
          else
          {
            long long v47 = *(_OWORD *)v79;
            *(void *)(v46 + 16) = v80;
            *(_OWORD *)unint64_t v46 = v47;
            *(void *)(a3 + 8) = v46 + 24;
          }
          goto LABEL_51;
        }
      }
      if (a2[4] != 3)
      {
LABEL_113:
        int v73 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70(a1);
        uint64_t EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v73);
        uint64_t v76 = (pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_216D240F8((uint64_t)__p, v75);
        pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_GatherLayersToEdit((uint64_t)a2, EditTarget, v76, (uint64_t *)a3);
        if (*(void *)(a3 + 48) == *(void *)(a3 + 56))
        {
          if (!*(unsigned char *)(a3 + 129))
          {
            unint64_t v86 = (unint64_t)"usd/namespaceEditor.cpp";
            uint64_t v87 = (pxrInternal__aapl__pxrReserved__ *)"ProcessEdit";
            uint64_t v88 = 818;
            uint64_t v89 = (atomic_uint *)"static UsdNamespaceEditor::_ProcessedEdit pxrInternal__aapl__pxrReserved__::UsdNamespac"
                                 "eEditor::_EditProcessor::ProcessEdit(const UsdStageRefPtr &, const _EditDescription &)";
            LOBYTE(v9sub_2168EBBB8((void ***)&a9, 0) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v86, "processedEdit.requiresRelocates", 0);
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_GatherTargetListOpEdits(a1, a2, (uint64_t *)a3);
        }
        goto LABEL_51;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2), &v86);
      sub_21697DE94((int *)(a3 + 120), (int *)&v86);
      sub_21697DEEC((int *)(a3 + 124), (int *)&v86 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v86 + 1);
      sub_21697C414(&v86);
      *(unsigned char *)(a3 + 128) = 1;
      v79[0] = 0;
      v79[1] = 0;
      uint64_t v80 = 0;
      uint64_t v48 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D57D70(a1);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 120), (uint64_t)&v86);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v86, v49))
      {
        if (sub_216D59FC8((uint64_t)&v86))
        {
          long long v50 = "The new parent prim belongs to a prototype prim";
        }
        else
        {
          if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v88))
          {
            if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
            {
              if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v86))
              {
                long long v50 = "The new parent prim for a property cannot be the pseudo-root";
                goto LABEL_75;
              }
            }
            else
            {
              uint64_t v77 = v87;
              if (!v87 || (uint64_t v78 = *((void *)v87 + 7), (v78 & 0x800) != 0))
              {
                pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v87, v70);
                uint64_t v78 = *((void *)v77 + 7);
              }
              if ((v78 & 0x100) != 0)
              {
                long long v50 = "The new parent prim is an instance prim whose children are provided exclusively by its prototype";
                goto LABEL_75;
              }
              if (*(void *)(a3 + 120) == *(void *)a2)
              {
                long long v50 = "The new parent prim is the same as the prim to move";
                goto LABEL_75;
              }
              if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 120), (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
              {
                long long v50 = "The new parent prim is a descendant of the prim to move";
                goto LABEL_75;
              }
            }
            int v51 = 1;
LABEL_76:
            if ((v89 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v88 + 1);
            sub_21697C414(&v88);
            if (v87) {
              sub_216D16E0C((atomic_ullong *)v87);
            }
            if ((v51 & 1) == 0)
            {
              unint64_t v52 = *(void *)(a3 + 16);
              unint64_t v53 = *(void *)(a3 + 8);
              if (v53 >= v52)
              {
                unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *(void *)a3) >> 3);
                unint64_t v62 = v61 + 1;
                if (v61 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_21677CB10();
                }
                unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(void *)a3) >> 3);
                if (2 * v63 > v62) {
                  unint64_t v62 = 2 * v63;
                }
                if (v63 >= 0x555555555555555) {
                  unint64_t v64 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v64 = v62;
                }
                uint64_t v90 = a3 + 16;
                if (v64) {
                  uint64_t v65 = (atomic_uint *)sub_216782ED8(a3 + 16, v64);
                }
                else {
                  uint64_t v65 = 0;
                }
                uint64_t v71 = (pxrInternal__aapl__pxrReserved__ *)&v65[6 * v61];
                unint64_t v86 = (unint64_t)v65;
                uint64_t v87 = v71;
                uint64_t v89 = &v65[6 * v64];
                long long v72 = *(_OWORD *)v79;
                *((void *)v71 + 2) = v80;
                *(_OWORD *)uint64_t v71 = v72;
                v79[1] = 0;
                uint64_t v80 = 0;
                v79[0] = 0;
                uint64_t v88 = (uint64_t)v71 + 24;
                sub_216790CCC((uint64_t *)a3, &v86);
                unint64_t v55 = *(void *)(a3 + 8);
                sub_216790E64((uint64_t)&v86);
              }
              else
              {
                long long v54 = *(_OWORD *)v79;
                *(void *)(v53 + 16) = v80;
                *(_OWORD *)unint64_t v53 = v54;
                v79[1] = 0;
                uint64_t v80 = 0;
                v79[0] = 0;
                unint64_t v55 = v53 + 24;
                *(void *)(a3 + 8) = v53 + 24;
              }
              *(void *)(a3 + 8) = v55;
            }
            if (SHIBYTE(v80) < 0) {
              operator delete(v79[0]);
            }
            if (!v51)
            {
              if (SHIBYTE(v82) < 0) {
                operator delete(v81[0]);
              }
              if ((v85 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              goto LABEL_55;
            }
            goto LABEL_113;
          }
          long long v50 = "The new parent prim is a prototype proxy descendant of an instance prim";
        }
      }
      else
      {
        long long v50 = "The new parent prim is not a valid prim";
      }
LABEL_75:
      MEMORY[0x21D4477E0](v79, v50);
      int v51 = 0;
      goto LABEL_76;
    }
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)__p, v8))
    {
      if (sub_216D59FC8((uint64_t)__p))
      {
        uint64_t v14 = "The prim to edit belongs to a prototype prim";
      }
      else
      {
        if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v84)) {
          goto LABEL_62;
        }
        uint64_t v14 = "The prim to edit is a prototype proxy descendant of an instance prim";
      }
    }
    else
    {
      uint64_t v14 = "The prim to edit is not a valid prim";
    }
    MEMORY[0x21D4477E0](v81, v14);
    uint64_t v20 = a3 + 16;
    unint64_t v21 = *(void *)(a3 + 16);
    unint64_t v22 = *(void *)(a3 + 8);
    if (v22 < v21)
    {
LABEL_31:
      long long v29 = *(_OWORD *)v81;
      *(void *)(v22 + 16) = v82;
      *(_OWORD *)unint64_t v22 = v29;
      v81[1] = 0;
      uint64_t v82 = 0;
      v81[0] = 0;
      unint64_t v30 = v22 + 24;
      *(void *)(a3 + 8) = v22 + 24;
LABEL_50:
      *(void *)(a3 + 8) = v30;
LABEL_51:
      if (SHIBYTE(v82) < 0) {
        operator delete(v81[0]);
      }
      if ((v85 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_55:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v84 + 1);
      sub_21697C414(&v84);
      if (__p[1]) {
        sub_216D16E0C((atomic_ullong *)__p[1]);
      }
      return;
    }
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *(void *)a3) >> 3);
    unint64_t v24 = v23 + 1;
    if (v23 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(void *)a3) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x555555555555555) {
        unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v26 = v24;
      }
      uint64_t v90 = a3 + 16;
      if (!v26)
      {
        uint64_t v27 = 0;
        goto LABEL_49;
      }
      goto LABEL_28;
    }
LABEL_132:
    sub_21677CB10();
  }
  sub_216779094(__p, "There are no valid edits to perform");
  unint64_t v11 = *(void *)(a3 + 16);
  unint64_t v12 = *(void *)(a3 + 8);
  if (v12 >= v11)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(void *)a3) >> 3);
    unint64_t v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(void *)a3) >> 3);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v16;
    }
    uint64_t v90 = a3 + 16;
    if (v18) {
      char v19 = (atomic_uint *)sub_216782ED8(a3 + 16, v18);
    }
    else {
      char v19 = 0;
    }
    uint64_t v34 = (pxrInternal__aapl__pxrReserved__ *)&v19[6 * v15];
    unint64_t v86 = (unint64_t)v19;
    uint64_t v87 = v34;
    uint64_t v89 = &v19[6 * v18];
    long long v35 = *(_OWORD *)__p;
    *((void *)v34 + 2) = v84;
    *(_OWORD *)uint64_t v34 = v35;
    __p[1] = 0;
    uint64_t v84 = 0;
    __p[0] = 0;
    uint64_t v88 = (uint64_t)v34 + 24;
    sub_216790CCC((uint64_t *)a3, &v86);
    uint64_t v36 = *(void *)(a3 + 8);
    sub_216790E64((uint64_t)&v86);
    int v37 = SHIBYTE(v84);
    *(void *)(a3 + 8) = v36;
    if (v37 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v13 = *(_OWORD *)__p;
    *(void *)(v12 + 16) = v84;
    *(_OWORD *)unint64_t v12 = v13;
    *(void *)(a3 + 8) = v12 + 24;
  }
}

void sub_216D57A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_216D16AD8((uint64_t)&a22);
  sub_216D57C6C(v29);
  _Unwind_Resume(a1);
}

uint64_t sub_216D57B78(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    sub_21680F80C((uint64_t *)a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::operator=(a1 + 24, (_DWORD **)(a2 + 24));
    sub_2168EB3BC(a1 + 48);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    sub_216D5E27C((void **)(a1 + 72));
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 8sub_2168EBBB8((void ***)&a9, 0) = 0;
    *(void *)(a2 + 88) = 0;
    sub_21680F80C((uint64_t *)(a1 + 96));
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    sub_21697DE94((int *)(a1 + 120), (int *)(a2 + 120));
    sub_21697DEEC((int *)(a1 + 124), (int *)(a2 + 124));
    *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  }
  else
  {
    sub_216D5E2EC(a1, a2);
    *(unsigned char *)(a1 + 136) = 1;
  }
  return a1;
}

uint64_t sub_216D57C6C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 124));
  sub_21697C414((_DWORD *)(a1 + 120));
  uint64_t v3 = (void **)(a1 + 96);
  sub_216782F20(&v3);
  uint64_t v3 = (void **)(a1 + 72);
  sub_216D59E34(&v3);
  uint64_t v3 = (void **)(a1 + 48);
  sub_216850BF4(&v3);
  pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit((void **)(a1 + 24));
  uint64_t v3 = (void **)a1;
  sub_216782F20(&v3);
  return a1;
}

_DWORD *sub_216D57CF0(uint64_t *a1, _DWORD *a2, _DWORD *a3, int a4)
{
  sub_216AF0FE4(&v6, a2, a3, a4);
  sub_216D59F74(a1, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_21697C414(&v6);
}

void sub_216D57D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
}

uint64_t sub_216D57D70(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    _OWORD v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->() cons"
            "t [U = pxrInternal__aapl__pxrReserved__::UsdStage]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000021749BC28 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_GatherLayersToEdit(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this, uint64_t *a4)
{
  pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetRootNode(this);
  v89[0] = v8;
  v89[1] = v9;
  LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v89);
  unint64_t v11 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
  uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v11);
  if (pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentityPathMapping((pxrInternal__aapl__pxrReserved__::PcpMapFunction *)(a2 + 2)))
  {
    long long v13 = *(uint64_t **)Layers;
    uint64_t v14 = *(uint64_t **)(Layers + 8);
    if (*(uint64_t **)Layers == v14)
    {
      unint64_t v15 = *(uint64_t **)Layers;
    }
    else
    {
      while (!sub_216ABA3A0(a2, v13))
      {
        if (++v13 == v14)
        {
          long long v13 = v14;
          break;
        }
      }
      unint64_t v15 = v13;
      long long v13 = *(uint64_t **)(Layers + 8);
    }
    if (v15 != v13)
    {
      unint64_t v23 = *(uint64_t **)Layers;
      if (*(uint64_t **)Layers != v13)
      {
        unint64_t v24 = a4 + 6;
        do
        {
          unint64_t v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v23);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
          {
            sub_216ABBA60((uint64_t *)__p, v23);
            uint64_t v27 = (_OWORD *)a4[7];
            unint64_t v26 = a4[8];
            if ((unint64_t)v27 >= v26)
            {
              uint64_t v28 = ((uint64_t)v27 - *v24) >> 4;
              unint64_t v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 60) {
                sub_21677CB10();
              }
              uint64_t v30 = v26 - *v24;
              if (v30 >> 3 > v29) {
                unint64_t v29 = v30 >> 3;
              }
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v31 = v29;
              }
              uint64_t v94 = a4 + 8;
              unint64_t v32 = (char *)sub_216787EE0((uint64_t)(a4 + 8), v31);
              unint64_t v33 = &v32[16 * v28];
              uint64_t v90 = v32;
              char v91 = v33;
              uint64_t v93 = &v32[16 * v34];
              *(_OWORD *)unint64_t v33 = *(_OWORD *)__p;
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v92 = v33 + 16;
              sub_216AF3C5C(a4 + 6, &v90);
              uint64_t v35 = a4[7];
              sub_216852520((uint64_t)&v90);
              uint64_t v36 = (atomic_uint *)__p[1];
              a4[7] = v35;
              if (v36 && atomic_fetch_add_explicit(v36 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v36 + 8))(v36);
              }
            }
            else
            {
              *uint64_t v27 = *(_OWORD *)__p;
              a4[7] = (uint64_t)(v27 + 1);
            }
          }
          ++v23;
        }
        while (v23 != v13);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1)) {
        pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_ProcessPropEditRequiresRelocates((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (uint64_t *)this, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v89, (uint64_t)a4);
      }
      else {
        pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_ProcessPrimEditRequiresRelocates(a1, (uint64_t *)this, (pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v89, (uint64_t)a4);
      }
      long long v39 = (uint64_t *)a4[6];
      for (uint64_t i = (uint64_t *)a4[7]; v39 != i; v39 += 2)
      {
        uint64_t v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v39);
        if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v41) & 1) == 0)
        {
          uint64_t v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v39);
          uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v42);
          if (*(char *)(Identifier + 23) >= 0) {
            uint64_t v44 = Identifier;
          }
          else {
            uint64_t v44 = *(void *)Identifier;
          }
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The spec @%s@<%s> cannot be edited because the layer is not editable", v46, v47, v44, Text);
          unint64_t v49 = a4[1];
          unint64_t v48 = a4[2];
          if (v49 >= v48)
          {
            unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *a4) >> 3);
            unint64_t v52 = v51 + 1;
            if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *a4) >> 3);
            if (2 * v53 > v52) {
              unint64_t v52 = 2 * v53;
            }
            if (v53 >= 0x555555555555555) {
              unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v54 = v52;
            }
            uint64_t v94 = a4 + 2;
            if (v54) {
              unint64_t v55 = (char *)sub_216782ED8((uint64_t)(a4 + 2), v54);
            }
            else {
              unint64_t v55 = 0;
            }
            unint64_t v56 = &v55[24 * v51];
            uint64_t v90 = v55;
            char v91 = v56;
            uint64_t v93 = &v55[24 * v54];
            long long v57 = *(_OWORD *)__p;
            *((void *)v56 + 2) = v88;
            *(_OWORD *)unint64_t v56 = v57;
            __p[1] = 0;
            uint64_t v88 = 0;
            __p[0] = 0;
            uint64_t v92 = v56 + 24;
            sub_216790CCC(a4, &v90);
            uint64_t v58 = a4[1];
            sub_216790E64((uint64_t)&v90);
            int v59 = SHIBYTE(v88);
            a4[1] = v58;
            if (v59 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v50 = *(_OWORD *)__p;
            *(void *)(v49 + 16) = v88;
            *(_OWORD *)unint64_t v49 = v50;
            a4[1] = v49 + 24;
          }
        }
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 8)))
        {
          unint64_t v60 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v39);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v60, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8)))
          {
            unint64_t v61 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v39);
            uint64_t v62 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v61);
            if (*(char *)(v62 + 23) >= 0) {
              uint64_t v63 = v62;
            }
            else {
              uint64_t v63 = *(void *)v62;
            }
            unint64_t v64 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
            uint64_t v65 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8));
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The spec @%s@<%s> cannot be moved to <%s> because a spec already exists at the new path", v66, v67, v63, v64, v65);
            unint64_t v69 = a4[1];
            unint64_t v68 = a4[2];
            if (v69 >= v68)
            {
              unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - *a4) >> 3);
              unint64_t v72 = v71 + 1;
              if (v71 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - *a4) >> 3);
              if (2 * v73 > v72) {
                unint64_t v72 = 2 * v73;
              }
              if (v73 >= 0x555555555555555) {
                unint64_t v74 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v74 = v72;
              }
              uint64_t v94 = a4 + 2;
              if (v74) {
                uint64_t v75 = (char *)sub_216782ED8((uint64_t)(a4 + 2), v74);
              }
              else {
                uint64_t v75 = 0;
              }
              uint64_t v76 = &v75[24 * v71];
              uint64_t v90 = v75;
              char v91 = v76;
              uint64_t v93 = &v75[24 * v74];
              long long v77 = *(_OWORD *)__p;
              *((void *)v76 + 2) = v88;
              *(_OWORD *)uint64_t v76 = v77;
              __p[1] = 0;
              uint64_t v88 = 0;
              __p[0] = 0;
              uint64_t v92 = v76 + 24;
              sub_216790CCC(a4, &v90);
              uint64_t v78 = a4[1];
              sub_216790E64((uint64_t)&v90);
              int v79 = SHIBYTE(v88);
              a4[1] = v78;
              if (v79 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v70 = *(_OWORD *)__p;
              *(void *)(v69 + 16) = v88;
              *(_OWORD *)unint64_t v69 = v70;
              a4[1] = v69 + 24;
            }
          }
        }
      }
      return;
    }
    sub_216779094(__p, "Edit targets with layers outside of the root layer stack are not currently supported for namespace editing");
    uint64_t v16 = (uint64_t)(a4 + 2);
    unint64_t v37 = a4[2];
    unint64_t v18 = a4[1];
    if (v18 < v37)
    {
LABEL_36:
      long long v38 = *(_OWORD *)__p;
      *(void *)(v18 + 16) = v88;
      *(_OWORD *)unint64_t v18 = v38;
      a4[1] = v18 + 24;
      return;
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a4) >> 3);
    unint64_t v80 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *a4) >> 3);
    if (2 * v81 > v80) {
      unint64_t v80 = 2 * v81;
    }
    if (v81 >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v80;
    }
    uint64_t v94 = a4 + 2;
    if (v22) {
      goto LABEL_83;
    }
    uint64_t v82 = 0;
  }
  else
  {
    sub_216779094(__p, "Edit targets that map paths across composition arcs are not currently supported for namespace editing");
    uint64_t v16 = (uint64_t)(a4 + 2);
    unint64_t v17 = a4[2];
    unint64_t v18 = a4[1];
    if (v18 < v17) {
      goto LABEL_36;
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a4) >> 3);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a4) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x555555555555555) {
      unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v20;
    }
    uint64_t v94 = a4 + 2;
    if (v22)
    {
LABEL_83:
      uint64_t v82 = (char *)sub_216782ED8(v16, v22);
      goto LABEL_86;
    }
    uint64_t v82 = 0;
  }
LABEL_86:
  uint64_t v83 = &v82[24 * v19];
  uint64_t v90 = v82;
  char v91 = v83;
  uint64_t v93 = &v82[24 * v22];
  long long v84 = *(_OWORD *)__p;
  *((void *)v83 + 2) = v88;
  *(_OWORD *)uint64_t v83 = v84;
  __p[1] = 0;
  uint64_t v88 = 0;
  __p[0] = 0;
  uint64_t v92 = v83 + 24;
  sub_216790CCC(a4, &v90);
  uint64_t v85 = a4[1];
  sub_216790E64((uint64_t)&v90);
  int v86 = SHIBYTE(v88);
  a4[1] = v85;
  if (v86 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D584D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_GatherTargetListOpEdits(void *a1, unsigned int *a2, uint64_t *a3)
{
  v89[3] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v76);
  uint64_t v82 = 0;
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26C768878;
  v5[1] = &v76;
  void v5[2] = &v76;
  uint64_t v82 = v5;
  uint64_t v83 = 0;
  v84[0] = (tbb::internal *)&unk_26C7689B0;
  int v7 = (tbb::internal *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v6);
  v84[1] = v7;
  bzero(v7, 0x2C0uLL);
  *((_OWORD *)v7 + 16) = xmmword_21749B1B0;
  v84[0] = (tbb::internal *)&unk_26C768940;
  *(_OWORD *)long long __p = 0u;
  long long v86 = 0u;
  int v87 = 1065353216;
  memset(v89, 0, 24);
  long long v88 = 0u;
  uint64_t v65 = &v76;
  v66[0] = a1;
  *(void *)&long long v74 = &unk_26C7689F0;
  *((void *)&v74 + 1) = &v65;
  tbb::interface7::internal::isolate_within_arena((uint64_t (***)(void))&v74, 0);
  uint64_t v8 = __p[0];
  int8x8_t v9 = (int8x8_t)__p[1];
  __p[1] = 0;
  __p[0] = 0;
  long long v67 = v8;
  int8x8_t v68 = v9;
  long long v69 = v86;
  int v70 = v87;
  if (*((void *)&v86 + 1))
  {
    unint64_t v10 = *(void *)(v86 + 8);
    if ((*(void *)&v9 & (*(void *)&v9 - 1)) != 0)
    {
      if (v10 >= *(void *)&v9) {
        v10 %= *(void *)&v9;
      }
    }
    else
    {
      v10 &= *(void *)&v9 - 1;
    }
    *((void *)v8 + v1sub_2168EBBB8((void ***)&a9, 0) = &v69;
    long long v86 = 0uLL;
  }
  long long v71 = v88;
  uint64_t v72 = v89[0];
  memset(v89, 0, 24);
  long long v88 = 0uLL;
  long long v73 = *(_OWORD *)&v89[1];
  sub_216BBDB9C((uint64_t *)&v88);
  unint64_t v11 = (_DWORD *)v86;
  if ((void)v86)
  {
    do
    {
      unint64_t v12 = *(_DWORD **)v11;
      sub_216D5AF74(v11 + 4);
      operator delete(v11);
      unint64_t v11 = v12;
    }
    while (v12);
  }
  long long v13 = __p[0];
  __p[0] = 0;
  if (v13) {
    operator delete(v13);
  }
  sub_216D5A128(v84);
  sub_216C7894C(v81);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v76);
  v66[0] = 0;
  v66[1] = 0;
  uint64_t v65 = (void ***)v66;
  long long v77 = 0;
  uint64_t v76 = (void **)sub_216BBE8E8(&v71, a2);
  unint64_t v14 = sub_216BBE950((uint64_t)&v76);
  for (i = v76; i != (void **)v14; uint64_t v76 = i)
  {
    unint64_t v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)i[1];
    uint64_t v16 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)i[2];
    if (v17 != v16)
    {
      do
      {
        sub_2169814FC((uint64_t **)&v65, v66, v17, v17);
        unint64_t v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v17 + 8);
      }
      while (v17 != v16);
      uint64_t i = v76;
    }
    uint64_t i = (void **)i[5];
    if (!i) {
      uint64_t i = (void **)sub_216BBE950((uint64_t)&v76);
    }
  }
  unint64_t v54 = (uint64_t *)&v71;
  unint64_t v18 = (uint64_t *)v65;
  if (v65 != v66)
  {
    uint64_t v55 = (uint64_t)(a3 + 14);
    unint64_t v56 = a3 + 12;
    int v59 = a3;
    do
    {
      if (v68)
      {
        unint64_t v19 = bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)v18 + 8)+ ((*((unsigned int *)v18 + 8)+ (unint64_t)*((unsigned int *)v18 + 7)+ (*((unsigned int *)v18 + 8) + (unint64_t)*((unsigned int *)v18 + 7))* (*((unsigned int *)v18 + 8) + (unint64_t)*((unsigned int *)v18 + 7))) >> 1)));
        uint8x8_t v20 = (uint8x8_t)vcnt_s8(v68);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          unint64_t v21 = v19;
          if (v19 >= *(void *)&v68) {
            unint64_t v21 = v19 % *(void *)&v68;
          }
        }
        else
        {
          unint64_t v21 = v19 & (*(void *)&v68 - 1);
        }
        unint64_t v22 = (void *)*((void *)v67 + v21);
        if (v22)
        {
          for (uint64_t j = (void *)*v22; j; uint64_t j = (void *)*j)
          {
            unint64_t v24 = j[1];
            if (v24 == v19)
            {
              if (j[2] == *(uint64_t *)((char *)v18 + 28))
              {
                uint64_t v58 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v18 + 28);
                uint64_t v43 = (char **)(j + 3);
                goto LABEL_39;
              }
            }
            else
            {
              if (v20.u32[0] > 1uLL)
              {
                if (v24 >= *(void *)&v68) {
                  v24 %= *(void *)&v68;
                }
              }
              else
              {
                v24 &= *(void *)&v68 - 1;
              }
              if (v24 != v21) {
                break;
              }
            }
          }
        }
      }
      uint64_t v76 = (void **)"usd/namespaceEditor.cpp";
      long long v77 = (atomic_ullong *)"_GatherTargetListOpEdits";
      uint64_t v78 = 1071;
      unint64_t v79 = (unint64_t)"static void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_GatherT"
                              "argetListOpEdits(const UsdStageRefPtr &, const _EditDescription &, _ProcessedEdit *)";
      LOBYTE(v8sub_2168EBBB8((void ***)&a9, 0) = 0;
      if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v76, "propertySpecs", 0))
      {
        uint64_t v58 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v18 + 28);
        uint64_t v43 = 0;
LABEL_39:
        unint64_t v25 = *v43;
        if (*v43 != v43[1])
        {
          if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v25 + 32))) {
            sub_216D59884();
          }
          unint64_t v25 = *v43;
          a3 = v59;
        }
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        unint64_t v26 = v43[1];
        v60[0] = v26;
        v60[1] = v26;
        if (v26 != v25)
        {
          if (!pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)(v26 - 16))) {
            sub_216D59884();
          }
          if (v62 != v63)
          {
            uint64_t v27 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D57D70(a1);
            pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v27, v58, (uint64_t)&v76);
            int v28 = (int)v76;
            if ((v79 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v78 + 1);
            sub_21697C414(&v78);
            if (v77) {
              sub_216D16E0C(v77);
            }
            if (v28 == 3) {
              unint64_t v29 = "attribute";
            }
            else {
              unint64_t v29 = "relationship";
            }
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v58);
            sub_216D59A34(&v62);
            unint64_t v33 = "relationship target";
            if (v28 == 3) {
              unint64_t v33 = "connection";
            }
            uint64_t v34 = v60;
            if (v61 < 0) {
              uint64_t v34 = (void **)v60[0];
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"The %s at '%s' has the following %s paths [%s] which require authoring relocates to be retargeted because they are introduced by opinions from composition arcs; authoring relocates is not yet supported",
              v31,
              v32,
              v29,
              Text,
              v33,
              v34,
              v54);
            unint64_t v35 = a3[13];
            unint64_t v36 = a3[14];
            if (v35 >= v36)
            {
              unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *v56) >> 3);
              unint64_t v39 = v38 + 1;
              if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *v56) >> 3);
              if (2 * v40 > v39) {
                unint64_t v39 = 2 * v40;
              }
              if (v40 >= 0x555555555555555) {
                unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v41 = v39;
              }
              uint64_t v80 = v55;
              if (v41) {
                uint64_t v42 = (void **)sub_216782ED8(v55, v41);
              }
              else {
                uint64_t v42 = 0;
              }
              uint64_t v44 = (atomic_ullong *)&v42[3 * v38];
              uint64_t v76 = v42;
              long long v77 = v44;
              unint64_t v79 = (unint64_t)&v42[3 * v41];
              long long v45 = v74;
              void v44[2] = v75;
              *(_OWORD *)uint64_t v44 = v45;
              atomic_ullong v75 = 0;
              long long v74 = 0uLL;
              uint64_t v78 = (uint64_t)(v44 + 3);
              sub_216790CCC(v56, &v76);
              uint64_t v46 = a3[13];
              sub_216790E64((uint64_t)&v76);
              int v47 = SHIBYTE(v75);
              a3[13] = v46;
              if (v47 < 0) {
                operator delete((void *)v74);
              }
            }
            else
            {
              long long v37 = v74;
              *(void *)(v35 + 16) = v75;
              *(_OWORD *)unint64_t v35 = v37;
              atomic_ullong v75 = 0;
              long long v74 = 0uLL;
              a3[13] = v35 + 24;
            }
            if (v61 < 0) {
              operator delete(v60[0]);
            }
          }
        }
        uint64_t v76 = (void **)&v62;
        sub_216981168(&v76);
      }
      unint64_t v48 = (uint64_t *)v18[1];
      if (v48)
      {
        do
        {
          unint64_t v49 = v48;
          unint64_t v48 = (uint64_t *)*v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          unint64_t v49 = (uint64_t *)v18[2];
          BOOL v50 = *v49 == (void)v18;
          unint64_t v18 = v49;
        }
        while (!v50);
      }
      unint64_t v18 = v49;
    }
    while (v49 != (uint64_t *)v66);
  }
  sub_216981EE8((uint64_t)&v65, v66[0]);
  sub_216BBDB9C(v54);
  unint64_t v51 = (_DWORD *)v69;
  if ((void)v69)
  {
    do
    {
      unint64_t v52 = *(_DWORD **)v51;
      sub_216D5AF74(v51 + 4);
      operator delete(v51);
      unint64_t v51 = v52;
    }
    while (v52);
  }
  unint64_t v53 = v67;
  long long v67 = 0;
  if (v53) {
    operator delete(v53);
  }
}

void sub_216D5906C(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_ProcessPrimEditRequiresRelocates(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::PcpNodeRef *this, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetChildrenRange(this, &v46);
  long long v44 = v46;
  uint64_t v7 = v47;
  uint64_t v8 = v48;
  uint64_t v45 = v47;
  uint64_t v9 = v49;
  uint64_t v10 = v50;
  uint64_t v12 = *((void *)&v46 + 1);
  uint64_t v11 = v46;
  while (1)
  {
    if (v12 == v9 && v11 == v8 && v7 == v10) {
      return;
    }
    v43[0] = v11;
    v43[1] = v7;
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsDueToAncestor((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v43))
    {
      pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeSubtreeRange(a2, (const pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v43, &v39);
      uint64_t v16 = v39;
      uint64_t v15 = v40;
      uint64_t v17 = v41;
      if (v39 != v41 || v40 != v42) {
        break;
      }
    }
LABEL_19:
    pxrInternal__aapl__pxrReserved__::PcpNodeRef_ChildrenIterator::increment(&v44);
    uint64_t v12 = *((void *)&v44 + 1);
    uint64_t v11 = v44;
    uint64_t v7 = v45;
  }
  uint64_t v19 = v42 - 1;
  while (1)
  {
    uint64_t v20 = v15;
    v38[0] = v16;
    v38[1] = v15;
    if (pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v38))
    {
      if ((pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v38) & 1) == 0) {
        break;
      }
    }
    uint64_t v15 = v20 + 1;
    if (v16 == v17 && v19 == v20) {
      goto LABEL_19;
    }
  }
  *(unsigned char *)(a4 + 129) = 1;
  if (*(_DWORD *)(a1 + 16) != 1)
  {
    sub_216779094(__p, "The prim to move requires authoring relocates since it composes opinions introduced by ancestral composition arcs;"
      " authoring relocates is not yet supported");
    unint64_t v22 = *(void *)(a4 + 8);
    unint64_t v27 = *(void *)(a4 + 16);
    if (v22 >= v27)
    {
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *(void *)a4) >> 3);
      unint64_t v29 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *(void *)a4) >> 3);
      if (2 * v30 > v29) {
        unint64_t v29 = 2 * v30;
      }
      if (v30 >= 0x555555555555555) {
        unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v26 = v29;
      }
      uint64_t v52 = a4 + 16;
      if (v26) {
        goto LABEL_39;
      }
      unint64_t v31 = 0;
      goto LABEL_42;
    }
LABEL_31:
    long long v28 = *(_OWORD *)__p;
    *(void *)(v22 + 16) = v37;
    *(_OWORD *)unint64_t v22 = v28;
    *(void *)(a4 + 8) = v22 + 24;
    return;
  }
  sub_216779094(__p, "The prim to delete must be deactivated rather than deleted since it composes opinions introduced by ancestral composition arcs; deletion via deactivation is not yet supported");
  unint64_t v22 = *(void *)(a4 + 8);
  unint64_t v21 = *(void *)(a4 + 16);
  if (v22 < v21) {
    goto LABEL_31;
  }
  unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *(void *)a4) >> 3);
  unint64_t v24 = v23 + 1;
  if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(void *)a4) >> 3);
  if (2 * v25 > v24) {
    unint64_t v24 = 2 * v25;
  }
  if (v25 >= 0x555555555555555) {
    unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v26 = v24;
  }
  uint64_t v52 = a4 + 16;
  if (v26)
  {
LABEL_39:
    unint64_t v31 = (char *)sub_216782ED8(a4 + 16, v26);
    goto LABEL_42;
  }
  unint64_t v31 = 0;
LABEL_42:
  unint64_t v32 = &v31[24 * v23];
  v51[0] = v31;
  v51[1] = v32;
  v51[3] = &v31[24 * v26];
  long long v33 = *(_OWORD *)__p;
  *((void *)v32 + 2) = v37;
  *(_OWORD *)unint64_t v32 = v33;
  __p[1] = 0;
  uint64_t v37 = 0;
  __p[0] = 0;
  _OWORD v51[2] = v32 + 24;
  sub_216790CCC((uint64_t *)a4, v51);
  uint64_t v34 = *(void *)(a4 + 8);
  sub_216790E64((uint64_t)v51);
  int v35 = SHIBYTE(v37);
  *(void *)(a4 + 8) = v34;
  if (v35 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216D594AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_216790E64(v15 - 128);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_ProcessPropEditRequiresRelocates(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::PcpNodeRef *a3, uint64_t a4)
{
  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a1);
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetNodeSubtreeRange(a2, a3, &v44);
  uint64_t v10 = v44;
  uint64_t v11 = ++v45;
  uint64_t v12 = v46;
  uint64_t v13 = v47;
  if (v44 != v46 || v11 != v47)
  {
    while (1)
    {
      v43[0] = v10;
      v43[1] = v11;
      uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::HasSpecs((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v43);
      if (!result) {
        goto LABEL_41;
      }
      uint64_t result = pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsInert((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v43);
      if (result) {
        goto LABEL_41;
      }
      Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v43);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, NameToken, &v41);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v41)) {
        break;
      }
      int v22 = 3;
LABEL_39:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
      uint64_t result = (uint64_t)sub_21697C414(&v41);
      if (v22 != 3 && v22) {
        return result;
      }
LABEL_41:
      ++v11;
      if (v10 == v12 && v11 == v13) {
        return result;
      }
    }
    LayerStack = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetLayerStack((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)v43);
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_216BBBFA8(LayerStack);
    uint64_t Layers = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v17);
    uint64_t v20 = *(uint64_t **)Layers;
    uint64_t v19 = *(uint64_t **)(Layers + 8);
    while (1)
    {
      if (v20 == v19)
      {
        int v22 = 0;
        goto LABEL_39;
      }
      unint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v20);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41))break; {
      ++v20;
      }
    }
    *(unsigned char *)(a4 + 129) = 1;
    if (*((_DWORD *)a1 + 4) == 1)
    {
      sub_216779094(__p, "The property to delete must be deactivated rather than deleted since it composes opinions introduced by ancestral composition arcs; deletion via deactivation is not yet supported");
      unint64_t v24 = *(void *)(a4 + 8);
      unint64_t v23 = *(void *)(a4 + 16);
      if (v24 >= v23)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *(void *)a4) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *(void *)a4) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v29 = a4 + 16;
        uint64_t v49 = a4 + 16;
        if (v28)
        {
LABEL_33:
          uint64_t v34 = (char *)sub_216782ED8(v29, v28);
          goto LABEL_36;
        }
        uint64_t v34 = 0;
LABEL_36:
        int v35 = &v34[24 * v25];
        v48[0] = v34;
        v48[1] = v35;
        v48[3] = &v34[24 * v28];
        long long v36 = *(_OWORD *)__p;
        *((void *)v35 + 2) = v40;
        *(_OWORD *)int v35 = v36;
        __p[1] = 0;
        uint64_t v40 = 0;
        __p[0] = 0;
        _OWORD v48[2] = v35 + 24;
        sub_216790CCC((uint64_t *)a4, v48);
        uint64_t v37 = *(void *)(a4 + 8);
        sub_216790E64((uint64_t)v48);
        int v38 = SHIBYTE(v40);
        *(void *)(a4 + 8) = v37;
        if (v38 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_38;
      }
    }
    else
    {
      sub_216779094(__p, "The property to move requires authoring relocates since it composes opinions introduced by ancestral composition arcs; authoring relocates is not supported for properties");
      unint64_t v24 = *(void *)(a4 + 8);
      unint64_t v30 = *(void *)(a4 + 16);
      if (v24 >= v30)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *(void *)a4) >> 3);
        unint64_t v32 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *(void *)a4) >> 3);
        if (2 * v33 > v32) {
          unint64_t v32 = 2 * v33;
        }
        if (v33 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v32;
        }
        uint64_t v29 = a4 + 16;
        uint64_t v49 = a4 + 16;
        if (v28) {
          goto LABEL_33;
        }
        uint64_t v34 = 0;
        goto LABEL_36;
      }
    }
    long long v31 = *(_OWORD *)__p;
    *(void *)(v24 + 16) = v40;
    *(_OWORD *)unint64_t v24 = v31;
    *(void *)(a4 + 8) = v24 + 24;
LABEL_38:
    int v22 = 1;
    goto LABEL_39;
  }
  return result;
}

void sub_216D59824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_21697B754(&a16);
  _Unwind_Resume(a1);
}

void sub_216D59884()
{
}

void sub_216D59974(_Unwind_Exception *a1)
{
  sub_216980BCC(v1);
  _Unwind_Resume(a1);
}

void *sub_216D5998C(uint64_t a1)
{
  char v4 = (void **)(a1 + 144);
  sub_216981168(&v4);
  char v4 = (void **)(a1 + 120);
  sub_216981168(&v4);
  char v4 = (void **)(a1 + 96);
  sub_216981168(&v4);
  char v4 = (void **)(a1 + 72);
  sub_216981168(&v4);
  char v4 = (void **)(a1 + 48);
  sub_216981168(&v4);
  char v4 = (void **)(a1 + 24);
  sub_216981168(&v4);
  unint64_t add_explicit = *(void *)(a1 + 8);
  if ((add_explicit & 7) != 0) {
    unint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(add_explicit & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)add_explicit, (pxrInternal__aapl__pxrReserved__::SdfSpec *)a1);
}

uint64_t sub_216D59A34(pxrInternal__aapl__pxrReserved__::SdfPath **a1)
{
  sub_21677B834((uint64_t)v3);
  sub_216A8E654(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216D59B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D59B7C(uint64_t a1)
{
  sub_216BBDB9C((uint64_t *)(a1 + 40));
  uint64_t v2 = *(_DWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(_DWORD **)v2;
      sub_216D5AF74(v2 + 4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_216D59BE4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(uint64_t **)(*a1 + 48);
  uint64_t v3 = *(uint64_t **)(*a1 + 56);
  if (v2 == v3) {
    return 1;
  }
  char v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v1 + 120);
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)(v1 + 24);
  while (1)
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v4)
      && (pxrInternal__aapl__pxrReserved__::SdfJustCreatePrimInLayer((uint64_t)v2, (uint64_t)v4) & 1) == 0)
    {
      unint64_t v18 = "usd/namespaceEditor.cpp";
      uint64_t v19 = "operator()";
      uint64_t v20 = 1221;
      unint64_t v21 = "auto pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::Apply()::(anonymous class)::operator()() const";
      char v22 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v4);
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v2);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v13);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v15 = (const char *)Identifier;
      }
      else {
        uint64_t v15 = *(const char **)Identifier;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find or create new parent spec at path '%s' on layer '%s' which is necessary to apply edits. The edit will be incomplete.", Text, v15);
      return 0;
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v2);
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::Apply(v6, v5)) {
      break;
    }
    v2 += 2;
    if (v2 == v3) {
      return 1;
    }
  }
  unint64_t v18 = "usd/namespaceEditor.cpp";
  uint64_t v19 = "operator()";
  uint64_t v20 = 1231;
  unint64_t v21 = "auto pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_ProcessedEdit::Apply()::(anonymous class)::operator()() const";
  char v22 = 0;
  p_p = (const char *)&__p;
  sub_216D5E134((uint64_t)v5);
  if (v17 < 0) {
    p_p = (const char *)__p;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v2);
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9);
  if (*(char *)(v10 + 23) >= 0) {
    uint64_t v11 = (const char *)v10;
  }
  else {
    uint64_t v11 = *(const char **)v10;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to apply batch edit '%s' on layer '%s' which is necessary to apply edits. The edit will be incomplete.", p_p, v11);
  if (v17 < 0) {
    operator delete(__p);
  }
  return 0;
}

void sub_216D59D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_216D59D88(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C754E58;
  sub_216982A54(v7, a3);
  BOOL v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216D59E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216D59E34(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 168;
        sub_216D59ECC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_216D59ECC(uint64_t a1, uint64_t a2)
{
  BOOL v5 = (void **)(a2 + 144);
  sub_216981168(&v5);
  BOOL v5 = (void **)(a2 + 120);
  sub_216981168(&v5);
  BOOL v5 = (void **)(a2 + 96);
  sub_216981168(&v5);
  BOOL v5 = (void **)(a2 + 72);
  sub_216981168(&v5);
  BOOL v5 = (void **)(a2 + 48);
  sub_216981168(&v5);
  BOOL v5 = (void **)(a2 + 24);
  sub_216981168(&v5);
  unint64_t add_explicit = *(void *)(a2 + 8);
  if ((add_explicit & 7) != 0) {
    unint64_t add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(add_explicit & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((void *)add_explicit, (pxrInternal__aapl__pxrReserved__::SdfSpec *)a2);
}

uint64_t sub_216D59F74(uint64_t *a1, _DWORD *a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  unint64_t v5 = *(void *)(v3 - 8);
  if (v5 >= v4)
  {
    uint64_t result = sub_216AF1048(a1, a2);
  }
  else
  {
    sub_216AF1154(v3, *(_DWORD **)(v3 - 8), a2);
    uint64_t result = v5 + 20;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_216D59FC8(uint64_t a1)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16)))
  {
    uint64_t v3 = sub_216D2F758(a1);
    return pxrInternal__aapl__pxrReserved__::UsdPrim::IsPathInPrototype((pxrInternal__aapl__pxrReserved__::UsdPrim *)v3, v4);
  }
  else
  {
    int v6 = *(pxrInternal__aapl__pxrReserved__ **)(a1 + 8);
    if (!v6 || (unint64_t v7 = *((void *)v6 + 7), (v7 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v6, v2);
      unint64_t v7 = *((void *)v6 + 7);
    }
    return (v7 >> 12) & 1;
  }
}

uint64_t sub_216D5A03C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  uint64_t v3 = *(atomic_ullong **)(v2 + 24);
  unint64_t explicit = atomic_load_explicit(v3 + 7, memory_order_acquire);
  if (explicit) {
    return explicit;
  }

  return pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v3);
}

void sub_216D5A0A0(uint64_t a1)
{
  sub_216BBDB9C((uint64_t *)(a1 + 440));
  uint64_t v2 = *(_DWORD **)(a1 + 416);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(_DWORD **)v2;
      sub_216D5AF74(v2 + 4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)(a1 + 400);
  *(void *)(a1 + 40sub_2168EBBB8((void ***)&a9, 0) = 0;
  if (v4) {
    operator delete(v4);
  }
  sub_216D5A128((tbb::internal **)(a1 + 376));
  sub_216C7894C((void *)(a1 + 336));

  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)a1);
}

tbb::internal **sub_216D5A128(tbb::internal **a1)
{
  *a1 = (tbb::internal *)&unk_26C768940;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v12);
  memset(v13, 0, sizeof(v13));
  v15[0] = 0;
  v15[1] = 0;
  unint64_t v14 = v15;
  while (1)
  {
    uint64_t v2 = a1[1];
    uint64_t v3 = *((void *)v2 + 16);
    __dmb(0xBu);
    uint64_t v4 = *(void *)v2;
    __dmb(0xBu);
    uint64_t v5 = *((void *)v2 + 16);
    __dmb(0xBu);
    if (v3 == v5)
    {
      uint64_t v6 = *((void *)v2 + 34);
      __dmb(0xBu);
      if (v3 == v6 + v4) {
        break;
      }
    }
    sub_216D5AAF8((uint64_t)a1, (uint64_t)&v11);
  }
  sub_216981EE8((uint64_t)&v14, v15[0]);
  sub_216D5AFBC((atomic_uint *)v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  uint64_t v7 = 0;
  uint64_t v8 = (uint64_t)a1[1] + 400;
  do
  {
    uint64_t v9 = *(void **)(v8 + v7);
    __dmb(0xBu);
    if ((unint64_t)v9 >= 2)
    {
      (*((void (**)(tbb::internal **))*a1 + 3))(a1);
      __dmb(0xBu);
      *(void *)(v8 + v7) = 0;
    }
    v7 += 40;
  }
  while (v7 != 320);
  *a1 = (tbb::internal *)&unk_26C7689B0;
  tbb::internal::NFS_Free(a1[1], v9);
  return a1;
}

void sub_216D5A2A8(void *a1)
{
}

__n128 sub_216D5A2EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C768878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_216D5A340(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C768878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216D5A378(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 256);
  v8[0] = 0;
  v8[1] = v5;
  uint64_t v6 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x20uLL);
  *((unsigned char *)v6 - 11) = 1;
  *uint64_t v6 = &unk_26C7688E8;
  v6[1] = v3;
  double v6[2] = a2;
  v6[3] = v4 + 264;
  return (**(uint64_t (***)(void))*(v6 - 5))();
}

uint64_t sub_216D5A434(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C768920)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D5A474()
{
  return &unk_26C768920;
}

uint64_t sub_216D5A488(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v50);
  uint64_t v47 = *(void *)(a1 + 8);
  uint64_t v48 = a1;
  unint64_t v3 = atomic_load(*(unint64_t **)(a1 + 16));
  unint64_t v49 = v3;
  while (2)
  {
    uint64_t v4 = *(void *)(v47 + 8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v51);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v51 + 1);
    long long v52 = 0uLL;
    uint64_t v53 = 0;
    v55[0] = 0;
    v55[1] = 0;
    uint64_t v5 = (void *)(v4 + 416);
    unint64_t v54 = v55;
    while (sub_216D5AAF8(v4 + 376, (uint64_t)&v51))
    {
      unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (HIDWORD(v51)+ ((HIDWORD(v51)+ (unint64_t)v51+ (HIDWORD(v51) + (unint64_t)v51)* (HIDWORD(v51) + (unint64_t)v51)) >> 1)));
      unint64_t v7 = *(void *)(v4 + 408);
      if (v7)
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v8.i16[0] = vaddlv_u8(v8);
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v1 = v6;
          if (v6 >= v7) {
            unint64_t v1 = v6 % v7;
          }
        }
        else
        {
          unint64_t v1 = v6 & (v7 - 1);
        }
        uint64_t v9 = *(void **)(*(void *)(v4 + 400) + 8 * v1);
        if (v9)
        {
          for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
          {
            unint64_t v11 = i[1];
            if (v11 == v6)
            {
              if (i[2] == v51) {
                goto LABEL_75;
              }
            }
            else
            {
              if (v8.u32[0] > 1uLL)
              {
                if (v11 >= v7) {
                  v11 %= v7;
                }
              }
              else
              {
                v11 &= v7 - 1;
              }
              if (v11 != v1) {
                break;
              }
            }
          }
        }
      }
      int v12 = (char *)operator new(0x30uLL);
      v56[0] = v12;
      v56[1] = v4 + 416;
      *(void *)int v12 = 0;
      *((void *)v12 + 1) = v6;
      sub_216981010((_DWORD *)v12 + 4, &v51);
      sub_21698105C((_DWORD *)v12 + 5, (_DWORD *)&v51 + 1);
      *(_OWORD *)(v12 + 24) = v52;
      *((void *)v12 + 5) = v53;
      uint64_t v53 = 0;
      long long v52 = 0uLL;
      char v57 = 1;
      float v13 = (float)(unint64_t)(*(void *)(v4 + 424) + 1);
      float v14 = *(float *)(v4 + 432);
      if (!v7 || (float)(v14 * (float)v7) < v13)
      {
        BOOL v15 = (v7 & (v7 - 1)) == 0;
        if (v7 < 3) {
          BOOL v15 = 0;
        }
        unint64_t v16 = (2 * v7) | !v15;
        unint64_t v17 = vcvtps_u32_f32(v13 / v14);
        if (v16 <= v17) {
          int8x8_t prime = (int8x8_t)v17;
        }
        else {
          int8x8_t prime = (int8x8_t)v16;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }
        unint64_t v7 = *(void *)(v4 + 408);
        if (*(void *)&prime <= v7)
        {
          if (*(void *)&prime < v7)
          {
            unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 424) / *(float *)(v4 + 432));
            if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
            {
              unint64_t v25 = std::__next_prime(v25);
            }
            else
            {
              uint64_t v27 = 1 << -(char)__clz(v25 - 1);
              if (v25 >= 2) {
                unint64_t v25 = v27;
              }
            }
            if (*(void *)&prime <= v25) {
              int8x8_t prime = (int8x8_t)v25;
            }
            if (*(void *)&prime >= v7)
            {
              unint64_t v7 = *(void *)(v4 + 408);
            }
            else
            {
              if (prime) {
                goto LABEL_32;
              }
              uint64_t v40 = *(void **)(v4 + 400);
              *(void *)(v4 + 40sub_2168EBBB8((void ***)&a9, 0) = 0;
              if (v40) {
                operator delete(v40);
              }
              unint64_t v7 = 0;
              *(void *)(v4 + 408) = 0;
            }
          }
        }
        else
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            sub_21677CA1C();
          }
          uint64_t v19 = operator new(8 * *(void *)&prime);
          uint64_t v20 = *(void **)(v4 + 400);
          *(void *)(v4 + 40sub_2168EBBB8((void ***)&a9, 0) = v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          *(int8x8_t *)(v4 + 408) = prime;
          do
            *(void *)(*(void *)(v4 + 400) + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          char v22 = (void *)*v5;
          if (*v5)
          {
            unint64_t v23 = v22[1];
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(v4 + 400) + 8 * v23) = v5;
            unint64_t v28 = (void *)*v22;
            if (*v22)
            {
              do
              {
                unint64_t v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(void *)&prime) {
                    v29 %= *(void *)&prime;
                  }
                }
                else
                {
                  v29 &= *(void *)&prime - 1;
                }
                if (v29 != v23)
                {
                  uint64_t v30 = *(void *)(v4 + 400);
                  if (!*(void *)(v30 + 8 * v29))
                  {
                    *(void *)(v30 + 8 * v29) = v22;
                    goto LABEL_57;
                  }
                  *char v22 = *v28;
                  *unint64_t v28 = **(void **)(*(void *)(v4 + 400) + 8 * v29);
                  **(void **)(*(void *)(v4 + 400) + 8 * v29) = v28;
                  unint64_t v28 = v22;
                }
                unint64_t v29 = v23;
LABEL_57:
                char v22 = v28;
                unint64_t v28 = (void *)*v28;
                unint64_t v23 = v29;
              }
              while (v28);
            }
          }
          unint64_t v7 = (unint64_t)prime;
        }
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v6 >= v7) {
            unint64_t v1 = v6 % v7;
          }
          else {
            unint64_t v1 = v6;
          }
        }
        else
        {
          unint64_t v1 = (v7 - 1) & v6;
        }
      }
      long long v31 = *(void **)(*(void *)(v4 + 400) + 8 * v1);
      if (v31)
      {
        *(void *)v56[0] = *v31;
        *long long v31 = v56[0];
      }
      else
      {
        *(void *)v56[0] = *(void *)(v4 + 416);
        *(void *)(v4 + 416) = v56[0];
        *(void *)(*(void *)(v4 + 400) + 8 * v1) = v5;
        if (*(void *)v56[0])
        {
          unint64_t v32 = *(void *)(*(void *)v56[0] + 8);
          if ((v7 & (v7 - 1)) != 0)
          {
            if (v32 >= v7) {
              v32 %= v7;
            }
          }
          else
          {
            v32 &= v7 - 1;
          }
          *(void *)(*(void *)(v4 + 400) + 8 * vsub_216D56FD4((uint64_t)this + 32) = v56[0];
        }
      }
      v56[0] = 0;
      ++*(void *)(v4 + 424);
      sub_216D5AF2C((uint64_t)v56);
LABEL_75:
      unint64_t v33 = v54;
      if (v54 != v55)
      {
        do
        {
          uint64_t v34 = (uint64_t *)sub_216BBD760(v4 + 440, (_DWORD *)v33 + 7);
          int v35 = v34;
          unint64_t v1 = v34[1];
          if (v1 >= v34[2])
          {
            uint64_t v36 = sub_216981B30(v34, &v51);
          }
          else
          {
            sub_216981010((_DWORD *)v34[1], &v51);
            sub_21698105C((_DWORD *)(v1 + 4), (_DWORD *)&v51 + 1);
            uint64_t v36 = v1 + 8;
          }
          v35[1] = v36;
          uint64_t v37 = v33[1];
          if (v37)
          {
            do
            {
              int v38 = (void **)v37;
              uint64_t v37 = (void *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              int v38 = (void **)v33[2];
              BOOL v39 = *v38 == v33;
              unint64_t v33 = v38;
            }
            while (!v39);
          }
          unint64_t v33 = v38;
        }
        while (v38 != v55);
      }
    }
    sub_216981EE8((uint64_t)&v54, v55[0]);
    sub_216D5AFBC((atomic_uint *)&v52);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v51 + 1);
    sub_21697C414(&v51);
    unint64_t v41 = v49;
    unint64_t v42 = v49;
    atomic_compare_exchange_strong(*(atomic_ullong *volatile *)(v48 + 16), &v42, 0);
    if (v42 != v41)
    {
      unint64_t v49 = v42;
      continue;
    }
    break;
  }
  unint64_t v43 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v43) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v44 = v50;
  unint64_t v45 = atomic_load((unint64_t *)(v43 + 144));
  if (v44 < v45
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v50, (atomic_ullong *)v43))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v50, *(void *)(v48 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v50);
  return 0;
}

void sub_216D5AA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

BOOL sub_216D5AAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a1;
  unint64_t v3 = *(atomic_ullong **)(a1 + 8);
  uint64_t v36 = a2 + 8;
  uint64_t v38 = a2 + 32;
  BOOL v39 = (int *)(a2 + 4);
  while (1)
  {
    unint64_t v4 = *v3;
    __dmb(0xBu);
    atomic_ullong v5 = v3[16];
    __dmb(0xBu);
    uint64_t v6 = v5 - v4;
    BOOL v7 = v6 > 0;
LABEL_3:
    if (v6 < 1) {
      break;
    }
    while (1)
    {
      unint64_t v8 = v4;
      atomic_compare_exchange_strong(v3, &v8, v4 + 1);
      if (v8 == v4) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v3, 0, memory_order_relaxed);
      if (add_explicit != v4)
      {
        atomic_ullong v10 = v3[16];
        __dmb(0xBu);
        uint64_t v6 = v10 - add_explicit;
        unint64_t v4 = add_explicit;
        goto LABEL_3;
      }
    }
    BOOL v40 = v7;
    unsigned int v11 = (3 * (_BYTE)v4) & 7;
    int v12 = &v3[5 * ((3 * v4) & 7)];
    unint64_t v13 = v4 & 0xFFFFFFFFFFFFFFF8;
    float v14 = (unint64_t *)(v12 + 49);
    atomic_ullong v15 = v12[49];
    __dmb(0xBu);
    if (v15 != (v4 & 0xFFFFFFFFFFFFFFF8))
    {
      while (1)
      {
        unint64_t v20 = *v14;
        __dmb(0xBu);
        if (v20 == v13) {
          break;
        }
        sched_yield();
      }
    }
    unint64_t v16 = &v3[5 * ((3 * v4) & 7)];
    atomic_ullong v17 = v16[51];
    __dmb(0xBu);
    if (v17 == v13)
    {
      unint64_t v18 = v16 + 51;
      while (1)
      {
        uint64_t v19 = *v18;
        __dmb(0xBu);
        if (v19 != v13) {
          break;
        }
        sched_yield();
      }
    }
    uint64_t v21 = (unint64_t *)(v12 + 48);
    char v22 = (unint64_t *)v12[48];
    __dmb(0xBu);
    uint64_t v23 = v2[1];
    uint64_t v24 = *(void *)(v23 + 256) - 1;
    unint64_t v25 = v24 & (v4 >> 3);
    if (v25 == v24) {
      uint8x8_t v26 = v22;
    }
    else {
      uint8x8_t v26 = 0;
    }
    uint64_t v27 = (1 << v25) & v22[1];
    if (v27)
    {
      unint64_t v41 = v21;
      unint64_t v28 = v22 + 2;
      unint64_t v29 = (int *)&v22[7 * v25 + 2];
      sub_21697DE94((int *)a2, v29);
      sub_21697DEEC(v39, v29 + 1);
      if (*(void *)(a2 + 8))
      {
        sub_216D5ADD0((atomic_uint *)v36);
        operator delete(*(void **)v36);
        *(void *)uint64_t v36 = 0;
        *(void *)(v36 + 8) = 0;
        *(void *)(v36 + 16) = 0;
      }
      uint64_t v30 = (atomic_uint *)&v28[7 * v25];
      long long v31 = *(_OWORD *)(v30 + 2);
      v30 += 2;
      *(_OWORD *)(a2 + 8) = v31;
      *(void *)(a2 + 24) = *((void *)v30 + 2);
      *(void *)uint64_t v30 = 0;
      *((void *)v30 + 1) = 0;
      *((void *)v30 + 2) = 0;
      sub_216D5AEC0(v38, (void *)v30 + 3);
      sub_216981EE8((uint64_t)(v30 + 6), *((void **)v30 + 4));
      sub_216D5AFBC(v30);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v29 + 1);
      sub_21697C414(v29);
      uint64_t v2 = (void *)a1;
      uint64_t v21 = v41;
    }
    else
    {
      atomic_fetch_add((atomic_ullong *volatile)(v23 + 272), 0xFFFFFFFFFFFFFFFFLL);
    }
    unint64_t v32 = v13 + 8;
    if ((unint64_t)v26 < 2)
    {
      __dmb(0xBu);
      *float v14 = v32;
      if (v27) {
        return v40;
      }
    }
    else
    {
      sub_21685036C((uint64_t)&v43, (uint64_t)&v3[5 * v11 + 52]);
      unint64_t v33 = *v26;
      __dmb(0xBu);
      *uint64_t v21 = v33;
      if (v33 <= 1)
      {
        __dmb(0xBu);
        v3[5 * v11 + 50] = 0;
      }
      uint64_t v34 = v43;
      if (v43)
      {
        __dmb(0xBu);
        *uint64_t v34 = 0;
      }
      __dmb(0xBu);
      *float v14 = v32;
      (*(void (**)(void *, unint64_t *))(*v2 + 24))(v2, v26);
      if (v27) {
        return v40;
      }
    }
  }
  return 0;
}

atomic_uint *sub_216D5ADD0(atomic_uint *result)
{
  unint64_t v1 = result;
  uint64_t v3 = *(void *)result;
  for (i = *((void *)result + 1); i != v3; __n128 result = sub_216D5AE1C(i))
    i -= 48;
  *((void *)v1 + 1) = v3;
  return result;
}

atomic_uint *sub_216D5AE1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  __n128 result = *(atomic_uint **)(a1 + 8);
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    unint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (atomic_uint *)v4();
  }
  return result;
}

void sub_216D5AEC0(uint64_t a1, void *a2)
{
  unint64_t v4 = (void *)(a1 + 8);
  sub_216981EE8(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  atomic_ullong v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *unint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

uint64_t sub_216D5AF2C(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216D5AF74(v2 + 4);
    }
    operator delete(v2);
  }
  return a1;
}

_DWORD *sub_216D5AF74(_DWORD *a1)
{
  sub_216D5AFBC(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

atomic_uint *sub_216D5AFBC(atomic_uint *a1)
{
  if (*(void *)a1)
  {
    sub_216D5ADD0(a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216D5AFF8(tbb::internal **a1)
{
  unint64_t v1 = sub_216D5A128(a1);

  operator delete(v1);
}

uint64_t sub_216D5B020(void *a1)
{
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, 56 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216D5B054(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 56 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216D5B088(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4) {
    tbb::internal::throw_exception_v4(1);
  }
  return v4;
}

uint64_t sub_216D5B0C8(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

_DWORD *sub_216D5B0DC(uint64_t a1)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::WorkDispatcher **)v1;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D57D70(*(uint64_t **)(v1 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v3, (uint64_t)&v102);
  uint64_t UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v4);
  unint64_t v7 = *(void *)UsdPrimDefaultPredicate;
  uint64_t v6 = *(void *)(UsdPrimDefaultPredicate + 8);
  uint64_t v8 = *(void *)(UsdPrimDefaultPredicate + 16);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v104)
    && ((v7 & 0x2000) != 0 || (v6 & 0x2000) == 0))
  {
    v7 |= 0x2000uLL;
    v6 &= ~0x2000uLL;
  }
  uint64_t v96 = (tbb::task_group_context *)v7;
  uint64_t v97 = v6;
  *(void *)&long long v98 = v8;
  sub_216D5BAA4((uint64_t)&v102, (uint64_t *)&v96, (uint64_t)&v32);
  if ((v106 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v105);
  sub_21697C414(&v104);
  if (v103) {
    sub_216D16E0C(v103);
  }
  uint64_t v27 = v32;
  sub_216981010(&v28, &v33);
  sub_21698105C(&v29, &v34);
  long long v30 = v35;
  uint64_t v31 = v36;
  char v22 = v37;
  sub_216981010(&v23, &v38);
  sub_21698105C(&v24, &v39);
  long long v25 = v40;
  uint64_t v26 = v41;
  uint64_t v21 = v2;
  int v102 = 0;
  uint64_t v107 = 65539;
  int v108 = 55;
  tbb::task_group_context::init((uint64_t)&v102, v9, v10, v11);
  uint64_t v47 = v27;
  sub_216981010(&v48, &v28);
  sub_21698105C(&v49, &v29);
  long long v50 = v30;
  uint64_t v51 = v31;
  unint64_t v42 = v22;
  sub_216981010(&v43, &v23);
  sub_21698105C(&v44, &v24);
  long long v45 = v25;
  uint64_t v46 = v26;
  char v57 = v47;
  sub_216981010(&v58, &v48);
  sub_21698105C(&v59, &v49);
  long long v60 = v50;
  uint64_t v61 = v51;
  long long v52 = v42;
  sub_216981010(&v53, &v43);
  sub_21698105C(&v54, &v44);
  long long v55 = v45;
  uint64_t v56 = v46;
  int v70 = &v21;
  unint64_t v66 = v57;
  sub_216981010(&v67, &v58);
  sub_21698105C((_DWORD *)&v67 + 1, &v59);
  long long v68 = v60;
  uint64_t v69 = v61;
  uint64_t v62 = v52;
  sub_216981010(&v63, &v53);
  sub_21698105C((_DWORD *)&v63 + 1, &v54);
  long long v64 = v55;
  uint64_t v65 = v56;
  int v12 = v66;
  if (v66 != v62) {
    goto LABEL_13;
  }
  unint64_t v13 = v2;
  if (v67 != v63) {
    goto LABEL_13;
  }
  if ((sub_216D5D158((uint64_t)&v68, (uint64_t)&v64) & 1) == 0)
  {
    int v12 = v66;
LABEL_13:
    uint64_t v76 = v12;
    sub_216981010(&v77, &v67);
    sub_21698105C(&v78, (_DWORD *)&v67 + 1);
    long long v79 = v68;
    uint64_t v80 = v69;
    long long v71 = v62;
    sub_216981010(&v72, &v63);
    sub_21698105C(&v73, (_DWORD *)&v63 + 1);
    long long v74 = v64;
    uint64_t v75 = v65;
    long long v86 = v76;
    sub_216981010(&v87, &v77);
    sub_21698105C(&v88, &v78);
    long long v89 = v79;
    uint64_t v90 = v80;
    unint64_t v81 = v71;
    sub_216981010(&v82, &v72);
    sub_21698105C(&v83, &v73);
    long long v84 = v74;
    uint64_t v85 = v75;
    v100[0] = &unk_26C768A30;
    uint64_t v96 = (tbb::task_group_context *)&v102;
    float v14 = (tbb::internal::allocate_child_proxy *)tbb::internal::allocate_root_with_context_proxy::allocate(&v96, 8uLL);
    *((unsigned char *)v14 - 11) = 1;
    *(void *)float v14 = &unk_26C746C48;
    uint64_t v101 = v14;
    v100[1] = &v70;
    uint64_t v15 = tbb::internal::allocate_child_proxy::allocate(v14, 0x60uLL);
    uint64_t v96 = v86;
    sub_216981010(&v97, &v87);
    sub_21698105C((_DWORD *)&v97 + 1, &v88);
    long long v98 = v89;
    uint64_t v99 = v90;
    char v91 = v81;
    sub_216981010(&v92, &v82);
    sub_21698105C(&v93, &v83);
    long long v94 = v84;
    uint64_t v95 = v85;
    *(unsigned char *)(v15 - 11) = 1;
    *(void *)uint64_t v15 = &unk_26C768AE8;
    *(void *)(v15 + 8) = v96;
    sub_216981010((_DWORD *)(v15 + 16), &v97);
    sub_21698105C((_DWORD *)(v15 + 20), (_DWORD *)&v97 + 1);
    uint64_t v16 = v99;
    *(_OWORD *)(v15 + 24) = v98;
    atomic_ullong v17 = v91;
    *(void *)(v15 + 4sub_2168EBBB8((void ***)&a9, 0) = v16;
    *(void *)(v15 + 48) = v17;
    sub_216981010((_DWORD *)(v15 + 56), &v92);
    sub_21698105C((_DWORD *)(v15 + 60), &v93);
    *(_OWORD *)(v15 + 64) = v94;
    *(void *)(v15 + 8sub_2168EBBB8((void ***)&a9, 0) = v95;
    *(void *)(v15 + 88) = v100;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v93);
    sub_21697C414(&v92);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v97 + 1);
    sub_21697C414(&v97);
    unint64_t v18 = v101;
    *((void *)v101 - 3) = 2;
    (*(void (**)(void, tbb::internal::allocate_child_proxy *, uint64_t))(**((void **)v18 - 5) + 8))(*((void *)v18 - 5), v18, v15);
    sub_216D5D1D0((uint64_t)v100, v19);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v83);
    sub_21697C414(&v82);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v88);
    unint64_t v13 = v2;
    sub_21697C414(&v87);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v73);
    sub_21697C414(&v72);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v78);
    sub_21697C414(&v77);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v63 + 1);
  sub_21697C414(&v63);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v67 + 1);
  sub_21697C414(&v67);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
  sub_21697C414(&v53);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
  sub_21697C414(&v58);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
  sub_21697C414(&v43);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
  sub_21697C414(&v48);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&v102);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_21697C414(&v23);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_21697C414(&v28);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
  sub_21697C414(&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v34);
  return sub_21697C414(&v33);
}

void sub_216D5B884(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

void sub_216D5BA60()
{
}

uint64_t sub_216D5BA6C(uint64_t a1)
{
  return a1;
}

_DWORD *sub_216D5BAA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v19 = *(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)(a1 + 8);
  uint64_t v6 = v19;
  sub_216981010(&v17, (_DWORD *)(a1 + 16));
  sub_21698105C(&v18, (_DWORD *)(a1 + 20));
  uint64_t v16 = v6;
  sub_216981010(&v14, &v17);
  sub_21698105C(&v15, &v18);
  if (sub_216D5BC28((pxrInternal__aapl__pxrReserved__::UsdStage ***)&v19, &v17, 0, a2))
  {
    while (sub_216D5BD54(&v16, &v14, 0, a2))
      ;
  }
  sub_216D5C068((uint64_t)v11, &v19, &v17, (long long *)a2);
  sub_216D5C068((uint64_t)&v8, &v16, &v14, (long long *)a2);
  sub_216D5C184(a3, (uint64_t)v11, (uint64_t)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v10);
  sub_21697C414(&v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_21697C414(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  return sub_21697C414(&v17);
}

void sub_216D5BBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_216D5BA6C((uint64_t)va);
  sub_21697B754((int *)va1);
  sub_21697B754((_DWORD *)(v6 - 64));
  _Unwind_Resume(a1);
}

BOOL sub_216D5BC28(pxrInternal__aapl__pxrReserved__::UsdStage ***a1, int *a2, pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***a3, uint64_t *a4)
{
  BOOL v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
  if (*((unsigned char *)*a1 + 57))
  {
    int v9 = *(pxrInternal__aapl__pxrReserved__::UsdStage ***)(pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrototype(*a1)
                                                         + 32);
    if (v9) {
      goto LABEL_6;
    }
    return 0;
  }
  int v9 = (pxrInternal__aapl__pxrReserved__::UsdStage **)(*a1)[4];
  if (!v9) {
    return 0;
  }
  if (!v8)
  {
    int v10 = 0;
    goto LABEL_10;
  }
LABEL_6:
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2)) {
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)a2;
  }
  else {
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*a1 + 2);
  }
  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 2));
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v11, NameToken, &v14);
  sub_21697DE94(a2, &v14);
  sub_21697DEEC(a2 + 1, &v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  int v10 = 1;
LABEL_10:
  *a1 = v9;
  return sub_216D3BA0C(a4, (uint64_t)a1, v10)
      || !sub_216D5BD54((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)a1, a2, a3, a4);
}

BOOL sub_216D5BD54(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****a1, int *a2, pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***a3, uint64_t *a4)
{
  BOOL v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
  unint64_t v9 = (unint64_t)(*a1)[5];
  if ((v9 & 7) != 0) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)v10;
  if (v10) {
    BOOL v11 = v10 == (void)a3;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    int v12 = v8;
    do
    {
      BOOL v13 = sub_216D3BA0C(a4, (uint64_t)&v31, v12);
      unint64_t v10 = (unint64_t)v31;
      if (v13) {
        break;
      }
      *a1 = v31;
      uint64_t v14 = *(void *)(v10 + 40);
      unint64_t v10 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v31 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)v10;
    }
    while (v10 && v10 != (void)a3);
  }
  if (!v10)
  {
    unint64_t v16 = (unint64_t)(*a1)[5];
    if ((v16 & 7) != 0) {
      unint64_t v10 = v16 & 0xFFFFFFFFFFFFFFF8;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)v10;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    if (*a1 == a3)
    {
LABEL_30:
      v27[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v27 + 1);
      sub_21697DE94(a2, (int *)v27);
      sub_21697DEEC(a2 + 1, (int *)v27 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
      uint64_t v19 = (int *)v27;
LABEL_32:
      sub_21697C414(v19);
      goto LABEL_33;
    }
    if (*a1 == v31)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v29);
      NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(*a1 + 2));
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, NameToken, v27);
      sub_21697DE94(a2, (int *)v27);
      sub_21697DEEC(a2 + 1, (int *)v27 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
      sub_21697C414(v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
      uint64_t v19 = &v29;
      goto LABEL_32;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, v27);
    sub_21697DE94(a2, (int *)v27);
    sub_21697DEEC(a2 + 1, (int *)v27 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
    sub_21697C414(v27);
    int v17 = *a1;
    if (!*a1
      || (*((unsigned char *)v17 + 57) & 0x10) == 0
      || !pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v17 + 2)))
    {
      goto LABEL_33;
    }
    PrimDataAtPathOrInPrototype = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(*a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    *a1 = PrimDataAtPathOrInPrototype;
    if (PrimDataAtPathOrInPrototype)
    {
LABEL_29:
      if (PrimDataAtPathOrInPrototype[2] != *(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ***)a2) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
    v27[0] = "usd/primData.h";
    v27[1] = "Usd_MoveToNextSiblingOrParent";
    void v27[2] = 576;
    void v27[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent(PrimDataPtr &, SdfPath &, PrimDataPtr,"
             " const Usd_PrimFlagsPredicate &) [PrimDataPtr = const pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
    char v28 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    uint64_t v26 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v24, v25, Text);
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v27, "p", v26))
    {
      PrimDataAtPathOrInPrototype = *a1;
      goto LABEL_29;
    }
  }
LABEL_33:
  if (v31) {
    BOOL v21 = 1;
  }
  else {
    BOOL v21 = *a1 == 0;
  }
  return !v21;
}

void sub_216D5C04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D5C068(uint64_t a1, void *a2, _DWORD *a3, long long *a4)
{
  *(void *)a1 = *a2;
  unint64_t v7 = (int *)(a1 + 8);
  sub_216981010((_DWORD *)(a1 + 8), a3);
  sub_21698105C((_DWORD *)(a1 + 12), a3 + 1);
  long long v8 = *a4;
  *(void *)(a1 + sub_216D56FD4((uint64_t)this + 32) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v8;
  if (*(void *)a1
    && !sub_216D3B924((uint64_t *)(a1 + 16), a1, v7)
    && sub_216D5BD54((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)a1, v7, 0, (uint64_t *)(a1 + 16)))
  {
    *(void *)a1 = 0;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v10 + 1);
    sub_21697DE94(v7, (int *)&v10);
    sub_21697DEEC((int *)(a1 + 12), (int *)&v10 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_21697C414(&v10);
  }
  return a1;
}

void sub_216D5C170(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216D5C184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  sub_216981010((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  sub_21698105C((_DWORD *)(a1 + 12), (_DWORD *)(a2 + 12));
  long long v6 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + sub_216D56FD4((uint64_t)this + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 4sub_2168EBBB8((void ***)&a9, 0) = *(void *)a3;
  sub_216981010((_DWORD *)(a1 + 48), (_DWORD *)(a3 + 8));
  sub_21698105C((_DWORD *)(a1 + 52), (_DWORD *)(a3 + 12));
  long long v7 = *(_OWORD *)(a3 + 16);
  *(void *)(a1 + 72) = *(void *)(a3 + 32);
  *(_OWORD *)(a1 + 56) = v7;
  return a1;
}

uint64_t sub_216D5C210(void **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  int v39 = (void *)**a1;
  long long v57 = 0u;
  long long v58 = 0u;
  int v59 = 1065353216;
  uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_216D240F8((uint64_t)a2, a2);
  pxrInternal__aapl__pxrReserved__::Usd_Resolver::Usd_Resolver((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v52, v2, 1);
  while ((void)v53 != v54 || *((void *)&v53 + 1) != v55)
  {
    uint64_t v4 = v56;
    long long v42 = v53;
    Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetPath((pxrInternal__aapl__pxrReserved__::PcpNodeRef *)&v42);
    int v49 = 0;
    long long v50 = 0;
    uint64_t v51 = 0;
    long long v6 = (void *)sub_216AA5ECC(v4);
    long long v7 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v7) {
      long long v7 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    *((void *)&v42 + 1) = &v49;
    uint64_t v43 = (uint64_t)&stru_26C74C2D0;
    LOWORD(v44) = 0;
    *(void *)&long long v42 = &unk_26C759208;
    char HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v6, Path, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v7 + 40), (uint64_t (***)(void, uint64_t))&v42);
    if ((_BYTE)v44) {
      char v9 = 0;
    }
    else {
      char v9 = HasField;
    }
    if (v9)
    {
      uint64_t v10 = v49;
      if (v49 != v50)
      {
        long long v40 = v50;
        while (1)
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(Path, v10, &v47);
          BOOL v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v4);
          Specuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v47);
          uint64_t v46 = 0;
          if (SpecType == 8) {
            break;
          }
          if (SpecType == 1)
          {
            BOOL v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v13) {
              BOOL v13 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            uint64_t v14 = (void *)((char *)v13 + 56);
            goto LABEL_22;
          }
          *(void *)&long long v42 = "usd/namespaceEditor.cpp";
          *((void *)&v42 + 1) = "_VisitPrim";
          uint64_t v43 = 186;
          int v44 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_TargetingPropertyDependencyCollector::_Vi"
                "sitPrim(const UsdPrim &)";
          char v45 = 0;
          unint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_216AA5ECC(v4);
          uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v16);
          int v18 = *(char *)(Identifier + 23);
          uint64_t v19 = *(const char **)Identifier;
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v47);
          if (v18 >= 0) {
            BOOL v21 = (const char *)Identifier;
          }
          else {
            BOOL v21 = v19;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Spec type for property child of at site @%s@<%s> is not an attribute or relationship", v21, Text);
          if ((v46 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v48);
          sub_21697C414(&v47);
          uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v10 + 8);
          if (v10 == v40) {
            goto LABEL_29;
          }
        }
        int v15 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v15) {
          int v15 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        uint64_t v14 = (void *)((char *)v15 + 424);
LABEL_22:
        sub_2168D2318(&v46, v14);
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
      }
    }
LABEL_29:
    *(void *)&long long v42 = &v49;
    sub_216889A04((void ***)&v42);
    pxrInternal__aapl__pxrReserved__::Usd_Resolver::NextLayer((pxrInternal__aapl__pxrReserved__::Usd_Resolver *)v52);
  }
  if (*((void *)&v58 + 1))
  {
    for (uint64_t i = (int *)v58; i; uint64_t i = *(int **)i)
    {
      sub_2169C487C(i + 6, i + 4);
      sub_2169C48D4(i + 7, i + 5);
      int v23 = v39;
      uint64_t v24 = v39[48];
      unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(v24 + 128), 1uLL);
      unsigned int v26 = (3 * (_BYTE)add) & 7;
      unint64_t v27 = add & 0xFFFFFFFFFFFFFFF8;
      uint64_t v28 = (*(void *)(v23[48] + 256) - 1) & (add >> 3);
      uint64_t v41 = v24 + 40 * ((3 * (_BYTE)add) & 7) + 384;
      if (v28)
      {
        int v29 = 0;
      }
      else
      {
        int v29 = (void *)(*(uint64_t (**)(void *))(v39[47] + 16))(v39 + 47);
        *int v29 = 0;
        v29[1] = 0;
      }
      int v30 = (atomic_ullong *)(v24 + 40 * v26 + 408);
      atomic_ullong v31 = *v30;
      __dmb(0xBu);
      if (v31 != v27)
      {
        uint64_t v35 = v39[48];
        sched_yield();
        while (1)
        {
          atomic_ullong v36 = *v30;
          __dmb(0xBu);
          if (v36 == v27) {
            break;
          }
          if (v36)
          {
            atomic_fetch_add((atomic_ullong *volatile)(v35 + 272), 1uLL);
            tbb::internal::throw_exception_v4(2);
          }
          sched_yield();
        }
      }
      if (v29)
      {
        sub_21685036C((uint64_t)&v42, v24 + 40 * v26 + 416);
        uint64_t v32 = v24 + 40 * v26;
        int v33 = *(void **)(v32 + 400);
        __dmb(0xBu);
        if ((unint64_t)v33 < 2)
        {
          __dmb(0xBu);
          int v33 = (void *)v41;
        }
        void *v33 = v29;
        __dmb(0xBu);
        *(void *)(v32 + 40sub_2168EBBB8((void ***)&a9, 0) = v29;
        int v34 = (unsigned char *)v42;
        if ((void)v42)
        {
          __dmb(0xBu);
          *int v34 = 0;
        }
      }
      else
      {
        int v29 = *(void **)(v24 + 40 * v26 + 400);
        __dmb(0xBu);
      }
      sub_216D5E0A8((uint64_t)&v29[7 * v28 + 2], (uint64_t)(i + 6));
      v29[1] |= 1 << v28;
      atomic_fetch_add(v30, 8uLL);
    }
    if (!atomic_fetch_add(v39 + 46, 1uLL))
    {
      uint64_t v37 = v39[45];
      if (!v37) {
        sub_21683A7CC();
      }
      (*(void (**)(uint64_t))(*(void *)v37 + 48))(v37);
    }
  }
  return sub_216D5DF44((uint64_t)&v57);
}

void sub_216D5CF38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __cxa_begin_catch(a1);
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(a11 + 384) + 272), 1uLL);
  sub_2168DAD98(v12, v11);
}

void sub_216D5CF60()
{
}

void sub_216D5CF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_DWORD *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,_DWORD *a28,int a29,uint64_t a30,int a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  sub_216D5DFA4(v37 - 112);
  sub_216981EE8(a22, a36);
  sub_216D5AFBC(v36);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a28);
  sub_21697C414(&a31);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a21);
  sub_21697C414(&a29);
  JUMPOUT(0x216D5D0A4);
}

void sub_216D5D078()
{
}

void sub_216D5D098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58)
{
  if ((a57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v58);
  sub_21697C414(&a58);
  a29 = (void **)(v59 - 256);
  sub_216889A04(&a29);
  sub_216D5DF44(v59 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_216D5D158(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_216D3BA90((void *)a1, 0, a1, 0xFu, (void *)a2);
  if (result)
  {
    uint64_t result = sub_216D3BA90((void *)(a1 + 8), 0, a1 + 8, 0xFu, (void *)(a2 + 8));
    if (result) {
      return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
    }
  }
  return result;
}

uint64_t sub_216D5D1D0(uint64_t a1, tbb::task *a2)
{
  *(void *)a1 = &unk_26C768A30;
  tbb::interface5::internal::task_base::destroy(*(tbb::interface5::internal::task_base **)(a1 + 16), a2);
  return a1;
}

void sub_216D5D21C(uint64_t a1, tbb::task *a2)
{
  uint64_t v2 = (void *)sub_216D5D1D0(a1, a2);

  operator delete(v2);
}

uint64_t sub_216D5D244(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  v10[0] = 0;
  v10[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x30uLL);
  uint64_t v6 = v5;
  *(unsigned char *)(v5 - 11) = 1;
  *(void *)uint64_t v5 = &unk_26C768AA0;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(v5 + 16) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 48), 1uLL, memory_order_relaxed);
  }
  sub_216981010((_DWORD *)(v5 + 24), (_DWORD *)(a2 + 16));
  sub_21698105C((_DWORD *)(v6 + 28), (_DWORD *)(a2 + 20));
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(v6 + sub_216D56FD4((uint64_t)this + 32) = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(v6 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 4sub_2168EBBB8((void ***)&a9, 0) = a1;
  return (***(uint64_t (****)(void, uint64_t, uint64_t))(v6 - 40))(*(void *)(v6 - 40), v6, v6 - 8);
}

uint64_t sub_216D5D34C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  v7[0] = 0;
  v7[1] = v4;
  uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x30uLL);
  *(unsigned char *)(v5 - 11) = 1;
  *(void *)uint64_t v5 = &unk_26C768AA0;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)a2;
  *(void *)(v5 + 16) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  sub_21697D878((_DWORD *)(v5 + 24), (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)(v5 + 28), (_DWORD *)(a2 + 20));
  *(void *)(v5 + sub_216D56FD4((uint64_t)this + 32) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(v5 + 4sub_2168EBBB8((void ***)&a9, 0) = a1;
  return (***(uint64_t (****)(void))(v5 - 40))();
}

uint64_t sub_216D5D43C(uint64_t a1)
{
  *(void *)a1 = &unk_26C768AA0;
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(atomic_ullong **)(a1 + 16);
  if (v3) {
    sub_216D16E0C(v3);
  }
  return a1;
}

void sub_216D5D4B4(void *a1)
{
  *(void *)a1 = &unk_26C768AA0;
  uint64_t v2 = *((void *)a1 + 4);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 7);
  sub_21697C414((_DWORD *)a1 + 6);
  uint64_t v3 = (atomic_ullong *)*((void *)a1 + 2);
  if (v3) {
    sub_216D16E0C(v3);
  }

  operator delete(a1);
}

uint64_t sub_216D5D53C(uint64_t a1)
{
  return 0;
}

void sub_216D5D568(void **a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = (atomic_ullong *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  int v6 = a2[4];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a2 + 4);
  int v7 = a2[5];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a2 + 5);
  uint64_t v8 = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  sub_216D5C210(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216D5D634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, atomic_ullong *a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_21697C414(v12);
  if (a10) {
    sub_216D16E0C(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216D5D680(uint64_t a1)
{
  *(void *)a1 = &unk_26C768AE8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
  sub_21697C414((_DWORD *)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  return a1;
}

void sub_216D5D6E4(_DWORD *a1)
{
  *(void *)a1 = &unk_26C768AE8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 15);
  sub_21697C414(a1 + 14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_21697C414(a1 + 4);

  operator delete(a1);
}

uint64_t sub_216D5D758(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v15 = *(void *)(a1 + 8);
  sub_216981010(&v16, (_DWORD *)(a1 + 16));
  sub_21698105C(&v17, (_DWORD *)(v2 + 12));
  uint64_t v3 = 0;
  long long v18 = *(_OWORD *)(v2 + 16);
  uint64_t v19 = *(void *)(v2 + 32);
  while (*(void *)(a1 + 8) != *(void *)(a1 + 48)
       || *(void *)(a1 + 16) != *(void *)(a1 + 56)
       || (sub_216D5D158(v2 + 16, v2 + 56) & 1) == 0)
  {
    sub_216D5D974(v2);
    if (++v3 == 4)
    {
      if (*(void *)(a1 + 8) != *(void *)(a1 + 48)
        || *(void *)(a1 + 16) != *(void *)(a1 + 56)
        || (sub_216D5D158(v2 + 16, v2 + 56) & 1) == 0)
      {
        *(unsigned char *)(a1 - 12) = 1;
      }
      uint64_t v3 = 4;
      goto LABEL_11;
    }
  }
  if (v3)
  {
LABEL_11:
    uint64_t v4 = *(void *)(*(void *)(a1 + 88) + 16);
    v14[0] = 0;
    v14[1] = v4;
    uint64_t v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v14, 0x40uLL);
    uint64_t v9 = v15;
    sub_216981010(&v10, &v16);
    sub_21698105C(&v11, &v17);
    uint64_t v13 = v19;
    long long v12 = v18;
    uint64_t v6 = *(void *)(a1 + 88);
    *(unsigned char *)(v5 - 11) = 1;
    *(void *)uint64_t v5 = &unk_26C768B30;
    *(void *)(v5 + 8) = v6;
    *(void *)(v5 + 16) = v9;
    sub_216981010((_DWORD *)(v5 + 24), &v10);
    sub_21698105C((_DWORD *)(v5 + 28), &v11);
    uint64_t v7 = v13;
    *(_OWORD *)(v5 + sub_216D56FD4((uint64_t)this + 32) = v12;
    *(void *)(v5 + 48) = v7;
    *(void *)(v5 + 56) = v3;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_21697C414(&v10);
    goto LABEL_12;
  }
  uint64_t v5 = 0;
LABEL_12:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  return v5;
}

void sub_216D5D950(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

BOOL sub_216D5D974(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 8);
  uint64_t v3 = (uint64_t *)(a1 + 16);
  BOOL result = sub_216D5BC28((pxrInternal__aapl__pxrReserved__::UsdStage ***)a1, (int *)(a1 + 8), 0, (uint64_t *)(a1 + 16));
  if (!result)
  {
    do
      BOOL result = sub_216D5BD54((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache ****)a1, v2, 0, v3);
    while (result);
  }
  return result;
}

uint64_t sub_216D5D9D0(uint64_t a1)
{
  *(void *)a1 = &unk_26C768B30;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  return a1;
}

void sub_216D5DA20(_DWORD *a1)
{
  *(void *)a1 = &unk_26C768B30;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 7);
  sub_21697C414(a1 + 6);

  operator delete(a1);
}

uint64_t sub_216D5DA80(tbb::internal::allocate_child_proxy *this)
{
  uint64_t v2 = (char *)this + 16;
  uint64_t v13 = 0;
  uint64_t v3 = (_DWORD *)((char *)this + 24);
  uint64_t v4 = (_DWORD *)((char *)this + 28);
  uint64_t v5 = (char *)this + 32;
  uint64_t v6 = &v13;
  uint64_t v7 = 0x200000000;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v14 = v6;
    uint64_t v9 = tbb::internal::allocate_child_proxy::allocate(this, 0x38uLL);
    uint64_t v10 = *((void *)this + 1);
    *(unsigned char *)(v9 - 11) = 1;
    *(void *)uint64_t v9 = &unk_26C768B78;
    *(void *)(v9 + 8) = *((void *)this + 2);
    sub_216981010((_DWORD *)(v9 + 16), v3);
    sub_21698105C((_DWORD *)(v9 + 20), v4);
    uint64_t v11 = *((void *)v5 + 2);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)v5;
    *(void *)(v9 + 4sub_2168EBBB8((void ***)&a9, 0) = v11;
    *(void *)(v9 + 48) = v10;
    sub_216D5D974((uint64_t)v2);
    if (i == *((void *)this + 7)) {
      break;
    }
    *(void *)(v9 - 8) = 0;
    uint64_t v6 = (uint64_t *)(v9 - 8);
    *uint64_t v14 = v9;
    v7 += 0x100000000;
  }
  *((void *)this - 3) = v7 >> 32;
  if (v13)
  {
    (***(void (****)(void, uint64_t, uint64_t *))(v13 - 40))(*(void *)(v13 - 40), v13, v14);
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
  }
  (*(void (**)(void, tbb::internal::allocate_child_proxy *, uint64_t))(**((void **)this - 5) + 8))(*((void *)this - 5), this, v9);
  return 0;
}

uint64_t sub_216D5DC00(uint64_t a1)
{
  *(void *)a1 = &unk_26C768B78;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  return a1;
}

void sub_216D5DC50(_DWORD *a1)
{
  *(void *)a1 = &unk_26C768B78;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_21697C414(a1 + 4);

  operator delete(a1);
}

uint64_t sub_216D5DCB0(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 48) + 8);
  sub_216D5DD48(a1 + 8, (uint64_t)&v3);
  sub_216D5D568(v1, &v3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_21697C414(&v5);
  if (v4) {
    sub_216D16E0C(v4);
  }
  return 0;
}

void sub_216D5DD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216D5DD48(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(atomic_ullong **)a1;
  int v5 = v4;
  if (v4) {
    atomic_fetch_add_explicit(v4 + 6, 1uLL, memory_order_relaxed);
  }
  sub_216D16CFC(a2, (uint64_t *)&v5, (_DWORD *)(a1 + 8));
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_216D5DDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *a10)
{
  if (a10) {
    sub_216D16E0C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216D5DDBC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(void, uint64_t))
{
  if (a4)
  {
    v6[1] = a4;
    double v6[2] = (uint64_t (**)(void, uint64_t))&stru_26C754E48;
    __int16 v7 = 0;
    v6[0] = (uint64_t (**)(void, uint64_t))&unk_26C7581F0;
    LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v6);
    if ((_BYTE)v7) {
      return 0;
    }
    else {
      return result;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  }
}

void *sub_216D5DE30(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::PcpNodeRef::IsRootNode(*(pxrInternal__aapl__pxrReserved__::PcpNodeRef **)a1);
  if ((result & 1) != 0
    || (int v5 = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(*(pxrInternal__aapl__pxrReserved__::PcpNodeRef **)a1),
        uint64_t v8 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(v5, v6, v7), result = (void *)pxrInternal__aapl__pxrReserved__::PcpMapFunction::IsIdentity(v8), result))
  {
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    if (*a2 != v10)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      long long v12 = (uint64_t **)(v11 + 32);
      uint64_t v13 = (void *)(v11 + 40);
      do
      {
        uint64_t result = sub_2169814FC(v12, v13, v9, v9);
        uint64_t v9 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
      }
      while (v9 != v10);
    }
  }
  else
  {
    uint64_t v14 = *a2;
    uint64_t v15 = a2[1];
    if (*a2 != v15)
    {
      do
      {
        MapToRoot = (pxrInternal__aapl__pxrReserved__::PcpMapExpression::_Node **)pxrInternal__aapl__pxrReserved__::PcpNodeRef::GetMapToRoot(*(pxrInternal__aapl__pxrReserved__::PcpNodeRef **)a1);
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::PcpMapFunction *)pxrInternal__aapl__pxrReserved__::PcpMapExpression::Evaluate(MapToRoot, v17, v18);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::MapSourceToTarget(v19, v14, &v20);
        if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v20)) {
          sub_216D3B53C((uint64_t **)(*(void *)(a1 + 8) + 32), (pxrInternal__aapl__pxrReserved__::SdfPath *)&v20, &v20);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
        uint64_t result = sub_21697C414(&v20);
        uint64_t v14 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v14 + 8);
      }
      while (v14 != v15);
    }
  }
  return result;
}

void sub_216D5DF28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216D5DF44(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      sub_216D5DFEC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_216D5DFA4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216D5DFEC((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

_DWORD *sub_216D5DFEC(uint64_t a1)
{
  sub_216981EE8(a1 + 40, *(void **)(a1 + 48));
  sub_216D5AFBC((atomic_uint *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

__n128 sub_216D5E054(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  sub_21697D878((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_21697D8B4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  __n128 result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a1 + sub_216D56FD4((uint64_t)this + 32) = result;
  return result;
}

_DWORD *sub_216D5E0A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21697D878((_DWORD *)a1, (_DWORD *)a2);
  __n128 result = sub_21697D8B4(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + sub_216D56FD4((uint64_t)this + 32) = *(void *)(a2 + 32);
  int v6 = (void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 4sub_2168EBBB8((void ***)&a9, 0) = v7;
  uint64_t v8 = a1 + 40;
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *(void *)(a2 + sub_216D56FD4((uint64_t)this + 32) = v6;
    *int v6 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    *(void *)(a1 + sub_216D56FD4((uint64_t)this + 32) = v8;
  }
  return result;
}

uint64_t sub_216D5E134(uint64_t a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216D5E268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216D5E27C(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    char v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 168;
        sub_216D59ECC((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      char v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_216D5E2EC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)(a2 + 24));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8sub_2168EBBB8((void ***)&a9, 0) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  sub_21697D878((_DWORD *)(a1 + 120), (_DWORD *)(a2 + 120));
  sub_21697D8B4((_DWORD *)(a1 + 124), (_DWORD *)(a2 + 124));
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  return a1;
}

void sub_216D5E3C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_216D5E3E8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26C768BC0;
  result[1] = v3;
  return result;
}

uint64_t sub_216D5E430(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C768BC0;
  a2[1] = v2;
  return result;
}

uint64_t sub_216D5E45C@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this)
     || (v7[0] = (uint64_t)"usd/namespaceEditor.cpp",
         v7[1] = (uint64_t)"operator()",
         void v7[2] = 1095,
         uint64_t v7[3] = (uint64_t)"auto pxrInternal__aapl__pxrReserved__::UsdNamespaceEditor::_EditProcessor::_GatherTargetListOp"
                          "Edits(const UsdStageRefPtr &, const _EditDescription &, _ProcessedEdit *)::(anonymous class)::"
                          "operator()(const SdfPath &) const",
         char v8 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "path.IsAbsolutePath()", 0) & 1) != 0))
    && pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(this, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8)))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(*(void *)(a2 + 8) + 8));
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v7, this, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)(a2 + 8) + 8), 1);
      sub_21697D878((_DWORD *)a3, v7);
      sub_21697D8B4((_DWORD *)(a3 + 4), (_DWORD *)v7 + 1);
      *(unsigned char *)(a3 + 8) = 1;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v7 + 1);
      return (uint64_t)sub_21697C414(v7);
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 8) = 0;
    }
  }
  else
  {
    sub_216981010((_DWORD *)a3, this);
    uint64_t result = (uint64_t)sub_21698105C((_DWORD *)(a3 + 4), (_DWORD *)this + 1);
    *(unsigned char *)(a3 + 8) = 1;
  }
  return result;
}

uint64_t sub_216D5E588(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C768C20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216D5E5C8()
{
  return &unk_26C768C20;
}

uint64_t sub_216D5E5D4(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186) {
    sub_21677CB10();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v6 = 0x186186186186186;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_216D5E860((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[168 * v3];
  uint64_t v13 = &v7[168 * v6];
  sub_216D5E6FC((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  long long v12 = v11 + 168;
  sub_216D5E7E8(a1, &v10);
  uint64_t v8 = a1[1];
  sub_216D5EA9C(&v10);
  return v8;
}

void sub_216D5E6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D5EA9C((void **)va);
  _Unwind_Resume(a1);
}