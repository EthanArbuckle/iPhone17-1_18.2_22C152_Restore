void *sub_216AFBFC0(void *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char a3, uint64_t a4)
{
  void *v4;
  void *v8;
  void *v9;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  BOOL v15;
  int v17;
  int v18;

  v4 = a1 + 1;
  if (!a1[2]) {
    return a1 + 1;
  }
  v8 = (void *)*v4;
  v9 = a1 + 1;
  if (!*v4) {
    goto LABEL_10;
  }
  v9 = a1 + 1;
  do
  {
    v11 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28), a2);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8;
      v9 = v8;
    }
    v8 = (void *)*v12;
  }
  while (*v12);
  if ((a3 & 1) != 0 || v9 == v4 || (v13 = v9, *(void *)((char *)v9 + 28) != *(void *)a2))
  {
LABEL_10:
    v13 = v4;
    if (v9 != (void *)*a1)
    {
      v14 = (void *)*v9;
      if (*v9)
      {
        do
        {
          v13 = v14;
          v14 = (void *)v14[1];
        }
        while (v14);
      }
      else
      {
        do
        {
          v13 = (void *)v9[2];
          v15 = *v13 == (void)v9;
          v9 = v13;
        }
        while (v15);
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28)))
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), &v17);
        v13 = (void *)sub_216AFBFC0(a1, &v17, 0, a4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
        sub_21697C414(&v17);
      }
    }
  }
  return v13;
}

void sub_216AFC108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfPathFindLongestStrictPrefix(void *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return sub_216AFBFC0(a1, a2, 1, (uint64_t)&v3);
}

int *pxrInternal__aapl__pxrReserved__::SdfPathAncestorsRange::iterator::operator++(int *a1)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1))
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1))
    {
      uint64_t v2 = *(void *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(a1 + 1);
      uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
    }
    else
    {
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1)
        || *(unsigned __int16 *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1)
                               + 12) < 2u)
      {
        uint64_t v2 = 0;
        int Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(0);
LABEL_9:
        int v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(v2);
        sub_21697DE94(a1, &Handle);
        sub_21697DEEC(a1 + 1, &v6);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
        sub_21697C414(&Handle);
        return a1;
      }
      uint64_t v2 = 0;
      uint64_t Ptr = *(void *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
    }
    int Handle = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(Ptr);
    if (Ptr) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(Ptr + 8), 1u, memory_order_relaxed);
    }
    goto LABEL_9;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::distance(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a1);
  return PathElementCount - pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a2);
}

char *pxrInternal__aapl__pxrReserved__::Sdf_PathGetDebuggerPathText(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this)) {
    return "";
  }
  uint64_t Ptr = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(this);
  v4 = (const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)this + 1);

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetDebugText(Ptr, v4, v5);
}

uint64_t *sub_216AFC2F8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755058, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C755058, (char *)8, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216AFC3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216AFC3FC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C756E40, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C756E40, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216AFC4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *sub_216AFC500(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(a2);
  if (a2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed);
  }
  a1[1] = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(a3);
  return a1;
}

uint64_t sub_216AFC55C()
{
  return 1;
}

uint64_t sub_216AFC564(uint64_t a1)
{
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)a1;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(*(pxrInternal__aapl__pxrReserved__::SdfPath **)a1)
    || (IsPrimVariantSelectionPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(v2),
        (IsPrimVariantSelectionPath & 1) != 0)
    || *(void *)v2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(IsPrimVariantSelectionPath))
  {
    char v4 = *(void **)(a1 + 8);
    v5 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    if (!v5) {
      v5 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    }
    if ((*v4 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v5 + 6) & 0xFFFFFFFFFFFFFFF8)) {
      return 0;
    }
    if (sub_216AFC8B8(*(pxrInternal__aapl__pxrReserved__::TfToken **)(a1 + 8))) {
      return 1;
    }
    unint64_t v28 = **(void **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v28)
    {
      v29 = (const char *)(v28 + 16);
      if (*(char *)(v28 + 39) < 0) {
        v29 = *(const char **)v29;
      }
    }
    else
    {
      v29 = "";
    }
    v12 = (uint64_t *)sub_216AFC9B8(*(void ****)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid prim name '%s'", v30, v31, v29);
    unint64_t v15 = v12[1];
    uint64_t v16 = (uint64_t)(v12 + 2);
    unint64_t v32 = v12[2];
    if (v15 >= v32)
    {
      uint64_t v19 = (uint64_t)(v15 - *v12) >> 5;
      unint64_t v33 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 59) {
        sub_21677CB10();
      }
      uint64_t v34 = v32 - *v12;
      if (v34 >> 4 > v33) {
        unint64_t v33 = v34 >> 4;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v22 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v33;
      }
      v38 = v12 + 2;
      if (!v22)
      {
        v23 = 0;
LABEL_28:
        v24 = &v23[32 * v19];
        v37[0] = v23;
        v37[1] = v24;
        v37[3] = &v23[32 * v22];
        *(_DWORD *)v24 = 6;
        long long v25 = *(_OWORD *)__p;
        *((void *)v24 + 3) = v36;
        *(_OWORD *)(v24 + 8) = v25;
        __p[1] = 0;
        uint64_t v36 = 0;
        __p[0] = 0;
        v37[2] = v24 + 32;
        sub_216AFCA5C(v12, v37);
        uint64_t v26 = v12[1];
        sub_2168C3EC4((uint64_t)v37);
        int v27 = SHIBYTE(v36);
        v12[1] = v26;
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        return 0;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v7 = *(void ****)(a1 + 16);
    unint64_t v8 = **(void **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      int v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0) {
        int v9 = *(const char **)v9;
      }
    }
    else
    {
      int v9 = "";
    }
    unint64_t v10 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(v2) & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        v11 = *(const char **)v11;
      }
    }
    else
    {
      v11 = "";
    }
    v12 = (uint64_t *)sub_216AFC9B8(v7);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot append child '%s' to path '%s'.", v13, v14, v9, v11);
    unint64_t v15 = v12[1];
    uint64_t v16 = (uint64_t)(v12 + 2);
    unint64_t v17 = v12[2];
    if (v15 >= v17)
    {
      uint64_t v19 = (uint64_t)(v15 - *v12) >> 5;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 59) {
        sub_21677CB10();
      }
      uint64_t v21 = v17 - *v12;
      if (v21 >> 4 > v20) {
        unint64_t v20 = v21 >> 4;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v22 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v20;
      }
      v38 = v12 + 2;
      if (!v22)
      {
        v23 = 0;
        goto LABEL_28;
      }
LABEL_26:
      v23 = (char *)sub_2168707F4(v16, v22);
      goto LABEL_28;
    }
  }
  *(_DWORD *)unint64_t v15 = 6;
  long long v18 = *(_OWORD *)__p;
  *(void *)(v15 + 24) = v36;
  *(_OWORD *)(v15 + 8) = v18;
  v12[1] = v15 + 32;
  return 0;
}

void sub_216AFC884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216AFC8B8(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (*((char *)EmptyString + 23) < 0)
  {
    char v3 = EmptyString;
    EmptyString = (uint64_t *)*EmptyString;
    uint64_t v2 = v3[1];
    if (!v2) {
      return 0;
    }
  }
  else
  {
    uint64_t v2 = *((unsigned __int8 *)EmptyString + 23);
    if (!*((unsigned char *)EmptyString + 23)) {
      return 0;
    }
  }
  unint64_t v10 = EmptyString;
  unint64_t v11 = (unint64_t)EmptyString + v2;
  LODWORD(v4) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v10);
  if ((v4 - 57344) >= 0xFFFFF800 || v4 >= 0x110000) {
    uint64_t v4 = 65533;
  }
  else {
    uint64_t v4 = v4;
  }
  if (v4 != 95
    && !pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart((pxrInternal__aapl__pxrReserved__ *)v4))
  {
    return 0;
  }
  sub_216AFA7B0((unint64_t *)&v10);
  if ((unint64_t)v10 >= v11) {
    return 1;
  }
  do
  {
    LODWORD(v6) = pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator::_GetCodePoint((pxrInternal__aapl__pxrReserved__::TfUtf8CodePointIterator *)&v10);
    if ((v6 - 57344) >= 0xFFFFF800 || v6 >= 0x110000) {
      uint64_t v6 = 65533;
    }
    else {
      uint64_t v6 = v6;
    }
    uint64_t IsUtf8CodePointXidContinue = pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidContinue((pxrInternal__aapl__pxrReserved__ *)v6);
    if (!IsUtf8CodePointXidContinue) {
      break;
    }
    sub_216AFA7B0((unint64_t *)&v10);
  }
  while ((unint64_t)v10 < v11);
  return IsUtf8CodePointXidContinue;
}

void **sub_216AFC9B8(void ***a1)
{
  result = *a1;
  if (!result)
  {
    char v3 = (void **)operator new(0x18uLL);
    v3[1] = 0;
    v3[2] = 0;
    *char v3 = 0;
    uint64_t v4 = 0;
    sub_216AFCA18(a1, v3);
    sub_216AFCA18(&v4, 0);
    return *a1;
  }
  return result;
}

void sub_216AFCA18(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    char v3 = v2;
    sub_2168C0B1C(&v3);
    operator delete(v2);
  }
}

uint64_t sub_216AFCA5C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216AFCAD4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216AFCAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      int v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v8 - 32) = v9;
      v8 -= 32;
      long long v10 = *(_OWORD *)(a3 + 8);
      *(void *)(v8 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216AFCB78((uint64_t)v13);
  return v11;
}

uint64_t sub_216AFCB78(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168C3E7C(a1);
  }
  return a1;
}

uint64_t sub_216AFCBB0(uint64_t a1)
{
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)a1;
  if ((**(void **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((**(void **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)EmptyString);
  if (result)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(v2)) {
      return 1;
    }
    BOOL IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v2);
    if (IsPrimPath
      || *(void *)v2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsPrimPath))
    {
      return 1;
    }
    else
    {
      uint64_t v6 = *(void ****)(a1 + 16);
      unint64_t v7 = **(void **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v7)
      {
        uint64_t v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0) {
          uint64_t v8 = *(const char **)v8;
        }
      }
      else
      {
        uint64_t v8 = "";
      }
      unint64_t v9 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(v2) & 0xFFFFFFFFFFFFFFF8;
      if (v9)
      {
        long long v10 = (const char *)(v9 + 16);
        if (*(char *)(v9 + 39) < 0) {
          long long v10 = *(const char **)v10;
        }
      }
      else
      {
        long long v10 = "";
      }
      uint64_t v11 = (uint64_t *)sub_216AFC9B8(v6);
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Can only append a property '%s' to a prim path (%s)", v12, v13, v8, v10);
      unint64_t v14 = v11[1];
      unint64_t v15 = v11[2];
      if (v14 >= v15)
      {
        uint64_t v17 = (uint64_t)(v14 - *v11) >> 5;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 59) {
          sub_21677CB10();
        }
        uint64_t v19 = v15 - *v11;
        if (v19 >> 4 > v18) {
          unint64_t v18 = v19 >> 4;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        v28[4] = v11 + 2;
        if (v20) {
          uint64_t v21 = (char *)sub_2168707F4((uint64_t)(v11 + 2), v20);
        }
        else {
          uint64_t v21 = 0;
        }
        unint64_t v22 = &v21[32 * v17];
        v28[0] = v21;
        v28[1] = v22;
        v28[3] = &v21[32 * v20];
        *(_DWORD *)unint64_t v22 = 6;
        long long v23 = *(_OWORD *)__p;
        *((void *)v22 + 3) = v27;
        *(_OWORD *)(v22 + 8) = v23;
        __p[1] = 0;
        uint64_t v27 = 0;
        __p[0] = 0;
        v28[2] = v22 + 32;
        sub_216AFCA5C(v11, v28);
        uint64_t v24 = v11[1];
        sub_2168C3EC4((uint64_t)v28);
        int v25 = SHIBYTE(v27);
        v11[1] = v24;
        if (v25 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v14 = 6;
        long long v16 = *(_OWORD *)__p;
        *(void *)(v14 + 24) = v27;
        *(_OWORD *)(v14 + 8) = v16;
        v11[1] = v14 + 32;
      }
      return 0;
    }
  }
  return result;
}

void sub_216AFCDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_216AFCDD8(uint64_t a1)
{
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)a1;
  char v3 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath(*(pxrInternal__aapl__pxrReserved__::SdfPath **)a1);
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    if (*((char *)v4 + 23) < 0) {
      uint64_t v4 = (uint64_t *)*v4;
    }
    uint64_t v7 = a1 + 16;
    uint64_t v6 = *(uint64_t **)(a1 + 16);
    uint64_t v5 = *(void ****)(v7 + 8);
    if (*((char *)v6 + 23) < 0) {
      uint64_t v6 = (uint64_t *)*v6;
    }
    unint64_t v8 = *pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(v2) & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      unint64_t v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0) {
        unint64_t v9 = *(const char **)v9;
      }
    }
    else
    {
      unint64_t v9 = "";
    }
    long long v10 = (uint64_t *)sub_216AFC9B8(v5);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot append variant selection %s = %s to <%s>; can only append a variant sel"
                                          "ection to a prim or prim variant selection path.",
      v11,
      v12,
      v4,
      v6,
      v9);
    unint64_t v13 = v10[1];
    unint64_t v14 = v10[2];
    if (v13 >= v14)
    {
      uint64_t v16 = (uint64_t)(v13 - *v10) >> 5;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 59) {
        sub_21677CB10();
      }
      uint64_t v18 = v14 - *v10;
      if (v18 >> 4 > v17) {
        unint64_t v17 = v18 >> 4;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      v28[4] = v10 + 2;
      if (v19) {
        unint64_t v20 = (char *)sub_2168707F4((uint64_t)(v10 + 2), v19);
      }
      else {
        unint64_t v20 = 0;
      }
      uint64_t v21 = &v20[32 * v16];
      v28[0] = v20;
      v28[1] = v21;
      v28[3] = &v20[32 * v19];
      *(_DWORD *)uint64_t v21 = 1;
      long long v22 = *(_OWORD *)__p;
      *((void *)v21 + 3) = v27;
      *(_OWORD *)(v21 + 8) = v22;
      __p[1] = 0;
      uint64_t v27 = 0;
      __p[0] = 0;
      v28[2] = v21 + 32;
      sub_216AFCA5C(v10, v28);
      uint64_t v23 = v10[1];
      sub_2168C3EC4((uint64_t)v28);
      int v24 = SHIBYTE(v27);
      v10[1] = v23;
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v13 = 1;
      long long v15 = *(_OWORD *)__p;
      *(void *)(v13 + 24) = v27;
      *(_OWORD *)(v13 + 8) = v15;
      v10[1] = v13 + 32;
    }
  }
  return v3;
}

void sub_216AFCF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216AFCFBC(uint64_t a1)
{
  uint64_t Ptr = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(*(void *)a1 + 4));
  if (Ptr)
  {
    int v3 = Ptr[14];
    if (v3 == 3 || v3 == 6)
    {
      uint64_t v5 = *(void **)(a1 + 8);
      pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)Ptr);
      if (*v5 != qword_267B8EE48) {
        return 1;
      }
      uint64_t v6 = (uint64_t *)sub_216AFC9B8(*(void ****)(a1 + 16));
      sub_216AFD240("Target path cannot be invalid.", &__p);
      unint64_t v7 = v6[1];
      uint64_t v8 = (uint64_t)(v6 + 2);
      unint64_t v9 = v6[2];
      if (v7 < v9) {
        goto LABEL_18;
      }
      uint64_t v10 = (uint64_t)(v7 - *v6) >> 5;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 59) {
        sub_21677CB10();
      }
      uint64_t v12 = v9 - *v6;
      if (v12 >> 4 > v11) {
        unint64_t v11 = v12 >> 4;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      uint64_t v26 = v6 + 2;
      if (v13) {
        goto LABEL_16;
      }
      unint64_t v14 = 0;
      goto LABEL_30;
    }
  }
  uint64_t v6 = (uint64_t *)sub_216AFC9B8(*(void ****)(a1 + 16));
  sub_216AFD240("Can only append a target to a property path.", &__p);
  unint64_t v7 = v6[1];
  uint64_t v8 = (uint64_t)(v6 + 2);
  unint64_t v15 = v6[2];
  if (v7 >= v15)
  {
    uint64_t v10 = (uint64_t)(v7 - *v6) >> 5;
    unint64_t v17 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v18 = v15 - *v6;
    if (v18 >> 4 > v17) {
      unint64_t v17 = v18 >> 4;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v17;
    }
    uint64_t v26 = v6 + 2;
    if (v13)
    {
LABEL_16:
      unint64_t v14 = (char *)sub_2168707F4(v8, v13);
      goto LABEL_30;
    }
    unint64_t v14 = 0;
LABEL_30:
    unint64_t v20 = &v14[32 * v10];
    v25[0] = v14;
    v25[1] = v20;
    v25[3] = &v14[32 * v13];
    *(_DWORD *)unint64_t v20 = 6;
    long long v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v20 + 3) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v20 + 8) = v21;
    memset(&__p, 0, sizeof(__p));
    v25[2] = v20 + 32;
    sub_216AFCA5C(v6, v25);
    uint64_t v22 = v6[1];
    sub_2168C3EC4((uint64_t)v25);
    int v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v6[1] = v22;
    if (v23 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }
LABEL_18:
  *(_DWORD *)unint64_t v7 = 6;
  long long v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(v7 + 24) = *((void *)&__p.__r_.__value_.__l + 2);
  *(_OWORD *)(v7 + 8) = v16;
  v6[1] = v7 + 32;
  return 0;
}

void sub_216AFD20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216AFD240(char *__s@<X0>, std::string *a2@<X8>)
{
  sub_216779094(v7, __s);
  sub_216779094(v5, "%%");
  sub_216779094(__p, "%");
  pxrInternal__aapl__pxrReserved__::TfStringReplace(v7, (unsigned __int8 *)v5, (unsigned __int8 *)__p, a2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_216AFD2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216AFD324(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t v2 = *(void *)a1;
  if ((**((void **)a1 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((**((void **)a1 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)EmptyString))
  {
    uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v2 + 4));
    if (Ptr && *(unsigned char *)(Ptr + 14) == 4) {
      return 1;
    }
    char v6 = (uint64_t *)sub_216AFC9B8(*((void ****)a1 + 2));
    sub_216AFD240("Can only append a relational attribute to a target path.", &__p);
    unint64_t v7 = v6[1];
    uint64_t v8 = (uint64_t)(v6 + 2);
    unint64_t v14 = v6[2];
    if (v7 < v14) {
      goto LABEL_18;
    }
    uint64_t v10 = (uint64_t)(v7 - *v6) >> 5;
    unint64_t v16 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v17 = v14 - *v6;
    if (v17 >> 4 > v16) {
      unint64_t v16 = v17 >> 4;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v16;
    }
    int v25 = v6 + 2;
    if (v13) {
      goto LABEL_26;
    }
    uint64_t v18 = 0;
    goto LABEL_29;
  }
  char v6 = (uint64_t *)sub_216AFC9B8(*((void ****)a1 + 2));
  sub_216AFD240("Invalid property name.", &__p);
  unint64_t v7 = v6[1];
  uint64_t v8 = (uint64_t)(v6 + 2);
  unint64_t v9 = v6[2];
  if (v7 >= v9)
  {
    uint64_t v10 = (uint64_t)(v7 - *v6) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v12 = v9 - *v6;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    int v25 = v6 + 2;
    if (v13)
    {
LABEL_26:
      uint64_t v18 = (char *)sub_2168707F4(v8, v13);
      goto LABEL_29;
    }
    uint64_t v18 = 0;
LABEL_29:
    unint64_t v19 = &v18[32 * v10];
    v24[0] = v18;
    v24[1] = v19;
    v24[3] = &v18[32 * v13];
    *(_DWORD *)unint64_t v19 = 6;
    long long v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v19 + 3) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v19 + 8) = v20;
    memset(&__p, 0, sizeof(__p));
    v24[2] = v19 + 32;
    sub_216AFCA5C(v6, v24);
    uint64_t v21 = v6[1];
    sub_2168C3EC4((uint64_t)v24);
    int v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v6[1] = v21;
    if (v22 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }
LABEL_18:
  *(_DWORD *)unint64_t v7 = 6;
  long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(v7 + 24) = *((void *)&__p.__r_.__value_.__l + 2);
  *(_OWORD *)(v7 + 8) = v15;
  v6[1] = v7 + 32;
  return 0;
}

void sub_216AFD574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216AFD5A8(pxrInternal__aapl__pxrReserved__::SdfPath **a1)
{
  uint64_t v2 = *a1;
  uint64_t Ptr = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)*a1 + 1);
  if (!Ptr || ((int v4 = Ptr[14], v4 != 3) ? (v5 = v4 == 6) : (v5 = 1), !v5))
  {
    uint64_t v17 = a1[1];
    uint64_t v18 = (void ***)a1[2];
    unint64_t v19 = v51;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(v17, (uint64_t)v51);
    if (v52 < 0) {
      unint64_t v19 = (void **)v51[0];
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(v2, (uint64_t)v49);
    int v20 = v50;
    uint64_t v21 = (void **)v49[0];
    int v24 = (uint64_t *)sub_216AFC9B8(v18);
    int v25 = v49;
    if (v20 < 0) {
      int v25 = v21;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannnot append mapper '%s' to non-property path <%s>.", v22, v23, v19, v25);
    unint64_t v26 = v24[2];
    unint64_t v27 = v24[1];
    if (v27 >= v26)
    {
      uint64_t v29 = (uint64_t)(v27 - *v24) >> 5;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 59) {
        sub_21677CB10();
      }
      uint64_t v31 = v26 - *v24;
      if (v31 >> 4 > v30) {
        unint64_t v30 = v31 >> 4;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v32 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v30;
      }
      v59 = v24 + 2;
      if (v32) {
        unint64_t v33 = (char *)sub_2168707F4((uint64_t)(v24 + 2), v32);
      }
      else {
        unint64_t v33 = 0;
      }
      v35 = &v33[32 * v29];
      v55 = v33;
      v56 = v35;
      v58 = &v33[32 * v32];
      *(_DWORD *)v35 = 6;
      long long v36 = *(_OWORD *)__p;
      *((void *)v35 + 3) = v54;
      *(_OWORD *)(v35 + 8) = v36;
      __p[1] = 0;
      uint64_t v54 = 0;
      __p[0] = 0;
      v57 = v35 + 32;
      sub_216AFCA5C(v24, &v55);
      uint64_t v37 = v24[1];
      sub_2168C3EC4((uint64_t)&v55);
      int v38 = SHIBYTE(v54);
      v24[1] = v37;
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v27 = 6;
      long long v28 = *(_OWORD *)__p;
      *(void *)(v27 + 24) = v54;
      *(_OWORD *)(v27 + 8) = v28;
      v24[1] = v27 + 32;
    }
    if ((v50 & 0x80000000) == 0) {
      goto LABEL_44;
    }
    v39 = v49[0];
    goto LABEL_33;
  }
  char v6 = a1[1];
  pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)Ptr);
  if (*(void *)v6 != qword_267B8EE48) {
    return 1;
  }
  unint64_t v7 = (void ***)a1[2];
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(v2, (uint64_t)v51);
  int v8 = v52;
  unint64_t v9 = (void **)v51[0];
  uint64_t v12 = (uint64_t *)sub_216AFC9B8(v7);
  if (v8 >= 0) {
    unint64_t v13 = v51;
  }
  else {
    unint64_t v13 = v9;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot append an empty mapper target path to <%s>", v10, v11, v13);
  unint64_t v14 = v12[2];
  unint64_t v15 = v12[1];
  if (v15 >= v14)
  {
    uint64_t v40 = (uint64_t)(v15 - *v12) >> 5;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v42 = v14 - *v12;
    if (v42 >> 4 > v41) {
      unint64_t v41 = v42 >> 4;
    }
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v43 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v43 = v41;
    }
    v59 = v12 + 2;
    if (v43) {
      v44 = (char *)sub_2168707F4((uint64_t)(v12 + 2), v43);
    }
    else {
      v44 = 0;
    }
    v45 = &v44[32 * v40];
    v55 = v44;
    v56 = v45;
    v58 = &v44[32 * v43];
    *(_DWORD *)v45 = 6;
    long long v46 = *(_OWORD *)__p;
    *((void *)v45 + 3) = v54;
    *(_OWORD *)(v45 + 8) = v46;
    __p[1] = 0;
    uint64_t v54 = 0;
    __p[0] = 0;
    v57 = v45 + 32;
    sub_216AFCA5C(v12, &v55);
    uint64_t v47 = v12[1];
    sub_2168C3EC4((uint64_t)&v55);
    int v48 = SHIBYTE(v54);
    v12[1] = v47;
    if ((v48 & 0x80000000) == 0) {
      goto LABEL_44;
    }
    v39 = __p[0];
LABEL_33:
    operator delete(v39);
    goto LABEL_44;
  }
  *(_DWORD *)unint64_t v15 = 6;
  long long v16 = *(_OWORD *)__p;
  *(void *)(v15 + 24) = v54;
  *(_OWORD *)(v15 + 8) = v16;
  v12[1] = v15 + 32;
LABEL_44:
  if (v52 < 0) {
    operator delete(v51[0]);
  }
  return 0;
}

void sub_216AFD8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216AFD95C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (sub_216AFC8B8((pxrInternal__aapl__pxrReserved__::TfToken *)a1[1]))
  {
    uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v2 + 4));
    if (Ptr && *(unsigned char *)(Ptr + 14) == 5) {
      return 1;
    }
    BOOL v5 = (uint64_t *)sub_216AFC9B8((void ***)a1[2]);
    sub_216AFD240("Can only append a mapper arg to a mapper path.", &__p);
    unint64_t v6 = v5[1];
    uint64_t v7 = (uint64_t)(v5 + 2);
    unint64_t v13 = v5[2];
    if (v6 < v13) {
      goto LABEL_15;
    }
    uint64_t v9 = (uint64_t)(v6 - *v5) >> 5;
    unint64_t v15 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v16 = v13 - *v5;
    if (v16 >> 4 > v15) {
      unint64_t v15 = v16 >> 4;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v15;
    }
    int v24 = v5 + 2;
    if (v12) {
      goto LABEL_23;
    }
    uint64_t v17 = 0;
    goto LABEL_26;
  }
  BOOL v5 = (uint64_t *)sub_216AFC9B8((void ***)a1[2]);
  sub_216AFD240("Invalid arg name.", &__p);
  unint64_t v6 = v5[1];
  uint64_t v7 = (uint64_t)(v5 + 2);
  unint64_t v8 = v5[2];
  if (v6 >= v8)
  {
    uint64_t v9 = (uint64_t)(v6 - *v5) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v11 = v8 - *v5;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    int v24 = v5 + 2;
    if (v12)
    {
LABEL_23:
      uint64_t v17 = (char *)sub_2168707F4(v7, v12);
      goto LABEL_26;
    }
    uint64_t v17 = 0;
LABEL_26:
    uint64_t v18 = &v17[32 * v9];
    v23[0] = v17;
    v23[1] = v18;
    v23[3] = &v17[32 * v12];
    *(_DWORD *)uint64_t v18 = 6;
    long long v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v18 + 3) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v18 + 8) = v19;
    memset(&__p, 0, sizeof(__p));
    v23[2] = v18 + 32;
    sub_216AFCA5C(v5, v23);
    uint64_t v20 = v5[1];
    sub_2168C3EC4((uint64_t)v23);
    int v21 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v5[1] = v20;
    if (v21 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return 0;
  }
LABEL_15:
  *(_DWORD *)unint64_t v6 = 6;
  long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(v6 + 24) = *((void *)&__p.__r_.__value_.__l + 2);
  *(_OWORD *)(v6 + 8) = v14;
  v5[1] = v6 + 32;
  return 0;
}

void sub_216AFDB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216AFDBC8(void ****a1)
{
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)*a1 + 1);
  if (Ptr)
  {
    int v3 = *(unsigned __int8 *)(Ptr + 14);
    if (v3 == 3 || v3 == 6) {
      return 1;
    }
  }
  unint64_t v6 = (uint64_t *)sub_216AFC9B8(a1[1]);
  sub_216AFD240("Can only append an expression to a property path.", &__p);
  unint64_t v7 = v6[1];
  unint64_t v8 = v6[2];
  if (v7 >= v8)
  {
    uint64_t v10 = (uint64_t)(v7 - *v6) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v12 = v8 - *v6;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v20[4] = v6 + 2;
    if (v13) {
      long long v14 = (char *)sub_2168707F4((uint64_t)(v6 + 2), v13);
    }
    else {
      long long v14 = 0;
    }
    unint64_t v15 = &v14[32 * v10];
    v20[0] = v14;
    v20[1] = v15;
    v20[3] = &v14[32 * v13];
    *(_DWORD *)unint64_t v15 = 6;
    long long v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v15 + 3) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v15 + 8) = v16;
    memset(&__p, 0, sizeof(__p));
    v20[2] = v15 + 32;
    sub_216AFCA5C(v6, v20);
    uint64_t v17 = v6[1];
    sub_2168C3EC4((uint64_t)v20);
    int v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v6[1] = v17;
    if (v18 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v7 = 6;
    long long v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v7 + 24) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v7 + 8) = v9;
    v6[1] = v7 + 32;
  }
  return 0;
}

void sub_216AFDD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216AFDD58()
{
  return 1;
}

uint64_t sub_216AFDD60()
{
  return 1;
}

uint64_t sub_216AFDD68()
{
  return 1;
}

_DWORD *sub_216AFDD70(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6 = sub_21697D878(a1, a2);
  sub_21697D8B4(v6 + 1, a2 + 1);
  sub_21697D878(a1 + 2, a3);
  sub_21697D8B4(a1 + 3, a3 + 1);
  return a1;
}

uint64_t sub_216AFDDCC(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 14);
  unsigned int v3 = *(unsigned __int8 *)(a2 + 14);
  BOOL v4 = v2 >= v3;
  if (v2 != v3) {
    return !v4;
  }
  uint64_t result = 0;
  switch(v2)
  {
    case 0u:
      BOOL v4 = __PAIR64__((*(unsigned char *)(a1 + 15) & 1) == 0, *(unsigned char *)(a2 + 15) & 1) != 0;
      return !v4;
    case 1u:
    case 3u:
    case 6u:
    case 7u:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a2 + 16);
      if (v7) {
        BOOL v9 = v8 == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        if (v7) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = v8 == 0;
        }
        return !v10;
      }
      if (v7 == v8) {
        goto LABEL_56;
      }
      unint64_t v11 = v7 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v13 = *(void *)(v11 + 8);
      unint64_t v14 = *(void *)(v12 + 8);
      if (v13 < v14) {
        return 1;
      }
      if (v13 == v14)
      {
        int v24 = *(const void **)(v12 + 16);
        unint64_t v22 = v12 + 16;
        int v23 = v24;
        int v25 = *(char *)(v22 + 23);
        long long v28 = *(const void **)(v11 + 16);
        unint64_t v26 = v11 + 16;
        unint64_t v27 = v28;
        int v29 = *(char *)(v26 + 23);
        if (v29 >= 0) {
          size_t v30 = *(unsigned __int8 *)(v26 + 23);
        }
        else {
          size_t v30 = *(void *)(v26 + 8);
        }
        if (v29 >= 0) {
          uint64_t v31 = (const void *)v26;
        }
        else {
          uint64_t v31 = v27;
        }
        if (v25 >= 0) {
          size_t v32 = *(unsigned __int8 *)(v22 + 23);
        }
        else {
          size_t v32 = *(void *)(v22 + 8);
        }
        if (v25 >= 0) {
          unint64_t v33 = (const void *)v22;
        }
        else {
          unint64_t v33 = v23;
        }
        if (v32 >= v30) {
          size_t v34 = v30;
        }
        else {
          size_t v34 = v32;
        }
        int v35 = memcmp(v31, v33, v34);
        if (v35) {
          return v35 < 0;
        }
        else {
          return v30 < v32;
        }
      }
      goto LABEL_56;
    case 2u:
      unint64_t v15 = *(uint64_t **)(a1 + 16);
      long long v16 = *(uint64_t **)(a2 + 16);
      return sub_216AFE058(v15, v16);
    case 4u:
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
      long long v19 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16);
      if (v18 == *(void *)(a2 + 16)) {
        goto LABEL_56;
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v17)
        && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v19))
      {
        goto LABEL_32;
      }
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v17)) {
        goto LABEL_57;
      }
      goto LABEL_56;
    case 5u:
      uint64_t v21 = *(void *)(a1 + 16);
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
      long long v19 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16);
      if (v21 == *(void *)(a2 + 16)) {
        goto LABEL_56;
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v17)
        && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v19))
      {
LABEL_32:
        uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::_LessThanInternal(v17, v19, v20);
      }
      else if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v17))
      {
LABEL_56:
        uint64_t result = 0;
      }
      else
      {
LABEL_57:
        uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v19);
      }
      break;
    case 8u:
      return result;
    default:
      v36[0] = "sdf/pathNode.h";
      v36[1] = "Compare";
      v36[2] = 665;
      v36[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_PathNode::Compare(const Sdf_PathNode &) const [Comp = pxrInter"
               "nal__aapl__pxrReserved__::Sdf_PathNode::LessThan]";
      char v37 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v36, 1, (pxrInternal__aapl__pxrReserved__ *)"Unhandled Sdf_PathNode::NodeType enumerant");
      goto LABEL_56;
  }
  return result;
}

BOOL sub_216AFE058(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  if (*a1) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (v4) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v5 == 0;
    }
    if (!v7) {
      return 1;
    }
  }
  else if (v4 != v5)
  {
    unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v10 = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
    unint64_t v11 = *(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v10 < v11) {
      return 1;
    }
    if (v10 == v11)
    {
      unint64_t v14 = *(const void **)(v9 + 16);
      unint64_t v12 = v9 + 16;
      unint64_t v13 = v14;
      int v15 = *(char *)(v12 + 23);
      uint64_t v18 = *(const void **)(v8 + 16);
      unint64_t v16 = v8 + 16;
      uint64_t v17 = v18;
      int v19 = *(char *)(v16 + 23);
      if (v19 >= 0) {
        size_t v20 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        size_t v20 = *(void *)(v16 + 8);
      }
      if (v19 >= 0) {
        uint64_t v21 = (const void *)v16;
      }
      else {
        uint64_t v21 = v17;
      }
      if (v15 >= 0) {
        size_t v22 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        size_t v22 = *(void *)(v12 + 8);
      }
      if (v15 >= 0) {
        int v23 = (const void *)v12;
      }
      else {
        int v23 = v13;
      }
      if (v22 >= v20) {
        size_t v24 = v20;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v21, v23, v24);
      BOOL v26 = v20 < v22;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
      if (v26) {
        return 1;
      }
    }
  }
  if (v4) {
    BOOL v27 = v5 == 0;
  }
  else {
    BOOL v27 = 1;
  }
  if (v27)
  {
    if (v4 && !v5) {
      return 0;
    }
  }
  else if (v5 != v4)
  {
    unint64_t v28 = v5 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v29 = v4 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v30 = *(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8);
    unint64_t v31 = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v30 < v31) {
      return 0;
    }
    if (v30 == v31)
    {
      size_t v34 = *(const void **)(v29 + 16);
      unint64_t v32 = v29 + 16;
      unint64_t v33 = v34;
      int v35 = *(char *)(v32 + 23);
      int v38 = *(const void **)(v28 + 16);
      unint64_t v36 = v28 + 16;
      char v37 = v38;
      int v39 = *(char *)(v36 + 23);
      if (v39 >= 0) {
        size_t v40 = *(unsigned __int8 *)(v36 + 23);
      }
      else {
        size_t v40 = *(void *)(v36 + 8);
      }
      if (v39 >= 0) {
        unint64_t v41 = (const void *)v36;
      }
      else {
        unint64_t v41 = v37;
      }
      if (v35 >= 0) {
        size_t v42 = *(unsigned __int8 *)(v32 + 23);
      }
      else {
        size_t v42 = *(void *)(v32 + 8);
      }
      if (v35 >= 0) {
        unint64_t v43 = (const void *)v32;
      }
      else {
        unint64_t v43 = v33;
      }
      if (v42 >= v40) {
        size_t v44 = v40;
      }
      else {
        size_t v44 = v42;
      }
      int v45 = memcmp(v41, v43, v44);
      BOOL v46 = v40 < v42;
      if (v45) {
        BOOL v46 = v45 < 0;
      }
      if (v46) {
        return 0;
      }
    }
  }
  uint64_t v47 = a1[1];
  uint64_t v48 = a2[1];
  if (v47 && v48)
  {
    if (v47 != v48)
    {
      unint64_t v49 = v47 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = v48 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v51 = *(void *)(v49 + 8);
      unint64_t v52 = *(void *)(v50 + 8);
      if (v51 < v52) {
        return 1;
      }
      if (v51 == v52)
      {
        v57 = *(const void **)(v50 + 16);
        unint64_t v55 = v50 + 16;
        v56 = v57;
        int v58 = *(char *)(v55 + 23);
        v61 = *(const void **)(v49 + 16);
        unint64_t v59 = v49 + 16;
        v60 = v61;
        int v62 = *(char *)(v59 + 23);
        if (v62 >= 0) {
          size_t v63 = *(unsigned __int8 *)(v59 + 23);
        }
        else {
          size_t v63 = *(void *)(v59 + 8);
        }
        if (v62 >= 0) {
          v64 = (const void *)v59;
        }
        else {
          v64 = v60;
        }
        if (v58 >= 0) {
          size_t v65 = *(unsigned __int8 *)(v55 + 23);
        }
        else {
          size_t v65 = *(void *)(v55 + 8);
        }
        if (v58 >= 0) {
          v66 = (const void *)v55;
        }
        else {
          v66 = v56;
        }
        if (v65 >= v63) {
          size_t v67 = v63;
        }
        else {
          size_t v67 = v65;
        }
        int v68 = memcmp(v64, v66, v67);
        if (v68) {
          return v68 < 0;
        }
        else {
          return v63 < v65;
        }
      }
    }
    return 0;
  }
  if (v47) {
    BOOL v54 = 1;
  }
  else {
    BOOL v54 = v48 == 0;
  }
  return !v54;
}

pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *sub_216AFE274(atomic_ullong *a1)
{
  uint64_t result = sub_216AFE2BC();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType::~SdfPathTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *sub_216AFE2BC()
{
  v0 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)operator new(0x78uLL);
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType::SdfPathTokens_StaticTokenType(v0);
  return v0;
}

void sub_216AFE2EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void **sub_216AFE300(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    return (void **)sub_2169C447C((uint64_t)a1, a2);
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v19 = v4;
    if (v12) {
      unint64_t v13 = (char *)sub_21677CB28(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    int v15 = v13;
    unint64_t v16 = &v13[8 * v10];
    uint64_t v17 = v16;
    uint64_t v18 = &v13[8 * v12];
    sub_216AFE40C((uint64_t)&v15, a2);
    sub_216981C20(a1, &v15);
    return sub_216981DDC(&v15);
  }
}

void sub_216AFE3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981DDC((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216AFE40C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(_DWORD **)(a1 + 16);
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    uint64_t v5 = result;
    uint64_t v6 = &result[2 * a2];
    do
    {
      *v5++ = 0;
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(result);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v7 + 1);
      uint64_t result = v5;
      v4 -= 8;
    }
    while (v4);
    uint64_t result = v6;
  }
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_216AFE474(uint64_t a1)
{
  for (uint64_t i = 0; i != 0x40000; i += 16)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + i));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + i + 4));
    *(void *)(a1 + i + 8) = 0;
  }
  return a1;
}

uint64_t sub_216AFE4D0(uint64_t a1)
{
  uint64_t v2 = 0x4000;
  do
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + v2 - 8));
    uint64_t v3 = *(void *)(a1 + v2 - 16);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v2 -= 16;
  }
  while (v2);
  return a1;
}

void *sub_216AFE530(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_216AFE58C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216AFE5A8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_216AFE614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_216AFE628()
{
  sub_216779094(v3, "SdfPathExpression::Complement");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759A80, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPathExpression::ImpliedUnion");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759A80, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPathExpression::Union");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759A80, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPathExpression::Intersection");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759A80, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPathExpression::Difference");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759A80, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPathExpression::ExpressionRef");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759A80, 5, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPathExpression::Pattern");
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759A80, 6, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216AFE87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216AFE8C0()
{
  sub_216B01844();

  return sub_216B01948();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::ExpressionReference::Weaker(pxrInternal__aapl__pxrReserved__::SdfPathExpression::ExpressionReference *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EED0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EED0))
  {
    uint64_t v2 = operator new(0x20uLL);
    *uint64_t v2 = 0;
    sub_2169C4380(v2);
    sub_216779094(v2 + 1, "_");
    qword_267B8EEC8 = (uint64_t)v2;
    __cxa_guard_release(&qword_267B8EED0);
  }
  return qword_267B8EEC8;
}

void sub_216AFE96C(_Unwind_Exception *a1)
{
  uint64_t v3 = sub_21697B754(v1);
  operator delete(v3);
  __cxa_guard_abort(&qword_267B8EED0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  char v4 = (void **)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    uint64_t v8 = (void **)(a1 + 72);
    sub_216B0378C((uint64_t)v25);
    unint64_t v9 = "<input>";
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8)) {
        unint64_t v9 = *(char **)a3;
      }
    }
    else if (*(unsigned char *)(a3 + 23))
    {
      unint64_t v9 = (char *)a3;
    }
    uint64_t v17 = v9;
    sub_216B09CD4((unsigned __int8 *)__p, (long long *)a2, &v17);
    v27[0] = *(_OWORD *)&v20[8];
    v27[1] = v21;
    if ((sub_216B03CF8((uint64_t)__p, v25) & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x28uLL);
      unint64_t v14 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PathExprE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v14)
      {
        sub_216779094(&v28, v14);
        free(v14);
      }
      else
      {
        sub_216779094(&v28, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PathExprE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      int v15 = std::string::insert(&v28, 0, "parse error matching ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      std::string::size_type v30 = v15->__r_.__value_.__r.__words[2];
      long long v29 = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      sub_2169C5604((uint64_t)exception, (uint64_t)&v29, (uint64_t)__p);
      __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
    }
    if ((sub_2169C9784((uint64_t)__p) & 1) == 0 && v10) {
      sub_216B09BDC((uint64_t)__p);
    }
    sub_2169C44E4((uint64_t)__p);
    sub_216B036EC(v25, (uint64_t)__p);
    uint64_t v11 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v11;
      operator delete(v11);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(void *)(a1 + 16) = v19;
    __p[1] = 0;
    uint64_t v19 = 0;
    __p[0] = 0;
    sub_2169B59AC((void **)(a1 + 24));
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v20;
    *(void *)(a1 + 40) = *(void *)&v20[16];
    memset(v20, 0, sizeof(v20));
    sub_2169B5A6C(v4);
    *(_OWORD *)(a1 + 48) = v21;
    *(void *)(a1 + 64) = v22;
    uint64_t v22 = 0;
    long long v21 = 0uLL;
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)uint64_t v8 = v23;
    *(void *)(a1 + 88) = v24;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    *(void *)&v27[0] = &v21;
    sub_2169B81EC((void ***)v27);
    *(void *)&v27[0] = v20;
    sub_2169B74B8((void ***)v27);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    sub_216B03BC4((uint64_t)&v26);
    __p[0] = v25;
    sub_216B03C60((void ***)__p);
  }
  return a1;
}

void sub_216AFEC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, uint64_t a10, uint64_t a11, long long a12, uint64_t a13, uint64_t a14, long long a15, long long a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,char *a22,const char *a23,uint64_t a24,const char *a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29,long long a30,std::string::size_type a31)
{
  if (*(char *)(v37 - 89) < 0) {
    operator delete(*(void **)(v37 - 112));
  }
  if (*(char *)(v37 - 113) < 0)
  {
    operator delete(*(void **)(v37 - 136));
    if ((v36 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v36)
  {
LABEL_8:
    long long v40 = *(_OWORD *)(v37 - 160);
    a15 = *(_OWORD *)(v37 - 176);
    a16 = v40;
    sub_2169C44E4((uint64_t)&a12);
    if (a2 == 1)
    {
      unint64_t v41 = __cxa_begin_catch(a1);
      size_t v42 = (char *)(*(uint64_t (**)(void *))(*v41 + 16))(v41);
      sub_216779094(&a12, v42);
      std::string::append((std::string *)&a12, " -- ");
      uint64_t v43 = v41[2];
      uint64_t v44 = v41[3];
      if (v43 != v44)
      {
        char v45 = 1;
        do
        {
          if ((v45 & 1) == 0) {
            std::string::append((std::string *)&a12, ", ");
          }
          sub_2169C58B8(v43);
          int v46 = *(char *)(v37 - 153);
          if (v46 >= 0) {
            uint64_t v47 = (const std::string::value_type *)(v37 - 176);
          }
          else {
            uint64_t v47 = *(const std::string::value_type **)(v37 - 176);
          }
          if (v46 >= 0) {
            std::string::size_type v48 = *(unsigned __int8 *)(v37 - 153);
          }
          else {
            std::string::size_type v48 = *(void *)(v37 - 168);
          }
          std::string::append((std::string *)&a12, v47, v48);
          if (*(char *)(v37 - 153) < 0) {
            operator delete(*(void **)(v37 - 176));
          }
          char v45 = 0;
          v43 += 48;
        }
        while (v43 != v44);
      }
      if (SHIBYTE(a10) < 0) {
        operator delete((void *)__p);
      }
      std::string __p = a12;
      a10 = a13;
      __cxa_end_catch();
      sub_216B03BC4((uint64_t)&a25);
      *(void *)&a12 = &a22;
      sub_216B03C60((void ***)&a12);
      a30 = 0uLL;
      a31 = 0;
      unint64_t v49 = *(void **)v31;
      if (*(void *)v31)
      {
        *(void *)(v31 + 8) = v49;
        operator delete(v49);
        *(void *)uint64_t v31 = 0;
        *(void *)(v31 + 8) = 0;
        *(void *)(v31 + 16) = 0;
      }
      *(void *)uint64_t v31 = 0;
      *(void *)(v31 + 8) = 0;
      *(void *)(v31 + 16) = 0;
      a23 = 0;
      a24 = 0;
      a22 = 0;
      sub_2169B59AC((void **)v34);
      *(void *)uint64_t v34 = 0;
      *(void *)(v34 + 8) = 0;
      *(void *)(v34 + 16) = 0;
      a26 = 0;
      a27 = 0;
      a25 = 0;
      sub_2169B5A6C((void **)v32);
      *(void *)uint64_t v32 = 0;
      *(void *)(v32 + 8) = 0;
      *(void *)(v32 + 16) = 0;
      a29 = 0uLL;
      a28 = 0;
      if (*(char *)(v31 + 95) < 0) {
        operator delete(v33->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = a30;
      v33->__r_.__value_.__r.__words[2] = a31;
      HIBYTE(a31) = 0;
      LOBYTE(a30) = 0;
      *(void *)&a12 = &a28;
      sub_2169B81EC((void ***)&a12);
      *(void *)&a12 = &a25;
      sub_2169B74B8((void ***)&a12);
      if (a22)
      {
        a23 = a22;
        operator delete(a22);
      }
      std::string::operator=(v33, (const std::string *)&__p);
      a22 = "sdf/pathExpression.cpp";
      a23 = "SdfPathExpression";
      a24 = 80;
      a25 = "pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(const std::string &, const std::string &)";
      LOBYTE(a26) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&a22, 3, (uint64_t *)&__p);
      if (SHIBYTE(a10) < 0) {
        operator delete((void *)__p);
      }
      JUMPOUT(0x216AFEB6CLL);
    }
    sub_216B0374C((void **)&a22);
    if (SHIBYTE(a10) < 0) {
      operator delete((void *)__p);
    }
    if (*(char *)(v31 + 95) < 0) {
      operator delete(v33->__r_.__value_.__l.__data_);
    }
    *(void *)&a12 = v32;
    sub_2169B81EC((void ***)&a12);
    *(void *)&a12 = v34;
    sub_2169B74B8((void ***)&a12);
    unint64_t v50 = *(void **)v31;
    if (*(void *)v31)
    {
      *(void *)(v31 + 8) = v50;
      operator delete(v50);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EEE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EEE0))
  {
    uint64_t v2 = operator new(0x60uLL);
    sub_216779094(v5, "//");
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v4 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(v2, v5, __p);
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    qword_267B8EED8 = (uint64_t)v2;
    __cxa_guard_release(&qword_267B8EEE0);
  }
  return qword_267B8EED8;
}

void sub_216AFF0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  operator delete(v20);
  __cxa_guard_abort(&qword_267B8EEE0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::EveryDescendant(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EEF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EEF0))
  {
    uint64_t v2 = operator new(0x60uLL);
    sub_216779094(v5, ".//");
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v4 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression((uint64_t)v2, (uint64_t)v5, (uint64_t)__p);
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    qword_267B8EEE8 = (uint64_t)v2;
    __cxa_guard_release(&qword_267B8EEF0);
  }
  return qword_267B8EEE8;
}

void sub_216AFF1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  operator delete(v20);
  __cxa_guard_abort(&qword_267B8EEF0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EF00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EF00))
  {
    uint64_t v2 = operator new(0x60uLL);
    v2[4] = 0u;
    v2[5] = 0u;
    v2[2] = 0u;
    v2[3] = 0u;
    *uint64_t v2 = 0u;
    v2[1] = 0u;
    qword_267B8EEF8 = (uint64_t)v2;
    __cxa_guard_release(&qword_267B8EF00);
  }
  return qword_267B8EEF8;
}

void sub_216AFF284(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::WeakerRef(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EF10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EF10))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression::ExpressionReference *)operator new(0x60uLL);
    uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::ExpressionReference::Weaker(v2);
    sub_216AFF334(v3, (char **)v2);
    qword_267B8EF08 = (uint64_t)v2;
    __cxa_guard_release(&qword_267B8EF10);
  }
  return qword_267B8EF08;
}

void sub_216AFF30C(_Unwind_Exception *a1)
{
}

_DWORD *sub_216AFF334@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  sub_216981010(&v5, (_DWORD *)a1);
  sub_21698105C(&v6, (_DWORD *)(a1 + 4));
  if (*(char *)(a1 + 31) < 0)
  {
    sub_216778F24(&__p, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 24);
  }
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom((uint64_t)&v5, a2);
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__p);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_21697C414(&v5);
}

void sub_216AFF3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v9);
  sub_21697C414(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeComplement(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v25 = a1;
  uint64_t v26 = a1 + 24;
  uint64_t v27 = a1 + 48;
  uint64_t v28 = a1 + 72;
  uint64_t v21 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)a1);
  uint64_t v22 = v21 + 24;
  uint64_t v23 = v21 + 48;
  uint64_t v24 = v21 + 72;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_2169B66D4((uint64_t)&v29, (uint64_t)&v25, (uint64_t)&v21);
  if (v4)
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v4);
    int v6 = (const std::string *)v5;
    if (v5 != a2) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v4);
  uint64_t v25 = a1;
  uint64_t v26 = a1 + 24;
  uint64_t v27 = a1 + 48;
  uint64_t v28 = a1 + 72;
  uint64_t v21 = v7;
  uint64_t v22 = v7 + 24;
  uint64_t v23 = v7 + 48;
  uint64_t v24 = v7 + 72;
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_2169B66D4((uint64_t)&v29, (uint64_t)&v25, (uint64_t)&v21);
  if (v8)
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything(v8);
    int v6 = (const std::string *)v5;
    if (v5 != a2)
    {
LABEL_6:
      sub_216825D78((char *)a2, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      sub_216B01A9C(a2 + 24, (uint64_t)v6[1].__r_.__value_.__l.__data_, v6[1].__r_.__value_.__l.__size_, (uint64_t)(v6[1].__r_.__value_.__l.__size_ - v6[1].__r_.__value_.__r.__words[0]) >> 5);
      sub_216B01C6C(a2 + 48, (uint64_t)v6[2].__r_.__value_.__l.__data_, v6[2].__r_.__value_.__l.__size_, (uint64_t)(v6[2].__r_.__value_.__l.__size_ - v6[2].__r_.__value_.__r.__words[0]) >> 6);
    }
LABEL_7:
    std::string::operator=((std::string *)(a2 + 72), v6 + 3);
    return;
  }
  sub_216B08220(a2, (__n128 *)a1);
  sub_2169B59AC((void **)(a2 + 24));
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  sub_2169B5A6C((void **)(a2 + 48));
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  unint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v10 = *(_DWORD **)(a2 + 8);
  if ((unint64_t)v10 >= v9)
  {
    unint64_t v12 = *(_DWORD **)a2;
    uint64_t v13 = ((uint64_t)v10 - *(void *)a2) >> 2;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v15 = v9 - (void)v12;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      uint64_t v17 = (char *)sub_21677EA28(a2 + 16, v16);
      unint64_t v12 = *(_DWORD **)a2;
      uint64_t v10 = *(_DWORD **)(a2 + 8);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v18 = &v17[4 * v13];
    uint64_t v19 = &v17[4 * v16];
    *(_DWORD *)uint64_t v18 = 0;
    uint64_t v11 = v18 + 4;
    while (v10 != v12)
    {
      int v20 = *--v10;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    *(void *)a2 = v18;
    *(void *)(a2 + 8) = v11;
    *(void *)(a2 + 16) = v19;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *uint64_t v10 = 0;
    uint64_t v11 = v10 + 1;
  }
  *(void *)(a2 + 8) = v11;
}

void sub_216AFF684(_Unwind_Exception *a1)
{
  sub_2169B5940(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeOp(pxrInternal__aapl__pxrReserved__::SdfPathExpression *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (char **)a2;
  int v6 = (int)a1;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  if (a1 == 4)
  {
    __p[0] = a2;
    __p[1] = a2 + 3;
    int v39 = a2 + 6;
    *(void *)&long long v40 = a2 + 9;
    char v45 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(a1);
    int v46 = v45 + 3;
    uint64_t v47 = v45 + 6;
    std::string::size_type v48 = v45 + 9;
    uint64_t v8 = sub_2169B66D4((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
    if (v8) {
      goto LABEL_6;
    }
    unint64_t v9 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)v8);
    __p[0] = (void *)a3;
    __p[1] = (void *)(a3 + 24);
    int v39 = (void *)(a3 + 48);
    *(void *)&long long v40 = a3 + 72;
    char v45 = v9;
    int v46 = v9 + 3;
    uint64_t v47 = v9 + 6;
    std::string::size_type v48 = v9 + 9;
    uint64_t v10 = sub_2169B66D4((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
    if (v10) {
      goto LABEL_6;
    }
    uint64_t v11 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)v10);
    __p[0] = v5;
    __p[1] = v5 + 3;
    int v39 = v5 + 6;
    *(void *)&long long v40 = v5 + 9;
    char v45 = v11;
    int v46 = v11 + 3;
    uint64_t v47 = v11 + 6;
    std::string::size_type v48 = v11 + 9;
    uint64_t v12 = sub_2169B66D4((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
    if (v12) {
      goto LABEL_6;
    }
    uint64_t v13 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything((pxrInternal__aapl__pxrReserved__::SdfPathExpression *)v12);
    __p[0] = (void *)a3;
    __p[1] = (void *)(a3 + 24);
    int v39 = (void *)(a3 + 48);
    *(void *)&long long v40 = a3 + 72;
    char v45 = v13;
    int v46 = v13 + 3;
    uint64_t v47 = v13 + 6;
    std::string::size_type v48 = v13 + 9;
    a1 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_2169B66D4((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
    if (a1)
    {
LABEL_6:
      pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeComplement(a3, (uint64_t)__p);
      unint64_t v14 = *(void **)a3;
      if (*(void *)a3)
      {
        *(void *)(a3 + 8) = v14;
        operator delete(v14);
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
      }
      *(_OWORD *)a3 = *(_OWORD *)__p;
      *(void *)(a3 + 16) = v39;
      __p[1] = 0;
      int v39 = 0;
      __p[0] = 0;
      sub_2169B59AC((void **)(a3 + 24));
      *(_OWORD *)(a3 + 24) = v40;
      *(void *)(a3 + 40) = v41;
      uint64_t v41 = 0;
      long long v40 = 0uLL;
      sub_2169B5A6C((void **)(a3 + 48));
      *(_OWORD *)(a3 + 48) = v42;
      *(void *)(a3 + 64) = v43;
      uint64_t v43 = 0;
      long long v42 = 0uLL;
      uint64_t v15 = (void **)(a3 + 72);
      if (*(char *)(a3 + 95) < 0) {
        operator delete(*v15);
      }
      *(_OWORD *)uint64_t v15 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
      *(void *)(a3 + 88) = *((void *)&v44.__r_.__value_.__l + 2);
      *((unsigned char *)&v44.__r_.__value_.__s + 23) = 0;
      v44.__r_.__value_.__s.__data_[0] = 0;
      char v45 = (void **)&v42;
      sub_2169B81EC(&v45);
      char v45 = (void **)&v40;
      sub_2169B74B8(&v45);
      a1 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)__p[0];
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      int v6 = 3;
    }
    else
    {
      int v6 = 4;
    }
  }
  unint64_t v16 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(a1);
  __p[0] = v5;
  __p[1] = v5 + 3;
  int v39 = v5 + 6;
  *(void *)&long long v40 = v5 + 9;
  char v45 = v16;
  int v46 = v16 + 3;
  uint64_t v47 = v16 + 6;
  std::string::size_type v48 = v16 + 9;
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_2169B66D4((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
  if (v17)
  {
    if (v6 == 3) {
      a3 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v17);
    }
    sub_2169B70E4(__p, a3);
    if (__p != (void **)a4)
    {
      sub_216825D78((char *)a4, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      sub_216B01A9C(a4 + 24, v40, *((uint64_t *)&v40 + 1), (uint64_t)(*((void *)&v40 + 1) - v40) >> 5);
      sub_216B01C6C(a4 + 48, v42, *((uint64_t *)&v42 + 1), (uint64_t)(*((void *)&v42 + 1) - v42) >> 6);
    }
LABEL_36:
    std::string::operator=((std::string *)(a4 + 72), &v44);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    char v45 = (void **)&v42;
    sub_2169B81EC(&v45);
    char v45 = (void **)&v40;
    sub_2169B74B8(&v45);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v18 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v17);
  __p[0] = (void *)a3;
  __p[1] = (void *)(a3 + 24);
  int v39 = (void *)(a3 + 48);
  *(void *)&long long v40 = a3 + 72;
  char v45 = v18;
  int v46 = v18 + 3;
  uint64_t v47 = v18 + 6;
  std::string::size_type v48 = v18 + 9;
  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_2169B66D4((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
  if (v19)
  {
    if (v6 == 3) {
      uint64_t v5 = (char **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v19);
    }
    sub_2169B70E4(__p, (uint64_t)v5);
    if (__p != (void **)a4)
    {
      sub_216825D78((char *)a4, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      sub_216B01A9C(a4 + 24, v40, *((uint64_t *)&v40 + 1), (uint64_t)(*((void *)&v40 + 1) - v40) >> 5);
      sub_216B01C6C(a4 + 48, v42, *((uint64_t *)&v42 + 1), (uint64_t)(*((void *)&v42 + 1) - v42) >> 6);
    }
    goto LABEL_36;
  }
  int v20 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything(v19);
  __p[0] = v5;
  __p[1] = v5 + 3;
  int v39 = v5 + 6;
  *(void *)&long long v40 = v5 + 9;
  char v45 = v20;
  int v46 = v20 + 3;
  uint64_t v47 = v20 + 6;
  std::string::size_type v48 = v20 + 9;
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_2169B66D4((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
  if (v21)
  {
    if (v6 != 3) {
      a3 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything(v21);
    }
    sub_2169B70E4(__p, a3);
    if (__p != (void **)a4)
    {
      sub_216825D78((char *)a4, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      sub_216B01A9C(a4 + 24, v40, *((uint64_t *)&v40 + 1), (uint64_t)(*((void *)&v40 + 1) - v40) >> 5);
      sub_216B01C6C(a4 + 48, v42, *((uint64_t *)&v42 + 1), (uint64_t)(*((void *)&v42 + 1) - v42) >> 6);
    }
    goto LABEL_36;
  }
  uint64_t v22 = (void **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything(v21);
  __p[0] = (void *)a3;
  __p[1] = (void *)(a3 + 24);
  int v39 = (void *)(a3 + 48);
  *(void *)&long long v40 = a3 + 72;
  char v45 = v22;
  int v46 = v22 + 3;
  uint64_t v47 = v22 + 6;
  std::string::size_type v48 = v22 + 9;
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_2169B66D4((uint64_t)&v49, (uint64_t)__p, (uint64_t)&v45);
  if (v23)
  {
    if (v6 != 3) {
      uint64_t v5 = (char **)pxrInternal__aapl__pxrReserved__::SdfPathExpression::Everything(v23);
    }
    sub_2169B70E4(__p, (uint64_t)v5);
    if (__p != (void **)a4)
    {
      sub_216825D78((char *)a4, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      sub_216B01A9C(a4 + 24, v40, *((uint64_t *)&v40 + 1), (uint64_t)(*((void *)&v40 + 1) - v40) >> 5);
      sub_216B01C6C(a4 + 48, v42, *((uint64_t *)&v42 + 1), (uint64_t)(*((void *)&v42 + 1) - v42) >> 6);
    }
    goto LABEL_36;
  }
  sub_216B08220(a4, (__n128 *)a3);
  sub_21681FE20((void **)a4, ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2) + ((v5[1] - *v5) >> 2) + 1);
  sub_216ADED1C(a4, *(void *)(a4 + 8), *v5, v5[1], (v5[1] - *v5) >> 2);
  unint64_t v24 = *(void *)(a4 + 16);
  uint64_t v25 = *(int **)(a4 + 8);
  if ((unint64_t)v25 >= v24)
  {
    uint64_t v27 = *(int **)a4;
    uint64_t v28 = ((uint64_t)v25 - *(void *)a4) >> 2;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v30 = v24 - (void)v27;
    if (v30 >> 1 > v29) {
      unint64_t v29 = v30 >> 1;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      uint64_t v32 = (char *)sub_21677EA28(a4 + 16, v31);
      uint64_t v27 = *(int **)a4;
      uint64_t v25 = *(int **)(a4 + 8);
    }
    else
    {
      uint64_t v32 = 0;
    }
    unint64_t v33 = (int *)&v32[4 * v28];
    uint64_t v34 = &v32[4 * v31];
    *unint64_t v33 = v6;
    uint64_t v26 = v33 + 1;
    while (v25 != v27)
    {
      int v35 = *--v25;
      *--unint64_t v33 = v35;
    }
    *(void *)a4 = v33;
    *(void *)(a4 + 8) = v26;
    *(void *)(a4 + 16) = v34;
    if (v27) {
      operator delete(v27);
    }
  }
  else
  {
    *uint64_t v25 = v6;
    uint64_t v26 = v25 + 1;
  }
  *(void *)(a4 + 8) = v26;
  sub_2169B59AC((void **)(a4 + 24));
  *(void *)(a4 + 24) = v5[3];
  long long v36 = *((_OWORD *)v5 + 2);
  *(_OWORD *)(a4 + 32) = v36;
  v5[4] = 0;
  v5[5] = 0;
  v5[3] = 0;
  sub_216B0A144((uint64_t *)(a4 + 24), v36, *(int **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 5);
  sub_2169B5A6C((void **)(a4 + 48));
  *(void *)(a4 + 48) = v5[6];
  long long v37 = *(_OWORD *)(v5 + 7);
  *(_OWORD *)(a4 + 56) = v37;
  v5[7] = 0;
  v5[8] = 0;
  v5[6] = 0;
  sub_216B0A8BC((uint64_t *)(a4 + 48), v37, *(void *)(a3 + 48), *(void *)(a3 + 56), (uint64_t)(*(void *)(a3 + 56) - *(void *)(a3 + 48)) >> 6);
}

void sub_216AFFD5C(_Unwind_Exception *a1)
{
  sub_2169B5940(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  uint64_t v4 = (char *)sub_21677EA28((uint64_t)(a2 + 2), 1uLL);
  uint64_t v5 = *a2;
  int v6 = a2[1];
  uint64_t v8 = &v4[4 * v7];
  *(_DWORD *)uint64_t v4 = 5;
  unint64_t v9 = v4 + 4;
  while (v6 != v5)
  {
    int v10 = *((_DWORD *)v6 - 1);
    v6 -= 4;
    *((_DWORD *)v4 - 1) = v10;
    v4 -= 4;
  }
  *a2 = v4;
  a2[1] = v9;
  a2[2] = v8;
  if (v5) {
    operator delete(v5);
  }
  a2[1] = v9;
  unint64_t v11 = (unint64_t)a2[4];
  if (v11 >= (unint64_t)a2[5])
  {
    uint64_t result = sub_216B0B018((uint64_t *)a2 + 3, a1);
  }
  else
  {
    sub_21697D878(a2[4], (_DWORD *)a1);
    sub_21697D8B4((_DWORD *)(v11 + 4), (_DWORD *)(a1 + 4));
    long long v12 = *(_OWORD *)(a1 + 8);
    *(void *)(v11 + 24) = *(void *)(a1 + 24);
    *(_OWORD *)(v11 + 8) = v12;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    uint64_t result = v11 + 32;
  }
  a2[4] = (char *)result;
  return result;
}

void sub_216AFFE8C(_Unwind_Exception *a1)
{
  sub_2169B5940(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom(uint64_t a1@<X0>, char **a2@<X8>)
{
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  uint64_t v4 = (char *)sub_21677EA28((uint64_t)(a2 + 2), 1uLL);
  uint64_t v5 = *a2;
  int v6 = a2[1];
  uint64_t v8 = &v4[4 * v7];
  *(_DWORD *)uint64_t v4 = 6;
  unint64_t v9 = v4 + 4;
  while (v6 != v5)
  {
    int v10 = *((_DWORD *)v6 - 1);
    v6 -= 4;
    *((_DWORD *)v4 - 1) = v10;
    v4 -= 4;
  }
  *a2 = v4;
  a2[1] = v9;
  a2[2] = v8;
  if (v5) {
    operator delete(v5);
  }
  a2[1] = v9;
  sub_216AFFF54((uint64_t *)a2 + 6, a1);
}

void sub_216AFFF3C(_Unwind_Exception *a1)
{
  sub_2169B5940(v1);
  _Unwind_Resume(a1);
}

void sub_216AFFF54(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    uint64_t v8 = (uint64_t)(v6 - *a1) >> 6;
    if ((unint64_t)(v8 + 1) >> 58) {
      sub_21677CB10();
    }
    uint64_t v9 = v4 - *a1;
    uint64_t v10 = v9 >> 5;
    if (v9 >> 5 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v17 = a1 + 2;
    if (v11) {
      long long v12 = (char *)sub_2169B761C((uint64_t)(a1 + 2), v11);
    }
    else {
      long long v12 = 0;
    }
    uint64_t v13 = v12;
    unint64_t v14 = &v12[64 * v8];
    unint64_t v16 = &v12[64 * v11];
    sub_216B0AC54(v5, (uint64_t)v14, a2);
    uint64_t v15 = v14 + 64;
    sub_216B0B198(a1, &v13);
    unint64_t v7 = a1[1];
    sub_216B0AF9C(&v13);
  }
  else
  {
    sub_216B0AC54((uint64_t)(a1 + 2), v6, a2);
    unint64_t v7 = v6 + 64;
    a1[1] = v6 + 64;
  }
  a1[1] = v7;
}

void sub_216B00054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B0AF9C((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::WalkWithOpStack(void *a1, uint64_t a2, void (*a3)(uint64_t, char **), uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[6];
    uint64_t v31 = *(unsigned int *)(v7 - 4);
    sub_216B0B210(&v32, 1uLL, &v31);
    uint64_t v15 = v32;
    if (v32 == v33)
    {
      if (!v32) {
        return;
      }
    }
    else
    {
      uint64_t v15 = v33;
      do
      {
        int v16 = *((_DWORD *)v15 - 2);
        if (v16 == 6)
        {
          a7(a6, v14);
          int v17 = 0;
          v14 += 64;
        }
        else if (v16 == 5)
        {
          a5(a4, v13);
          int v17 = 0;
          v13 += 32;
        }
        else
        {
          a3(a2, &v32);
          ++*((_DWORD *)v15 - 1);
          if (v16) {
            int v17 = 3;
          }
          else {
            int v17 = 2;
          }
        }
        if (*((_DWORD *)v15 - 1) == v17)
        {
          uint64_t v15 = v33 - 8;
        }
        else
        {
          uint64_t v18 = v33;
          if (v33 >= v34)
          {
            uint64_t v19 = (v33 - v32) >> 3;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 61) {
              sub_21677CB10();
            }
            uint64_t v21 = v34 - v32;
            if ((v34 - v32) >> 2 > v20) {
              unint64_t v20 = v21 >> 2;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            uint64_t v23 = (char *)sub_21677CB28((uint64_t)&v34, v22);
            uint64_t v25 = &v23[8 * v19];
            *(_DWORD *)uint64_t v25 = *(_DWORD *)(v7 - 8);
            *((_DWORD *)v25 + 1) = 0;
            uint64_t v27 = v32;
            uint64_t v26 = v33;
            uint64_t v28 = v25;
            if (v33 != v32)
            {
              do
              {
                uint64_t v29 = *((void *)v26 - 1);
                v26 -= 8;
                *((void *)v28 - 1) = v29;
                v28 -= 8;
              }
              while (v26 != v27);
              uint64_t v26 = v32;
            }
            uint64_t v15 = v25 + 8;
            uint64_t v32 = v28;
            unint64_t v33 = v25 + 8;
            uint64_t v34 = &v23[8 * v24];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(void *)unint64_t v33 = *(unsigned int *)(v7 - 8);
            uint64_t v15 = v18 + 8;
          }
          v7 -= 4;
        }
        unint64_t v33 = v15;
      }
      while (v32 != v15);
    }
    unint64_t v33 = v15;
    operator delete(v15);
  }
}

void sub_216B00270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::Walk(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  v8[0] = a2;
  v8[1] = a3;
  uint64_t v7 = v8;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::WalkWithOpStack(a1, (uint64_t)&v7, (void (*)(uint64_t, char **))sub_216B0288C, a4, a5, a6, a7);
}

__n128 pxrInternal__aapl__pxrReserved__::SdfPathExpression::ReplacePrefix@<Q0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 24);
  uint64_t v10 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 32);
  for (i = (void *)(a3 + 24); v8 != v10; uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 7))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v17, v8, a1, a2, 1);
    sub_21697DE94((int *)v8, (int *)&v17);
    unint64_t v11 = (int *)((char *)v8 + 4);
    sub_21697DEEC(v11, (int *)&v17 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_21697C414(&v17);
  }
  long long v12 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 48);
  uint64_t v14 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 56);
  uint64_t v13 = (int64x2_t *)(a3 + 48);
  if (v12 == v14)
  {
    int64x2_t v15 = vdupq_n_s64((unint64_t)v12);
  }
  else
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v17, v12, a1, a2, 1);
      pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::SetPrefix((uint64_t)v12, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
      sub_21697C414(&v17);
      long long v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 64);
    }
    while (v12 != v14);
    int64x2_t v15 = *v13;
  }
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(void *)(a4 + 16) = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)(a3 + 24);
  *(void *)(a4 + 40) = *(void *)(a3 + 40);
  i[1] = 0;
  i[2] = 0;
  *uint64_t i = 0;
  *(int64x2_t *)(a4 + 48) = v15;
  *(void *)(a4 + 64) = *(void *)(a3 + 64);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  v13->i64[0] = 0;
  __n128 result = *(__n128 *)(a3 + 72);
  *(void *)(a4 + 88) = *(void *)(a3 + 88);
  *(__n128 *)(a4 + 72) = result;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  return result;
}

void sub_216B0045C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::SetPrefix(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  BOOL IsAbsoluteRootOrPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(this);
  if (v4 == v5)
  {
    if (!IsAbsoluteRootOrPrimPath && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this) & 1) == 0)
    {
      uint64_t v13 = "sdf/pathExpression.cpp";
      uint64_t v14 = "SetPrefix";
      uint64_t v15 = 564;
      int v16 = "void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::SetPrefix(SdfPath &&)";
      char v17 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)__p);
      if (v12 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v13, (pxrInternal__aapl__pxrReserved__ *)"Path pattern prefixes must be prim paths or prim-property paths: <%s> -- ignoring.", v9, v10);
      goto LABEL_15;
    }
  }
  else if (!IsAbsoluteRootOrPrimPath)
  {
    uint64_t v13 = "sdf/pathExpression.cpp";
    uint64_t v14 = "SetPrefix";
    uint64_t v15 = 557;
    int v16 = "void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::SetPrefix(SdfPath &&)";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)__p);
    if (v12 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v13, (pxrInternal__aapl__pxrReserved__ *)"Path patterns with match components require prim paths or the absolute root path ('/') as a prefix: <%s> -- ignoring.", v7, v8);
LABEL_15:
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  sub_21697DE94((int *)a1, (int *)this);
  sub_21697DEEC((int *)(a1 + 4), (int *)this + 1);
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
    *(unsigned char *)(a1 + 56) = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  }
}

void sub_216B005D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPathExpression::IsAbsolute(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)this + 3);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)this + 4);
  while (v2 != v3)
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v2))
    {
      BOOL result = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v2);
      if (!result) {
        return result;
      }
    }
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v2 + 32);
  }
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)this + 6);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)this + 7);
  if (v6 == v5) {
    return 1;
  }
  do
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v6);
    if (!result) {
      break;
    }
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 64);
  }
  while (v6 != v5);
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAbsolute@<Q0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  unint64_t v6 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 24);
  uint64_t v8 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 32);
  for (i = (void *)(a2 + 24); v6 != v8; unint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 7))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(v6, a1, &v15);
    sub_21697DE94((int *)v6, &v15);
    uint64_t v9 = (int *)((char *)v6 + 4);
    sub_21697DEEC(v9, &v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_21697C414(&v15);
  }
  uint64_t v10 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 48);
  char v12 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 56);
  unint64_t v11 = (int64x2_t *)(a2 + 48);
  if (v10 == v12)
  {
    int64x2_t v13 = vdupq_n_s64((unint64_t)v10);
  }
  else
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(v10, a1, &v15);
      pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::SetPrefix((uint64_t)v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
      sub_21697C414(&v15);
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 64);
    }
    while (v10 != v12);
    int64x2_t v13 = *v11;
  }
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(void *)(a3 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a3 + 40) = *(void *)(a2 + 40);
  i[1] = 0;
  i[2] = 0;
  *uint64_t i = 0;
  *(int64x2_t *)(a3 + 48) = v13;
  *(void *)(a3 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  v11->i64[0] = 0;
  __n128 result = *(__n128 *)(a2 + 72);
  *(void *)(a3 + 88) = *(void *)(a2 + 88);
  *(__n128 *)(a3 + 72) = result;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  return result;
}

void sub_216B007D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathExpression::ContainsWeakerExpressionReference(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  for (uint64_t i = *((void *)this + 3); ; i += 32)
  {
    if (i == *((void *)this + 4)) {
      return 0;
    }
    uint64_t v2 = (void *)(i + 8);
    int v3 = *(char *)(i + 31);
    if (v3 < 0) {
      break;
    }
    if (v3 == 1) {
      goto LABEL_8;
    }
LABEL_9:
    ;
  }
  if (*(void *)(i + 16) != 1) {
    goto LABEL_9;
  }
  uint64_t v2 = (void *)*v2;
LABEL_8:
  if (*(unsigned char *)v2 != 95) {
    goto LABEL_9;
  }
  return 1;
}

double pxrInternal__aapl__pxrReserved__::SdfPathExpression::ResolveReferences@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v14[0] = a2;
  v14[1] = a3;
  if (*a1 == a1[1])
  {
    double result = 0.0;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v8 = &v11;
    v9[0] = &v11;
    v9[1] = v14;
    uint64_t v10 = &v11;
    v16[0] = (void **)&v10;
    v16[1] = (void **)sub_216B028A0;
    int v15 = v16;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::WalkWithOpStack(a1, (uint64_t)&v15, (void (*)(uint64_t, char **))sub_216B0288C, (uint64_t)v9, (void (*)(uint64_t, uint64_t))sub_216B02C44, (uint64_t)&v8, (void (*)(uint64_t, uint64_t))sub_216B03130);
    uint64_t v5 = v12;
    *(_OWORD *)a4 = *(_OWORD *)(v12 - 96);
    *(void *)(a4 + 16) = *(void *)(v5 - 80);
    *(void *)(v5 - 96) = 0;
    *(void *)(v5 - 88) = 0;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v5 - 72);
    *(void *)(a4 + 40) = *(void *)(v5 - 56);
    *(void *)(v5 - 80) = 0;
    *(void *)(v5 - 72) = 0;
    *(void *)(v5 - 64) = 0;
    *(void *)(v5 - 56) = 0;
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(v5 - 48);
    *(void *)(a4 + 64) = *(void *)(v5 - 32);
    *(void *)(v5 - 48) = 0;
    *(void *)(v5 - 40) = 0;
    long long v6 = *(_OWORD *)(v5 - 24);
    *(void *)(a4 + 88) = *(void *)(v5 - 8);
    *(_OWORD *)(a4 + 72) = v6;
    *(void *)(v5 - 32) = 0;
    *(void *)(v5 - 24) = 0;
    *(void *)(v5 - 16) = 0;
    *(void *)(v5 - 8) = 0;
    v16[0] = (void **)&v11;
    sub_216B0B294(v16);
  }
  return result;
}

void sub_216B00970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B0B294((void ***)va);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::SdfPathExpression::ComposeOver@<Q0>(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    if ((const std::string *)a1 != a2)
    {
      sub_216825D78((char *)a1, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_, (uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 2);
      sub_216B01A9C(a1 + 24, (uint64_t)a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_, (uint64_t)(a2[1].__r_.__value_.__l.__size_ - a2[1].__r_.__value_.__r.__words[0]) >> 5);
      sub_216B01C6C(a1 + 48, (uint64_t)a2[2].__r_.__value_.__l.__data_, a2[2].__r_.__value_.__l.__size_, (uint64_t)(a2[2].__r_.__value_.__l.__size_ - a2[2].__r_.__value_.__r.__words[0]) >> 6);
    }
    std::string::operator=((std::string *)(a1 + 72), a2 + 3);
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(void *)(a3 + 16) = *(void *)(a1 + 16);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
    *(void *)(a3 + 40) = *(void *)(a1 + 40);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
    *(void *)(a3 + 64) = *(void *)(a1 + 64);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    __n128 result = *(__n128 *)(a1 + 72);
    *(void *)(a3 + 88) = *(void *)(a1 + 88);
    *(__n128 *)(a3 + 72) = result;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  else
  {
    uint64_t v7 = a2;
    result.n128_f64[0] = pxrInternal__aapl__pxrReserved__::SdfPathExpression::ResolveReferences((void *)a1, (uint64_t)&v7, (uint64_t)sub_216B032E8, a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText(uint64_t *__return_ptr a1@<X8>, pxrInternal__aapl__pxrReserved__::SdfPathExpression *this@<X0>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (*(void *)this != *((void *)this + 1))
  {
    long long __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    v4[0] = &v8;
    v4[1] = &__p;
    v4[2] = a1;
    uint64_t v2 = a1;
    int v3 = a1;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::WalkWithOpStack(this, (uint64_t)v4, (void (*)(uint64_t, char **))sub_216B03330, (uint64_t)&v3, (void (*)(uint64_t, uint64_t))sub_216B034E8, (uint64_t)&v2, (void (*)(uint64_t, uint64_t))sub_216B03668);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
}

void sub_216B00B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::PathPattern(pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *this)
{
  uint64_t v2 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(this);
  sub_216981010(this, v2);
  sub_21698105C((_DWORD *)this + 1, v2 + 1);
  *((unsigned char *)this + 56) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return this;
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  memset(v3, 0, sizeof(v3));
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(a1, a2, (uint64_t)v2);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  long long v6 = (void **)v3 + 1;
  sub_2169B5C28(&v6);
  if (v2[0])
  {
    v2[1] = v2[0];
    operator delete(v2[0]);
  }
}

void sub_216B00C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (*(unsigned char *)(a1 + 56))
  {
    __p[0] = "sdf/pathExpression.cpp";
    __p[1] = "AppendChild";
    uint64_t v19 = 498;
    unint64_t v20 = "void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(const std::string &, SdfPre"
          "dicateExpression &&)";
    char v21 = 0;
    if (*(char *)(a2 + 23) < 0) {
      uint64_t v3 = *(void *)a2;
    }
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::GetText((pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *)a1, &v17);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v6 = &v17;
    }
    else {
      long long v6 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Cannot append child '%s' to property path expression '%s'", v5, v3, v6);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v7 = (void *)v17.__r_.__value_.__r.__words[0];
LABEL_31:
      operator delete(v7);
      return;
    }
    return;
  }
  char IsValidIdentifier = pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier(a2);
  if (IsValidIdentifier) {
    goto LABEL_10;
  }
  int v10 = *(char *)(v3 + 23);
  if (v10 < 0)
  {
    if (*(void *)(v3 + 8) != 2) {
      goto LABEL_20;
    }
    uint64_t v11 = *(_WORD **)v3;
  }
  else
  {
    uint64_t v11 = (_WORD *)v3;
    if (v10 != 2) {
      goto LABEL_20;
    }
  }
  if (*v11 == 11822)
  {
LABEL_10:
    if (*(void *)a3 == *(void *)(a3 + 8) && *(void *)(a1 + 8) == *(void *)(a1 + 16))
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v17);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v17, __p);
      sub_21697DE94((int *)a1, (int *)__p);
      sub_21697DEEC((int *)(a1 + 4), (int *)__p + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_21697C414(__p);
      if ((v17.__r_.__value_.__s.__data_[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      return;
    }
  }
LABEL_20:
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
    int v13 = -1;
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + 40);
    int v13 = 954437177 * ((v12 - *(void *)(a1 + 32)) >> 3);
    if (v12 >= *(void *)(a1 + 48))
    {
      uint64_t v15 = sub_216B09D80((uint64_t *)(a1 + 32), a3);
    }
    else
    {
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(_OWORD *)unint64_t v12 = *(_OWORD *)a3;
      *(void *)(v12 + 16) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(a3 + 24);
      *(void *)(v12 + 40) = *(void *)(a3 + 40);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      long long v14 = *(_OWORD *)(a3 + 48);
      *(void *)(v12 + 64) = *(void *)(a3 + 64);
      *(_OWORD *)(v12 + 48) = v14;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 48) = 0;
      uint64_t v15 = v12 + 72;
    }
    *(void *)(a1 + 40) = v15;
  }
  uint64_t v16 = (uint64_t *)(a1 + 8);
  if (*(char *)(v3 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)v3, *(void *)(v3 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v3;
    uint64_t v19 = *(void *)(v3 + 16);
  }
  LODWORD(v20) = v13;
  BYTE4(v20) = IsValidIdentifier;
  sub_216B0135C(v16, (long long *)__p);
  if (SHIBYTE(v19) < 0)
  {
    uint64_t v7 = __p[0];
    goto LABEL_31;
  }
}

{
  void *v5[3];
  uint64_t v6;
  void *__p;
  char v8;
  void **v9;

  sub_2169B7AD8(v5, a3);
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(a1, a2, (uint64_t)v5);
  if (v8 < 0) {
    operator delete(__p);
  }
  uint64_t v9 = (void **)&v6;
  sub_2169B5C28(&v9);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_216B00ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B00F28(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v4 = (void **)(a1 + 24);
  sub_2169B5C28(&v4);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_216B01000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::GetText(pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  AsString = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(this);
  if (*(void *)this == *(void *)AsString)
  {
    uint64_t v5 = *((void *)this + 1);
    if (v5 != *((void *)this + 2))
    {
      if (*(_DWORD *)(v5 + 24) != -1) {
        goto LABEL_12;
      }
      if (*(char *)(v5 + 23) < 0)
      {
        if (*(void *)(v5 + 8)) {
          goto LABEL_12;
        }
      }
      else if (*(unsigned char *)(v5 + 23))
      {
        goto LABEL_12;
      }
    }
    AsString = (pxrInternal__aapl__pxrReserved__::SdfPath *)MEMORY[0x21D4477E0](a2, ".");
  }
  else
  {
    AsString = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)__p);
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(a2->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v38;
  }
LABEL_12:
  long long v6 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(AsString);
  uint64_t v7 = *((void *)this + 2) - *((void *)this + 1);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v7 >> 5;
    uint64_t v10 = (v7 >> 5) - 1;
    uint64_t v11 = 23;
    uint64_t v33 = *v6;
    uint64_t v34 = *(void *)this;
    while (1)
    {
      uint64_t v12 = *((void *)this + 1);
      if (*(char *)(v12 + v11) < 0)
      {
        if (*(void *)(v12 + v11 - 15)) {
          break;
        }
      }
      else if (*(unsigned char *)(v12 + v11))
      {
        break;
      }
      if (*(_DWORD *)(v12 + v11 + 1) != -1) {
        break;
      }
      if (v34 == v33 && v8 == 0) {
        uint64_t v32 = "/";
      }
      else {
        uint64_t v32 = "//";
      }
      std::string::append(a2, v32);
LABEL_56:
      ++v8;
      v11 += 32;
      if (v9 == v8) {
        return;
      }
    }
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
      if (size)
      {
        long long v14 = (std::string *)a2->__r_.__value_.__r.__words[0];
LABEL_24:
        if (v14->__r_.__value_.__s.__data_[size - 1] != 47)
        {
          if (v10 == v8 && *((unsigned char *)this + 56)) {
            std::string::value_type v15 = 46;
          }
          else {
            std::string::value_type v15 = 47;
          }
          std::string::push_back(a2, v15);
        }
      }
    }
    else
    {
      std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      if (*((unsigned char *)&a2->__r_.__value_.__s + 23))
      {
        long long v14 = a2;
        goto LABEL_24;
      }
    }
    uint64_t v16 = (unsigned __int8 *)(*((void *)this + 1) + v11);
    std::string::size_type v17 = *v16;
    std::string::size_type v18 = *(void *)(v16 - 15);
    char v21 = *(const std::string::value_type **)(v16 - 23);
    uint64_t v19 = (const std::string::value_type *)(v16 - 23);
    unint64_t v20 = v21;
    if ((v17 & 0x80u) == 0) {
      unint64_t v22 = v19;
    }
    else {
      unint64_t v22 = v20;
    }
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v23 = v17;
    }
    else {
      std::string::size_type v23 = v18;
    }
    std::string::append(a2, v22, v23);
    int v24 = *(_DWORD *)(*((void *)this + 1) + v11 + 1);
    if (v24 != -1)
    {
      pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::GetText((pxrInternal__aapl__pxrReserved__::SdfPredicateExpression *)(*((void *)this + 4) + 72 * v24), &v35);
      uint64_t v25 = std::string::insert(&v35, 0, "{");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      uint64_t v27 = std::string::append(&v36, "}");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      int64_t v38 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (v38 >= 0) {
        uint64_t v29 = __p;
      }
      else {
        uint64_t v29 = (void **)__p[0];
      }
      if (v38 >= 0) {
        std::string::size_type v30 = HIBYTE(v38);
      }
      else {
        std::string::size_type v30 = (std::string::size_type)__p[1];
      }
      std::string::append(a2, (const std::string::value_type *)v29, v30);
      if (SHIBYTE(v38) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_56;
  }
}

void sub_216B012E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v30 + 23) < 0) {
    operator delete(*(void **)v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B0135C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v11 = (uint64_t)(v7 - *a1) >> 5;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v13 = v5 - *a1;
    if (v13 >> 4 > v12) {
      unint64_t v12 = v13 >> 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      std::string::value_type v15 = (char *)sub_2168707F4(result, v14);
    }
    else {
      std::string::value_type v15 = 0;
    }
    uint64_t v16 = &v15[32 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[32 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    int v18 = *((_DWORD *)a2 + 6);
    v16[28] = *((unsigned char *)a2 + 28);
    *((_DWORD *)v16 + 6) = v18;
    v19[2] = v16 + 32;
    sub_216B0B32C(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = sub_216870958((uint64_t)v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    int v9 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(v7 + 28) = *((unsigned char *)a2 + 28);
    *(_DWORD *)(v7 + 24) = v9;
    uint64_t v10 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v10;
  return result;
}

void sub_216B01484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216870958((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendProperty(uint64_t a1, size_t *a2)
{
  uint64_t v5 = 0;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  memset(v3, 0, sizeof(v3));
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendProperty(a1, a2, (uint64_t)v2);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v6 = (void **)v3 + 1;
  sub_2169B5C28(&v6);
  if (v2[0])
  {
    v2[1] = v2[0];
    operator delete(v2[0]);
  }
}

void sub_216B01508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendProperty(uint64_t a1, size_t *__s, uint64_t a3)
{
  int IsValidNamespacedIdentifier = pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier(__s);
  char v7 = IsValidNamespacedIdentifier;
  uint64_t v8 = *(void *)a3;
  uint64_t v9 = *(void *)(a3 + 8);
  if (IsValidNamespacedIdentifier && v8 == v9)
  {
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16))
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v18);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18, (int *)__p);
      sub_21697DE94((int *)a1, (int *)__p);
      sub_21697DEEC((int *)(a1 + 4), (int *)__p + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_21697C414(__p);
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_17;
    }
    goto LABEL_9;
  }
  if (v8 == v9)
  {
LABEL_9:
    int v11 = -1;
    goto LABEL_12;
  }
  unint64_t v10 = *(void *)(a1 + 40);
  int v11 = 954437177 * ((v10 - *(void *)(a1 + 32)) >> 3);
  if (v10 >= *(void *)(a1 + 48))
  {
    uint64_t v13 = sub_216B09D80((uint64_t *)(a1 + 32), a3);
  }
  else
  {
    *(void *)unint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(_OWORD *)unint64_t v10 = *(_OWORD *)a3;
    *(void *)(v10 + 16) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 40) = 0;
    *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 24);
    *(void *)(v10 + 40) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    long long v12 = *(_OWORD *)(a3 + 48);
    *(void *)(v10 + 64) = *(void *)(a3 + 64);
    *(_OWORD *)(v10 + 48) = v12;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 48) = 0;
    uint64_t v13 = v10 + 72;
  }
  *(void *)(a1 + 40) = v13;
LABEL_12:
  if (*((char *)__s + 23) < 0)
  {
    sub_216778F24(__p, (void *)*__s, __s[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)__s;
    size_t v15 = __s[2];
  }
  int v16 = v11;
  char v17 = v7;
  sub_216B0135C((uint64_t *)(a1 + 8), (long long *)__p);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
LABEL_17:
  *(unsigned char *)(a1 + 56) = 1;
}

void sub_216B016EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendProperty(uint64_t a1, size_t *a2, uint64_t a3)
{
  sub_2169B7AD8(v5, a3);
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendProperty(a1, a2, (uint64_t)v5);
  if (v8 < 0) {
    operator delete(__p);
  }
  uint64_t v9 = (void **)&v6;
  sub_2169B5C28(&v9);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_216B017A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, pxrInternal__aapl__pxrReserved__::SdfPathExpression *this)
{
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)__p, this);
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = sub_216779180(a1, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_216B01828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216B01844()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755268, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C755268, (char *)0x60, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B01904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B01948()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755278, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C755278, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B01A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *sub_216B01A4C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216B01A9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    sub_2169B59AC((void **)a1);
    if (a4 >> 59) {
      sub_21677CB10();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_2168C5234((void *)a1, v12);
    uint64_t result = sub_2169B72EC(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 32 * v14;
    sub_216B01BF0((uint64_t)&v19, a2, v15, (uint64_t)v9);
    uint64_t result = sub_2169B72EC(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = sub_216B01BF0((uint64_t)&v20, a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 32;
      uint64_t result = (uint64_t)sub_2169B5A1C(v8, v18);
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
  return result;
}

void sub_216B01BE0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216B01BE8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_216B01BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_2169C487C((int *)a4, (_DWORD *)v5);
    sub_2169C48D4((int *)(a4 + 4), (_DWORD *)(v5 + 4));
    std::string::operator=((std::string *)(a4 + 8), (const std::string *)(v5 + 8));
    a4 += 32;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_216B01C6C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6)
  {
    sub_2169B5A6C((void **)a1);
    if (a4 >> 58) {
      sub_21677CB10();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 5;
    if (v10 >> 5 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_2169B75D8((void *)a1, v12);
    uint64_t result = sub_2169B7654(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 6;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + (v14 << 6);
    sub_216B01E1C((uint64_t)&v19, a2, v15, (uint64_t)v9);
    uint64_t result = sub_2169B7654(v8, v15, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = sub_216B01E1C((uint64_t)&v20, a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 64;
      uint64_t result = (uint64_t)sub_2169B5ADC(v8, v18);
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
  return result;
}

void sub_216B01DB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216B01DB8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_216B01DC0(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 32);
  sub_2169B5B38(&v3);
  uint64_t v3 = (void **)(a1 + 8);
  sub_2168706D8(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_216B01E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_2169C487C((int *)a4, (_DWORD *)v5);
    sub_2169C48D4((int *)(a4 + 4), (_DWORD *)(v5 + 4));
    if (a4 != v5)
    {
      sub_216B01ED8(a4 + 8, *(std::string **)(v5 + 8), *(long long **)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 5);
      sub_216B02094(a4 + 32, *(void *)(v5 + 32), *(void *)(v5 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v5 + 40) - *(void *)(v5 + 32)) >> 3));
    }
    *(unsigned char *)(a4 + 56) = *(unsigned char *)(v5 + 56);
    a4 += 64;
    v5 += 64;
  }
  while (v5 != v6);
  return v6;
}

void sub_216B01ED8(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    sub_21697DE58((uint64_t *)a1);
    if (a4 >> 59) {
      sub_21677CB10();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_2168C5234((void *)a1, v12);
    uint64_t v13 = sub_2169B7858(v8, (long long *)__str, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = (std::string *)((char *)__str + 32 * v14);
    sub_216B02020(__str, v15, v9);
    uint64_t v13 = sub_2169B7858(v8, (long long *)v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_216B02020(__str, (std::string *)a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0) {
        operator delete(*(void **)(v18 - 32));
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_216B02010(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216B02018(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *sub_216B02020(std::string *__str, std::string *a2, std::string *this)
{
  char v4 = __str;
  if (__str == a2) {
    return __str;
  }
  uint64_t v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    std::string::value_type v6 = v4[1].__r_.__value_.__s.__data_[4];
    LODWORD(this[1].__r_.__value_.__l.__data_) = v4[1].__r_.__value_.__l.__data_;
    this[1].__r_.__value_.__s.__data_[4] = v6;
    this = (std::string *)((char *)this + 32);
    char v4 = (std::string *)((char *)v4 + 32);
  }
  while (v4 != v5);
  return v5;
}

void sub_216B02094(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(std::string **)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_216B02228((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_216873544((void *)a1, v11);
    unint64_t v12 = sub_2169B7A34(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_216B02298(a2, v13, v9);
    unint64_t v12 = sub_2169B7A34(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_216B02298(a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 72;
      sub_2169B5BD0(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_216B02218(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216B02220(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216B02228(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    char v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 72;
        sub_2169B5BD0((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      char v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_216B02298(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_216B022F8(a3, v4);
      v4 += 72;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

std::string *sub_216B022F8(std::string *a1, uint64_t a2)
{
  if (a1 != (std::string *)a2)
  {
    sub_216825D78((char *)a1, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    sub_216B02370((uint64_t)&a1[1], *(long long ***)(a2 + 24), *(long long ***)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  }
  std::string::operator=(a1 + 2, (const std::string *)(a2 + 48));
  return a1;
}

void sub_216B02370(uint64_t a1, long long **a2, long long **a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_216B02514((void **)a1);
    if (a4 > 0x492492492492492) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_2167B8760((void *)a1, v11);
    uint64_t v12 = sub_2169B7CC0(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    sub_216B02584((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = sub_2169B7CC0(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_216B02584((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 56;
      sub_2169B5CC0(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_216B02504(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216B0250C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216B02514(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        sub_2169B5CC0((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

long long **sub_216B02584(uint64_t a1, long long **a2, long long **a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  std::string::value_type v6 = a2 + 5;
  do
  {
    uint64_t v7 = v6 - 5;
    *(_DWORD *)a4 = *((_DWORD *)v6 - 10);
    std::string::operator=((std::string *)(a4 + 8), (const std::string *)(v6 - 4));
    if ((long long **)a4 != v6 - 5) {
      sub_216B02628(a4 + 32, (std::string *)*(v6 - 1), *v6, 0xCCCCCCCCCCCCCCCDLL * (((char *)*v6 - (char *)*(v6 - 1)) >> 3));
    }
    a4 += 56;
    v6 += 7;
  }
  while (v7 + 7 != v5);
  return v5;
}

void sub_216B02628(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  int v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_216B027AC((void **)a1);
    if (a4 > 0x666666666666666) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_2168724E8((void *)a1, v11);
    uint64_t v12 = sub_2169B7E9C(v8, (long long *)__str, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_216B0281C((int)&v17, __str, v13, v9);
    uint64_t v12 = sub_2169B7E9C(v8, (long long *)v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_216B0281C((int)&v18, __str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 40;
      sub_2169B5DA0(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_216B0279C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216B027A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_216B027AC(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 40;
        sub_2169B5DA0((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_216B0281C(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  std::string::value_type v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    sub_2168EC6DC(this[1].__r_.__value_.__r.__words, v5[1].__r_.__value_.__r.__words);
    this = (std::string *)((char *)this + 40);
    uint64_t v5 = (std::string *)((char *)v5 + 40);
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_216B0288C(void **a1, uint64_t a2)
{
  return ((uint64_t (*)(void, void, void))(*a1)[1])(**a1, *(unsigned int *)(*(void *)(a2 + 8) - 8), *(unsigned int *)(*(void *)(a2 + 8) - 4));
}

void sub_216B028A0(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPathExpression *a2, int a3)
{
  if (a2)
  {
    if (a3 != 2) {
      return;
    }
    uint64_t v5 = *(void *)(*a1 + 8);
    *(_OWORD *)uint64_t v25 = *(_OWORD *)(v5 - 96);
    uint64_t v26 = *(void *)(v5 - 80);
    *(void *)(v5 - 96) = 0;
    *(void *)(v5 - 88) = 0;
    *(void *)(v5 - 80) = 0;
    long long v27 = *(_OWORD *)(v5 - 72);
    uint64_t v28 = *(void *)(v5 - 56);
    *(void *)(v5 - 72) = 0;
    *(void *)(v5 - 64) = 0;
    *(void *)(v5 - 56) = 0;
    long long v29 = *(_OWORD *)(v5 - 48);
    uint64_t v30 = *(void *)(v5 - 32);
    *(void *)(v5 - 48) = 0;
    *(void *)(v5 - 40) = 0;
    *(void *)(v5 - 32) = 0;
    long long v6 = *(_OWORD *)(v5 - 24);
    uint64_t v32 = *(void *)(v5 - 8);
    long long v31 = v6;
    *(void *)(v5 - 16) = 0;
    *(void *)(v5 - 8) = 0;
    *(void *)(v5 - 24) = 0;
    uint64_t v7 = *a1;
    uint64_t v8 = *(void *)(*a1 + 8) - 96;
    sub_216B02BDC(*a1 + 16, v8);
    *(void *)(v7 + 8) = v8;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeOp(a2, (void *)(*(void *)(*a1 + 8) - 96), (uint64_t)v25, (uint64_t)__p);
    uint64_t v9 = *(void *)(*a1 + 8);
    unint64_t v10 = *(void **)(v9 - 96);
    if (v10)
    {
      *(void *)(v9 - 88) = v10;
      operator delete(v10);
      *(void *)(v9 - 96) = 0;
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 80) = 0;
    }
    *(_OWORD *)(v9 - 96) = *(_OWORD *)__p;
    *(void *)(v9 - 80) = v18;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v18 = 0;
    sub_2169B59AC((void **)(v9 - 72));
    *(_OWORD *)(v9 - 72) = v19;
    *(void *)(v9 - 56) = v20;
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    sub_2169B5A6C((void **)(v9 - 48));
    *(_OWORD *)(v9 - 48) = v21;
    *(void *)(v9 - 32) = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    unint64_t v11 = (void **)(v9 - 24);
    if (*(char *)(v9 - 1) < 0) {
      operator delete(*v11);
    }
    long long v12 = v23;
    *(void *)(v9 - 8) = v24;
    *(_OWORD *)unint64_t v11 = v12;
    HIBYTE(v24) = 0;
    LOBYTE(v23) = 0;
    uint64_t v33 = (void **)&v21;
    sub_2169B81EC(&v33);
    uint64_t v33 = (void **)&v19;
    sub_2169B74B8(&v33);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)v31);
    }
    __p[0] = &v29;
    sub_2169B81EC((void ***)__p);
    __p[0] = &v27;
  }
  else
  {
    if (a3 != 1) {
      return;
    }
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeComplement(*(void *)(*a1 + 8) - 96, (uint64_t)v25);
    uint64_t v13 = *(void *)(*a1 + 8);
    uint64_t v14 = *(void **)(v13 - 96);
    if (v14)
    {
      *(void *)(v13 - 88) = v14;
      operator delete(v14);
      *(void *)(v13 - 96) = 0;
      *(void *)(v13 - 88) = 0;
      *(void *)(v13 - 80) = 0;
    }
    *(_OWORD *)(v13 - 96) = *(_OWORD *)v25;
    *(void *)(v13 - 80) = v26;
    v25[0] = 0;
    v25[1] = 0;
    uint64_t v26 = 0;
    sub_2169B59AC((void **)(v13 - 72));
    *(_OWORD *)(v13 - 72) = v27;
    *(void *)(v13 - 56) = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    sub_2169B5A6C((void **)(v13 - 48));
    *(_OWORD *)(v13 - 48) = v29;
    *(void *)(v13 - 32) = v30;
    long long v29 = 0uLL;
    uint64_t v30 = 0;
    uint64_t v15 = (void **)(v13 - 24);
    if (*(char *)(v13 - 1) < 0) {
      operator delete(*v15);
    }
    long long v16 = v31;
    *(void *)(v13 - 8) = v32;
    *(_OWORD *)uint64_t v15 = v16;
    HIBYTE(v32) = 0;
    LOBYTE(v31) = 0;
    __p[0] = &v29;
    sub_2169B81EC((void ***)__p);
    __p[0] = &v27;
  }
  sub_2169B74B8((void ***)__p);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_216B02B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  sub_2169B81EC((void ***)&a9);
  sub_2169B74B8((void ***)&a9);
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void sub_216B02BDC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  uint64_t v4 = (void **)(a2 + 48);
  sub_2169B81EC(&v4);
  uint64_t v4 = (void **)(a2 + 24);
  sub_2169B74B8(&v4);
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void sub_216B02C44(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)a1;
  (*(void (**)(void **__return_ptr, void))(*(void *)(a1 + 8) + 8))(v6, **(void **)(a1 + 8));
  unint64_t v2 = v1[1];
  if (v2 >= v1[2])
  {
    uint64_t v4 = sub_216B02D70(v1, (uint64_t)v6);
    int v5 = SHIBYTE(v13);
    v1[1] = v4;
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(void *)(v2 + 16) = 0;
    *(void *)(v2 + 24) = 0;
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(_OWORD *)unint64_t v2 = *(_OWORD *)v6;
    *(void *)(v2 + 16) = v7;
    v6[0] = 0;
    v6[1] = 0;
    *(void *)(v2 + 32) = 0;
    *(void *)(v2 + 40) = 0;
    *(_OWORD *)(v2 + 24) = v8;
    *(void *)(v2 + 40) = v9;
    *(void *)(v2 + 48) = 0;
    uint64_t v7 = 0;
    long long v8 = 0uLL;
    uint64_t v9 = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 48) = v10;
    *(void *)(v2 + 64) = v11;
    long long v10 = 0uLL;
    long long v3 = *(_OWORD *)__p;
    *(void *)(v2 + 88) = v13;
    *(_OWORD *)(v2 + 72) = v3;
    uint64_t v11 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v13 = 0;
    v1[1] = v2 + 96;
  }
  uint64_t v14 = (void **)&v10;
  sub_2169B81EC(&v14);
  uint64_t v14 = (void **)&v8;
  sub_2169B74B8(&v14);
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_216B02D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_2173247A4((uint64_t)&a9, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t sub_216B02D70(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_21682B950((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  long long v10 = v7;
  uint64_t v11 = &v7[96 * v3];
  uint64_t v13 = &v7[96 * v6];
  sub_216B02E7C((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  long long v12 = v11 + 96;
  sub_216B02EF8(a1, &v10);
  uint64_t v8 = a1[1];
  sub_216B030B4(&v10);
  return v8;
}

void sub_216B02E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B030B4((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_216B02E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  __n128 result = *(__n128 *)(a3 + 72);
  *(void *)(a2 + 88) = *(void *)(a3 + 88);
  *(__n128 *)(a2 + 72) = result;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 72) = 0;
  return result;
}

uint64_t sub_216B02EF8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216B02F70((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216B02F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 96;
      sub_216B02E7C(a1, v7 - 96, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 96;
      *((void *)&v16 + 1) -= 96;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216B03028((uint64_t)v13);
  return v11;
}

uint64_t sub_216B03028(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216B03060((uint64_t *)a1);
  }
  return a1;
}

void sub_216B03060(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216B02BDC(v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
}

void **sub_216B030B4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216B030E8(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    sub_216B02BDC(v4, i - 96);
  }
}

void sub_216B03130(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  sub_216B0325C(a2, (char **)v7);
  unint64_t v3 = v2[1];
  if (v3 >= v2[2])
  {
    uint64_t v5 = sub_216B02D70(v2, (uint64_t)v7);
    int v6 = SHIBYTE(v14);
    v2[1] = v5;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = 0;
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(_OWORD *)unint64_t v3 = *(_OWORD *)v7;
    *(void *)(v3 + 16) = v8;
    v7[0] = 0;
    v7[1] = 0;
    *(void *)(v3 + 32) = 0;
    *(void *)(v3 + 40) = 0;
    *(_OWORD *)(v3 + 24) = v9;
    *(void *)(v3 + 40) = v10;
    *(void *)(v3 + 48) = 0;
    uint64_t v8 = 0;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    *(void *)(v3 + 56) = 0;
    *(void *)(v3 + 64) = 0;
    *(_OWORD *)(v3 + 48) = v11;
    *(void *)(v3 + 64) = v12;
    long long v11 = 0uLL;
    long long v4 = *(_OWORD *)__p;
    *(void *)(v3 + 88) = v14;
    *(_OWORD *)(v3 + 72) = v4;
    uint64_t v12 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v14 = 0;
    v2[1] = v3 + 96;
  }
  long long v15 = (void **)&v11;
  sub_2169B81EC(&v15);
  long long v15 = (void **)&v9;
  sub_2169B74B8(&v15);
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
}

void sub_216B03238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_2173247A4((uint64_t)&a9, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

_DWORD *sub_216B0325C@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  sub_2169B76F8((uint64_t)&v4, a1);
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom((uint64_t)&v4, a2);
  uint64_t v8 = (void **)&v7;
  sub_2169B5B38(&v8);
  uint64_t v8 = (void **)&v6;
  sub_2168706D8(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
  return sub_21697C414(&v4);
}

void sub_216B032D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B01DC0((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216B032E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  unint64_t v3 = (void *)(a2 + 8);
  int v4 = *(char *)(a2 + 31);
  if (v4 < 0)
  {
    if (*(void *)(a2 + 16) != 1) {
      return sub_216AFF334(a2, a3);
    }
    unint64_t v3 = (void *)*v3;
  }
  else if (v4 != 1)
  {
    return sub_216AFF334(a2, a3);
  }
  if (*(unsigned char *)v3 == 95) {
    return sub_2169B70E4(a3, *a1);
  }
  return sub_216AFF334(a2, a3);
}

void sub_216B03330(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int v6 = *(_DWORD *)(v4 - 8);
  int v5 = *(_DWORD *)(v4 - 4);
  uint64_t v7 = v4 - *a2;
  if ((unint64_t)v7 <= 8)
  {
    BOOL v10 = 0;
    BOOL v11 = v5 == 0;
  }
  else
  {
    uint64_t v8 = (v7 >> 3) - 2;
    int v9 = *(_DWORD *)(v3 + 8 * v8);
    if (v9 >= v6)
    {
      int v15 = *(_DWORD *)(v3 + 8 * v8 + 4);
      BOOL v10 = v9 == v6 && v15 == 2;
    }
    else
    {
      BOOL v10 = 1;
    }
    BOOL v11 = v5 == 0;
    if (v10 && !v5)
    {
      std::string::push_back(*(std::string **)(a1 + 16), 40);
      if (v6) {
        return;
      }
      BOOL v10 = 1;
LABEL_25:
      std::string::append(*(std::string **)(a1 + 16), "~");
      if (!v10 || v5 != 1) {
        return;
      }
      goto LABEL_27;
    }
  }
  if (v6)
  {
    if (v5 == 1)
    {
      switch(v6)
      {
        case 1:
          uint64_t v12 = *(std::string **)(a1 + 16);
          uint64_t v13 = " ";
          break;
        case 2:
          uint64_t v12 = *(std::string **)(a1 + 16);
          uint64_t v13 = " + ";
          break;
        case 3:
          uint64_t v12 = *(std::string **)(a1 + 16);
          uint64_t v13 = " & ";
          break;
        case 4:
          uint64_t v12 = *(std::string **)(a1 + 16);
          uint64_t v13 = " - ";
          break;
        default:
          uint64_t v12 = *(std::string **)(a1 + 16);
          uint64_t v13 = "<unknown>";
          break;
      }
      std::string::append(v12, v13);
      return;
    }
    if (v5 != 2 || !v10) {
      return;
    }
LABEL_27:
    char v17 = *(std::string **)(a1 + 16);
    std::string::push_back(v17, 41);
    return;
  }
  if (v11) {
    goto LABEL_25;
  }
  if (v5 == 1 && v10) {
    goto LABEL_27;
  }
}

void sub_216B034E8(std::string **a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)&v12);
  uint64_t v4 = std::string::insert(&v12, 0, "%");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v14 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v14 >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if (v14 >= 0) {
    std::string::size_type v7 = HIBYTE(v14);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(*a1, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  int v8 = *((char *)this + 31);
  if (v8 < 0)
  {
    if (*((void *)this + 2) != 1) {
      goto LABEL_18;
    }
    int v9 = (unsigned char *)*((void *)this + 1);
  }
  else
  {
    int v9 = (char *)this + 8;
    if (v8 != 1) {
      goto LABEL_18;
    }
  }
  if (*v9 == 95)
  {
    sub_216779094(__p, "_");
    goto LABEL_19;
  }
LABEL_18:
  std::operator+<char>();
LABEL_19:
  if (v14 >= 0) {
    BOOL v10 = __p;
  }
  else {
    BOOL v10 = (void **)__p[0];
  }
  if (v14 >= 0) {
    std::string::size_type v11 = HIBYTE(v14);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(*a1, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B03620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B03668(std::string **a1, pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *this)
{
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::GetText(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(*a1, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216B036D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B036EC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_216B08F18((uint64_t *)(a1[1] - 48), a2);
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    do
    {
      v3 -= 48;
      sub_216B03B00((uint64_t)(a1 + 2), v3);
    }
    while (v3 != v4);
  }
  a1[1] = v4;
}

void **sub_216B0374C(void **a1)
{
  sub_216B03BC4((uint64_t)(a1 + 3));
  uint64_t v3 = a1;
  sub_216B03C60(&v3);
  return a1;
}

uint64_t sub_216B0378C(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::PathPattern((pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *)(a1 + 24));
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  sub_216B03820((uint64_t *)a1);
  return a1;
}

void sub_216B037F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B03BC4(v2);
  sub_216B03C60((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_216B03820(uint64_t *a1)
{
  unint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v3 = v4;
  long long v5 = *(result - 1);
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 4);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0x555555555555555) {
      sub_21677CB10();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    v13[4] = result;
    if (v10) {
      std::string::size_type v11 = (char *)sub_2168073F4((uint64_t)result, v10);
    }
    else {
      std::string::size_type v11 = 0;
    }
    std::string v12 = &v11[48 * v7];
    v13[0] = v11;
    v13[1] = v12;
    void v13[3] = &v11[48 * v10];
    *(_OWORD *)std::string v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    v13[2] = v12 + 48;
    sub_216B03938(a1, v13);
    int v6 = (_OWORD *)a1[1];
    uint64_t result = sub_216B03B48(v13);
  }
  else
  {
    v5[1] = 0u;
    v5[2] = 0u;
    _OWORD *v5 = 0u;
    int v6 = v5 + 3;
    a1[1] = (uint64_t)(v5 + 3);
  }
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_216B03924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B03B48((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B03938(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216B039B0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216B039B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      long long v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(v7 - 32) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 8) = *(void *)(a3 + 40);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216B03A74((uint64_t)v11);
  return v9;
}

uint64_t sub_216B03A74(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216B03AAC((uint64_t *)a1);
  }
  return a1;
}

void sub_216B03AAC(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216B03B00(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void sub_216B03B00(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void **)(a2 + 24);
  sub_216B0B294(&v4);
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void **sub_216B03B48(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216B03B7C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_216B03B00(v4, i - 48);
  }
}

_DWORD *sub_216B03BC4(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  uint64_t v4 = (void **)(a1 + 112);
  sub_2169B5C28(&v4);
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v4 = (void **)(a1 + 32);
  sub_2169B5B38(&v4);
  uint64_t v4 = (void **)(a1 + 8);
  sub_2168706D8(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_21697C414((_DWORD *)a1);
}

void sub_216B03C60(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_216B03B00((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216B03CF8(uint64_t a1, uint64_t *a2)
{
  sub_216B040AC(a1, (uint64_t)a2);
  if ((sub_216B0463C(a1, (uint64_t)a2) & 1) == 0)
  {
    sub_216B04A2C(a1, (uint64_t)a2);
    if ((v4 & 1) == 0)
    {
      long long v20 = *(_OWORD *)(a1 + 32);
      if ((void)v20 == *(void *)(a1 + 64) || *(unsigned char *)v20 != 40) {
        return 0;
      }
      uint64_t v5 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v20 + 1;
      *(void *)(a1 + 40) = v5;
      ++*(void *)(a1 + 56);
      sub_216B03820(a2);
      if ((sub_216B08C38((void *)a1, (uint64_t)a2) & 1) == 0) {
        sub_216B08C8C(a1);
      }
      if ((sub_216B08DD4(a1, (uint64_t)a2) & 1) == 0) {
        sub_216B0903C(a1);
      }
    }
  }
  uint64_t v6 = (long long *)(a1 + 32);
  long long v18 = *(_OWORD *)(a1 + 32);
  long long v19 = *(_OWORD *)(a1 + 48);
  long long v21 = v18;
  long long v25 = v19;
  if (sub_216B09184(a1))
  {
    while (1)
    {
      int v7 = sub_216B092F8((void *)a1, (uint64_t)a2);
      *uint64_t v6 = v21;
      *(_OWORD *)(a1 + 48) = v25;
      if (!v7) {
        break;
      }
      long long v22 = *v6;
      long long v26 = *(_OWORD *)(a1 + 48);
      while ((sub_2169C5224((void *)a1) & 1) != 0)
        ;
      long long v8 = *(unsigned char **)(a1 + 32);
      if (v8 == *(unsigned char **)(a1 + 64) || *v8 != 43)
      {
        *uint64_t v6 = v22;
        *(_OWORD *)(a1 + 48) = v26;
        long long v23 = *v6;
        long long v27 = *(_OWORD *)(a1 + 48);
        while ((sub_2169C5224((void *)a1) & 1) != 0)
          ;
        unint64_t v10 = *(unsigned char **)(a1 + 32);
        if (v10 == *(unsigned char **)(a1 + 64) || *v10 != 38)
        {
          *uint64_t v6 = v23;
          *(_OWORD *)(a1 + 48) = v27;
          long long v24 = *v6;
          long long v28 = *(_OWORD *)(a1 + 48);
          while ((sub_2169C5224((void *)a1) & 1) != 0)
            ;
          char v12 = *(unsigned char **)(a1 + 32);
          if (v12 == *(unsigned char **)(a1 + 64) || *v12 != 45)
          {
            *uint64_t v6 = v24;
            *(_OWORD *)(a1 + 48) = v28;
            long long v21 = *v6;
            long long v25 = *(_OWORD *)(a1 + 48);
            if (!sub_2169C5224((void *)a1)) {
              goto LABEL_40;
            }
            while ((sub_2169C5224((void *)a1) & 1) != 0)
              ;
            sub_216B04174((char **)(a2[1] - 48), 1);
          }
          else
          {
            uint64_t v13 = *(void *)(a1 + 40) + 1;
            *(void *)(a1 + 32) = v12 + 1;
            *(void *)(a1 + 40) = v13;
            ++*(void *)(a1 + 56);
            sub_216B04174((char **)(a2[1] - 48), 4);
            while ((sub_2169C5224((void *)a1) & 1) != 0)
              ;
          }
        }
        else
        {
          uint64_t v11 = *(void *)(a1 + 40) + 1;
          *(void *)(a1 + 32) = v10 + 1;
          *(void *)(a1 + 40) = v11;
          ++*(void *)(a1 + 56);
          sub_216B04174((char **)(a2[1] - 48), 3);
          while ((sub_2169C5224((void *)a1) & 1) != 0)
            ;
        }
      }
      else
      {
        uint64_t v9 = *(void *)(a1 + 40) + 1;
        *(void *)(a1 + 32) = v8 + 1;
        *(void *)(a1 + 40) = v9;
        ++*(void *)(a1 + 56);
        sub_216B04174((char **)(a2[1] - 48), 2);
        while ((sub_2169C5224((void *)a1) & 1) != 0)
          ;
      }
      sub_216B040AC(a1, (uint64_t)a2);
      if ((sub_216B0463C(a1, (uint64_t)a2) & 1) == 0)
      {
        sub_216B04A2C(a1, (uint64_t)a2);
        if ((v14 & 1) == 0)
        {
          int v15 = *(unsigned char **)(a1 + 32);
          if (v15 == *(unsigned char **)(a1 + 64) || *v15 != 40) {
            break;
          }
          uint64_t v16 = *(void *)(a1 + 40) + 1;
          *(void *)(a1 + 32) = v15 + 1;
          *(void *)(a1 + 40) = v16;
          ++*(void *)(a1 + 56);
          sub_216B03820(a2);
          if ((sub_216B08C38((void *)a1, (uint64_t)a2) & 1) == 0) {
            sub_216B08C8C(a1);
          }
          if ((sub_216B08DD4(a1, (uint64_t)a2) & 1) == 0) {
            sub_216B0903C(a1);
          }
        }
      }
      long long v18 = *v6;
      long long v19 = *(_OWORD *)(a1 + 48);
      long long v21 = *v6;
      long long v25 = v19;
      if ((sub_216B09184(a1) & 1) == 0) {
        goto LABEL_40;
      }
    }
  }
  else
  {
LABEL_40:
    *uint64_t v6 = v21;
    *(_OWORD *)(a1 + 48) = v25;
  }
  *uint64_t v6 = v18;
  *(_OWORD *)(a1 + 48) = v19;
  return 1;
}

void sub_216B04074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14)
{
  _OWORD *v14 = a13;
  v14[1] = a14;
  _Unwind_Resume(a1);
}

__n128 sub_216B040AC(uint64_t a1, uint64_t a2)
{
  char v4 = (__n128 *)(a1 + 32);
  __n128 v8 = *(__n128 *)(a1 + 32);
  __n128 v9 = *(__n128 *)(a1 + 48);
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  uint64_t v5 = *(unsigned char **)(a1 + 32);
  if (v5 == *(unsigned char **)(a1 + 64) || *v5 != 126)
  {
    __n128 result = v8;
    __n128 *v4 = v8;
    v4[1] = v9;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v5 + 1;
    *(void *)(a1 + 40) = v6;
    ++*(void *)(a1 + 56);
    sub_216B04174((char **)(*(void *)(a2 + 8) - 48), 0);
    while ((sub_2169C5224((void *)a1) & 1) != 0)
      ;
  }
  return result;
}

void sub_216B04160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12)
{
  _OWORD *v12 = a11;
  v12[1] = a12;
  _OWORD *v12 = a9;
  v12[1] = a10;
  _Unwind_Resume(a1);
}

void sub_216B04174(char **a1, int a2)
{
  for (uint64_t i = *a1; ; uint64_t i = *a1)
  {
    uint64_t v5 = a1[1];
    if (i == v5) {
      break;
    }
    if (*((_DWORD *)v5 - 1) > a2) {
      goto LABEL_6;
    }
    sub_216B0427C(a1);
  }
  uint64_t v5 = i;
LABEL_6:
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = (v5 - i) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v10 = v6 - (void)i;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      char v12 = (char *)sub_21677EA28((uint64_t)(a1 + 2), v11);
      uint64_t i = *a1;
      uint64_t v5 = a1[1];
    }
    else
    {
      char v12 = 0;
    }
    uint64_t v13 = &v12[4 * v8];
    char v14 = &v12[4 * v11];
    *(_DWORD *)uint64_t v13 = a2;
    int v7 = v13 + 4;
    while (v5 != i)
    {
      int v15 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *a1 = v13;
    a1[1] = v7;
    a1[2] = v14;
    if (i) {
      operator delete(i);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v5 = a2;
    int v7 = v5 + 4;
  }
  a1[1] = v7;
}

void sub_216B0427C(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)*(unsigned int *)(v2 - 4);
  a1[1] = v2 - 4;
  char v4 = a1 + 3;
  uint64_t v5 = a1[4];
  long long v35 = *(_OWORD *)(v5 - 96);
  uint64_t v36 = *(void *)(v5 - 80);
  *(void *)(v5 - 96) = 0;
  *(void *)(v5 - 88) = 0;
  *(void *)(v5 - 80) = 0;
  long long v37 = *(_OWORD *)(v5 - 72);
  uint64_t v38 = *(void *)(v5 - 56);
  *(void *)(v5 - 72) = 0;
  *(void *)(v5 - 64) = 0;
  *(void *)(v5 - 56) = 0;
  long long v39 = *(_OWORD *)(v5 - 48);
  uint64_t v40 = *(void *)(v5 - 32);
  *(void *)(v5 - 48) = 0;
  *(void *)(v5 - 40) = 0;
  *(void *)(v5 - 32) = 0;
  long long v6 = *(_OWORD *)(v5 - 24);
  uint64_t v42 = *(void *)(v5 - 8);
  long long v41 = v6;
  *(void *)(v5 - 16) = 0;
  *(void *)(v5 - 8) = 0;
  *(void *)(v5 - 24) = 0;
  uint64_t v7 = a1[4];
  uint64_t v8 = (uint64_t)(a1 + 5);
  sub_216B02BDC((uint64_t)(a1 + 5), v7 - 96);
  a1[4] = v7 - 96;
  if (v3)
  {
    *(_OWORD *)long long v27 = *(_OWORD *)(v7 - 192);
    uint64_t v28 = *(void *)(v7 - 176);
    *(void *)(v7 - 192) = 0;
    *(void *)(v7 - 184) = 0;
    *(void *)(v7 - 176) = 0;
    long long v29 = *(_OWORD *)(v7 - 168);
    uint64_t v30 = *(void *)(v7 - 152);
    *(void *)(v7 - 168) = 0;
    *(void *)(v7 - 160) = 0;
    *(void *)(v7 - 152) = 0;
    long long v31 = *(_OWORD *)(v7 - 144);
    uint64_t v32 = *(void *)(v7 - 128);
    *(void *)(v7 - 144) = 0;
    *(void *)(v7 - 136) = 0;
    *(void *)(v7 - 128) = 0;
    long long v9 = *(_OWORD *)(v7 - 120);
    uint64_t v34 = *(void *)(v7 - 104);
    long long v33 = v9;
    *(void *)(v7 - 112) = 0;
    *(void *)(v7 - 104) = 0;
    *(void *)(v7 - 120) = 0;
    uint64_t v10 = a1[4] - 96;
    sub_216B02BDC(v8, v10);
    a1[4] = v10;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeOp(v3, v27, (uint64_t)&v35, (uint64_t)v19);
    unint64_t v11 = a1[4];
    if (v11 >= a1[5])
    {
      uint64_t v15 = sub_216B02D70(v4, (uint64_t)v19);
      int v16 = SHIBYTE(v26);
      a1[4] = v15;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = 0;
      *(void *)unint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v19;
      *(void *)(v11 + 16) = v20;
      v19[0] = 0;
      v19[1] = 0;
      *(void *)(v11 + 32) = 0;
      *(void *)(v11 + 40) = 0;
      *(_OWORD *)(v11 + 24) = v21;
      *(void *)(v11 + 40) = v22;
      *(void *)(v11 + 48) = 0;
      uint64_t v20 = 0;
      long long v21 = 0uLL;
      uint64_t v22 = 0;
      *(void *)(v11 + 56) = 0;
      *(void *)(v11 + 64) = 0;
      *(_OWORD *)(v11 + 48) = v23;
      *(void *)(v11 + 64) = v24;
      long long v23 = 0uLL;
      long long v12 = *(_OWORD *)__p;
      *(void *)(v11 + 88) = v26;
      *(_OWORD *)(v11 + 72) = v12;
      uint64_t v24 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v26 = 0;
      a1[4] = v11 + 96;
    }
    uint64_t v43 = (void **)&v23;
    sub_2169B81EC(&v43);
    uint64_t v43 = (void **)&v21;
    sub_2169B74B8(&v43);
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete((void *)v33);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeComplement((uint64_t)&v35, (uint64_t)v27);
    unint64_t v13 = a1[4];
    if (v13 >= a1[5])
    {
      uint64_t v17 = sub_216B02D70(v4, (uint64_t)v27);
      int v18 = SHIBYTE(v34);
      a1[4] = v17;
      if (v18 < 0) {
        operator delete((void *)v33);
      }
    }
    else
    {
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 24) = 0;
      *(void *)unint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v27;
      *(void *)(v13 + 16) = v28;
      v27[0] = 0;
      v27[1] = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 40) = 0;
      *(_OWORD *)(v13 + 24) = v29;
      *(void *)(v13 + 40) = v30;
      *(void *)(v13 + 48) = 0;
      uint64_t v28 = 0;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      *(void *)(v13 + 56) = 0;
      *(void *)(v13 + 64) = 0;
      *(_OWORD *)(v13 + 48) = v31;
      *(void *)(v13 + 64) = v32;
      long long v31 = 0uLL;
      long long v14 = v33;
      *(void *)(v13 + 88) = v34;
      *(_OWORD *)(v13 + 72) = v14;
      uint64_t v32 = 0;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      a1[4] = v13 + 96;
    }
  }
  v19[0] = &v31;
  sub_2169B81EC((void ***)v19);
  v19[0] = &v29;
  sub_2169B74B8((void ***)v19);
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  v27[0] = &v39;
  sub_2169B81EC((void ***)v27);
  v27[0] = &v37;
  sub_2169B74B8((void ***)v27);
  if ((void)v35)
  {
    *((void *)&v35 + 1) = v35;
    operator delete((void *)v35);
  }
}

void sub_216B04604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_2169B5940((uint64_t)va);
  sub_2169B5940(v13 - 176);
  _Unwind_Resume(a1);
}

uint64_t sub_216B0463C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 32;
  long long v21 = *(_OWORD *)(a1 + 32);
  long long v23 = *(_OWORD *)(a1 + 48);
  if (sub_216B04C78((void *)a1)
    && (long long v5 = *(_OWORD *)(v4 + 16),
        *(_OWORD *)std::string __p = *(_OWORD *)v4,
        long long v28 = v5,
        char v6 = sub_216B04CD0((void *)a1),
        long long v7 = v28,
        *(_OWORD *)uint64_t v4 = *(_OWORD *)__p,
        *(_OWORD *)(v4 + 16) = v7,
        (v6 & 1) == 0))
  {
    v31.__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v31.__r_.__value_.__r.__words + 1);
    sub_216779094(__p, "_");
    sub_216B04D3C((uint64_t *)(*(void *)(a2 + 8) - 48), (int *)&v31, (uint64_t)__p);
    if (SBYTE7(v28) < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v31.__r_.__value_.__r.__words + 1);
    sub_21697C414(&v31);
  }
  else
  {
    *(_OWORD *)uint64_t v4 = v21;
    *(_OWORD *)(v4 + 16) = v23;
    long long v22 = *(_OWORD *)v4;
    long long v24 = *(_OWORD *)(v4 + 16);
    uint64_t v8 = *(unsigned char **)(a1 + 32);
    long long v9 = *(unsigned char **)(a1 + 64);
    if (v8 == v9 || *v8 != 37) {
      goto LABEL_18;
    }
    uint64_t v10 = v8 + 1;
    uint64_t v11 = *(void *)(a1 + 40);
    *(void *)(a1 + 32) = v8 + 1;
    *(void *)(a1 + 40) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v12 + 1;
    long long v25 = *(_OWORD *)(a1 + 40);
    uint64_t v26 = v12 + 1;
    long long v13 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)v4;
    long long v28 = v13;
    if (v8 + 1 == v9
      || *v10 != 47
      || (*(void *)(a1 + 32) = v8 + 2,
          *(void *)(a1 + 40) = v11 + 2,
          *(void *)(a1 + 56) = v12 + 2,
          !sub_216B04EEC(a1)))
    {
      long long v14 = v28;
      *(_OWORD *)uint64_t v4 = *(_OWORD *)__p;
      *(_OWORD *)(v4 + 16) = v14;
      long long v15 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)std::string __p = *(_OWORD *)v4;
      long long v28 = v15;
      if (sub_216B0503C(a1, a2))
      {
        sub_216B050EC(a1, a2);
      }
      else
      {
        long long v16 = v28;
        *(_OWORD *)uint64_t v4 = *(_OWORD *)__p;
        *(_OWORD *)(v4 + 16) = v16;
      }
      uint64_t v17 = *(unsigned char **)(a1 + 32);
      if (v17 == *(unsigned char **)(a1 + 64) || *v17 != 47)
      {
        if (!sub_216B04FC4((void *)a1)) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v18 = *(void *)(a1 + 40) + 1;
        *(void *)(a1 + 32) = v17 + 1;
        *(void *)(a1 + 40) = v18;
        ++*(void *)(a1 + 56);
        if ((sub_216B04EEC(a1) & 1) == 0)
        {
LABEL_17:
          *(void *)uint64_t v4 = v10;
          *(_OWORD *)(a1 + 40) = v25;
          *(void *)(a1 + 56) = v26;
LABEL_18:
          uint64_t result = 0;
          *(_OWORD *)uint64_t v4 = v22;
          *(_OWORD *)(v4 + 16) = v24;
          return result;
        }
      }
    }
    sub_21682E90C(&v31, v10, *(char **)v4, *(void *)v4 - (void)v10);
    pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix((uint64_t)&v31, 58, (std::string *)__p);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    uint64_t v20 = (void *)BYTE7(v28);
    if (SBYTE7(v28) < 0) {
      uint64_t v20 = __p[1];
    }
    if (v20)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v30, __p);
    }
    else
    {
      uint64_t v30 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v30);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v30 + 1);
    }
    sub_21682E90C(&v29, v10, *(char **)v4, *(void *)v4 - (void)v10);
    pxrInternal__aapl__pxrReserved__::TfStringGetSuffix(&v29, 58, &v31);
    sub_216B04D3C((uint64_t *)(*(void *)(a2 + 8) - 48), (int *)&v30, (uint64_t)&v31);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
    sub_21697C414(&v30);
    if (SBYTE7(v28) < 0) {
      operator delete(__p[0]);
    }
  }
  return 1;
}

void sub_216B04950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long __p, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a19 < 0) {
    operator delete((void *)__p);
  }
  *long long v27 = a9;
  v27[1] = a10;
  _Unwind_Resume(exception_object);
}

__n128 sub_216B04A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (__n128 *)(a1 + 32);
  __n128 v16 = *(__n128 *)(a1 + 32);
  __n128 v17 = *(__n128 *)(a1 + 48);
  long long v5 = *(unsigned char **)(a1 + 32);
  if (v5 != *(unsigned char **)(a1 + 64) && *v5 == 47)
  {
    char v6 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
    sub_216B053D0(a2 + 24, v6);
    if ((sub_216B05454(a1, a2) & 1) == 0)
    {
      long long v7 = *(unsigned char **)(a1 + 32);
      if (v7 == *(unsigned char **)(a1 + 64) || *v7 != 47) {
        sub_216B0557C(a1);
      }
      uint64_t v8 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v7 + 1;
      *(void *)(a1 + 40) = v8;
      ++*(void *)(a1 + 56);
    }
LABEL_7:
    sub_216B051A0(a1, a2);
LABEL_15:
    sub_216B08A00(a2);
    return result;
  }
  __n128 v20 = *v4;
  __n128 v21 = *(__n128 *)(a1 + 48);
  if (sub_216B0503C(a1, a2))
  {
    sub_216B050EC(a1, a2);
    if ((sub_216B05454(a1, a2) & 1) == 0)
    {
      long long v9 = *(unsigned char **)(a1 + 32);
      if (v9 == *(unsigned char **)(a1 + 64) || *v9 != 47) {
        goto LABEL_15;
      }
      uint64_t v10 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v9 + 1;
      *(void *)(a1 + 40) = v10;
      ++*(void *)(a1 + 56);
    }
    goto LABEL_7;
  }
  __n128 *v4 = v20;
  v4[1] = v21;
  uint64_t v11 = sub_216B051A0(a1, a2);
  if (v11) {
    goto LABEL_15;
  }
  long long v13 = *(unsigned char **)(a1 + 32);
  if (v13 != *(unsigned char **)(a1 + 64) && *v13 == 46)
  {
    uint64_t v14 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v13 + 1;
    *(void *)(a1 + 40) = v14;
    ++*(void *)(a1 + 56);
    long long v15 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v11);
    sub_216B053D0(a2 + 24, v15);
    __n128 v18 = *v4;
    __n128 v19 = v4[1];
    if (sub_216B05524((void *)a1))
    {
      sub_216B054C0(a2);
      sub_216B051A0(a1, a2);
    }
    else
    {
      __n128 *v4 = v18;
      v4[1] = v19;
    }
    goto LABEL_15;
  }
  __n128 result = v16;
  __n128 *v4 = v16;
  v4[1] = v17;
  return result;
}

void sub_216B04C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12)
{
  _OWORD *v12 = a11;
  v12[1] = a12;
  _OWORD *v12 = a9;
  v12[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B04C78(void *a1)
{
  uint64_t v1 = (_WORD *)a1[4];
  if (a1[8] - (void)v1 < 2uLL || *v1 != 24357) {
    return 0;
  }
  uint64_t v3 = a1[5] + 2;
  a1[4] = v1 + 1;
  a1[5] = v3;
  a1[7] += 2;
  return 1;
}

uint64_t sub_216B04CD0(void *a1)
{
  if (sub_2169C827C(a1)) {
    return 1;
  }
  uint64_t v2 = (unsigned char *)a1[4];
  if (v2 != (unsigned char *)a1[8] && *v2 == 58)
  {
    uint64_t v3 = a1[5] + 1;
    a1[4] = v2 + 1;
    a1[5] = v3;
    ++a1[7];
    return 1;
  }
  return 0;
}

_DWORD *sub_216B04D3C(uint64_t *a1, int *a2, uint64_t a3)
{
  int v11 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a2);
  int v12 = a2[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a2 + 1);
  *(_OWORD *)long long v13 = *(_OWORD *)a3;
  uint64_t v14 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom((uint64_t)&v11, (char **)v15);
  unint64_t v6 = a1[4];
  if (v6 >= a1[5])
  {
    uint64_t v8 = sub_216B02D70(a1 + 3, (uint64_t)v15);
    int v9 = SHIBYTE(v22);
    a1[4] = v8;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0;
    *(void *)unint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v15;
    *(void *)(v6 + 16) = v16;
    v15[0] = 0;
    v15[1] = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 40) = 0;
    *(_OWORD *)(v6 + 24) = v17;
    *(void *)(v6 + 40) = v18;
    *(void *)(v6 + 48) = 0;
    uint64_t v16 = 0;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    *(void *)(v6 + 56) = 0;
    *(void *)(v6 + 64) = 0;
    *(_OWORD *)(v6 + 48) = v19;
    *(void *)(v6 + 64) = v20;
    long long v19 = 0uLL;
    long long v7 = *(_OWORD *)__p;
    *(void *)(v6 + 88) = v22;
    *(_OWORD *)(v6 + 72) = v7;
    uint64_t v20 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v22 = 0;
    a1[4] = v6 + 96;
  }
  long long v23 = (void **)&v19;
  sub_2169B81EC(&v23);
  long long v23 = (void **)&v17;
  sub_2169B74B8(&v23);
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  return sub_21697C414(&v11);
}

void sub_216B04EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_216B04EEC(uint64_t a1)
{
  uint64_t result = sub_2169C89C8((void *)a1);
  if (result)
  {
    while ((sub_2169C827C((void *)a1) & 1) != 0)
      ;
    uint64_t v4 = (long long *)(a1 + 32);
    uint64_t v3 = *(unsigned char **)(a1 + 32);
    long long v7 = *(_OWORD *)(a1 + 32);
    long long v8 = *(_OWORD *)(a1 + 48);
    for (uint64_t i = *(unsigned char **)(a1 + 64); v3 != i; uint64_t i = *(unsigned char **)(a1 + 64))
    {
      if (*v3 != 47) {
        break;
      }
      uint64_t v6 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v3 + 1;
      *(void *)(a1 + 40) = v6;
      ++*(void *)(a1 + 56);
      if (!sub_2169C89C8((void *)a1)) {
        break;
      }
      while ((sub_2169C827C((void *)a1) & 1) != 0)
        ;
      long long v7 = *v4;
      long long v8 = *(_OWORD *)(a1 + 48);
      uint64_t v3 = *(unsigned char **)(a1 + 32);
    }
    long long *v4 = v7;
    *(_OWORD *)(a1 + 48) = v8;
    return sub_216B04FC4((void *)a1);
  }
  return result;
}

uint64_t sub_216B04FC4(void *a1)
{
  uint64_t v1 = (unsigned char *)a1[4];
  if (v1 == (unsigned char *)a1[8] || *v1 != 58) {
    return 0;
  }
  uint64_t v3 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v3;
  ++a1[7];
  uint64_t result = sub_2169C89C8(a1);
  if (result)
  {
    while ((sub_2169C827C(a1) & 1) != 0)
      ;
    return 1;
  }
  return result;
}

uint64_t sub_216B0503C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (_OWORD *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 48);
  uint64_t v4 = sub_2169C90A0((void *)a1);
  if (v4)
  {
    sub_216779094(__p, "..");
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(a2 + 24, (uint64_t)__p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *uint64_t v3 = v6;
    v3[1] = v7;
  }
  return v4;
}

void sub_216B050C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  *long long v17 = a9;
  v17[1] = a10;
  _Unwind_Resume(exception_object);
}

__n128 sub_216B050EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (__n128 *)(a1 + 32);
  __n128 v8 = *(__n128 *)(a1 + 32);
  uint64_t v2 = (unsigned char *)v8.n128_u64[0];
  for (i = *(__n128 *)(a1 + 48); v2 != *(unsigned char **)(a1 + 64); uint64_t v2 = *(unsigned char **)(a1 + 32))
  {
    if (*v2 != 47) {
      break;
    }
    uint64_t v6 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v2 + 1;
    *(void *)(a1 + 40) = v6;
    ++*(void *)(a1 + 56);
    if ((sub_216B0503C(a1, a2) & 1) == 0) {
      break;
    }
    __n128 v8 = *v3;
    __n128 i = v3[1];
  }
  __n128 result = v8;
  *uint64_t v3 = v8;
  v3[1] = i;
  return result;
}

void sub_216B05194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *uint64_t v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B051A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a1 + 32);
  long long v14 = *(_OWORD *)(a1 + 32);
  long long v15 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_216B056C4(a1, a2);
  if (v5)
  {
    long long v16 = *v4;
    long long v18 = v4[1];
    *(_OWORD *)uint64_t v20 = *v4;
    v21[0] = v18;
    if (sub_216B08568((void *)a1))
    {
      while (1)
      {
        int v6 = sub_216B085D4((void *)a1, a2);
        long long v7 = v21[0];
        long long *v4 = *(_OWORD *)v20;
        v4[1] = v7;
        if (!v6) {
          break;
        }
        if ((sub_216B05454(a1, a2) & 1) == 0)
        {
          __n128 v8 = *(unsigned char **)(a1 + 32);
          if (v8 == *(unsigned char **)(a1 + 64) || *v8 != 47) {
            break;
          }
          uint64_t v9 = *(void *)(a1 + 40) + 1;
          *(void *)(a1 + 32) = v8 + 1;
          *(void *)(a1 + 40) = v9;
          ++*(void *)(a1 + 56);
        }
        if ((sub_216B056C4(a1, a2) & 1) == 0) {
          break;
        }
        long long v16 = *v4;
        long long v18 = v4[1];
        *(_OWORD *)uint64_t v20 = *v4;
        v21[0] = v18;
        if ((sub_216B08568((void *)a1) & 1) == 0) {
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      long long v10 = v21[0];
      long long *v4 = *(_OWORD *)v20;
      v4[1] = v10;
    }
    long long *v4 = v16;
    v4[1] = v18;
    sub_216B05454(a1, a2);
    int v11 = *(unsigned char **)(a1 + 32);
    if (v11 != *(unsigned char **)(a1 + 64) && *v11 == 46)
    {
      uint64_t v12 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v11 + 1;
      *(void *)(a1 + 40) = v12;
      ++*(void *)(a1 + 56);
      long long v17 = *v4;
      long long v19 = v4[1];
      if (!sub_216B057AC(a1, a2))
      {
        long long *v4 = v17;
        v4[1] = v19;
        sub_216B088B8(a1);
      }
      pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendProperty(a2 + 24, (size_t *)(a2 + 88), a2 + 112);
      if (*(char *)(a2 + 111) < 0)
      {
        **(unsigned char **)(a2 + 88) = 0;
        *(void *)(a2 + 96) = 0;
      }
      else
      {
        *(unsigned char *)(a2 + 88) = 0;
        *(unsigned char *)(a2 + 111) = 0;
      }
      uint64_t v23 = 0;
      *(_OWORD *)std::string __p = 0u;
      *(_OWORD *)uint64_t v20 = 0u;
      memset(v21, 0, sizeof(v21));
      sub_216B081A0(a2 + 112, (uint64_t)v20);
      if (SHIBYTE(v23) < 0) {
        operator delete(__p[0]);
      }
      long long v24 = (void **)v21 + 1;
      sub_2169B5C28(&v24);
      if (v20[0])
      {
        v20[1] = v20[0];
        operator delete(v20[0]);
      }
    }
  }
  else
  {
    long long *v4 = v14;
    v4[1] = v15;
  }
  return v5;
}

void sub_216B053A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12)
{
  _OWORD *v12 = a11;
  v12[1] = a12;
  _OWORD *v12 = a9;
  v12[1] = a10;
  _Unwind_Resume(a1);
}

_DWORD *sub_216B053D0(uint64_t a1, _DWORD *a2)
{
  sub_216981010(&v5, a2);
  sub_21698105C(&v6, a2 + 1);
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::SetPrefix(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_21697C414(&v5);
}

void sub_216B05440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B05454(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (_OWORD *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 48);
  uint64_t v4 = sub_216B05524((void *)a1);
  if (v4)
  {
    sub_216B054C0(a2);
  }
  else
  {
    *uint64_t v3 = v6;
    v3[1] = v7;
  }
  return v4;
}

void sub_216B054B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_216B054C0(uint64_t a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(a1 + 24, (uint64_t)__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B05508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B05524(void *a1)
{
  uint64_t v1 = (_WORD *)a1[4];
  if (a1[8] - (void)v1 < 2uLL || *v1 != 12079) {
    return 0;
  }
  uint64_t v3 = a1[5] + 2;
  a1[4] = v1 + 1;
  a1[5] = v3;
  a1[7] += 2;
  return 1;
}

void sub_216B0557C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114AbsPathPatternE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114AbsPathPatternE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  uint64_t v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B05654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_216B056C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (_OWORD *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 48);
  uint64_t v4 = sub_216B057AC(a1, a2);
  if (v4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::AppendChild(a2 + 24, a2 + 88, a2 + 112);
    if (*(char *)(a2 + 111) < 0)
    {
      **(unsigned char **)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
    }
    else
    {
      *(unsigned char *)(a2 + 88) = 0;
      *(unsigned char *)(a2 + 111) = 0;
    }
    uint64_t v11 = 0;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)std::string::size_type v8 = 0u;
    memset(v9, 0, sizeof(v9));
    sub_216B081A0(a2 + 112, (uint64_t)v8);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v12 = (void **)v9 + 1;
    sub_2169B5C28(&v12);
    if (v8[0])
    {
      v8[1] = v8[0];
      operator delete(v8[0]);
    }
  }
  else
  {
    *uint64_t v3 = v6;
    v3[1] = v7;
  }
  return v4;
}

void sub_216B057A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B057AC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 32;
  uint64_t v4 = *(char **)(a1 + 32);
  uint64_t v6 = a1 + 40;
  long long v17 = *(_OWORD *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 56);
  if ((sub_2169C827C((void *)a1) & 1) != 0 || sub_216B059D0((void *)a1))
  {
    do
    {
      while ((sub_2169C827C((void *)a1) & 1) != 0)
        ;
    }
    while ((sub_216B059D0((void *)a1) & 1) != 0);
    long long v7 = *(_OWORD *)(v5 + 16);
    long long v19 = *(_OWORD *)v5;
    long long v20 = v7;
    std::string::size_type v8 = *(unsigned char **)(a1 + 32);
    if (v8 != *(unsigned char **)(a1 + 64)
      && *v8 == 91
      && ((uint64_t v9 = *(void *)(a1 + 40) + 1,
           *(void *)(a1 + 32) = v8 + 1,
           *(void *)(a1 + 40) = v9,
           ++*(void *)(a1 + 56),
           (sub_2169C827C((void *)a1) & 1) != 0)
       || sub_216B05A6C((void *)a1)))
    {
      do
      {
        while ((sub_2169C827C((void *)a1) & 1) != 0)
          ;
      }
      while ((sub_216B05A6C((void *)a1) & 1) != 0);
    }
    else
    {
      long long v10 = v20;
      *(_OWORD *)uint64_t v5 = v19;
      *(_OWORD *)(v5 + 16) = v10;
    }
    sub_21682E90C(&v19, v4, *(char **)v5, *(void *)v5 - (void)v4);
    uint64_t v11 = (void **)(a2 + 88);
    if (*(char *)(a2 + 111) < 0) {
      operator delete(*v11);
    }
    *(_OWORD *)uint64_t v11 = v19;
    *(void *)(a2 + 104) = v20;
    uint64_t v12 = *(unsigned char **)(a1 + 32);
    if (v12 != *(unsigned char **)(a1 + 64) && *v12 == 123)
    {
      uint64_t v13 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v12 + 1;
      *(void *)(a1 + 40) = v13;
      ++*(void *)(a1 + 56);
      long long v14 = *(_OWORD *)(v5 + 16);
      long long v19 = *(_OWORD *)v5;
      long long v20 = v14;
      sub_216B05B14(a1, a2);
      sub_216B05C8C((void *)a1);
    }
  }
  else
  {
    *(void *)(a1 + 32) = v4;
    *(_OWORD *)uint64_t v6 = v17;
    *(void *)(v6 + 16) = v18;
    if (v4 == *(char **)(a1 + 64) || *v4 != 123) {
      return 0;
    }
    uint64_t v15 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v4 + 1;
    *(void *)(a1 + 40) = v15;
    ++*(void *)(a1 + 56);
    sub_216B05B14(a1, a2);
    sub_216B05C8C((void *)a1);
  }
  return 1;
}

void sub_216B059AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14)
{
  _OWORD *v14 = a13;
  v14[1] = a14;
  _Unwind_Resume(a1);
}

void sub_216B059B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10)
{
  void *v11 = v10;
  *(_OWORD *)uint64_t v12 = a9;
  *(void *)(v12 + 16) = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B059D0(void *a1)
{
  uint64_t v1 = (char *)a1[4];
  if (v1 == (char *)a1[8]) {
    return 0;
  }
  int v3 = *v1;
  __int16 __s = 10815;
  uint64_t v4 = (uint64_t *)memchr(&__s, v3, 2uLL);
  uint64_t v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - (char *)&__s == 2) {
    return 0;
  }
  uint64_t v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

uint64_t sub_216B05A6C(void *a1)
{
  uint64_t v1 = (char *)a1[4];
  if (v1 == (char *)a1[8]) {
    return 0;
  }
  int v3 = *v1;
  qmemcpy(__s, "[]!-?*", sizeof(__s));
  uint64_t v4 = (__int16 *)memchr(__s, v3, 6uLL);
  uint64_t v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - __s == 6) {
    return 0;
  }
  uint64_t v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

uint64_t sub_216B05B14(uint64_t a1, uint64_t a2)
{
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  uint64_t v4 = *(char **)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 56);
  if (!sub_216B05D30((void *)a1, a2))
  {
    *(void *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 40) = v7;
    *(void *)(a1 + 56) = v8;
    sub_216B08274(a1);
  }
  do
    sub_216B07F3C(a1, a2);
  while ((v5 & 1) != 0);
  sub_21682E90C(v11, v4, *(char **)(a1 + 32), *(void *)(a1 + 32) - (void)v4);
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::SdfPredicateExpression(v13, v11, v9);
  sub_216B081A0(a2 + 112, (uint64_t)v13);
  if (v16 < 0) {
    operator delete(__p);
  }
  long long v17 = (void **)&v14;
  sub_2169B5C28(&v17);
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  do
    uint64_t result = sub_2169C5224((void *)a1);
  while ((result & 1) != 0);
  return result;
}

void sub_216B05C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  *(void *)(v23 + 32) = v24;
  *(_OWORD *)uint64_t v25 = a9;
  *(void *)(v25 + 16) = a10;
  _Unwind_Resume(exception_object);
}

void *sub_216B05C8C(void *result)
{
  uint64_t v1 = (unsigned char *)result[4];
  if (v1 == (unsigned char *)result[8] || *v1 != 125) {
    sub_216B083BC((uint64_t)result);
  }
  uint64_t v2 = result[5] + 1;
  result[4] = v1 + 1;
  result[5] = v2;
  ++result[7];
  return result;
}

void sub_216B05CE4()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_216B05D1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216B05D30(void *a1, uint64_t a2)
{
  sub_216B05E1C((uint64_t)a1);
  if (sub_216B05F78((uint64_t)a1)) {
    return 1;
  }
  if (sub_216B06064((uint64_t)a1)) {
    return 1;
  }
  sub_216B062AC((uint64_t)a1);
  if (v4) {
    return 1;
  }
  char v5 = (unsigned char *)a1[4];
  if (v5 != (unsigned char *)a1[8] && *v5 == 40)
  {
    uint64_t v6 = a1[5] + 1;
    a1[4] = v5 + 1;
    a1[5] = v6;
    ++a1[7];
    if ((sub_216B07CA4(a1, a2) & 1) == 0) {
      sub_216B07B5C((uint64_t)a1);
    }
    long long v7 = (unsigned char *)a1[4];
    if (v7 == (unsigned char *)a1[8] || *v7 != 41) {
      sub_216B07DF4((uint64_t)a1);
    }
    uint64_t v8 = a1[5] + 1;
    a1[4] = v7 + 1;
    a1[5] = v8;
    ++a1[7];
    return 1;
  }
  return 0;
}

__n128 sub_216B05E1C(uint64_t a1)
{
  uint64_t v2 = (__n128 *)(a1 + 32);
  __n128 v6 = *(__n128 *)(a1 + 32);
  __n128 v7 = *(__n128 *)(a1 + 48);
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  sub_216B05EC8(a1);
  if (v3)
  {
    __n128 v8 = *v2;
    __n128 v9 = v2[1];
    if (sub_2169C5224((void *)a1))
    {
      do
      {
        while ((sub_2169C5224((void *)a1) & 1) != 0)
          ;
        sub_216B05EC8(a1);
        if (!v4) {
          break;
        }
        __n128 v8 = *v2;
        __n128 v9 = v2[1];
      }
      while ((sub_2169C5224((void *)a1) & 1) != 0);
    }
    *uint64_t v2 = v8;
    v2[1] = v9;
    while ((sub_2169C5224((void *)a1) & 1) != 0)
      ;
  }
  else
  {
    __n128 result = v6;
    *uint64_t v2 = v6;
    v2[1] = v7;
  }
  return result;
}

__n128 sub_216B05EC8(uint64_t a1)
{
  if (sub_216B05F14((void *)a1))
  {
    __n128 v3 = *(__n128 *)(a1 + 32);
    long long v4 = *(_OWORD *)(a1 + 48);
    sub_2169C827C((void *)a1);
    __n128 result = v3;
    *(__n128 *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 48) = v4;
  }
  return result;
}

uint64_t sub_216B05F14(void *a1)
{
  uint64_t v1 = a1[4];
  if ((unint64_t)(a1[8] - v1) < 3) {
    return 0;
  }
  if (*(_WORD *)v1 != 28526 || *(unsigned char *)(v1 + 2) != 116) {
    return 0;
  }
  uint64_t v4 = a1[5] + 3;
  a1[4] = v1 + 3;
  a1[5] = v4;
  a1[7] += 3;
  return 1;
}

uint64_t sub_216B05F78(uint64_t a1)
{
  uint64_t v2 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  sub_216B063AC(a1);
  if (v3 && (uint64_t v4 = *(unsigned char **)(a1 + 32), v4 != *(unsigned char **)(a1 + 64)) && *v4 == 58)
  {
    do
    {
      uint64_t v5 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v4 + 1;
      *(void *)(a1 + 40) = v5;
      ++*(void *)(a1 + 56);
      sub_216B067C8((__n128 *)a1);
      uint64_t v4 = *(unsigned char **)(a1 + 32);
    }
    while (v4 != *(unsigned char **)(a1 + 64) && *v4 == 44);
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *uint64_t v2 = v7;
    v2[1] = v8;
  }
  return result;
}

void sub_216B06054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *uint64_t v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B06064(uint64_t a1)
{
  uint64_t v2 = (long long *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 32);
  long long v12 = *(_OWORD *)(a1 + 48);
  sub_216B063AC(a1);
  if (!v3) {
    goto LABEL_14;
  }
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  uint64_t v4 = *(unsigned char **)(a1 + 32);
  if (v4 == *(unsigned char **)(a1 + 64) || *v4 != 40)
  {
LABEL_14:
    uint64_t result = 0;
    *uint64_t v2 = v11;
    v2[1] = v12;
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 + 1;
  *(void *)(a1 + 40) = v5;
  ++*(void *)(a1 + 56);
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  long long v13 = *v2;
  long long v14 = v2[1];
  if (sub_216B07884(a1))
  {
    long long v15 = *v2;
    long long v17 = v2[1];
    if (sub_216B07970((void *)a1))
    {
      do
      {
        if ((sub_216B07884(a1) & 1) == 0) {
          break;
        }
        long long v15 = *v2;
        long long v17 = v2[1];
      }
      while ((sub_216B07970((void *)a1) & 1) != 0);
    }
    *uint64_t v2 = v15;
    v2[1] = v17;
    long long v16 = *v2;
    long long v18 = v2[1];
    if (sub_216B07970((void *)a1))
    {
      sub_216B078EC((void *)a1);
      if (v6) {
        goto LABEL_13;
      }
    }
LABEL_16:
    *uint64_t v2 = v16;
    v2[1] = v18;
    goto LABEL_17;
  }
  *uint64_t v2 = v13;
  v2[1] = v14;
  long long v16 = *v2;
  long long v18 = v2[1];
  sub_216B078EC((void *)a1);
  if (!v8) {
    goto LABEL_16;
  }
LABEL_13:
  sub_216B067C8((__n128 *)a1);
  sub_216B079EC((__n128 *)a1);
LABEL_17:
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  __n128 v9 = *(unsigned char **)(a1 + 32);
  if (v9 == *(unsigned char **)(a1 + 64) || *v9 != 41) {
    sub_216B07A64(a1);
  }
  uint64_t v10 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v9 + 1;
  *(void *)(a1 + 40) = v10;
  ++*(void *)(a1 + 56);
  return 1;
}

void sub_216B0621C()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_216B06258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14)
{
  _OWORD *v14 = a13;
  v14[1] = a14;
  _OWORD *v14 = a9;
  v14[1] = a10;
  _Unwind_Resume(exception_object);
}

double sub_216B062AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 40;
  long long v14 = *(_OWORD *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 56);
  if (!sub_2169C89C8((void *)a1)) {
    goto LABEL_10;
  }
  while ((sub_2169C827C((void *)a1) & 1) != 0)
    ;
  uint64_t v4 = *(void *)(a1 + 32);
  v8[0] = v2;
  v8[1] = v2;
  long long v9 = v14;
  uint64_t v10 = v15;
  uint64_t v11 = v4;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_216778F24(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 72);
    uint64_t v13 = *(void *)(a1 + 88);
  }
  *(void *)&double result = sub_216B064AC((uint64_t)v8).n128_u64[0];
  int v7 = v5;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if (v5) {
      return result;
    }
LABEL_10:
    *(void *)(a1 + 32) = v2;
    double result = *(double *)&v14;
    *(_OWORD *)uint64_t v3 = v14;
    *(void *)(v3 + 16) = v15;
    return result;
  }
  operator delete((void *)__p);
  if (!v7) {
    goto LABEL_10;
  }
  return result;
}

void sub_216B06394(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v3;
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v4 - 64);
  *(void *)(v2 + 16) = *(void *)(v4 - 48);
  _Unwind_Resume(a1);
}

double sub_216B063AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 40;
  long long v14 = *(_OWORD *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 56);
  if (!sub_2169C89C8((void *)a1)) {
    goto LABEL_10;
  }
  while ((sub_2169C827C((void *)a1) & 1) != 0)
    ;
  uint64_t v4 = *(void *)(a1 + 32);
  v8[0] = v2;
  v8[1] = v2;
  long long v9 = v14;
  uint64_t v10 = v15;
  uint64_t v11 = v4;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_216778F24(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 72);
    uint64_t v13 = *(void *)(a1 + 88);
  }
  *(void *)&double result = sub_216B064AC((uint64_t)v8).n128_u64[0];
  char v7 = v5;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if (v5) {
      return result;
    }
LABEL_10:
    *(void *)(a1 + 32) = v2;
    double result = *(double *)&v14;
    *(_OWORD *)uint64_t v3 = v14;
    *(void *)(v3 + 16) = v15;
    return result;
  }
  operator delete((void *)__p);
  if ((v7 & 1) == 0) {
    goto LABEL_10;
  }
  return result;
}

void sub_216B06494(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v3;
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v4 - 64);
  *(void *)(v2 + 16) = *(void *)(v4 - 48);
  _Unwind_Resume(a1);
}

__n128 sub_216B064AC(uint64_t a1)
{
  uint64_t v2 = (__n128 *)(a1 + 8);
  __n128 v9 = *(__n128 *)(a1 + 8);
  __n128 v10 = *(__n128 *)(a1 + 24);
  if (!sub_216B06644((void *)a1)
    || (v19 = *v2, v25 = v2[1], char v3 = sub_216A40368((void *)a1), *v2 = v19, v2[1] = v25, (v3 & 1) != 0))
  {
    *uint64_t v2 = v9;
    v2[1] = v10;
    __n128 v11 = *v2;
    __n128 v15 = v2[1];
    if (!sub_216B066A8((void *)a1)
      || (v20 = *v2, v26 = v2[1], v4 = sub_216A40368((void *)a1), *uint64_t v2 = v20, v2[1] = v26, (v4 & 1) != 0))
    {
      *uint64_t v2 = v11;
      v2[1] = v15;
      __n128 v12 = *v2;
      __n128 v16 = v2[1];
      if (!sub_216B0670C((void *)a1)
        || (v21 = *v2, v27 = v2[1], v5 = sub_216A40368((void *)a1), *uint64_t v2 = v21, v2[1] = v27, (v5 & 1) != 0))
      {
        *uint64_t v2 = v12;
        v2[1] = v16;
        __n128 v13 = *v2;
        __n128 v17 = v2[1];
        if (!sub_216B06764((void *)a1)
          || (v22 = *v2, v28 = v2[1], v6 = sub_216A40368((void *)a1), *uint64_t v2 = v22, v2[1] = v28, (v6 & 1) != 0))
        {
          *uint64_t v2 = v13;
          v2[1] = v17;
          __n128 v14 = *v2;
          __n128 v18 = v2[1];
          if (!sub_216A4FE40((void *)a1)
            || (v23 = *v2, v29 = v2[1], v7 = sub_216A40368((void *)a1), *uint64_t v2 = v23, v2[1] = v29, (v7 & 1) != 0))
          {
            *uint64_t v2 = v14;
            v2[1] = v18;
            if (sub_216A50280((void *)a1))
            {
              __n128 v24 = *v2;
              __n128 v30 = v2[1];
              sub_216A40368((void *)a1);
              *uint64_t v2 = v24;
              v2[1] = v30;
            }
          }
        }
      }
    }
  }
  __n128 result = v9;
  *uint64_t v2 = v9;
  v2[1] = v10;
  return result;
}

uint64_t sub_216B06644(void *a1)
{
  uint64_t v1 = a1[1];
  if ((unint64_t)(a1[5] - v1) < 3) {
    return 0;
  }
  if (*(_WORD *)v1 != 28526 || *(unsigned char *)(v1 + 2) != 116) {
    return 0;
  }
  uint64_t v4 = a1[2] + 3;
  a1[1] = v1 + 3;
  a1[2] = v4;
  a1[4] += 3;
  return 1;
}

uint64_t sub_216B066A8(void *a1)
{
  uint64_t v1 = a1[1];
  if ((unint64_t)(a1[5] - v1) < 3) {
    return 0;
  }
  if (*(_WORD *)v1 != 28257 || *(unsigned char *)(v1 + 2) != 100) {
    return 0;
  }
  uint64_t v4 = a1[2] + 3;
  a1[1] = v1 + 3;
  a1[2] = v4;
  a1[4] += 3;
  return 1;
}

uint64_t sub_216B0670C(void *a1)
{
  uint64_t v1 = (_WORD *)a1[1];
  if (a1[5] - (void)v1 < 2uLL || *v1 != 29295) {
    return 0;
  }
  uint64_t v3 = a1[2] + 2;
  a1[1] = v1 + 1;
  a1[2] = v3;
  a1[4] += 2;
  return 1;
}

uint64_t sub_216B06764(void *a1)
{
  uint64_t v1 = a1[1];
  if ((unint64_t)(a1[5] - v1) < 3) {
    return 0;
  }
  if (*(_WORD *)v1 != 28265 || *(unsigned char *)(v1 + 2) != 102) {
    return 0;
  }
  uint64_t v4 = a1[2] + 3;
  a1[1] = v1 + 3;
  a1[2] = v4;
  a1[4] += 3;
  return 1;
}

void sub_216B067C8(__n128 *a1)
{
  if ((sub_216B0682C((uint64_t)a1) & 1) == 0)
  {
    sub_216B069B4(a1);
    if ((v2 & 1) == 0 && (sub_216B06A2C((uint64_t)a1) & 1) == 0 && (sub_216B06F08((uint64_t)a1) & 1) == 0)
    {
      do
      {
        while ((sub_2169C827C(a1) & 1) != 0)
          ;
      }
      while ((sub_216B077AC(a1) & 1) != 0);
    }
  }
}

uint64_t sub_216B0682C(uint64_t a1)
{
  char v2 = (long long *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  if ((void)v8 != *(void *)(a1 + 64) && *(unsigned char *)v8 == 45)
  {
    uint64_t v3 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v8 + 1;
    *(void *)(a1 + 40) = v3;
    ++*(void *)(a1 + 56);
  }
  long long v10 = *v2;
  long long v11 = *(_OWORD *)(a1 + 48);
  if (sub_216B06AD0((void *)a1))
  {
    long long v12 = *v2;
    long long v14 = v2[1];
    char v4 = sub_2169C827C((void *)a1);
    *char v2 = v12;
    v2[1] = v14;
    if ((v4 & 1) == 0) {
      return 1;
    }
  }
  *char v2 = v10;
  v2[1] = v11;
  if (!sub_216B06B34((void *)a1)) {
    goto LABEL_16;
  }
  char v5 = *(unsigned char **)(a1 + 32);
  if (v5 != *(unsigned char **)(a1 + 64) && *v5 == 46)
  {
    uint64_t v6 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v5 + 1;
    *(void *)(a1 + 40) = v6;
    ++*(void *)(a1 + 56);
    if (sub_216B06B34((void *)a1))
    {
      long long v13 = *v2;
      long long v15 = v2[1];
      if (sub_216B06D04((void *)a1))
      {
        sub_216B06DA0((void *)a1);
        if ((sub_216B06B34((void *)a1) & 1) == 0) {
          sub_216B06BBC(a1);
        }
      }
      else
      {
        *char v2 = v13;
        v2[1] = v15;
      }
      return 1;
    }
LABEL_15:
    sub_216B06BBC(a1);
  }
  if (!sub_216B06D04((void *)a1))
  {
LABEL_16:
    uint64_t result = 0;
    *char v2 = v8;
    v2[1] = v9;
    return result;
  }
  sub_216B06DA0((void *)a1);
  if ((sub_216B06B34((void *)a1) & 1) == 0) {
    goto LABEL_15;
  }
  return 1;
}

void sub_216B0699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  long long v12 = *(_OWORD *)(v11 - 32);
  *long long v10 = *(_OWORD *)(v11 - 48);
  v10[1] = v12;
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

__n128 sub_216B069B4(__n128 *a1)
{
  uint64_t v1 = a1 + 2;
  __n128 v4 = a1[2];
  __n128 v5 = a1[3];
  if (v4.n128_u64[0] != a1[4].n128_u64[0] && *(unsigned char *)v4.n128_u64[0] == 45)
  {
    uint64_t v2 = a1[2].n128_u64[1] + 1;
    a1[2].n128_u64[0] = v4.n128_u64[0] + 1;
    a1[2].n128_u64[1] = v2;
    ++a1[3].n128_u64[1];
  }
  if (!sub_216B06B34(a1))
  {
    __n128 result = v4;
    __n128 *v1 = v4;
    v1[1] = v5;
  }
  return result;
}

uint64_t sub_216B06A2C(uint64_t a1)
{
  uint64_t v2 = (long long *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  if (sub_216B06E3C((void *)a1))
  {
    long long v10 = *v2;
    long long v12 = v2[1];
    char v3 = sub_2169C827C((void *)a1);
    *uint64_t v2 = v10;
    v2[1] = v12;
    if ((v3 & 1) == 0) {
      return 1;
    }
  }
  *uint64_t v2 = v6;
  v2[1] = v8;
  long long v7 = *v2;
  long long v9 = v2[1];
  if (sub_216B06E9C((void *)a1))
  {
    long long v11 = *v2;
    long long v13 = v2[1];
    char v4 = sub_2169C827C((void *)a1);
    *uint64_t v2 = v11;
    v2[1] = v13;
    if ((v4 & 1) == 0) {
      return 1;
    }
  }
  uint64_t result = 0;
  *uint64_t v2 = v7;
  v2[1] = v9;
  return result;
}

uint64_t sub_216B06AD0(void *a1)
{
  uint64_t v1 = a1[4];
  if ((unint64_t)(a1[8] - v1) < 3) {
    return 0;
  }
  if (*(_WORD *)v1 != 28265 || *(unsigned char *)(v1 + 2) != 102) {
    return 0;
  }
  uint64_t v4 = a1[5] + 3;
  a1[4] = v1 + 3;
  a1[5] = v4;
  a1[7] += 3;
  return 1;
}

uint64_t sub_216B06B34(void *a1)
{
  uint64_t v1 = (unsigned __int8 *)a1[4];
  uint64_t v2 = (unsigned __int8 *)a1[8];
  if (v1 == v2 || *v1 - 48 > 9) {
    return 0;
  }
  char v3 = v1 + 1;
  uint64_t v4 = a1[5];
  a1[4] = v3;
  a1[5] = v4 + 1;
  uint64_t v5 = a1[7];
  a1[7] = v5 + 1;
  if (v3 != v2)
  {
    uint64_t v6 = v5 + 2;
    uint64_t v7 = v4 + 2;
    do
    {
      if (*v3 - 48 > 9) {
        break;
      }
      a1[4] = ++v3;
      a1[5] = v7;
      a1[7] = v6++;
      ++v7;
    }
    while (v3 != v2);
  }
  return 1;
}

void sub_216B06BBC(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  char v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  uint64_t v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B06C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_216B06D04(void *a1)
{
  uint64_t v1 = (char *)a1[4];
  if (v1 == (char *)a1[8]) {
    return 0;
  }
  int v3 = *v1;
  __int16 __s = 17765;
  uint64_t v4 = (uint64_t *)memchr(&__s, v3, 2uLL);
  long long v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - (char *)&__s == 2) {
    return 0;
  }
  uint64_t v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

uint64_t sub_216B06DA0(void *a1)
{
  uint64_t v1 = (char *)a1[4];
  if (v1 == (char *)a1[8]) {
    return 0;
  }
  int v3 = *v1;
  __int16 __s = 11053;
  uint64_t v4 = (uint64_t *)memchr(&__s, v3, 2uLL);
  long long v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - (char *)&__s == 2) {
    return 0;
  }
  uint64_t v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

uint64_t sub_216B06E3C(void *a1)
{
  uint64_t v1 = (_DWORD *)a1[4];
  if (a1[8] - (void)v1 < 4uLL || *v1 != 1702195828) {
    return 0;
  }
  uint64_t v3 = a1[5] + 4;
  a1[4] = v1 + 1;
  a1[5] = v3;
  a1[7] += 4;
  return 1;
}

uint64_t sub_216B06E9C(void *a1)
{
  uint64_t v1 = a1[4];
  if ((unint64_t)(a1[8] - v1) < 5) {
    return 0;
  }
  if (*(_DWORD *)v1 != 1936482662 || *(unsigned char *)(v1 + 4) != 101) {
    return 0;
  }
  uint64_t v4 = a1[5] + 5;
  a1[4] = v1 + 5;
  a1[5] = v4;
  a1[7] += 5;
  return 1;
}

uint64_t sub_216B06F08(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 **)(a1 + 32);
  uint64_t v1 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v3 = *(unsigned __int8 **)(a1 + 64);
  if (v1 == v3) {
    return 0;
  }
  int v5 = *v1;
  if (v5 != 39)
  {
    if (v5 == 34)
    {
      std::string v6 = v1 + 1;
      uint64_t v7 = (void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v8;
      uint64_t v9 = (void *)(a1 + 56);
      long long v10 = (long long *)(a1 + 72);
      ++*(void *)(a1 + 56);
      while (1)
      {
        if (v6 != v3)
        {
          int v11 = *v6;
          if (v11 == 92)
          {
            *uint64_t v2 = v6 + 1;
            uint64_t v14 = (*v7)++;
            uint64_t v15 = (*v9)++;
            if (v6 + 1 == v3 || v6[1] != 34)
            {
              if ((sub_216B0769C((void *)a1) & 1) == 0)
              {
                exception = __cxa_allocate_exception(0x28uLL);
                uint64_t v43 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
                if (v43)
                {
                  sub_216779094(&v53, v43);
                  free(v43);
                }
                else
                {
                  sub_216779094(&v53, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
                }
                int v46 = std::string::insert(&v53, 0, "parse error matching ");
                long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
                v49.__r_.__value_.__r.__words[0] = v46->__r_.__value_.__r.__words[2];
                long long v48 = v47;
                v46->__r_.__value_.__l.__size_ = 0;
                v46->__r_.__value_.__r.__words[2] = 0;
                v46->__r_.__value_.__r.__words[0] = 0;
                sub_2169C5604((uint64_t)exception, (uint64_t)&v48, a1);
                __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
              }
            }
            else
            {
              *uint64_t v2 = v6 + 2;
              *uint64_t v7 = v14 + 2;
              *uint64_t v9 = v15 + 2;
            }
            goto LABEL_28;
          }
          if (v11 == 34) {
            goto LABEL_55;
          }
        }
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)v7;
        v53.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
        if (!sub_216B07744((void *)a1))
        {
          *uint64_t v2 = v6;
          *(_OWORD *)uint64_t v7 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
          *(void *)(a1 + 56) = *((void *)&v53.__r_.__value_.__l + 2);
LABEL_57:
          uint64_t v32 = __cxa_allocate_exception(0x28uLL);
          long long v33 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc34EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v33)
          {
            sub_216779094(&v53, v33);
            free(v33);
          }
          else
          {
            sub_216779094(&v53, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc34EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          uint64_t v38 = std::string::insert(&v53, 0, "parse error matching ");
          long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v49.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__r.__words[2];
          long long v48 = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          sub_2169C5604((uint64_t)v32, (uint64_t)&v48, a1);
          __cxa_throw(v32, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
        }
        long long v12 = *(unsigned __int8 **)(a1 + 32);
        *(void *)&long long v48 = v6;
        *((void *)&v48 + 1) = v6;
        std::string v49 = v53;
        unint64_t v50 = v12;
        if (*(char *)(a1 + 95) < 0)
        {
          sub_216778F24(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
          long long v13 = (unsigned __int8 *)*((void *)&v48 + 1);
          long long v12 = v50;
        }
        else
        {
          long long __p = *v10;
          uint64_t v52 = *(void *)(a1 + 88);
          long long v13 = v6;
        }
        if (v13 != v12 && (v17 = *v13, __n128 v16 = v13 + 1, v17 == 34) && v16 == v12)
        {
          int v18 = 0;
          __n128 v19 = v2;
        }
        else
        {
          __n128 v19 = 0;
          int v18 = 1;
        }
        if (SHIBYTE(v52) < 0)
        {
          operator delete((void *)__p);
          if (v19)
          {
LABEL_22:
            *__n128 v19 = v6;
            *(std::string *)(v19 + 1) = v53;
            if ((v18 & 1) == 0) {
              goto LABEL_57;
            }
            goto LABEL_28;
          }
        }
        else if (v19)
        {
          goto LABEL_22;
        }
        if (!v18) {
          goto LABEL_57;
        }
LABEL_28:
        std::string v6 = *(unsigned __int8 **)(a1 + 32);
        uint64_t v3 = *(unsigned __int8 **)(a1 + 64);
      }
    }
    return 0;
  }
  std::string v6 = v1 + 1;
  uint64_t v7 = (void *)(a1 + 40);
  uint64_t v21 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v21;
  uint64_t v9 = (void *)(a1 + 56);
  int v22 = (long long *)(a1 + 72);
  ++*(void *)(a1 + 56);
  while (1)
  {
    if (v6 != v3)
    {
      int v23 = *v6;
      if (v23 == 92)
      {
        *uint64_t v2 = v6 + 1;
        uint64_t v26 = (*v7)++;
        uint64_t v27 = (*v9)++;
        if (v6 + 1 == v3 || v6[1] != 39)
        {
          if ((sub_216B0769C((void *)a1) & 1) == 0)
          {
            uint64_t v40 = __cxa_allocate_exception(0x28uLL);
            long long v41 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
            if (v41)
            {
              sub_216779094(&v53, v41);
              free(v41);
            }
            else
            {
              sub_216779094(&v53, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
            }
            std::string v44 = std::string::insert(&v53, 0, "parse error matching ");
            long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
            v49.__r_.__value_.__r.__words[0] = v44->__r_.__value_.__r.__words[2];
            long long v48 = v45;
            v44->__r_.__value_.__l.__size_ = 0;
            v44->__r_.__value_.__r.__words[2] = 0;
            v44->__r_.__value_.__r.__words[0] = 0;
            sub_2169C5604((uint64_t)v40, (uint64_t)&v48, a1);
            __cxa_throw(v40, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
          }
        }
        else
        {
          *uint64_t v2 = v6 + 2;
          *uint64_t v7 = v26 + 2;
          *uint64_t v9 = v27 + 2;
        }
        goto LABEL_54;
      }
      if (v23 == 39) {
        break;
      }
    }
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    v53.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
    if (!sub_216B07744((void *)a1))
    {
      *uint64_t v2 = v6;
      *(_OWORD *)uint64_t v7 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
      *(void *)(a1 + 56) = *((void *)&v53.__r_.__value_.__l + 2);
LABEL_60:
      uint64_t v34 = __cxa_allocate_exception(0x28uLL);
      long long v35 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc39EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v35)
      {
        sub_216779094(&v53, v35);
        free(v35);
      }
      else
      {
        sub_216779094(&v53, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc39EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      uint64_t v36 = std::string::insert(&v53, 0, "parse error matching ");
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[0] = v36->__r_.__value_.__r.__words[2];
      long long v48 = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      sub_2169C5604((uint64_t)v34, (uint64_t)&v48, a1);
      __cxa_throw(v34, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
    }
    __n128 v24 = *(unsigned __int8 **)(a1 + 32);
    *(void *)&long long v48 = v6;
    *((void *)&v48 + 1) = v6;
    std::string v49 = v53;
    unint64_t v50 = v24;
    if (*(char *)(a1 + 95) < 0)
    {
      sub_216778F24(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
      __n128 v25 = (unsigned __int8 *)*((void *)&v48 + 1);
      __n128 v24 = v50;
    }
    else
    {
      long long __p = *v22;
      uint64_t v52 = *(void *)(a1 + 88);
      __n128 v25 = v6;
    }
    if (v25 != v24 && (v29 = *v25, __n128 v28 = v25 + 1, v29 == 39) && v28 == v24)
    {
      int v30 = 0;
      std::string v31 = v2;
    }
    else
    {
      std::string v31 = 0;
      int v30 = 1;
    }
    if (SHIBYTE(v52) < 0)
    {
      operator delete((void *)__p);
      if (v31)
      {
LABEL_48:
        const void *v31 = v6;
        *(std::string *)(v31 + 1) = v53;
        if ((v30 & 1) == 0) {
          goto LABEL_60;
        }
        goto LABEL_54;
      }
    }
    else if (v31)
    {
      goto LABEL_48;
    }
    if (!v30) {
      goto LABEL_60;
    }
LABEL_54:
    std::string v6 = *(unsigned __int8 **)(a1 + 32);
    uint64_t v3 = *(unsigned __int8 **)(a1 + 64);
  }
LABEL_55:
  *uint64_t v2 = v6 + 1;
  ++*v7;
  ++*v9;
  return 1;
}

void sub_216B075DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,long long a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0)
  {
    operator delete((void *)a22);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

uint64_t sub_216B0769C(void *a1)
{
  uint64_t v1 = (char *)a1[4];
  if (v1 == (char *)a1[8]) {
    return 0;
  }
  int v3 = *v1;
  qmemcpy(__s, "\\bfnrt", sizeof(__s));
  uint64_t v4 = (__int16 *)memchr(__s, v3, 6uLL);
  int v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - __s == 6) {
    return 0;
  }
  uint64_t v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

BOOL sub_216B07744(void *a1)
{
  unint64_t v2 = sub_2169C4B2C((uint64_t)a1);
  BOOL result = (v2 & 0xFF00000000) != 0 && (v2 - 32) < 0x10FFE0;
  if (result)
  {
    unint64_t v5 = HIDWORD(v2);
    uint64_t v6 = a1[5] + v5;
    a1[4] += v5;
    a1[5] = v6;
    a1[7] += v5;
  }
  return result;
}

uint64_t sub_216B077AC(void *a1)
{
  *(void *)&v10[7] = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)a1[4];
  if (v1 == (char *)a1[8]) {
    return 0;
  }
  int v3 = *v1;
  long long v8 = *(_OWORD *)"~!@#$%^&*-+=|\\.?/N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupE";
  char v9 = 47;
  uint64_t v4 = memchr(&v8, v3, 0x11uLL);
  unint64_t v5 = v4 ? v4 : v10;
  if (v5 - (unsigned char *)&v8 == 17) {
    return 0;
  }
  uint64_t v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

uint64_t sub_216B07884(uint64_t a1)
{
  unint64_t v2 = (_OWORD *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 48);
  sub_216B078EC((void *)a1);
  int v4 = v3;
  *unint64_t v2 = v6;
  v2[1] = v7;
  if ((v3 & 1) == 0) {
    sub_216B067C8((__n128 *)a1);
  }
  return v4 ^ 1u;
}

void sub_216B078E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_216B078EC(void *a1)
{
  sub_216B063AC((uint64_t)a1);
  if (v2)
  {
    while ((sub_2169C5224(a1) & 1) != 0)
      ;
    int v3 = (unsigned char *)a1[4];
    if (v3 != (unsigned char *)a1[8] && *v3 == 61)
    {
      uint64_t v4 = a1[5] + 1;
      a1[4] = v3 + 1;
      a1[5] = v4;
      ++a1[7];
      while ((sub_2169C5224(a1) & 1) != 0)
        ;
    }
  }
}

uint64_t sub_216B07970(void *a1)
{
  while ((sub_2169C5224(a1) & 1) != 0)
    ;
  int v2 = (unsigned char *)a1[4];
  if (v2 == (unsigned char *)a1[8] || *v2 != 44) {
    return 0;
  }
  uint64_t v3 = a1[5] + 1;
  a1[4] = v2 + 1;
  a1[5] = v3;
  ++a1[7];
  while ((sub_2169C5224(a1) & 1) != 0)
    ;
  return 1;
}

__n128 sub_216B079EC(__n128 *a1)
{
  int v2 = a1 + 2;
  __n128 v5 = a1[2];
  __n128 v6 = a1[3];
  if (sub_216B07970(a1))
  {
    do
    {
      sub_216B078EC(a1);
      if (!v3) {
        break;
      }
      sub_216B067C8(a1);
      __n128 v5 = *v2;
      __n128 v6 = v2[1];
    }
    while ((sub_216B07970(a1) & 1) != 0);
  }
  __n128 result = v5;
  *int v2 = v5;
  v2[1] = v6;
  return result;
}

void sub_216B07A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_216B07A64(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_216A59B38(&v5);
  int v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B07AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_216B07B5C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  int v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  long long v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B07C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_216B07CA4(void *a1, uint64_t a2)
{
  while ((sub_2169C5224(a1) & 1) != 0)
    ;
  uint64_t v4 = sub_216B07CF8(a1, a2);
  if (v4)
  {
    while ((sub_2169C5224(a1) & 1) != 0)
      ;
  }
  return v4;
}

uint64_t sub_216B07CF8(void *a1, uint64_t a2)
{
  sub_216B05E1C((uint64_t)a1);
  if ((sub_216B05F78((uint64_t)a1) & 1) == 0 && (sub_216B06064((uint64_t)a1) & 1) == 0)
  {
    double v4 = sub_216B062AC((uint64_t)a1);
    if ((v5 & 1) == 0)
    {
      std::string v6 = (unsigned char *)a1[4];
      if (v6 == (unsigned char *)a1[8] || *v6 != 40) {
        return 0;
      }
      uint64_t v7 = a1[5] + 1;
      a1[4] = v6 + 1;
      a1[5] = v7;
      ++a1[7];
      if ((sub_216B07CA4(a1, a2, v4) & 1) == 0) {
        sub_216B07B5C((uint64_t)a1);
      }
      std::string::size_type v8 = (unsigned char *)a1[4];
      if (v8 == (unsigned char *)a1[8] || *v8 != 41) {
        sub_216B07DF4((uint64_t)a1);
      }
      uint64_t v9 = a1[5] + 1;
      a1[4] = v8 + 1;
      a1[5] = v9;
      ++a1[7];
    }
  }
  do
    sub_216B07F3C((uint64_t)a1, a2);
  while ((v10 & 1) != 0);
  return 1;
}

void sub_216B07DF4(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  int v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  double v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B07ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

__n128 sub_216B07F3C(uint64_t a1, uint64_t a2)
{
  double v4 = (__n128 *)(a1 + 32);
  __n128 v7 = *(__n128 *)(a1 + 32);
  __n128 v8 = *(__n128 *)(a1 + 48);
  if ((sub_216B07FF4(a1) & 1) == 0)
  {
    __n128 *v4 = v7;
    v4[1] = v8;
LABEL_7:
    __n128 result = v7;
    __n128 *v4 = v7;
    v4[1] = v8;
    return result;
  }
  int v5 = sub_216B05D30(a1, a2);
  __n128 *v4 = v7;
  v4[1] = v8;
  if (!v5 || !sub_216B07FF4(a1) || (sub_216B05D30(a1, a2) & 1) == 0) {
    goto LABEL_7;
  }
  return result;
}

void sub_216B07FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *char v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B07FF4(uint64_t a1)
{
  int v2 = (long long *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  if (sub_216B080E4((void *)a1)
    && (v10 = *v2, v12 = v2[1], char v3 = sub_2169C827C((void *)a1), *v2 = v10, v2[1] = v12, (v3 & 1) == 0))
  {
    while ((sub_2169C5224((void *)a1) & 1) != 0)
      ;
  }
  else
  {
    *int v2 = v6;
    v2[1] = v8;
    long long v7 = *v2;
    long long v9 = v2[1];
    while ((sub_2169C5224((void *)a1) & 1) != 0)
      ;
    if (sub_216B08148((void *)a1)
      && (v11 = *v2, v13 = v2[1], v4 = sub_2169C827C((void *)a1), *int v2 = v11, v2[1] = v13, (v4 & 1) == 0))
    {
      while ((sub_2169C5224((void *)a1) & 1) != 0)
        ;
    }
    else
    {
      *int v2 = v7;
      v2[1] = v9;
      uint64_t result = sub_2169C5224((void *)a1);
      if (!result) {
        return result;
      }
      while ((sub_2169C5224((void *)a1) & 1) != 0)
        ;
    }
  }
  return 1;
}

uint64_t sub_216B080E4(void *a1)
{
  uint64_t v1 = a1[4];
  if ((unint64_t)(a1[8] - v1) < 3) {
    return 0;
  }
  if (*(_WORD *)v1 != 28257 || *(unsigned char *)(v1 + 2) != 100) {
    return 0;
  }
  uint64_t v4 = a1[5] + 3;
  a1[4] = v1 + 3;
  a1[5] = v4;
  a1[7] += 3;
  return 1;
}

uint64_t sub_216B08148(void *a1)
{
  uint64_t v1 = (_WORD *)a1[4];
  if (a1[8] - (void)v1 < 2uLL || *v1 != 29295) {
    return 0;
  }
  uint64_t v3 = a1[5] + 2;
  a1[4] = v1 + 1;
  a1[5] = v3;
  a1[7] += 2;
  return 1;
}

uint64_t sub_216B081A0(uint64_t a1, uint64_t a2)
{
  sub_216B08220(a1, (__n128 *)a2);
  sub_216B02514((void **)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v4 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 71) = 0;
  *(unsigned char *)(a2 + 48) = 0;
  return a1;
}

__n128 sub_216B08220(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_216B08274(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_116EmbeddedPredExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_116EmbeddedPredExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  uint64_t v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B0834C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_216B083BC(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_216B084B4(&v5);
  uint64_t v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B08454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_216B084B4(void *a1@<X8>)
{
  int v2 = __cxa_demangle((const char *)(0x800000021746F7D3 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x800000021746F7D3 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B08554(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216B08568(void *a1)
{
  if (sub_216B05524(a1)) {
    return 1;
  }
  int v2 = (unsigned char *)a1[4];
  if (v2 != (unsigned char *)a1[8] && *v2 == 47)
  {
    uint64_t v3 = a1[5] + 1;
    a1[4] = v2 + 1;
    a1[5] = v3;
    ++a1[7];
    return 1;
  }
  return 0;
}

uint64_t sub_216B085D4(void *a1, uint64_t a2)
{
  sub_216B08678((uint64_t)a1);
  if (v4)
  {
    sub_216B08764(a1, a2);
    return 1;
  }
  std::string v5 = (unsigned char *)a1[4];
  if (v5 != (unsigned char *)a1[8] && *v5 == 123)
  {
    uint64_t v6 = a1[5] + 1;
    a1[4] = v5 + 1;
    a1[5] = v6;
    ++a1[7];
    if ((sub_216B07CA4(a1, a2) & 1) == 0) {
      sub_216B08274((uint64_t)a1);
    }
    sub_216B08808(a1);
    return 1;
  }
  return 0;
}

__n128 sub_216B08678(uint64_t a1)
{
  int v2 = (__n128 *)(a1 + 32);
  __n128 v6 = *(__n128 *)(a1 + 32);
  __n128 v7 = *(__n128 *)(a1 + 48);
  if ((sub_2169C827C((void *)a1) & 1) != 0 || sub_216B059D0((void *)a1))
  {
    do
    {
      while ((sub_2169C827C((void *)a1) & 1) != 0)
        ;
    }
    while ((sub_216B059D0((void *)a1) & 1) != 0);
    __n128 v8 = *v2;
    __n128 v9 = v2[1];
    uint64_t v3 = *(unsigned char **)(a1 + 32);
    if (v3 != *(unsigned char **)(a1 + 64)
      && *v3 == 91
      && ((uint64_t v4 = *(void *)(a1 + 40) + 1,
           *(void *)(a1 + 32) = v3 + 1,
           *(void *)(a1 + 40) = v4,
           ++*(void *)(a1 + 56),
           (sub_2169C827C((void *)a1) & 1) != 0)
       || sub_216B05A6C((void *)a1)))
    {
      do
      {
        while ((sub_2169C827C((void *)a1) & 1) != 0)
          ;
      }
      while ((sub_216B05A6C((void *)a1) & 1) != 0);
    }
    else
    {
      __n128 result = v8;
      *int v2 = v8;
      v2[1] = v9;
    }
  }
  else
  {
    __n128 result = v6;
    *int v2 = v6;
    v2[1] = v7;
  }
  return result;
}

void *sub_216B08764(void *result, uint64_t a2)
{
  int v2 = (unsigned char *)result[4];
  if (v2 != (unsigned char *)result[8] && *v2 == 123)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[5] + 1;
    result[4] = v2 + 1;
    result[5] = v4;
    ++result[7];
    if ((sub_216B07CA4(result, a2) & 1) == 0) {
      sub_216B08274((uint64_t)v3);
    }
    return sub_216B08808(v3);
  }
  return result;
}

void sub_216B087FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void *sub_216B08808(void *result)
{
  uint64_t v1 = (unsigned char *)result[4];
  if (v1 == (unsigned char *)result[8] || *v1 != 125) {
    sub_216B08858((uint64_t)result);
  }
  uint64_t v2 = result[5] + 1;
  result[4] = v1 + 1;
  result[5] = v2;
  ++result[7];
  return result;
}

void sub_216B08858(uint64_t a1)
{
}

void sub_216B0886C()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_216B088A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_216B088B8(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_119PropPathPatternElemE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_119PropPathPatternElemE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  uint64_t v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B08990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

_DWORD *sub_216B08A00(uint64_t a1)
{
  sub_216B08B1C((uint64_t *)(*(void *)(a1 + 8) - 48), a1 + 24);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  memset(v4, 0, sizeof(v4));
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern::PathPattern((pxrInternal__aapl__pxrReserved__::SdfPathExpression::PathPattern *)v4);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  sub_21697DE94((int *)(a1 + 24), (int *)v4);
  sub_21697DEEC((int *)(a1 + 28), (int *)v4 + 1);
  sub_21697DE58((uint64_t *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)((char *)v4 + 8);
  *(void *)(a1 + 48) = *((void *)&v4[1] + 1);
  memset((char *)v4 + 8, 0, 24);
  sub_216B02228((void **)(a1 + 56));
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = v6;
  *(void *)&long long v6 = 0;
  long long v5 = 0uLL;
  *(unsigned char *)(a1 + 80) = BYTE8(v6);
  uint64_t v2 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*v2);
  }
  *(_OWORD *)uint64_t v2 = v7;
  *(void *)(a1 + 104) = v8;
  BYTE7(v8) = 0;
  LOBYTE(v7) = 0;
  sub_216B081A0(a1 + 112, (uint64_t)&v8 + 8);
  return sub_216B03BC4((uint64_t)v4);
}

void sub_216B08B1C(uint64_t *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAtom(a2, (char **)v7);
  unint64_t v3 = a1[4];
  if (v3 >= a1[5])
  {
    uint64_t v5 = sub_216B02D70(a1 + 3, (uint64_t)v7);
    int v6 = SHIBYTE(v14);
    a1[4] = v5;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = 0;
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(_OWORD *)unint64_t v3 = *(_OWORD *)v7;
    *(void *)(v3 + 16) = v8;
    v7[0] = 0;
    v7[1] = 0;
    *(void *)(v3 + 32) = 0;
    *(void *)(v3 + 40) = 0;
    *(_OWORD *)(v3 + 24) = v9;
    *(void *)(v3 + 40) = v10;
    *(void *)(v3 + 48) = 0;
    uint64_t v8 = 0;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    *(void *)(v3 + 56) = 0;
    *(void *)(v3 + 64) = 0;
    *(_OWORD *)(v3 + 48) = v11;
    *(void *)(v3 + 64) = v12;
    long long v11 = 0uLL;
    long long v4 = *(_OWORD *)__p;
    *(void *)(v3 + 88) = v14;
    *(_OWORD *)(v3 + 72) = v4;
    uint64_t v12 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v14 = 0;
    a1[4] = v3 + 96;
  }
  uint64_t v15 = (void **)&v11;
  sub_2169B81EC(&v15);
  uint64_t v15 = (void **)&v9;
  sub_2169B74B8(&v15);
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
}

void sub_216B08C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216B08C38(void *a1, uint64_t a2)
{
  while ((sub_2169C5224(a1) & 1) != 0)
    ;
  uint64_t v4 = sub_216B03CF8(a1, a2);
  if (v4)
  {
    while ((sub_2169C5224(a1) & 1) != 0)
      ;
  }
  return v4;
}

void sub_216B08C8C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  unint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PathExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PathExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  uint64_t v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B08D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_216B08DD4(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  if ((void)v4 == *(void *)(a1 + 64) || *(unsigned char *)v4 != 41) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 + 1;
  *(void *)(a1 + 40) = v2;
  ++*(void *)(a1 + 56);
  sub_216B08E5C(a2);
  return 1;
}

void sub_216B08E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *uint64_t v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_216B08E5C(uint64_t a1)
{
  sub_216B08F18((uint64_t *)(*(void *)(a1 + 8) - 48), (uint64_t)v3);
  uint64_t v2 = *(void *)(a1 + 8);
  sub_216B03B00(a1 + 16, v2 - 48);
  *(void *)(a1 + 8) = v2 - 48;
  sub_216B08FE8((uint64_t *)(v2 - 96), (uint64_t)v3);
  if (v7 < 0) {
    operator delete(__p);
  }
  std::string::size_type v8 = (void **)&v5;
  sub_2169B81EC(&v8);
  std::string::size_type v8 = (void **)&v4;
  sub_2169B74B8(&v8);
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
}

void sub_216B08F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169B5940((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216B08F18(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  for (uint64_t i = a1[1]; v4 != i; uint64_t i = a1[1])
  {
    sub_216B0427C(a1);
    uint64_t v4 = *a1;
  }
  uint64_t v6 = a1[4];
  *(_OWORD *)a2 = *(_OWORD *)(v6 - 96);
  *(void *)(a2 + 16) = *(void *)(v6 - 80);
  *(void *)(v6 - 96) = 0;
  *(void *)(v6 - 88) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v6 - 72);
  *(void *)(a2 + 40) = *(void *)(v6 - 56);
  *(void *)(v6 - 80) = 0;
  *(void *)(v6 - 72) = 0;
  *(void *)(v6 - 64) = 0;
  *(void *)(v6 - 56) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(v6 - 48);
  *(void *)(a2 + 64) = *(void *)(v6 - 32);
  *(void *)(v6 - 48) = 0;
  *(void *)(v6 - 40) = 0;
  long long v7 = *(_OWORD *)(v6 - 24);
  *(void *)(a2 + 88) = *(void *)(v6 - 8);
  *(_OWORD *)(a2 + 72) = v7;
  *(void *)(v6 - 32) = 0;
  *(void *)(v6 - 24) = 0;
  *(void *)(v6 - 16) = 0;
  *(void *)(v6 - 8) = 0;
  uint64_t v9 = a1[3];
  for (uint64_t j = a1[4]; j != v9; sub_216B02BDC((uint64_t)(a1 + 5), j))
    j -= 96;
  a1[4] = v9;
}

uint64_t sub_216B08FE8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[5];
  uint64_t v3 = (uint64_t)(a1 + 5);
  unint64_t v5 = *(void *)(v3 - 8);
  if (v5 >= v4)
  {
    uint64_t result = sub_216B02D70(a1 + 3, a2);
  }
  else
  {
    sub_216B02E7C(v3, *(void *)(v3 - 8), a2);
    uint64_t result = v5 + 96;
  }
  a1[4] = result;
  return result;
}

void sub_216B0903C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_118PathExprCloseGroupE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_118PathExprCloseGroupE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  unint64_t v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B09114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_216B09184(uint64_t a1)
{
  uint64_t v2 = (long long *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 32);
  long long v13 = *(_OWORD *)(a1 + 48);
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  uint64_t v3 = *(unsigned char **)(a1 + 32);
  if (v3 == *(unsigned char **)(a1 + 64) || *v3 != 43)
  {
    *uint64_t v2 = v10;
    v2[1] = v13;
    long long v11 = *v2;
    long long v14 = v2[1];
    while ((sub_2169C5224((void *)a1) & 1) != 0)
      ;
    long long v5 = *(unsigned char **)(a1 + 32);
    if (v5 == *(unsigned char **)(a1 + 64) || *v5 != 38)
    {
      *uint64_t v2 = v11;
      v2[1] = v14;
      long long v12 = *v2;
      long long v15 = v2[1];
      while ((sub_2169C5224((void *)a1) & 1) != 0)
        ;
      long long v7 = *(unsigned char **)(a1 + 32);
      if (v7 == *(unsigned char **)(a1 + 64) || *v7 != 45)
      {
        *uint64_t v2 = v12;
        v2[1] = v15;
        uint64_t result = sub_2169C5224((void *)a1);
        if (!result) {
          return result;
        }
        while ((sub_2169C5224((void *)a1) & 1) != 0)
          ;
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 40) + 1;
        *(void *)(a1 + 32) = v7 + 1;
        *(void *)(a1 + 40) = v8;
        ++*(void *)(a1 + 56);
        while ((sub_2169C5224((void *)a1) & 1) != 0)
          ;
      }
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v5 + 1;
      *(void *)(a1 + 40) = v6;
      ++*(void *)(a1 + 56);
      while ((sub_2169C5224((void *)a1) & 1) != 0)
        ;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v3 + 1;
    *(void *)(a1 + 40) = v4;
    ++*(void *)(a1 + 56);
    while ((sub_2169C5224((void *)a1) & 1) != 0)
      ;
  }
  return 1;
}

uint64_t sub_216B092F8(void *a1, uint64_t a2)
{
  sub_216B093D8((uint64_t)a1);
  if (sub_216B09468((uint64_t)a1) & 1) != 0 || (sub_216B095D8((uint64_t)a1, a2)) {
    return 1;
  }
  uint64_t v4 = (unsigned char *)a1[4];
  if (v4 != (unsigned char *)a1[8] && *v4 == 40)
  {
    uint64_t v5 = a1[5] + 1;
    a1[4] = v4 + 1;
    a1[5] = v5;
    ++a1[7];
    if ((sub_216B09A38((uint64_t)a1, a2) & 1) == 0) {
      sub_216B08C8C((uint64_t)a1);
    }
    uint64_t v6 = (unsigned char *)a1[4];
    if (v6 == (unsigned char *)a1[8] || *v6 != 41) {
      sub_216B0903C((uint64_t)a1);
    }
    uint64_t v7 = a1[5] + 1;
    a1[4] = v6 + 1;
    a1[5] = v7;
    ++a1[7];
    return 1;
  }
  return 0;
}

__n128 sub_216B093D8(uint64_t a1)
{
  uint64_t v2 = (__n128 *)(a1 + 32);
  __n128 v6 = *(__n128 *)(a1 + 32);
  __n128 v7 = *(__n128 *)(a1 + 48);
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  uint64_t v3 = *(unsigned char **)(a1 + 32);
  if (v3 == *(unsigned char **)(a1 + 64) || *v3 != 126)
  {
    __n128 result = v6;
    *uint64_t v2 = v6;
    v2[1] = v7;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v3 + 1;
    *(void *)(a1 + 40) = v4;
    ++*(void *)(a1 + 56);
    while ((sub_2169C5224((void *)a1) & 1) != 0)
      ;
  }
  return result;
}

uint64_t sub_216B09468(uint64_t a1)
{
  uint64_t v2 = (long long *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 32);
  long long v13 = *(_OWORD *)(a1 + 48);
  if (!sub_216B04C78((void *)a1)
    || (v15 = *v2, v18 = v2[1], char v3 = sub_216B04CD0((void *)a1), *v2 = v15, v2[1] = v18, (v3 & 1) != 0))
  {
    *uint64_t v2 = v11;
    v2[1] = v13;
    long long v12 = *v2;
    long long v14 = v2[1];
    uint64_t v4 = *(unsigned char **)(a1 + 32);
    uint64_t v5 = *(unsigned char **)(a1 + 64);
    if (v4 == v5 || *v4 != 37) {
      goto LABEL_14;
    }
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 32) = v4 + 1;
    *(void *)(a1 + 40) = v6 + 1;
    uint64_t v7 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v7 + 1;
    long long v16 = *v2;
    long long v19 = v2[1];
    if (v4 + 1 == v5
      || v4[1] != 47
      || (*(void *)(a1 + 32) = v4 + 2,
          *(void *)(a1 + 40) = v6 + 2,
          *(void *)(a1 + 56) = v7 + 2,
          !sub_216B04EEC(a1)))
    {
      *uint64_t v2 = v16;
      v2[1] = v19;
      long long v17 = *v2;
      long long v20 = v2[1];
      if (sub_2169C90A0((void *)a1))
      {
        sub_216B097A0(a1);
      }
      else
      {
        *uint64_t v2 = v17;
        v2[1] = v20;
      }
      uint64_t v8 = *(unsigned char **)(a1 + 32);
      if (v8 == *(unsigned char **)(a1 + 64) || *v8 != 47)
      {
        if (!sub_216B04FC4((void *)a1)) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v9 = *(void *)(a1 + 40) + 1;
        *(void *)(a1 + 32) = v8 + 1;
        *(void *)(a1 + 40) = v9;
        ++*(void *)(a1 + 56);
        if ((sub_216B04EEC(a1) & 1) == 0)
        {
LABEL_14:
          uint64_t result = 0;
          *uint64_t v2 = v12;
          v2[1] = v14;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_216B095D8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (long long *)(a1 + 32);
  uint64_t v4 = *(unsigned char **)(a1 + 32);
  if (v4 != *(unsigned char **)(a1 + 64) && *v4 == 47)
  {
    if ((sub_216B05524((void *)a1) & 1) == 0)
    {
      uint64_t v6 = *(unsigned char **)(a1 + 32);
      if (v6 == *(unsigned char **)(a1 + 64) || *v6 != 47) {
        sub_216B0557C(a1);
      }
      uint64_t v7 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v6 + 1;
      *(void *)(a1 + 40) = v7;
      ++*(void *)(a1 + 56);
    }
LABEL_19:
    sub_216B09838(a1, a2);
    return 1;
  }
  long long v13 = *v5;
  long long v15 = *(_OWORD *)(a1 + 48);
  if (sub_2169C90A0((void *)a1))
  {
    sub_216B097A0(a1);
    if ((sub_216B05524((void *)a1) & 1) == 0)
    {
      uint64_t v8 = *(unsigned char **)(a1 + 32);
      if (v8 == *(unsigned char **)(a1 + 64) || *v8 != 47) {
        return 1;
      }
      uint64_t v9 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v8 + 1;
      *(void *)(a1 + 40) = v9;
      ++*(void *)(a1 + 56);
    }
    goto LABEL_19;
  }
  long long *v5 = v13;
  v5[1] = v15;
  if (sub_216B09838(a1, a2)) {
    return 1;
  }
  long long v11 = *(unsigned char **)(a1 + 32);
  if (v11 != *(unsigned char **)(a1 + 64) && *v11 == 46)
  {
    uint64_t v12 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v11 + 1;
    *(void *)(a1 + 40) = v12;
    ++*(void *)(a1 + 56);
    long long v14 = *v5;
    long long v16 = v5[1];
    if (!sub_216B05524((void *)a1))
    {
      long long *v5 = v14;
      v5[1] = v16;
      return 1;
    }
    goto LABEL_19;
  }
  return 0;
}

void sub_216B0978C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

__n128 sub_216B097A0(uint64_t a1)
{
  uint64_t v2 = (__n128 *)(a1 + 32);
  __n128 v6 = *(__n128 *)(a1 + 32);
  uint64_t v1 = (unsigned char *)v6.n128_u64[0];
  for (__n128 i = *(__n128 *)(a1 + 48); v1 != *(unsigned char **)(a1 + 64); v1 = *(unsigned char **)(a1 + 32))
  {
    if (*v1 != 47) {
      break;
    }
    uint64_t v4 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v1 + 1;
    *(void *)(a1 + 40) = v4;
    ++*(void *)(a1 + 56);
    if (!sub_2169C90A0((void *)a1)) {
      break;
    }
    __n128 v6 = *v2;
    __n128 i = v2[1];
  }
  __n128 result = v6;
  *uint64_t v2 = v6;
  v2[1] = i;
  return result;
}

uint64_t sub_216B09838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a1 + 32);
  long long v15 = *(_OWORD *)(a1 + 32);
  long long v16 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_216B085D4((void *)a1, a2);
  if (v5)
  {
    long long v17 = *v4;
    long long v18 = v4[1];
    long long v19 = *v4;
    long long v20 = v18;
    if (sub_216B08568((void *)a1))
    {
      while (1)
      {
        int v6 = sub_216B085D4((void *)a1, a2);
        long long *v4 = v19;
        v4[1] = v20;
        if (!v6 || !sub_216B08568((void *)a1) || (sub_216B085D4((void *)a1, a2) & 1) == 0) {
          break;
        }
        long long v17 = *v4;
        long long v18 = v4[1];
        long long v19 = *v4;
        long long v20 = v18;
        if ((sub_216B08568((void *)a1) & 1) == 0) {
          goto LABEL_7;
        }
      }
    }
    else
    {
LABEL_7:
      long long *v4 = v19;
      v4[1] = v20;
    }
    long long *v4 = v17;
    v4[1] = v18;
    sub_216B05524((void *)a1);
    uint64_t v7 = *(unsigned char **)(a1 + 32);
    if (v7 != *(unsigned char **)(a1 + 64) && *v7 == 46)
    {
      uint64_t v8 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v7 + 1;
      *(void *)(a1 + 40) = v8;
      ++*(void *)(a1 + 56);
      sub_216B08678(a1);
      if (v9)
      {
        sub_216B08764((void *)a1, a2);
      }
      else
      {
        long long v11 = *(unsigned char **)(a1 + 32);
        if (v11 == *(unsigned char **)(a1 + 64) || *v11 != 123) {
          sub_216B088B8(a1);
        }
        uint64_t v12 = *(void *)(a1 + 40) + 1;
        *(void *)(a1 + 32) = v11 + 1;
        *(void *)(a1 + 40) = v12;
        ++*(void *)(a1 + 56);
        if ((sub_216B07CA4((void *)a1, a2) & 1) == 0) {
          sub_216B08274(a1);
        }
        long long v13 = *(unsigned char **)(a1 + 32);
        if (v13 == *(unsigned char **)(a1 + 64) || *v13 != 125) {
          sub_216B08858(a1);
        }
        uint64_t v14 = *(void *)(a1 + 40) + 1;
        *(void *)(a1 + 32) = v13 + 1;
        *(void *)(a1 + 40) = v14;
        ++*(void *)(a1 + 56);
      }
    }
  }
  else
  {
    long long *v4 = v15;
    v4[1] = v16;
  }
  return v5;
}

void sub_216B09A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B09A38(uint64_t a1, uint64_t a2)
{
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  sub_216B093D8(a1);
  if ((sub_216B09468(a1) & 1) == 0 && (sub_216B095D8(a1, a2) & 1) == 0)
  {
    uint64_t v4 = *(unsigned char **)(a1 + 32);
    if (v4 == *(unsigned char **)(a1 + 64) || *v4 != 40) {
      return 0;
    }
    uint64_t v5 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v4 + 1;
    *(void *)(a1 + 40) = v5;
    ++*(void *)(a1 + 56);
    if ((sub_216B09A38(a1, a2) & 1) == 0) {
      sub_216B08C8C(a1);
    }
    int v6 = *(unsigned char **)(a1 + 32);
    if (v6 == *(unsigned char **)(a1 + 64) || *v6 != 41) {
      sub_216B0903C(a1);
    }
    uint64_t v7 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v6 + 1;
    *(void *)(a1 + 40) = v7;
    ++*(void *)(a1 + 56);
  }
  uint64_t v8 = (long long *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 32);
  long long v12 = *(_OWORD *)(a1 + 48);
  long long v13 = v11;
  long long v14 = v12;
  if (sub_216B09184(a1))
  {
    while (1)
    {
      int v9 = sub_216B092F8(a1, a2);
      *uint64_t v8 = v13;
      *(_OWORD *)(a1 + 48) = v14;
      if (!v9 || !sub_216B09184(a1) || !sub_216B092F8(a1, a2)) {
        break;
      }
      long long v11 = *v8;
      long long v12 = *(_OWORD *)(a1 + 48);
      long long v13 = *v8;
      long long v14 = v12;
      if ((sub_216B09184(a1) & 1) == 0) {
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_15:
    *uint64_t v8 = v13;
    *(_OWORD *)(a1 + 48) = v14;
  }
  *uint64_t v8 = v11;
  *(_OWORD *)(a1 + 48) = v12;
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  return 1;
}

void sub_216B09BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_216B09BDC(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_2169C98F0(&v5);
  char v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B09C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

unsigned __int8 *sub_216B09CD4(unsigned __int8 *__dst, long long *a2, char **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  if ((char)__dst[23] < 0)
  {
    std::string::size_type v7 = *(unsigned __int8 **)__dst;
    uint64_t v6 = *((void *)__dst + 1);
  }
  else
  {
    uint64_t v6 = __dst[23];
    std::string::size_type v7 = __dst;
  }
  *((void *)__dst + 3) = v7;
  *((void *)__dst + 4) = v7;
  *(_OWORD *)(__dst + 40) = xmmword_217411D30;
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = &v7[v6];
  sub_216779094((void *)__dst + 9, *a3);
  return __dst;
}

void sub_216B09D64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B09D80(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_216815D10(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[72 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[72 * v9];
  *(void *)long long v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  long long v12 = *(_OWORD *)(a2 + 48);
  *((void *)v11 + 8) = *(void *)(a2 + 64);
  *((_OWORD *)v11 + 3) = v12;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  v15[2] = v11 + 72;
  sub_216B09EE8(a1, v15);
  uint64_t v13 = a1[1];
  sub_216B0A0C8(v15);
  return v13;
}

void sub_216B09ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B0A0C8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B09EE8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216B09F60((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216B09F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 0;
      *(void *)(v7 - 56) = 0;
      long long v8 = *(_OWORD *)(a3 - 72);
      a3 -= 72;
      *(_OWORD *)(v7 - 72) = v8;
      *(void *)(v7 - 56) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 32) = *(void *)(a3 + 40);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      long long v9 = *(_OWORD *)(a3 + 48);
      *(void *)(v7 - 8) = *(void *)(a3 + 64);
      *(_OWORD *)(v7 - 24) = v9;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 72;
      *((void *)&v15 + 1) -= 72;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216B0A03C((uint64_t)v12);
  return v10;
}

uint64_t sub_216B0A03C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216B0A074((uint64_t *)a1);
  }
  return a1;
}

void sub_216B0A074(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_2169B5BD0(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **sub_216B0A0C8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216B0A0FC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    sub_2169B5BD0(v4, i - 72);
  }
}

uint64_t sub_216B0A144(uint64_t *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 5)
    {
      uint64_t v19 = v12 - a2;
      uint64_t v20 = (uint64_t)(v12 - a2) >> 5;
      if (v20 >= a5)
      {
        uint64_t v21 = &a3[8 * a5];
      }
      else
      {
        uint64_t v21 = &a3[8 * v20];
        a1[1] = sub_216B0A4E0(v9, (uint64_t)v21, a4, *(void *)(v9 - 8));
        if (v19 < 1) {
          return v5;
        }
      }
      sub_216B0A2C8((uint64_t)a1, v5, v12, v5 + 32 * a5);
      sub_216B0A648((uint64_t)&v23, a3, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 5);
      if (v14 >> 59) {
        sub_21677CB10();
      }
      uint64_t v15 = (a2 - v13) >> 5;
      uint64_t v16 = v10 - v13;
      if (v16 >> 4 > v14) {
        unint64_t v14 = v16 >> 4;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v27 = v9;
      if (v17) {
        long long v18 = (char *)sub_2168707F4(v9, v17);
      }
      else {
        long long v18 = 0;
      }
      int v23 = v18;
      __n128 v24 = &v18[32 * v15];
      __n128 v25 = v24;
      uint64_t v26 = &v18[32 * v17];
      sub_216B0A39C(&v23, (uint64_t)a3, a5);
      uint64_t v5 = sub_216B0A42C(a1, &v23, v5);
      sub_216B0A840(&v23);
    }
  }
  return v5;
}

void sub_216B0A2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B0A2C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    uint64_t v10 = a2 + 32 * ((v6 - a4) >> 5) + 4;
    uint64_t v11 = v6 + 4;
    do
    {
      sub_21697D878((_DWORD *)(v11 - 4), (_DWORD *)(v10 - 4));
      sub_21697D8B4((_DWORD *)v11, (_DWORD *)v10);
      long long v12 = *(_OWORD *)(v10 + 4);
      *(void *)(v11 + 20) = *(void *)(v10 + 20);
      *(_OWORD *)(v11 + 4) = v12;
      *(void *)(v10 + 12) = 0;
      *(void *)(v10 + 4) = 0;
      *(void *)(v10 + 20) = 0;
      unint64_t v13 = v10 + 28;
      v10 += 32;
      v11 += 32;
    }
    while (v13 < a3);
    uint64_t v8 = v11 - 4;
  }
  *(void *)(a1 + 8) = v8;
  return sub_216B0A594((uint64_t)&v15, a2, v7, v6);
}

_DWORD *sub_216B0A39C(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 2);
  if (a3)
  {
    uint64_t v5 = v4 + 4;
    uint64_t v6 = 32 * a3;
    uint64_t v7 = a2 + 4;
    v4 += 32 * a3;
    do
    {
      sub_21697D878((_DWORD *)(v5 - 4), (_DWORD *)(v7 - 4));
      uint64_t result = sub_21697D8B4((_DWORD *)v5, (_DWORD *)v7);
      long long v8 = *(_OWORD *)(v7 + 4);
      *(void *)(v5 + 20) = *(void *)(v7 + 20);
      *(_OWORD *)(v5 + 4) = v8;
      *(void *)(v7 + 12) = 0;
      *(void *)(v7 + 4) = 0;
      *(void *)(v7 + 20) = 0;
      v5 += 32;
      v7 += 32;
      v6 -= 32;
    }
    while (v6);
  }
  *((void *)v3 + 2) = v4;
  return result;
}

uint64_t sub_216B0A42C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216B0A6E4((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216B0A4E0(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_216B0A4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_21697D878((_DWORD *)v4, (_DWORD *)v6);
      sub_21697D8B4((_DWORD *)(v4 + 4), (_DWORD *)(v6 + 4));
      long long v7 = *(_OWORD *)(v6 + 8);
      *(void *)(v4 + 24) = *(void *)(v6 + 24);
      *(_OWORD *)(v4 + 8) = v7;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)(v6 + 24) = 0;
      uint64_t v4 = v12 + 32;
      v12 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2169B742C((uint64_t)v9);
  return v4;
}

uint64_t sub_216B0A594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      sub_21697DE94((int *)(a4 + v7 - 32), (int *)(a3 + v7 - 32));
      sub_21697DEEC((int *)(a4 + v7 - 28), (int *)(a3 + v7 - 28));
      uint64_t v9 = (void **)(a4 + v7 - 24);
      if (*(char *)(a4 + v7 - 1) < 0) {
        operator delete(*v9);
      }
      long long v10 = *(_OWORD *)(v8 - 24);
      *(void *)(a4 + v7 - 8) = *(void *)(v8 - 8);
      *(_OWORD *)uint64_t v9 = v10;
      *(unsigned char *)(v8 - 1) = 0;
      *(unsigned char *)(v8 - 24) = 0;
      v7 -= 32;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

int *sub_216B0A648(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_21697DE94((int *)a4, v5);
      uint64_t v7 = v5 + 1;
      sub_21697DEEC((int *)(a4 + 4), v7);
      uint64_t v8 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*v8);
      }
      long long v9 = *(_OWORD *)(v7 + 1);
      *(void *)(a4 + 24) = *(void *)(v7 + 5);
      *(_OWORD *)uint64_t v8 = v9;
      *((unsigned char *)v7 + 27) = 0;
      *((unsigned char *)v7 + 4) = 0;
      a4 += 32;
      uint64_t v5 = v7 + 7;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_216B0A6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3 - 32;
    do
    {
      sub_21697D878((_DWORD *)(v7 - 32), (_DWORD *)v9);
      sub_21697D8B4((_DWORD *)(v7 - 28), (_DWORD *)(v9 + 4));
      long long v10 = *(_OWORD *)(v9 + 8);
      *(void *)(v7 - 8) = *(void *)(v9 + 24);
      *(_OWORD *)(v7 - 24) = v10;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      uint64_t v7 = *((void *)&v17 + 1) - 32;
      *((void *)&v17 + 1) -= 32;
      BOOL v11 = v9 == a5;
      v9 -= 32;
    }
    while (!v11);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_216B0A7B4((uint64_t)v14);
  return v12;
}

uint64_t sub_216B0A7B4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216B0A7EC((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216B0A7EC(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_2169B5A1C(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216B0A840(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216B0A874(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 32;
      uint64_t result = sub_2169B5A1C(v4, v1 - 32);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216B0A8BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v10 = (uint64_t)(a1 + 2);
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[1];
    if (a5 <= (uint64_t)(v9 - v11) >> 6)
    {
      uint64_t v18 = v11 - a2;
      uint64_t v19 = (uint64_t)(v11 - a2) >> 6;
      if (v19 >= a5)
      {
        uint64_t v20 = a3 + (a5 << 6);
      }
      else
      {
        uint64_t v20 = a3 + (v19 << 6);
        a1[1] = sub_216B0ABC0((uint64_t)(a1 + 2), v20, a4, v11);
        if (v18 < 1) {
          return v5;
        }
      }
      sub_216B0AA68((uint64_t)a1, v5, v11, v5 + (a5 << 6));
      sub_216B0ADA0((uint64_t)v25, v7, v20, v5);
    }
    else
    {
      uint64_t v12 = *a1;
      unint64_t v13 = a5 + ((uint64_t)(v11 - *a1) >> 6);
      if (v13 >> 58) {
        sub_21677CB10();
      }
      uint64_t v14 = (a2 - v12) >> 6;
      uint64_t v15 = v9 - v12;
      if (v15 >> 5 > v13) {
        unint64_t v13 = v15 >> 5;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v13;
      }
      void v25[4] = a1 + 2;
      if (v16) {
        long long v17 = (char *)sub_2169B761C((uint64_t)(a1 + 2), v16);
      }
      else {
        long long v17 = 0;
      }
      uint64_t v21 = &v17[64 * v14];
      v25[0] = v17;
      v25[1] = v21;
      uint64_t v25[3] = &v17[64 * v16];
      uint64_t v22 = a5 << 6;
      int v23 = &v21[64 * a5];
      do
      {
        sub_216B0AC54(v10, (uint64_t)v21, v7);
        v21 += 64;
        v7 += 64;
        v22 -= 64;
      }
      while (v22);
      v25[2] = v23;
      uint64_t v5 = sub_216B0AB0C(a1, v25, v5);
      sub_216B0AF9C(v25);
    }
  }
  return v5;
}

void sub_216B0AA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B0AA68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      sub_216B0AC54(a1 + 16, v8, v10);
      v10 += 64;
      v8 += 64;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_216B0ACD8((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_216B0AB0C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216B0AE58((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216B0ABC0(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_216B0ABC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216B0AC54(a1, v4, v6);
      v6 += 64;
      uint64_t v4 = v12 + 64;
      v12 += 64;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2169B8160((uint64_t)v9);
  return v4;
}

__n128 sub_216B0AC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_21697D878((_DWORD *)a2, (_DWORD *)a3);
  sub_21697D8B4((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  __n128 result = *(__n128 *)(a3 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a2 + 56) = *(unsigned char *)(a3 + 56);
  return result;
}

uint64_t sub_216B0ACD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      sub_21697DE94((int *)(a4 + v7 - 64), (int *)(a3 + v7 - 64));
      sub_21697DEEC((int *)(a4 + v7 - 60), (int *)(a3 + v7 - 60));
      sub_21697DE58((uint64_t *)(a4 + v7 - 56));
      *(_OWORD *)(v9 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v9 - 40) = *(void *)(a3 + v7 - 40);
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 40) = 0;
      sub_216B02228((void **)(a4 + v7 - 32));
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 + v7 - 32);
      *(void *)(v9 - 16) = *(void *)(a3 + v7 - 16);
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(unsigned char *)(v9 - 8) = *(unsigned char *)(a3 + v7 - 8);
      v7 -= 64;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_216B0ADA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_21697DE94((int *)a4, (int *)v5);
    sub_21697DEEC((int *)(a4 + 4), (int *)(v5 + 4));
    sub_21697DE58((uint64_t *)(a4 + 8));
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(v5 + 8);
    *(void *)(a4 + 24) = *(void *)(v5 + 24);
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    sub_216B02228((void **)(a4 + 32));
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(v5 + 32);
    *(void *)(a4 + 48) = *(void *)(v5 + 48);
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    *(void *)(v5 + 48) = 0;
    *(unsigned char *)(a4 + 56) = *(unsigned char *)(v5 + 56);
    a4 += 64;
    v5 += 64;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_216B0AE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 64;
      sub_216B0AC54(a1, v7 - 64, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 64;
      *((void *)&v16 + 1) -= 64;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_216B0AF10((uint64_t)v13);
  return v11;
}

uint64_t sub_216B0AF10(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216B0AF48((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216B0AF48(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      __n128 result = (uint64_t *)sub_2169B5ADC(v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216B0AF9C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216B0AFD0(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 64;
      __n128 result = sub_2169B5ADC(v4, v1 - 64);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_216B0B018(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    char v10 = (char *)sub_2168707F4(v7, v9);
  }
  else {
    char v10 = 0;
  }
  uint64_t v11 = &v10[32 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[32 * v9];
  sub_21697D878(v11, (_DWORD *)a2);
  sub_21697D8B4((_DWORD *)v11 + 1, (_DWORD *)(a2 + 4));
  long long v12 = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(_OWORD *)(v11 + 8) = v12;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  v15[2] = v11 + 32;
  sub_216B0B120(a1, v15);
  uint64_t v13 = a1[1];
  sub_216B0A840(v15);
  return v13;
}

void sub_216B0B10C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B0A840((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B0B120(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216B0A6E4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216B0B198(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216B0AE58((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216B0B210(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_216B0B278(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B0B294(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_216B02BDC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216B0B32C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216B0B3A4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216B0B3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      int v9 = *(_DWORD *)(a3 - 8);
      *(unsigned char *)(v7 - 4) = *(unsigned char *)(a3 - 4);
      *(_DWORD *)(v7 - 8) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 32;
      *((void *)&v15 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216B0B458((uint64_t)v12);
  return v10;
}

uint64_t sub_216B0B458(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216870910(a1);
  }
  return a1;
}

void sub_216B0B490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(a1 + 48);
  sub_2169B81EC(&a10);
}

unint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_EvalExpr(int **a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3)
  {
    unsigned int v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = 0;
    do
    {
      switch(*v4)
      {
        case 0:
          unint64_t v12 = a3(a2, 0);
          unsigned int v8 = v12 & 1;
          if (HIDWORD(v12) == 1 && v7 == 0) {
            uint64_t v7 = 1;
          }
          else {
            uint64_t v7 = v7;
          }
          break;
        case 1:
          v8 ^= 1u;
          break;
        case 2:
          uint64_t v9 = (v9 + 1);
          break;
        case 3:
          uint64_t v9 = (v9 - 1);
          break;
        case 4:
        case 5:
          if (v4 != v3 && ((v8 ^ (*v4 != 5)) & 1) == 0)
          {
            uint64_t v10 = v9;
            do
            {
              int v11 = *v4;
              if (*v4 == 3)
              {
                uint64_t v10 = (v10 - 1);
                if (v10 == v9) {
                  goto LABEL_25;
                }
              }
              else if (v11 == 2)
              {
                uint64_t v10 = (v10 + 1);
              }
              else if (!v11)
              {
                a3(a2, 1);
              }
              ++v4;
            }
            while (v4 != v3);
            uint64_t v4 = v3;
            uint64_t v9 = v10;
          }
          break;
        default:
          break;
      }
LABEL_25:
      ++v4;
    }
    while (v4 != v3);
  }
  return v8 | (unint64_t)(v7 << 32);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  sub_2169C487C((int *)a1, (_DWORD *)a2);
  sub_2169C48D4((int *)(a1 + 4), (_DWORD *)(a2 + 4));
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 56);
  *(_WORD *)(a1 + 104) = 0;
  uint64_t v7 = (void **)(a1 + 8);
  sub_216B0BCC8((char **)(a1 + 8), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 5);
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  if (v8 != v9)
  {
    uint64_t v75 = a1 + 24;
    v73 = (int64x2_t **)(a1 + 48);
    v74 = (void **)(a1 + 32);
    while (1)
    {
      if (*(_DWORD *)(v8 + 24) == -1)
      {
        if (*(char *)(v8 + 23) < 0)
        {
          if (!*(void *)(v8 + 8))
          {
LABEL_24:
            uint64_t v23 = *(void *)(a1 + 8);
            uint64_t v22 = *(void *)(a1 + 16);
            if (v23 == v22) {
              *(unsigned char *)(a1 + 104) = 1;
            }
            if (v8 + 32 == v9)
            {
              *(unsigned char *)(a1 + 105) = 1;
            }
            else
            {
              __n128 v24 = *(int64x2_t **)(a1 + 32);
              __n128 v25 = *(int64x2_t **)(a1 + 40);
              uint64_t v26 = *(int64x2_t **)(a1 + 48);
              if (v24 == v25)
              {
                if (v24 >= v26)
                {
                  unint64_t v43 = (char *)v26 - (char *)v24;
                  unint64_t v44 = ((char *)v26 - (char *)v24) >> 3;
                  if (v44 <= 1) {
                    unint64_t v44 = 1;
                  }
                  if (v43 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v45 = v44;
                  }
                  long long v47 = (int64x2_t *)sub_216787EE0((uint64_t)v73, v45);
                  long long v48 = *(char **)(a1 + 32);
                  std::string v49 = *(char **)(a1 + 40);
                  v47->i64[0] = 0;
                  v47->i64[1] = 0;
                  unint64_t v50 = (uint64_t *)v47;
                  if (v49 != v48)
                  {
                    do
                    {
                      *((_OWORD *)v50 - 1) = *((_OWORD *)v49 - 1);
                      v50 -= 2;
                      v49 -= 16;
                    }
                    while (v49 != v48);
                    long long v48 = (char *)*v74;
                  }
                  uint64_t v26 = &v47[v46];
                  __n128 v25 = v47 + 1;
                  *(void *)(a1 + 32) = v50;
                  *(void *)(a1 + 40) = v47 + 1;
                  *(void *)(a1 + 48) = v26;
                  if (v48)
                  {
                    operator delete(v48);
                    uint64_t v26 = *v73;
                  }
                }
                else
                {
                  __n128 v25 = v24 + 1;
                  v24->i64[0] = 0;
                  v24->i64[1] = 0;
                }
                *(void *)(a1 + 40) = v25;
                uint64_t v23 = *(void *)(a1 + 8);
                uint64_t v22 = *(void *)(a1 + 16);
              }
              unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 2);
              v25[-1].i64[1] = v51;
              if (v25 >= v26)
              {
                std::string v53 = (int64x2_t *)*v74;
                uint64_t v54 = ((char *)v25 - (unsigned char *)*v74) >> 4;
                unint64_t v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 60) {
                  sub_21677CB10();
                }
                uint64_t v56 = (char *)v26 - (char *)v53;
                if (v56 >> 3 > v55) {
                  unint64_t v55 = v56 >> 3;
                }
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v57 = v55;
                }
                if (v57)
                {
                  int v58 = (char *)sub_216787EE0((uint64_t)v73, v57);
                  std::string v53 = *(int64x2_t **)(a1 + 32);
                  __n128 v25 = *(int64x2_t **)(a1 + 40);
                }
                else
                {
                  int v58 = 0;
                }
                unint64_t v59 = (int64x2_t *)&v58[16 * v54];
                int64x2_t *v59 = vdupq_n_s64(v51);
                uint64_t v52 = v59 + 1;
                if (v25 != v53)
                {
                  do
                  {
                    v59[-1] = v25[-1];
                    --v59;
                    --v25;
                  }
                  while (v25 != v53);
                  std::string v53 = (int64x2_t *)*v74;
                }
                *(void *)(a1 + 32) = v59;
                *(void *)(a1 + 40) = v52;
                *(void *)(a1 + 48) = &v58[16 * v57];
                if (v53) {
                  operator delete(v53);
                }
              }
              else
              {
                v25->i64[0] = v51;
                v25->i64[1] = v51;
                uint64_t v52 = v25 + 1;
              }
              *(void *)(a1 + 40) = v52;
            }
            goto LABEL_62;
          }
        }
        else if (!*(unsigned char *)(v8 + 23))
        {
          goto LABEL_24;
        }
      }
      if (*(unsigned char *)(v8 + 28)) {
        break;
      }
      if (*(char *)(v8 + 23) < 0)
      {
        if (!*(void *)(v8 + 8)) {
          break;
        }
      }
      else if (!*(unsigned char *)(v8 + 23))
      {
        break;
      }
      std::operator+<char>();
      std::string v31 = std::string::append(&v78, "$");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      std::string::size_type v80 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      unsigned int v77 = 2;
      unint64_t v33 = *(void *)(a1 + 88);
      if (v33 >= *(void *)(a1 + 96))
      {
        uint64_t v34 = sub_216B0D0A4((uint64_t *)(a1 + 80), (uint64_t)__p, &v77);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::ArchRegex::ArchRegex(*(void *)(a1 + 88), __p, 2);
        uint64_t v34 = v33 + 48;
        *(void *)(a1 + 88) = v33 + 48;
      }
      *(void *)(a1 + 88) = v34;
      if (SHIBYTE(v80) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      int v13 = -1 - 1431655765 * ((*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 4);
      long long v15 = *(char **)(a1 + 16);
      unint64_t v35 = *(void *)(a1 + 24);
      if ((unint64_t)v15 >= v35)
      {
        long long v16 = (char *)*v7;
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (unsigned char *)*v7) >> 2);
        unint64_t v38 = v37 + 1;
        if (v37 + 1 > 0x1555555555555555) {
LABEL_109:
        }
          sub_21677CB10();
        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v16) >> 2);
        if (2 * v39 > v38) {
          unint64_t v38 = 2 * v39;
        }
        if (v39 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v20 = 0x1555555555555555;
        }
        else {
          unint64_t v20 = v38;
        }
        if (v20)
        {
          uint64_t v21 = (char *)sub_216B0D05C(v75, v20);
          long long v16 = *(char **)(a1 + 8);
          long long v15 = *(char **)(a1 + 16);
        }
        else
        {
          uint64_t v21 = 0;
        }
        uint64_t v27 = &v21[12 * v37];
        *(_DWORD *)uint64_t v27 = 1;
        *((_DWORD *)v27 + 1) = v13;
        *((_DWORD *)v27 + 2) = -1;
        __n128 v28 = v27;
        if (v15 != v16)
        {
          do
          {
            uint64_t v40 = *(void *)(v15 - 12);
            v15 -= 12;
            int v41 = *((_DWORD *)v15 + 2);
            *(void *)(v28 - 12) = v40;
            v28 -= 12;
            *((_DWORD *)v28 + 2) = v41;
          }
          while (v15 != v16);
LABEL_57:
          long long v16 = (char *)*v7;
        }
LABEL_58:
        uint64_t v36 = v27 + 12;
        *(void *)(a1 + 8) = v28;
        *(void *)(a1 + 16) = v27 + 12;
        *(void *)(a1 + 24) = &v21[12 * v20];
        if (v16) {
          operator delete(v16);
        }
        goto LABEL_60;
      }
      *(_DWORD *)long long v15 = 1;
LABEL_44:
      uint64_t v36 = v15 + 12;
      *((_DWORD *)v15 + 1) = v13;
      *((_DWORD *)v15 + 2) = -1;
LABEL_60:
      *(void *)(a1 + 16) = v36;
      int v42 = *(_DWORD *)(v8 + 24);
      if (v42 != -1) {
        *(_DWORD *)(*(void *)(a1 + 16) - 4) = a4(a3, *(void *)(a2 + 32) + 72 * v42);
      }
LABEL_62:
      v8 += 32;
      if (v8 == v9) {
        goto LABEL_92;
      }
    }
    unint64_t v10 = *(void *)(a1 + 64);
    int v11 = (uint64_t *)(a1 + 56);
    if (v10 >= *(void *)(a1 + 72))
    {
      uint64_t v12 = sub_2167E9A44(v11, (long long *)v8);
    }
    else
    {
      sub_2167E99E4(v11, (long long *)v8);
      uint64_t v12 = v10 + 24;
    }
    *(void *)(a1 + 64) = v12;
    int v13 = -1 - 1431655765 * ((unint64_t)(v12 - *(void *)(a1 + 56)) >> 3);
    long long v15 = *(char **)(a1 + 16);
    unint64_t v14 = *(void *)(a1 + 24);
    if ((unint64_t)v15 >= v14)
    {
      long long v16 = (char *)*v7;
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (unsigned char *)*v7) >> 2);
      unint64_t v18 = v17 + 1;
      if (v17 + 1 > 0x1555555555555555) {
        goto LABEL_109;
      }
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v16) >> 2);
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v20 = 0x1555555555555555;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        uint64_t v21 = (char *)sub_216B0D05C(v75, v20);
        long long v16 = *(char **)(a1 + 8);
        long long v15 = *(char **)(a1 + 16);
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v27 = &v21[12 * v17];
      *(_DWORD *)uint64_t v27 = 0;
      *((_DWORD *)v27 + 1) = v13;
      *((_DWORD *)v27 + 2) = -1;
      __n128 v28 = v27;
      if (v15 != v16)
      {
        do
        {
          uint64_t v29 = *(void *)(v15 - 12);
          v15 -= 12;
          int v30 = *((_DWORD *)v15 + 2);
          *(void *)(v28 - 12) = v29;
          v28 -= 12;
          *((_DWORD *)v28 + 2) = v30;
        }
        while (v15 != v16);
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    *(_DWORD *)long long v15 = 0;
    goto LABEL_44;
  }
LABEL_92:
  uint64_t v61 = *(void *)(a1 + 8);
  uint64_t v60 = *(void *)(a1 + 16);
  if (v61 != v60)
  {
    int v62 = *(void **)(a1 + 32);
    size_t v63 = *(void **)(a1 + 40);
    if (v62 == v63)
    {
      unint64_t v64 = *(void *)(a1 + 48);
      if ((unint64_t)v62 >= v64)
      {
        uint64_t v65 = v64 - (void)v62;
        uint64_t v66 = v65 >> 3;
        if ((unint64_t)(v65 >> 3) <= 1) {
          uint64_t v66 = 1;
        }
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v67 = v66;
        }
        int v68 = sub_216787EE0(a1 + 48, v67);
        v69 = *(char **)(a1 + 32);
        v70 = *(char **)(a1 + 40);
        v72 = &v68[2 * v71];
        size_t v63 = v68 + 2;
        *int v68 = 0;
        v68[1] = 0;
        if (v70 != v69)
        {
          do
          {
            *((_OWORD *)v68 - 1) = *((_OWORD *)v70 - 1);
            v68 -= 2;
            v70 -= 16;
          }
          while (v70 != v69);
          v69 = *(char **)(a1 + 32);
        }
        *(void *)(a1 + 32) = v68;
        *(void *)(a1 + 40) = v63;
        *(void *)(a1 + 48) = v72;
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        size_t v63 = v62 + 2;
        *int v62 = 0;
        v62[1] = 0;
      }
      *(void *)(a1 + 40) = v63;
      uint64_t v61 = *(void *)(a1 + 8);
      uint64_t v60 = *(void *)(a1 + 16);
    }
    *(v63 - 1) = 0xAAAAAAAAAAAAAAABLL * ((v60 - v61) >> 2);
  }
}

void sub_216B0BC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B0BCC8(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556) {
      sub_21677CB10();
    }
    uint64_t v5 = (a1[1] - *a1) / 12;
    uint64_t v6 = (char *)sub_216B0D05C(v3, a2);
    uint64_t v7 = &v6[12 * v5];
    uint64_t v9 = &v6[12 * v8];
    int v11 = *a1;
    unint64_t v10 = a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *(void *)(v10 - 12);
        v10 -= 12;
        int v14 = *((_DWORD *)v10 + 2);
        *(void *)(v12 - 12) = v13;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      unint64_t v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Match(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t a3, uint64_t a4)
{
  v40[0] = a3;
  v40[1] = a4;
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(this)
    && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this) & 1) == 0)
  {
    unint64_t v35 = "sdf/pathExpressionEval.cpp";
    uint64_t v36 = "_Match";
    uint64_t v37 = 192;
    unint64_t v38 = "SdfPredicateFunctionResult pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Ma"
          "tch(const SdfPath &, TfFunctionRef<SdfPredicateFunctionResult (int, const SdfPath &)>) const";
    char v39 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)__p);
    if (v34 >= 0) {
      uint64_t v29 = __p;
    }
    else {
      uint64_t v29 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v35, (pxrInternal__aapl__pxrReserved__ *)"Unsupported path <%s>; can only match prim or prim-property paths",
      v28,
      v29);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    LOBYTE(v18) = 0;
    uint64_t v13 = 0;
    int v27 = 0;
    return v27 & 0xFFFFFF00 | (unint64_t)(v13 << 32) | v18;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, this)) {
      unint64_t v18 = 0x100000000;
    }
    else {
      unint64_t v18 = 0;
    }
    uint64_t v13 = HIDWORD(v18);
    int v27 = v18;
    return v27 & 0xFFFFFF00 | (unint64_t)(v13 << 32) | v18;
  }
  if (*(unsigned char *)(a1 + 106) && !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this))
  {
    LOBYTE(v18) = 0;
    int v27 = 0;
    uint64_t v13 = 1;
    return v27 & 0xFFFFFF00 | (unint64_t)(v13 << 32) | v18;
  }
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 104) || *(unsigned char *)(a1 + 105))
    {
      uint64_t v13 = 0;
      int v27 = 0;
      LOBYTE(v18) = 1;
    }
    else
    {
      int v27 = 0;
      LOBYTE(v18) = *(void *)this == *(void *)a1;
      uint64_t v13 = v18;
    }
    return v27 & 0xFFFFFF00 | (unint64_t)(v13 << 32) | v18;
  }
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(this);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes(this, (uint64_t *)&v35, PathElementCount - v7);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v35;
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v36;
  __p[0] = (void *)a1;
  __p[1] = v40;
  unint64_t v10 = *(void **)(a1 + 32);
  int v11 = *(void **)(a1 + 40);
  if (v10 == v11)
  {
    int v27 = 0;
    LOBYTE(v18) = 1;
    uint64_t v13 = 1;
    goto LABEL_56;
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
  uint64_t v13 = 1;
  int v14 = v12;
  while (1)
  {
    if (v14 > (v9 - v8) >> 3)
    {
LABEL_50:
      LOBYTE(v18) = 0;
      int v27 = 0;
      goto LABEL_56;
    }
    uint64_t v15 = v10[1];
    unint64_t v16 = v15 - *v10;
    v14 -= v16;
    if (*(unsigned char *)(a1 + 104) || *v10 != 0) {
      break;
    }
    unint64_t v18 = sub_216B0C174(__p, v10, v8);
    if (v18 != 1)
    {
LABEL_51:
      int v27 = v18 & 0xFFFFFF00;
      uint64_t v13 = HIDWORD(v18);
      goto LABEL_56;
    }
    uint64_t v19 = v10[1];
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8 * (v19 - *v10));
    if (!*(unsigned char *)(a1 + 105) && v19 == v12 && v8 != v9) {
      goto LABEL_50;
    }
LABEL_33:
    v10 += 2;
    if (v10 == v11)
    {
      int v27 = 0;
      LOBYTE(v18) = 1;
      goto LABEL_56;
    }
  }
  if (!*(unsigned char *)(a1 + 105) && v15 == v12)
  {
    unint64_t v18 = sub_216B0C174(__p, v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 - 8 * v16));
    uint64_t v8 = v9;
    if (v18 != 1) {
      goto LABEL_51;
    }
    goto LABEL_33;
  }
  unint64_t v20 = ((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 - 8 * v14) - v8) >> 3;
  BOOL v21 = v20 >= v16;
  unint64_t v22 = v20 - v16;
  if (!v21 || (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8 * v22 + 8) == v8)
  {
    char v26 = 0;
    int v30 = 0;
    unint64_t v31 = 0x100000000;
    goto LABEL_55;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 8 * v22 + 8;
  while (1)
  {
    unint64_t v25 = sub_216B0C174(__p, v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + v23));
    char v26 = v25;
    if ((_BYTE)v25) {
      break;
    }
    v23 += 8;
    if (v24 == v23) {
      goto LABEL_31;
    }
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + v23);
LABEL_31:
  if (v25 == 1)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8 * (v10[1] - *v10));
    goto LABEL_33;
  }
  int v30 = v25 & 0xFFFFFF00;
  unint64_t v31 = v25 & 0xFFFFFFFF00000000;
LABEL_55:
  int v27 = v30 & 0xFFFFFF00 | v31;
  LOBYTE(v18) = v31 | v26;
  uint64_t v13 = HIDWORD(v31);
LABEL_56:
  __p[0] = &v35;
  sub_216981168((void ***)__p);
  return v27 & 0xFFFFFF00 | (unint64_t)(v13 << 32) | v18;
}

void sub_216B0C134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  long long __p = &a17;
  sub_216981168((void ***)&__p);
  _Unwind_Resume(a1);
}

unint64_t sub_216B0C174(void *a1, void *a2, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = *(void *)(*a1 + 8);
    int v11 = (_DWORD *)(v10 + 12 * v3);
    unint64_t v12 = (_DWORD *)(v10 + 12 * *a2);
    uint64_t v6 = 1;
    while (1)
    {
      if (*v12 == 1)
      {
        uint64_t v14 = *(void *)(v9 + 80) + 48 * (int)v12[1];
        Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
        if (!pxrInternal__aapl__pxrReserved__::ArchRegex::Match(v14, (const char *)Name)) {
          goto LABEL_30;
        }
      }
      else if (!*v12)
      {
        uint64_t v13 = (unsigned __int8 *)(*(void *)(v9 + 56) + 24 * (int)v12[1]);
        if ((char)v13[23] < 0)
        {
          if (!*((void *)v13 + 1)) {
            goto LABEL_10;
          }
        }
        else if (!v13[23])
        {
          goto LABEL_10;
        }
        unint64_t v18 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
        uint64_t v19 = v13[23];
        if ((v19 & 0x80u) == 0) {
          uint64_t v20 = v13[23];
        }
        else {
          uint64_t v20 = *((void *)v13 + 1);
        }
        uint64_t v21 = *((unsigned __int8 *)v18 + 23);
        int v22 = (char)v21;
        if ((v21 & 0x80u) != 0) {
          uint64_t v21 = v18[1];
        }
        if (v20 != v21) {
          goto LABEL_30;
        }
        if (v22 >= 0) {
          uint64_t v23 = (unsigned __int8 *)v18;
        }
        else {
          uint64_t v23 = (unsigned __int8 *)*v18;
        }
        if ((v19 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v13, v23, *((void *)v13 + 1))) {
            goto LABEL_30;
          }
        }
        else if (v13[23])
        {
          while (*v13 == *v23)
          {
            ++v13;
            ++v23;
            if (!--v19) {
              goto LABEL_10;
            }
          }
LABEL_30:
          uint64_t v6 = 0;
LABEL_31:
          uint64_t v4 = 0;
          unint64_t v5 = 0x100000000;
          return v6 | v5 | v4;
        }
      }
LABEL_10:
      uint64_t v16 = v12[2];
      if (v16 != -1)
      {
        uint64_t v17 = (*(uint64_t (**)(void, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(a1[1] + 8))(*(void *)a1[1], v16, this);
        if (v17 != 1)
        {
          unint64_t v5 = v17 & 0xFFFFFFFF00000000;
          uint64_t v4 = v17 & 0xFFFFFF00;
          uint64_t v6 = v17;
          return v6 | v5 | v4;
        }
      }
      v12 += 3;
      this = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)this + 8);
      if (v12 == v11) {
        goto LABEL_31;
      }
    }
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0x100000000;
  uint64_t v6 = 1;
  return v6 | v5 | v4;
}

unint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Next(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, void *))
{
  if (*(_DWORD *)(a2 + 24) == -1)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(this)
      || (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this) & 1) != 0)
    {
      unint64_t PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(this);
      unint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
      if (*(void *)a2 == *(void *)(a2 + 8)
        && !pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, this)) {
          goto LABEL_28;
        }
        unsigned __int8 v8 = 0;
        unint64_t v6 = 0;
        LODWORD(v7) = 0;
        *(_DWORD *)(a2 + 24) = v14;
        goto LABEL_72;
      }
      if (*(unsigned char *)(a1 + 106) && !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this)) {
        goto LABEL_28;
      }
      if (*(void *)(a1 + 8) != *(void *)(a1 + 16))
      {
        uint64_t v16 = *(void *)a2;
        uint64_t v15 = *(void *)(a2 + 8);
        uint64_t v17 = (v15 - *(void *)a2) >> 2;
        uint64_t v18 = *(void *)(a1 + 32);
        if (v17 == (*(void *)(a1 + 40) - v18) >> 4)
        {
          v15 -= 4;
          *(void *)(a2 + 8) = v15;
          uint64_t v17 = (v15 - v16) >> 2;
        }
        uint64_t v19 = (void *)(v18 + 16 * v17);
        if (v15 != v16)
        {
          uint64_t v20 = v19 + 1;
          if (PathElementCount - *(int *)(v15 - 4) >= v19[1] - *v19) {
            goto LABEL_33;
          }
LABEL_28:
          unsigned __int8 v8 = 0;
          LODWORD(v7) = 0;
          unint64_t v6 = 0x100000000;
          return v6 | (v7 << 8) | v8;
        }
        uint64_t v20 = v19 + 1;
        unint64_t v23 = v19[1] - *v19;
        if (PathElementCount - v14 < v23) {
          goto LABEL_28;
        }
        if (PathElementCount - v14 <= v23 || *(unsigned char *)(a1 + 104) != 0)
        {
LABEL_33:
          sub_216981010(v54, this);
          unint64_t v25 = (_DWORD *)((char *)this + 4);
          sub_21698105C((_DWORD *)v54 + 1, (_DWORD *)this + 1);
          uint64_t v26 = *(void *)(a1 + 8);
          uint64_t v27 = *v20;
          uint64_t v28 = v26 + 12 * *v19;
          if (*v20 != *v19)
          {
            unint64_t v50 = v20;
            uint64_t v29 = v26 + 12 * v27;
            uint64_t v30 = v29;
            while (1)
            {
              int v31 = *(_DWORD *)(v30 - 12);
              v30 -= 12;
              if (!v31) {
                break;
              }
LABEL_57:
              pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v54, __p);
              sub_21697DE94((int *)v54, (int *)__p);
              sub_21697DEEC((int *)v54 + 1, (int *)__p + 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
              sub_21697C414(__p);
              uint64_t v29 = v30;
              if (v30 == v28)
              {
                uint64_t v26 = *(void *)(a1 + 8);
                unint64_t v25 = (_DWORD *)((char *)this + 4);
                uint64_t v27 = *v50;
                goto LABEL_59;
              }
            }
            long long v32 = (unsigned __int8 *)(*(void *)(a1 + 56) + 24 * *(int *)(v29 - 8));
            if ((char)v32[23] < 0)
            {
              if (!*((void *)v32 + 1))
              {
LABEL_55:
                uint64_t v39 = *(unsigned int *)(v29 - 4);
                if (v39 != -1)
                {
                  unint64_t v40 = a5(a4, v39, v54);
                  if (v40 != 1) {
                    goto LABEL_75;
                  }
                }
                goto LABEL_57;
              }
            }
            else if (!v32[23])
            {
              goto LABEL_55;
            }
            Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)v54);
            uint64_t v34 = v32[23];
            if ((v34 & 0x80u) == 0) {
              uint64_t v35 = v32[23];
            }
            else {
              uint64_t v35 = *((void *)v32 + 1);
            }
            uint64_t v36 = *((unsigned __int8 *)Name + 23);
            int v37 = (char)v36;
            if ((v36 & 0x80u) != 0) {
              uint64_t v36 = Name[1];
            }
            if (v35 != v36) {
              goto LABEL_69;
            }
            if (v37 >= 0) {
              unint64_t v38 = (unsigned __int8 *)Name;
            }
            else {
              unint64_t v38 = (unsigned __int8 *)*Name;
            }
            if ((v34 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v32, v38, *((void *)v32 + 1))) {
                goto LABEL_69;
              }
            }
            else if (v32[23])
            {
              while (*v32 == *v38)
              {
                ++v32;
                ++v38;
                if (!--v34) {
                  goto LABEL_55;
                }
              }
LABEL_69:
              unsigned __int8 v8 = 0;
              LODWORD(v7) = 0;
              goto LABEL_70;
            }
            goto LABEL_55;
          }
LABEL_59:
          uint64_t v41 = v26 + 12 * v27;
          sub_2169C487C((int *)v54, this);
          sub_2169C48D4((int *)v54 + 1, v25);
          if (v41 == v28)
          {
LABEL_66:
            LODWORD(__p[0]) = PathElementCount;
            sub_216B0C8D8(a2, __p);
            if ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2 != (uint64_t)(*(void *)(a1 + 40)
                                                                                - *(void *)(a1 + 32)) >> 4)
              goto LABEL_69;
            LODWORD(v7) = 0;
            int v48 = *(unsigned __int8 *)(a1 + 105);
            unsigned __int8 v8 = 1;
            if (!v48)
            {
LABEL_70:
              unint64_t v6 = 0x100000000;
LABEL_78:
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v54 + 1);
              sub_21697C414(v54);
              return v6 | (v7 << 8) | v8;
            }
            LOBYTE(v49) = 1;
          }
          else
          {
            uint64_t v42 = v41;
            while (1)
            {
              int v43 = *(_DWORD *)(v42 - 12);
              v42 -= 12;
              if (v43 == 1)
              {
                int v44 = *(_DWORD *)(v41 - 8);
                uint64_t v45 = *(void *)(a1 + 80);
                uint64_t v46 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)v54);
                if (!pxrInternal__aapl__pxrReserved__::ArchRegex::Match(v45 + 48 * v44, (const char *)v46))goto LABEL_69; {
                uint64_t v47 = *(unsigned int *)(v41 - 4);
                }
                if (v47 != -1)
                {
                  unint64_t v40 = a5(a4, v47, v54);
                  if (v40 != 1) {
                    break;
                  }
                }
              }
              pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v54, __p);
              sub_21697DE94((int *)v54, (int *)__p);
              sub_21697DEEC((int *)v54 + 1, (int *)__p + 1);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
              sub_21697C414(__p);
              uint64_t v41 = v42;
              if (v42 == v28) {
                goto LABEL_66;
              }
            }
LABEL_75:
            unsigned __int8 v8 = v40;
            unint64_t v7 = v40 >> 8;
            unint64_t v49 = HIDWORD(v40);
            if (HIDWORD(v40))
            {
              unint64_t v6 = v40 & 0xFFFFFFFF00000000;
              goto LABEL_78;
            }
          }
          unint64_t v6 = 0;
          *(_DWORD *)(a2 + 24) = PathElementCount;
          *(unsigned char *)(a2 + 28) = v49;
          goto LABEL_78;
        }
        unsigned __int8 v8 = 0;
        unint64_t v6 = 0;
        LODWORD(v7) = 0;
        *(_DWORD *)(a2 + 24) = PathElementCount;
LABEL_72:
        *(unsigned char *)(a2 + 28) = 0;
        return v6 | (v7 << 8) | v8;
      }
      if (*(unsigned char *)(a1 + 104) || *(unsigned char *)(a1 + 105))
      {
        unint64_t v6 = 0;
        LODWORD(v7) = 0;
        *(_DWORD *)(a2 + 24) = 0;
        unsigned __int8 v8 = 1;
        *(unsigned char *)(a2 + 28) = 1;
        return v6 | (v7 << 8) | v8;
      }
      if (PathElementCount <= v14)
      {
        LODWORD(v7) = 0;
        unint64_t v6 = 0x100000000;
        unsigned __int8 v8 = 1;
        return v6 | (v7 << 8) | v8;
      }
    }
    else
    {
      v54[0] = "sdf/pathExpressionEval.cpp";
      v54[1] = "_Next";
      v54[2] = 423;
      v54[3] = "SdfPredicateFunctionResult pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase"
               "::_Next(_PatternIncrSearchState &, const SdfPath &, TfFunctionRef<SdfPredicateFunctionResult (int, const "
               "SdfPath &)>) const";
      char v55 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString(this, (uint64_t)__p);
      if (v53 >= 0) {
        int v22 = __p;
      }
      else {
        int v22 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v54, (pxrInternal__aapl__pxrReserved__ *)"Unsupported path <%s>; can only match prim or prim-property paths",
        v21,
        v22);
      if (v53 < 0) {
        operator delete(__p[0]);
      }
    }
    unsigned __int8 v8 = 0;
    unint64_t v6 = 0;
    LODWORD(v7) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    goto LABEL_72;
  }
  unint64_t v6 = 0;
  LODWORD(v7) = 0;
  unsigned __int8 v8 = *(unsigned char *)(a2 + 28);
  return v6 | (v7 << 8) | v8;
}

void sub_216B0C890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21)
{
}

void sub_216B0C8D8(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    unsigned __int8 v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_21677EA28(v4, v12);
      unsigned __int8 v8 = *(_DWORD **)a1;
      unint64_t v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)unint64_t v14 = *a2;
    unint64_t v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unint64_t v6 = *a2;
    unint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_MakePathExpressionEvalImpl(char *a1, pxrInternal__aapl__pxrReserved__::SdfPathExpression *this, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (*((void *)this + 3) == *((void *)this + 4)
    && pxrInternal__aapl__pxrReserved__::SdfPathExpression::IsAbsolute(this))
  {
    uint64_t v18 = a1;
    uint64_t v19 = &v15;
    __p[0] = this;
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v14);
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::Walk(this, (uint64_t)&v18, (uint64_t)sub_216B0CB60, (uint64_t)__p, (void (*)(uint64_t, uint64_t))sub_216B0CFAC, a3, a4);
    unint64_t v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v9 = v14;
    unint64_t v10 = atomic_load((unint64_t *)(v8 + 144));
    BOOL v11 = v9 >= v10
       || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v14, (atomic_ullong *)v8);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v14);
  }
  else
  {
    uint64_t v18 = "sdf/pathExpressionEval.cpp";
    uint64_t v19 = "Sdf_MakePathExpressionEvalImpl";
    uint64_t v20 = 649;
    uint64_t v21 = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_MakePathExpressionEvalImpl(Sdf_PathExpressionEvalBase &, const SdfP"
          "athExpression &, TfFunctionRef<void (const SdfPathExpression::PathPattern &)>)";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)__p, this);
    if (v17 >= 0) {
      unint64_t v12 = __p;
    }
    else {
      unint64_t v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot build evaluator for incomplete SdfPathExpression; must contain only abs"
                                          "olute paths and no expression references: <%s>",
      (const char *)v12);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v11;
}

void sub_216B0CB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_216B0CB60(uint64_t *a1, int a2, int a3)
{
  unsigned int v4 = a2 - 1;
  if ((a2 - 1) < 4)
  {
    if (a3 != 2)
    {
      if (a3 != 1) {
        return;
      }
      uint64_t v5 = *a1;
      if (v4 > 3) {
        int v6 = -1;
      }
      else {
        int v6 = dword_21746F950[v4];
      }
      unint64_t v15 = *(void *)(v5 + 16);
      int v16 = *(int **)(v5 + 8);
      if ((unint64_t)v16 < v15)
      {
        *int v16 = v6;
        char v17 = v16 + 1;
        goto LABEL_48;
      }
      uint64_t v18 = *(int **)v5;
      uint64_t v19 = ((uint64_t)v16 - *(void *)v5) >> 2;
      unint64_t v20 = v19 + 1;
      if (!((unint64_t)(v19 + 1) >> 62))
      {
        uint64_t v21 = v15 - (void)v18;
        if (v21 >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          unint64_t v23 = (char *)sub_21677EA28(v5 + 16, v22);
          uint64_t v18 = *(int **)v5;
          int v16 = *(int **)(v5 + 8);
        }
        else
        {
          unint64_t v23 = 0;
        }
        uint64_t v36 = (int *)&v23[4 * v19];
        int v37 = &v23[4 * v22];
        *uint64_t v36 = v6;
        char v17 = v36 + 1;
        while (v16 != v18)
        {
          int v38 = *--v16;
          *--uint64_t v36 = v38;
        }
        *(void *)uint64_t v5 = v36;
        *(void *)(v5 + 8) = v17;
        *(void *)(v5 + 16) = v37;
        if (v18) {
          operator delete(v18);
        }
LABEL_48:
        *(void *)(v5 + 8) = v17;
        uint64_t v7 = *a1;
        unint64_t v8 = *(int **)(v7 + 8);
        unint64_t v39 = *(void *)(v7 + 16);
        if ((unint64_t)v8 < v39)
        {
          int v10 = 2;
          goto LABEL_50;
        }
        uint64_t v30 = *(int **)v7;
        uint64_t v41 = ((uint64_t)v8 - *(void *)v7) >> 2;
        unint64_t v42 = v41 + 1;
        if (!((unint64_t)(v41 + 1) >> 62))
        {
          uint64_t v43 = v39 - (void)v30;
          if (v43 >> 1 > v42) {
            unint64_t v42 = v43 >> 1;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            uint64_t v45 = (char *)sub_21677EA28(v7 + 16, v44);
            uint64_t v30 = *(int **)v7;
            unint64_t v8 = *(int **)(v7 + 8);
          }
          else
          {
            uint64_t v45 = 0;
          }
          uint64_t v46 = &v45[4 * v41];
          uint64_t v47 = &v45[4 * v44];
          *(_DWORD *)uint64_t v46 = 2;
          unint64_t v40 = v46 + 4;
          while (v8 != v30)
          {
            int v48 = *--v8;
            *((_DWORD *)v46 - 1) = v48;
            v46 -= 4;
          }
LABEL_91:
          *(void *)uint64_t v7 = v46;
          *(void *)(v7 + 8) = v40;
          *(void *)(v7 + 16) = v47;
          if (v30) {
            operator delete(v30);
          }
          goto LABEL_93;
        }
        goto LABEL_96;
      }
LABEL_95:
      sub_21677CB10();
    }
    uint64_t v11 = *a1;
    if (a2 == 4)
    {
      unint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = *(_DWORD **)(v11 + 8);
      if ((unint64_t)v13 >= v12)
      {
        uint64_t v24 = *(_DWORD **)v11;
        uint64_t v25 = ((uint64_t)v13 - *(void *)v11) >> 2;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62) {
          goto LABEL_95;
        }
        uint64_t v27 = v12 - (void)v24;
        if (v27 >> 1 > v26) {
          unint64_t v26 = v27 >> 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          uint64_t v29 = (char *)sub_21677EA28(v11 + 16, v28);
          uint64_t v24 = *(_DWORD **)v11;
          uint64_t v13 = *(_DWORD **)(v11 + 8);
        }
        else
        {
          uint64_t v29 = 0;
        }
        unint64_t v49 = &v29[4 * v25];
        unint64_t v50 = &v29[4 * v28];
        *(_DWORD *)unint64_t v49 = 1;
        unint64_t v14 = v49 + 4;
        while (v13 != v24)
        {
          int v51 = *--v13;
          *((_DWORD *)v49 - 1) = v51;
          v49 -= 4;
        }
        *(void *)uint64_t v11 = v49;
        *(void *)(v11 + 8) = v14;
        *(void *)(v11 + 16) = v50;
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        _DWORD *v13 = 1;
        unint64_t v14 = v13 + 1;
      }
      *(void *)(v11 + 8) = v14;
      uint64_t v11 = *a1;
    }
    unint64_t v52 = *(void *)(v11 + 16);
    char v53 = *(_DWORD **)(v11 + 8);
    if ((unint64_t)v53 >= v52)
    {
      char v55 = *(_DWORD **)v11;
      uint64_t v56 = ((uint64_t)v53 - *(void *)v11) >> 2;
      unint64_t v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 62) {
        goto LABEL_95;
      }
      uint64_t v58 = v52 - (void)v55;
      if (v58 >> 1 > v57) {
        unint64_t v57 = v58 >> 1;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (v59)
      {
        uint64_t v60 = (char *)sub_21677EA28(v11 + 16, v59);
        char v55 = *(_DWORD **)v11;
        char v53 = *(_DWORD **)(v11 + 8);
      }
      else
      {
        uint64_t v60 = 0;
      }
      uint64_t v61 = &v60[4 * v56];
      int v62 = &v60[4 * v59];
      *(_DWORD *)uint64_t v61 = 3;
      uint64_t v54 = v61 + 4;
      while (v53 != v55)
      {
        int v63 = *--v53;
        *((_DWORD *)v61 - 1) = v63;
        v61 -= 4;
      }
      *(void *)uint64_t v11 = v61;
      *(void *)(v11 + 8) = v54;
      *(void *)(v11 + 16) = v62;
      if (v55) {
        operator delete(v55);
      }
    }
    else
    {
      *char v53 = 3;
      uint64_t v54 = v53 + 1;
    }
    *(void *)(v11 + 8) = v54;
    return;
  }
  if (a2 == 5)
  {
    v65[0] = "sdf/pathExpressionEval.cpp";
    v65[1] = "operator()";
    v65[2] = 700;
    v65[3] = "auto pxrInternal__aapl__pxrReserved__::Sdf_MakePathExpressionEvalImpl(Sdf_PathExpressionEvalBase &, const S"
             "dfPathExpression &, TfFunctionRef<void (const SdfPathExpression::PathPattern &)>)::(anonymous class)::opera"
             "tor()(Expr::Op, int) const";
    char v66 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v65, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot build evaluator for incomplete SdfPathExpression");
    return;
  }
  if (!a2 && a3 == 1)
  {
    uint64_t v7 = *a1;
    unint64_t v8 = *(int **)(*a1 + 8);
    unint64_t v9 = *(void *)(*a1 + 16);
    if ((unint64_t)v8 < v9)
    {
      int v10 = 1;
LABEL_50:
      *unint64_t v8 = v10;
      unint64_t v40 = v8 + 1;
LABEL_93:
      *(void *)(v7 + 8) = v40;
      return;
    }
    uint64_t v30 = *(int **)v7;
    uint64_t v31 = ((uint64_t)v8 - *(void *)v7) >> 2;
    unint64_t v32 = v31 + 1;
    if (!((unint64_t)(v31 + 1) >> 62))
    {
      uint64_t v33 = v9 - (void)v30;
      if (v33 >> 1 > v32) {
        unint64_t v32 = v33 >> 1;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        uint64_t v35 = (char *)sub_21677EA28(v7 + 16, v34);
        uint64_t v30 = *(int **)v7;
        unint64_t v8 = *(int **)(v7 + 8);
      }
      else
      {
        uint64_t v35 = 0;
      }
      uint64_t v46 = &v35[4 * v31];
      uint64_t v47 = &v35[4 * v34];
      *(_DWORD *)uint64_t v46 = 1;
      unint64_t v40 = v46 + 4;
      while (v8 != v30)
      {
        int v64 = *--v8;
        *((_DWORD *)v46 - 1) = v64;
        v46 -= 4;
      }
      goto LABEL_91;
    }
LABEL_96:
    sub_21677CB10();
  }
}

void sub_216B0CFAC(pxrInternal__aapl__pxrReserved__::SdfPathExpression **a1)
{
  v4[0] = "sdf/pathExpressionEval.cpp";
  v4[1] = "operator()";
  _OWORD v4[2] = 710;
  void v4[3] = "auto pxrInternal__aapl__pxrReserved__::Sdf_MakePathExpressionEvalImpl(Sdf_PathExpressionEvalBase &, const SdfP"
          "athExpression &, TfFunctionRef<void (const SdfPathExpression::PathPattern &)>)::(anonymous class)::operator()("
          "const Expr::ExpressionReference &) const";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)__p, *a1);
  if (v3 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected reference in path expression: <%s>", (const char *)v1);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B0D040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216B0D05C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_21677CA1C();
  }
  return operator new(12 * a2);
}

uint64_t sub_216B0D0A4(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v11 = 0x555555555555555;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    unint64_t v12 = (char *)sub_2168073F4(v9, v11);
  }
  else {
    unint64_t v12 = 0;
  }
  unint64_t v15 = v12;
  int v16 = &v12[48 * v5];
  char v17 = v16;
  uint64_t v18 = &v12[48 * v11];
  pxrInternal__aapl__pxrReserved__::ArchRegex::ArchRegex(v16, a2, *a3);
  char v17 = v16 + 48;
  sub_216B0D1B4(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216B0D24C((uint64_t)&v15);
  return v13;
}

void sub_216B0D1A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B0D24C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B0D1B4(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v6 - 48) = *(_DWORD *)(v2 + v5 - 48);
      long long v8 = *(_OWORD *)(v2 + v5 - 40);
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      *(_OWORD *)(v6 - 40) = v8;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 40) = 0;
      *(_OWORD *)(v6 - 16) = *(_OWORD *)(v2 + v5 - 16);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  *uint64_t result = v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216B0D24C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)(i - 48));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_FreeList::Pop(uint64_t a1)
{
  uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a1);
  *(_DWORD *)a1 = *result;
  --*(void *)(a1 + 8);
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_FreeList::Push(uint64_t a1, int a2)
{
  int v4 = a2;
  ++*(void *)(a1 + 8);
  uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(&v4);
  *uint64_t result = *(_DWORD *)a1;
  *(_DWORD *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_PoolSpan::size(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 4));
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_PoolSpan::Alloc(int *a1)
{
  int v1 = *a1;
  int v2 = a1[1];
  a1[1] = v2 + 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((int *)&v4, v1, v2);
  return v4;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_PoolSpan::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8);
}

int *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::_RegionState(int *result, int a2, int a3)
{
  *uint64_t result = a2 | (a3 << 8);
  return result;
}

{
  *uint64_t result = a2 | (a3 << 8);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::Reserve(_DWORD *a1, unsigned int a2)
{
  if (0x1000000 - (*a1 >> 8) <= a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 | ((a2 + (*a1 >> 8)) << 8);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::GetIndex(_DWORD *a1)
{
  return *a1 >> 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::GetRegion(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::GetInitState()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::GetLockedState()
{
  return 0xFFFFFFFFLL;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::operator==(_DWORD *a1, int a2)
{
  return *a1 == a2;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_RegionState::IsLocked(_DWORD *a1)
{
  return *a1 == -1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Allocate()
{
  uint64_t v0 = *(void *)off_26B4B1A88();
  if (!v0)
  {
    unsigned int v4 = (unsigned char *)off_26B4B1AB8(&off_26B4B1AB8);
    uint64_t v5 = &off_26B4B1AA0;
    if ((*v4 & 1) == 0)
    {
      uint64_t v7 = off_26B4B1AA0(&off_26B4B1AA0);
      *(_DWORD *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(unsigned char *)v9(v8) = 1;
    }
    uint64_t v0 = (*v5)(v5);
    *uint64_t v6 = v0;
  }
  unsigned int v10 = *(_DWORD *)v0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v10))
  {
    *(_DWORD *)uint64_t v0 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)v0);
    --*(void *)(v0 + 8);
  }
  else
  {
    int v1 = *(_DWORD *)(v0 + 20);
    if (v1 == *(_DWORD *)(v0 + 24)) {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_TakeSharedFreeList();
    }
    int v2 = *(_DWORD *)(v0 + 16);
    *(_DWORD *)(v0 + 20) = v1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((int *)&v11, v2, v1);
    return v11;
  }
  return v10;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_TakeSharedFreeList(_OWORD *a1)
{
  int v2 = (void *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_sharedFreeLists);
  if (!v2) {
    int v2 = sub_216B133A4(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_sharedFreeLists);
  }

  return sub_216B136A4((uint64_t)v2, a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_ReserveSpan(_DWORD *a1, unint64_t a2, char *a3)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState)
  {
    atomic_compare_exchange_strong(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState, (unsigned int *)&v4, 0xFFFFFFFF);
    if (!v4)
    {
      qword_26798B388 = pxrInternal__aapl__pxrReserved__::Sdf_PoolReserveRegion((pxrInternal__aapl__pxrReserved__ *)0x18000000, a2);
      uint64_t v4 = 257;
      atomic_store(0x101u, (unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState);
    }
  }
  while (1)
  {
    while (v4 == -1)
    {
      sched_yield();
      uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState;
    }
    unsigned int v5 = v4 + 0x400000;
    unsigned int v6 = v4 >= 0xFFC00000 ? -1 : v4 + 0x400000;
    uint64_t v7 = v4;
    atomic_compare_exchange_strong(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState, (unsigned int *)&v7, v6);
    if (v7 == v4) {
      break;
    }
    uint64_t v4 = v7;
  }
  if (v6 == -1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionStarts[v4 + 1] = pxrInternal__aapl__pxrReserved__::Sdf_PoolReserveRegion((pxrInternal__aapl__pxrReserved__ *)0x18000000, a2);
    unsigned int v5 = (v4 + 1) | 0x100;
    atomic_store(v5, (unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionState);
  }
  *a1 = v4;
  a1[1] = v4 >> 8;
  if (v4 == v5) {
    int v8 = v5 >> 8;
  }
  else {
    int v8 = 0xFFFFFF;
  }
  a1[2] = v8;
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionStarts[v4];

  return pxrInternal__aapl__pxrReserved__::Sdf_PoolCommitRange((pxrInternal__aapl__pxrReserved__ *)(v9 + 24 * (v4 >> 8)), (char *)(v9 + (24 * v8)), a3);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Free()
{
  uint64_t v1 = *(void *)off_26B4B1A88();
  if (!v1)
  {
    uint64_t v3 = (unsigned char *)off_26B4B1AB8(&off_26B4B1AB8);
    uint64_t v4 = &off_26B4B1AA0;
    if ((*v3 & 1) == 0)
    {
      uint64_t v6 = off_26B4B1AA0(&off_26B4B1AA0);
      *(_DWORD *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      *(unsigned char *)v8(v7) = 1;
    }
    uint64_t v1 = (*v4)(v4);
    uint64_t *v5 = v1;
  }
  int v9 = v0;
  ++*(void *)(v1 + 8);
  uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(&v9);
  *uint64_t result = *(_DWORD *)v1;
  *(_DWORD *)uint64_t v1 = v9;
  if (*(void *)(v1 + 8) >= 0x4000uLL) {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_ShareFreeList();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_ShareFreeList(uint64_t a1)
{
  int v2 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_sharedFreeLists);
  if (!v2) {
    int v2 = sub_216B133A4(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_sharedFreeLists);
  }
  uint64_t v3 = v2[1];
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(v3 + 128), 1uLL);
  uint64_t result = sub_2168DABE8((void *)(v3 + 40 * ((3 * (_BYTE)add) & 7) + 384), a1, add, v2, (uint64_t (*)(void *, uint64_t))sub_216B1386C);
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_GetPtr(int a1, int a2)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionStarts[a1]
       + (24 * a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_GetHandle(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = 0;
    while (1)
    {
      unint64_t v2 = a1
         - pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionStarts[v1 + 1];
      if (v2 >> 27 < 3) {
        break;
      }
      if (++v1 == 256) {
        goto LABEL_5;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((int *)&v4, v1 + 1, v2 / 0x18);
  }
  else
  {
LABEL_5:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v4);
  }
  return v4;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_FreeList::Pop(uint64_t a1)
{
  uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)a1);
  *(_DWORD *)a1 = *result;
  --*(void *)(a1 + 8);
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_FreeList::Push(uint64_t a1, int a2)
{
  int v4 = a2;
  ++*(void *)(a1 + 8);
  uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(&v4);
  *uint64_t result = *(_DWORD *)a1;
  *(_DWORD *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_PoolSpan::size(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 4));
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_PoolSpan::Alloc(int *a1)
{
  int v1 = *a1;
  int v2 = a1[1];
  a1[1] = v2 + 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((int *)&v4, v1, v2);
  return v4;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_PoolSpan::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a1 + 8);
}

int *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::_RegionState(int *result, int a2, int a3)
{
  *uint64_t result = a2 | (a3 << 8);
  return result;
}

{
  *uint64_t result = a2 | (a3 << 8);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::Reserve(_DWORD *a1, unsigned int a2)
{
  if (0x1000000 - (*a1 >> 8) <= a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 | ((a2 + (*a1 >> 8)) << 8);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::GetIndex(_DWORD *a1)
{
  return *a1 >> 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::GetRegion(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::GetInitState()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::GetLockedState()
{
  return 0xFFFFFFFFLL;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::operator==(_DWORD *a1, int a2)
{
  return *a1 == a2;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_RegionState::IsLocked(_DWORD *a1)
{
  return *a1 == -1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate()
{
  uint64_t v0 = *(void *)off_26B4B1AD0();
  if (!v0)
  {
    unsigned int v4 = (unsigned char *)off_26B4B1B00(&off_26B4B1B00);
    unsigned int v5 = &off_26B4B1AE8;
    if ((*v4 & 1) == 0)
    {
      uint64_t v7 = off_26B4B1AE8(&off_26B4B1AE8);
      *(_DWORD *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(unsigned char *)v9(v8) = 1;
    }
    uint64_t v0 = (*v5)(v5);
    *uint64_t v6 = v0;
  }
  unsigned int v10 = *(_DWORD *)v0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10))
  {
    *(_DWORD *)uint64_t v0 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)v0);
    --*(void *)(v0 + 8);
  }
  else
  {
    int v1 = *(_DWORD *)(v0 + 20);
    if (v1 == *(_DWORD *)(v0 + 24)) {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_TakeSharedFreeList();
    }
    int v2 = *(_DWORD *)(v0 + 16);
    *(_DWORD *)(v0 + 20) = v1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((int *)&v11, v2, v1);
    return v11;
  }
  return v10;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_TakeSharedFreeList(_OWORD *a1)
{
  int v2 = (void *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_sharedFreeLists);
  if (!v2) {
    int v2 = sub_216B13878(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_sharedFreeLists);
  }

  return sub_216B136A4((uint64_t)v2, a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_ReserveSpan(_DWORD *a1, unint64_t a2, char *a3)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState)
  {
    atomic_compare_exchange_strong(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState, (unsigned int *)&v4, 0xFFFFFFFF);
    if (!v4)
    {
      qword_26798BBA0 = pxrInternal__aapl__pxrReserved__::Sdf_PoolReserveRegion((pxrInternal__aapl__pxrReserved__ *)0x18000000, a2);
      uint64_t v4 = 257;
      atomic_store(0x101u, (unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState);
    }
  }
  while (1)
  {
    while (v4 == -1)
    {
      sched_yield();
      uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState;
    }
    unsigned int v5 = v4 + 0x400000;
    unsigned int v6 = v4 >= 0xFFC00000 ? -1 : v4 + 0x400000;
    uint64_t v7 = v4;
    atomic_compare_exchange_strong(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState, (unsigned int *)&v7, v6);
    if (v7 == v4) {
      break;
    }
    uint64_t v4 = v7;
  }
  if (v6 == -1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionStarts[v4 + 1] = pxrInternal__aapl__pxrReserved__::Sdf_PoolReserveRegion((pxrInternal__aapl__pxrReserved__ *)0x18000000, a2);
    unsigned int v5 = (v4 + 1) | 0x100;
    atomic_store(v5, (unsigned int *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionState);
  }
  *a1 = v4;
  a1[1] = v4 >> 8;
  if (v4 == v5) {
    int v8 = v5 >> 8;
  }
  else {
    int v8 = 0xFFFFFF;
  }
  a1[2] = v8;
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionStarts[v4];

  return pxrInternal__aapl__pxrReserved__::Sdf_PoolCommitRange((pxrInternal__aapl__pxrReserved__ *)(v9 + 24 * (v4 >> 8)), (char *)(v9 + (24 * v8)), a3);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Free()
{
  uint64_t v1 = *(void *)off_26B4B1AD0();
  if (!v1)
  {
    uint64_t v3 = (unsigned char *)off_26B4B1B00(&off_26B4B1B00);
    uint64_t v4 = &off_26B4B1AE8;
    if ((*v3 & 1) == 0)
    {
      uint64_t v6 = off_26B4B1AE8(&off_26B4B1AE8);
      *(_DWORD *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      *(unsigned char *)v8(v7) = 1;
    }
    uint64_t v1 = (*v4)(v4);
    uint64_t *v5 = v1;
  }
  int v9 = v0;
  ++*(void *)(v1 + 8);
  uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(&v9);
  *uint64_t result = *(_DWORD *)v1;
  *(_DWORD *)uint64_t v1 = v9;
  if (*(void *)(v1 + 8) >= 0x4000uLL) {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_ShareFreeList();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_ShareFreeList(uint64_t a1)
{
  int v2 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_sharedFreeLists);
  if (!v2) {
    int v2 = sub_216B13878(&pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_sharedFreeLists);
  }
  uint64_t v3 = v2[1];
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(v3 + 128), 1uLL);
  uint64_t result = sub_2168DABE8((void *)(v3 + 40 * ((3 * (_BYTE)add) & 7) + 384), a1, add, v2, (uint64_t (*)(void *, uint64_t))sub_216B13B00);
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_GetPtr(int a1, int a2)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionStarts[a1]
       + (24 * a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_GetHandle(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = 0;
    while (1)
    {
      unint64_t v2 = a1
         - pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionStarts[v1 + 1];
      if (v2 >> 27 < 3) {
        break;
      }
      if (++v1 == 256) {
        goto LABEL_5;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((int *)&v4, v1 + 1, v2 / 0x18);
  }
  else
  {
LABEL_5:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v4);
  }
  return v4;
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPartPathNode::operator delete(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(a1);
  uint64_t v2 = *(void *)off_26B4B1A88();
  if (!v2)
  {
    uint64_t v3 = (unsigned char *)off_26B4B1AB8(&off_26B4B1AB8);
    unsigned int v4 = &off_26B4B1AA0;
    if ((*v3 & 1) == 0)
    {
      uint64_t v6 = off_26B4B1AA0(&off_26B4B1AA0);
      *(_DWORD *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      *(unsigned char *)v8(v7) = 1;
    }
    uint64_t v2 = (*v4)(v4);
    uint64_t *v5 = v2;
  }
  int v9 = v1;
  ++*(void *)(v2 + 8);
  *(_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(&v9) = *(_DWORD *)v2;
  *(_DWORD *)uint64_t v2 = v9;
  if (*(void *)(v2 + 8) >= 0x4000uLL) {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_ShareFreeList();
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_PropPartPathNode::operator delete(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(a1);
  uint64_t v2 = *(void *)off_26B4B1AD0();
  if (!v2)
  {
    uint64_t v3 = (unsigned char *)off_26B4B1B00(&off_26B4B1B00);
    unsigned int v4 = &off_26B4B1AE8;
    if ((*v3 & 1) == 0)
    {
      uint64_t v6 = off_26B4B1AE8(&off_26B4B1AE8);
      *(_DWORD *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      *(unsigned char *)v8(v7) = 1;
    }
    uint64_t v2 = (*v4)(v4);
    uint64_t *v5 = v2;
  }
  int v9 = v1;
  ++*(void *)(v2 + 8);
  *(_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(&v9) = *(_DWORD *)v2;
  *(_DWORD *)uint64_t v2 = v9;
  if (*(void *)(v2 + 8) >= 0x4000uLL) {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_ShareFreeList();
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_RootPathNode::New(pxrInternal__aapl__pxrReserved__::Sdf_RootPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetAbsoluteRootNode(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  unint64_t v1 = atomic_load(&qword_267B8EF18);
  if (!v1)
  {
    operator new(8uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Allocate();
  }
  return *(void *)v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  unint64_t v1 = atomic_load(&qword_267B8EF20);
  if (!v1)
  {
    operator new(8uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Allocate();
  }
  return *(void *)v1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrim@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, _DWORD *a5@<X8>)
{
  unint64_t v10 = sub_216B0E6D4()
      + 88
      * ((((0x1E3779B97F4A7C55
                        * ((*a2 & 0xFFFFFFFFFFFFFFF8)
                         + (((*a2 & 0xFFFFFFFFFFFFFFF8)
                           + a1
                           + ((*a2 & 0xFFFFFFFFFFFFFFF8) + a1) * ((*a2 & 0xFFFFFFFFFFFFFFF8) + a1)) >> 1))) >> 32) >> 24) & 0x7F);
  sub_21685036C((uint64_t)&v54, v10 + 80);
  uint64_t v11 = *a2;
  if ((*a2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v12 = bswap64(0x9E3779B97F4A7C55* ((v11 & 0xFFFFFFFFFFFFFFF8)+ (((v11 & 0xFFFFFFFFFFFFFFF8)+ a1+ ((v11 & 0xFFFFFFFFFFFFFFF8) + a1) * ((v11 & 0xFFFFFFFFFFFFFFF8) + a1)) >> 1)));
  uint64_t v13 = *(void *)v10;
  uint64_t v14 = *(void *)(v10 + 32);
  uint64_t v15 = v12 & *(void *)v10;
  if (*(__int16 *)(v14 + 32 * v15 + 4) < 0)
  {
    LOWORD(v16) = 0;
LABEL_11:
    if (*(unsigned char *)(v10 + 72) || (unint64_t v20 = *(void *)(v10 + 48), v20 >= *(void *)(v10 + 56)))
    {
      uint64_t v28 = sub_21686E8DC((void *)v10);
      sub_216B13E9C((uint64_t *)v10, v28);
      *(unsigned char *)(v10 + 72) = 0;
    }
    else
    {
      if (!*(unsigned char *)(v10 + 73)) {
        goto LABEL_28;
      }
      *(unsigned char *)(v10 + 73) = 0;
      float v21 = *(float *)(v10 + 64);
      if (v21 == 0.0) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v10 + 40);
      float v23 = 0.0;
      if (v22) {
        float v23 = (float)v20 / (float)v22;
      }
      if (v23 >= v21) {
        goto LABEL_28;
      }
      float v24 = *(float *)(v10 + 68);
      unint64_t v25 = vcvtps_u32_f32((float)(v20 + 1) / v24);
      unint64_t v26 = vcvtps_u32_f32((float)v20 / v24);
      if (v26 <= v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = v26;
      }
      sub_216B13E9C((uint64_t *)v10, v27);
    }
    uint64_t v13 = *(void *)v10;
    uint64_t v14 = *(void *)(v10 + 32);
    uint64_t v15 = *(void *)v10 & v12;
    if (*(__int16 *)(v14 + 32 * v15 + 4) < 0)
    {
      LOWORD(v16) = 0;
    }
    else
    {
      LOWORD(v16) = 0;
      do
      {
        int v16 = (__int16)(v16 + 1);
        uint64_t v15 = (v15 + 1) & v13;
      }
      while (v16 <= *(__int16 *)(v14 + 32 * v15 + 4));
    }
LABEL_28:
    uint64_t v29 = (int *)(v14 + 32 * v15);
    uint64_t v30 = v29 + 1;
    unsigned __int16 v31 = *((_WORD *)v29 + 2);
    unint64_t v32 = (uint64_t *)(v29 + 2);
    uint64_t v33 = (uint64_t *)(v29 + 4);
    if (v31 == 0xFFFF)
    {
      *unint64_t v32 = a1;
      *uint64_t v33 = v11;
      v29[6] = 0;
      int *v29 = v12;
      _WORD *v30 = v16;
    }
    else
    {
      uint64_t v34 = *v32;
      uint64_t v35 = *v33;
      *unint64_t v32 = a1;
      *uint64_t v33 = v11;
      int v36 = v29[6];
      v29[6] = 0;
      _WORD *v30 = v16;
      int v37 = *v29;
      int *v29 = v12;
      uint64_t v38 = (v15 + 1) & v13;
      __int16 v39 = v31 + 1;
      uint64_t v40 = *(void *)(v10 + 32);
      uint64_t v41 = (int *)(v40 + 32 * v38);
      unint64_t v42 = v41 + 1;
      for (unsigned __int16 i = *((_WORD *)v41 + 2); i != 0xFFFF; unsigned __int16 i = *((_WORD *)v41 + 2))
      {
        if (v39 > (__int16)i)
        {
          if (v39 >= 4096) {
            *(unsigned char *)(v10 + 72) = 1;
          }
          uint64_t v45 = *((void *)v41 + 1);
          uint64_t v44 = *((void *)v41 + 2);
          *((void *)v41 + 1) = v34;
          *((void *)v41 + 2) = v35;
          int v46 = v41[6];
          v41[6] = v36;
          __int16 v47 = *((_WORD *)v41 + 2);
          *((_WORD *)v41 + 2) = v39;
          int v48 = *v41;
          *uint64_t v41 = v37;
          int v36 = v46;
          uint64_t v35 = v44;
          uint64_t v34 = v45;
          int v37 = v48;
          __int16 v39 = v47;
          uint64_t v40 = *(void *)(v10 + 32);
        }
        uint64_t v38 = v13 & (v38 + 1);
        ++v39;
        uint64_t v41 = (int *)(v40 + 32 * v38);
        unint64_t v42 = v41 + 1;
      }
      uint64_t v49 = v40 + 32 * v38;
      *(void *)(v49 + 8) = v34;
      *(void *)(v49 + 16) = v35;
      *(_DWORD *)(v49 + 24) = v36;
      *uint64_t v41 = v37;
      *unint64_t v42 = v39;
    }
    uint64_t v11 = 0;
    char v50 = 0;
    ++*(void *)(v10 + 48);
    uint64_t v51 = *(void *)(v10 + 32) + 32 * v15;
    goto LABEL_38;
  }
  LOWORD(v16) = 0;
  while (1)
  {
    uint64_t v17 = v14 + 32 * v15;
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v18 = v17 + 8;
    if (v19 == a1 && (*(void *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8) == (v11 & 0xFFFFFFFFFFFFFFF8)) {
      break;
    }
    int v16 = (__int16)(v16 + 1);
    uint64_t v15 = (v15 + 1) & v13;
    if (v16 > *(__int16 *)(v14 + 32 * v15 + 4)) {
      goto LABEL_11;
    }
  }
  uint64_t v51 = v14 + 32 * v15;
  char v50 = 1;
LABEL_38:
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v50)
  {
    int v55 = *(_DWORD *)(v51 + 24);
    if ((atomic_fetch_add((atomic_uint *volatile)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(&v55)+ 8), 1u) & 0x7FFFFFFF) != 0)
    {
      int v55 = *(_DWORD *)(v51 + 24);
      *a5 = v55;
      uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v55);
      goto LABEL_45;
    }
LABEL_44:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Allocate();
  }
  if (a4(a3)) {
    goto LABEL_44;
  }
  sub_216B13D84((uint64_t *)v10, v51);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a5);
LABEL_45:
  char v53 = v54;
  if (v54)
  {
    __dmb(0xBu);
    *char v53 = 0;
  }
  return result;
}

unint64_t sub_216B0E6D4()
{
  int v0 = (char *)atomic_load((unint64_t *)&qword_267B8EF28);
  if (!v0)
  {
    int v0 = (char *)operator new(0x2C00uLL);
    uint64_t v2 = 0;
    uint64_t v3 = 128;
    do
    {
      *(unsigned char *)(sub_216B13B0C((uint64_t)&v0[v2], 0, 0.0, 0.5) + 80) = 0;
      v2 += 88;
      --v3;
    }
    while (v3);
    uint64_t v4 = 0;
    atomic_compare_exchange_strong(&qword_267B8EF28, (unint64_t *)&v4, (unint64_t)v0);
    if (v4)
    {
      for (uint64_t i = 0; i != -11264; i -= 88)
      {
        uint64_t v6 = (void **)&v0[i + 11184];
        sub_216B13CE8(&v6);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B8EF28);
    }
  }
  return (unint64_t)v0;
}

void sub_216B0E7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_216B13CE8((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrimProperty@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t)@<X3>, _DWORD *a4@<X8>)
{
  uint64_t v14 = 0;
  uint64_t v15 = a1;
  int v16 = 0;
  uint64_t v7 = (uint64_t *)(sub_216B0E934()
                 + 88
                 * ((((0x1E3779B97F4A7C55
                                   * ((*v15 & 0xFFFFFFFFFFFFFFF8)
                                    + (((*v15 & 0xFFFFFFFFFFFFFFF8 | 1) * (*v15 & 0xFFFFFFFFFFFFFFF8)) >> 1))) >> 32) >> 24) & 0x7F));
  sub_21685036C((uint64_t)&v13, (uint64_t)(v7 + 10));
  uint64_t v8 = sub_216B14374(v7, &v14);
  uint64_t v9 = v8;
  if (v10)
  {
    if (a3(a2)) {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate();
    }
    sub_216B13D84(v7, v9);
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4);
  }
  else
  {
    int v17 = *(_DWORD *)(v8 + 24);
    *a4 = v17;
    uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  }
  unint64_t v12 = v13;
  if (v13)
  {
    __dmb(0xBu);
    unsigned char *v12 = 0;
  }
  return result;
}

void sub_216B0E91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

unint64_t sub_216B0E934()
{
  int v0 = (char *)atomic_load((unint64_t *)&qword_267B8EF30);
  if (!v0)
  {
    int v0 = (char *)operator new(0x2C00uLL);
    uint64_t v2 = 0;
    uint64_t v3 = 128;
    do
    {
      *(unsigned char *)(sub_216B14168((uint64_t)&v0[v2], 0, 0.0, 0.5) + 80) = 0;
      v2 += 88;
      --v3;
    }
    while (v3);
    uint64_t v4 = 0;
    atomic_compare_exchange_strong(&qword_267B8EF30, (unint64_t *)&v4, (unint64_t)v0);
    if (v4)
    {
      for (uint64_t i = 0; i != -11264; i -= 88)
      {
        uint64_t v6 = (void **)&v0[i + 11184];
        sub_216B13CE8(&v6);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B8EF30);
    }
  }
  return (unint64_t)v0;
}

void sub_216B0EA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_216B13CE8((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreatePrimVariantSelection@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t)@<X4>, _DWORD *a6@<X8>)
{
  unint64_t v12 = sub_216B0EFA0();
  sub_216B12870(&v46, a2, a3);
  uint64_t v49 = a1;
  char v50 = &v46;
  int v51 = 0;
  uint64_t v52 = 0;
  LOBYTE(v53) = 0;
  sub_216B14C90((uint64_t)&v52, &v49, &v46);
  unint64_t v13 = v12 + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * v52) >> 32) >> 24) & 0x7F);
  sub_21685036C((uint64_t)&v48, v13 + 80);
  uint64_t v52 = v49;
  sub_216B15074(&v53, v50);
  int v55 = v51;
  uint64_t v56 = 0;
  char v57 = 0;
  sub_216B14C90((uint64_t)&v56, &v52, &v53);
  unint64_t v14 = bswap64(0x9E3779B97F4A7C55 * v56);
  uint64_t v15 = *(void *)(v13 + 32);
  uint64_t v16 = v14 & *(void *)v13;
  if (*(__int16 *)(v15 + 40 * v16 + 4) < 0)
  {
    LOWORD(v17) = 0;
LABEL_9:
    if (*(unsigned char *)(v13 + 72) || (unint64_t v22 = *(void *)(v13 + 48), v22 >= *(void *)(v13 + 56)))
    {
      uint64_t v30 = sub_21686E8DC((void *)v13);
      sub_216B14D10((uint64_t *)v13, v30);
      *(unsigned char *)(v13 + 72) = 0;
    }
    else
    {
      if (!*(unsigned char *)(v13 + 73)) {
        goto LABEL_26;
      }
      *(unsigned char *)(v13 + 73) = 0;
      float v23 = *(float *)(v13 + 64);
      if (v23 == 0.0) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v13 + 40);
      float v25 = 0.0;
      if (v24) {
        float v25 = (float)v22 / (float)v24;
      }
      if (v25 >= v23) {
        goto LABEL_26;
      }
      float v26 = *(float *)(v13 + 68);
      unint64_t v27 = vcvtps_u32_f32((float)(v22 + 1) / v26);
      unint64_t v28 = vcvtps_u32_f32((float)v22 / v26);
      if (v28 <= v27) {
        uint64_t v29 = v27;
      }
      else {
        uint64_t v29 = v28;
      }
      sub_216B14D10((uint64_t *)v13, v29);
    }
    uint64_t v15 = *(void *)(v13 + 32);
    uint64_t v16 = *(void *)v13 & v14;
    if (*(__int16 *)(v15 + 40 * v16 + 4) < 0)
    {
      LOWORD(v17) = 0;
    }
    else
    {
      LOWORD(v17) = 0;
      do
      {
        int v17 = (__int16)(v17 + 1);
        uint64_t v16 = (v16 + 1) & *(void *)v13;
      }
      while (v17 <= *(__int16 *)(v15 + 40 * v16 + 4));
    }
LABEL_26:
    uint64_t v31 = v15 + 40 * v16;
    if (*(__int16 *)(v31 + 4) == -1)
    {
      uint64_t v41 = v15 + 40 * v16;
      *(void *)(v41 + 8) = v52;
      *(void *)(v41 + 16) = v53;
      uint64_t v53 = 0;
      *(void *)(v41 + 24) = v54;
      uint64_t v54 = 0;
      *(_DWORD *)(v41 + 32) = v55;
      *(_DWORD *)uint64_t v31 = v14;
      *(_WORD *)(v31 + 4) = v17;
    }
    else
    {
      __int16 v58 = v17;
      LODWORD(v56) = v14;
      sub_216B14F2C((int *)v31, &v58, (int *)&v56, &v52);
      uint64_t v32 = *(void *)v13;
      uint64_t v33 = *(void *)v13 & (v16 + 1);
      __int16 v34 = ++v58;
      uint64_t v35 = *(void *)(v13 + 32);
      uint64_t v36 = v35 + 40 * v33;
      int v37 = (__int16 *)(v36 + 4);
      for (unsigned __int16 i = *(_WORD *)(v36 + 4); i != 0xFFFF; unsigned __int16 i = *(_WORD *)(v36 + 4))
      {
        if (v34 > (__int16)i)
        {
          if (v34 >= 4096) {
            *(unsigned char *)(v13 + 72) = 1;
          }
          sub_216B14F2C((int *)v36, &v58, (int *)&v56, &v52);
          uint64_t v32 = *(void *)v13;
          __int16 v34 = v58;
          uint64_t v35 = *(void *)(v13 + 32);
        }
        uint64_t v33 = v32 & (v33 + 1);
        __int16 v58 = ++v34;
        uint64_t v36 = v35 + 40 * v33;
        int v37 = (__int16 *)(v36 + 4);
      }
      int v39 = v56;
      uint64_t v40 = v35 + 40 * v33;
      *(void *)(v40 + 8) = v52;
      *(void *)(v40 + 16) = v53;
      uint64_t v53 = 0;
      *(void *)(v40 + 24) = v54;
      uint64_t v54 = 0;
      *(_DWORD *)(v40 + 32) = v55;
      *(_DWORD *)uint64_t v36 = v39;
      *int v37 = v34;
    }
    char v42 = 0;
    ++*(void *)(v13 + 48);
    uint64_t v43 = *(void *)(v13 + 32) + 40 * v16;
    goto LABEL_36;
  }
  LOWORD(v17) = 0;
  uint64_t v18 = (atomic_uint *)(v54 & 0xFFFFFFFFFFFFFFF8);
  while (1)
  {
    uint64_t v19 = v15 + 40 * v16;
    uint64_t v21 = *(void *)(v19 + 8);
    uint64_t v20 = v19 + 8;
    if (v21 == v52
      && (*(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8) == (v53 & 0xFFFFFFFFFFFFFFF8)
      && (atomic_uint *)(*(void *)(v20 + 16) & 0xFFFFFFFFFFFFFFF8) == v18)
    {
      break;
    }
    int v17 = (__int16)(v17 + 1);
    uint64_t v16 = (v16 + 1) & *(void *)v13;
    if (v17 > *(__int16 *)(v15 + 40 * v16 + 4)) {
      goto LABEL_9;
    }
  }
  uint64_t v43 = v15 + 40 * v16;
  if ((v54 & 7) != 0) {
    atomic_fetch_add_explicit(v18, 0xFFFFFFFE, memory_order_release);
  }
  char v42 = 1;
LABEL_36:
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v42)
  {
    LODWORD(v52) = *(_DWORD *)(v43 + 32);
    if ((atomic_fetch_add((atomic_uint *volatile)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(&v52)+ 8), 1u) & 0x7FFFFFFF) != 0)
    {
      LODWORD(v52) = *(_DWORD *)(v43 + 32);
      *a6 = v52;
      uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
      goto LABEL_43;
    }
LABEL_42:
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Allocate();
  }
  if (a5(a4)) {
    goto LABEL_42;
  }
  sub_216B14B28((uint64_t *)v13, v43);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a6);
LABEL_43:
  uint64_t v45 = v48;
  if (v48)
  {
    __dmb(0xBu);
    unsigned char *v45 = 0;
  }
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216B0EF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_216B0EFA0()
{
  int v0 = (char *)atomic_load((unint64_t *)&qword_267B8EF38);
  if (!v0)
  {
    int v0 = (char *)operator new(0x2C00uLL);
    uint64_t v2 = 0;
    uint64_t v3 = 128;
    do
    {
      *(unsigned char *)(sub_216B14870((uint64_t)&v0[v2], 0, 0.0, 0.5) + 80) = 0;
      v2 += 88;
      --v3;
    }
    while (v3);
    uint64_t v4 = 0;
    atomic_compare_exchange_strong(&qword_267B8EF38, (unint64_t *)&v4, (unint64_t)v0);
    if (v4)
    {
      for (uint64_t i = 0; i != -11264; i -= 88)
      {
        uint64_t v6 = (void **)&v0[i + 11184];
        sub_216B14A60(&v6);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B8EF38);
    }
  }
  return (unint64_t)v0;
}

void sub_216B0F06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_216B14A60((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void *sub_216B0F0A0(void *result)
{
  uint64_t v1 = result[1];
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*result & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateTarget@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, _DWORD *a5@<X8>)
{
  unint64_t v10 = atomic_load((unint64_t *)&qword_267B8EF40);
  if (!v10) {
    unint64_t v10 = sub_216B15164();
  }
  v17[0] = a1;
  v17[1] = (uint64_t)a2;
  int v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  sub_216B15920((uint64_t)&v19, v17, a2);
  uint64_t v11 = (uint64_t *)(v10
                  + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * (void)v19) >> 32) >> 24) & 0x7F));
  sub_21685036C((uint64_t)&v19, (uint64_t)(v11 + 10));
  uint64_t v12 = sub_216B155A8(v11, (uint64_t)v17);
  uint64_t v13 = v12;
  if (v14)
  {
    if (a4(a3)) {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate();
    }
    sub_216B15C9C((uint64_t)v11, v13);
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a5);
  }
  else
  {
    int v21 = *(_DWORD *)(v12 + 24);
    *a5 = v21;
    uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  }
  uint64_t v16 = v19;
  if (v19)
  {
    __dmb(0xBu);
    *uint64_t v16 = 0;
  }
  return result;
}

void sub_216B0F21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned char *a12)
{
  if (a12)
  {
    __dmb(0xBu);
    *a12 = 0;
  }
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateRelationalAttribute@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, _DWORD *a5@<X8>)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  int v17 = 0;
  uint64_t v8 = (uint64_t *)(sub_216B0F374()
                 + 88
                 * ((((0x1E3779B97F4A7C55
                                   * ((*v16 & 0xFFFFFFFFFFFFFFF8)
                                    + (((*v16 & 0xFFFFFFFFFFFFFFF8)
                                      + v15
                                      + ((*v16 & 0xFFFFFFFFFFFFFFF8) + v15) * ((*v16 & 0xFFFFFFFFFFFFFFF8) + v15)) >> 1))) >> 32) >> 24) & 0x7F));
  sub_21685036C((uint64_t)&v14, (uint64_t)(v8 + 10));
  uint64_t v9 = sub_216B14374(v8, &v15);
  uint64_t v10 = v9;
  if (v11)
  {
    if (a4(a3)) {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate();
    }
    sub_216B13D84(v8, v10);
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a5);
  }
  else
  {
    int v18 = *(_DWORD *)(v9 + 24);
    *a5 = v18;
    uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  }
  uint64_t v13 = v14;
  if (v14)
  {
    __dmb(0xBu);
    unsigned char *v13 = 0;
  }
  return result;
}

void sub_216B0F35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

unint64_t sub_216B0F374()
{
  int v0 = (char *)atomic_load((unint64_t *)&qword_267B8EF48);
  if (!v0)
  {
    int v0 = (char *)operator new(0x2C00uLL);
    uint64_t v2 = 0;
    uint64_t v3 = 128;
    do
    {
      *(unsigned char *)(sub_216B14168((uint64_t)&v0[v2], 0, 0.0, 0.5) + 80) = 0;
      v2 += 88;
      --v3;
    }
    while (v3);
    uint64_t v4 = 0;
    atomic_compare_exchange_strong(&qword_267B8EF48, (unint64_t *)&v4, (unint64_t)v0);
    if (v4)
    {
      for (uint64_t i = 0; i != -11264; i -= 88)
      {
        uint64_t v6 = (void **)&v0[i + 11184];
        sub_216B13CE8(&v6);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B8EF48);
    }
  }
  return (unint64_t)v0;
}

void sub_216B0F440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_216B13CE8((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateMapper@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, _DWORD *a5@<X8>)
{
  unint64_t v10 = atomic_load((unint64_t *)&qword_267B8EF50);
  if (!v10) {
    unint64_t v10 = sub_216B15EA4();
  }
  v17[0] = a1;
  v17[1] = (uint64_t)a2;
  int v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  sub_216B15920((uint64_t)&v19, v17, a2);
  uint64_t v11 = (uint64_t *)(v10
                  + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * (void)v19) >> 32) >> 24) & 0x7F));
  sub_21685036C((uint64_t)&v19, (uint64_t)(v11 + 10));
  uint64_t v12 = sub_216B155A8(v11, (uint64_t)v17);
  uint64_t v13 = v12;
  if (v14)
  {
    if (a4(a3)) {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate();
    }
    sub_216B15C9C((uint64_t)v11, v13);
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a5);
  }
  else
  {
    int v21 = *(_DWORD *)(v12 + 24);
    *a5 = v21;
    uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  }
  uint64_t v16 = v19;
  if (v19)
  {
    __dmb(0xBu);
    *uint64_t v16 = 0;
  }
  return result;
}

void sub_216B0F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned char *a12)
{
  if (a12)
  {
    __dmb(0xBu);
    *a12 = 0;
  }
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateMapperArg@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, _DWORD *a5@<X8>)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  int v17 = 0;
  uint64_t v8 = (uint64_t *)(sub_216B0F714()
                 + 88
                 * ((((0x1E3779B97F4A7C55
                                   * ((*v16 & 0xFFFFFFFFFFFFFFF8)
                                    + (((*v16 & 0xFFFFFFFFFFFFFFF8)
                                      + v15
                                      + ((*v16 & 0xFFFFFFFFFFFFFFF8) + v15) * ((*v16 & 0xFFFFFFFFFFFFFFF8) + v15)) >> 1))) >> 32) >> 24) & 0x7F));
  sub_21685036C((uint64_t)&v14, (uint64_t)(v8 + 10));
  uint64_t v9 = sub_216B14374(v8, &v15);
  uint64_t v10 = v9;
  if (v11)
  {
    if (a4(a3)) {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate();
    }
    sub_216B13D84(v8, v10);
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a5);
  }
  else
  {
    int v18 = *(_DWORD *)(v9 + 24);
    *a5 = v18;
    uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  }
  uint64_t v13 = v14;
  if (v14)
  {
    __dmb(0xBu);
    unsigned char *v13 = 0;
  }
  return result;
}

void sub_216B0F6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

unint64_t sub_216B0F714()
{
  int v0 = (char *)atomic_load((unint64_t *)&qword_267B8EF58);
  if (!v0)
  {
    int v0 = (char *)operator new(0x2C00uLL);
    uint64_t v2 = 0;
    uint64_t v3 = 128;
    do
    {
      *(unsigned char *)(sub_216B14168((uint64_t)&v0[v2], 0, 0.0, 0.5) + 80) = 0;
      v2 += 88;
      --v3;
    }
    while (v3);
    uint64_t v4 = 0;
    atomic_compare_exchange_strong(&qword_267B8EF58, (unint64_t *)&v4, (unint64_t)v0);
    if (v4)
    {
      for (uint64_t i = 0; i != -11264; i -= 88)
      {
        uint64_t v6 = (void **)&v0[i + 11184];
        sub_216B13CE8(&v6);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B8EF58);
    }
  }
  return (unint64_t)v0;
}

void sub_216B0F7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_216B13CE8((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::FindOrCreateExpression@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v8 = sub_216B0FBE0() + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * a1) >> 32) >> 24) & 0x7F);
  sub_21685036C((uint64_t)&v45, v8 + 80);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * a1);
  uint64_t v10 = *(void *)v8;
  uint64_t v11 = *(void *)(v8 + 32);
  uint64_t v12 = *(void *)v8 & v9;
  if (*(__int16 *)(v11 + 24 * v12 + 4) < 0)
  {
    LOWORD(v13) = 0;
LABEL_7:
    if (*(unsigned char *)(v8 + 72) || (unint64_t v14 = *(void *)(v8 + 48), v14 >= *(void *)(v8 + 56)))
    {
      uint64_t v22 = sub_21686E8DC((void *)v8);
      sub_216B163C4((uint64_t *)v8, v22);
      *(unsigned char *)(v8 + 72) = 0;
    }
    else
    {
      if (!*(unsigned char *)(v8 + 73)) {
        goto LABEL_25;
      }
      *(unsigned char *)(v8 + 73) = 0;
      float v15 = *(float *)(v8 + 64);
      if (v15 == 0.0) {
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v8 + 40);
      float v17 = 0.0;
      if (v16) {
        float v17 = (float)v14 / (float)v16;
      }
      if (v17 >= v15) {
        goto LABEL_25;
      }
      float v18 = *(float *)(v8 + 68);
      unint64_t v19 = vcvtps_u32_f32((float)(v14 + 1) / v18);
      unint64_t v20 = vcvtps_u32_f32((float)v14 / v18);
      if (v20 <= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      sub_216B163C4((uint64_t *)v8, v21);
    }
    uint64_t v10 = *(void *)v8;
    uint64_t v11 = *(void *)(v8 + 32);
    uint64_t v12 = *(void *)v8 & v9;
    if (*(__int16 *)(v11 + 24 * v12 + 4) < 0)
    {
      LOWORD(v13) = 0;
    }
    else
    {
      LOWORD(v13) = 0;
      do
      {
        int v13 = (__int16)(v13 + 1);
        uint64_t v12 = (v12 + 1) & v10;
      }
      while (v13 <= *(__int16 *)(v11 + 24 * v12 + 4));
    }
LABEL_25:
    float v23 = (int *)(v11 + 24 * v12);
    unint64_t v24 = (uint64_t *)(v23 + 2);
    float v26 = v23 + 1;
    int v25 = *((unsigned __int16 *)v23 + 2);
    if (v25 == 0xFFFF)
    {
      uint64_t *v24 = a1;
      void v23[4] = 0;
      int *v23 = v9;
      *float v26 = v13;
    }
    else
    {
      uint64_t v27 = *v24;
      uint64_t *v24 = a1;
      uint64_t v28 = v11 + 24 * v12;
      int v29 = *(_DWORD *)(v28 + 16);
      *(_DWORD *)(v28 + 16) = 0;
      *float v26 = v13;
      int v30 = *v23;
      int *v23 = v9;
      uint64_t v31 = (v12 + 1) & v10;
      int v32 = v25 + 1;
      uint64_t v33 = *(void *)(v8 + 32);
      __int16 v34 = (int *)(v33 + 24 * v31);
      uint64_t v36 = v34 + 1;
      for (int i = *((unsigned __int16 *)v34 + 2); i != 0xFFFF; int i = *((unsigned __int16 *)v34 + 2))
      {
        if ((__int16)v32 <= (__int16)i)
        {
          int i = v32;
        }
        else
        {
          if ((__int16)v32 >= 4096) {
            *(unsigned char *)(v8 + 72) = 1;
          }
          uint64_t v37 = v33 + 24 * v31;
          uint64_t v38 = *(void *)(v37 + 8);
          *(void *)(v37 + 8) = v27;
          int v39 = *(_DWORD *)(v37 + 16);
          *(_DWORD *)(v37 + 16) = v29;
          *uint64_t v36 = v32;
          int v40 = *v34;
          *__int16 v34 = v30;
          uint64_t v33 = *(void *)(v8 + 32);
          int v29 = v39;
          uint64_t v27 = v38;
          int v30 = v40;
        }
        uint64_t v31 = (v31 + 1) & v10;
        int v32 = i + 1;
        __int16 v34 = (int *)(v33 + 24 * v31);
        uint64_t v36 = v34 + 1;
      }
      uint64_t v41 = v33 + 24 * v31;
      *(void *)(v41 + 8) = v27;
      *(_DWORD *)(v41 + 16) = v29;
      *__int16 v34 = v30;
      *uint64_t v36 = v32;
    }
    ++*(void *)(v8 + 48);
    uint64_t v42 = *(void *)(v8 + 32);
    if (a3(a2)) {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Allocate();
    }
    sub_216B162D8(v8, v42 + 24 * v12);
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4);
    goto LABEL_37;
  }
  LOWORD(v13) = 0;
  while (*(void *)(v11 + 24 * v12 + 8) != a1)
  {
    int v13 = (__int16)(v13 + 1);
    uint64_t v12 = (v12 + 1) & v10;
    if (v13 > *(__int16 *)(v11 + 24 * v12 + 4)) {
      goto LABEL_7;
    }
  }
  int v46 = *(_DWORD *)(v11 + 24 * v12 + 16);
  *a4 = v46;
  uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
LABEL_37:
  uint64_t v44 = v45;
  if (v45)
  {
    __dmb(0xBu);
    unsigned char *v44 = 0;
  }
  return result;
}

void sub_216B0FBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned char *a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a10 = 0;
  }
  _Unwind_Resume(a1);
}

unint64_t sub_216B0FBE0()
{
  int v0 = (char *)atomic_load((unint64_t *)&qword_267B8EF60);
  if (!v0)
  {
    int v0 = (char *)operator new(0x2C00uLL);
    uint64_t v2 = 0;
    uint64_t v3 = 128;
    do
    {
      *(unsigned char *)(sub_216B1608C((uint64_t)&v0[v2], 0, 0.0, 0.5) + 80) = 0;
      v2 += 88;
      --v3;
    }
    while (v3);
    uint64_t v4 = 0;
    atomic_compare_exchange_strong(&qword_267B8EF60, (unint64_t *)&v4, (unint64_t)v0);
    if (v4)
    {
      for (uint64_t i = 0; i != -11264; i -= 88)
      {
        uint64_t v6 = (void **)&v0[i + 11184];
        sub_216B1627C(&v6);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B8EF60);
    }
  }
  return (unint64_t)v0;
}

void sub_216B0FCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_216B1627C((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNode::Sdf_PathNode(uint64_t this, char a2)
{
  *(void *)this = 0;
  *(_DWORD *)(this + 8) = 1;
  *(_WORD *)(this + 12) = 0;
  *(unsigned char *)(this + 14) = 0;
  *(unsigned char *)(this + 15) = a2;
  return this;
}

{
  *(void *)this = 0;
  *(_DWORD *)(this + 8) = 1;
  *(_WORD *)(this + 12) = 0;
  *(unsigned char *)(this + 14) = 0;
  *(unsigned char *)(this + 15) = a2;
  return this;
}

void *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_GetEmptyVariantSelection(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EF78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EF78))
  {
    __cxa_atexit((void (*)(void *))sub_216B0F0A0, &unk_267B8EF68, &dword_216758000);
    __cxa_guard_release(&qword_267B8EF78);
  }
  return &unk_267B8EF68;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetPathToken(atomic_uint *this, std::string *a2, const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *a3)
{
  atomic_fetch_or_explicit(this + 2, 0x80000000, memory_order_relaxed);
  sub_216851EE4((uint64_t)&v71, "Sdf", "SdfPath");
  unsigned __int8 v6 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v6)
  {
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("Sdf_PathNode::GetPathToken", 0, v5);
    BOOL v8 = v7 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 0;
  }
  v69 = v7;
  int v70 = v8;
  uint64_t v65 = 0;
  char v66 = 0;
  unint64_t v67 = 0;
  unint64_t v9 = (uint64_t *)sub_216B10464();
  uint64_t v10 = operator new(0x20uLL);
  v10[2] = 0;
  v10[1] = 0;
  *uint64_t v10 = v10 + 1;
  *((unsigned char *)v10 + 24) = 0;
  v73 = (tbb::spin_rw_mutex_v3 *)v10;
  uint64_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C759AA0;
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v73 = 0;
  sub_216B128CC((void ***)&v73);
  int v64 = v11;
  if (v67)
  {
    uint64_t v12 = v65;
    uint64_t v65 = 0;
    if (v66)
    {
LABEL_6:
      atomic_ullong v13 = *v12;
      unint64_t v14 = *v12 & 0xFFFFFFFFFFFFFFFCLL;
      while (1)
      {
        atomic_ullong v15 = v13;
        atomic_compare_exchange_strong(v12, (unint64_t *)&v15, v14);
        if (v15 == v13) {
          break;
        }
        if (atomic_fetch_add_explicit(v12, 0, memory_order_relaxed) != v13)
        {
          sched_yield();
          goto LABEL_6;
        }
      }
    }
    else
    {
      atomic_fetch_add(v12, 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v67 = 0;
  }
  unint64_t v16 = 0;
  unint64_t v63 = 0;
  uint64_t v17 = *v9;
  __dmb(0xBu);
  for (unint64_t i = (unint64_t)this ^ ((unint64_t)this >> 3); ; unint64_t i = v19)
  {
    uint64_t v19 = i;
    sub_216B165B4((uint64_t)&v73, (uint64_t)v9, v17 & i);
    unint64_t v20 = v75 + 16;
    while (1)
    {
      unint64_t v20 = *(void *)v20;
      if (v20 < 0x40) {
        break;
      }
      if (*(atomic_uint **)(v20 + 16) == this) {
        goto LABEL_18;
      }
    }
    if (v20)
    {
LABEL_18:
      uint64_t v21 = v16;
      goto LABEL_19;
    }
    if (!v16)
    {
      unint64_t v16 = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x28);
      *(void *)unint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = this;
      *((void *)v16 + 3) = v10;
      *((void *)v16 + 4) = v64;
      int v64 = 0;
      uint64_t v10 = 0;
    }
    if (!v74)
    {
      char v74 = 1;
      if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v73) & 1) == 0)
      {
        unint64_t v20 = v75 + 16;
        while (1)
        {
          unint64_t v20 = *(void *)v20;
          if (v20 < 0x40) {
            break;
          }
          if (*(atomic_uint **)(v20 + 16) == this)
          {
            if (v74)
            {
              atomic_fetch_add((atomic_ullong *volatile)v73, 3uLL);
              char v74 = 0;
            }
            goto LABEL_18;
          }
        }
      }
    }
    unint64_t v28 = *v9;
    __dmb(0xBu);
    if (v17 == v28) {
      break;
    }
    if (!sub_21686CF40((uint64_t)v9, v19, v17, v28)) {
      goto LABEL_38;
    }
LABEL_36:
    sub_21685C048(&v73);
    uint64_t v17 = v28;
  }
  unint64_t v28 = v17;
LABEL_38:
  unint64_t v63 = sub_21686C9CC((uint64_t)v9, v75, v16, v28);
  uint64_t v21 = 0;
  unint64_t v20 = (unint64_t)v16;
LABEL_19:
  char v66 = 1;
  if (!tbb::spin_rw_mutex_v3::internal_try_acquire_writer((atomic_ullong *)(v20 + 8)))
  {
    sched_yield();
    int v22 = 2;
    while (1)
    {
      char v66 = 1;
      if (tbb::spin_rw_mutex_v3::internal_try_acquire_writer((atomic_ullong *)(v20 + 8))) {
        break;
      }
      sched_yield();
      BOOL v23 = v22 < 16;
      v22 *= 2;
      if (!v23)
      {
        unint64_t v24 = (atomic_ullong *)v73;
        v73 = 0;
        if (v74)
        {
LABEL_24:
          atomic_ullong v25 = *v24;
          unint64_t v26 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v27 = v25;
            atomic_compare_exchange_strong(v24, (unint64_t *)&v27, v26);
            if (v27 == v25) {
              break;
            }
            if (atomic_fetch_add_explicit(v24, 0, memory_order_relaxed) != v25)
            {
              sched_yield();
              goto LABEL_24;
            }
          }
        }
        else
        {
          atomic_fetch_add(v24, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v28 = *v9;
        __dmb(0xBu);
        unint64_t v16 = v21;
        goto LABEL_36;
      }
    }
  }
  uint64_t v65 = (atomic_ullong *)(v20 + 8);
  sub_21685C048(&v73);
  unint64_t v67 = v20;
  uint64_t v68 = v19;
  if (v63)
  {
    if (v63 < 8)
    {
      uint64_t v34 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
      unint64_t v35 = -6096;
      do
      {
        unint64_t v36 = v34 + v35;
        *(void *)(v36 + 6104) = 0;
        *(void *)(v36 + 6112) = 3;
        v35 += 24;
      }
      while (v35);
      int64x2_t v37 = (int64x2_t)xmmword_217411D20;
      uint64_t v38 = v34 - 48;
      uint64x2_t v39 = (uint64x2_t)vdupq_n_s64(7uLL);
      uint64x2_t v40 = (uint64x2_t)vdupq_n_s64(1uLL);
      int8x16_t v41 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
      int64x2_t v42 = vdupq_n_s64(2uLL);
      uint64_t v33 = 255;
      do
      {
        uint64x2_t v43 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v35), (int8x16_t)xmmword_217411D30);
        int8x16_t v44 = vandq_s8((int8x16_t)vshlq_u64(v40, (uint64x2_t)v37), v41);
        if (vmovn_s64((int64x2_t)vcgtq_u64(v39, v43)).u8[0]) {
          v9[v35 + 2] = v38 + 24 * v44.i64[0];
        }
        if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v43)).i32[1]) {
          v9[v35 + 3] = v38 + 24 * v44.i64[1];
        }
        v35 += 2;
        int64x2_t v37 = vaddq_s64(v37, v42);
      }
      while (v35 != 8);
    }
    else
    {
      uint64_t v30 = tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << v63));
      uint64_t v31 = 1 << v63;
      int v32 = (void *)(v30 + 16);
      do
      {
        *(v32 - 1) = 0;
        *int v32 = 3;
        v32 += 3;
        --v31;
      }
      while (v31);
      v9[v63 + 1] = v30;
      uint64_t v33 = (2 << v63) - 1;
    }
    __dmb(0xBu);
    *unint64_t v9 = v33;
  }
  if (v21) {
    sub_216B1657C(v21, v29);
  }
  if (v64) {
    sub_216784EC4(v64);
  }
  unint64_t v45 = v67;
  if (v67)
  {
    int v46 = v65;
    uint64_t v65 = 0;
    if (v66)
    {
LABEL_64:
      atomic_ullong v47 = *v46;
      unint64_t v48 = *v46 & 0xFFFFFFFFFFFFFFFCLL;
      while (1)
      {
        atomic_ullong v49 = v47;
        atomic_compare_exchange_strong(v46, (unint64_t *)&v49, v48);
        if (v49 == v47) {
          break;
        }
        if (atomic_fetch_add_explicit(v46, 0, memory_order_relaxed) != v47)
        {
          sched_yield();
          goto LABEL_64;
        }
      }
    }
    else
    {
      atomic_fetch_add(v46, 0xFFFFFFFFFFFFFFFCLL);
    }
    unint64_t v67 = 0;
  }
  unsigned int v77 = a2;
  uint64_t v50 = *(void *)(v45 + 24);
  sub_21685036C((uint64_t)&v73, v50 + 24);
  int v51 = *(void **)(v50 + 8);
  if (!v51) {
    goto LABEL_81;
  }
  uint64_t v52 = (uint64_t *)(v50 + 8);
  do
  {
    unint64_t v53 = v51[4];
    BOOL v54 = v53 >= (unint64_t)a2;
    if (v53 >= (unint64_t)a2) {
      int v55 = v51;
    }
    else {
      int v55 = v51 + 1;
    }
    if (v54) {
      uint64_t v52 = v51;
    }
    int v51 = (void *)*v55;
  }
  while (*v55);
  if (v52 == (uint64_t *)(v50 + 8) || v52[4] > (unint64_t)a2)
  {
LABEL_81:
    uint64_t v56 = v73;
    __dmb(0xBu);
    *(unsigned char *)uint64_t v56 = 0;
    v73 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_CreatePathToken((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)this, a2, (uint64_t)&v76);
    sub_216B167C8(&v73, v50 + 24);
    uint64_t v52 = sub_216B1683C((uint64_t **)v50, (unint64_t *)&v77, (uint64_t *)&v77, &v76);
    if ((v76 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  char v57 = v73;
  if (v73)
  {
    __dmb(0xBu);
    *(unsigned char *)char v57 = 0;
  }
  unint64_t v67 = 0;
  sub_21685C048(&v65);
  int v58 = v70--;
  if (v58)
  {
    uint64_t v59 = (uint64_t)v69;
    int v60 = v58 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v59);
      int v70 = v60--;
    }
    while (v60 != -2);
  }
  while (v72--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v71);
  return v52 + 5;
}

void sub_216B10380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  *(void *)(v4 + 8 * a3 + 8) = 0;
  if (a4) {
    sub_216784EC4(a4);
  }
  uint64_t v9 = 0;
  sub_21685C048((uint64_t *)va);
  sub_21684E6B8((uint64_t)va1);
  sub_21684E6B8((uint64_t)va2);
  _Unwind_Resume(a1);
}

unint64_t sub_216B10464()
{
  int v0 = (void *)atomic_load((unint64_t *)&unk_267B8EF80);
  if (!v0)
  {
    uint64_t v2 = (char *)operator new(0x248uLL);
    int v0 = v2;
    uint64_t v3 = v2 + 528;
    for (uint64_t i = 536; i != 584; i += 24)
      *(void *)&v2[i] = 0;
    uint64_t v5 = 0;
    *(_OWORD *)(v2 + 248) = 0u;
    *(_OWORD *)(v2 + 232) = 0u;
    *(_OWORD *)(v2 + 216) = 0u;
    *(_OWORD *)(v2 + 200) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 488) = 0u;
    *(_OWORD *)(v2 + 504) = 0u;
    *(_OWORD *)(v2 + 456) = 0u;
    *(_OWORD *)(v2 + 472) = 0u;
    *(_OWORD *)(v2 + 424) = 0u;
    *(_OWORD *)(v2 + 440) = 0u;
    *(_OWORD *)(v2 + 392) = 0u;
    *(_OWORD *)(v2 + 408) = 0u;
    *(_OWORD *)(v2 + 360) = 0u;
    *(_OWORD *)(v2 + 376) = 0u;
    *(_OWORD *)(v2 + 328) = 0u;
    *(_OWORD *)(v2 + 344) = 0u;
    *(_OWORD *)(v2 + 296) = 0u;
    *(_OWORD *)(v2 + 312) = 0u;
    *(_OWORD *)(v2 + 264) = 0u;
    *(_OWORD *)(v2 + 280) = 0u;
    __dmb(0xBu);
    *(void *)uint64_t v2 = 0;
    __dmb(0xBu);
    *((void *)v2 + 65) = 0;
    *((void *)v2 + 1) = v3;
    *uint64_t v3 = 0u;
    *((_OWORD *)v2 + 34) = 0u;
    *((_OWORD *)v2 + 35) = 0u;
    __dmb(0xBu);
    *(void *)uint64_t v2 = 1;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&unk_267B8EF80, (unint64_t *)&v5, (unint64_t)v2);
    if (v5)
    {
      unint64_t v6 = *(void *)v2;
      __dmb(0xBu);
      v0[65] = 0;
      for (unint64_t j = sub_216851020(v6); ; --j)
      {
        unint64_t v9 = 0;
        uint64_t v10 = &v0[j];
        uint64_t v13 = v10[1];
        uint64_t v11 = v10 + 1;
        uint64_t v12 = v13;
        if (j <= 1) {
          char v14 = 1;
        }
        else {
          char v14 = j;
        }
        do
        {
          uint64_t v15 = v12 + 24 * v9;
          unint64_t v18 = *(void *)(v15 + 16);
          uint64_t v17 = (tbb::internal **)(v15 + 16);
          unint64_t v16 = (tbb::internal *)v18;
          if (v18 >= 0x40)
          {
            do
            {
              *uint64_t v17 = *(tbb::internal **)v16;
              sub_216B1657C(v16, v7);
              unint64_t v16 = *v17;
            }
            while ((unint64_t)*v17 > 0x3F);
          }
          ++v9;
        }
        while (!(v9 >> v14));
        if (j >= 8 || j == 1)
        {
          tbb::internal::deallocate_via_handler_v3(*v11, v7);
        }
        else if (!j)
        {
          __dmb(0xBu);
          void *v0 = 1;
          operator delete(v0);
          return atomic_load((unint64_t *)&unk_267B8EF80);
        }
        uint64_t *v11 = 0;
      }
    }
  }
  return (unint64_t)v0;
}

void pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_CreatePathToken(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)uint64_t v7 = 0u;
  long long v8 = 0u;
  sub_216B10AFC((uint64_t)this, a2, (uint64_t)v7);
  sub_216B10ACC((uint64_t)v7, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (v6 < 0) {
    operator delete(__p);
  }
  if (SBYTE7(v8) < 0) {
    operator delete(v7[0]);
  }
}

void sub_216B106A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_GetElementImpl(std::string *this@<X0>, uint64_t a2@<X8>)
{
  memset(v5, 0, sizeof(v5));
  sub_216B10788(this, (std::string *)v5);
  sub_216B10ACC((uint64_t)v5, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (v4 < 0) {
    operator delete(__p);
  }
  if ((v5[23] & 0x80000000) != 0) {
    operator delete(*(void **)v5);
  }
}

void sub_216B10750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_216B10788(std::string *result, std::string *this)
{
  uint64_t v3 = result;
  switch(result->__r_.__value_.__s.__data_[14])
  {
    case 1:
      unint64_t v5 = result->__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8;
      if (v5)
      {
        char v6 = (const char *)(v5 + 16);
        if (*(char *)(v5 + 39) < 0) {
          char v6 = *(const char **)v6;
        }
      }
      else
      {
        char v6 = "";
      }
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) != 0) {
        std::string::size_type size = this->__r_.__value_.__l.__size_;
      }
      this[1].__r_.__value_.__r.__words[0] = size;
      goto LABEL_51;
    case 2:
      uint64_t v7 = (void *)result->__r_.__value_.__r.__words[2];
      unint64_t v8 = *v7 & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        unint64_t v9 = (const char *)(v8 + 16);
        if (*(char *)(v8 + 39) < 0) {
          unint64_t v9 = *(const char **)v9;
        }
      }
      else
      {
        unint64_t v9 = "";
      }
      unint64_t v21 = v7[1] & 0xFFFFFFFFFFFFFFF8;
      if (v21)
      {
        int v22 = (const char *)(v21 + 16);
        if (*(char *)(v21 + 39) < 0) {
          int v22 = *(const char **)v22;
        }
      }
      else
      {
        int v22 = "";
      }
      std::string::size_type v25 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v25 & 0x80u) != 0) {
        std::string::size_type v25 = this->__r_.__value_.__l.__size_;
      }
      this[1].__r_.__value_.__r.__words[0] = v25;
      std::string::append(this, "{");
      std::string::append(this, v9);
      std::string::append(this, "=");
      std::string::append(this, v22);
      char v6 = "}";
      goto LABEL_51;
    case 3:
    case 6:
    case 7:
      std::string::size_type v4 = result->__r_.__value_.__r.__words[2];
      goto LABEL_26;
    case 4:
      std::string::size_type v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v10 & 0x80u) != 0) {
        std::string::size_type v10 = this->__r_.__value_.__l.__size_;
      }
      this[1].__r_.__value_.__r.__words[0] = v10;
      sub_216B16968(this, "]");
      sub_216B169E4(&v3->__r_.__value_.__r.__words[2], (uint64_t)this);
      std::string::size_type v11 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v11 & 0x80u) != 0) {
        std::string::size_type v11 = this->__r_.__value_.__l.__size_;
      }
      this[1].__r_.__value_.__r.__words[0] = v11;
      char v6 = "[";
      goto LABEL_51;
    case 5:
      std::string::size_type v12 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v12 & 0x80u) != 0) {
        std::string::size_type v12 = this->__r_.__value_.__l.__size_;
      }
      this[1].__r_.__value_.__r.__words[0] = v12;
      sub_216B16968(this, "]");
      sub_216B169E4(&v3->__r_.__value_.__r.__words[2], (uint64_t)this);
      std::string::size_type v13 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v13 & 0x80u) != 0) {
        std::string::size_type v13 = this->__r_.__value_.__l.__size_;
      }
      this[1].__r_.__value_.__r.__words[0] = v13;
      sub_216B16968(this, "[");
      char v14 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v14) {
        char v14 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      unint64_t v15 = *((void *)v14 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v15)
      {
        unint64_t v16 = (const char *)(v15 + 16);
        if (*(char *)(v15 + 39) < 0) {
          unint64_t v16 = *(const char **)v16;
        }
      }
      else
      {
        unint64_t v16 = "";
      }
      std::string::size_type v23 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v23 & 0x80u) != 0) {
        std::string::size_type v23 = this->__r_.__value_.__l.__size_;
      }
      this[1].__r_.__value_.__r.__words[0] = v23;
      sub_216B16968(this, v16);
      std::string::size_type v24 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v24 & 0x80u) != 0) {
        std::string::size_type v24 = this->__r_.__value_.__l.__size_;
      }
      this[1].__r_.__value_.__r.__words[0] = v24;
      char v6 = ".";
LABEL_51:
      uint64_t result = sub_216B16968(this, v6);
      break;
    case 8:
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v17) {
        uint64_t v17 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      std::string::size_type v4 = *((void *)v17 + 8);
LABEL_26:
      unint64_t v18 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        uint64_t v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0) {
          uint64_t v19 = *(const char **)v19;
        }
      }
      else
      {
        uint64_t v19 = "";
      }
      uint64_t result = sub_216B16904(this, v19);
      break;
    default:
      return result;
  }
  return result;
}

void *sub_216B10ACC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v5 = a1;
    a1 = *(void *)a1;
    unint64_t v4 = *(void *)(v5 + 8);
  }
  else
  {
    unint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  return sub_216B129CC(a2, a1 + v4, a1 + v4, a1, a1, v4);
}

std::string *sub_216B10AFC(uint64_t a1, std::string *a2, uint64_t a3)
{
  RelativeRootNode = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)a1);
  if (!a2 && RelativeRootNode == (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)a1)
  {
    uint64_t v7 = ".";
LABEL_35:
    uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(a3 + 8);
    }
    *(void *)(a3 + 24) = v17;
    return sub_216B16968((std::string *)a3, v7);
  }
  if (*(unsigned char *)(a1 + 15)) {
    uint64_t result = (std::string *)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetAbsoluteRootNode(RelativeRootNode);
  }
  else {
    uint64_t result = (std::string *)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode(RelativeRootNode);
  }
  unint64_t v9 = result;
  if (a2)
  {
    std::string::size_type v10 = a2;
    do
    {
      uint64_t result = sub_216B10788(v10, (std::string *)a3);
      std::string::size_type v10 = (std::string *)v10->__r_.__value_.__r.__words[0];
    }
    while (v10);
    if (*(unsigned char *)(a1 + 14) == 1)
    {
      uint64_t result = (std::string *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!result) {
        uint64_t result = (std::string *)sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      if ((*(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8) == (result[2].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *(void *)(a3 + 8);
        }
        *(void *)(a3 + 24) = v11;
        uint64_t result = sub_216B16968((std::string *)a3, "/");
      }
    }
  }
  if (a1 && v9 != (std::string *)a1)
  {
    std::string::size_type v12 = (std::string *)a1;
    do
    {
      std::string::size_type v13 = v12;
      uint64_t result = sub_216B10788(v12, (std::string *)a3);
      std::string::size_type v12 = (std::string *)v12->__r_.__value_.__r.__words[0];
      BOOL v14 = v13->__r_.__value_.__s.__data_[14] != 1 || v12 == 0;
      if (!v14 && v12->__r_.__value_.__s.__data_[14] == 1)
      {
        uint64_t v15 = *(unsigned __int8 *)(a3 + 23);
        if ((v15 & 0x80u) != 0) {
          uint64_t v15 = *(void *)(a3 + 8);
        }
        *(void *)(a3 + 24) = v15;
        uint64_t result = sub_216B16968((std::string *)a3, "/");
      }
      if (v12) {
        BOOL v16 = v12 == v9;
      }
      else {
        BOOL v16 = 1;
      }
    }
    while (!v16);
  }
  if (*(unsigned char *)(a1 + 15))
  {
    uint64_t v7 = "/";
    goto LABEL_35;
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetDebugText(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this, const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *a2, const pxrInternal__aapl__pxrReserved__::Sdf_PathNode *a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  sub_216B10D48((uint64_t)this, a2, &v9);
  if (v10) {
    return aPathTextExceed;
  }
  uint64_t result = (char *)&unk_267B8EF88;
  unint64_t v4 = (char *)(qword_26798C3D8 - 1);
  if ((_UNKNOWN *)qword_26798C3D8 != &unk_267B8EF88 && v4 > (char *)&unk_267B8EF88)
  {
    char v6 = (char *)&unk_267B8EF89;
    do
    {
      char v7 = *(v6 - 1);
      *(v6 - 1) = *v4;
      *v4-- = v7;
    }
    while (v6++ < v4);
  }
  qword_26798C3D8 = (uint64_t)&unk_267B8EF88;
  return result;
}

uint64_t sub_216B10D48(uint64_t a1, void *a2, unint64_t *a3)
{
  RelativeRootNode = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)a1);
  if (!a2 && RelativeRootNode == (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)a1)
  {
    char v7 = ".";
LABEL_31:
    *a3 = qword_26798C3D8;
    return sub_216B16D20(a3, v7);
  }
  if (*(unsigned char *)(a1 + 15)) {
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetAbsoluteRootNode(RelativeRootNode);
  }
  else {
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode(RelativeRootNode);
  }
  uint64_t v9 = result;
  if (a2)
  {
    char v10 = a2;
    do
    {
      uint64_t result = sub_216B16A3C((uint64_t)v10, a3);
      char v10 = (void *)*v10;
    }
    while (v10);
    if (*(unsigned char *)(a1 + 14) == 1)
    {
      uint64_t result = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!result) {
        uint64_t result = (uint64_t)sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      if ((*(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(result + 48) & 0xFFFFFFFFFFFFFFF8))
      {
        *a3 = qword_26798C3D8;
        uint64_t result = sub_216B16D20(a3, "/");
      }
    }
  }
  if (a1 && v9 != a1)
  {
    uint64_t v11 = a1;
    do
    {
      uint64_t v12 = v11;
      uint64_t result = sub_216B16A3C(v11, a3);
      uint64_t v11 = *(void *)v11;
      BOOL v13 = *(unsigned char *)(v12 + 14) != 1 || v11 == 0;
      if (!v13 && *(unsigned char *)(v11 + 14) == 1)
      {
        *a3 = qword_26798C3D8;
        uint64_t result = sub_216B16D20(a3, "/");
      }
      if (v11) {
        BOOL v14 = v11 == v9;
      }
      else {
        BOOL v14 = 1;
      }
    }
    while (!v14);
  }
  if (*(unsigned char *)(a1 + 15))
  {
    char v7 = "/";
    goto LABEL_31;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable(unint64_t this)
{
  uint64_t v2 = (uint64_t *)sub_216B10464();
  uint64_t v3 = *v2;
  __dmb(0xBu);
  while (2)
  {
    sub_216B165B4((uint64_t)&v10, (uint64_t)v2, v3 & (this ^ (this >> 3)));
    while (1)
    {
      unint64_t v4 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode **)(v12 + 16);
      while (1)
      {
        uint64_t v5 = v4;
        unint64_t v4 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode **)*v4;
        if ((unint64_t)v4 < 0x40) {
          break;
        }
        if (v4[2] == (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)this) {
          goto LABEL_8;
        }
      }
      if (!v4) {
        break;
      }
LABEL_8:
      if (v11 || (char v11 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v10) & 1) != 0))
      {
        char *v5 = *v4;
        atomic_fetch_add(v2 + 65, 0xFFFFFFFFFFFFFFFFLL);
        sub_21685C048(&v10);
        char v11 = 1;
        char v10 = (tbb::spin_rw_mutex_v3 *)(v4 + 1);
        tbb::spin_rw_mutex_v3::internal_acquire_writer((atomic_ullong *)v4 + 1);
        sub_21685C048(&v10);
        return (void *)sub_216B1657C((tbb::internal *)v4, v8);
      }
      uint64_t v6 = *v2;
      __dmb(0xBu);
      if (v3 != v6)
      {
        BOOL v7 = sub_21686CF40((uint64_t)v2, this ^ (this >> 3), v3, v6);
        uint64_t v3 = v6;
        if (v7) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v6 = *v2;
    __dmb(0xBu);
    if (v3 != v6 && sub_21686CF40((uint64_t)v2, this ^ (this >> 3), v3, v6))
    {
LABEL_15:
      sub_21685C048(&v10);
      uint64_t v3 = v6;
      continue;
    }
    return sub_21685C048(&v10);
  }
}

void sub_216B1104C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_IsNamespacedImpl(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  switch(*((unsigned char *)this + 14))
  {
    case 0:
      char v2 = *((unsigned char *)this + 15);
      uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (v2)
      {
        if (!v1) {
          uint64_t v1 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        }
      }
      else
      {
        if (!v1) {
          uint64_t v1 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        }
        uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v1 + 8);
      }
      break;
    case 1:
    case 3:
    case 6:
    case 7:
      uint64_t v1 = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)((char *)this + 16);
      break;
    case 2:
      uint64_t v3 = *((void *)this + 2);
      uint64_t v5 = *(void *)(v3 + 8);
      unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)(v3 + 8);
      if (v5) {
        uint64_t v1 = v4;
      }
      else {
        uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)*((void *)this + 2);
      }
      break;
    case 8:
      BOOL v7 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v7) {
        BOOL v7 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v7 + 64);
      break;
    default:
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v6) {
        uint64_t v6 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)((char *)v6 + 88);
      break;
  }
  if ((*(void *)v1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (const std::string *)((*(void *)v1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v1);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if (!v9) {
    uint64_t v9 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  }
  if ((*((void *)v9 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
    char v10 = (std::string::value_type *)((*((void *)v9 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    char v10 = (std::string::value_type *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  if (v10[23] < 0) {
    char v10 = *(std::string::value_type **)v10;
  }
  return std::string::find(EmptyString, *v10, 0) != -1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode::~Sdf_PrimPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode *this)
{
  unint64_t v2 = sub_216B0E6D4();
  uint64_t v3 = *(void *)this;
  uint64_t v16 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  unint64_t v4 = (uint64_t *)(v2
                 + 88
                 * ((((0x1E3779B97F4A7C55
                                   * ((*((void *)this + 2) & 0xFFFFFFFFFFFFFFF8)
                                    + (((*((void *)this + 2) & 0xFFFFFFFFFFFFFFF8)
                                      + v3
                                      + ((*((void *)this + 2) & 0xFFFFFFFFFFFFFFF8) + v3)
                                      * ((*((void *)this + 2) & 0xFFFFFFFFFFFFFFF8) + v3)) >> 1))) >> 32) >> 24) & 0x7F));
  sub_21685036C((uint64_t)&v17, (uint64_t)(v4 + 10));
  uint64_t v5 = *((void *)this + 2);
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = v4[4];
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55* ((v5 & 0xFFFFFFFFFFFFFFF8)+ (((v5 & 0xFFFFFFFFFFFFFFF8) + v3 + ((v5 & 0xFFFFFFFFFFFFFFF8) + v3) * ((v5 & 0xFFFFFFFFFFFFFFF8) + v3)) >> 1))) & *v4;
  if (*(__int16 *)(v7 + 32 * v8 + 4) < 0)
  {
LABEL_11:
    unint64_t v8 = v4[5];
  }
  else
  {
    LOWORD(v9) = 0;
    while (1)
    {
      unint64_t v10 = v7 + 32 * v8;
      uint64_t v12 = *(void *)(v10 + 8);
      unint64_t v11 = v10 + 8;
      if (v12 == v3 && (atomic_uint *)(*(void *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8) == v6) {
        break;
      }
      int v9 = (__int16)(v9 + 1);
      unint64_t v8 = (v8 + 1) & *v4;
      if (v9 > *(__int16 *)(v7 + 32 * v8 + 4)) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v13 = v7 + 32 * v8;
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit(v6, 0xFFFFFFFE, memory_order_release);
  }
  if (v13 != v4[4] + 32 * v4[5]
    && (pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v7 + 32 * v8 + 24)) == this)
  {
    sub_216B13D84(v4, v13);
  }
  BOOL v14 = v17;
  if (v17)
  {
    __dmb(0xBu);
    unsigned char *v14 = 0;
  }
  sub_21697C584(&v16);
  uint64_t v15 = *((void *)this + 2);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697C53C(this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode::~Sdf_PrimPropertyPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode *this)
{
  unint64_t v2 = sub_216B0E934();
  uint64_t v3 = *(void *)this;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  sub_216B11434((uint64_t)this, v2, &v5, (uint64_t *)this + 2);
  sub_21697C584(&v5);
  uint64_t v4 = *((void *)this + 2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697C53C(this);
}

uint64_t sub_216B11434(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = (uint64_t *)(a2
                 + 88
                 * ((((0x1E3779B97F4A7C55
                                   * ((*a4 & 0xFFFFFFFFFFFFFFF8)
                                    + (((*a4 & 0xFFFFFFFFFFFFFFF8)
                                      + *a3
                                      + ((*a4 & 0xFFFFFFFFFFFFFFF8) + *a3) * ((*a4 & 0xFFFFFFFFFFFFFFF8) + *a3)) >> 1))) >> 32) >> 24) & 0x7F));
  uint64_t result = sub_21685036C((uint64_t)&v19, (uint64_t)(v7 + 10));
  uint64_t v9 = *a4;
  if ((*a4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v9 &= 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v10 = (atomic_uint *)(v9 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = v7[4];
  unint64_t v12 = bswap64(0x9E3779B97F4A7C55* ((v9 & 0xFFFFFFFFFFFFFFF8)+ (((v9 & 0xFFFFFFFFFFFFFFF8) + v6 + ((v9 & 0xFFFFFFFFFFFFFFF8) + v6) * ((v9 & 0xFFFFFFFFFFFFFFF8) + v6)) >> 1))) & *v7;
  if (*(__int16 *)(v11 + 32 * v12 + 4) < 0)
  {
LABEL_9:
    unint64_t v12 = v7[5];
  }
  else
  {
    LOWORD(v13) = 0;
    while (1)
    {
      unint64_t v14 = v11 + 32 * v12;
      uint64_t v16 = *(void *)(v14 + 8);
      unint64_t v15 = v14 + 8;
      if (v16 == v6 && (atomic_uint *)(*(void *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8) == v10) {
        break;
      }
      int v13 = (__int16)(v13 + 1);
      unint64_t v12 = (v12 + 1) & *v7;
      if (v13 > *(__int16 *)(v11 + 32 * v12 + 4)) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v17 = v11 + 32 * v12;
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit(v10, 0xFFFFFFFE, memory_order_release);
  }
  if (v17 != v7[4] + 32 * v7[5])
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v11 + 32 * v12 + 24));
    if (result == a1) {
      uint64_t result = (uint64_t)sub_216B13D84(v7, v17);
    }
  }
  unint64_t v18 = v19;
  if (v19)
  {
    __dmb(0xBu);
    *unint64_t v18 = 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::_GetNameImpl(pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v2 = v1 + 8;
  if (v3) {
    return v2;
  }
  else {
    return *((void *)this + 2);
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::~Sdf_PrimVariantSelectionNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *this)
{
  unint64_t v2 = sub_216B0EFA0();
  uint64_t v3 = *(void *)this;
  uint64_t v17 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v5 = (void **)((char *)this + 16);
  uint64_t v4 = (uint64_t *)*((void *)this + 2);
  uint64_t v22 = v3;
  std::string::size_type v23 = v4;
  uint64_t v18 = 0;
  LOBYTE(v19) = 0;
  sub_216B14C90((uint64_t)&v18, &v22, v4);
  uint64_t v6 = (uint64_t *)(v2 + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * v18) >> 32) >> 24) & 0x7F));
  sub_21685036C((uint64_t)&v21, (uint64_t)(v6 + 10));
  uint64_t v18 = v22;
  sub_216B15074(&v19, v23);
  uint64_t v24 = 0;
  char v25 = 0;
  sub_216B14C90((uint64_t)&v24, &v18, &v19);
  uint64_t v7 = v6[4];
  unint64_t v8 = *v6 & bswap64(0x9E3779B97F4A7C55 * v24);
  if (*(__int16 *)(v7 + 40 * v8 + 4) < 0)
  {
    uint64_t v10 = v20;
LABEL_11:
    unint64_t v8 = v6[5];
  }
  else
  {
    LOWORD(v9) = 0;
    uint64_t v10 = v20;
    while (1)
    {
      unint64_t v11 = v7 + 40 * v8;
      uint64_t v13 = *(void *)(v11 + 8);
      unint64_t v12 = v11 + 8;
      if (v13 == v18
        && (*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8) == (v19 & 0xFFFFFFFFFFFFFFF8)
        && (*(void *)(v12 + 16) & 0xFFFFFFFFFFFFFFF8) == (v20 & 0xFFFFFFFFFFFFFFF8))
      {
        break;
      }
      int v9 = (__int16)(v9 + 1);
      unint64_t v8 = (v8 + 1) & *v6;
      if (v9 > *(__int16 *)(v7 + 40 * v8 + 4)) {
        goto LABEL_11;
      }
    }
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = v7 + 40 * v8;
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v14 != v6[4] + 40 * v6[5]
    && (pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v7 + 40 * v8 + 32)) == this)
  {
    sub_216B14B28(v6, v14);
  }
  unint64_t v15 = v21;
  if (v21)
  {
    __dmb(0xBu);
    *unint64_t v15 = 0;
  }
  sub_21697C584(&v17);
  uint64_t v16 = *v5;
  char *v5 = 0;
  if (v16) {
    sub_216B13364(this + 16, v16);
  }
  sub_21697C53C(this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode::~Sdf_TargetPathNode(pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode *this)
{
  unint64_t v2 = atomic_load((unint64_t *)&qword_267B8EF40);
  if (!v2) {
    unint64_t v2 = sub_216B15164();
  }
  uint64_t v3 = *(void *)this;
  uint64_t v4 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  sub_216B118D0((uint64_t)this, v2, &v4, (_DWORD *)this + 4);
  sub_21697C584(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 5);
  sub_21697C414((_DWORD *)this + 4);
  sub_21697C53C(this);
}

uint64_t sub_216B118D0(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v20 = *a3;
  unint64_t v21 = a4;
  uint64_t v22 = 0;
  char v23 = 0;
  sub_216B15920((uint64_t)&v22, &v20, a4);
  uint64_t v6 = (void *)(a2 + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * v22) >> 32) >> 24) & 0x7F));
  sub_21685036C((uint64_t)&v19, (uint64_t)(v6 + 10));
  uint64_t v7 = v21;
  uint64_t v17 = v20;
  sub_216981010(&v18, v21);
  sub_21698105C((_DWORD *)&v18 + 1, v7 + 1);
  uint64_t v22 = 0;
  char v23 = 0;
  sub_216B15920((uint64_t)&v22, &v17, (unsigned int *)&v18);
  uint64_t v8 = v6[4];
  unint64_t v9 = *v6 & bswap64(0x9E3779B97F4A7C55 * v22);
  if (*(__int16 *)(v8 + 32 * v9 + 4) < 0)
  {
LABEL_8:
    unint64_t v9 = v6[5];
  }
  else
  {
    LOWORD(v10) = 0;
    while (1)
    {
      uint64_t v11 = v8 + 32 * v9;
      uint64_t v13 = *(void *)(v11 + 8);
      uint64_t v12 = *(void *)(v11 + 16);
      if (v13 == v17 && v12 == v18) {
        break;
      }
      int v10 = (__int16)(v10 + 1);
      unint64_t v9 = (v9 + 1) & *v6;
      if (v10 > *(__int16 *)(v8 + 32 * v9 + 4)) {
        goto LABEL_8;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  uint64_t result = (uint64_t)sub_21697C414(&v18);
  if (v8 + 32 * v9 != v6[4] + 32 * v6[5])
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v8 + 32 * v9 + 24));
    if (result == a1) {
      uint64_t result = (uint64_t)sub_216B15C9C((uint64_t)v6, v8 + 32 * v9);
    }
  }
  uint64_t v16 = v19;
  if (v19)
  {
    __dmb(0xBu);
    *uint64_t v16 = 0;
  }
  return result;
}

void sub_216B11A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned char *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode::~Sdf_RelationalAttributePathNode(pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode *this)
{
  unint64_t v2 = sub_216B0F374();
  uint64_t v3 = *(void *)this;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  sub_216B11434((uint64_t)this, v2, &v5, (uint64_t *)this + 2);
  sub_21697C584(&v5);
  uint64_t v4 = *((void *)this + 2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697C53C(this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode::~Sdf_MapperPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode *this)
{
  unint64_t v2 = atomic_load((unint64_t *)&qword_267B8EF50);
  if (!v2) {
    unint64_t v2 = sub_216B15EA4();
  }
  uint64_t v3 = *(void *)this;
  uint64_t v4 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  sub_216B118D0((uint64_t)this, v2, &v4, (_DWORD *)this + 4);
  sub_21697C584(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 5);
  sub_21697C414((_DWORD *)this + 4);
  sub_21697C53C(this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode::~Sdf_MapperArgPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode *this)
{
  unint64_t v2 = sub_216B0F714();
  uint64_t v3 = *(void *)this;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  sub_216B11434((uint64_t)this, v2, &v5, (uint64_t *)this + 2);
  sub_21697C584(&v5);
  uint64_t v4 = *((void *)this + 2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697C53C(this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode::~Sdf_ExpressionPathNode(pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode *this)
{
  unint64_t v2 = sub_216B0FBE0();
  uint64_t v3 = *(void *)this;
  uint64_t v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v4 = (void *)(v2 + 88 * ((((unint64_t)(0x1E3779B97F4A7C55 * v3) >> 32) >> 24) & 0x7F));
  sub_21685036C((uint64_t)&v10, (uint64_t)(v4 + 10));
  uint64_t v5 = v4[4];
  unint64_t v6 = *v4 & bswap64(0x9E3779B97F4A7C55 * v3);
  if ((*(__int16 *)(v5 + 24 * v6 + 4) & 0x80000000) == 0)
  {
    LOWORD(v7) = 0;
    while (*(void *)(v5 + 24 * v6 + 8) != v3)
    {
      int v7 = (__int16)(v7 + 1);
      unint64_t v6 = (v6 + 1) & *v4;
      if (v7 > *(__int16 *)(v5 + 24 * v6 + 4)) {
        goto LABEL_11;
      }
    }
    if (v6 != v4[5]
      && (pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v5 + 24 * v6 + 16)) == this)
    {
      sub_216B162D8((uint64_t)v4, v5 + 24 * v6);
    }
  }
LABEL_11:
  uint64_t v8 = v10;
  if (v10)
  {
    __dmb(0xBu);
    *uint64_t v8 = 0;
  }
  sub_21697C584(&v9);
  sub_21697C53C(this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_DumpPathStats(pxrInternal__aapl__pxrReserved__ *this)
{
  v19[9] = *MEMORY[0x263EF8340];
  *(_OWORD *)long long __p = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)unint64_t v15 = 0u;
  long long v16 = 0u;
  uint64_t AbsoluteRootNode = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetAbsoluteRootNode(this);
  sub_216B120D0(AbsoluteRootNode, (uint64_t)v15);
  uint64_t RelativeRootNode = pxrInternal__aapl__pxrReserved__::Sdf_PathNode::GetRelativeRootNode(v2);
  sub_216B120D0(RelativeRootNode, (uint64_t)v15);
  puts("Sdf_PathNode stats:");
  printf("\tnum node refs: %i\n", HIDWORD(v15[0]));
  printf("\tnum nodes:     %i\n", LODWORD(v15[0]));
  printf("\tsizeof(SdfPath), aka node ref:  %zu\n", 8uLL);
  printf("\tsizeof(Sdf_PathNode), aka node: %zu\n", 0x10uLL);
  v19[0] = "RootNode";
  v19[1] = "PrimNode";
  v19[2] = "PrimVariantSelectionNode";
  v19[3] = "PrimPropertyNode";
  v19[4] = "TargetNode";
  void v19[5] = "MapperNode";
  v19[6] = "RelationalAttributeNode";
  v19[7] = "MapperArgNode";
  v19[8] = "ExpressionNode";
  printf("------------------------------------------------");
  puts("-- By Type");
  for (uint64_t i = 0; i != 9; ++i)
    printf("\t%32ss: %8zu -- %6.2f%%\n", (const char *)v19[i], *(void *)((char *)v18 + i * 8 + 8), (double)*(unint64_t *)((char *)v18 + i * 8 + 8) * 100.0 / (double)SLODWORD(v15[0]));
  printf("------------------------------------------------");
  puts("-- By Length");
  uint64_t v5 = v15[1];
  if ((void *)v16 == v15[1])
  {
    float v8 = 0.0;
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      printf("\tnum nodes with %3zu components : %i\n", v6, v5[v6]);
      uint64_t v5 = v15[1];
      v7 += v6 * *((int *)v15[1] + v6);
      ++v6;
    }
    while (v6 < (uint64_t)(v16 - (unint64_t)v15[1]) >> 2);
    float v8 = (float)v7;
  }
  printf("\tavg num components: %g\n", (float)(v8 / (float)SLODWORD(v15[0])));
  printf("------------------------------------------------");
  puts("-- By Number of Children");
  uint64_t v9 = __p[1];
  if (__p[1] == __p[0])
  {
    unint64_t v11 = ((char *)__p[1] - (char *)__p[0]) >> 2;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v9 = __p[0];
    do
    {
      printf("\tnum nodes with %3zu children : %i\n", v10, v9[v10]);
      ++v10;
      uint64_t v9 = __p[0];
    }
    while (v10 < ((char *)__p[1] - (char *)__p[0]) >> 2);
    unint64_t v11 = ((char *)__p[1] - (char *)__p[0]) >> 2;
  }
  float v12 = 0.0;
  if (v11 >= 2)
  {
    unint64_t v13 = 0;
    for (uint64_t j = 1; j != v11; ++j)
      v13 += j * (int)v9[j];
    float v12 = (float)v13;
  }
  printf("\tavg num children (for nodes with any children): %g\n", (float)(v12 / (float)(LODWORD(v15[0]) - *v9)));
  putchar(10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v15[1])
  {
    *(void **)&long long v16 = v15[1];
    operator delete(v15[1]);
  }
}

void sub_216B120BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_216B1282C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_216B120D0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 4);
  ++*(_DWORD *)a2;
  *(_DWORD *)(a2 + 4) = v4 + (*(_DWORD *)(a1 + 8) & 0x7FFFFFFF);
  uint64_t v5 = a2 + 8 * *(unsigned __int8 *)(a1 + 14);
  ++*(void *)(v5 + 56);
  unint64_t v6 = *(unsigned __int16 *)(a1 + 12) + 1;
  float v8 = (void **)(a2 + 8);
  unint64_t v7 = *(char **)(a2 + 8);
  uint64_t v9 = *(char **)(a2 + 16);
  unint64_t v10 = (v9 - v7) >> 2;
  if (v10 <= v6)
  {
    unint64_t v11 = (void *)(a2 + 24);
    do
    {
      if ((unint64_t)v9 >= *v11)
      {
        unint64_t v13 = v10 + 1;
        if ((v10 + 1) >> 62) {
          sub_21677CB10();
        }
        uint64_t v14 = *v11 - (void)v7;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          long long v16 = (char *)sub_21677EA28(a2 + 24, v15);
          unint64_t v7 = *(char **)(a2 + 8);
          uint64_t v9 = *(char **)(a2 + 16);
        }
        else
        {
          long long v16 = 0;
        }
        uint64_t v17 = &v16[4 * v10];
        *(_DWORD *)uint64_t v17 = 0;
        float v12 = v17 + 4;
        while (v9 != v7)
        {
          int v18 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        *(void *)(a2 + 8) = v17;
        *(void *)(a2 + 16) = v12;
        *(void *)(a2 + 24) = &v16[4 * v15];
        if (v7)
        {
          operator delete(v7);
          unint64_t v7 = (char *)*v8;
        }
        else
        {
          unint64_t v7 = v17;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v9 = 0;
        float v12 = v9 + 4;
      }
      *(void *)(a2 + 16) = v12;
      unint64_t v10 = (v12 - v7) >> 2;
      uint64_t v9 = v12;
    }
    while (v10 <= v6);
  }
  ++*(_DWORD *)&v7[4 * v6];
  std::string::size_type v80 = 0;
  v81 = 0;
  uint64_t v82 = 0;
  unint64_t v19 = atomic_load((unint64_t *)&qword_267B8EF50);
  if (!v19) {
    unint64_t v19 = sub_216B15EA4();
  }
  sub_216B12BB0(a1, v19, (char **)&v80);
  unint64_t v20 = atomic_load((unint64_t *)&qword_267B8EF40);
  if (!v20) {
    unint64_t v20 = sub_216B15164();
  }
  sub_216B12BB0(a1, v20, (char **)&v80);
  unint64_t v21 = sub_216B0F714();
  sub_216B12D4C(a1, v21, (char **)&v80);
  unint64_t v22 = sub_216B0E6D4();
  for (uint64_t i = 0; i != 128; ++i)
  {
    sub_21685036C((uint64_t)v85, v22 + 88 * i + 80);
    uint64_t v27 = *(void *)(v22 + 88 * i + 32);
    uint64_t v26 = *(void *)(v22 + 88 * i + 40);
    uint64_t v28 = 0;
    if (v26)
    {
      int v29 = (__int16 *)(v27 + 4);
      while (1)
      {
        int v30 = *v29;
        v29 += 16;
        if (v30 != -1) {
          break;
        }
        if (v26 == ++v28) {
          goto LABEL_41;
        }
      }
    }
    uint64_t v83 = v27 + 32 * v28;
    uint64_t v84 = v27 + 32 * v26;
    if (v28 != v26)
    {
      do
      {
        sub_216B1316C(&v83, v24, v25);
        uint64_t v31 = v83;
        if (*(void *)(v83 + 8) == a1)
        {
          sub_216B1316C(&v83, v24, v25);
          uint64_t Ptr = (void **)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v83 + 24));
          sub_216B12F64((char **)&v80, (uint64_t *)&Ptr);
          uint64_t v31 = v83;
        }
        uint64_t v32 = v84;
        if (v31 == v84)
        {
          uint64_t Ptr = (void **)"tf/iterator.h";
          v87 = (void **)"operator++";
          uint64_t v88 = 250;
          v89 = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserve"
                "d__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal_"
                "_aapl__pxrReserved__::TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserve"
                "d__::Sdf_PathPrimTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>>::operator++() [T = cons"
                "t pxrInternal__aapl__pxrReserved__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous name"
                "space)::_ParentAnd<pxrInternal__aapl__pxrReserved__::TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Poo"
                "l<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::T"
                "fHash>, Reverse = false]";
          char v90 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Ptr, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
          uint64_t v34 = v83;
          uint64_t v32 = v84;
        }
        else
        {
          uint64_t v33 = v31 + 32;
          do
          {
            uint64_t v34 = v33;
            if (*(unsigned char *)(v33 - 26)) {
              break;
            }
            v33 += 32;
          }
          while (*(__int16 *)(v34 + 4) == -1);
          uint64_t v83 = v34;
        }
      }
      while (v34 != v32);
    }
LABEL_41:
    unint64_t v35 = (unsigned char *)v85[0];
    if (v85[0])
    {
      __dmb(0xBu);
      unsigned char *v35 = 0;
    }
  }
  unint64_t v36 = sub_216B0E934();
  sub_216B12D4C(a1, v36, (char **)&v80);
  unint64_t v37 = sub_216B0F374();
  sub_216B12D4C(a1, v37, (char **)&v80);
  unint64_t v38 = sub_216B0EFA0();
  for (uint64_t j = 0; j != 128; ++j)
  {
    sub_21685036C((uint64_t)v85, v38 + 88 * j + 80);
    uint64_t v43 = *(void *)(v38 + 88 * j + 32);
    uint64_t v42 = *(void *)(v38 + 88 * j + 40);
    uint64_t v44 = 0;
    if (v42)
    {
      unint64_t v45 = (__int16 *)(v43 + 4);
      while (1)
      {
        int v46 = *v45;
        v45 += 20;
        if (v46 != -1) {
          break;
        }
        if (v42 == ++v44) {
          goto LABEL_60;
        }
      }
    }
    uint64_t v83 = v43 + 40 * v44;
    uint64_t v84 = v43 + 40 * v42;
    if (v44 != v42)
    {
      do
      {
        sub_216B131E8(&v83, v40, v41);
        uint64_t v47 = v83;
        if (*(void *)(v83 + 8) == a1)
        {
          sub_216B131E8(&v83, v40, v41);
          uint64_t Ptr = (void **)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v83 + 32));
          sub_216B12F64((char **)&v80, (uint64_t *)&Ptr);
          uint64_t v47 = v83;
        }
        uint64_t v48 = v84;
        if (v47 == v84)
        {
          uint64_t Ptr = (void **)"tf/iterator.h";
          v87 = (void **)"operator++";
          uint64_t v88 = 250;
          v89 = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserve"
                "d__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<std::pair<px"
                "rInternal__aapl__pxrReserved__::TfToken, pxrInternal__aapl__pxrReserved__::TfToken>>, pxrInternal__aapl_"
                "_pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag, 24, 8>::Handle, pxrInternal_"
                "_aapl__pxrReserved__::TfHash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::pxr_tsl::robin"
                "_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<std::pair<pxrInternal__aapl__px"
                "rReserved__::TfToken, pxrInternal__aapl__pxrReserved__::TfToken>>, pxrInternal__aapl__pxrReserved__::Sdf"
                "_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved_"
                "_::TfHash>, Reverse = false]";
          char v90 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Ptr, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
          uint64_t v50 = v83;
          uint64_t v48 = v84;
        }
        else
        {
          uint64_t v49 = v47 + 40;
          do
          {
            uint64_t v50 = v49;
            if (*(unsigned char *)(v49 - 34)) {
              break;
            }
            v49 += 40;
          }
          while (*(__int16 *)(v50 + 4) == -1);
          uint64_t v83 = v50;
        }
      }
      while (v50 != v48);
    }
LABEL_60:
    int v51 = (unsigned char *)v85[0];
    if (v85[0])
    {
      __dmb(0xBu);
      *int v51 = 0;
    }
  }
  unint64_t v52 = sub_216B0FBE0();
  for (uint64_t k = 0; k != 128; ++k)
  {
    sub_21685036C((uint64_t)v85, v52 + 88 * k + 80);
    uint64_t v57 = *(void *)(v52 + 88 * k + 32);
    uint64_t v56 = *(void *)(v52 + 88 * k + 40);
    uint64_t v58 = 0;
    if (v56)
    {
      uint64_t v59 = (__int16 *)(v57 + 4);
      while (1)
      {
        int v60 = *v59;
        v59 += 12;
        if (v60 != -1) {
          break;
        }
        if (v56 == ++v58) {
          goto LABEL_79;
        }
      }
    }
    uint64_t v83 = v57 + 24 * v58;
    uint64_t v84 = v57 + 24 * v56;
    if (v58 != v56)
    {
      do
      {
        sub_216B13264(&v83, v54, v55);
        uint64_t v61 = v83;
        if (*(void *)(v83 + 8) == a1)
        {
          sub_216B13264(&v83, v54, v55);
          uint64_t Ptr = (void **)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v83 + 16));
          sub_216B12F64((char **)&v80, (uint64_t *)&Ptr);
          uint64_t v61 = v83;
        }
        uint64_t v62 = v84;
        if (v61 == v84)
        {
          uint64_t Ptr = (void **)"tf/iterator.h";
          v87 = (void **)"operator++";
          uint64_t v88 = 250;
          v89 = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserve"
                "d__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<void>, pxrIn"
                "ternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle,"
                " pxrInternal__aapl__pxrReserved__::TfHash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::p"
                "xr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<void>, pxrInternal"
                "__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrIn"
                "ternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
          char v90 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Ptr, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
          uint64_t v64 = v83;
          uint64_t v62 = v84;
        }
        else
        {
          uint64_t v63 = v61 + 24;
          do
          {
            uint64_t v64 = v63;
            if (*(unsigned char *)(v63 - 18)) {
              break;
            }
            v63 += 24;
          }
          while (*(__int16 *)(v64 + 4) == -1);
          uint64_t v83 = v64;
        }
      }
      while (v64 != v62);
    }
LABEL_79:
    uint64_t v65 = (unsigned char *)v85[0];
    if (v85[0])
    {
      __dmb(0xBu);
      *uint64_t v65 = 0;
    }
  }
  unint64_t v67 = v80;
  char v66 = v81;
  unint64_t v68 = v81 - v80;
  v69 = *(char **)(a2 + 32);
  int v70 = *(char **)(a2 + 40);
  unint64_t v71 = (v70 - v69) >> 2;
  if (v71 <= v68)
  {
    int v72 = (void *)(a2 + 48);
    do
    {
      if ((unint64_t)v70 >= *v72)
      {
        unint64_t v74 = v71 + 1;
        if ((v71 + 1) >> 62) {
          sub_21677CB10();
        }
        uint64_t v75 = *v72 - (void)v69;
        if (v75 >> 1 > v74) {
          unint64_t v74 = v75 >> 1;
        }
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
          uint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v54 = v74;
        }
        if (v54)
        {
          uint64_t v76 = (char *)sub_21677EA28(a2 + 48, v54);
          v69 = *(char **)(a2 + 32);
          int v70 = *(char **)(a2 + 40);
        }
        else
        {
          uint64_t v76 = 0;
        }
        unsigned int v77 = &v76[4 * v71];
        *(_DWORD *)unsigned int v77 = 0;
        v73 = v77 + 4;
        while (v70 != v69)
        {
          int v78 = *((_DWORD *)v70 - 1);
          v70 -= 4;
          *((_DWORD *)v77 - 1) = v78;
          v77 -= 4;
        }
        *(void *)(a2 + 32) = v77;
        *(void *)(a2 + 40) = v73;
        *(void *)(a2 + 48) = &v76[4 * v54];
        if (v69)
        {
          operator delete(v69);
          v69 = *(char **)(a2 + 32);
        }
        else
        {
          v69 = v77;
        }
      }
      else
      {
        *(_DWORD *)int v70 = 0;
        v73 = v70 + 4;
      }
      *(void *)(a2 + 40) = v73;
      unint64_t v71 = (v73 - v69) >> 2;
      int v70 = v73;
    }
    while (v71 <= v68);
    unint64_t v67 = v80;
    char v66 = v81;
  }
  ++*(_DWORD *)&v69[4 * v68];
  uint64_t Ptr = v67;
  v87 = v66;
  while (Ptr != v87)
  {
    v79 = sub_216B12AB4(&Ptr, v54, v55);
    sub_216B120D0(*(void *)*v79, a2);
    sub_216B12B30(&Ptr);
  }
  uint64_t Ptr = (void **)&v80;
  sub_216B132E0(&Ptr);
}

void sub_216B127BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a9;
  sub_216B132E0(&a16);
  _Unwind_Resume(a1);
}

void *sub_216B1282C(void *a1)
{
  unint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t *sub_216B12870(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *uint64_t result = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *result &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *a3;
  result[1] = *a3;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void ***sub_216B128CC(void ***a1)
{
  unint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_2168D87B4((uint64_t)v2, v2[1]);
    operator delete(v2);
  }
  return a1;
}

void sub_216B12914(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_216B1293C(uint64_t a1)
{
}

uint64_t sub_216B12944(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C759AF0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216B12988(void **a1)
{
  if (a1)
  {
    sub_2168D87B4((uint64_t)a1, a1[1]);
    operator delete(a1);
  }
}

void *sub_216B129CC(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6 = result;
  if (a6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_216778FC4();
  }
  if (a6 > 0x16)
  {
    uint64_t v10 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17) {
      uint64_t v10 = a6 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t result = operator new(v10 + 1);
    v6[1] = a6;
    v6[2] = v11 | 0x8000000000000000;
    *unint64_t v6 = result;
    unint64_t v6 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a6;
  }
  while (a3 != a5)
  {
    char v12 = *(unsigned char *)--a3;
    *(unsigned char *)unint64_t v6 = v12;
    unint64_t v6 = (void *)((char *)v6 + 1);
  }
  *(unsigned char *)unint64_t v6 = 0;
  return result;
}

_DWORD *sub_216B12A74(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void *sub_216B12AB4(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<boost::intrusive_ptr<const pxrInter"
            "nal__aapl__pxrReserved__::Sdf_PathNode>>>::operator->() [T = const std::vector<boost::intrusive_ptr<const px"
            "rInternal__aapl__pxrReserved__::Sdf_PathNode>>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216B12B30(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    _OWORD v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<boost::intrusive_ptr<"
            "const pxrInternal__aapl__pxrReserved__::Sdf_PathNode>>>::operator++() [T = const std::vector<boost::intrusiv"
            "e_ptr<const pxrInternal__aapl__pxrReserved__::Sdf_PathNode>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

void sub_216B12BB0(uint64_t a1, uint64_t a2, char **a3)
{
  for (uint64_t i = 0; i != 128; ++i)
  {
    uint64_t v7 = a2 + 88 * i;
    sub_21685036C((uint64_t)&v22, v7 + 80);
    uint64_t v11 = *(void *)(v7 + 32);
    uint64_t v10 = *(void *)(v7 + 40);
    uint64_t v12 = 0;
    if (v10)
    {
      unint64_t v13 = (__int16 *)(v11 + 4);
      while (1)
      {
        int v14 = *v13;
        v13 += 16;
        if (v14 != -1) {
          break;
        }
        if (v10 == ++v12) {
          goto LABEL_17;
        }
      }
    }
    uint64_t v20 = v11 + 32 * v12;
    uint64_t v21 = v11 + 32 * v10;
    if (v12 != v10)
    {
      do
      {
        sub_216B12EE8(&v20, v8, v9);
        uint64_t v15 = v20;
        if (*(void *)(v20 + 8) == a1)
        {
          sub_216B12EE8(&v20, v8, v9);
          v23[0] = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v20 + 24));
          sub_216B12F64(a3, v23);
          uint64_t v15 = v20;
        }
        uint64_t v16 = v21;
        if (v15 == v21)
        {
          v23[0] = (uint64_t)"tf/iterator.h";
          v23[1] = (uint64_t)"operator++";
          v23[2] = 250;
          v23[3] = (uint64_t)"TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl"
                            "__pxrReserved__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
                            ":_ParentAnd<pxrInternal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::Sd"
                            "f_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrInternal__aapl_"
                            "_pxrReserved__::TfHash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::pxr_tsl:"
                            ":robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__"
                            "aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl_"
                            "_pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, "
                            "Reverse = false]";
          char v24 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
          uint64_t v18 = v20;
          uint64_t v16 = v21;
        }
        else
        {
          uint64_t v17 = v15 + 32;
          do
          {
            uint64_t v18 = v17;
            if (*(unsigned char *)(v17 - 26)) {
              break;
            }
            v17 += 32;
          }
          while (*(__int16 *)(v18 + 4) == -1);
          uint64_t v20 = v18;
        }
      }
      while (v18 != v16);
    }
LABEL_17:
    unint64_t v19 = v22;
    if (v22)
    {
      __dmb(0xBu);
      *unint64_t v19 = 0;
    }
  }
}

void sub_216B12D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned char *a12)
{
  if (a12)
  {
    __dmb(0xBu);
    *a12 = 0;
  }
  _Unwind_Resume(a1);
}

void sub_216B12D4C(uint64_t a1, uint64_t a2, char **a3)
{
  for (uint64_t i = 0; i != 128; ++i)
  {
    uint64_t v7 = a2 + 88 * i;
    sub_21685036C((uint64_t)&v22, v7 + 80);
    uint64_t v11 = *(void *)(v7 + 32);
    uint64_t v10 = *(void *)(v7 + 40);
    uint64_t v12 = 0;
    if (v10)
    {
      unint64_t v13 = (__int16 *)(v11 + 4);
      while (1)
      {
        int v14 = *v13;
        v13 += 16;
        if (v14 != -1) {
          break;
        }
        if (v10 == ++v12) {
          goto LABEL_17;
        }
      }
    }
    uint64_t v20 = v11 + 32 * v12;
    uint64_t v21 = v11 + 32 * v10;
    if (v12 != v10)
    {
      do
      {
        sub_216B130F0(&v20, v8, v9);
        uint64_t v15 = v20;
        if (*(void *)(v20 + 8) == a1)
        {
          sub_216B130F0(&v20, v8, v9);
          v23[0] = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr((_DWORD *)(v20 + 24));
          sub_216B12F64(a3, v23);
          uint64_t v15 = v20;
        }
        uint64_t v16 = v21;
        if (v15 == v21)
        {
          v23[0] = (uint64_t)"tf/iterator.h";
          v23[1] = (uint64_t)"operator++";
          v23[2] = 250;
          v23[3] = (uint64_t)"TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl"
                            "__pxrReserved__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace):"
                            ":_ParentAnd<pxrInternal__aapl__pxrReserved__::TfToken>, pxrInternal__aapl__pxrReserved__::Sd"
                            "f_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrInternal__aapl_"
                            "_pxrReserved__::TfHash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::pxr_tsl:"
                            ":robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__"
                            "aapl__pxrReserved__::TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl_"
                            "_pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, "
                            "Reverse = false]";
          char v24 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
          uint64_t v18 = v20;
          uint64_t v16 = v21;
        }
        else
        {
          uint64_t v17 = v15 + 32;
          do
          {
            uint64_t v18 = v17;
            if (*(unsigned char *)(v17 - 26)) {
              break;
            }
            v17 += 32;
          }
          while (*(__int16 *)(v18 + 4) == -1);
          uint64_t v20 = v18;
        }
      }
      while (v18 != v16);
    }
LABEL_17:
    unint64_t v19 = v22;
    if (v22)
    {
      __dmb(0xBu);
      *unint64_t v19 = 0;
    }
  }
}

void sub_216B12ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned char *a12)
{
  if (a12)
  {
    __dmb(0xBu);
    *a12 = 0;
  }
  _Unwind_Resume(a1);
}

void *sub_216B12EE8(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::pxr_tsl::robi"
            "n_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__aapl__pxrReserved__::"
            "SdfPath>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, "
            "8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>>::operator->() [T = const pxrInternal__aapl__pxrReserv"
            "ed__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__aa"
            "pl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sd"
            "f_PathPropTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

char *sub_216B12F64(char **a1, uint64_t *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - (void)*a1;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v27 = v4;
    if (v13) {
      int v14 = (char *)sub_21677CB28(v4, v13);
    }
    else {
      int v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    uint64_t v26 = v16;
    uint64_t v17 = *a2;
    *(void *)uint64_t v15 = *a2;
    if (v17) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 1u, memory_order_relaxed);
    }
    uint64_t v9 = v15 + 8;
    v25.i64[1] = (uint64_t)(v15 + 8);
    unint64_t v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18 == *a1)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v15 - 1) = v20;
        v15 -= 8;
        *(void *)uint64_t v18 = 0;
      }
      while (v18 != v19);
      int64x2_t v21 = *(int64x2_t *)a1;
      uint64_t v9 = (char *)v25.i64[1];
      uint64_t v16 = v26;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v25 = v21;
    unint64_t v22 = a1[2];
    a1[2] = v16;
    uint64_t v26 = v22;
    uint64_t v24 = v21.i64[0];
    sub_216B130A0((uint64_t)&v24);
  }
  else
  {
    uint64_t v8 = *a2;
    *(void *)uint64_t v7 = *a2;
    if (v8) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 8;
  }
  a1[1] = v9;
  return v9 - 8;
}

uint64_t sub_216B130A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_21697C584((uint64_t *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_216B130F0(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::pxr_tsl::robi"
            "n_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__aapl__pxrReserved__::"
            "TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, "
            "8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>>::operator->() [T = const pxrInternal__aapl__pxrReserv"
            "ed__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__aa"
            "pl__pxrReserved__::TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sd"
            "f_PathPropTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216B1316C(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::pxr_tsl::robi"
            "n_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__aapl__pxrReserved__::"
            "TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag, 24, "
            "8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>>::operator->() [T = const pxrInternal__aapl__pxrReserv"
            "ed__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<pxrInternal__aa"
            "pl__pxrReserved__::TfToken>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sd"
            "f_PathPrimTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216B131E8(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::pxr_tsl::robi"
            "n_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<std::pair<pxrInternal__aapl__pxrRe"
            "served__::TfToken, pxrInternal__aapl__pxrReserved__::TfToken>>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<p"
            "xrInternal__aapl__pxrReserved__::Sdf_PathPrimTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>>"
            "::operator->() [T = const pxrInternal__aapl__pxrReserved__::pxr_tsl::robin_map<pxrInternal__aapl__pxrReserve"
            "d__::(anonymous namespace)::_ParentAnd<std::pair<pxrInternal__aapl__pxrReserved__::TfToken, pxrInternal__aap"
            "l__pxrReserved__::TfToken>>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sd"
            "f_PathPrimTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216B13264(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::pxr_tsl::robi"
            "n_map<pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<void>, pxrInternal__aapl__pxrReser"
            "ved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrInternal__aapl__pxrRes"
            "erved__::TfHash>>::operator->() [T = const pxrInternal__aapl__pxrReserved__::pxr_tsl::robin_map<pxrInternal_"
            "_aapl__pxrReserved__::(anonymous namespace)::_ParentAnd<void>, pxrInternal__aapl__pxrReserved__::Sdf_Pool<px"
            "rInternal__aapl__pxrReserved__::Sdf_PathPropTag, 24, 8>::Handle, pxrInternal__aapl__pxrReserved__::TfHash>, "
            "Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216B132E0(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    char v4 = (uint64_t *)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        char v4 = sub_21697C584(v4 - 1);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216B13364(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p[1];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((*__p & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(__p);
  }
}

void *sub_216B133A4(atomic_ullong *a1)
{
  uint64_t result = sub_216B13408();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result) {
      (*(void (**)(void *))(*result + 8))(result);
    }
    return (void *)atomic_load((unint64_t *)a1);
  }
  return result;
}

void *sub_216B13408()
{
  int v0 = operator new(0x18uLL);
  void *v0 = &unk_26C759B88;
  uint64_t v2 = (int64x2_t *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v1);
  v0[1] = v2;
  bzero(v2, 0x2C0uLL);
  v2[16] = vdupq_n_s64(0x10uLL);
  void *v0 = &unk_26C759B18;
  return v0;
}

void sub_216B13498(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216B134B0(void *a1)
{
  uint64_t v1 = (void *)sub_216B13580(a1);

  operator delete(v1);
}

uint64_t sub_216B134D8(void *a1)
{
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, 16 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216B13508(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 16 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216B13538(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4) {
    tbb::internal::throw_exception_v4(1);
  }
  return v4;
}

uint64_t sub_216B13578(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

uint64_t sub_216B13580(void *a1)
{
  *a1 = &unk_26C759B18;
  sub_216B135E0((BOOL)a1);
  sub_2168D9E50((uint64_t)a1);

  return sub_216B13658((uint64_t)a1, v2);
}

BOOL sub_216B135E0(BOOL result)
{
  uint64_t v1 = result;
  LODWORD(v7) = 0;
  *((void *)&v7 + 1) = 0;
  while (1)
  {
    uint64_t v2 = *(uint64_t **)(v1 + 8);
    uint64_t v3 = v2[16];
    __dmb(0xBu);
    uint64_t v4 = *v2;
    __dmb(0xBu);
    uint64_t v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      uint64_t v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4) {
        break;
      }
    }
    uint64_t result = sub_216B136A4(v1, &v7);
  }
  return result;
}

uint64_t sub_216B13658(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26C759B88;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

BOOL sub_216B136A4(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(atomic_ullong **)(a1 + 8);
  while (1)
  {
    unint64_t v5 = *v4;
    __dmb(0xBu);
    atomic_ullong v6 = v4[16];
    __dmb(0xBu);
    uint64_t v7 = v6 - v5;
    BOOL v8 = v7 > 0;
LABEL_3:
    if (v7 < 1) {
      return 0;
    }
    while (1)
    {
      unint64_t v9 = v5;
      atomic_compare_exchange_strong(v4, &v9, v5 + 1);
      if (v9 == v5) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v4, 0, memory_order_relaxed);
      if (add_explicit != v5)
      {
        atomic_ullong v11 = v4[16];
        __dmb(0xBu);
        uint64_t v7 = v11 - add_explicit;
        unint64_t v5 = add_explicit;
        goto LABEL_3;
      }
    }
    if (sub_216B13764(&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1)) {
      return v8;
    }
  }
}

BOOL sub_216B13764(uint64_t *a1, _OWORD *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      uint64_t v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      uint64_t v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v13 = *a1;
  __dmb(0xBu);
  uint64_t v14 = *(void *)(a4 + 8);
  uint64_t v15 = *(void *)(v14 + 256) - 1;
  uint64_t v16 = v15 & (a3 >> 3);
  if (v16 == v15) {
    uint64_t v17 = v13;
  }
  else {
    uint64_t v17 = 0;
  }
  v21[0] = v8 + 8;
  v21[1] = (uint64_t)a1;
  _OWORD v21[2] = v17;
  v21[3] = a4;
  uint64_t v18 = *(void *)(v13 + 8) & (1 << v16);
  if (v18) {
    *a2 = *(_OWORD *)(v13 + 16 * v16 + 16);
  }
  else {
    atomic_fetch_add((atomic_ullong *volatile)(v14 + 272), 0xFFFFFFFFFFFFFFFFLL);
  }
  BOOL v19 = v18 != 0;
  sub_2168DAB04(v21);
  return v19;
}

__n128 sub_216B1386C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *sub_216B13878(atomic_ullong *a1)
{
  __n128 result = sub_216B138DC();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result) {
      (*(void (**)(void *))(*result + 8))(result);
    }
    return (void *)atomic_load((unint64_t *)a1);
  }
  return result;
}

void *sub_216B138DC()
{
  int v0 = operator new(0x18uLL);
  void *v0 = &unk_26C759C38;
  uint64_t v2 = (int64x2_t *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v1);
  v0[1] = v2;
  bzero(v2, 0x2C0uLL);
  v2[16] = vdupq_n_s64(0x10uLL);
  void *v0 = &unk_26C759BC8;
  return v0;
}

void sub_216B1396C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216B13984(void *a1)
{
  uint64_t v1 = (void *)sub_216B13A54(a1);

  operator delete(v1);
}

uint64_t sub_216B139AC(void *a1)
{
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, 16 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216B139DC(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 16 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_216B13A0C(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4) {
    tbb::internal::throw_exception_v4(1);
  }
  return v4;
}

uint64_t sub_216B13A4C(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

uint64_t sub_216B13A54(void *a1)
{
  *a1 = &unk_26C759BC8;
  sub_216B135E0((BOOL)a1);
  sub_2168D9E50((uint64_t)a1);

  return sub_216B13AB4((uint64_t)a1, v2);
}

uint64_t sub_216B13AB4(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26C759C38;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

__n128 sub_216B13B00(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_216B13B0C(uint64_t a1, uint64_t a2, float a3, float a4)
{
  v15[0] = a2;
  sub_21686EB98((unint64_t *)a1, v15);
  uint64_t v7 = v15[0];
  if ((unint64_t)v15[0] >> 59)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  v15[1] = a1 + 8;
  char v16 = 0;
  if (v7)
  {
    unint64_t v8 = (int *)operator new(32 * v7);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[8 * v7];
    *(void *)(a1 + 24) = v9;
    uint64_t v10 = v8;
    do
    {
      *uint64_t v10 = 0;
      *((_WORD *)v10 + 2) = -1;
      *((unsigned char *)v10 + 6) = 0;
      v10 += 8;
    }
    while (v10 != v9);
    *(void *)(a1 + 16) = v9;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B90FA8, memory_order_acquire))
  {
    unint64_t v8 = &dword_267B90F88;
  }
  else
  {
    if (__cxa_guard_acquire(&qword_267B90FA8))
    {
      dword_267B90F88 = 0;
      word_267B90F8C = -1;
      byte_267B90F8E = 1;
      __cxa_atexit((void (*)(void *))sub_216B13D54, &dword_267B90F88, &dword_216758000);
      __cxa_guard_release(&qword_267B90FA8);
    }
    unint64_t v8 = &dword_267B90F88;
  }
  unint64_t v11 = v15[0];
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v11) {
    *(unsigned char *)(*(void *)(a1 + 16) - 26) = 1;
  }
  float v12 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v12;
  *(void *)(a1 + 56) = (unint64_t)(float)(v12 * (float)v11);
  return a1;
}

void sub_216B13CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void sub_216B13CE8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (__int16 *)**a1;
  if (v2)
  {
    uint64_t v3 = (__int16 *)v1[1];
    uint64_t v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 14) != -1)
        {
          uint64_t v5 = *((void *)v3 - 2);
          if ((v5 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *(v3 - 14) = -1;
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

uint64_t sub_216B13D54(uint64_t result)
{
  if (*(__int16 *)(result + 4) != -1)
  {
    uint64_t v1 = *(void *)(result + 16);
    if ((v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(_WORD *)(result + 4) = -1;
  }
  return result;
}

uint64_t *sub_216B13D84(uint64_t *result, uint64_t a2)
{
  if (*(__int16 *)(a2 + 4) != -1)
  {
    uint64_t v2 = *(void *)(a2 + 16);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(_WORD *)(a2 + 4) = -1;
  }
  --result[6];
  uint64_t v3 = result[4];
  uint64_t v4 = (a2 - v3) >> 5;
  uint64_t v5 = *result;
  uint64_t v6 = (v4 + 1) & *result;
  int v7 = *(__int16 *)(v3 + 32 * v6 + 4);
  if (v7 < 1) {
    goto LABEL_12;
  }
  do
  {
    unint64_t v8 = (int *)(v3 + 32 * v6);
    uint64_t v9 = v3 + 32 * v4;
    int v10 = *v8;
    uint64_t v11 = *((void *)v8 + 2);
    *(void *)(v9 + 8) = *((void *)v8 + 1);
    *(void *)(v9 + 16) = v11;
    *((void *)v8 + 2) = 0;
    *(_DWORD *)(v9 + 24) = v8[6];
    *(_DWORD *)uint64_t v9 = v10;
    *(_WORD *)(v9 + 4) = v7 - 1;
    uint64_t v3 = result[4];
    uint64_t v12 = v3 + 32 * v6;
    int v14 = *(__int16 *)(v12 + 4);
    uint64_t v13 = (_WORD *)(v12 + 4);
    if (v14 != -1)
    {
      uint64_t v15 = *(void *)(v3 + 32 * v6 + 16);
      if ((v15 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        uint64_t v5 = *result;
        uint64_t v3 = result[4];
      }
      _WORD *v13 = -1;
    }
    uint64_t v4 = v6;
    uint64_t v6 = v5 & (v6 + 1);
    int v7 = *(__int16 *)(v3 + 32 * v6 + 4);
  }
  while (v7 > 0);
  if (*(__int16 *)(a2 + 4) == -1)
  {
LABEL_12:
    char v16 = (__int16 *)(a2 + 36);
    do
    {
      if (*((unsigned char *)v16 - 30)) {
        break;
      }
      int v17 = *v16;
      v16 += 16;
    }
    while (v17 == -1);
  }
  *((unsigned char *)result + 73) = 1;
  return result;
}

__n128 sub_216B13E9C(uint64_t *a1, uint64_t a2)
{
  sub_216B13B0C((uint64_t)&v22, a2, *((float *)a1 + 16), *((float *)a1 + 17));
  uint64_t v3 = v25;
  uint64_t v4 = (unsigned int *)a1[1];
  uint64_t v5 = (unsigned int *)a1[2];
  if (v4 == v5)
  {
    int64x2_t v15 = vdupq_n_s64((unint64_t)v4);
    goto LABEL_16;
  }
  unint64_t v6 = (unint64_t)(v25 - 1) >> 32;
  do
  {
    if (*((__int16 *)v4 + 2) == -1) {
      goto LABEL_13;
    }
    if (v6) {
      unint64_t v7 = bswap64(0x9E3779B97F4A7C55* ((*((void *)v4 + 2) & 0xFFFFFFFFFFFFFFF8)+ (((*((void *)v4 + 2) & 0xFFFFFFFFFFFFFFF8)+ *((void *)v4 + 1)+ ((*((void *)v4 + 2) & 0xFFFFFFFFFFFFFFF8) + *((void *)v4 + 1))* ((*((void *)v4 + 2) & 0xFFFFFFFFFFFFFFF8) + *((void *)v4 + 1))) >> 1)));
    }
    else {
      unint64_t v7 = *v4;
    }
    __int16 v8 = 0;
    uint64_t v9 = v22;
    uint64_t v10 = v22 & v7;
    __int16 v31 = 0;
    LODWORD(v30) = v7;
    while (1)
    {
      uint64_t v11 = *((void *)&v24 + 1) + 32 * v10;
      int v12 = *(__int16 *)(v11 + 4);
      if (v12 >= v8) {
        goto LABEL_11;
      }
      if (v12 == -1) {
        break;
      }
      sub_216B1407C((int *)v11, &v31, (int *)&v30, (int *)v4 + 2);
      __int16 v8 = v31;
      uint64_t v9 = v22;
LABEL_11:
      __int16 v31 = ++v8;
      uint64_t v10 = v9 & (v10 + 1);
    }
    int v13 = (int)v30;
    uint64_t v14 = *((void *)&v24 + 1) + 32 * v10;
    *(void *)(v14 + 8) = *((void *)v4 + 1);
    *(void *)(v14 + 16) = *((void *)v4 + 2);
    *((void *)v4 + 2) = 0;
    *(_DWORD *)(v14 + 24) = v4[6];
    *(_DWORD *)uint64_t v11 = v13;
    *(_WORD *)(v11 + 4) = v8;
LABEL_13:
    v4 += 8;
  }
  while (v4 != v5);
  int64x2_t v15 = *(int64x2_t *)(a1 + 1);
  uint64_t v3 = v25;
LABEL_16:
  uint64_t v16 = v22;
  uint64_t v22 = *a1;
  *a1 = v16;
  int64x2_t v17 = v23;
  int64x2_t v23 = v15;
  *(int64x2_t *)(a1 + 1) = v17;
  long long v18 = v24;
  long long v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a1 + 3) = v18;
  long long v19 = *(_OWORD *)(a1 + 5);
  a1[5] = v3;
  long long v25 = v19;
  uint64_t v20 = v26;
  uint64_t v26 = a1[7];
  a1[7] = v20;
  *(void *)&long long v18 = v27;
  uint64_t v27 = a1[8];
  a1[8] = v18;
  LOBYTE(v20) = v28;
  char v28 = *((unsigned char *)a1 + 72);
  *((unsigned char *)a1 + 72) = v20;
  LOBYTE(v20) = v29;
  char v29 = *((unsigned char *)a1 + 73);
  *((unsigned char *)a1 + 73) = v20;
  int v30 = &v23;
  sub_216B13CE8((void ***)&v30);
  return result;
}

int *sub_216B1407C(int *result, _WORD *a2, int *a3, int *a4)
{
  uint64_t v5 = *(void *)a4;
  uint64_t v4 = *((void *)a4 + 1);
  *((void *)a4 + 1) = 0;
  *(void *)a4 = *((void *)result + 1);
  if (result + 2 == a4)
  {
    uint64_t v6 = *((void *)result + 2);
    *(void *)a4 = v5;
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    *((void *)a4 + 1) = *((void *)result + 2);
    *((void *)result + 1) = v5;
  }
  *((void *)result + 2) = v4;
  int v7 = a4[4];
  a4[4] = result[6];
  result[6] = v7;
  LOWORD(v7) = *a2;
  *a2 = *((_WORD *)result + 2);
  *((_WORD *)result + 2) = v7;
  int v8 = *result;
  *__n128 result = *a3;
  *a3 = v8;
  return result;
}

uint64_t sub_216B140FC(uint64_t result, uint64_t a2, uint64_t *a3)
{
  *(void *)__n128 result = a2;
  if (a2)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed);
    __int16 v3 = *(_WORD *)(a2 + 12) + 1;
    char v4 = *(unsigned char *)(a2 + 15);
  }
  else
  {
    char v4 = 0;
    __int16 v3 = 1;
  }
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = v3;
  *(unsigned char *)(result + 14) = 1;
  *(unsigned char *)(result + 15) = v4;
  uint64_t v5 = *a3;
  *(void *)(result + 16) = *a3;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_216B14168(uint64_t a1, uint64_t a2, float a3, float a4)
{
  v15[0] = a2;
  sub_21686EB98((unint64_t *)a1, v15);
  uint64_t v7 = v15[0];
  if ((unint64_t)v15[0] >> 59)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  v15[1] = a1 + 8;
  char v16 = 0;
  if (v7)
  {
    int v8 = (int *)operator new(32 * v7);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[8 * v7];
    *(void *)(a1 + 24) = v9;
    uint64_t v10 = v8;
    do
    {
      *uint64_t v10 = 0;
      *((_WORD *)v10 + 2) = -1;
      *((unsigned char *)v10 + 6) = 0;
      v10 += 8;
    }
    while (v10 != v9);
    *(void *)(a1 + 16) = v9;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B90FD0, memory_order_acquire))
  {
    int v8 = &dword_267B90FB0;
  }
  else
  {
    if (__cxa_guard_acquire(&qword_267B90FD0))
    {
      dword_267B90FB0 = 0;
      word_267B90FB4 = -1;
      byte_267B90FB6 = 1;
      __cxa_atexit((void (*)(void *))sub_216B14344, &dword_267B90FB0, &dword_216758000);
      __cxa_guard_release(&qword_267B90FD0);
    }
    int v8 = &dword_267B90FB0;
  }
  unint64_t v11 = v15[0];
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v11) {
    *(unsigned char *)(*(void *)(a1 + 16) - 26) = 1;
  }
  float v12 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v12;
  *(void *)(a1 + 56) = (unint64_t)(float)(v12 * (float)v11);
  return a1;
}

void sub_216B14320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_216B14344(uint64_t result)
{
  if (*(__int16 *)(result + 4) != -1)
  {
    uint64_t v1 = *(void *)(result + 16);
    if ((v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(_WORD *)(result + 4) = -1;
  }
  return result;
}

uint64_t sub_216B14374(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)a2[1];
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  int v5 = *((_DWORD *)a2 + 4);
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* ((v4 & 0xFFFFFFFFFFFFFFF8)+ (((v4 & 0xFFFFFFFFFFFFFFF8) + v3 + ((v4 & 0xFFFFFFFFFFFFFFF8) + v3) * ((v4 & 0xFFFFFFFFFFFFFFF8) + v3)) >> 1)));
  uint64_t v7 = *a1;
  uint64_t v8 = a1[4];
  uint64_t v9 = v6 & *a1;
  if (*(__int16 *)(v8 + 32 * v9 + 4) < 0)
  {
    LOWORD(v10) = 0;
LABEL_11:
    if (*((unsigned char *)a1 + 72) || (unint64_t v14 = a1[6], v14 >= a1[7]))
    {
      uint64_t v22 = sub_21686E8DC(a1);
      sub_216B14690(a1, v22);
      *((unsigned char *)a1 + 72) = 0;
    }
    else
    {
      if (!*((unsigned char *)a1 + 73)) {
        goto LABEL_28;
      }
      *((unsigned char *)a1 + 73) = 0;
      float v15 = *((float *)a1 + 16);
      if (v15 == 0.0) {
        goto LABEL_28;
      }
      unint64_t v16 = a1[5];
      float v17 = 0.0;
      if (v16) {
        float v17 = (float)v14 / (float)v16;
      }
      if (v17 >= v15) {
        goto LABEL_28;
      }
      float v18 = *((float *)a1 + 17);
      unint64_t v19 = vcvtps_u32_f32((float)(v14 + 1) / v18);
      unint64_t v20 = vcvtps_u32_f32((float)v14 / v18);
      if (v20 <= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      sub_216B14690(a1, v21);
    }
    uint64_t v7 = *a1;
    uint64_t v8 = a1[4];
    uint64_t v9 = *a1 & v6;
    if (*(__int16 *)(v8 + 32 * v9 + 4) < 0)
    {
      LOWORD(v10) = 0;
    }
    else
    {
      LOWORD(v10) = 0;
      do
      {
        int v10 = (__int16)(v10 + 1);
        uint64_t v9 = (v9 + 1) & v7;
      }
      while (v10 <= *(__int16 *)(v8 + 32 * v9 + 4));
    }
LABEL_28:
    int64x2_t v23 = (int *)(v8 + 32 * v9);
    long long v25 = v23 + 1;
    unsigned __int16 v24 = *((_WORD *)v23 + 2);
    uint64_t v26 = (uint64_t *)(v23 + 2);
    uint64_t v27 = (uint64_t *)(v23 + 4);
    if (v24 == 0xFFFF)
    {
      *uint64_t v26 = v3;
      *uint64_t v27 = v4;
      v23[6] = v5;
      int *v23 = v6;
      *long long v25 = v10;
    }
    else
    {
      uint64_t v28 = *v26;
      uint64_t v29 = *v27;
      *uint64_t v26 = v3;
      *uint64_t v27 = v4;
      int v30 = v23[6];
      v23[6] = v5;
      *long long v25 = v10;
      int v31 = *v23;
      int *v23 = v6;
      uint64_t v32 = (v9 + 1) & v7;
      __int16 v33 = v24 + 1;
      uint64_t v34 = a1[4];
      unint64_t v35 = (int *)(v34 + 32 * v32);
      unint64_t v36 = v35 + 1;
      for (unsigned __int16 i = *((_WORD *)v35 + 2); i != 0xFFFF; unsigned __int16 i = *((_WORD *)v35 + 2))
      {
        if (v33 > (__int16)i)
        {
          if (v33 >= 4096) {
            *((unsigned char *)a1 + 72) = 1;
          }
          uint64_t v39 = *((void *)v35 + 1);
          uint64_t v38 = *((void *)v35 + 2);
          *((void *)v35 + 1) = v28;
          *((void *)v35 + 2) = v29;
          int v40 = v35[6];
          v35[6] = v30;
          __int16 v41 = *((_WORD *)v35 + 2);
          *((_WORD *)v35 + 2) = v33;
          int v42 = *v35;
          int *v35 = v31;
          int v30 = v40;
          uint64_t v29 = v38;
          uint64_t v28 = v39;
          int v31 = v42;
          __int16 v33 = v41;
          uint64_t v34 = a1[4];
        }
        uint64_t v32 = v7 & (v32 + 1);
        ++v33;
        unint64_t v35 = (int *)(v34 + 32 * v32);
        unint64_t v36 = v35 + 1;
      }
      uint64_t v43 = v34 + 32 * v32;
      *(void *)(v43 + 8) = v28;
      *(void *)(v43 + 16) = v29;
      *(_DWORD *)(v43 + 24) = v30;
      int *v35 = v31;
      *unint64_t v36 = v33;
    }
    uint64_t v4 = 0;
    ++a1[6];
    uint64_t result = a1[4] + 32 * v9;
    goto LABEL_38;
  }
  LOWORD(v10) = 0;
  while (1)
  {
    uint64_t v11 = v8 + 32 * v9;
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t v12 = v11 + 8;
    if (v13 == v3 && (*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8) == (v4 & 0xFFFFFFFFFFFFFFF8)) {
      break;
    }
    int v10 = (__int16)(v10 + 1);
    uint64_t v9 = (v9 + 1) & v7;
    if (v10 > *(__int16 *)(v8 + 32 * v9 + 4)) {
      goto LABEL_11;
    }
  }
  uint64_t result = v8 + 32 * v9;
LABEL_38:
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

__n128 sub_216B14690(uint64_t *a1, uint64_t a2)
{
  sub_216B14168((uint64_t)&v22, a2, *((float *)a1 + 16), *((float *)a1 + 17));
  uint64_t v3 = v25;
  uint64_t v4 = (unsigned int *)a1[1];
  int v5 = (unsigned int *)a1[2];
  if (v4 == v5)
  {
    int64x2_t v15 = vdupq_n_s64((unint64_t)v4);
    goto LABEL_16;
  }
  unint64_t v6 = (unint64_t)(v25 - 1) >> 32;
  do
  {
    if (*((__int16 *)v4 + 2) == -1) {
      goto LABEL_13;
    }
    if (v6) {
      unint64_t v7 = bswap64(0x9E3779B97F4A7C55* ((*((void *)v4 + 2) & 0xFFFFFFFFFFFFFFF8)+ (((*((void *)v4 + 2) & 0xFFFFFFFFFFFFFFF8)+ *((void *)v4 + 1)+ ((*((void *)v4 + 2) & 0xFFFFFFFFFFFFFFF8) + *((void *)v4 + 1))* ((*((void *)v4 + 2) & 0xFFFFFFFFFFFFFFF8) + *((void *)v4 + 1))) >> 1)));
    }
    else {
      unint64_t v7 = *v4;
    }
    __int16 v8 = 0;
    uint64_t v9 = v22;
    uint64_t v10 = v22 & v7;
    __int16 v31 = 0;
    LODWORD(v30) = v7;
    while (1)
    {
      uint64_t v11 = *((void *)&v24 + 1) + 32 * v10;
      int v12 = *(__int16 *)(v11 + 4);
      if (v12 >= v8) {
        goto LABEL_11;
      }
      if (v12 == -1) {
        break;
      }
      sub_216B1407C((int *)v11, &v31, (int *)&v30, (int *)v4 + 2);
      __int16 v8 = v31;
      uint64_t v9 = v22;
LABEL_11:
      __int16 v31 = ++v8;
      uint64_t v10 = v9 & (v10 + 1);
    }
    int v13 = (int)v30;
    uint64_t v14 = *((void *)&v24 + 1) + 32 * v10;
    *(void *)(v14 + 8) = *((void *)v4 + 1);
    *(void *)(v14 + 16) = *((void *)v4 + 2);
    *((void *)v4 + 2) = 0;
    *(_DWORD *)(v14 + 24) = v4[6];
    *(_DWORD *)uint64_t v11 = v13;
    *(_WORD *)(v11 + 4) = v8;
LABEL_13:
    v4 += 8;
  }
  while (v4 != v5);
  int64x2_t v15 = *(int64x2_t *)(a1 + 1);
  uint64_t v3 = v25;
LABEL_16:
  uint64_t v16 = v22;
  uint64_t v22 = *a1;
  *a1 = v16;
  int64x2_t v17 = v23;
  int64x2_t v23 = v15;
  *(int64x2_t *)(a1 + 1) = v17;
  long long v18 = v24;
  long long v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a1 + 3) = v18;
  long long v19 = *(_OWORD *)(a1 + 5);
  a1[5] = v3;
  long long v25 = v19;
  uint64_t v20 = v26;
  uint64_t v26 = a1[7];
  a1[7] = v20;
  *(void *)&long long v18 = v27;
  uint64_t v27 = a1[8];
  a1[8] = v18;
  LOBYTE(v20) = v28;
  char v28 = *((unsigned char *)a1 + 72);
  *((unsigned char *)a1 + 72) = v20;
  LOBYTE(v20) = v29;
  char v29 = *((unsigned char *)a1 + 73);
  *((unsigned char *)a1 + 73) = v20;
  int v30 = &v23;
  sub_216B13CE8((void ***)&v30);
  return result;
}

uint64_t sub_216B14870(uint64_t a1, uint64_t a2, float a3, float a4)
{
  v15[0] = a2;
  sub_21686EB98((unint64_t *)a1, v15);
  uint64_t v7 = v15[0];
  if (v15[0] >= 0x666666666666667uLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  v15[1] = a1 + 8;
  char v16 = 0;
  if (v7)
  {
    __int16 v8 = (int *)operator new(40 * v7);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[10 * v7];
    *(void *)(a1 + 24) = v9;
    uint64_t v10 = v8;
    do
    {
      *uint64_t v10 = 0;
      *((_WORD *)v10 + 2) = -1;
      *((unsigned char *)v10 + 6) = 0;
      v10 += 10;
    }
    while (v10 != v9);
    *(void *)(a1 + 16) = v9;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B91000, memory_order_acquire))
  {
    __int16 v8 = &dword_267B90FD8;
  }
  else
  {
    if (__cxa_guard_acquire(&qword_267B91000))
    {
      dword_267B90FD8 = 0;
      word_267B90FDC = -1;
      byte_267B90FDE = 1;
      __cxa_atexit((void (*)(void *))sub_216B14AE0, &dword_267B90FD8, &dword_216758000);
      __cxa_guard_release(&qword_267B91000);
    }
    __int16 v8 = &dword_267B90FD8;
  }
  unint64_t v11 = v15[0];
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v11) {
    *(unsigned char *)(*(void *)(a1 + 16) - 34) = 1;
  }
  float v12 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v12;
  *(void *)(a1 + 56) = (unint64_t)(float)(v12 * (float)v11);
  return a1;
}

void sub_216B14A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void sub_216B14A60(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (__int16 *)**a1;
  if (v2)
  {
    uint64_t v3 = (__int16 *)v1[1];
    uint64_t v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 18) != -1)
        {
          uint64_t v5 = *((void *)v3 - 2);
          if ((v5 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v6 = *((void *)v3 - 3);
          if ((v6 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *(v3 - 18) = -1;
        }
        v3 -= 20;
      }
      while (v3 != v2);
      uint64_t v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

uint64_t sub_216B14AE0(uint64_t result)
{
  if (*(__int16 *)(result + 4) != -1)
  {
    uint64_t v1 = *(void *)(result + 24);
    if ((v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v2 = *(void *)(result + 16);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(_WORD *)(result + 4) = -1;
  }
  return result;
}

uint64_t *sub_216B14B28(uint64_t *result, uint64_t a2)
{
  if (*(__int16 *)(a2 + 4) != -1)
  {
    uint64_t v2 = *(void *)(a2 + 24);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v3 = *(void *)(a2 + 16);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(_WORD *)(a2 + 4) = -1;
  }
  --result[6];
  uint64_t v4 = result[4];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v4) >> 3);
  uint64_t v6 = *result;
  uint64_t v7 = (v5 + 1) & *result;
  int v8 = *(__int16 *)(v4 + 40 * v7 + 4);
  if (v8 < 1) {
    goto LABEL_16;
  }
  do
  {
    uint64_t v9 = (int *)(v4 + 40 * v7);
    uint64_t v10 = v4 + 40 * v5;
    int v11 = *v9;
    *(void *)(v10 + 8) = *((void *)v9 + 1);
    *(_OWORD *)(v10 + 16) = *((_OWORD *)v9 + 1);
    *((void *)v9 + 2) = 0;
    *((void *)v9 + 3) = 0;
    *(_DWORD *)(v10 + 32) = v9[8];
    *(_DWORD *)uint64_t v10 = v11;
    *(_WORD *)(v10 + 4) = v8 - 1;
    uint64_t v4 = result[4];
    uint64_t v12 = v4 + 40 * v7;
    int v14 = *(__int16 *)(v12 + 4);
    int v13 = (_WORD *)(v12 + 4);
    if (v14 != -1)
    {
      uint64_t v15 = v4 + 40 * v7;
      uint64_t v16 = *(void *)(v15 + 24);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v17 = *(void *)(v15 + 16);
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _WORD *v13 = -1;
      uint64_t v6 = *result;
      uint64_t v4 = result[4];
    }
    unint64_t v5 = v7;
    uint64_t v7 = v6 & (v7 + 1);
    int v8 = *(__int16 *)(v4 + 40 * v7 + 4);
  }
  while (v8 > 0);
  if (*(__int16 *)(a2 + 4) == -1)
  {
LABEL_16:
    long long v18 = (__int16 *)(a2 + 44);
    do
    {
      if (*((unsigned char *)v18 - 38)) {
        break;
      }
      int v19 = *v18;
      v18 += 20;
    }
    while (v19 == -1);
  }
  *((unsigned char *)result + 73) = 1;
  return result;
}

uint64_t sub_216B14C90(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (unint64_t)(*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return sub_216B14CC4(a1, a3);
}

uint64_t sub_216B14CC4(uint64_t result, void *a2)
{
  unint64_t v2 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned char *)(result + 8)) {
    v2 += (*(void *)result + v2 + (*(void *)result + v2) * (*(void *)result + v2)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)__n128 result = v2;
  *(void *)__n128 result = (a2[1] & 0xFFFFFFFFFFFFFFF8)
                    + (((a2[1] & 0xFFFFFFFFFFFFFFF8)
                      + v2
                      + ((a2[1] & 0xFFFFFFFFFFFFFFF8) + v2) * ((a2[1] & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
  return result;
}

__n128 sub_216B14D10(uint64_t *a1, uint64_t a2)
{
  sub_216B14870((uint64_t)&v22, a2, *((float *)a1 + 16), *((float *)a1 + 17));
  uint64_t v3 = v25;
  uint64_t v4 = (uint64_t *)a1[1];
  unint64_t v5 = (unsigned int *)a1[2];
  if (v4 == (uint64_t *)v5)
  {
    int64x2_t v15 = vdupq_n_s64((unint64_t)v4);
    goto LABEL_16;
  }
  unint64_t v6 = (unint64_t)(v25 - 1) >> 32;
  do
  {
    if (*((__int16 *)v4 + 2) == -1) {
      goto LABEL_13;
    }
    if (v6)
    {
      int v30 = 0;
      char v31 = 0;
      sub_216B14C90((uint64_t)&v30, v4 + 1, v4 + 2);
      unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * (void)v30);
    }
    else
    {
      unint64_t v7 = *(unsigned int *)v4;
    }
    __int16 v8 = 0;
    uint64_t v9 = v22;
    uint64_t v10 = v22 & v7;
    __int16 v32 = 0;
    LODWORD(v30) = v7;
    while (1)
    {
      uint64_t v11 = *((void *)&v24 + 1) + 40 * v10;
      int v12 = *(__int16 *)(v11 + 4);
      if (v12 >= v8) {
        goto LABEL_11;
      }
      if (v12 == -1) {
        break;
      }
      sub_216B14F2C((int *)v11, &v32, (int *)&v30, v4 + 1);
      __int16 v8 = v32;
      uint64_t v9 = v22;
LABEL_11:
      __int16 v32 = ++v8;
      uint64_t v10 = v9 & (v10 + 1);
    }
    int v13 = (int)v30;
    uint64_t v14 = *((void *)&v24 + 1) + 40 * v10;
    *(void *)(v14 + 8) = v4[1];
    *(void *)(v14 + 16) = v4[2];
    _OWORD v4[2] = 0;
    *(void *)(v14 + 24) = v4[3];
    void v4[3] = 0;
    *(_DWORD *)(v14 + 32) = *((_DWORD *)v4 + 8);
    *(_DWORD *)uint64_t v11 = v13;
    *(_WORD *)(v11 + 4) = v8;
LABEL_13:
    v4 += 5;
  }
  while (v4 != (uint64_t *)v5);
  int64x2_t v15 = *(int64x2_t *)(a1 + 1);
  uint64_t v3 = v25;
LABEL_16:
  uint64_t v16 = v22;
  uint64_t v22 = *a1;
  *a1 = v16;
  int64x2_t v17 = v23;
  int64x2_t v23 = v15;
  *(int64x2_t *)(a1 + 1) = v17;
  long long v18 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a1 + 3) = v24;
  long long v19 = *(_OWORD *)(a1 + 5);
  a1[5] = v3;
  long long v24 = v18;
  long long v25 = v19;
  uint64_t v20 = v26;
  uint64_t v26 = a1[7];
  a1[7] = v20;
  v17.i64[0] = v27;
  uint64_t v27 = a1[8];
  a1[8] = v17.i64[0];
  LOBYTE(v20) = v28;
  char v28 = *((unsigned char *)a1 + 72);
  *((unsigned char *)a1 + 72) = v20;
  LOBYTE(v20) = v29;
  char v29 = *((unsigned char *)a1 + 73);
  *((unsigned char *)a1 + 73) = v20;
  int v30 = &v23;
  sub_216B14A60((void ***)&v30);
  return result;
}

void sub_216B14F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 88) = &a11;
  sub_216B14A60((void ***)(v11 - 88));
  _Unwind_Resume(a1);
}

void *sub_216B14F2C(int *a1, _WORD *a2, int *a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  long long v12 = *(_OWORD *)(a4 + 1);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = *((void *)a1 + 1);
  sub_216B15020(a4 + 1, (void *)a1 + 2);
  *((void *)a1 + 1) = v8;
  __n128 result = sub_216B15020((void *)a1 + 2, &v12);
  if ((BYTE8(v12) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v12 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v10 = *((_DWORD *)a4 + 6);
  *((_DWORD *)a4 + 6) = a1[8];
  a1[8] = v10;
  LOWORD(v10) = *a2;
  *a2 = *((_WORD *)a1 + 2);
  *((_WORD *)a1 + 2) = v10;
  int v11 = *a1;
  *a1 = *a3;
  *a3 = v11;
  return result;
}

void *sub_216B15020(void *result, void *a2)
{
  if (a2 != result)
  {
    if ((*result & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *__n128 result = *a2;
    *a2 = 0;
    uint64_t v2 = result[1];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    result[1] = a2[1];
    a2[1] = 0;
  }
  return result;
}

uint64_t *sub_216B15074(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *__n128 result = *a2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *result &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = a2[1];
  result[1] = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_216B150D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = a2;
  if (a2)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed);
    __int16 v5 = *(_WORD *)(a2 + 12) + 1;
    char v6 = *(unsigned char *)(a2 + 15) | 2;
  }
  else
  {
    __int16 v5 = 1;
    char v6 = 2;
  }
  *(_DWORD *)(a1 + 8) = 1;
  *(_WORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 14) = 2;
  *(unsigned char *)(a1 + 15) = v6;
  unint64_t v7 = (uint64_t *)operator new(0x10uLL);
  *(void *)(a1 + 16) = sub_216B15074(v7, a3);
  return a1;
}

void sub_216B15150(_Unwind_Exception *a1)
{
  sub_21697C53C(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_216B15164()
{
  int v0 = (char *)operator new(0x2C00uLL);
  uint64_t v1 = 0;
  uint64_t v2 = 128;
  do
  {
    *(unsigned char *)(sub_216B15258((uint64_t)&v0[v1], 0, 0.0, 0.5) + 80) = 0;
    v1 += 88;
    --v2;
  }
  while (v2);
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(&qword_267B8EF40, (unint64_t *)&v3, (unint64_t)v0);
  if (v3)
  {
    for (uint64_t i = 0; i != -11264; i -= 88)
    {
      char v6 = (void **)&v0[i + 11184];
      sub_216B15434(&v6);
    }
    operator delete(v0);
    return atomic_load((unint64_t *)&qword_267B8EF40);
  }
  return (unint64_t)v0;
}

void sub_216B15224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_216B15434((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_216B15258(uint64_t a1, uint64_t a2, float a3, float a4)
{
  v15[0] = a2;
  sub_21686EB98((unint64_t *)a1, v15);
  uint64_t v7 = v15[0];
  if ((unint64_t)v15[0] >> 59)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  v15[1] = a1 + 8;
  char v16 = 0;
  if (v7)
  {
    uint64_t v8 = (int *)operator new(32 * v7);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[8 * v7];
    *(void *)(a1 + 24) = v9;
    int v10 = v8;
    do
    {
      *int v10 = 0;
      *((_WORD *)v10 + 2) = -1;
      *((unsigned char *)v10 + 6) = 0;
      v10 += 8;
    }
    while (v10 != v9);
    *(void *)(a1 + 16) = v9;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B91028, memory_order_acquire))
  {
    uint64_t v8 = &dword_267B91008;
  }
  else
  {
    if (__cxa_guard_acquire(&qword_267B91028))
    {
      dword_267B91008 = 0;
      word_267B9100C = -1;
      byte_267B9100E = 1;
      __cxa_atexit((void (*)(void *))sub_216B154E0, &dword_267B91008, &dword_216758000);
      __cxa_guard_release(&qword_267B91028);
    }
    uint64_t v8 = &dword_267B91008;
  }
  unint64_t v11 = v15[0];
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v11) {
    *(unsigned char *)(*(void *)(a1 + 16) - 26) = 1;
  }
  float v12 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v12;
  *(void *)(a1 + 56) = (unint64_t)(float)(v12 * (float)v11);
  return a1;
}

void sub_216B15410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void sub_216B15434(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    __int16 v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)v4 - 32;
      do
      {
        if (*(__int16 *)(v6 + 4) != -1)
        {
          sub_216B15568(v6);
          *(_WORD *)(v6 + 4) = -1;
        }
        BOOL v7 = v6 == (void)v2;
        v6 -= 32;
      }
      while (!v7);
      __int16 v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216B154E0(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    sub_216B15568(a1);
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

_DWORD *sub_216B15520(_DWORD *result)
{
  if (*((__int16 *)result + 2) != -1)
  {
    uint64_t v1 = result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(result + 5);
    __n128 result = sub_21697C414(v1 + 4);
    *((_WORD *)v1 + 2) = -1;
  }
  return result;
}

_DWORD *sub_216B15568(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));

  return sub_21697C414((_DWORD *)(a1 + 16));
}

uint64_t sub_216B155A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)(a2 + 8);
  uint64_t v31 = *(void *)a2;
  sub_216981010(&v32, v4);
  sub_21698105C((_DWORD *)&v32 + 1, v4 + 1);
  int v33 = *(_DWORD *)(a2 + 16);
  uint64_t v34 = 0;
  char v35 = 0;
  sub_216B15920((uint64_t)&v34, &v31, (unsigned int *)&v32);
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * v34);
  uint64_t v6 = a1[4];
  uint64_t v7 = v5 & *a1;
  if (*(__int16 *)(v6 + 32 * v7 + 4) < 0)
  {
    LOWORD(v8) = 0;
LABEL_10:
    if (*((unsigned char *)a1 + 72) || (unint64_t v11 = a1[6], v11 >= a1[7]))
    {
      uint64_t v19 = sub_21686E8DC(a1);
      sub_216B15954(a1, v19);
      *((unsigned char *)a1 + 72) = 0;
    }
    else
    {
      if (!*((unsigned char *)a1 + 73)) {
        goto LABEL_28;
      }
      *((unsigned char *)a1 + 73) = 0;
      float v12 = *((float *)a1 + 16);
      if (v12 == 0.0) {
        goto LABEL_28;
      }
      unint64_t v13 = a1[5];
      float v14 = 0.0;
      if (v13) {
        float v14 = (float)v11 / (float)v13;
      }
      if (v14 >= v12) {
        goto LABEL_28;
      }
      float v15 = *((float *)a1 + 17);
      unint64_t v16 = vcvtps_u32_f32((float)(v11 + 1) / v15);
      unint64_t v17 = vcvtps_u32_f32((float)v11 / v15);
      if (v17 <= v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = v17;
      }
      sub_216B15954(a1, v18);
    }
    uint64_t v6 = a1[4];
    uint64_t v7 = *a1 & v5;
    if (*(__int16 *)(v6 + 32 * v7 + 4) < 0)
    {
      LOWORD(v8) = 0;
    }
    else
    {
      LOWORD(v8) = 0;
      do
      {
        int v8 = (__int16)(v8 + 1);
        uint64_t v7 = (v7 + 1) & *a1;
      }
      while (v8 <= *(__int16 *)(v6 + 32 * v7 + 4));
    }
LABEL_28:
    uint64_t v20 = v6 + 32 * v7;
    if (*(__int16 *)(v20 + 4) == -1)
    {
      *(void *)(v20 + 8) = v31;
      sub_21697D878((_DWORD *)(v20 + 16), &v32);
      sub_21697D8B4((_DWORD *)(v20 + 20), (_DWORD *)&v32 + 1);
      *(_DWORD *)(v20 + 24) = v33;
      *(_DWORD *)uint64_t v20 = v5;
      *(_WORD *)(v20 + 4) = v8;
    }
    else
    {
      __int16 v36 = v8;
      LODWORD(v34) = v5;
      sub_216B15B74((int *)v20, &v36, (int *)&v34, &v31);
      uint64_t v21 = *a1;
      uint64_t v22 = *a1 & (v7 + 1);
      __int16 v23 = ++v36;
      uint64_t v24 = a1[4];
      uint64_t v25 = v24 + 32 * v22;
      uint64_t v27 = (__int16 *)(v25 + 4);
      for (unsigned __int16 i = *(_WORD *)(v25 + 4); i != 0xFFFF; unsigned __int16 i = *(_WORD *)(v25 + 4))
      {
        if (v23 > (__int16)i)
        {
          if (v23 >= 4096) {
            *((unsigned char *)a1 + 72) = 1;
          }
          sub_216B15B74((int *)v25, &v36, (int *)&v34, &v31);
          uint64_t v21 = *a1;
          __int16 v23 = v36;
          uint64_t v24 = a1[4];
        }
        uint64_t v22 = v21 & (v22 + 1);
        __int16 v36 = ++v23;
        uint64_t v25 = v24 + 32 * v22;
        uint64_t v27 = (__int16 *)(v25 + 4);
      }
      int v28 = v34;
      uint64_t v29 = v24 + 32 * v22;
      *(void *)(v29 + 8) = v31;
      sub_21697D878((_DWORD *)(v29 + 16), &v32);
      sub_21697D8B4((_DWORD *)(v29 + 20), (_DWORD *)&v32 + 1);
      *(_DWORD *)(v29 + 24) = v33;
      *(_DWORD *)uint64_t v25 = v28;
      *uint64_t v27 = v23;
    }
    ++a1[6];
    uint64_t v9 = a1[4] + 32 * v7;
    goto LABEL_38;
  }
  LOWORD(v8) = 0;
  while (1)
  {
    uint64_t v9 = v6 + 32 * v7;
    if (*(void *)(v9 + 8) == v31 && *(void *)(v9 + 16) == v32) {
      break;
    }
    int v8 = (__int16)(v8 + 1);
    uint64_t v7 = (v7 + 1) & *a1;
    if (v8 > *(__int16 *)(v6 + 32 * v7 + 4)) {
      goto LABEL_10;
    }
  }
LABEL_38:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_21697C414(&v32);
  return v9;
}

void sub_216B15900(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216B15920(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (unint64_t)(*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return sub_2169827F8(a1, a3);
}

__n128 sub_216B15954(uint64_t *a1, uint64_t a2)
{
  sub_216B15258((uint64_t)&v22, a2, *((float *)a1 + 16), *((float *)a1 + 17));
  uint64_t v3 = v25;
  uint64_t v4 = (unsigned int *)a1[1];
  unint64_t v5 = (unsigned int *)a1[2];
  if (v4 == v5)
  {
    int64x2_t v15 = vdupq_n_s64((unint64_t)v4);
    goto LABEL_16;
  }
  unint64_t v6 = (unint64_t)(v25 - 1) >> 32;
  do
  {
    if (*((__int16 *)v4 + 2) == -1) {
      goto LABEL_13;
    }
    if (v6)
    {
      int v30 = 0;
      char v31 = 0;
      sub_216B15920((uint64_t)&v30, (uint64_t *)v4 + 1, v4 + 4);
      unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * (void)v30);
    }
    else
    {
      unint64_t v7 = *v4;
    }
    __int16 v8 = 0;
    uint64_t v9 = v22;
    uint64_t v10 = v22 & v7;
    __int16 v32 = 0;
    LODWORD(v30) = v7;
    while (1)
    {
      uint64_t v11 = *((void *)&v24 + 1) + 32 * v10;
      int v12 = *(__int16 *)(v11 + 4);
      if (v12 >= v8) {
        goto LABEL_11;
      }
      if (v12 == -1) {
        break;
      }
      sub_216B15B74((int *)(*((void *)&v24 + 1) + 32 * v10), &v32, (int *)&v30, (uint64_t *)v4 + 1);
      __int16 v8 = v32;
      uint64_t v9 = v22;
LABEL_11:
      __int16 v32 = ++v8;
      uint64_t v10 = v9 & (v10 + 1);
    }
    int v13 = (int)v30;
    uint64_t v14 = *((void *)&v24 + 1) + 32 * v10;
    *(void *)(v14 + 8) = *((void *)v4 + 1);
    sub_21697D878((_DWORD *)(v14 + 16), v4 + 4);
    sub_21697D8B4((_DWORD *)(v14 + 20), v4 + 5);
    *(_DWORD *)(v14 + 24) = v4[6];
    *(_DWORD *)uint64_t v11 = v13;
    *(_WORD *)(v11 + 4) = v8;
LABEL_13:
    v4 += 8;
  }
  while (v4 != v5);
  int64x2_t v15 = *(int64x2_t *)(a1 + 1);
  uint64_t v3 = v25;
LABEL_16:
  uint64_t v16 = v22;
  uint64_t v22 = *a1;
  *a1 = v16;
  int64x2_t v17 = v23;
  int64x2_t v23 = v15;
  *(int64x2_t *)(a1 + 1) = v17;
  long long v18 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a1 + 3) = v24;
  long long v19 = *(_OWORD *)(a1 + 5);
  a1[5] = v3;
  long long v24 = v18;
  long long v25 = v19;
  uint64_t v20 = v26;
  uint64_t v26 = a1[7];
  a1[7] = v20;
  v17.i64[0] = v27;
  uint64_t v27 = a1[8];
  a1[8] = v17.i64[0];
  LOBYTE(v20) = v28;
  char v28 = *((unsigned char *)a1 + 72);
  *((unsigned char *)a1 + 72) = v20;
  LOBYTE(v20) = v29;
  char v29 = *((unsigned char *)a1 + 73);
  *((unsigned char *)a1 + 73) = v20;
  int v30 = &v23;
  sub_216B15434((void ***)&v30);
  return result;
}

void sub_216B15B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 88) = &a11;
  sub_216B15434((void ***)(v11 - 88));
  _Unwind_Resume(a1);
}

_DWORD *sub_216B15B74(int *a1, _WORD *a2, int *a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = (int *)(a4 + 1);
  int v13 = *((_DWORD *)a4 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)a4 + 2);
  int v14 = *((_DWORD *)a4 + 3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)a4 + 3);
  *a4 = *((void *)a1 + 1);
  sub_21697DE94(v9, a1 + 4);
  sub_21697DEEC((int *)a4 + 3, a1 + 5);
  *((void *)a1 + 1) = v8;
  sub_21697DE94(a1 + 4, &v13);
  sub_21697DEEC(a1 + 5, &v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  __n128 result = sub_21697C414(&v13);
  int v11 = *((_DWORD *)a4 + 4);
  *((_DWORD *)a4 + 4) = a1[6];
  a1[6] = v11;
  LOWORD(v11) = *a2;
  *a2 = *((_WORD *)a1 + 2);
  *((_WORD *)a1 + 2) = v11;
  int v12 = *a1;
  *a1 = *a3;
  *a3 = v12;
  return result;
}

_DWORD *sub_216B15C9C(uint64_t a1, uint64_t a2)
{
  __n128 result = sub_216B15520((_DWORD *)a2);
  --*(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = (a2 - v5) >> 5;
  uint64_t v7 = (v6 + 1) & *(void *)a1;
  int v8 = *(__int16 *)(v5 + 32 * v7 + 4);
  if (v8 >= 1)
  {
    do
    {
      uint64_t v9 = (int *)(v5 + 32 * v7);
      __int16 v10 = v8 - 1;
      uint64_t v11 = v5 + 32 * v6;
      int v12 = *v9;
      *(void *)(v11 + 8) = *((void *)v9 + 1);
      sub_21697D878((_DWORD *)(v11 + 16), v9 + 4);
      sub_21697D8B4((_DWORD *)(v11 + 20), v9 + 5);
      *(_DWORD *)(v11 + 24) = v9[6];
      *(_DWORD *)uint64_t v11 = v12;
      *(_WORD *)(v11 + 4) = v10;
      __n128 result = sub_216B15520((_DWORD *)(*(void *)(a1 + 32) + 32 * v7));
      uint64_t v6 = v7;
      uint64_t v7 = *(void *)a1 & (v7 + 1);
      uint64_t v5 = *(void *)(a1 + 32);
      int v8 = *(__int16 *)(v5 + 32 * v7 + 4);
    }
    while (v8 > 0);
  }
  if (*(__int16 *)(a2 + 4) == -1)
  {
    int v13 = (__int16 *)(a2 + 36);
    do
    {
      if (*((unsigned char *)v13 - 30)) {
        break;
      }
      int v14 = *v13;
      v13 += 16;
    }
    while (v14 == -1);
  }
  *(unsigned char *)(a1 + 73) = 1;
  return result;
}

uint64_t sub_216B15DB0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)a1 = a2;
  if (a2)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed);
    __int16 v5 = *(_WORD *)(a2 + 12) + 1;
    char v6 = *(unsigned char *)(a2 + 15) | 4;
  }
  else
  {
    __int16 v5 = 1;
    char v6 = 4;
  }
  *(_DWORD *)(a1 + 8) = 1;
  *(_WORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 14) = 4;
  *(unsigned char *)(a1 + 15) = v6;
  sub_216981010((_DWORD *)(a1 + 16), a3);
  sub_21698105C((_DWORD *)(a1 + 20), a3 + 1);
  return a1;
}

uint64_t sub_216B15E34(uint64_t result, uint64_t a2, uint64_t *a3)
{
  *(void *)__n128 result = a2;
  if (a2)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed);
    __int16 v3 = *(_WORD *)(a2 + 12) + 1;
    char v4 = *(unsigned char *)(a2 + 15);
  }
  else
  {
    char v4 = 0;
    __int16 v3 = 1;
  }
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = v3;
  *(unsigned char *)(result + 14) = 6;
  *(unsigned char *)(result + 15) = v4;
  uint64_t v5 = *a3;
  *(void *)(result + 16) = *a3;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

unint64_t sub_216B15EA4()
{
  int v0 = (char *)operator new(0x2C00uLL);
  uint64_t v1 = 0;
  uint64_t v2 = 128;
  do
  {
    *(unsigned char *)(sub_216B15258((uint64_t)&v0[v1], 0, 0.0, 0.5) + 80) = 0;
    v1 += 88;
    --v2;
  }
  while (v2);
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(&qword_267B8EF50, (unint64_t *)&v3, (unint64_t)v0);
  if (v3)
  {
    for (uint64_t i = 0; i != -11264; i -= 88)
    {
      char v6 = (void **)&v0[i + 11184];
      sub_216B15434(&v6);
    }
    operator delete(v0);
    return atomic_load((unint64_t *)&qword_267B8EF50);
  }
  return (unint64_t)v0;
}

void sub_216B15F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  for (; v11; v11 -= 88)
  {
    a10 = (uint64_t)v10 + v11 - 80;
    sub_216B15434((void ***)&a10);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_216B15F98(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)a1 = a2;
  if (a2)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed);
    __int16 v5 = *(_WORD *)(a2 + 12) + 1;
    char v6 = *(unsigned char *)(a2 + 15) | 4;
  }
  else
  {
    char v6 = 4;
    __int16 v5 = 1;
  }
  *(_DWORD *)(a1 + 8) = 1;
  *(_WORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 14) = 5;
  *(unsigned char *)(a1 + 15) = v6;
  sub_216981010((_DWORD *)(a1 + 16), a3);
  sub_21698105C((_DWORD *)(a1 + 20), a3 + 1);
  return a1;
}

uint64_t sub_216B1601C(uint64_t result, uint64_t a2, uint64_t *a3)
{
  *(void *)__n128 result = a2;
  if (a2)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 8), 1u, memory_order_relaxed);
    __int16 v3 = *(_WORD *)(a2 + 12) + 1;
    char v4 = *(unsigned char *)(a2 + 15);
  }
  else
  {
    char v4 = 0;
    __int16 v3 = 1;
  }
  *(_DWORD *)(result + 8) = 1;
  *(_WORD *)(result + 12) = v3;
  *(unsigned char *)(result + 14) = 7;
  *(unsigned char *)(result + 15) = v4;
  uint64_t v5 = *a3;
  *(void *)(result + 16) = *a3;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_216B1608C(uint64_t a1, uint64_t a2, float a3, float a4)
{
  v15[0] = a2;
  sub_21686EB98((unint64_t *)a1, v15);
  uint64_t v7 = v15[0];
  if (v15[0] >= 0xAAAAAAAAAAAAAABuLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  v15[1] = a1 + 8;
  char v16 = 0;
  if (v7)
  {
    int v8 = (int *)operator new(24 * v7);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[6 * v7];
    *(void *)(a1 + 24) = v9;
    __int16 v10 = v8;
    do
    {
      *__int16 v10 = 0;
      *((_WORD *)v10 + 2) = -1;
      *((unsigned char *)v10 + 6) = 0;
      v10 += 6;
    }
    while (v10 != v9);
    *(void *)(a1 + 16) = v9;
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B91048, memory_order_acquire))
  {
    int v8 = &dword_267B91030;
  }
  else
  {
    if (__cxa_guard_acquire(&qword_267B91048))
    {
      dword_267B91030 = 0;
      word_267B91034 = -1;
      byte_267B91036 = 1;
      __cxa_atexit((void (*)(void *))sub_216B162C0, &dword_267B91030, &dword_216758000);
      __cxa_guard_release(&qword_267B91048);
    }
    int v8 = &dword_267B91030;
  }
  unint64_t v11 = v15[0];
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v11) {
    *(unsigned char *)(*(void *)(a1 + 16) - 18) = 1;
  }
  float v12 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v12;
  *(void *)(a1 + 56) = (unint64_t)(float)(v12 * (float)v11);
  return a1;
}

void sub_216B16258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void sub_216B1627C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    for (uint64_t i = (char *)v1[1]; i != v2; i -= 24)
    {
      if (*((__int16 *)i - 10) != -1) {
        *((_WORD *)i - 10) = -1;
      }
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_216B162C0(uint64_t result)
{
  if (*(__int16 *)(result + 4) != -1) {
    *(_WORD *)(result + 4) = -1;
  }
  return result;
}

uint64_t sub_216B162D8(uint64_t result, uint64_t a2)
{
  if (*(__int16 *)(a2 + 4) != -1) {
    *(_WORD *)(a2 + 4) = -1;
  }
  --*(void *)(result + 48);
  uint64_t v2 = *(void *)(result + 32);
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v2) >> 3);
  uint64_t v4 = (v3 + 1) & *(void *)result;
  int v5 = *(__int16 *)(v2 + 24 * v4 + 4);
  if (v5 < 1) {
    goto LABEL_8;
  }
  do
  {
    char v6 = (int *)(v2 + 24 * v4);
    uint64_t v7 = v2 + 24 * v3;
    int v8 = *v6;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(v6 + 2);
    *(_DWORD *)uint64_t v7 = v8;
    *(_WORD *)(v7 + 4) = v5 - 1;
    uint64_t v2 = *(void *)(result + 32);
    uint64_t v9 = v2 + 24 * v4;
    int v11 = *(__int16 *)(v9 + 4);
    __int16 v10 = (_WORD *)(v9 + 4);
    if (v11 != -1) {
      *__int16 v10 = -1;
    }
    unint64_t v3 = v4;
    uint64_t v4 = *(void *)result & (v4 + 1);
    int v5 = *(__int16 *)(v2 + 24 * v4 + 4);
  }
  while (v5 > 0);
  if (*(__int16 *)(a2 + 4) == -1)
  {
LABEL_8:
    float v12 = (__int16 *)(a2 + 28);
    do
    {
      if (*((unsigned char *)v12 - 22)) {
        break;
      }
      int v13 = *v12;
      v12 += 12;
    }
    while (v13 == -1);
  }
  *(unsigned char *)(result + 73) = 1;
  return result;
}

__n128 sub_216B163C4(uint64_t *a1, uint64_t a2)
{
  sub_216B1608C((uint64_t)&v28, a2, *((float *)a1 + 16), *((float *)a1 + 17));
  uint64_t v3 = v31;
  uint64_t v4 = (unsigned int *)a1[1];
  int v5 = (unsigned int *)a1[2];
  if (v4 == v5)
  {
    int64x2_t v21 = vdupq_n_s64((unint64_t)v4);
    goto LABEL_16;
  }
  unint64_t v6 = (unint64_t)(v31 - 1) >> 32;
  do
  {
    if (*((__int16 *)v4 + 2) == -1) {
      goto LABEL_13;
    }
    if (v6) {
      unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *((void *)v4 + 1));
    }
    else {
      unint64_t v7 = *v4;
    }
    __int16 v8 = 0;
    uint64_t v9 = v28;
    for (unint64_t i = v7; ; unint64_t i = v11 + 1)
    {
      unint64_t v11 = i & v9;
      uint64_t v12 = *((void *)&v30 + 1);
      uint64_t v13 = *((void *)&v30 + 1) + 24 * v11;
      int v14 = (_WORD *)(v13 + 4);
      int v15 = *(__int16 *)(v13 + 4);
      if (v15 >= v8) {
        goto LABEL_11;
      }
      char v16 = (void *)(*((void *)&v30 + 1) + 24 * v11 + 8);
      if (v15 == -1) {
        break;
      }
      uint64_t v17 = *((void *)v4 + 1);
      *((void *)v4 + 1) = *v16;
      *char v16 = v17;
      uint64_t v18 = v12 + 24 * v11;
      unsigned int v19 = v4[4];
      void v4[4] = *(_DWORD *)(v18 + 16);
      *(_DWORD *)(v18 + 16) = v19;
      _WORD *v14 = v8;
      int v20 = *(_DWORD *)v13;
      *(_DWORD *)uint64_t v13 = v7;
      __int16 v8 = v15;
      LODWORD(v7) = v20;
LABEL_11:
      ++v8;
    }
    *(_OWORD *)char v16 = *(_OWORD *)(v4 + 2);
    *(_DWORD *)uint64_t v13 = v7;
    _WORD *v14 = v8;
LABEL_13:
    v4 += 6;
  }
  while (v4 != v5);
  int64x2_t v21 = *(int64x2_t *)(a1 + 1);
  uint64_t v3 = v31;
LABEL_16:
  uint64_t v22 = v28;
  uint64_t v28 = *a1;
  *a1 = v22;
  int64x2_t v23 = v29;
  int64x2_t v29 = v21;
  *(int64x2_t *)(a1 + 1) = v23;
  long long v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(a1 + 3) = v30;
  long long v25 = *(_OWORD *)(a1 + 5);
  a1[5] = v3;
  long long v30 = v24;
  long long v31 = v25;
  uint64_t v26 = v32;
  uint64_t v32 = a1[7];
  a1[7] = v26;
  v23.i64[0] = v33;
  uint64_t v33 = a1[8];
  a1[8] = v23.i64[0];
  LOBYTE(v26) = v34;
  char v34 = *((unsigned char *)a1 + 72);
  *((unsigned char *)a1 + 72) = v26;
  LOBYTE(v26) = v35;
  char v35 = *((unsigned char *)a1 + 73);
  *((unsigned char *)a1 + 73) = v26;
  __int16 v36 = &v29;
  sub_216B1627C((void ***)&v36);
  return result;
}

uint64_t sub_216B1657C(tbb::internal *this, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    sub_216784EC4(v3);
  }
  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, a2);
}

uint64_t sub_216B165B4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v6 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v6 + 16);
  __dmb(0xBu);
  if (v7 == 3
    && (__int16 v8 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v8)))
  {
    *(void *)a1 = v8;
    uint64_t v9 = *(void *)(a1 + 16);
    if (*(void *)(v9 + 16) == 3)
    {
      __dmb(0xBu);
      *(void *)(v9 + 16) = 0;
      if (a3)
      {
        unint64_t v10 = HIDWORD(a3);
        if (!HIDWORD(a3)) {
          unint64_t v10 = a3;
        }
        char v11 = 32 * (HIDWORD(a3) != 0);
        if (v10 >= 0x10000)
        {
          v10 >>= 16;
          char v11 = (32 * (HIDWORD(a3) != 0)) | 0x10;
        }
        if (v10 >= 0x100)
        {
          v10 >>= 8;
          v11 |= 8u;
        }
        if (v10 >= 0x10)
        {
          v10 >>= 4;
          v11 |= 4u;
        }
        BOOL v12 = v10 >= 4;
        if (v10 >= 4) {
          LODWORD(v10) = v10 >> 2;
        }
        unsigned int v13 = (v10 >> 1) & 1;
        if (v12) {
          v11 += 2;
        }
        char v14 = v13 + v11;
      }
      else
      {
        char v14 = -1;
      }
      uint64_t v17 = ~(-1 << v14);
      sub_216B165B4(&v21, a2, v17 & a3);
      uint64_t v18 = (void *)(v23 + 16);
      unsigned int v19 = *(void **)(v23 + 16);
      __dmb(0xBu);
      if ((unint64_t)v19 >= 0x40)
      {
        int v20 = (2 * v17) | 1;
        while ((((v19[2] >> 3) ^ v19[2]) & v20) == a3)
        {
          if (v22 || (char v22 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v21) & 1) != 0))
          {
            *uint64_t v18 = *v19;
            *unsigned int v19 = *(void *)(v9 + 16);
            *(void *)(v9 + 16) = v19;
LABEL_29:
            unsigned int v19 = (void *)*v18;
            if (*v18 <= 0x3FuLL) {
              goto LABEL_32;
            }
          }
          else
          {
            uint64_t v18 = (void *)(v23 + 16);
            unsigned int v19 = *(void **)(v23 + 16);
            __dmb(0xBu);
            if ((unint64_t)v19 < 0x40) {
              goto LABEL_32;
            }
          }
        }
        uint64_t v18 = v19;
        goto LABEL_29;
      }
LABEL_32:
      sub_21685C048(&v21);
    }
  }
  else
  {
    int v15 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = 0;
    *(void *)a1 = v15;
    tbb::spin_rw_mutex_v3::internal_acquire_reader(v15);
  }
  return a1;
}

void sub_216B167A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  sub_21685C048(v2);
  _Unwind_Resume(a1);
}

void *sub_216B167C8(void *result, uint64_t a2)
{
  *__n128 result = a2;
  uint64_t v2 = (atomic_uint *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  int v3 = 1 << (8 * (a2 & 3));
  int v4 = ~(255 << (8 * (a2 & 3)));
LABEL_2:
  int v5 = *v2 & v4;
  while (1)
  {
    int v6 = v5;
    atomic_compare_exchange_strong(v2, (unsigned int *)&v6, v5 | v3);
    if (v6 == v5) {
      return result;
    }
    if (*v2 != v5)
    {
      __n128 result = (void *)sched_yield();
      goto LABEL_2;
    }
  }
}

uint64_t *sub_216B1683C(uint64_t **a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  __int16 v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v10 = (uint64_t **)v7;
        unint64_t v11 = v7[4];
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        __int16 v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        __int16 v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v10 = a1 + 1;
LABEL_10:
    BOOL v12 = (uint64_t *)operator new(0x30uLL);
    uint64_t v13 = *a4;
    v12[4] = *a3;
    v12[5] = v13;
    *a4 = 0;
    sub_21677B358(a1, (uint64_t)v10, v8, v12);
    return v12;
  }
  return (uint64_t *)v10;
}

std::string *sub_216B16904(std::string *this, const std::string::value_type *a2)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  this[1].__r_.__value_.__r.__words[0] = size;
  std::string::append(this, ".");

  return sub_216B16968(this, a2);
}

std::string *sub_216B16968(std::string *a1, const std::string::value_type *a2)
{
  uint64_t v2 = a1;
  __n128 result = std::string::append(a1, a2);
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::pointer data = v2[1].__r_.__value_.__l.__data_;
    int v6 = v2;
    uint64_t v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    std::string::size_type size = v6->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
    std::string::pointer data = v2[1].__r_.__value_.__l.__data_;
  }
  unint64_t v7 = (unint64_t)&data[(void)v2];
  __int16 v8 = (char *)v2 + size;
  unint64_t v9 = (char *)v2 + size - 1;
  if ((char *)v7 != v8 && (unint64_t)v9 > v7)
  {
    unint64_t v11 = v7 + 1;
    do
    {
      char v12 = *(unsigned char *)(v11 - 1);
      *(unsigned char *)(v11 - 1) = *v9;
      *v9-- = v12;
    }
    while (v11++ < (unint64_t)v9);
  }
  return result;
}

uint64_t sub_216B169E4(_DWORD *a1, uint64_t a2)
{
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(a1 + 1);

  return sub_216B10AFC(Ptr, v5, a2);
}

uint64_t sub_216B16A3C(uint64_t result, unint64_t *a2)
{
  uint64_t v3 = result;
  switch(*(unsigned char *)(result + 14))
  {
    case 1:
      unint64_t v5 = *(void *)(result + 16) & 0xFFFFFFFFFFFFFFF8;
      if (v5)
      {
        int v6 = (char *)(v5 + 16);
        if (*(char *)(v5 + 39) < 0) {
          int v6 = *(char **)v6;
        }
      }
      else
      {
        int v6 = "";
      }
      *a2 = qword_26798C3D8;
      goto LABEL_33;
    case 2:
      unint64_t v7 = *(void **)(result + 16);
      unint64_t v8 = *v7 & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        unint64_t v9 = (char *)(v8 + 16);
        if (*(char *)(v8 + 39) < 0) {
          unint64_t v9 = *(char **)v9;
        }
      }
      else
      {
        unint64_t v9 = "";
      }
      unint64_t v16 = v7[1] & 0xFFFFFFFFFFFFFFF8;
      if (v16)
      {
        uint64_t v17 = (char *)(v16 + 16);
        if (*(char *)(v16 + 39) < 0) {
          uint64_t v17 = *(char **)v17;
        }
      }
      else
      {
        uint64_t v17 = "";
      }
      *a2 = qword_26798C3D8;
      __n128 result = sub_216B16D88((uint64_t)a2, "{");
      if (!result) {
        return result;
      }
      __n128 result = sub_216B16D88((uint64_t)a2, v9);
      if (!result) {
        return result;
      }
      __n128 result = sub_216B16D88((uint64_t)a2, "=");
      if (!result) {
        return result;
      }
      __n128 result = sub_216B16D88((uint64_t)a2, v17);
      if (!result) {
        return result;
      }
      int v6 = "}";
LABEL_33:
      __n128 result = sub_216B16D20(a2, v6);
      break;
    case 3:
    case 6:
    case 7:
      uint64_t v4 = *(void *)(result + 16);
      goto LABEL_18;
    case 4:
      *a2 = qword_26798C3D8;
      sub_216B16D20(a2, "]");
      sub_216B16E68((_DWORD *)(v3 + 16), (uint64_t)a2);
      *a2 = qword_26798C3D8;
      int v6 = "[";
      goto LABEL_33;
    case 5:
      *a2 = qword_26798C3D8;
      sub_216B16D20(a2, "]");
      sub_216B16E68((_DWORD *)(v3 + 16), (uint64_t)a2);
      *a2 = qword_26798C3D8;
      sub_216B16D20(a2, "[");
      unint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v10) {
        unint64_t v10 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      unint64_t v11 = *((void *)v10 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        char v12 = (char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0) {
          char v12 = *(char **)v12;
        }
      }
      else
      {
        char v12 = "";
      }
      *a2 = qword_26798C3D8;
      sub_216B16D20(a2, v12);
      *a2 = qword_26798C3D8;
      int v6 = ".";
      goto LABEL_33;
    case 8:
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      if (!v13) {
        uint64_t v13 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
      }
      uint64_t v4 = *((void *)v13 + 8);
LABEL_18:
      unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v14)
      {
        int v15 = (char *)(v14 + 16);
        if (*(char *)(v14 + 39) < 0) {
          int v15 = *(char **)v15;
        }
      }
      else
      {
        int v15 = "";
      }
      __n128 result = sub_216B16E04(a2, v15);
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_216B16D20(unint64_t *a1, char *a2)
{
  BOOL result = sub_216B16D88((uint64_t)a1, a2);
  if (result)
  {
    unint64_t v4 = *a1;
    unint64_t v5 = (unsigned char *)(qword_26798C3D8 - 1);
    if (*a1 != qword_26798C3D8 && (unint64_t)v5 > v4)
    {
      unint64_t v7 = v4 + 1;
      do
      {
        char v8 = *(unsigned char *)(v7 - 1);
        *(unsigned char *)(v7 - 1) = *v5;
        *v5-- = v8;
      }
      while (v7++ < (unint64_t)v5);
    }
  }
  return result;
}

BOOL sub_216B16D88(uint64_t a1, char *__s)
{
  size_t v4 = qword_26798C3D8 + strlen(__s);
  if (v4 >= (unint64_t)&dword_267B90F88)
  {
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    strcpy((char *)qword_26798C3D8, __s);
    qword_26798C3D8 = v4;
  }
  return v4 < (unint64_t)&dword_267B90F88;
}

BOOL sub_216B16E04(unint64_t *a1, char *a2)
{
  *a1 = qword_26798C3D8;
  BOOL result = sub_216B16D88((uint64_t)a1, ".");
  if (result)
  {
    return sub_216B16D20(a1, a2);
  }
  return result;
}

uint64_t sub_216B16E68(_DWORD *a1, uint64_t a2)
{
  uint64_t Ptr = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(a1 + 1);

  return sub_216B10D48(Ptr, v5, a2);
}

void pxrInternal__aapl__pxrReserved__::Sdf_VisitPathTableInParallel(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v13[2] = a4;
  unint64_t v14 = a1;
  v13[0] = &v14;
  v13[1] = a3;
  if (a2)
  {
    uint64_t v6 = a2;
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      v16[0] = 0;
      uint64_t v17 = 65539;
      int v18 = 55;
      tbb::task_group_context::init((uint64_t)v16, v7, v8, v9);
      int v15 = (tbb::task_group_context *)v16;
      uint64_t v10 = tbb::internal::allocate_root_with_context_proxy::allocate(&v15, 0x38uLL);
      *(unsigned char *)(v10 - 11) = 1;
      *(void *)uint64_t v10 = &unk_26C759C78;
      *(void *)(v10 + 8) = v6;
      *(_OWORD *)(v10 + 16) = xmmword_217411D30;
      *(void *)(v10 + 32) = v13;
      unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v10);
      *(_DWORD *)(v10 + 48) = 0;
      *(unsigned char *)(v10 + 52) = 5;
      *(void *)(v10 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v10 - 40) + 16))(*(void *)(v10 - 40), v10, v10 - 8);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v16);
    }
    else
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)((char *)v14 + v12)) {
          a4(a3);
        }
        v12 += 8;
        --v6;
      }
      while (v6);
    }
  }
}

void sub_216B17034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a13, v17);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_216B1707C(tbb::internal::allocate_continuation_proxy *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 5))
  {
    *((void *)this + 5) = 1;
    if (*((char *)this - 11) < 0)
    {
      uint64_t v2 = *((void *)this - 4);
      if (*(int *)(v2 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v2 + 8) = 1;
        unsigned int v3 = *((unsigned __int8 *)this + 52);
        if (v3 <= 1) {
          LOBYTE(v3) = 1;
        }
        *((unsigned char *)this + 52) = v3 + 1;
      }
    }
  }
  size_t v4 = (long long *)((char *)this + 8);
  unint64_t v5 = *((void *)this + 3);
  unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
  if (v5 < v6)
  {
    unint64_t v7 = *((void *)this + 5);
    if (v7 > 1) {
      goto LABEL_12;
    }
    if (v7 && *((unsigned char *)this + 52))
    {
      --*((unsigned char *)this + 52);
      *((void *)this + 5) = 0;
LABEL_12:
      while (1)
      {
        uint64_t v8 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
        *(v8 - 11) = 1;
        *(void *)uint64_t v8 = &unk_26C751420;
        __dmb(0xBu);
        v8[8] = 0;
        *((void *)this - 4) = v8;
        *((void *)v8 - 3) = 2;
        uint64_t v9 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v8, 0x38uLL);
        *(unsigned char *)(v9 - 11) = 1;
        *(void *)uint64_t v9 = &unk_26C759C78;
        *(void *)(v9 + 8) = *((void *)this + 1);
        uint64_t v10 = *((void *)this + 2) + ((*((void *)this + 1) - *((void *)this + 2)) >> 1);
        *((void *)this + 1) = v10;
        *(void *)(v9 + 16) = v10;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)((char *)this + 24);
        uint64_t v11 = *((void *)this + 5) >> 1;
        *((void *)this + 5) = v11;
        *(void *)(v9 + 40) = v11;
        *(_DWORD *)(v9 + 48) = 2;
        *(unsigned char *)(v9 + 52) = *((unsigned char *)this + 52);
        (***(void (****)(void))(v9 - 40))();
        unint64_t v5 = *((void *)this + 3);
        unint64_t v6 = *((void *)this + 1) - *((void *)this + 2);
        if (v5 >= v6) {
          break;
        }
        unint64_t v12 = *((void *)this + 5);
        if (v12 <= 1)
        {
          if (!v12 || !*((unsigned char *)this + 52)) {
            break;
          }
          --*((unsigned char *)this + 52);
          *((void *)this + 5) = 0;
        }
      }
    }
  }
  if (v5 < v6 && *((unsigned char *)this + 52))
  {
    *(_DWORD *)long long v25 = 0x10000;
    long long v26 = *v4;
    uint64_t v27 = *((void *)this + 3);
    while (1)
    {
      sub_216B17510(v25, *((unsigned __int8 *)this + 52));
      char v13 = *(unsigned char *)(*((void *)this - 4) + 8);
      __dmb(0xBu);
      if ((v13 & 1) == 0) {
        break;
      }
      unsigned __int8 v16 = *((unsigned char *)this + 52) + 1;
      *((unsigned char *)this + 52) = v16;
      unsigned __int8 v15 = v25[2];
      if (v25[2] < 2u)
      {
        unsigned int v14 = v25[0];
        if (v25[v25[0] + 3] < v16
          && *((void *)&v26 + 3 * v25[0] + 2) < *((void *)&v26 + 3 * v25[0]) - *((void *)&v26 + 3 * v25[0] + 1))
        {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      unsigned int v17 = v25[1];
      unsigned __int8 v18 = v25[v25[1] + 3];
      uint64_t v19 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(this, 0x10uLL);
      *(v19 - 11) = 1;
      *(void *)uint64_t v19 = &unk_26C751420;
      __dmb(0xBu);
      v19[8] = 0;
      *((void *)this - 4) = v19;
      *((void *)v19 - 3) = 2;
      uint64_t v20 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v19, 0x38uLL);
      int64x2_t v21 = (char *)&v26 + 24 * v17;
      *(unsigned char *)(v20 - 11) = 1;
      *(void *)uint64_t v20 = &unk_26C759C78;
      long long v22 = *(_OWORD *)v21;
      *(void *)(v20 + 24) = *((void *)v21 + 2);
      *(_OWORD *)(v20 + 8) = v22;
      *(void *)(v20 + 32) = *((void *)this + 4);
      uint64_t v23 = *((void *)this + 5) >> 1;
      *((void *)this + 5) = v23;
      *(void *)(v20 + 40) = v23;
      *(_DWORD *)(v20 + 48) = 2;
      *(unsigned char *)(v20 + 52) = *((unsigned char *)this + 52) - v18;
      (***(void (****)(void))(v20 - 40))();
      unsigned __int8 v15 = --v25[2];
      v25[1] = (v25[1] + 1) & 7;
LABEL_27:
      if (!v15 || tbb::task_group_context::is_group_execution_cancelled(*((tbb::task_group_context **)this - 7))) {
        return 0;
      }
    }
    unsigned int v14 = v25[0];
LABEL_22:
    sub_216B174B0((uint64_t)this, (void *)&v26 + 3 * v14);
    unsigned __int8 v15 = --v25[2];
    v25[0] = (v25[0] - 1) & 7;
    goto LABEL_27;
  }
  sub_216B174B0((uint64_t)this, (void *)this + 1);
  return 0;
}

uint64_t sub_216B174B0(uint64_t result, void *a2)
{
  uint64_t v2 = a2[1];
  uint64_t v3 = *a2 - v2;
  if (*a2 != v2)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = 8 * v2;
    do
    {
      if (*(void *)(**(void **)v4 + v5)) {
        BOOL result = (*(uint64_t (**)(void))(v4 + 16))(*(void *)(v4 + 8));
      }
      v5 += 8;
      --v3;
    }
    while (v3);
  }
  return result;
}

__n128 sub_216B17510(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2 = a1[2];
  if (v2 <= 7)
  {
    uint64_t v3 = a1 + 16;
    unint64_t v4 = *a1;
    unsigned __int8 v5 = a1[v4 + 3];
    do
    {
      if (a2 <= v5) {
        break;
      }
      char v6 = v4;
      unint64_t v7 = (__n128 *)&v3[24 * v4];
      uint64_t v8 = v7 + 1;
      uint64_t v9 = &v7->n128_u64[1];
      if (v7[1].n128_u64[0] >= v7->n128_u64[0] - v7->n128_u64[1]) {
        break;
      }
      unint64_t v4 = (unint64_t)&a1[v4];
      uint64_t v10 = (v6 + 1) & 7;
      uint64_t v11 = (__n128 *)&v3[24 * v10];
      unint64_t v12 = v7[1].n128_u64[0];
      __n128 result = *v7;
      __n128 *v11 = *v7;
      v11[1].n128_u64[0] = v12;
      uint64_t v14 = v11->n128_i64[1];
      v7->n128_u64[0] = v11->n128_u64[0];
      *a1 = v10;
      unint64_t v15 = v14 + ((v11->n128_u64[0] - v14) >> 1);
      v11->n128_u64[0] = v15;
      *uint64_t v9 = v15;
      v8->n128_u64[0] = v12;
      unsigned __int8 v5 = *(unsigned char *)(v4 + 3) + 1;
      *(unsigned char *)(v4 + 3) = v5;
      a1[v10 + 3] = v5;
      a1[2] = v2 + 1;
      LOBYTE(v4) = v10;
    }
    while (v2++ < 7);
  }
  return result;
}

uint64_t *sub_216B175D4()
{
  sub_216B17970();

  return sub_216B17A74();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(uint64_t a1, uint64_t a2, _DWORD *a3, _OWORD *a4)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v8);
  if (SHIBYTE(v9) < 0)
  {
    sub_216778F24((unsigned char *)a1, v8[0], (unint64_t)v8[1]);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *(void *)(a1 + 16) = v9;
  }
  if (v11 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[0]);
  }
  sub_216981010((_DWORD *)(a1 + 24), a3);
  sub_21698105C((_DWORD *)(a1 + 28), a3 + 1);
  *(_OWORD *)(a1 + 32) = *a4;
  return a1;
}

void sub_216B176A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  char v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    uint64_t v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  if (*((void *)a1 + 3) != *((void *)v6 + 3)) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)a1 + 4, (double *)v6 + 4);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(const void **a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1;
  int v4 = (char)a2[23];
  uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  unint64_t v7 = (const void **)*a1;
  size_t v6 = (size_t)a1[1];
  if ((v5 & 0x80u) == 0) {
    size_t v8 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v8 = (size_t)a1[1];
  }
  if ((v5 & 0x80u) != 0) {
    a1 = (const void **)*a1;
  }
  if (v4 >= 0) {
    size_t v9 = a2[23];
  }
  else {
    size_t v9 = *((void *)a2 + 1);
  }
  if (v4 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)a2;
  }
  if (v9 >= v8) {
    size_t v11 = v8;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(a1, v10, v11);
  BOOL v13 = v8 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  if (v8 != v9) {
    return 0;
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(v7, v10, v6)) {
      return 0;
    }
  }
  else if (v5)
  {
    unint64_t v15 = v3;
    while (*(unsigned __int8 *)v15 == *v10)
    {
      unint64_t v15 = (const void **)((char *)v15 + 1);
      ++v10;
      if (!--v5) {
        goto LABEL_27;
      }
    }
    return 0;
  }
LABEL_27:
  if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24)))return 1; {
  if (v3[3] != *((const void **)a2 + 3))
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator<((double *)v3 + 4, (double *)a2 + 4);
}

uint64_t *sub_216B17970()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  size_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C759CB0, (uint64_t)__p);
  int v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C759CB0, (char *)0x30, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    size_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B17A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B17A74()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  size_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C759CC0, (uint64_t)__p);
  int v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C759CC0, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    size_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B17B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

{
  *__n128 result = 0;
  return result;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(int *result, int a2, int a3)
{
  *__n128 result = a2 | (a3 << 8);
  return result;
}

{
  *__n128 result = a2 | (a3 << 8);
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(_DWORD *a1)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionStarts[*a1]
       + 24 * (*a1 >> 8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetHandle(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = 1;
    while (1)
    {
      unint64_t v2 = result
         - pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::_regionStarts[v1];
      if (v2 >> 27 < 3) {
        break;
      }
      if (++v1 == 257) {
        return 0;
      }
    }
    return v1 | ((v2 / 0x18) << 8);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(_DWORD *a1)
{
  return *a1 != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator!=(_DWORD *a1, _DWORD *a2)
{
  return *a1 != *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator<(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(int *result, int *a2)
{
  int v2 = *result;
  *__n128 result = *a2;
  *a2 = v2;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

{
  *__n128 result = 0;
  return result;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(int *result, int a2, int a3)
{
  *__n128 result = a2 | (a3 << 8);
  return result;
}

{
  *__n128 result = a2 | (a3 << 8);
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(_DWORD *a1)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionStarts[*a1]
       + 24 * (*a1 >> 8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetHandle(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = 1;
    while (1)
    {
      unint64_t v2 = result
         - pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::_regionStarts[v1];
      if (v2 >> 27 < 3) {
        break;
      }
      if (++v1 == 257) {
        return 0;
      }
    }
    return v1 | ((v2 / 0x18) << 8);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(_DWORD *a1)
{
  return *a1 != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator!=(_DWORD *a1, _DWORD *a2)
{
  return *a1 != *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator<(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(int *result, int *a2)
{
  int v2 = *result;
  *__n128 result = *a2;
  *a2 = v2;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_PoolCommitRange(pxrInternal__aapl__pxrReserved__ *this, char *a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::ArchCommitVirtualMemoryRange((unint64_t)this, (void *)(a2 - (char *)this));
}

void sub_216B17D9C()
{
  sub_216779094(v3, "SdfPredicateExpression::FnCall::BareCall");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759CD0, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPredicateExpression::FnCall::ColonCall");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759CD0, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPredicateExpression::FnCall::ParenCall");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759CD0, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPredicateExpression::Call");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759CE0, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPredicateExpression::Not");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759CE0, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPredicateExpression::ImpliedAnd");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759CE0, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPredicateExpression::And");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759CE0, 3, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPredicateExpression::Or");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759CE0, 4, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216B18040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::MakeNot(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  char v4 = (void *)(a2 + 16);
  sub_216B08220(a2, (__n128 *)a1);
  sub_216B02514((void **)(a2 + 24));
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = *(_DWORD **)(a2 + 8);
  if ((unint64_t)v5 >= *v4)
  {
    uint64_t v7 = *(_DWORD **)a2;
    uint64_t v8 = ((uint64_t)v5 - *(void *)a2) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v10 = *v4 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      int v12 = (char *)sub_21677EA28((uint64_t)v4, v11);
      uint64_t v7 = *(_DWORD **)a2;
      uint64_t v5 = *(_DWORD **)(a2 + 8);
    }
    else
    {
      int v12 = 0;
    }
    BOOL v13 = &v12[4 * v8];
    uint64_t v14 = &v12[4 * v11];
    *(_DWORD *)BOOL v13 = 1;
    size_t v6 = v13 + 4;
    while (v5 != v7)
    {
      int v15 = *--v5;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    _DWORD *v5 = 1;
    size_t v6 = v5 + 1;
  }
  *(void *)(a2 + 8) = v6;
}

void sub_216B181B4(_Unwind_Exception *a1)
{
  sub_216B00F28(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::MakeOp@<X0>(int a1@<W0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  sub_216B08220(a4, a3);
  sub_21681FE20((void **)a4, ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2) + ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) + 1);
  sub_216ADED1C(a4, *(void *)(a4 + 8), *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  unint64_t v8 = *(void *)(a4 + 16);
  unint64_t v9 = *(_DWORD **)(a4 + 8);
  if ((unint64_t)v9 >= v8)
  {
    unint64_t v11 = *(_DWORD **)a4;
    uint64_t v12 = ((uint64_t)v9 - *(void *)a4) >> 2;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v14 = v8 - (void)v11;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      uint64_t v16 = (char *)sub_21677EA28(a4 + 16, v15);
      unint64_t v11 = *(_DWORD **)a4;
      unint64_t v9 = *(_DWORD **)(a4 + 8);
    }
    else
    {
      uint64_t v16 = 0;
    }
    unsigned int v17 = &v16[4 * v12];
    unsigned __int8 v18 = &v16[4 * v15];
    *(_DWORD *)unsigned int v17 = a1;
    uint64_t v10 = v17 + 4;
    while (v9 != v11)
    {
      int v19 = *--v9;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    *(void *)a4 = v17;
    *(void *)(a4 + 8) = v10;
    *(void *)(a4 + 16) = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *unint64_t v9 = a1;
    uint64_t v10 = v9 + 1;
  }
  *(void *)(a4 + 8) = v10;
  sub_216B02514((void **)(a4 + 24));
  *(void *)(a4 + 24) = *(void *)(a2 + 24);
  long long v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a4 + 32) = v20;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  return sub_216B19EE4((uint64_t *)(a4 + 24), v20, a3[1].n128_i64[1], a3[2].n128_i64[0], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a3[2].n128_u64[0] - a3[1].n128_u64[1]) >> 3));
}

void sub_216B18364(_Unwind_Exception *a1)
{
  sub_216B00F28(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::MakeCall@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  a2[8] = 0;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  char v4 = (char *)sub_21677EA28((uint64_t)(a2 + 2), 1uLL);
  uint64_t v5 = *a2;
  size_t v6 = a2[1];
  unint64_t v8 = &v4[4 * v7];
  *(_DWORD *)char v4 = 0;
  unint64_t v9 = v4 + 4;
  while (v6 != v5)
  {
    int v10 = *((_DWORD *)v6 - 1);
    v6 -= 4;
    *((_DWORD *)v4 - 1) = v10;
    v4 -= 4;
  }
  *a2 = v4;
  a2[1] = v9;
  a2[2] = v8;
  if (v5) {
    operator delete(v5);
  }
  a2[1] = v9;
  unint64_t v11 = (unint64_t)a2[4];
  if (v11 >= (unint64_t)a2[5])
  {
    uint64_t result = sub_216B1A650((uint64_t *)a2 + 3, a1);
  }
  else
  {
    *(_DWORD *)unint64_t v11 = *(_DWORD *)a1;
    long long v12 = *(_OWORD *)(a1 + 8);
    *(void *)(v11 + 24) = *(void *)(a1 + 24);
    *(_OWORD *)(v11 + 8) = v12;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 40) = 0;
    *(void *)(v11 + 48) = 0;
    *(_OWORD *)(v11 + 32) = *(_OWORD *)(a1 + 32);
    *(void *)(v11 + 48) = *(void *)(a1 + 48);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    uint64_t result = v11 + 56;
  }
  a2[4] = (char *)result;
  return result;
}

void sub_216B1846C(_Unwind_Exception *a1)
{
  sub_216B00F28(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::WalkWithOpStack(void *a1, uint64_t a2, void (*a3)(uint64_t, char **), uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v10 = a1[3];
    uint64_t v27 = *(unsigned int *)(v5 - 4);
    sub_216B1A80C(&v28, 1uLL, &v27);
    unint64_t v11 = v28;
    if (v28 == v29)
    {
      if (!v28) {
        return;
      }
    }
    else
    {
      unint64_t v11 = v29;
      do
      {
        int v12 = *((_DWORD *)v11 - 2);
        if (v12)
        {
          a3(a2, &v28);
          int v13 = *((_DWORD *)v11 - 1) + 1;
          *((_DWORD *)v11 - 1) = v13;
          if (v12 == 1) {
            int v14 = 2;
          }
          else {
            int v14 = 3;
          }
        }
        else
        {
          a5(a4, v10);
          int v14 = 0;
          v10 += 56;
          int v13 = *((_DWORD *)v11 - 1);
        }
        if (v13 == v14)
        {
          unint64_t v11 = v29 - 8;
        }
        else
        {
          unint64_t v15 = v29;
          if (v29 >= v30)
          {
            uint64_t v16 = (v29 - v28) >> 3;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61) {
              sub_21677CB10();
            }
            uint64_t v18 = v30 - v28;
            if ((v30 - v28) >> 2 > v17) {
              unint64_t v17 = v18 >> 2;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v17;
            }
            long long v20 = (char *)sub_21677CB28((uint64_t)&v30, v19);
            long long v22 = &v20[8 * v16];
            *(_DWORD *)long long v22 = *(_DWORD *)(v5 - 8);
            *((_DWORD *)v22 + 1) = 0;
            long long v24 = v28;
            uint64_t v23 = v29;
            long long v25 = v22;
            if (v29 != v28)
            {
              do
              {
                uint64_t v26 = *((void *)v23 - 1);
                v23 -= 8;
                *((void *)v25 - 1) = v26;
                v25 -= 8;
              }
              while (v23 != v24);
              uint64_t v23 = v28;
            }
            unint64_t v11 = v22 + 8;
            uint64_t v28 = v25;
            int64x2_t v29 = v22 + 8;
            long long v30 = &v20[8 * v21];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            *(void *)int64x2_t v29 = *(unsigned int *)(v5 - 8);
            unint64_t v11 = v15 + 8;
          }
          v5 -= 4;
        }
        int64x2_t v29 = v11;
      }
      while (v28 != v11);
    }
    int64x2_t v29 = v11;
    operator delete(v11);
  }
}

void sub_216B18654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::Walk(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  v6[0] = a2;
  v6[1] = a3;
  uint64_t v5 = v6;
  pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::WalkWithOpStack(a1, (uint64_t)&v5, (void (*)(uint64_t, char **))sub_216B18EF4, a4, a5);
}

void pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::GetText(pxrInternal__aapl__pxrReserved__::SdfPredicateExpression *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(void *)this != *((void *)this + 1))
  {
    long long __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    v3[0] = &v7;
    v3[1] = &__p;
    _OWORD v3[2] = a2;
    uint64_t v2 = a2;
    pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::WalkWithOpStack(this, (uint64_t)v3, (void (*)(uint64_t, char **))sub_216B18F08, (uint64_t)&v2, (void (*)(uint64_t, uint64_t))sub_216B19094);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
}

void sub_216B18750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, pxrInternal__aapl__pxrReserved__::SdfPredicateExpression *this)
{
  pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::GetText(this, __p);
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = sub_216779180(a1, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_216B187EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::SdfPredicateExpression(uint64_t a1, long long *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91058, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91058))
  {
    qword_267B91050 = sub_216B1A890();
    __cxa_guard_release(&qword_267B91058);
  }
  uint64_t v6 = qword_267B91050;
  if (qword_267B91050)
  {
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/predicateExpressionParser.h";
    v21.__r_.__value_.__l.__size_ = (std::string::size_type)"Analyze";
    v21.__r_.__value_.__r.__words[2] = 408;
    long long v22 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Analyze() [Grammar = pxrInternal__aapl__pxrReser"
          "ved__::(anonymous namespace)::PredExpr]";
    char v23 = 0;
    int v24 = 4;
    sub_216779094(&v30, "Analyze");
    sub_216779094(&v29, "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Analyze() [Grammar = pxrInternal__aapl__pxrReserved__::(anonymous namespace)::PredExpr]");
    pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)&v30, &v29, &__dst);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v21, (pxrInternal__aapl__pxrReserved__ *)"%zu issues found in '%s'", v7, v6, p_dst);
  }
  sub_216B195F4((uint64_t)&v21);
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(void *)(a3 + 8)) {
      unint64_t v9 = *(char **)a3;
    }
    else {
      unint64_t v9 = "<input>";
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    unint64_t v9 = (char *)a3;
  }
  else
  {
    unint64_t v9 = "<input>";
  }
  uint64_t v16 = v9;
  sub_216B09CD4((unsigned __int8 *)&__dst, a2, &v16);
  if (!sub_216B3B5F4((uint64_t)&__dst, &v21) || (sub_2169C9784((uint64_t)&__dst) & 1) == 0 && v10)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    int v13 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii4eolfEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v13)
    {
      sub_216779094(&v29, v13);
      free(v13);
    }
    else
    {
      sub_216779094(&v29, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii4eolfEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    uint64_t v14 = std::string::insert(&v29, 0, "parse error matching ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v31 = v14->__r_.__value_.__r.__words[2];
    long long v30 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_2169C5604((uint64_t)exception, (uint64_t)&v30, (uint64_t)&__dst);
    __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
  }
  sub_2169C44E4((uint64_t)&__dst);
  sub_216B18DDC((uint64_t *)&v21, (uint64_t)&__dst);
  sub_216B081A0(a1, (uint64_t)&__dst);
  if (v20 < 0) {
    operator delete(__p);
  }
  *(void *)&long long v30 = &v18;
  sub_2169B5C28((void ***)&v30);
  if (__dst.__r_.__value_.__r.__words[0])
  {
    __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  sub_2169B5D08((void ***)&__dst);
  if (v27 < 0) {
    operator delete(v26);
  }
  if (v25 < 0) {
    operator delete(v22);
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  sub_216B19A20((void ***)&__dst);
  return a1;
}

void sub_216B18B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void *__pa, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::string *a21)
{
  __cxa_guard_abort(&qword_267B91058);
  if (*(char *)(v21 + 71) < 0) {
    operator delete(*a14);
  }
  *(void *)(v22 - 120) = v21 + 24;
  sub_2169B5C28((void ***)(v22 - 120));
  int v24 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

void sub_216B18C40()
{
}

void sub_216B18C64()
{
}

void sub_216B18C74()
{
}

void sub_216B18D94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x216B18C04);
}

void sub_216B18DDC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_216B19AB8((uint64_t *)(a1[1] - 48), a2);
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    do
    {
      v3 -= 48;
      sub_216B1995C((uint64_t)(a1 + 2), v3);
    }
    while (v3 != v4);
  }
  a1[1] = v4;
  uint64_t v6 = a1[9];
  for (uint64_t i = a1[10]; i != v6; sub_2169B5DA0((uint64_t)(a1 + 11), i))
    i -= 40;
  a1[10] = v6;
  if (*((char *)a1 + 47) < 0)
  {
    *(unsigned char *)a1[3] = 0;
    a1[4] = 0;
  }
  else
  {
    *((unsigned char *)a1 + 24) = 0;
    *((unsigned char *)a1 + 47) = 0;
  }
}

uint64_t sub_216B18E88(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 72);
  sub_2169B5D08(&v3);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v3 = (void **)a1;
  sub_216B19A20(&v3);
  return a1;
}

uint64_t sub_216B18EF4(void **a1, uint64_t a2)
{
  return ((uint64_t (*)(void, void, void))(*a1)[1])(**a1, *(unsigned int *)(*(void *)(a2 + 8) - 8), *(unsigned int *)(*(void *)(a2 + 8) - 4));
}

void sub_216B18F08(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int v6 = *(_DWORD *)(v4 - 8);
  int v5 = *(_DWORD *)(v4 - 4);
  uint64_t v7 = v4 - *a2;
  if ((unint64_t)v7 <= 8)
  {
    BOOL v10 = 0;
    BOOL v11 = v5 == 0;
  }
  else
  {
    uint64_t v8 = (v7 >> 3) - 2;
    int v9 = *(_DWORD *)(v3 + 8 * v8);
    if (v9 >= v6)
    {
      int v15 = *(_DWORD *)(v3 + 8 * v8 + 4);
      BOOL v10 = v9 == v6 && v15 == 2;
    }
    else
    {
      BOOL v10 = 1;
    }
    BOOL v11 = v5 == 0;
    if (v10 && !v5)
    {
      std::string::push_back(*(std::string **)(a1 + 16), 40);
      if (v6 != 1) {
        return;
      }
      BOOL v10 = 1;
LABEL_27:
      std::string::append(*(std::string **)(a1 + 16), "not ");
      if (!v10 || v5 != 1) {
        return;
      }
      goto LABEL_29;
    }
  }
  if (v6 != 1)
  {
    if (v5 == 1)
    {
      if (v6 == 4)
      {
        int v13 = *(std::string **)(a1 + 16);
        uint64_t v14 = " or ";
      }
      else if (v6 == 3)
      {
        int v13 = *(std::string **)(a1 + 16);
        uint64_t v14 = " and ";
      }
      else
      {
        int v13 = *(std::string **)(a1 + 16);
        if (v6 == 2) {
          uint64_t v14 = " ";
        }
        else {
          uint64_t v14 = "<unknown>";
        }
      }
      std::string::append(v13, v14);
      return;
    }
    if (v5 != 2 || !v10) {
      return;
    }
LABEL_29:
    unint64_t v17 = *(std::string **)(a1 + 16);
    std::string::push_back(v17, 41);
    return;
  }
  if (v11) {
    goto LABEL_27;
  }
  if (v5 == 1 && v10) {
    goto LABEL_29;
  }
}

void sub_216B19094(std::string **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  std::string::size_type v5 = *(unsigned __int8 *)(a2 + 31);
  std::string::size_type v6 = *(void *)(a2 + 16);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = (const std::string::value_type *)(a2 + 8);
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)(a2 + 8);
  }
  if ((v5 & 0x80u) == 0) {
    std::string::size_type v8 = v5;
  }
  else {
    std::string::size_type v8 = v6;
  }
  std::string::append(v4, v7, v8);
  if (*(_DWORD *)a2 == 2)
  {
    uint64_t v43 = a1;
    int v46 = 0;
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    uint64_t v24 = *(void *)(a2 + 32);
    for (uint64_t i = *(void *)(a2 + 40); v24 != i; v24 += 40)
    {
      if (*(char *)(v24 + 23) < 0)
      {
        if (*(void *)(v24 + 8))
        {
          char v27 = *(const char **)v24;
          uint64_t v26 = 1;
        }
        else
        {
          uint64_t v26 = 0;
          char v27 = "";
        }
      }
      else
      {
        uint64_t v26 = *(unsigned __int8 *)(v24 + 23);
        if (*(unsigned char *)(v24 + 23)) {
          char v27 = (const char *)v24;
        }
        else {
          char v27 = "";
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue((const std::string **)(v24 + 24), &v44);
      if (v26) {
        long long v30 = "=";
      }
      else {
        long long v30 = "";
      }
      std::string::size_type v31 = &v44;
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v31 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s%s", v28, v29, v27, v30, v31);
      uint64_t v32 = v47;
      if ((unint64_t)v47 >= v48)
      {
        unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)v46) >> 3);
        unint64_t v35 = v34 + 1;
        if (v34 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        if (0x5555555555555556 * ((uint64_t)(v48 - (void)v46) >> 3) > v35) {
          unint64_t v35 = 0x5555555555555556 * ((uint64_t)(v48 - (void)v46) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (void)v46) >> 3) >= 0x555555555555555) {
          unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v36 = v35;
        }
        int v51 = &v48;
        if (v36) {
          unint64_t v37 = (char *)sub_216782ED8((uint64_t)&v48, v36);
        }
        else {
          unint64_t v37 = 0;
        }
        std::string::size_type v38 = (std::string::size_type)&v37[24 * v34];
        v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
        v49.__r_.__value_.__l.__size_ = v38;
        uint64_t v50 = &v37[24 * v36];
        long long v39 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v38 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v38 = v39;
        memset(&__p, 0, sizeof(__p));
        v49.__r_.__value_.__r.__words[2] = v38 + 24;
        sub_216790CCC((uint64_t *)&v46, &v49);
        int v40 = v47;
        sub_216790E64((uint64_t)&v49);
        uint64_t v47 = v40;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v47->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
        memset(&__p, 0, sizeof(__p));
        uint64_t v47 = v32 + 1;
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
    }
    std::string::append(*v43, "(");
    if (v46 != v47)
    {
      pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", &v46, &v49);
      __int16 v41 = (v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v49
          : (std::string *)v49.__r_.__value_.__r.__words[0];
      std::string::size_type v42 = (v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v49.__r_.__value_.__r.__words[2])
          : v49.__r_.__value_.__l.__size_;
      std::string::append(*v43, (const std::string::value_type *)v41, v42);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
    }
    std::string::append(*v43, ")");
  }
  else
  {
    if (*(_DWORD *)a2 != 1) {
      return;
    }
    int v46 = 0;
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v10 = *(void *)(a2 + 40);
    if (v9 != v10)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue((const std::string **)(v9 + 24), &__p);
        BOOL v11 = v47;
        if ((unint64_t)v47 >= v48)
        {
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)v46) >> 3);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          if (0x5555555555555556 * ((uint64_t)(v48 - (void)v46) >> 3) > v14) {
            unint64_t v14 = 0x5555555555555556 * ((uint64_t)(v48 - (void)v46) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (void)v46) >> 3) >= 0x555555555555555) {
            unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v15 = v14;
          }
          int v51 = &v48;
          if (v15) {
            uint64_t v16 = (char *)sub_216782ED8((uint64_t)&v48, v15);
          }
          else {
            uint64_t v16 = 0;
          }
          std::string::size_type v17 = (std::string::size_type)&v16[24 * v13];
          v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
          v49.__r_.__value_.__l.__size_ = v17;
          uint64_t v50 = &v16[24 * v15];
          long long v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v17 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v17 = v18;
          memset(&__p, 0, sizeof(__p));
          v49.__r_.__value_.__r.__words[2] = v17 + 24;
          sub_216790CCC((uint64_t *)&v46, &v49);
          unint64_t v19 = v47;
          sub_216790E64((uint64_t)&v49);
          uint64_t v47 = v19;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v47->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
          uint64_t v47 = v11 + 1;
        }
        v9 += 40;
      }
      while (v9 != v10);
      if (v46 != v47)
      {
        pxrInternal__aapl__pxrReserved__::TfStringJoin(",", &v46, &__p);
        char v20 = std::string::insert(&__p, 0, ":");
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v49.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v22 = &v49;
        }
        else {
          uint64_t v22 = (std::string *)v49.__r_.__value_.__r.__words[0];
        }
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v49.__r_.__value_.__l.__size_;
        }
        std::string::append(*a1, (const std::string::value_type *)v22, size);
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  sub_216782F20((void ***)&v49);
}

void sub_216B1952C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  a20 = &a26;
  sub_216782F20((void ***)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_216B195F4(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_216B1967C((uint64_t *)a1);
  return a1;
}

void sub_216B19634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 72);
  sub_2169B5D08(&a10);
  if (*(char *)(v10 + 71) < 0) {
    operator delete(*(void **)(v10 + 48));
  }
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*(void **)(v10 + 24));
  }
  a10 = (void **)v10;
  sub_216B19A20(&a10);
  _Unwind_Resume(a1);
}

void **sub_216B1967C(uint64_t *a1)
{
  unint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v3 = v4;
  std::string::size_type v5 = *(result - 1);
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 4);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0x555555555555555) {
      sub_21677CB10();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    v13[4] = result;
    if (v10) {
      BOOL v11 = (char *)sub_2168073F4((uint64_t)result, v10);
    }
    else {
      BOOL v11 = 0;
    }
    long long v12 = &v11[48 * v7];
    v13[0] = v11;
    v13[1] = v12;
    void v13[3] = &v11[48 * v10];
    *(_OWORD *)long long v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    v13[2] = v12 + 48;
    sub_216B19794(a1, v13);
    std::string::size_type v6 = (_OWORD *)a1[1];
    uint64_t result = sub_216B199A4(v13);
  }
  else
  {
    v5[1] = 0u;
    v5[2] = 0u;
    _OWORD *v5 = 0u;
    std::string::size_type v6 = v5 + 3;
    a1[1] = (uint64_t)(v5 + 3);
  }
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_216B19780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B199A4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B19794(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216B1980C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216B1980C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      long long v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(v7 - 32) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 8) = *(void *)(a3 + 40);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216B198D0((uint64_t)v11);
  return v9;
}

uint64_t sub_216B198D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216B19908((uint64_t *)a1);
  }
  return a1;
}

void sub_216B19908(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_216B1995C(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void sub_216B1995C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void **)(a2 + 24);
  sub_2169B5B38(&v4);
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void **sub_216B199A4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216B199D8(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_216B1995C(v4, i - 48);
  }
}

void sub_216B19A20(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_216B1995C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216B19AB8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  for (uint64_t i = a1[1]; v4 != i; uint64_t i = a1[1])
  {
    sub_216B19B74(a1);
    uint64_t v4 = *a1;
  }
  uint64_t v6 = a1[4];
  *(_OWORD *)a2 = *(_OWORD *)(v6 - 72);
  *(void *)(a2 + 16) = *(void *)(v6 - 56);
  *(void *)(v6 - 72) = 0;
  *(void *)(v6 - 64) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v6 - 48);
  *(void *)(a2 + 40) = *(void *)(v6 - 32);
  *(void *)(v6 - 56) = 0;
  *(void *)(v6 - 48) = 0;
  *(void *)(v6 - 40) = 0;
  *(void *)(v6 - 32) = 0;
  long long v7 = *(_OWORD *)(v6 - 24);
  *(void *)(a2 + 64) = *(void *)(v6 - 8);
  *(_OWORD *)(a2 + 48) = v7;
  *(void *)(v6 - 24) = 0;
  *(void *)(v6 - 16) = 0;
  *(void *)(v6 - 8) = 0;
  uint64_t v9 = a1[3];
  for (uint64_t j = a1[4]; j != v9; sub_2169B5BD0((uint64_t)(a1 + 5), j))
    j -= 72;
  a1[4] = v9;
}

void sub_216B19B74(void *a1)
{
  uint64_t v2 = a1[1];
  int v3 = *(_DWORD *)(v2 - 4);
  a1[1] = v2 - 4;
  uint64_t v4 = a1 + 3;
  uint64_t v5 = a1[4];
  __n128 v31 = *(__n128 *)(v5 - 72);
  uint64_t v32 = *(void *)(v5 - 56);
  *(void *)(v5 - 72) = 0;
  *(void *)(v5 - 64) = 0;
  *(void *)(v5 - 56) = 0;
  long long v33 = *(_OWORD *)(v5 - 48);
  uint64_t v34 = *(void *)(v5 - 32);
  *(void *)(v5 - 48) = 0;
  *(void *)(v5 - 40) = 0;
  *(void *)(v5 - 32) = 0;
  long long v6 = *(_OWORD *)(v5 - 24);
  uint64_t v36 = *(void *)(v5 - 8);
  long long v35 = v6;
  *(void *)(v5 - 16) = 0;
  *(void *)(v5 - 8) = 0;
  *(void *)(v5 - 24) = 0;
  uint64_t v7 = a1[4];
  uint64_t v8 = (uint64_t)(a1 + 5);
  sub_2169B5BD0((uint64_t)(a1 + 5), v7 - 72);
  a1[4] = v7 - 72;
  if (v3 == 1)
  {
    pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::MakeNot((uint64_t)&v31, (uint64_t)v25);
    unint64_t v9 = a1[4];
    if (v9 >= a1[5])
    {
      uint64_t v15 = sub_216B09D80(v4, (uint64_t)v25);
      int v16 = SHIBYTE(v30);
      a1[4] = v15;
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)unint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v25;
      *(void *)(v9 + 16) = v26;
      v25[0] = 0;
      v25[1] = 0;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      *(_OWORD *)(v9 + 24) = v27;
      *(void *)(v9 + 40) = v28;
      uint64_t v26 = 0;
      long long v27 = 0uLL;
      uint64_t v28 = 0;
      long long v10 = *(_OWORD *)__p;
      *(void *)(v9 + 64) = v30;
      *(_OWORD *)(v9 + 48) = v10;
      __p[1] = 0;
      uint64_t v30 = 0;
      __p[0] = 0;
      a1[4] = v9 + 72;
    }
    v19[0] = &v27;
  }
  else
  {
    *(_OWORD *)char v25 = *(_OWORD *)(v7 - 144);
    uint64_t v26 = *(void *)(v7 - 128);
    *(void *)(v7 - 144) = 0;
    *(void *)(v7 - 136) = 0;
    *(void *)(v7 - 128) = 0;
    long long v27 = *(_OWORD *)(v7 - 120);
    uint64_t v28 = *(void *)(v7 - 104);
    *(void *)(v7 - 120) = 0;
    *(void *)(v7 - 112) = 0;
    *(void *)(v7 - 104) = 0;
    long long v11 = *(_OWORD *)(v7 - 96);
    uint64_t v30 = *(void *)(v7 - 80);
    *(_OWORD *)std::string __p = v11;
    *(void *)(v7 - 88) = 0;
    *(void *)(v7 - 80) = 0;
    *(void *)(v7 - 96) = 0;
    uint64_t v12 = a1[4] - 72;
    sub_2169B5BD0(v8, v12);
    a1[4] = v12;
    pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::MakeOp(v3, (uint64_t)v25, &v31, (uint64_t)v19);
    unint64_t v13 = a1[4];
    if (v13 >= a1[5])
    {
      uint64_t v17 = sub_216B09D80(v4, (uint64_t)v19);
      int v18 = SHIBYTE(v24);
      a1[4] = v17;
      if (v18 < 0) {
        operator delete(v23[0]);
      }
    }
    else
    {
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 24) = 0;
      *(void *)unint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v19;
      *(void *)(v13 + 16) = v20;
      v19[0] = 0;
      v19[1] = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 40) = 0;
      *(_OWORD *)(v13 + 24) = v21;
      *(void *)(v13 + 40) = v22;
      uint64_t v20 = 0;
      long long v21 = 0uLL;
      uint64_t v22 = 0;
      long long v14 = *(_OWORD *)v23;
      *(void *)(v13 + 64) = v24;
      *(_OWORD *)(v13 + 48) = v14;
      v23[1] = 0;
      uint64_t v24 = 0;
      v23[0] = 0;
      a1[4] = v13 + 72;
    }
    unint64_t v37 = (void **)&v21;
    sub_2169B5C28(&v37);
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
    v19[0] = &v27;
  }
  sub_2169B5C28((void ***)v19);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete((void *)v35);
  }
  v25[0] = &v33;
  sub_2169B5C28((void ***)v25);
  if (v31.n128_u64[0])
  {
    v31.n128_u64[1] = v31.n128_u64[0];
    operator delete((void *)v31.n128_u64[0]);
  }
}

void sub_216B19E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_216B00F28((uint64_t)&a9);
  sub_216B00F28((uint64_t)&a19);
  sub_216B00F28(v19 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_216B19E98(uint64_t a1)
{
  int v3 = (void **)(a1 + 32);
  sub_2169B5D08(&v3);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_216B19EE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    unint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 3) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - a2) >> 3) >= a5)
      {
        uint64_t v21 = a3 + 56 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = sub_216B1A268((uint64_t)v9, v21, a4, *(v9 - 1));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_216B1A114((uint64_t)a1, v5, v12, v5 + 56 * a5);
      sub_216B1A3DC((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x492492492492492) {
        sub_21677CB10();
      }
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v13) >> 3);
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x249249249249249) {
        unint64_t v18 = 0x492492492492492;
      }
      else {
        unint64_t v18 = v17;
      }
      v26[4] = v9;
      if (v18) {
        uint64_t v19 = (char *)sub_2167B421C((uint64_t)v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v22 = &v19[56 * v15];
      v26[0] = v19;
      v26[1] = v22;
      v26[3] = &v19[56 * v18];
      char v23 = &v22[56 * a5];
      do
      {
        *(_DWORD *)uint64_t v22 = *(_DWORD *)v7;
        long long v24 = *(_OWORD *)(v7 + 8);
        *((void *)v22 + 3) = *(void *)(v7 + 24);
        *(_OWORD *)(v22 + 8) = v24;
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 8) = 0;
        *((void *)v22 + 4) = 0;
        *((void *)v22 + 5) = 0;
        *((void *)v22 + 6) = 0;
        *((_OWORD *)v22 + 2) = *(_OWORD *)(v7 + 32);
        *((void *)v22 + 6) = *(void *)(v7 + 48);
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 40) = 0;
        *(void *)(v7 + 48) = 0;
        v22 += 56;
        v7 += 56;
      }
      while (v22 != v23);
      v26[2] = v23;
      uint64_t v5 = sub_216B1A1B4(a1, v26, v5);
      sub_216B1A5D4(v26);
    }
  }
  return v5;
}

void sub_216B1A0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B1A114(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
      long long v10 = *(_OWORD *)(v9 + 8);
      *(void *)(v8 + 24) = *(void *)(v9 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 8) = 0;
      *(void *)(v8 + 32) = 0;
      *(void *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
      *(void *)(v8 + 48) = *(void *)(v9 + 48);
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      v8 += 56;
      v9 += 56;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_216B1A318((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_216B1A1B4(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_216B1A484((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_216B1A268(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_216B1A268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
      long long v5 = *(_OWORD *)(a2 + 8);
      *(void *)(v4 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)(v4 + 8) = v5;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 40) = 0;
      *(void *)(v4 + 48) = 0;
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(v4 + 48) = *(void *)(a2 + 48);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      v4 += 56;
      a2 += 56;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_2169B8048((uint64_t)v7);
  return v4;
}

uint64_t sub_216B1A318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      *(_DWORD *)(a4 + v7 - 56) = *(_DWORD *)(a3 + v7 - 56);
      uint64_t v10 = (void **)(a4 + v7 - 48);
      if (*(char *)(a4 + v7 - 25) < 0) {
        operator delete(*v10);
      }
      long long v11 = *(_OWORD *)(v8 - 48);
      *(void *)(a4 + v7 - 32) = *(void *)(v8 - 32);
      *(_OWORD *)uint64_t v10 = v11;
      *(unsigned char *)(v8 - 25) = 0;
      *(unsigned char *)(v8 - 48) = 0;
      sub_216B027AC((void **)(v9 - 24));
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(v8 - 24);
      *(void *)(v9 - 8) = *(void *)(v8 - 8);
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      v7 -= 56;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_216B1A3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v5;
      uint64_t v7 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*v7);
      }
      long long v8 = *(_OWORD *)(v5 + 8);
      *(void *)(a4 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v5 + 31) = 0;
      *(unsigned char *)(v5 + 8) = 0;
      sub_216B027AC((void **)(a4 + 32));
      *(_OWORD *)(a4 + 32) = *(_OWORD *)(v5 + 32);
      *(void *)(a4 + 48) = *(void *)(v5 + 48);
      *(void *)(v5 + 32) = 0;
      *(void *)(v5 + 40) = 0;
      *(void *)(v5 + 48) = 0;
      a4 += 56;
      v5 += 56;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_216B1A484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      int v8 = *(_DWORD *)(a3 - 56);
      a3 -= 56;
      *(_DWORD *)(v7 - 56) = v8;
      long long v9 = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 32) = *(void *)(a3 + 24);
      *(_OWORD *)(v7 - 48) = v9;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 32);
      *(void *)(v7 - 8) = *(void *)(a3 + 48);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 56;
      *((void *)&v15 + 1) -= 56;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216B1A548((uint64_t)v12);
  return v10;
}

uint64_t sub_216B1A548(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216B1A580((uint64_t *)a1);
  }
  return a1;
}

void sub_216B1A580(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_2169B5CC0(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **sub_216B1A5D4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216B1A608(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    sub_2169B5CC0(v4, i - 56);
  }
}

uint64_t sub_216B1A650(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  uint64_t v10 = (char *)sub_2167B421C(v7, v9);
  long long v11 = &v10[56 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[56 * v12];
  *(_DWORD *)long long v11 = *(_DWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 24);
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = v13;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  v16[2] = v11 + 56;
  sub_216B1A794(a1, v16);
  uint64_t v14 = a1[1];
  sub_216B1A5D4(v16);
  return v14;
}

void sub_216B1A780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B1A5D4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B1A794(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216B1A484((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_216B1A80C(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_216B1A874(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B1A890()
{
  v7[0] = 1;
  unsigned int v8 = 0;
  unint64_t v9 = (uint64_t *)v10;
  v10[0] = 0;
  v12[0] = 0;
  v12[1] = 0;
  v10[1] = 0;
  long long v11 = v12;
  uint64_t v13 = &v14;
  uint64_t v14 = 0;
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v15 = 0;
  unint64_t v16 = v17;
  sub_216B1AAA8(&v9, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  int v0 = v9;
  if (v9 != (uint64_t *)v10)
  {
    do
    {
      uint64_t v20 = v0;
      BOOL v1 = sub_216B3B12C((uint64_t)v7, (uint64_t *)&v20, 0);
      __p[0] = v0 + 4;
      *((unsigned char *)sub_216855CF4((uint64_t **)&v16, (const void **)v0 + 4, (uint64_t)&unk_2174BFD90, (long long **)__p) + 56) = v1;
      sub_21678A498((uint64_t)&v13, v14);
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v13 = &v14;
      uint64_t v2 = (uint64_t *)v0[1];
      if (v2)
      {
        do
        {
          uint64_t v3 = v2;
          uint64_t v2 = (uint64_t *)*v2;
        }
        while (v2);
      }
      else
      {
        do
        {
          uint64_t v3 = (uint64_t *)v0[2];
          BOOL v4 = *v3 == (void)v0;
          int v0 = v3;
        }
        while (!v4);
      }
      int v0 = v3;
    }
    while (v3 != (uint64_t *)v10);
  }
  uint64_t v5 = v8;
  sub_21678A498((uint64_t)&v16, v17[0]);
  sub_21678A498((uint64_t)&v13, v14);
  sub_21678A498((uint64_t)&v11, v12[0]);
  sub_216B3B0D0((uint64_t)&v9, v10[0]);
  return v5;
}

void sub_216B1AA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, char *a20)
{
  sub_21678A498(v23, a20);
  sub_21678A498(v22, a17);
  sub_21678A498(v21, a14);
  sub_216B3B0D0(v20, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_216B1AA54(uint64_t a1)
{
  return a1;
}

void sub_216B1AAA8(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    sub_216779094(v69, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v69, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v66[0]) = 2;
  *(_OWORD *)std::string __p = *(_OWORD *)v69;
  int v72 = v70;
  v69[0] = 0;
  v69[1] = 0;
  int v70 = 0;
  LOBYTE(v73) = 2;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  unint64_t v74 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  v66[1] = 0;
  uint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  v64[0] = &v74;
  sub_216782F20((void ***)v64);
  if (SHIBYTE(v72) < 0) {
    operator delete(__p[0]);
  }
  v64[0] = &v66[1];
  sub_216782F20((void ***)v64);
  if (SHIBYTE(v70) < 0) {
    operator delete(v69[0]);
  }
  if (v8)
  {
    sub_216B1B264(a1, (uint64_t)v64);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      unint64_t v74 = v6 + 10;
      if (v17) {
        unint64_t v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        unint64_t v18 = 0;
      }
      char v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      v73 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v64;
      *((void *)v19 + 2) = v65;
      *(_OWORD *)char v19 = v20;
      v64[1] = 0;
      uint64_t v65 = 0;
      v64[0] = 0;
      int v72 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v64;
      *(void *)(v11 + 16) = v65;
      *(_OWORD *)unint64_t v11 = v12;
      v64[1] = 0;
      uint64_t v65 = 0;
      v64[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    uint64_t v21 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4starINS0_2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS4_10PredFactorEEEEJS5_S6_EEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v21)
    {
      sub_216779094(v69, v21);
      free(v21);
    }
    else
    {
      sub_216779094(v69, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4starINS0_2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS4_10PredFactorEEEEJS5_S6_EEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v66[0]) = 1;
    *(_OWORD *)std::string __p = *(_OWORD *)v69;
    int v72 = v70;
    v69[0] = 0;
    v69[1] = 0;
    int v70 = 0;
    LOBYTE(v73) = 1;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    unint64_t v74 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    v66[1] = 0;
    uint64_t v22 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
    char v24 = v23;
    v77[0] = (void **)&v74;
    sub_216782F20(v77);
    if (SHIBYTE(v72) < 0) {
      operator delete(__p[0]);
    }
    v77[0] = &v66[1];
    sub_216782F20(v77);
    if (SHIBYTE(v70) < 0) {
      operator delete(v69[0]);
    }
    if (v24)
    {
      sub_216B38290(a1, (uint64_t)v66);
      char v25 = v22 + 8;
      unint64_t v26 = v22[10];
      unint64_t v27 = v22[9];
      if (v27 >= v26)
      {
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v25) >> 3);
        unint64_t v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v25) >> 3);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v31;
        }
        unint64_t v74 = v22 + 10;
        if (v33) {
          uint64_t v34 = (char *)sub_216782ED8((uint64_t)(v22 + 10), v33);
        }
        else {
          uint64_t v34 = 0;
        }
        long long v35 = &v34[24 * v30];
        __p[0] = v34;
        __p[1] = v35;
        v73 = &v34[24 * v33];
        long long v36 = *(_OWORD *)v66;
        *((void *)v35 + 2) = v67;
        *(_OWORD *)long long v35 = v36;
        v66[1] = 0;
        uint64_t v67 = 0;
        v66[0] = 0;
        int v72 = v35 + 24;
        sub_216790CCC(v22 + 8, __p);
        uint64_t v29 = v22[9];
        sub_216790E64((uint64_t)__p);
      }
      else
      {
        long long v28 = *(_OWORD *)v66;
        *(void *)(v27 + 16) = v67;
        *(_OWORD *)unint64_t v27 = v28;
        v66[1] = 0;
        uint64_t v67 = 0;
        v66[0] = 0;
        uint64_t v29 = v27 + 24;
        v22[9] = v27 + 24;
      }
      v22[9] = v29;
      sub_216B38DA4(a1, (uint64_t)v69);
      unint64_t v38 = v22[9];
      unint64_t v37 = v22[10];
      if (v38 >= v37)
      {
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v25) >> 3);
        unint64_t v41 = v40 + 1;
        if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v25) >> 3);
        if (2 * v42 > v41) {
          unint64_t v41 = 2 * v42;
        }
        if (v42 >= 0x555555555555555) {
          unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v43 = v41;
        }
        unint64_t v74 = v22 + 10;
        if (v43) {
          std::string v44 = (char *)sub_216782ED8((uint64_t)(v22 + 10), v43);
        }
        else {
          std::string v44 = 0;
        }
        unint64_t v45 = &v44[24 * v40];
        __p[0] = v44;
        __p[1] = v45;
        v73 = &v44[24 * v43];
        long long v46 = *(_OWORD *)v69;
        *((void *)v45 + 2) = v70;
        *(_OWORD *)unint64_t v45 = v46;
        v69[1] = 0;
        int v70 = 0;
        v69[0] = 0;
        int v72 = v45 + 24;
        sub_216790CCC(v22 + 8, __p);
        uint64_t v47 = v22[9];
        sub_216790E64((uint64_t)__p);
        int v48 = SHIBYTE(v70);
        v22[9] = v47;
        if (v48 < 0) {
          operator delete(v69[0]);
        }
      }
      else
      {
        long long v39 = *(_OWORD *)v69;
        *(void *)(v38 + 16) = v70;
        *(_OWORD *)unint64_t v38 = v39;
        v22[9] = v38 + 24;
      }
      if (SHIBYTE(v67) < 0) {
        operator delete(v66[0]);
      }
    }
    if (*((char *)v22 + 55) < 0)
    {
      sub_216778F24(v62, (void *)v22[4], v22[5]);
    }
    else
    {
      *(_OWORD *)uint64_t v62 = *((_OWORD *)v22 + 2);
      uint64_t v63 = v22[6];
    }
    unint64_t v50 = v6[9];
    unint64_t v49 = v6[10];
    if (v50 >= v49)
    {
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *v10) >> 3);
      unint64_t v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *v10) >> 3);
      if (2 * v54 > v53) {
        unint64_t v53 = 2 * v54;
      }
      if (v54 >= 0x555555555555555) {
        unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v55 = v53;
      }
      unint64_t v74 = v6 + 10;
      if (v55) {
        uint64_t v56 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v55);
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t v57 = &v56[24 * v52];
      __p[0] = v56;
      __p[1] = v57;
      v73 = &v56[24 * v55];
      long long v58 = *(_OWORD *)v62;
      *((void *)v57 + 2) = v63;
      *(_OWORD *)uint64_t v57 = v58;
      v62[1] = 0;
      uint64_t v63 = 0;
      v62[0] = 0;
      int v72 = v57 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v59 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v60 = SHIBYTE(v63);
      v6[9] = v59;
      if (v60 < 0) {
        operator delete(v62[0]);
      }
    }
    else
    {
      long long v51 = *(_OWORD *)v62;
      *(void *)(v50 + 16) = v63;
      *(_OWORD *)unint64_t v50 = v51;
      v6[9] = v50 + 24;
    }
    if (SHIBYTE(v65) < 0) {
      operator delete(v64[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v61 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v61;
  }
}

void sub_216B1B14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_216B1B264(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredFactorE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    BOOL v4 = v3;
    sub_216779094(&v722, v3);
    free(v4);
  }
  else
  {
    sub_216779094(&v722, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredFactorE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v719) = 2;
  long long v724 = v722;
  v725 = v723;
  long long v722 = 0uLL;
  v723 = 0;
  LOBYTE(v726) = 2;
  uint64_t v728 = 0;
  uint64_t v729 = 0;
  v727 = 0;
  uint64_t v720 = 0;
  uint64_t v721 = 0;
  *((void *)&v719 + 1) = 0;
  v692 = sub_216B20DE4(a1, (const void **)&v724, &v724);
  char v6 = v5;
  *(void *)&long long v717 = &v727;
  sub_216782F20((void ***)&v717);
  if (SHIBYTE(v725) < 0) {
    operator delete((void *)v724);
  }
  *(void *)&long long v717 = (char *)&v719 + 8;
  sub_216782F20((void ***)&v717);
  if (SHIBYTE(v723) < 0) {
    operator delete((void *)v722);
  }
  char v7 = v692;
  if (v6)
  {
    char v8 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJNS0_3padINS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWENS0_4plusINS0_5ascii5blankEJEEEvEES9_S9_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v8)
    {
      unint64_t v9 = v8;
      sub_216779094(&v722, v8);
      free(v9);
    }
    else
    {
      sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJNS0_3padINS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWENS0_4plusINS0_5ascii5blankEJEEEvEES9_S9_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v719) = 1;
    long long v724 = v722;
    v725 = v723;
    long long v722 = 0uLL;
    v723 = 0;
    LOBYTE(v726) = 1;
    uint64_t v728 = 0;
    uint64_t v729 = 0;
    v727 = 0;
    uint64_t v720 = 0;
    uint64_t v721 = 0;
    *((void *)&v719 + 1) = 0;
    uint64_t v10 = sub_216B20DE4(a1, (const void **)&v724, &v724);
    char v12 = v11;
    *(void *)&long long v717 = &v727;
    sub_216782F20((void ***)&v717);
    if (SHIBYTE(v725) < 0) {
      operator delete((void *)v724);
    }
    *(void *)&long long v717 = (char *)&v719 + 8;
    sub_216782F20((void ***)&v717);
    if (SHIBYTE(v723) < 0) {
      operator delete((void *)v722);
    }
    if (v12)
    {
      uint64_t v13 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padINS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWENS0_4plusINS0_5ascii5blankEJEEEvEES8_S8_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v13)
      {
        unint64_t v14 = v13;
        sub_216779094(&v722, v13);
        free(v14);
      }
      else
      {
        sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padINS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWENS0_4plusINS0_5ascii5blankEJEEEvEES8_S8_EE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v719) = 2;
      long long v724 = v722;
      v725 = v723;
      long long v722 = 0uLL;
      v723 = 0;
      LOBYTE(v726) = 2;
      uint64_t v728 = 0;
      uint64_t v729 = 0;
      v727 = 0;
      uint64_t v720 = 0;
      uint64_t v721 = 0;
      *((void *)&v719 + 1) = 0;
      unint64_t v15 = sub_216B20DE4(a1, (const void **)&v724, &v724);
      char v17 = v16;
      *(void *)&long long v717 = &v727;
      sub_216782F20((void ***)&v717);
      if (SHIBYTE(v725) < 0) {
        operator delete((void *)v724);
      }
      *(void *)&long long v717 = (char *)&v719 + 8;
      sub_216782F20((void ***)&v717);
      if (SHIBYTE(v723) < 0) {
        operator delete((void *)v722);
      }
      if (v17)
      {
        sub_216B20FFC(a1, (uint64_t)v713);
        unint64_t v18 = v15[10];
        char v19 = v15 + 8;
        unint64_t v20 = v15[9];
        if (v20 >= v18)
        {
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v19) >> 3);
          unint64_t v24 = v23 + 1;
          if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v19) >> 3);
          if (2 * v25 > v24) {
            unint64_t v24 = 2 * v25;
          }
          if (v25 >= 0x555555555555555) {
            unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v26 = v24;
          }
          v727 = v15 + 10;
          if (v26) {
            unint64_t v27 = (char *)sub_216782ED8((uint64_t)(v15 + 10), v26);
          }
          else {
            unint64_t v27 = 0;
          }
          long long v28 = &v27[24 * v23];
          *(void *)&long long v724 = v27;
          *((void *)&v724 + 1) = v28;
          v726 = &v27[24 * v26];
          long long v29 = *(_OWORD *)v713;
          *((void *)v28 + 2) = v714;
          *(_OWORD *)long long v28 = v29;
          v713[1] = 0;
          uint64_t v714 = 0;
          v713[0] = 0;
          v725 = v28 + 24;
          sub_216790CCC(v15 + 8, &v724);
          uint64_t v22 = v15[9];
          sub_216790E64((uint64_t)&v724);
        }
        else
        {
          long long v21 = *(_OWORD *)v713;
          *(void *)(v20 + 16) = v714;
          *(_OWORD *)unint64_t v20 = v21;
          v713[1] = 0;
          uint64_t v714 = 0;
          v713[0] = 0;
          uint64_t v22 = v20 + 24;
          v15[9] = v20 + 24;
        }
        v15[9] = v22;
        unint64_t v30 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWENS0_4plusINS0_5ascii5blankEJEEEvEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v30)
        {
          sub_216779094(&v722, v30);
          free(v30);
        }
        else
        {
          sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWENS0_4plusINS0_5ascii5blankEJEEEvEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v719) = 2;
        long long v724 = v722;
        v725 = v723;
        long long v722 = 0uLL;
        v723 = 0;
        LOBYTE(v726) = 2;
        uint64_t v728 = 0;
        uint64_t v729 = 0;
        v727 = 0;
        uint64_t v720 = 0;
        uint64_t v721 = 0;
        *((void *)&v719 + 1) = 0;
        unint64_t v31 = sub_216B20DE4(a1, (const void **)&v724, &v724);
        char v33 = v32;
        *(void *)&long long v717 = &v727;
        sub_216782F20((void ***)&v717);
        if (SHIBYTE(v725) < 0) {
          operator delete((void *)v724);
        }
        *(void *)&long long v717 = (char *)&v719 + 8;
        sub_216782F20((void ***)&v717);
        if (SHIBYTE(v723) < 0) {
          operator delete((void *)v722);
        }
        uint64_t v34 = v15 + 8;
        if (v33)
        {
          sub_216B216D4(a1, (uint64_t)&v717);
          long long v35 = v31 + 8;
          unint64_t v36 = v31[10];
          unint64_t v37 = v31[9];
          v688 = v31 + 8;
          if (v37 >= v36)
          {
            unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v35) >> 3);
            unint64_t v41 = v40 + 1;
            if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *v35) >> 3);
            if (2 * v42 > v41) {
              unint64_t v41 = 2 * v42;
            }
            if (v42 >= 0x555555555555555) {
              unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v43 = v41;
            }
            v727 = v31 + 10;
            if (v43) {
              std::string v44 = (char *)sub_216782ED8((uint64_t)(v31 + 10), v43);
            }
            else {
              std::string v44 = 0;
            }
            unint64_t v45 = &v44[24 * v40];
            *(void *)&long long v724 = v44;
            *((void *)&v724 + 1) = v45;
            v726 = &v44[24 * v43];
            long long v46 = v717;
            *((void *)v45 + 2) = v718;
            *(_OWORD *)unint64_t v45 = v46;
            uint64_t v718 = 0;
            long long v717 = 0uLL;
            v725 = v45 + 24;
            sub_216790CCC(v31 + 8, &v724);
            uint64_t v39 = v31[9];
            sub_216790E64((uint64_t)&v724);
          }
          else
          {
            long long v38 = v717;
            *(void *)(v37 + 16) = v718;
            *(_OWORD *)unint64_t v37 = v38;
            uint64_t v718 = 0;
            long long v717 = 0uLL;
            uint64_t v39 = v37 + 24;
            v31[9] = v37 + 24;
          }
          v31[9] = v39;
          uint64_t v47 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_4plusINS0_5ascii5blankEJEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v47)
          {
            sub_216779094(&v722, v47);
            free(v47);
          }
          else
          {
            sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_4plusINS0_5ascii5blankEJEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v719) = 1;
          long long v724 = v722;
          v725 = v723;
          long long v722 = 0uLL;
          v723 = 0;
          LOBYTE(v726) = 1;
          uint64_t v728 = 0;
          uint64_t v729 = 0;
          v727 = 0;
          uint64_t v720 = 0;
          uint64_t v721 = 0;
          *((void *)&v719 + 1) = 0;
          int v48 = sub_216B20DE4(a1, (const void **)&v724, &v724);
          char v50 = v49;
          v706[0] = &v727;
          sub_216782F20((void ***)v706);
          if (SHIBYTE(v725) < 0) {
            operator delete((void *)v724);
          }
          v706[0] = (char *)&v719 + 8;
          sub_216782F20((void ***)v706);
          if (SHIBYTE(v723) < 0) {
            operator delete((void *)v722);
          }
          uint64_t v34 = v15 + 8;
          if (v50)
          {
            sub_216B2228C(a1, (uint64_t)&v719);
            long long v51 = v48 + 8;
            unint64_t v52 = v48[10];
            unint64_t v53 = v48[9];
            if (v53 >= v52)
            {
              unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *v51) >> 3);
              unint64_t v57 = v56 + 1;
              if (v56 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *v51) >> 3);
              if (2 * v58 > v57) {
                unint64_t v57 = 2 * v58;
              }
              if (v58 >= 0x555555555555555) {
                unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v59 = v57;
              }
              v727 = v48 + 10;
              if (v59) {
                int v60 = (char *)sub_216782ED8((uint64_t)(v48 + 10), v59);
              }
              else {
                int v60 = 0;
              }
              long long v61 = &v60[24 * v56];
              *(void *)&long long v724 = v60;
              *((void *)&v724 + 1) = v61;
              v726 = &v60[24 * v59];
              long long v62 = v719;
              *((void *)v61 + 2) = v720;
              *(_OWORD *)long long v61 = v62;
              uint64_t v720 = 0;
              long long v719 = 0uLL;
              v725 = v61 + 24;
              sub_216790CCC(v48 + 8, &v724);
              uint64_t v55 = v48[9];
              sub_216790E64((uint64_t)&v724);
            }
            else
            {
              long long v54 = v719;
              *(void *)(v53 + 16) = v720;
              *(_OWORD *)unint64_t v53 = v54;
              uint64_t v720 = 0;
              long long v719 = 0uLL;
              uint64_t v55 = v53 + 24;
              v48[9] = v53 + 24;
            }
            v48[9] = v55;
            sub_216B22698(a1, (uint64_t)&v722);
            unint64_t v64 = v48[9];
            unint64_t v63 = v48[10];
            if (v64 >= v63)
            {
              unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - *v51) >> 3);
              unint64_t v67 = v66 + 1;
              if (v66 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - *v51) >> 3);
              if (2 * v68 > v67) {
                unint64_t v67 = 2 * v68;
              }
              if (v68 >= 0x555555555555555) {
                unint64_t v69 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v69 = v67;
              }
              v727 = v48 + 10;
              if (v69) {
                int v70 = (char *)sub_216782ED8((uint64_t)(v48 + 10), v69);
              }
              else {
                int v70 = 0;
              }
              unint64_t v71 = &v70[24 * v66];
              *(void *)&long long v724 = v70;
              *((void *)&v724 + 1) = v71;
              v726 = &v70[24 * v69];
              long long v72 = v722;
              *((void *)v71 + 2) = v723;
              *(_OWORD *)unint64_t v71 = v72;
              v723 = 0;
              long long v722 = 0uLL;
              v725 = v71 + 24;
              sub_216790CCC(v48 + 8, &v724);
              uint64_t v73 = v48[9];
              sub_216790E64((uint64_t)&v724);
              int v74 = SHIBYTE(v723);
              v48[9] = v73;
              uint64_t v34 = v15 + 8;
              if (v74 < 0) {
                operator delete((void *)v722);
              }
            }
            else
            {
              long long v65 = v722;
              *(void *)(v64 + 16) = v723;
              *(_OWORD *)unint64_t v64 = v65;
              v48[9] = v64 + 24;
              uint64_t v34 = v15 + 8;
            }
            if (SHIBYTE(v720) < 0) {
              operator delete((void *)v719);
            }
          }
          if (*((char *)v48 + 55) < 0)
          {
            sub_216778F24(__p, (void *)v48[4], v48[5]);
          }
          else
          {
            *(_OWORD *)std::string __p = *((_OWORD *)v48 + 2);
            uint64_t v716 = v48[6];
          }
          unint64_t v76 = v31[9];
          unint64_t v75 = v31[10];
          if (v76 >= v75)
          {
            unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - *v688) >> 3);
            unint64_t v79 = v78 + 1;
            if (v78 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - *v688) >> 3);
            if (2 * v80 > v79) {
              unint64_t v79 = 2 * v80;
            }
            if (v80 >= 0x555555555555555) {
              unint64_t v81 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v81 = v79;
            }
            v727 = v31 + 10;
            if (v81) {
              uint64_t v82 = (char *)sub_216782ED8((uint64_t)(v31 + 10), v81);
            }
            else {
              uint64_t v82 = 0;
            }
            uint64_t v83 = &v82[24 * v78];
            *(void *)&long long v724 = v82;
            *((void *)&v724 + 1) = v83;
            v726 = &v82[24 * v81];
            long long v84 = *(_OWORD *)__p;
            *((void *)v83 + 2) = v716;
            *(_OWORD *)uint64_t v83 = v84;
            __p[1] = 0;
            uint64_t v716 = 0;
            __p[0] = 0;
            v725 = v83 + 24;
            sub_216790CCC(v688, &v724);
            uint64_t v85 = v31[9];
            sub_216790E64((uint64_t)&v724);
            int v86 = SHIBYTE(v716);
            v31[9] = v85;
            if (v86 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v77 = *(_OWORD *)__p;
            *(void *)(v76 + 16) = v716;
            *(_OWORD *)unint64_t v76 = v77;
            v31[9] = v76 + 24;
          }
          if (SHIBYTE(v718) < 0) {
            operator delete((void *)v717);
          }
        }
        if (*((char *)v31 + 55) < 0)
        {
          sub_216778F24(__dst, (void *)v31[4], v31[5]);
        }
        else
        {
          *(_OWORD *)std::string __dst = *((_OWORD *)v31 + 2);
          uint64_t v712 = v31[6];
        }
        unint64_t v87 = v15[9];
        unint64_t v88 = v15[10];
        if (v87 >= v88)
        {
          unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - *v34) >> 3);
          unint64_t v92 = v91 + 1;
          if (v91 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - *v34) >> 3);
          if (2 * v93 > v92) {
            unint64_t v92 = 2 * v93;
          }
          if (v93 >= 0x555555555555555) {
            unint64_t v94 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v94 = v92;
          }
          v727 = v15 + 10;
          if (v94) {
            v95 = (char *)sub_216782ED8((uint64_t)(v15 + 10), v94);
          }
          else {
            v95 = 0;
          }
          v96 = &v95[24 * v91];
          *(void *)&long long v724 = v95;
          *((void *)&v724 + 1) = v96;
          v726 = &v95[24 * v94];
          long long v97 = *(_OWORD *)__dst;
          *((void *)v96 + 2) = v712;
          *(_OWORD *)v96 = v97;
          __dst[1] = 0;
          uint64_t v712 = 0;
          __dst[0] = 0;
          v725 = v96 + 24;
          sub_216790CCC(v34, &v724);
          uint64_t v90 = v15[9];
          sub_216790E64((uint64_t)&v724);
        }
        else
        {
          long long v89 = *(_OWORD *)__dst;
          *(void *)(v87 + 16) = v712;
          *(_OWORD *)unint64_t v87 = v89;
          __dst[1] = 0;
          uint64_t v712 = 0;
          __dst[0] = 0;
          uint64_t v90 = v87 + 24;
          v15[9] = v87 + 24;
        }
        v15[9] = v90;
        sub_216B20FFC(a1, (uint64_t)&v719);
        unint64_t v99 = v15[9];
        unint64_t v98 = v15[10];
        if (v99 >= v98)
        {
          unint64_t v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - *v34) >> 3);
          unint64_t v102 = v101 + 1;
          if (v101 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - *v34) >> 3);
          if (2 * v103 > v102) {
            unint64_t v102 = 2 * v103;
          }
          if (v103 >= 0x555555555555555) {
            unint64_t v104 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v104 = v102;
          }
          v727 = v15 + 10;
          if (v104) {
            v105 = (char *)sub_216782ED8((uint64_t)(v15 + 10), v104);
          }
          else {
            v105 = 0;
          }
          v106 = &v105[24 * v101];
          *(void *)&long long v724 = v105;
          *((void *)&v724 + 1) = v106;
          v726 = &v105[24 * v104];
          long long v107 = v719;
          *((void *)v106 + 2) = v720;
          *(_OWORD *)v106 = v107;
          uint64_t v720 = 0;
          long long v719 = 0uLL;
          v725 = v106 + 24;
          sub_216790CCC(v34, &v724);
          uint64_t v108 = v15[9];
          sub_216790E64((uint64_t)&v724);
          int v109 = SHIBYTE(v720);
          v15[9] = v108;
          if (v109 < 0) {
            operator delete((void *)v719);
          }
        }
        else
        {
          long long v100 = v719;
          *(void *)(v99 + 16) = v720;
          *(_OWORD *)unint64_t v99 = v100;
          v15[9] = v99 + 24;
        }
        if (SHIBYTE(v712) < 0) {
          operator delete(__dst[0]);
        }
        if (SHIBYTE(v714) < 0) {
          operator delete(v713[0]);
        }
      }
      if (*((char *)v15 + 55) < 0)
      {
        sub_216778F24(v708, (void *)v15[4], v15[5]);
      }
      else
      {
        *(_OWORD *)v708 = *((_OWORD *)v15 + 2);
        uint64_t v709 = v15[6];
      }
      unint64_t v110 = v10[10];
      unint64_t v111 = v10[9];
      if (v111 >= v110)
      {
        uint64_t v113 = v10[8];
        unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - v113) >> 3);
        unint64_t v115 = v114 + 1;
        if (v114 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v116 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - v113) >> 3);
        if (2 * v116 > v115) {
          unint64_t v115 = 2 * v116;
        }
        if (v116 >= 0x555555555555555) {
          unint64_t v117 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v117 = v115;
        }
        v727 = v10 + 10;
        if (v117) {
          v118 = (char *)sub_216782ED8((uint64_t)(v10 + 10), v117);
        }
        else {
          v118 = 0;
        }
        v119 = &v118[24 * v114];
        *(void *)&long long v724 = v118;
        *((void *)&v724 + 1) = v119;
        v726 = &v118[24 * v117];
        long long v120 = *(_OWORD *)v708;
        *((void *)v119 + 2) = v709;
        *(_OWORD *)v119 = v120;
        v708[1] = 0;
        uint64_t v709 = 0;
        v708[0] = 0;
        v725 = v119 + 24;
        sub_216790CCC(v10 + 8, &v724);
        uint64_t v121 = v10[9];
        sub_216790E64((uint64_t)&v724);
        int v122 = SHIBYTE(v709);
        v10[9] = v121;
        if (v122 < 0) {
          operator delete(v708[0]);
        }
      }
      else
      {
        long long v112 = *(_OWORD *)v708;
        *(void *)(v111 + 16) = v709;
        *(_OWORD *)unint64_t v111 = v112;
        v10[9] = v111 + 24;
      }
    }
    if (*((char *)v10 + 55) < 0)
    {
      sub_216778F24(v696, (void *)v10[4], v10[5]);
    }
    else
    {
      *(_OWORD *)v696 = *((_OWORD *)v10 + 2);
      uint64_t v697 = v10[6];
    }
    unint64_t v123 = v692[10];
    unint64_t v124 = v692[9];
    v687 = v692 + 8;
    if (v124 >= v123)
    {
      uint64_t v127 = v692[8];
      unint64_t v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - v127) >> 3);
      unint64_t v129 = v128 + 1;
      if (v128 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - v127) >> 3);
      if (2 * v130 > v129) {
        unint64_t v129 = 2 * v130;
      }
      if (v130 >= 0x555555555555555) {
        unint64_t v131 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v131 = v129;
      }
      v727 = v692 + 10;
      if (v131) {
        v132 = (char *)sub_216782ED8((uint64_t)(v692 + 10), v131);
      }
      else {
        v132 = 0;
      }
      v133 = &v132[24 * v128];
      *(void *)&long long v724 = v132;
      *((void *)&v724 + 1) = v133;
      v726 = &v132[24 * v131];
      long long v134 = *(_OWORD *)v696;
      *((void *)v133 + 2) = v697;
      *(_OWORD *)v133 = v134;
      v696[1] = 0;
      uint64_t v697 = 0;
      v696[0] = 0;
      v725 = v133 + 24;
      sub_216790CCC(v687, &v724);
      uint64_t v126 = v692[9];
      sub_216790E64((uint64_t)&v724);
    }
    else
    {
      long long v125 = *(_OWORD *)v696;
      *(void *)(v124 + 16) = v697;
      *(_OWORD *)unint64_t v124 = v125;
      v696[1] = 0;
      uint64_t v697 = 0;
      v696[0] = 0;
      uint64_t v126 = v124 + 24;
      v692[9] = v124 + 24;
    }
    v692[9] = v126;
    v135 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredAtomE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v135)
    {
      sub_216779094(&v722, v135);
      free(v135);
    }
    else
    {
      sub_216779094(&v722, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredAtomE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v719) = 3;
    long long v724 = v722;
    v725 = v723;
    long long v722 = 0uLL;
    v723 = 0;
    LOBYTE(v726) = 3;
    uint64_t v728 = 0;
    uint64_t v729 = 0;
    v727 = 0;
    uint64_t v720 = 0;
    uint64_t v721 = 0;
    *((void *)&v719 + 1) = 0;
    v693 = sub_216B20DE4(a1, (const void **)&v724, &v724);
    char v137 = v136;
    *(void *)&long long v717 = &v727;
    sub_216782F20((void ***)&v717);
    if (SHIBYTE(v725) < 0) {
      operator delete((void *)v724);
    }
    *(void *)&long long v717 = (char *)&v719 + 8;
    sub_216782F20((void ***)&v717);
    if (SHIBYTE(v723) < 0) {
      operator delete((void *)v722);
    }
    if (v137)
    {
      v138 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredColonCallE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v138)
      {
        sub_216779094(&v722, v138);
        free(v138);
      }
      else
      {
        sub_216779094(&v722, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredColonCallE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v719) = 2;
      long long v724 = v722;
      v725 = v723;
      long long v722 = 0uLL;
      v723 = 0;
      LOBYTE(v726) = 2;
      uint64_t v728 = 0;
      uint64_t v729 = 0;
      v727 = 0;
      uint64_t v720 = 0;
      uint64_t v721 = 0;
      *((void *)&v719 + 1) = 0;
      v139 = sub_216B20DE4(a1, (const void **)&v724, &v724);
      char v141 = v140;
      *(void *)&long long v717 = &v727;
      sub_216782F20((void ***)&v717);
      if (SHIBYTE(v725) < 0) {
        operator delete((void *)v724);
      }
      *(void *)&long long v717 = (char *)&v719 + 8;
      sub_216782F20((void ***)&v717);
      if (SHIBYTE(v723) < 0) {
        operator delete((void *)v722);
      }
      if (v141)
      {
        v142 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredFuncNameENS0_5ascii3oneIJLc58EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v142)
        {
          sub_216779094(&v722, v142);
          free(v142);
        }
        else
        {
          sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredFuncNameENS0_5ascii3oneIJLc58EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v719) = 2;
        long long v724 = v722;
        v725 = v723;
        long long v722 = 0uLL;
        v723 = 0;
        LOBYTE(v726) = 2;
        uint64_t v728 = 0;
        uint64_t v729 = 0;
        v727 = 0;
        uint64_t v720 = 0;
        uint64_t v721 = 0;
        *((void *)&v719 + 1) = 0;
        v143 = sub_216B20DE4(a1, (const void **)&v724, &v724);
        char v145 = v144;
        *(void *)&long long v717 = &v727;
        sub_216782F20((void ***)&v717);
        if (SHIBYTE(v725) < 0) {
          operator delete((void *)v724);
        }
        *(void *)&long long v717 = (char *)&v719 + 8;
        sub_216782F20((void ***)&v717);
        if (SHIBYTE(v723) < 0) {
          operator delete((void *)v722);
        }
        if (v145)
        {
          sub_216B23780(a1, (uint64_t)&v719);
          v146 = v143 + 8;
          unint64_t v147 = v143[10];
          unint64_t v148 = v143[9];
          if (v148 >= v147)
          {
            unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - *v146) >> 3);
            unint64_t v152 = v151 + 1;
            if (v151 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v153 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - *v146) >> 3);
            if (2 * v153 > v152) {
              unint64_t v152 = 2 * v153;
            }
            if (v153 >= 0x555555555555555) {
              unint64_t v154 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v154 = v152;
            }
            v727 = v143 + 10;
            if (v154) {
              v155 = (char *)sub_216782ED8((uint64_t)(v143 + 10), v154);
            }
            else {
              v155 = 0;
            }
            v156 = &v155[24 * v151];
            *(void *)&long long v724 = v155;
            *((void *)&v724 + 1) = v156;
            v726 = &v155[24 * v154];
            long long v157 = v719;
            *((void *)v156 + 2) = v720;
            *(_OWORD *)v156 = v157;
            uint64_t v720 = 0;
            long long v719 = 0uLL;
            v725 = v156 + 24;
            sub_216790CCC(v143 + 8, &v724);
            uint64_t v150 = v143[9];
            sub_216790E64((uint64_t)&v724);
          }
          else
          {
            long long v149 = v719;
            *(void *)(v148 + 16) = v720;
            *(_OWORD *)unint64_t v148 = v149;
            uint64_t v720 = 0;
            long long v719 = 0uLL;
            uint64_t v150 = v148 + 24;
            v143[9] = v148 + 24;
          }
          v143[9] = v150;
          sub_216B23B8C(a1, (uint64_t)&v722);
          unint64_t v159 = v143[9];
          unint64_t v158 = v143[10];
          if (v159 >= v158)
          {
            unint64_t v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v159 - *v146) >> 3);
            unint64_t v162 = v161 + 1;
            if (v161 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v163 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v158 - *v146) >> 3);
            if (2 * v163 > v162) {
              unint64_t v162 = 2 * v163;
            }
            if (v163 >= 0x555555555555555) {
              unint64_t v164 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v164 = v162;
            }
            v727 = v143 + 10;
            if (v164) {
              v165 = (char *)sub_216782ED8((uint64_t)(v143 + 10), v164);
            }
            else {
              v165 = 0;
            }
            v166 = &v165[24 * v161];
            *(void *)&long long v724 = v165;
            *((void *)&v724 + 1) = v166;
            v726 = &v165[24 * v164];
            long long v167 = v722;
            *((void *)v166 + 2) = v723;
            *(_OWORD *)v166 = v167;
            v723 = 0;
            long long v722 = 0uLL;
            v725 = v166 + 24;
            sub_216790CCC(v143 + 8, &v724);
            uint64_t v168 = v143[9];
            sub_216790E64((uint64_t)&v724);
            int v169 = SHIBYTE(v723);
            v143[9] = v168;
            if (v169 < 0) {
              operator delete((void *)v722);
            }
          }
          else
          {
            long long v160 = v722;
            *(void *)(v159 + 16) = v723;
            *(_OWORD *)unint64_t v159 = v160;
            v143[9] = v159 + 24;
          }
          if (SHIBYTE(v720) < 0) {
            operator delete((void *)v719);
          }
        }
        if (*((char *)v143 + 55) < 0)
        {
          sub_216778F24(v713, (void *)v143[4], v143[5]);
        }
        else
        {
          *(_OWORD *)v713 = *((_OWORD *)v143 + 2);
          uint64_t v714 = v143[6];
        }
        unint64_t v170 = v139[10];
        unint64_t v171 = v139[9];
        v689 = v139 + 8;
        if (v171 >= v170)
        {
          uint64_t v174 = v139[8];
          unint64_t v175 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171 - v174) >> 3);
          unint64_t v176 = v175 + 1;
          if (v175 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v177 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v170 - v174) >> 3);
          if (2 * v177 > v176) {
            unint64_t v176 = 2 * v177;
          }
          if (v177 >= 0x555555555555555) {
            unint64_t v178 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v178 = v176;
          }
          v727 = v139 + 10;
          if (v178) {
            v179 = (char *)sub_216782ED8((uint64_t)(v139 + 10), v178);
          }
          else {
            v179 = 0;
          }
          v180 = &v179[24 * v175];
          *(void *)&long long v724 = v179;
          *((void *)&v724 + 1) = v180;
          v726 = &v179[24 * v178];
          long long v181 = *(_OWORD *)v713;
          *((void *)v180 + 2) = v714;
          *(_OWORD *)v180 = v181;
          v713[1] = 0;
          uint64_t v714 = 0;
          v713[0] = 0;
          v725 = v180 + 24;
          sub_216790CCC(v689, &v724);
          uint64_t v173 = v139[9];
          sub_216790E64((uint64_t)&v724);
        }
        else
        {
          long long v172 = *(_OWORD *)v713;
          *(void *)(v171 + 16) = v714;
          *(_OWORD *)unint64_t v171 = v172;
          v713[1] = 0;
          uint64_t v714 = 0;
          v713[0] = 0;
          uint64_t v173 = v171 + 24;
          v139[9] = v171 + 24;
        }
        v139[9] = v173;
        v182 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredColonArgsEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v182)
        {
          sub_216779094(&v722, v182);
          free(v182);
        }
        else
        {
          sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredColonArgsEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v719) = 2;
        long long v724 = v722;
        v725 = v723;
        long long v722 = 0uLL;
        v723 = 0;
        LOBYTE(v726) = 2;
        uint64_t v728 = 0;
        uint64_t v729 = 0;
        v727 = 0;
        uint64_t v720 = 0;
        uint64_t v721 = 0;
        *((void *)&v719 + 1) = 0;
        v183 = sub_216B20DE4(a1, (const void **)&v724, &v724);
        char v185 = v184;
        *(void *)&long long v717 = &v727;
        sub_216782F20((void ***)&v717);
        if (SHIBYTE(v725) < 0) {
          operator delete((void *)v724);
        }
        *(void *)&long long v717 = (char *)&v719 + 8;
        sub_216782F20((void ***)&v717);
        if (SHIBYTE(v723) < 0) {
          operator delete((void *)v722);
        }
        if (v185)
        {
          sub_216B24484(a1, (uint64_t)&v717);
          v186 = v183 + 8;
          unint64_t v187 = v183[10];
          unint64_t v188 = v183[9];
          if (v188 >= v187)
          {
            unint64_t v191 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v188 - *v186) >> 3);
            unint64_t v192 = v191 + 1;
            if (v191 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v193 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v187 - *v186) >> 3);
            if (2 * v193 > v192) {
              unint64_t v192 = 2 * v193;
            }
            if (v193 >= 0x555555555555555) {
              unint64_t v194 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v194 = v192;
            }
            v727 = v183 + 10;
            if (v194) {
              v195 = (char *)sub_216782ED8((uint64_t)(v183 + 10), v194);
            }
            else {
              v195 = 0;
            }
            v196 = &v195[24 * v191];
            *(void *)&long long v724 = v195;
            *((void *)&v724 + 1) = v196;
            v726 = &v195[24 * v194];
            long long v197 = v717;
            *((void *)v196 + 2) = v718;
            *(_OWORD *)v196 = v197;
            uint64_t v718 = 0;
            long long v717 = 0uLL;
            v725 = v196 + 24;
            sub_216790CCC(v183 + 8, &v724);
            uint64_t v190 = v183[9];
            sub_216790E64((uint64_t)&v724);
          }
          else
          {
            long long v189 = v717;
            *(void *)(v188 + 16) = v718;
            *(_OWORD *)unint64_t v188 = v189;
            uint64_t v718 = 0;
            long long v717 = 0uLL;
            uint64_t v190 = v188 + 24;
            v183[9] = v188 + 24;
          }
          v183[9] = v190;
          v198 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_5ascii3oneIJLc44EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v198)
          {
            sub_216779094(&v722, v198);
            free(v198);
          }
          else
          {
            sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_5ascii3oneIJLc44EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v719) = 1;
          long long v724 = v722;
          v725 = v723;
          long long v722 = 0uLL;
          v723 = 0;
          LOBYTE(v726) = 1;
          uint64_t v728 = 0;
          uint64_t v729 = 0;
          v727 = 0;
          uint64_t v720 = 0;
          uint64_t v721 = 0;
          *((void *)&v719 + 1) = 0;
          v199 = sub_216B20DE4(a1, (const void **)&v724, &v724);
          char v201 = v200;
          v708[0] = &v727;
          sub_216782F20((void ***)v708);
          if (SHIBYTE(v725) < 0) {
            operator delete((void *)v724);
          }
          v708[0] = (char *)&v719 + 8;
          sub_216782F20((void ***)v708);
          v202 = v183 + 8;
          if (SHIBYTE(v723) < 0) {
            operator delete((void *)v722);
          }
          if (v201)
          {
            sub_216B325D0(a1, (uint64_t)&v719);
            v203 = v199 + 8;
            unint64_t v204 = v199[10];
            unint64_t v205 = v199[9];
            if (v205 >= v204)
            {
              unint64_t v208 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v205 - *v203) >> 3);
              unint64_t v209 = v208 + 1;
              if (v208 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v210 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v204 - *v203) >> 3);
              if (2 * v210 > v209) {
                unint64_t v209 = 2 * v210;
              }
              if (v210 >= 0x555555555555555) {
                unint64_t v211 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v211 = v209;
              }
              v727 = v199 + 10;
              if (v211) {
                v212 = (char *)sub_216782ED8((uint64_t)(v199 + 10), v211);
              }
              else {
                v212 = 0;
              }
              v213 = &v212[24 * v208];
              *(void *)&long long v724 = v212;
              *((void *)&v724 + 1) = v213;
              v726 = &v212[24 * v211];
              long long v214 = v719;
              *((void *)v213 + 2) = v720;
              *(_OWORD *)v213 = v214;
              uint64_t v720 = 0;
              long long v719 = 0uLL;
              v725 = v213 + 24;
              sub_216790CCC(v199 + 8, &v724);
              uint64_t v207 = v199[9];
              sub_216790E64((uint64_t)&v724);
            }
            else
            {
              long long v206 = v719;
              *(void *)(v205 + 16) = v720;
              *(_OWORD *)unint64_t v205 = v206;
              uint64_t v720 = 0;
              long long v719 = 0uLL;
              uint64_t v207 = v205 + 24;
              v199[9] = v205 + 24;
            }
            v199[9] = v207;
            sub_216B329DC(a1, (uint64_t)&v722);
            unint64_t v216 = v199[9];
            unint64_t v215 = v199[10];
            if (v216 >= v215)
            {
              unint64_t v218 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v216 - *v203) >> 3);
              unint64_t v219 = v218 + 1;
              if (v218 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v220 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v215 - *v203) >> 3);
              if (2 * v220 > v219) {
                unint64_t v219 = 2 * v220;
              }
              if (v220 >= 0x555555555555555) {
                unint64_t v221 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v221 = v219;
              }
              v727 = v199 + 10;
              if (v221) {
                v222 = (char *)sub_216782ED8((uint64_t)(v199 + 10), v221);
              }
              else {
                v222 = 0;
              }
              v223 = &v222[24 * v218];
              *(void *)&long long v724 = v222;
              *((void *)&v724 + 1) = v223;
              v726 = &v222[24 * v221];
              long long v224 = v722;
              *((void *)v223 + 2) = v723;
              *(_OWORD *)v223 = v224;
              v723 = 0;
              long long v722 = 0uLL;
              v725 = v223 + 24;
              sub_216790CCC(v199 + 8, &v724);
              uint64_t v225 = v199[9];
              sub_216790E64((uint64_t)&v724);
              int v226 = SHIBYTE(v723);
              v199[9] = v225;
              v202 = v183 + 8;
              if (v226 < 0) {
                operator delete((void *)v722);
              }
            }
            else
            {
              long long v217 = v722;
              *(void *)(v216 + 16) = v723;
              *(_OWORD *)unint64_t v216 = v217;
              v199[9] = v216 + 24;
              v202 = v183 + 8;
            }
            if (SHIBYTE(v720) < 0) {
              operator delete((void *)v719);
            }
          }
          if (*((char *)v199 + 55) < 0)
          {
            sub_216778F24(__p, (void *)v199[4], v199[5]);
          }
          else
          {
            *(_OWORD *)std::string __p = *((_OWORD *)v199 + 2);
            uint64_t v716 = v199[6];
          }
          unint64_t v228 = v183[9];
          unint64_t v227 = v183[10];
          if (v228 >= v227)
          {
            unint64_t v230 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v228 - *v202) >> 3);
            unint64_t v231 = v230 + 1;
            if (v230 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v232 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v227 - *v202) >> 3);
            if (2 * v232 > v231) {
              unint64_t v231 = 2 * v232;
            }
            if (v232 >= 0x555555555555555) {
              unint64_t v233 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v233 = v231;
            }
            v727 = v183 + 10;
            if (v233) {
              v234 = (char *)sub_216782ED8((uint64_t)(v183 + 10), v233);
            }
            else {
              v234 = 0;
            }
            v235 = &v234[24 * v230];
            *(void *)&long long v724 = v234;
            *((void *)&v724 + 1) = v235;
            v726 = &v234[24 * v233];
            long long v236 = *(_OWORD *)__p;
            *((void *)v235 + 2) = v716;
            *(_OWORD *)v235 = v236;
            __p[1] = 0;
            uint64_t v716 = 0;
            __p[0] = 0;
            v725 = v235 + 24;
            sub_216790CCC(v202, &v724);
            uint64_t v237 = v183[9];
            sub_216790E64((uint64_t)&v724);
            int v238 = SHIBYTE(v716);
            v183[9] = v237;
            if (v238 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v229 = *(_OWORD *)__p;
            *(void *)(v228 + 16) = v716;
            *(_OWORD *)unint64_t v228 = v229;
            v183[9] = v228 + 24;
          }
          if (SHIBYTE(v718) < 0) {
            operator delete((void *)v717);
          }
        }
        if (*((char *)v183 + 55) < 0)
        {
          sub_216778F24(__dst, (void *)v183[4], v183[5]);
        }
        else
        {
          *(_OWORD *)std::string __dst = *((_OWORD *)v183 + 2);
          uint64_t v712 = v183[6];
        }
        unint64_t v240 = v139[9];
        unint64_t v239 = v139[10];
        if (v240 >= v239)
        {
          unint64_t v242 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v240 - *v689) >> 3);
          unint64_t v243 = v242 + 1;
          if (v242 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v244 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v239 - *v689) >> 3);
          if (2 * v244 > v243) {
            unint64_t v243 = 2 * v244;
          }
          if (v244 >= 0x555555555555555) {
            unint64_t v245 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v245 = v243;
          }
          v727 = v139 + 10;
          if (v245) {
            v246 = (char *)sub_216782ED8((uint64_t)(v139 + 10), v245);
          }
          else {
            v246 = 0;
          }
          v247 = &v246[24 * v242];
          *(void *)&long long v724 = v246;
          *((void *)&v724 + 1) = v247;
          v726 = &v246[24 * v245];
          long long v248 = *(_OWORD *)__dst;
          *((void *)v247 + 2) = v712;
          *(_OWORD *)v247 = v248;
          __dst[1] = 0;
          uint64_t v712 = 0;
          __dst[0] = 0;
          v725 = v247 + 24;
          sub_216790CCC(v689, &v724);
          uint64_t v249 = v139[9];
          sub_216790E64((uint64_t)&v724);
          int v250 = SHIBYTE(v712);
          v139[9] = v249;
          if (v250 < 0) {
            operator delete(__dst[0]);
          }
        }
        else
        {
          long long v241 = *(_OWORD *)__dst;
          *(void *)(v240 + 16) = v712;
          *(_OWORD *)unint64_t v240 = v241;
          v139[9] = v240 + 24;
        }
        if (SHIBYTE(v714) < 0) {
          operator delete(v713[0]);
        }
      }
      if (*((char *)v139 + 55) < 0)
      {
        sub_216778F24(v700, (void *)v139[4], v139[5]);
      }
      else
      {
        *(_OWORD *)v700 = *((_OWORD *)v139 + 2);
        uint64_t v701 = v139[6];
      }
      v251 = v693;
      unint64_t v252 = v693[10];
      uint64_t v686 = (uint64_t)(v693 + 10);
      unint64_t v253 = v693[9];
      v690 = v693 + 8;
      if (v253 >= v252)
      {
        uint64_t v256 = v693[8];
        unint64_t v257 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v253 - v256) >> 3);
        unint64_t v258 = v257 + 1;
        if (v257 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v259 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v252 - v256) >> 3);
        if (2 * v259 > v258) {
          unint64_t v258 = 2 * v259;
        }
        if (v259 >= 0x555555555555555) {
          unint64_t v260 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v260 = v258;
        }
        v727 = v693 + 10;
        if (v260) {
          v261 = (char *)sub_216782ED8(v686, v260);
        }
        else {
          v261 = 0;
        }
        v262 = &v261[24 * v257];
        *(void *)&long long v724 = v261;
        *((void *)&v724 + 1) = v262;
        v726 = &v261[24 * v260];
        long long v263 = *(_OWORD *)v700;
        *((void *)v262 + 2) = v701;
        *(_OWORD *)v262 = v263;
        v700[1] = 0;
        uint64_t v701 = 0;
        v700[0] = 0;
        v725 = v262 + 24;
        sub_216790CCC(v690, &v724);
        v251 = v693;
        uint64_t v255 = v693[9];
        sub_216790E64((uint64_t)&v724);
      }
      else
      {
        long long v254 = *(_OWORD *)v700;
        *(void *)(v253 + 16) = v701;
        *(_OWORD *)unint64_t v253 = v254;
        v700[1] = 0;
        uint64_t v701 = 0;
        v700[0] = 0;
        uint64_t v255 = v253 + 24;
        v693[9] = v253 + 24;
      }
      v251[9] = v255;
      v264 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredParenCallE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v264)
      {
        sub_216779094(&v722, v264);
        free(v264);
      }
      else
      {
        sub_216779094(&v722, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredParenCallE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v719) = 2;
      long long v724 = v722;
      v725 = v723;
      long long v722 = 0uLL;
      v723 = 0;
      LOBYTE(v726) = 2;
      uint64_t v728 = 0;
      uint64_t v729 = 0;
      v727 = 0;
      uint64_t v720 = 0;
      uint64_t v721 = 0;
      *((void *)&v719 + 1) = 0;
      v265 = sub_216B20DE4(a1, (const void **)&v724, &v724);
      char v267 = v266;
      *(void *)&long long v717 = &v727;
      sub_216782F20((void ***)&v717);
      if (SHIBYTE(v725) < 0) {
        operator delete((void *)v724);
      }
      *(void *)&long long v717 = (char *)&v719 + 8;
      sub_216782F20((void ***)&v717);
      if (SHIBYTE(v723) < 0) {
        operator delete((void *)v722);
      }
      if (v267)
      {
        sub_216B23780(a1, (uint64_t)v706);
        v268 = v265 + 8;
        unint64_t v269 = v265[10];
        uint64_t v684 = (uint64_t)(v265 + 10);
        unint64_t v270 = v265[9];
        if (v270 >= v269)
        {
          unint64_t v273 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v270 - *v268) >> 3);
          unint64_t v274 = v273 + 1;
          if (v273 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v275 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v269 - *v268) >> 3);
          if (2 * v275 > v274) {
            unint64_t v274 = 2 * v275;
          }
          if (v275 >= 0x555555555555555) {
            unint64_t v276 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v276 = v274;
          }
          v727 = v265 + 10;
          if (v276) {
            v277 = (char *)sub_216782ED8(v684, v276);
          }
          else {
            v277 = 0;
          }
          v278 = &v277[24 * v273];
          *(void *)&long long v724 = v277;
          *((void *)&v724 + 1) = v278;
          v726 = &v277[24 * v276];
          long long v279 = *(_OWORD *)v706;
          *((void *)v278 + 2) = v707;
          *(_OWORD *)v278 = v279;
          v706[1] = 0;
          uint64_t v707 = 0;
          v706[0] = 0;
          v725 = v278 + 24;
          sub_216790CCC(v265 + 8, &v724);
          uint64_t v272 = v265[9];
          sub_216790E64((uint64_t)&v724);
        }
        else
        {
          long long v271 = *(_OWORD *)v706;
          *(void *)(v270 + 16) = v707;
          *(_OWORD *)unint64_t v270 = v271;
          v706[1] = 0;
          uint64_t v707 = 0;
          v706[0] = 0;
          uint64_t v272 = v270 + 24;
          v265[9] = v270 + 24;
        }
        v265[9] = v272;
        sub_216B32F54(a1, (uint64_t)&v704);
        unint64_t v280 = v265[9];
        unint64_t v281 = v265[10];
        if (v280 >= v281)
        {
          unint64_t v284 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v280 - *v268) >> 3);
          unint64_t v285 = v284 + 1;
          if (v284 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v286 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v281 - *v268) >> 3);
          if (2 * v286 > v285) {
            unint64_t v285 = 2 * v286;
          }
          if (v286 >= 0x555555555555555) {
            unint64_t v287 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v287 = v285;
          }
          v727 = v265 + 10;
          if (v287) {
            v288 = (char *)sub_216782ED8(v684, v287);
          }
          else {
            v288 = 0;
          }
          v289 = &v288[24 * v284];
          *(void *)&long long v724 = v288;
          *((void *)&v724 + 1) = v289;
          v726 = &v288[24 * v287];
          long long v290 = v704;
          *((void *)v289 + 2) = v705;
          *(_OWORD *)v289 = v290;
          uint64_t v705 = 0;
          long long v704 = 0uLL;
          v725 = v289 + 24;
          sub_216790CCC(v265 + 8, &v724);
          uint64_t v283 = v265[9];
          sub_216790E64((uint64_t)&v724);
        }
        else
        {
          long long v282 = v704;
          *(void *)(v280 + 16) = v705;
          *(_OWORD *)unint64_t v280 = v282;
          uint64_t v705 = 0;
          long long v704 = 0uLL;
          uint64_t v283 = v280 + 24;
          v265[9] = v280 + 24;
        }
        v265[9] = v283;
        v291 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredParenArgsENS0_4starINS0_5ascii5blankEJEEENS6_3oneIJLc41EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v291)
        {
          sub_216779094(&v722, v291);
          free(v291);
        }
        else
        {
          sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredParenArgsENS0_4starINS0_5ascii5blankEJEEENS6_3oneIJLc41EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v719) = 2;
        long long v724 = v722;
        v725 = v723;
        long long v722 = 0uLL;
        v723 = 0;
        LOBYTE(v726) = 2;
        uint64_t v728 = 0;
        uint64_t v729 = 0;
        v727 = 0;
        uint64_t v720 = 0;
        uint64_t v721 = 0;
        *((void *)&v719 + 1) = 0;
        v292 = sub_216B20DE4(a1, (const void **)&v724, &v724);
        char v294 = v293;
        *(void *)&long long v717 = &v727;
        sub_216782F20((void ***)&v717);
        if (SHIBYTE(v725) < 0) {
          operator delete((void *)v724);
        }
        *(void *)&long long v717 = (char *)&v719 + 8;
        sub_216782F20((void ***)&v717);
        if (SHIBYTE(v723) < 0) {
          operator delete((void *)v722);
        }
        if (v294)
        {
          v295 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredParenArgsEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v295)
          {
            sub_216779094(&v722, v295);
            free(v295);
          }
          else
          {
            sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredParenArgsEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v719) = 3;
          long long v724 = v722;
          v725 = v723;
          long long v722 = 0uLL;
          v723 = 0;
          LOBYTE(v726) = 3;
          uint64_t v728 = 0;
          uint64_t v729 = 0;
          v727 = 0;
          uint64_t v720 = 0;
          uint64_t v721 = 0;
          *((void *)&v719 + 1) = 0;
          v683 = sub_216B20DE4(a1, (const void **)&v724, &v724);
          char v297 = v296;
          *(void *)&long long v717 = &v727;
          sub_216782F20((void ***)&v717);
          if (SHIBYTE(v725) < 0) {
            operator delete((void *)v724);
          }
          *(void *)&long long v717 = (char *)&v719 + 8;
          sub_216782F20((void ***)&v717);
          if (SHIBYTE(v723) < 0) {
            operator delete((void *)v722);
          }
          if (v297)
          {
            v298 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS8_5blankESB_EEvEENS0_3optIJSC_NS3_INS5_9PredKWArgESC_vEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
            if (v298)
            {
              sub_216779094(&v722, v298);
              free(v298);
            }
            else
            {
              sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS8_5blankESB_EEvEENS0_3optIJSC_NS3_INS5_9PredKWArgESC_vEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
            }
            LOBYTE(v719) = 2;
            long long v724 = v722;
            v725 = v723;
            long long v722 = 0uLL;
            v723 = 0;
            LOBYTE(v726) = 2;
            uint64_t v728 = 0;
            uint64_t v729 = 0;
            v727 = 0;
            uint64_t v720 = 0;
            uint64_t v721 = 0;
            *((void *)&v719 + 1) = 0;
            v299 = sub_216B20DE4(a1, (const void **)&v724, &v724);
            char v301 = v300;
            *(void *)&long long v717 = &v727;
            sub_216782F20((void ***)&v717);
            if (SHIBYTE(v725) < 0) {
              operator delete((void *)v724);
            }
            *(void *)&long long v717 = (char *)&v719 + 8;
            sub_216782F20((void ***)&v717);
            if (SHIBYTE(v723) < 0) {
              operator delete((void *)v722);
            }
            if (v301)
            {
              sub_216B33A08(a1, (uint64_t)__p);
              v302 = v299 + 8;
              unint64_t v303 = v299[10];
              unint64_t v304 = v299[9];
              if (v304 >= v303)
              {
                unint64_t v307 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v304 - *v302) >> 3);
                unint64_t v308 = v307 + 1;
                if (v307 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_21677CB10();
                }
                unint64_t v309 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v303 - *v302) >> 3);
                if (2 * v309 > v308) {
                  unint64_t v308 = 2 * v309;
                }
                if (v309 >= 0x555555555555555) {
                  unint64_t v310 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v310 = v308;
                }
                v727 = v299 + 10;
                if (v310) {
                  v311 = (char *)sub_216782ED8((uint64_t)(v299 + 10), v310);
                }
                else {
                  v311 = 0;
                }
                v312 = &v311[24 * v307];
                *(void *)&long long v724 = v311;
                *((void *)&v724 + 1) = v312;
                v726 = &v311[24 * v310];
                long long v313 = *(_OWORD *)__p;
                *((void *)v312 + 2) = v716;
                *(_OWORD *)v312 = v313;
                __p[1] = 0;
                uint64_t v716 = 0;
                __p[0] = 0;
                v725 = v312 + 24;
                sub_216790CCC(v299 + 8, &v724);
                uint64_t v306 = v299[9];
                sub_216790E64((uint64_t)&v724);
              }
              else
              {
                long long v305 = *(_OWORD *)__p;
                *(void *)(v304 + 16) = v716;
                *(_OWORD *)unint64_t v304 = v305;
                __p[1] = 0;
                uint64_t v716 = 0;
                __p[0] = 0;
                uint64_t v306 = v304 + 24;
                v299[9] = v304 + 24;
              }
              v299[9] = v306;
              v314 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJNS0_3padINS0_5ascii3oneIJLc44EEEENS3_5blankES6_EENS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgES7_vEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
              if (v314)
              {
                sub_216779094(&v722, v314);
                free(v314);
              }
              else
              {
                sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJNS0_3padINS0_5ascii3oneIJLc44EEEENS3_5blankES6_EENS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgES7_vEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
              }
              LOBYTE(v719) = 1;
              long long v724 = v722;
              v725 = v723;
              long long v722 = 0uLL;
              v723 = 0;
              LOBYTE(v726) = 1;
              uint64_t v728 = 0;
              uint64_t v729 = 0;
              v727 = 0;
              uint64_t v720 = 0;
              uint64_t v721 = 0;
              *((void *)&v719 + 1) = 0;
              v315 = sub_216B20DE4(a1, (const void **)&v724, &v724);
              char v317 = v316;
              *(void *)&long long v717 = &v727;
              sub_216782F20((void ***)&v717);
              if (SHIBYTE(v725) < 0) {
                operator delete((void *)v724);
              }
              *(void *)&long long v717 = (char *)&v719 + 8;
              sub_216782F20((void ***)&v717);
              if (SHIBYTE(v723) < 0) {
                operator delete((void *)v722);
              }
              if (v317)
              {
                v318 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EENS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgES8_vEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
                if (v318)
                {
                  sub_216779094(&v722, v318);
                  free(v318);
                }
                else
                {
                  sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EENS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgES8_vEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
                }
                LOBYTE(v719) = 2;
                long long v724 = v722;
                v725 = v723;
                long long v722 = 0uLL;
                v723 = 0;
                LOBYTE(v726) = 2;
                uint64_t v728 = 0;
                uint64_t v729 = 0;
                v727 = 0;
                uint64_t v720 = 0;
                uint64_t v721 = 0;
                *((void *)&v719 + 1) = 0;
                v319 = sub_216B20DE4(a1, (const void **)&v724, &v724);
                char v321 = v320;
                v710 = (void **)&v727;
                sub_216782F20(&v710);
                if (SHIBYTE(v725) < 0) {
                  operator delete((void *)v724);
                }
                v710 = (void **)&v719 + 1;
                sub_216782F20(&v710);
                if (SHIBYTE(v723) < 0) {
                  operator delete((void *)v722);
                }
                if (v321)
                {
                  sub_216B35F14(a1, (uint64_t)&v719);
                  unint64_t v322 = v319[10];
                  unint64_t v323 = v319[9];
                  if (v323 >= v322)
                  {
                    v324 = v319 + 8;
                    uint64_t v327 = v319[8];
                    unint64_t v328 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v323 - v327) >> 3);
                    unint64_t v329 = v328 + 1;
                    if (v328 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      sub_21677CB10();
                    }
                    unint64_t v330 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v322 - v327) >> 3);
                    if (2 * v330 > v329) {
                      unint64_t v329 = 2 * v330;
                    }
                    if (v330 >= 0x555555555555555) {
                      unint64_t v331 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v331 = v329;
                    }
                    v727 = v319 + 10;
                    if (v331) {
                      v332 = (char *)sub_216782ED8((uint64_t)(v319 + 10), v331);
                    }
                    else {
                      v332 = 0;
                    }
                    v333 = &v332[24 * v328];
                    *(void *)&long long v724 = v332;
                    *((void *)&v724 + 1) = v333;
                    v726 = &v332[24 * v331];
                    long long v334 = v719;
                    *((void *)v333 + 2) = v720;
                    *(_OWORD *)v333 = v334;
                    uint64_t v720 = 0;
                    long long v719 = 0uLL;
                    v725 = v333 + 24;
                    sub_216790CCC(v319 + 8, &v724);
                    uint64_t v326 = v319[9];
                    sub_216790E64((uint64_t)&v724);
                  }
                  else
                  {
                    v324 = v319 + 8;
                    long long v325 = v719;
                    *(void *)(v323 + 16) = v720;
                    *(_OWORD *)unint64_t v323 = v325;
                    uint64_t v720 = 0;
                    long long v719 = 0uLL;
                    uint64_t v326 = v323 + 24;
                    v319[9] = v323 + 24;
                  }
                  v319[9] = v326;
                  sub_216B364F4(a1, (uint64_t)&v722);
                  unint64_t v336 = v319[9];
                  unint64_t v335 = v319[10];
                  if (v336 >= v335)
                  {
                    unint64_t v338 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v336 - *v324) >> 3);
                    unint64_t v339 = v338 + 1;
                    if (v338 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      sub_21677CB10();
                    }
                    unint64_t v340 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v335 - *v324) >> 3);
                    if (2 * v340 > v339) {
                      unint64_t v339 = 2 * v340;
                    }
                    if (v340 >= 0x555555555555555) {
                      unint64_t v341 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v341 = v339;
                    }
                    v727 = v319 + 10;
                    if (v341) {
                      v342 = (char *)sub_216782ED8((uint64_t)(v319 + 10), v341);
                    }
                    else {
                      v342 = 0;
                    }
                    v343 = &v342[24 * v338];
                    *(void *)&long long v724 = v342;
                    *((void *)&v724 + 1) = v343;
                    v726 = &v342[24 * v341];
                    long long v344 = v722;
                    *((void *)v343 + 2) = v723;
                    *(_OWORD *)v343 = v344;
                    v723 = 0;
                    long long v722 = 0uLL;
                    v725 = v343 + 24;
                    sub_216790CCC(v324, &v724);
                    uint64_t v345 = v319[9];
                    sub_216790E64((uint64_t)&v724);
                    int v346 = SHIBYTE(v723);
                    v319[9] = v345;
                    v302 = v299 + 8;
                    if (v346 < 0) {
                      operator delete((void *)v722);
                    }
                  }
                  else
                  {
                    long long v337 = v722;
                    *(void *)(v336 + 16) = v723;
                    *(_OWORD *)unint64_t v336 = v337;
                    v319[9] = v336 + 24;
                    v302 = v299 + 8;
                  }
                  if (SHIBYTE(v720) < 0) {
                    operator delete((void *)v719);
                  }
                }
                if (*((char *)v319 + 55) < 0)
                {
                  sub_216778F24(&v717, (void *)v319[4], v319[5]);
                }
                else
                {
                  long long v717 = *((_OWORD *)v319 + 2);
                  uint64_t v718 = v319[6];
                }
                unint64_t v347 = v315[10];
                unint64_t v348 = v315[9];
                if (v348 >= v347)
                {
                  uint64_t v350 = v315[8];
                  unint64_t v351 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v348 - v350) >> 3);
                  unint64_t v352 = v351 + 1;
                  if (v351 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_21677CB10();
                  }
                  unint64_t v353 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v347 - v350) >> 3);
                  if (2 * v353 > v352) {
                    unint64_t v352 = 2 * v353;
                  }
                  if (v353 >= 0x555555555555555) {
                    unint64_t v354 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v354 = v352;
                  }
                  v727 = v315 + 10;
                  if (v354) {
                    v355 = (char *)sub_216782ED8((uint64_t)(v315 + 10), v354);
                  }
                  else {
                    v355 = 0;
                  }
                  v356 = &v355[24 * v351];
                  *(void *)&long long v724 = v355;
                  *((void *)&v724 + 1) = v356;
                  v726 = &v355[24 * v354];
                  long long v357 = v717;
                  *((void *)v356 + 2) = v718;
                  *(_OWORD *)v356 = v357;
                  uint64_t v718 = 0;
                  long long v717 = 0uLL;
                  v725 = v356 + 24;
                  sub_216790CCC(v315 + 8, &v724);
                  uint64_t v358 = v315[9];
                  sub_216790E64((uint64_t)&v724);
                  int v359 = SHIBYTE(v718);
                  v315[9] = v358;
                  if (v359 < 0) {
                    operator delete((void *)v717);
                  }
                }
                else
                {
                  long long v349 = v717;
                  *(void *)(v348 + 16) = v718;
                  *(_OWORD *)unint64_t v348 = v349;
                  v315[9] = v348 + 24;
                }
              }
              if (*((char *)v315 + 55) < 0)
              {
                sub_216778F24(v713, (void *)v315[4], v315[5]);
              }
              else
              {
                *(_OWORD *)v713 = *((_OWORD *)v315 + 2);
                uint64_t v714 = v315[6];
              }
              unint64_t v361 = v299[9];
              unint64_t v360 = v299[10];
              if (v361 >= v360)
              {
                unint64_t v363 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v361 - *v302) >> 3);
                unint64_t v364 = v363 + 1;
                if (v363 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_21677CB10();
                }
                unint64_t v365 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v360 - *v302) >> 3);
                if (2 * v365 > v364) {
                  unint64_t v364 = 2 * v365;
                }
                if (v365 >= 0x555555555555555) {
                  unint64_t v366 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v366 = v364;
                }
                v727 = v299 + 10;
                if (v366) {
                  v367 = (char *)sub_216782ED8((uint64_t)(v299 + 10), v366);
                }
                else {
                  v367 = 0;
                }
                v368 = &v367[24 * v363];
                *(void *)&long long v724 = v367;
                *((void *)&v724 + 1) = v368;
                v726 = &v367[24 * v366];
                long long v369 = *(_OWORD *)v713;
                *((void *)v368 + 2) = v714;
                *(_OWORD *)v368 = v369;
                v713[1] = 0;
                uint64_t v714 = 0;
                v713[0] = 0;
                v725 = v368 + 24;
                sub_216790CCC(v302, &v724);
                uint64_t v370 = v299[9];
                sub_216790E64((uint64_t)&v724);
                int v371 = SHIBYTE(v714);
                v299[9] = v370;
                if (v371 < 0) {
                  operator delete(v713[0]);
                }
              }
              else
              {
                long long v362 = *(_OWORD *)v713;
                *(void *)(v361 + 16) = v714;
                *(_OWORD *)unint64_t v361 = v362;
                v299[9] = v361 + 24;
              }
              if (SHIBYTE(v716) < 0) {
                operator delete(__p[0]);
              }
            }
            if (*((char *)v299 + 55) < 0)
            {
              sub_216778F24(__dst, (void *)v299[4], v299[5]);
            }
            else
            {
              *(_OWORD *)std::string __dst = *((_OWORD *)v299 + 2);
              uint64_t v712 = v299[6];
            }
            v372 = v683;
            unint64_t v373 = v683[10];
            unint64_t v374 = v683[9];
            v682 = v683 + 8;
            if (v374 >= v373)
            {
              uint64_t v377 = v683[8];
              unint64_t v378 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v374 - v377) >> 3);
              unint64_t v379 = v378 + 1;
              if (v378 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v380 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v373 - v377) >> 3);
              if (2 * v380 > v379) {
                unint64_t v379 = 2 * v380;
              }
              if (v380 >= 0x555555555555555) {
                unint64_t v381 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v381 = v379;
              }
              v727 = v683 + 10;
              if (v381) {
                v382 = (char *)sub_216782ED8((uint64_t)(v683 + 10), v381);
              }
              else {
                v382 = 0;
              }
              v383 = &v382[24 * v378];
              *(void *)&long long v724 = v382;
              *((void *)&v724 + 1) = v383;
              v726 = &v382[24 * v381];
              long long v384 = *(_OWORD *)__dst;
              *((void *)v383 + 2) = v712;
              *(_OWORD *)v383 = v384;
              __dst[1] = 0;
              uint64_t v712 = 0;
              __dst[0] = 0;
              v725 = v383 + 24;
              sub_216790CCC(v682, &v724);
              v372 = v683;
              uint64_t v376 = v683[9];
              sub_216790E64((uint64_t)&v724);
            }
            else
            {
              long long v375 = *(_OWORD *)__dst;
              *(void *)(v374 + 16) = v712;
              *(_OWORD *)unint64_t v374 = v375;
              __dst[1] = 0;
              uint64_t v712 = 0;
              __dst[0] = 0;
              uint64_t v376 = v374 + 24;
              v683[9] = v374 + 24;
            }
            v372[9] = v376;
            v385 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS9_5blankESC_EEvEEEEENS0_3optIJNS4_INS6_9PredKWArgESD_vEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
            if (v385)
            {
              sub_216779094(&v722, v385);
              free(v385);
            }
            else
            {
              sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS9_5blankESC_EEvEEEEENS0_3optIJNS4_INS6_9PredKWArgESD_vEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
            }
            LOBYTE(v719) = 2;
            long long v724 = v722;
            v725 = v723;
            long long v722 = 0uLL;
            v723 = 0;
            LOBYTE(v726) = 2;
            uint64_t v728 = 0;
            uint64_t v729 = 0;
            v727 = 0;
            uint64_t v720 = 0;
            uint64_t v721 = 0;
            *((void *)&v719 + 1) = 0;
            v386 = sub_216B20DE4(a1, (const void **)&v724, &v724);
            char v388 = v387;
            *(void *)&long long v717 = &v727;
            sub_216782F20((void ***)&v717);
            if (SHIBYTE(v725) < 0) {
              operator delete((void *)v724);
            }
            *(void *)&long long v717 = (char *)&v719 + 8;
            sub_216782F20((void ***)&v717);
            if (SHIBYTE(v723) < 0) {
              operator delete((void *)v722);
            }
            if (v388)
            {
              v389 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal6not_atIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS8_5blankESB_EEvEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
              if (v389)
              {
                sub_216779094(&v722, v389);
                free(v389);
              }
              else
              {
                sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal6not_atIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS8_5blankESB_EEvEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
              }
              LOBYTE(v719) = 1;
              long long v724 = v722;
              v725 = v723;
              long long v722 = 0uLL;
              v723 = 0;
              LOBYTE(v726) = 1;
              uint64_t v728 = 0;
              uint64_t v729 = 0;
              v727 = 0;
              uint64_t v720 = 0;
              uint64_t v721 = 0;
              *((void *)&v719 + 1) = 0;
              v390 = sub_216B20DE4(a1, (const void **)&v724, &v724);
              char v392 = v391;
              __p[0] = &v727;
              sub_216782F20((void ***)__p);
              if (SHIBYTE(v725) < 0) {
                operator delete((void *)v724);
              }
              __p[0] = (char *)&v719 + 8;
              sub_216782F20((void ***)__p);
              if (SHIBYTE(v723) < 0) {
                operator delete((void *)v722);
              }
              if (v392)
              {
                sub_216B33A08(a1, (uint64_t)&v719);
                unint64_t v393 = v390[10];
                unint64_t v394 = v390[9];
                if (v394 >= v393)
                {
                  uint64_t v396 = v390[8];
                  unint64_t v397 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v394 - v396) >> 3);
                  unint64_t v398 = v397 + 1;
                  if (v397 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_21677CB10();
                  }
                  unint64_t v399 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v393 - v396) >> 3);
                  if (2 * v399 > v398) {
                    unint64_t v398 = 2 * v399;
                  }
                  if (v399 >= 0x555555555555555) {
                    unint64_t v400 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v400 = v398;
                  }
                  v727 = v390 + 10;
                  if (v400) {
                    v401 = (char *)sub_216782ED8((uint64_t)(v390 + 10), v400);
                  }
                  else {
                    v401 = 0;
                  }
                  v402 = &v401[24 * v397];
                  *(void *)&long long v724 = v401;
                  *((void *)&v724 + 1) = v402;
                  v726 = &v401[24 * v400];
                  long long v403 = v719;
                  *((void *)v402 + 2) = v720;
                  *(_OWORD *)v402 = v403;
                  uint64_t v720 = 0;
                  long long v719 = 0uLL;
                  v725 = v402 + 24;
                  sub_216790CCC(v390 + 8, &v724);
                  uint64_t v404 = v390[9];
                  sub_216790E64((uint64_t)&v724);
                  int v405 = SHIBYTE(v720);
                  v390[9] = v404;
                  if (v405 < 0) {
                    operator delete((void *)v719);
                  }
                }
                else
                {
                  long long v395 = v719;
                  *(void *)(v394 + 16) = v720;
                  *(_OWORD *)unint64_t v394 = v395;
                  v390[9] = v394 + 24;
                }
              }
              if (*((char *)v390 + 55) < 0)
              {
                sub_216778F24(&v717, (void *)v390[4], v390[5]);
              }
              else
              {
                long long v717 = *((_OWORD *)v390 + 2);
                uint64_t v718 = v390[6];
              }
              v406 = v386 + 8;
              unint64_t v407 = v386[10];
              unint64_t v408 = v386[9];
              if (v408 >= v407)
              {
                unint64_t v411 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v408 - *v406) >> 3);
                unint64_t v412 = v411 + 1;
                if (v411 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_21677CB10();
                }
                unint64_t v413 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v407 - *v406) >> 3);
                if (2 * v413 > v412) {
                  unint64_t v412 = 2 * v413;
                }
                if (v413 >= 0x555555555555555) {
                  unint64_t v414 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v414 = v412;
                }
                v727 = v386 + 10;
                if (v414) {
                  v415 = (char *)sub_216782ED8((uint64_t)(v386 + 10), v414);
                }
                else {
                  v415 = 0;
                }
                v416 = &v415[24 * v411];
                *(void *)&long long v724 = v415;
                *((void *)&v724 + 1) = v416;
                v726 = &v415[24 * v414];
                long long v417 = v717;
                *((void *)v416 + 2) = v718;
                *(_OWORD *)v416 = v417;
                uint64_t v718 = 0;
                long long v717 = 0uLL;
                v725 = v416 + 24;
                sub_216790CCC(v386 + 8, &v724);
                uint64_t v410 = v386[9];
                sub_216790E64((uint64_t)&v724);
              }
              else
              {
                long long v409 = v717;
                *(void *)(v408 + 16) = v718;
                *(_OWORD *)unint64_t v408 = v409;
                uint64_t v718 = 0;
                long long v717 = 0uLL;
                uint64_t v410 = v408 + 24;
                v386[9] = v408 + 24;
              }
              v386[9] = v410;
              v418 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgENS0_3padINS0_5ascii3oneIJLc44EEEENS7_5blankESA_EEvEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
              if (v418)
              {
                sub_216779094(&v722, v418);
                free(v418);
              }
              else
              {
                sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJNS0_4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgENS0_3padINS0_5ascii3oneIJLc44EEEENS7_5blankESA_EEvEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
              }
              LOBYTE(v719) = 1;
              long long v724 = v722;
              v725 = v723;
              long long v722 = 0uLL;
              v723 = 0;
              LOBYTE(v726) = 1;
              uint64_t v728 = 0;
              uint64_t v729 = 0;
              v727 = 0;
              uint64_t v720 = 0;
              uint64_t v721 = 0;
              *((void *)&v719 + 1) = 0;
              v419 = sub_216B20DE4(a1, (const void **)&v724, &v724);
              char v421 = v420;
              v710 = (void **)&v727;
              sub_216782F20(&v710);
              if (SHIBYTE(v725) < 0) {
                operator delete((void *)v724);
              }
              v710 = (void **)&v719 + 1;
              sub_216782F20(&v710);
              if (SHIBYTE(v723) < 0) {
                operator delete((void *)v722);
              }
              if (v421)
              {
                sub_216B364F4(a1, (uint64_t)&v719);
                unint64_t v422 = v419[10];
                unint64_t v423 = v419[9];
                if (v423 >= v422)
                {
                  uint64_t v425 = v419[8];
                  unint64_t v426 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v423 - v425) >> 3);
                  unint64_t v427 = v426 + 1;
                  if (v426 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    sub_21677CB10();
                  }
                  unint64_t v428 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v422 - v425) >> 3);
                  if (2 * v428 > v427) {
                    unint64_t v427 = 2 * v428;
                  }
                  if (v428 >= 0x555555555555555) {
                    unint64_t v429 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v429 = v427;
                  }
                  v727 = v419 + 10;
                  if (v429) {
                    v430 = (char *)sub_216782ED8((uint64_t)(v419 + 10), v429);
                  }
                  else {
                    v430 = 0;
                  }
                  v431 = &v430[24 * v426];
                  *(void *)&long long v724 = v430;
                  *((void *)&v724 + 1) = v431;
                  v726 = &v430[24 * v429];
                  long long v432 = v719;
                  *((void *)v431 + 2) = v720;
                  *(_OWORD *)v431 = v432;
                  uint64_t v720 = 0;
                  long long v719 = 0uLL;
                  v725 = v431 + 24;
                  sub_216790CCC(v419 + 8, &v724);
                  uint64_t v433 = v419[9];
                  sub_216790E64((uint64_t)&v724);
                  int v434 = SHIBYTE(v720);
                  v419[9] = v433;
                  if (v434 < 0) {
                    operator delete((void *)v719);
                  }
                }
                else
                {
                  long long v424 = v719;
                  *(void *)(v423 + 16) = v720;
                  *(_OWORD *)unint64_t v423 = v424;
                  v419[9] = v423 + 24;
                }
              }
              if (*((char *)v419 + 55) < 0)
              {
                sub_216778F24(__p, (void *)v419[4], v419[5]);
              }
              else
              {
                *(_OWORD *)std::string __p = *((_OWORD *)v419 + 2);
                uint64_t v716 = v419[6];
              }
              unint64_t v436 = v386[9];
              unint64_t v435 = v386[10];
              if (v436 >= v435)
              {
                unint64_t v438 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v436 - *v406) >> 3);
                unint64_t v439 = v438 + 1;
                if (v438 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_21677CB10();
                }
                unint64_t v440 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v435 - *v406) >> 3);
                if (2 * v440 > v439) {
                  unint64_t v439 = 2 * v440;
                }
                if (v440 >= 0x555555555555555) {
                  unint64_t v441 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v441 = v439;
                }
                v727 = v386 + 10;
                if (v441) {
                  v442 = (char *)sub_216782ED8((uint64_t)(v386 + 10), v441);
                }
                else {
                  v442 = 0;
                }
                v443 = &v442[24 * v438];
                *(void *)&long long v724 = v442;
                *((void *)&v724 + 1) = v443;
                v726 = &v442[24 * v441];
                long long v444 = *(_OWORD *)__p;
                *((void *)v443 + 2) = v716;
                *(_OWORD *)v443 = v444;
                __p[1] = 0;
                uint64_t v716 = 0;
                __p[0] = 0;
                v725 = v443 + 24;
                sub_216790CCC(v386 + 8, &v724);
                uint64_t v445 = v386[9];
                sub_216790E64((uint64_t)&v724);
                int v446 = SHIBYTE(v716);
                v386[9] = v445;
                if (v446 < 0) {
                  operator delete(__p[0]);
                }
              }
              else
              {
                long long v437 = *(_OWORD *)__p;
                *(void *)(v436 + 16) = v716;
                *(_OWORD *)unint64_t v436 = v437;
                v386[9] = v436 + 24;
              }
              if (SHIBYTE(v718) < 0) {
                operator delete((void *)v717);
              }
            }
            if (*((char *)v386 + 55) < 0)
            {
              sub_216778F24(v713, (void *)v386[4], v386[5]);
            }
            else
            {
              *(_OWORD *)v713 = *((_OWORD *)v386 + 2);
              uint64_t v714 = v386[6];
            }
            unint64_t v448 = v683[9];
            unint64_t v447 = v683[10];
            if (v448 >= v447)
            {
              unint64_t v450 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v448 - *v682) >> 3);
              unint64_t v451 = v450 + 1;
              if (v450 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v452 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v447 - *v682) >> 3);
              if (2 * v452 > v451) {
                unint64_t v451 = 2 * v452;
              }
              if (v452 >= 0x555555555555555) {
                unint64_t v453 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v453 = v451;
              }
              v727 = v683 + 10;
              if (v453) {
                v454 = (char *)sub_216782ED8((uint64_t)(v683 + 10), v453);
              }
              else {
                v454 = 0;
              }
              v455 = &v454[24 * v450];
              *(void *)&long long v724 = v454;
              *((void *)&v724 + 1) = v455;
              v726 = &v454[24 * v453];
              long long v456 = *(_OWORD *)v713;
              *((void *)v455 + 2) = v714;
              *(_OWORD *)v455 = v456;
              v713[1] = 0;
              uint64_t v714 = 0;
              v713[0] = 0;
              v725 = v455 + 24;
              sub_216790CCC(v682, &v724);
              uint64_t v457 = v683[9];
              sub_216790E64((uint64_t)&v724);
              int v458 = SHIBYTE(v714);
              v683[9] = v457;
              if (v458 < 0) {
                operator delete(v713[0]);
              }
            }
            else
            {
              long long v449 = *(_OWORD *)v713;
              *(void *)(v448 + 16) = v714;
              *(_OWORD *)unint64_t v448 = v449;
              v683[9] = v448 + 24;
            }
            if (SHIBYTE(v712) < 0) {
              operator delete(__dst[0]);
            }
          }
          if (*((char *)v683 + 55) < 0)
          {
            sub_216778F24(v708, (void *)v683[4], v683[5]);
          }
          else
          {
            *(_OWORD *)v708 = *((_OWORD *)v683 + 2);
            uint64_t v709 = v683[6];
          }
          v459 = v292 + 8;
          unint64_t v460 = v292[10];
          unint64_t v461 = v292[9];
          if (v461 >= v460)
          {
            unint64_t v464 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v461 - *v459) >> 3);
            unint64_t v465 = v464 + 1;
            if (v464 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v466 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v460 - *v459) >> 3);
            if (2 * v466 > v465) {
              unint64_t v465 = 2 * v466;
            }
            if (v466 >= 0x555555555555555) {
              unint64_t v467 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v467 = v465;
            }
            v727 = v292 + 10;
            if (v467) {
              v468 = (char *)sub_216782ED8((uint64_t)(v292 + 10), v467);
            }
            else {
              v468 = 0;
            }
            v469 = &v468[24 * v464];
            *(void *)&long long v724 = v468;
            *((void *)&v724 + 1) = v469;
            v726 = &v468[24 * v467];
            long long v470 = *(_OWORD *)v708;
            *((void *)v469 + 2) = v709;
            *(_OWORD *)v469 = v470;
            v708[1] = 0;
            uint64_t v709 = 0;
            v708[0] = 0;
            v725 = v469 + 24;
            sub_216790CCC(v292 + 8, &v724);
            uint64_t v463 = v292[9];
            sub_216790E64((uint64_t)&v724);
          }
          else
          {
            long long v462 = *(_OWORD *)v708;
            *(void *)(v461 + 16) = v709;
            *(_OWORD *)unint64_t v461 = v462;
            v708[1] = 0;
            uint64_t v709 = 0;
            v708[0] = 0;
            uint64_t v463 = v461 + 24;
            v292[9] = v461 + 24;
          }
          v292[9] = v463;
          sub_216B336A0(a1, (uint64_t)&v719);
          unint64_t v471 = v292[9];
          unint64_t v472 = v292[10];
          if (v471 >= v472)
          {
            unint64_t v475 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v471 - *v459) >> 3);
            unint64_t v476 = v475 + 1;
            if (v475 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v477 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v472 - *v459) >> 3);
            if (2 * v477 > v476) {
              unint64_t v476 = 2 * v477;
            }
            if (v477 >= 0x555555555555555) {
              unint64_t v478 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v478 = v476;
            }
            v727 = v292 + 10;
            if (v478) {
              v479 = (char *)sub_216782ED8((uint64_t)(v292 + 10), v478);
            }
            else {
              v479 = 0;
            }
            v480 = &v479[24 * v475];
            *(void *)&long long v724 = v479;
            *((void *)&v724 + 1) = v480;
            v726 = &v479[24 * v478];
            long long v481 = v719;
            *((void *)v480 + 2) = v720;
            *(_OWORD *)v480 = v481;
            uint64_t v720 = 0;
            long long v719 = 0uLL;
            v725 = v480 + 24;
            sub_216790CCC(v292 + 8, &v724);
            uint64_t v474 = v292[9];
            sub_216790E64((uint64_t)&v724);
          }
          else
          {
            long long v473 = v719;
            *(void *)(v471 + 16) = v720;
            *(_OWORD *)unint64_t v471 = v473;
            uint64_t v720 = 0;
            long long v719 = 0uLL;
            uint64_t v474 = v471 + 24;
            v292[9] = v471 + 24;
          }
          v292[9] = v474;
          sub_216B339A0(a1, (uint64_t)&v722);
          unint64_t v483 = v292[9];
          unint64_t v482 = v292[10];
          if (v483 >= v482)
          {
            unint64_t v485 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v483 - *v459) >> 3);
            unint64_t v486 = v485 + 1;
            if (v485 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v487 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v482 - *v459) >> 3);
            if (2 * v487 > v486) {
              unint64_t v486 = 2 * v487;
            }
            if (v487 >= 0x555555555555555) {
              unint64_t v488 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v488 = v486;
            }
            v727 = v292 + 10;
            if (v488) {
              v489 = (char *)sub_216782ED8((uint64_t)(v292 + 10), v488);
            }
            else {
              v489 = 0;
            }
            v490 = &v489[24 * v485];
            *(void *)&long long v724 = v489;
            *((void *)&v724 + 1) = v490;
            v726 = &v489[24 * v488];
            long long v491 = v722;
            *((void *)v490 + 2) = v723;
            *(_OWORD *)v490 = v491;
            v723 = 0;
            long long v722 = 0uLL;
            v725 = v490 + 24;
            sub_216790CCC(v292 + 8, &v724);
            uint64_t v492 = v292[9];
            sub_216790E64((uint64_t)&v724);
            int v493 = SHIBYTE(v723);
            v292[9] = v492;
            if (v493 < 0) {
              operator delete((void *)v722);
            }
          }
          else
          {
            long long v484 = v722;
            *(void *)(v483 + 16) = v723;
            *(_OWORD *)unint64_t v483 = v484;
            v292[9] = v483 + 24;
          }
          if (SHIBYTE(v720) < 0) {
            operator delete((void *)v719);
          }
          if (SHIBYTE(v709) < 0) {
            operator delete(v708[0]);
          }
        }
        if (*((char *)v292 + 55) < 0)
        {
          sub_216778F24(v702, (void *)v292[4], v292[5]);
        }
        else
        {
          *(_OWORD *)v702 = *((_OWORD *)v292 + 2);
          uint64_t v703 = v292[6];
        }
        unint64_t v495 = v265[9];
        unint64_t v494 = v265[10];
        if (v495 >= v494)
        {
          unint64_t v497 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v495 - *v268) >> 3);
          unint64_t v498 = v497 + 1;
          if (v497 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v499 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v494 - *v268) >> 3);
          if (2 * v499 > v498) {
            unint64_t v498 = 2 * v499;
          }
          if (v499 >= 0x555555555555555) {
            unint64_t v500 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v500 = v498;
          }
          v727 = v265 + 10;
          if (v500) {
            v501 = (char *)sub_216782ED8(v684, v500);
          }
          else {
            v501 = 0;
          }
          v502 = &v501[24 * v497];
          *(void *)&long long v724 = v501;
          *((void *)&v724 + 1) = v502;
          v726 = &v501[24 * v500];
          long long v503 = *(_OWORD *)v702;
          *((void *)v502 + 2) = v703;
          *(_OWORD *)v502 = v503;
          v702[1] = 0;
          uint64_t v703 = 0;
          v702[0] = 0;
          v725 = v502 + 24;
          sub_216790CCC(v265 + 8, &v724);
          uint64_t v504 = v265[9];
          sub_216790E64((uint64_t)&v724);
          int v505 = SHIBYTE(v703);
          v265[9] = v504;
          if (v505 < 0) {
            operator delete(v702[0]);
          }
        }
        else
        {
          long long v496 = *(_OWORD *)v702;
          *(void *)(v495 + 16) = v703;
          *(_OWORD *)unint64_t v495 = v496;
          v265[9] = v495 + 24;
        }
        if (SHIBYTE(v705) < 0) {
          operator delete((void *)v704);
        }
        if (SHIBYTE(v707) < 0) {
          operator delete(v706[0]);
        }
      }
      if (*((char *)v265 + 55) < 0)
      {
        sub_216778F24(v698, (void *)v265[4], v265[5]);
      }
      else
      {
        *(_OWORD *)v698 = *((_OWORD *)v265 + 2);
        uint64_t v699 = v265[6];
      }
      v506 = v693;
      unint64_t v507 = v693[9];
      unint64_t v508 = v693[10];
      if (v507 >= v508)
      {
        unint64_t v511 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v507 - *v690) >> 3);
        unint64_t v512 = v511 + 1;
        if (v511 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v513 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v508 - *v690) >> 3);
        if (2 * v513 > v512) {
          unint64_t v512 = 2 * v513;
        }
        if (v513 >= 0x555555555555555) {
          unint64_t v514 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v514 = v512;
        }
        v727 = v693 + 10;
        if (v514) {
          v515 = (char *)sub_216782ED8(v686, v514);
        }
        else {
          v515 = 0;
        }
        v516 = &v515[24 * v511];
        *(void *)&long long v724 = v515;
        *((void *)&v724 + 1) = v516;
        v726 = &v515[24 * v514];
        long long v517 = *(_OWORD *)v698;
        *((void *)v516 + 2) = v699;
        *(_OWORD *)v516 = v517;
        v698[1] = 0;
        uint64_t v699 = 0;
        v698[0] = 0;
        v725 = v516 + 24;
        sub_216790CCC(v690, &v724);
        v506 = v693;
        uint64_t v510 = v693[9];
        sub_216790E64((uint64_t)&v724);
      }
      else
      {
        long long v509 = *(_OWORD *)v698;
        *(void *)(v507 + 16) = v699;
        *(_OWORD *)unint64_t v507 = v509;
        v698[1] = 0;
        uint64_t v699 = 0;
        v698[0] = 0;
        uint64_t v510 = v507 + 24;
        v693[9] = v507 + 24;
      }
      v506[9] = v510;
      v518 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredBareCallE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v518)
      {
        sub_216779094(&v722, v518);
        free(v518);
      }
      else
      {
        sub_216779094(&v722, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredBareCallE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v719) = 2;
      long long v724 = v722;
      v725 = v723;
      long long v722 = 0uLL;
      v723 = 0;
      LOBYTE(v726) = 2;
      uint64_t v728 = 0;
      uint64_t v729 = 0;
      v727 = 0;
      uint64_t v720 = 0;
      uint64_t v721 = 0;
      *((void *)&v719 + 1) = 0;
      v519 = sub_216B20DE4(a1, (const void **)&v724, &v724);
      char v521 = v520;
      *(void *)&long long v717 = &v727;
      sub_216782F20((void ***)&v717);
      if (SHIBYTE(v725) < 0) {
        operator delete((void *)v724);
      }
      *(void *)&long long v717 = (char *)&v719 + 8;
      sub_216782F20((void ***)&v717);
      if (SHIBYTE(v723) < 0) {
        operator delete((void *)v722);
      }
      if (v521)
      {
        sub_216B23BF4(a1, (uint64_t)&v719);
        v522 = v519 + 8;
        unint64_t v523 = v519[10];
        unint64_t v524 = v519[9];
        if (v524 >= v523)
        {
          unint64_t v527 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v524 - *v522) >> 3);
          unint64_t v528 = v527 + 1;
          if (v527 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v529 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v523 - *v522) >> 3);
          if (2 * v529 > v528) {
            unint64_t v528 = 2 * v529;
          }
          if (v529 >= 0x555555555555555) {
            unint64_t v530 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v530 = v528;
          }
          v727 = v519 + 10;
          if (v530) {
            v531 = (char *)sub_216782ED8((uint64_t)(v519 + 10), v530);
          }
          else {
            v531 = 0;
          }
          v532 = &v531[24 * v527];
          *(void *)&long long v724 = v531;
          *((void *)&v724 + 1) = v532;
          v726 = &v531[24 * v530];
          long long v533 = v719;
          *((void *)v532 + 2) = v720;
          *(_OWORD *)v532 = v533;
          uint64_t v720 = 0;
          long long v719 = 0uLL;
          v725 = v532 + 24;
          sub_216790CCC(v519 + 8, &v724);
          uint64_t v526 = v519[9];
          sub_216790E64((uint64_t)&v724);
        }
        else
        {
          long long v525 = v719;
          *(void *)(v524 + 16) = v720;
          *(_OWORD *)unint64_t v524 = v525;
          uint64_t v720 = 0;
          long long v719 = 0uLL;
          uint64_t v526 = v524 + 24;
          v519[9] = v524 + 24;
        }
        v519[9] = v526;
        sub_216B23C5C(a1, (uint64_t)&v722);
        unint64_t v535 = v519[9];
        unint64_t v534 = v519[10];
        if (v535 >= v534)
        {
          unint64_t v537 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v535 - *v522) >> 3);
          unint64_t v538 = v537 + 1;
          if (v537 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v539 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v534 - *v522) >> 3);
          if (2 * v539 > v538) {
            unint64_t v538 = 2 * v539;
          }
          if (v539 >= 0x555555555555555) {
            unint64_t v540 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v540 = v538;
          }
          v727 = v519 + 10;
          if (v540) {
            v541 = (char *)sub_216782ED8((uint64_t)(v519 + 10), v540);
          }
          else {
            v541 = 0;
          }
          v542 = &v541[24 * v537];
          *(void *)&long long v724 = v541;
          *((void *)&v724 + 1) = v542;
          v726 = &v541[24 * v540];
          long long v543 = v722;
          *((void *)v542 + 2) = v723;
          *(_OWORD *)v542 = v543;
          v723 = 0;
          long long v722 = 0uLL;
          v725 = v542 + 24;
          sub_216790CCC(v519 + 8, &v724);
          uint64_t v544 = v519[9];
          sub_216790E64((uint64_t)&v724);
          int v545 = SHIBYTE(v723);
          v519[9] = v544;
          if (v545 < 0) {
            operator delete((void *)v722);
          }
        }
        else
        {
          long long v536 = v722;
          *(void *)(v535 + 16) = v723;
          *(_OWORD *)unint64_t v535 = v536;
          v519[9] = v535 + 24;
        }
        if (SHIBYTE(v720) < 0) {
          operator delete((void *)v719);
        }
      }
      if (*((char *)v519 + 55) < 0)
      {
        sub_216778F24(v708, (void *)v519[4], v519[5]);
      }
      else
      {
        *(_OWORD *)v708 = *((_OWORD *)v519 + 2);
        uint64_t v709 = v519[6];
      }
      v546 = v693;
      unint64_t v547 = v693[9];
      unint64_t v548 = v693[10];
      if (v547 >= v548)
      {
        unint64_t v551 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v547 - *v690) >> 3);
        unint64_t v552 = v551 + 1;
        if (v551 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v553 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v548 - *v690) >> 3);
        if (2 * v553 > v552) {
          unint64_t v552 = 2 * v553;
        }
        if (v553 >= 0x555555555555555) {
          unint64_t v554 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v554 = v552;
        }
        v727 = v693 + 10;
        if (v554) {
          v555 = (char *)sub_216782ED8(v686, v554);
        }
        else {
          v555 = 0;
        }
        v556 = &v555[24 * v551];
        *(void *)&long long v724 = v555;
        *((void *)&v724 + 1) = v556;
        v726 = &v555[24 * v554];
        long long v557 = *(_OWORD *)v708;
        *((void *)v556 + 2) = v709;
        *(_OWORD *)v556 = v557;
        v708[1] = 0;
        uint64_t v709 = 0;
        v708[0] = 0;
        v725 = v556 + 24;
        sub_216790CCC(v690, &v724);
        v546 = v693;
        uint64_t v550 = v693[9];
        sub_216790E64((uint64_t)&v724);
      }
      else
      {
        long long v549 = *(_OWORD *)v708;
        *(void *)(v547 + 16) = v709;
        *(_OWORD *)unint64_t v547 = v549;
        v708[1] = 0;
        uint64_t v709 = 0;
        v708[0] = 0;
        uint64_t v550 = v547 + 24;
        v693[9] = v547 + 24;
      }
      v546[9] = v550;
      v558 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl7if_mustIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredOpenGroupEJNS0_3padINS3_8PredExprENS0_5ascii5blankES8_EENS3_14PredCloseGroupEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v558)
      {
        sub_216779094(&v722, v558);
        free(v558);
      }
      else
      {
        sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl7if_mustIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredOpenGroupEJNS0_3padINS3_8PredExprENS0_5ascii5blankES8_EENS3_14PredCloseGroupEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v719) = 2;
      long long v724 = v722;
      v725 = v723;
      long long v722 = 0uLL;
      v723 = 0;
      LOBYTE(v726) = 2;
      uint64_t v728 = 0;
      uint64_t v729 = 0;
      v727 = 0;
      uint64_t v720 = 0;
      uint64_t v721 = 0;
      *((void *)&v719 + 1) = 0;
      v559 = sub_216B20DE4(a1, (const void **)&v724, &v724);
      char v561 = v560;
      *(void *)&long long v717 = &v727;
      sub_216782F20((void ***)&v717);
      if (SHIBYTE(v725) < 0) {
        operator delete((void *)v724);
      }
      *(void *)&long long v717 = (char *)&v719 + 8;
      sub_216782F20((void ***)&v717);
      if (SHIBYTE(v723) < 0) {
        operator delete((void *)v722);
      }
      if (v561)
      {
        v562 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredOpenGroupE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v562)
        {
          sub_216779094(&v722, v562);
          free(v562);
        }
        else
        {
          sub_216779094(&v722, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredOpenGroupE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v719) = 0;
        long long v724 = v722;
        v725 = v723;
        long long v722 = 0uLL;
        v723 = 0;
        LOBYTE(v726) = 0;
        uint64_t v728 = 0;
        uint64_t v729 = 0;
        v727 = 0;
        uint64_t v720 = 0;
        uint64_t v721 = 0;
        *((void *)&v719 + 1) = 0;
        v563 = sub_216B20DE4(a1, (const void **)&v724, &v724);
        *(void *)&long long v717 = &v727;
        sub_216782F20((void ***)&v717);
        if (SHIBYTE(v725) < 0) {
          operator delete((void *)v724);
        }
        *(void *)&long long v717 = (char *)&v719 + 8;
        sub_216782F20((void ***)&v717);
        if (SHIBYTE(v723) < 0) {
          operator delete((void *)v722);
        }
        if (*((char *)v563 + 55) < 0)
        {
          sub_216778F24(v713, (void *)v563[4], v563[5]);
        }
        else
        {
          *(_OWORD *)v713 = *((_OWORD *)v563 + 2);
          uint64_t v714 = v563[6];
        }
        unint64_t v564 = v559[10];
        unint64_t v565 = v559[9];
        v685 = v559 + 8;
        if (v565 >= v564)
        {
          uint64_t v568 = v559[8];
          unint64_t v569 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v565 - v568) >> 3);
          unint64_t v570 = v569 + 1;
          if (v569 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v571 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v564 - v568) >> 3);
          if (2 * v571 > v570) {
            unint64_t v570 = 2 * v571;
          }
          if (v571 >= 0x555555555555555) {
            unint64_t v572 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v572 = v570;
          }
          v727 = v559 + 10;
          if (v572) {
            v573 = (char *)sub_216782ED8((uint64_t)(v559 + 10), v572);
          }
          else {
            v573 = 0;
          }
          v574 = &v573[24 * v569];
          *(void *)&long long v724 = v573;
          *((void *)&v724 + 1) = v574;
          v726 = &v573[24 * v572];
          long long v575 = *(_OWORD *)v713;
          *((void *)v574 + 2) = v714;
          *(_OWORD *)v574 = v575;
          v713[1] = 0;
          uint64_t v714 = 0;
          v713[0] = 0;
          v725 = v574 + 24;
          sub_216790CCC(v685, &v724);
          uint64_t v567 = v559[9];
          sub_216790E64((uint64_t)&v724);
        }
        else
        {
          long long v566 = *(_OWORD *)v713;
          *(void *)(v565 + 16) = v714;
          *(_OWORD *)unint64_t v565 = v566;
          v713[1] = 0;
          uint64_t v714 = 0;
          v713[0] = 0;
          uint64_t v567 = v565 + 24;
          v559[9] = v565 + 24;
        }
        v559[9] = v567;
        v576 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES8_EENS5_14PredCloseGroupEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v576)
        {
          sub_216779094(&v722, v576);
          free(v576);
        }
        else
        {
          sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES8_EENS5_14PredCloseGroupEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v719) = 2;
        long long v724 = v722;
        v725 = v723;
        long long v722 = 0uLL;
        v723 = 0;
        LOBYTE(v726) = 2;
        uint64_t v728 = 0;
        uint64_t v729 = 0;
        v727 = 0;
        uint64_t v720 = 0;
        uint64_t v721 = 0;
        *((void *)&v719 + 1) = 0;
        v577 = sub_216B20DE4(a1, (const void **)&v724, &v724);
        char v579 = v578;
        *(void *)&long long v717 = &v727;
        sub_216782F20((void ***)&v717);
        if (SHIBYTE(v725) < 0) {
          operator delete((void *)v724);
        }
        *(void *)&long long v717 = (char *)&v719 + 8;
        sub_216782F20((void ***)&v717);
        if (SHIBYTE(v723) < 0) {
          operator delete((void *)v722);
        }
        if (v579)
        {
          v580 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v580)
          {
            sub_216779094(&v722, v580);
            free(v580);
          }
          else
          {
            sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v719) = 2;
          long long v724 = v722;
          v725 = v723;
          long long v722 = 0uLL;
          v723 = 0;
          LOBYTE(v726) = 2;
          uint64_t v728 = 0;
          uint64_t v729 = 0;
          v727 = 0;
          uint64_t v720 = 0;
          uint64_t v721 = 0;
          *((void *)&v719 + 1) = 0;
          v581 = sub_216B20DE4(a1, (const void **)&v724, &v724);
          char v583 = v582;
          *(void *)&long long v717 = &v727;
          sub_216782F20((void ***)&v717);
          if (SHIBYTE(v725) < 0) {
            operator delete((void *)v724);
          }
          *(void *)&long long v717 = (char *)&v719 + 8;
          sub_216782F20((void ***)&v717);
          if (SHIBYTE(v723) < 0) {
            operator delete((void *)v722);
          }
          if (v583)
          {
            sub_216B20FFC(a1, (uint64_t)&v719);
            v584 = v581 + 8;
            unint64_t v585 = v581[10];
            unint64_t v586 = v581[9];
            if (v586 >= v585)
            {
              unint64_t v589 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v586 - *v584) >> 3);
              unint64_t v590 = v589 + 1;
              if (v589 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v591 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v585 - *v584) >> 3);
              if (2 * v591 > v590) {
                unint64_t v590 = 2 * v591;
              }
              if (v591 >= 0x555555555555555) {
                unint64_t v592 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v592 = v590;
              }
              v727 = v581 + 10;
              if (v592) {
                v593 = (char *)sub_216782ED8((uint64_t)(v581 + 10), v592);
              }
              else {
                v593 = 0;
              }
              v594 = &v593[24 * v589];
              *(void *)&long long v724 = v593;
              *((void *)&v724 + 1) = v594;
              v726 = &v593[24 * v592];
              long long v595 = v719;
              *((void *)v594 + 2) = v720;
              *(_OWORD *)v594 = v595;
              uint64_t v720 = 0;
              long long v719 = 0uLL;
              v725 = v594 + 24;
              sub_216790CCC(v581 + 8, &v724);
              uint64_t v588 = v581[9];
              sub_216790E64((uint64_t)&v724);
            }
            else
            {
              long long v587 = v719;
              *(void *)(v586 + 16) = v720;
              *(_OWORD *)unint64_t v586 = v587;
              uint64_t v720 = 0;
              long long v719 = 0uLL;
              uint64_t v588 = v586 + 24;
              v581[9] = v586 + 24;
            }
            v581[9] = v588;
            sub_216B1AAA8(&v722, a1);
            unint64_t v596 = v581[9];
            unint64_t v597 = v581[10];
            if (v596 >= v597)
            {
              unint64_t v600 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v596 - *v584) >> 3);
              unint64_t v601 = v600 + 1;
              if (v600 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v602 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v597 - *v584) >> 3);
              if (2 * v602 > v601) {
                unint64_t v601 = 2 * v602;
              }
              if (v602 >= 0x555555555555555) {
                unint64_t v603 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v603 = v601;
              }
              v727 = v581 + 10;
              if (v603) {
                v604 = (char *)sub_216782ED8((uint64_t)(v581 + 10), v603);
              }
              else {
                v604 = 0;
              }
              v605 = &v604[24 * v600];
              *(void *)&long long v724 = v604;
              *((void *)&v724 + 1) = v605;
              v726 = &v604[24 * v603];
              long long v606 = v722;
              *((void *)v605 + 2) = v723;
              *(_OWORD *)v605 = v606;
              v723 = 0;
              long long v722 = 0uLL;
              v725 = v605 + 24;
              sub_216790CCC(v581 + 8, &v724);
              uint64_t v599 = v581[9];
              sub_216790E64((uint64_t)&v724);
            }
            else
            {
              long long v598 = v722;
              *(void *)(v596 + 16) = v723;
              *(_OWORD *)unint64_t v596 = v598;
              v723 = 0;
              long long v722 = 0uLL;
              uint64_t v599 = v596 + 24;
              v581[9] = v596 + 24;
            }
            v581[9] = v599;
            sub_216B20FFC(a1, (uint64_t)&v717);
            unint64_t v608 = v581[9];
            unint64_t v607 = v581[10];
            if (v608 >= v607)
            {
              unint64_t v610 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v608 - *v584) >> 3);
              unint64_t v611 = v610 + 1;
              if (v610 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v612 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v607 - *v584) >> 3);
              if (2 * v612 > v611) {
                unint64_t v611 = 2 * v612;
              }
              if (v612 >= 0x555555555555555) {
                unint64_t v613 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v613 = v611;
              }
              v727 = v581 + 10;
              if (v613) {
                v614 = (char *)sub_216782ED8((uint64_t)(v581 + 10), v613);
              }
              else {
                v614 = 0;
              }
              v615 = &v614[24 * v610];
              *(void *)&long long v724 = v614;
              *((void *)&v724 + 1) = v615;
              v726 = &v614[24 * v613];
              long long v616 = v717;
              *((void *)v615 + 2) = v718;
              *(_OWORD *)v615 = v616;
              uint64_t v718 = 0;
              long long v717 = 0uLL;
              v725 = v615 + 24;
              sub_216790CCC(v581 + 8, &v724);
              uint64_t v617 = v581[9];
              sub_216790E64((uint64_t)&v724);
              int v618 = SHIBYTE(v718);
              v581[9] = v617;
              if (v618 < 0) {
                operator delete((void *)v717);
              }
            }
            else
            {
              long long v609 = v717;
              *(void *)(v608 + 16) = v718;
              *(_OWORD *)unint64_t v608 = v609;
              v581[9] = v608 + 24;
            }
            if (SHIBYTE(v723) < 0) {
              operator delete((void *)v722);
            }
            if (SHIBYTE(v720) < 0) {
              operator delete((void *)v719);
            }
          }
          if (*((char *)v581 + 55) < 0)
          {
            sub_216778F24(__p, (void *)v581[4], v581[5]);
          }
          else
          {
            *(_OWORD *)std::string __p = *((_OWORD *)v581 + 2);
            uint64_t v716 = v581[6];
          }
          v619 = v577 + 8;
          unint64_t v620 = v577[10];
          unint64_t v621 = v577[9];
          if (v621 >= v620)
          {
            unint64_t v624 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v621 - *v619) >> 3);
            unint64_t v625 = v624 + 1;
            if (v624 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v626 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v620 - *v619) >> 3);
            if (2 * v626 > v625) {
              unint64_t v625 = 2 * v626;
            }
            if (v626 >= 0x555555555555555) {
              unint64_t v627 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v627 = v625;
            }
            v727 = v577 + 10;
            if (v627) {
              v628 = (char *)sub_216782ED8((uint64_t)(v577 + 10), v627);
            }
            else {
              v628 = 0;
            }
            v629 = &v628[24 * v624];
            *(void *)&long long v724 = v628;
            *((void *)&v724 + 1) = v629;
            v726 = &v628[24 * v627];
            long long v630 = *(_OWORD *)__p;
            *((void *)v629 + 2) = v716;
            *(_OWORD *)v629 = v630;
            __p[1] = 0;
            uint64_t v716 = 0;
            __p[0] = 0;
            v725 = v629 + 24;
            sub_216790CCC(v577 + 8, &v724);
            uint64_t v623 = v577[9];
            sub_216790E64((uint64_t)&v724);
          }
          else
          {
            long long v622 = *(_OWORD *)__p;
            *(void *)(v621 + 16) = v716;
            *(_OWORD *)unint64_t v621 = v622;
            __p[1] = 0;
            uint64_t v716 = 0;
            __p[0] = 0;
            uint64_t v623 = v621 + 24;
            v577[9] = v621 + 24;
          }
          v577[9] = v623;
          v631 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v631)
          {
            sub_216779094(&v722, v631);
            free(v631);
          }
          else
          {
            sub_216779094(&v722, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v719) = 0;
          long long v724 = v722;
          v725 = v723;
          long long v722 = 0uLL;
          v723 = 0;
          LOBYTE(v726) = 0;
          uint64_t v728 = 0;
          uint64_t v729 = 0;
          v727 = 0;
          uint64_t v720 = 0;
          uint64_t v721 = 0;
          *((void *)&v719 + 1) = 0;
          v632 = sub_216B20DE4(a1, (const void **)&v724, &v724);
          *(void *)&long long v704 = &v727;
          sub_216782F20((void ***)&v704);
          if (SHIBYTE(v725) < 0) {
            operator delete((void *)v724);
          }
          *(void *)&long long v704 = (char *)&v719 + 8;
          sub_216782F20((void ***)&v704);
          if (SHIBYTE(v723) < 0) {
            operator delete((void *)v722);
          }
          if (*((char *)v632 + 55) < 0)
          {
            sub_216778F24(&v717, (void *)v632[4], v632[5]);
          }
          else
          {
            long long v717 = *((_OWORD *)v632 + 2);
            uint64_t v718 = v632[6];
          }
          unint64_t v634 = v577[9];
          unint64_t v633 = v577[10];
          if (v634 >= v633)
          {
            unint64_t v636 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v634 - *v619) >> 3);
            unint64_t v637 = v636 + 1;
            if (v636 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v638 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v633 - *v619) >> 3);
            if (2 * v638 > v637) {
              unint64_t v637 = 2 * v638;
            }
            if (v638 >= 0x555555555555555) {
              unint64_t v639 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v639 = v637;
            }
            v727 = v577 + 10;
            if (v639) {
              v640 = (char *)sub_216782ED8((uint64_t)(v577 + 10), v639);
            }
            else {
              v640 = 0;
            }
            v641 = &v640[24 * v636];
            *(void *)&long long v724 = v640;
            *((void *)&v724 + 1) = v641;
            v726 = &v640[24 * v639];
            long long v642 = v717;
            *((void *)v641 + 2) = v718;
            *(_OWORD *)v641 = v642;
            uint64_t v718 = 0;
            long long v717 = 0uLL;
            v725 = v641 + 24;
            sub_216790CCC(v577 + 8, &v724);
            uint64_t v643 = v577[9];
            sub_216790E64((uint64_t)&v724);
            int v644 = SHIBYTE(v718);
            v577[9] = v643;
            if (v644 < 0) {
              operator delete((void *)v717);
            }
          }
          else
          {
            long long v635 = v717;
            *(void *)(v634 + 16) = v718;
            *(_OWORD *)unint64_t v634 = v635;
            v577[9] = v634 + 24;
          }
          if (SHIBYTE(v716) < 0) {
            operator delete(__p[0]);
          }
        }
        if (*((char *)v577 + 55) < 0)
        {
          sub_216778F24(__dst, (void *)v577[4], v577[5]);
        }
        else
        {
          *(_OWORD *)std::string __dst = *((_OWORD *)v577 + 2);
          uint64_t v712 = v577[6];
        }
        unint64_t v646 = v559[9];
        unint64_t v645 = v559[10];
        if (v646 >= v645)
        {
          unint64_t v648 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v646 - *v685) >> 3);
          unint64_t v649 = v648 + 1;
          if (v648 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v650 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v645 - *v685) >> 3);
          if (2 * v650 > v649) {
            unint64_t v649 = 2 * v650;
          }
          if (v650 >= 0x555555555555555) {
            unint64_t v651 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v651 = v649;
          }
          v727 = v559 + 10;
          if (v651) {
            v652 = (char *)sub_216782ED8((uint64_t)(v559 + 10), v651);
          }
          else {
            v652 = 0;
          }
          v653 = &v652[24 * v648];
          *(void *)&long long v724 = v652;
          *((void *)&v724 + 1) = v653;
          v726 = &v652[24 * v651];
          long long v654 = *(_OWORD *)__dst;
          *((void *)v653 + 2) = v712;
          *(_OWORD *)v653 = v654;
          __dst[1] = 0;
          uint64_t v712 = 0;
          __dst[0] = 0;
          v725 = v653 + 24;
          sub_216790CCC(v685, &v724);
          uint64_t v655 = v559[9];
          sub_216790E64((uint64_t)&v724);
          int v656 = SHIBYTE(v712);
          v559[9] = v655;
          if (v656 < 0) {
            operator delete(__dst[0]);
          }
        }
        else
        {
          long long v647 = *(_OWORD *)__dst;
          *(void *)(v646 + 16) = v712;
          *(_OWORD *)unint64_t v646 = v647;
          v559[9] = v646 + 24;
        }
        if (SHIBYTE(v714) < 0) {
          operator delete(v713[0]);
        }
      }
      if (*((char *)v559 + 55) < 0)
      {
        sub_216778F24(v706, (void *)v559[4], v559[5]);
      }
      else
      {
        *(_OWORD *)v706 = *((_OWORD *)v559 + 2);
        uint64_t v707 = v559[6];
      }
      unint64_t v658 = v693[9];
      unint64_t v657 = v693[10];
      if (v658 >= v657)
      {
        unint64_t v660 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v658 - *v690) >> 3);
        unint64_t v661 = v660 + 1;
        if (v660 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v662 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v657 - *v690) >> 3);
        if (2 * v662 > v661) {
          unint64_t v661 = 2 * v662;
        }
        if (v662 >= 0x555555555555555) {
          unint64_t v663 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v663 = v661;
        }
        v727 = v693 + 10;
        if (v663) {
          v664 = (char *)sub_216782ED8(v686, v663);
        }
        else {
          v664 = 0;
        }
        v665 = &v664[24 * v660];
        *(void *)&long long v724 = v664;
        *((void *)&v724 + 1) = v665;
        v726 = &v664[24 * v663];
        long long v666 = *(_OWORD *)v706;
        *((void *)v665 + 2) = v707;
        *(_OWORD *)v665 = v666;
        v706[1] = 0;
        uint64_t v707 = 0;
        v706[0] = 0;
        v725 = v665 + 24;
        sub_216790CCC(v690, &v724);
        uint64_t v667 = v693[9];
        sub_216790E64((uint64_t)&v724);
        int v668 = SHIBYTE(v707);
        v693[9] = v667;
        if (v668 < 0) {
          operator delete(v706[0]);
        }
      }
      else
      {
        long long v659 = *(_OWORD *)v706;
        *(void *)(v658 + 16) = v707;
        *(_OWORD *)unint64_t v658 = v659;
        v693[9] = v658 + 24;
      }
      if (SHIBYTE(v709) < 0) {
        operator delete(v708[0]);
      }
      if (SHIBYTE(v699) < 0) {
        operator delete(v698[0]);
      }
      if (SHIBYTE(v701) < 0) {
        operator delete(v700[0]);
      }
    }
    if (*((char *)v693 + 55) < 0)
    {
      sub_216778F24(v694, (void *)v693[4], v693[5]);
    }
    else
    {
      *(_OWORD *)v694 = *((_OWORD *)v693 + 2);
      uint64_t v695 = v693[6];
    }
    char v7 = v692;
    unint64_t v670 = v692[9];
    unint64_t v669 = v692[10];
    if (v670 >= v669)
    {
      unint64_t v672 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v670 - *v687) >> 3);
      unint64_t v673 = v672 + 1;
      if (v672 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v674 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v669 - *v687) >> 3);
      if (2 * v674 > v673) {
        unint64_t v673 = 2 * v674;
      }
      if (v674 >= 0x555555555555555) {
        unint64_t v675 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v675 = v673;
      }
      v727 = v692 + 10;
      if (v675) {
        v676 = (char *)sub_216782ED8((uint64_t)(v692 + 10), v675);
      }
      else {
        v676 = 0;
      }
      v677 = &v676[24 * v672];
      *(void *)&long long v724 = v676;
      *((void *)&v724 + 1) = v677;
      v726 = &v676[24 * v675];
      long long v678 = *(_OWORD *)v694;
      *((void *)v677 + 2) = v695;
      *(_OWORD *)v677 = v678;
      v694[1] = 0;
      uint64_t v695 = 0;
      v694[0] = 0;
      v725 = v677 + 24;
      sub_216790CCC(v687, &v724);
      uint64_t v679 = v692[9];
      sub_216790E64((uint64_t)&v724);
      int v680 = SHIBYTE(v695);
      v692[9] = v679;
      if (v680 < 0) {
        operator delete(v694[0]);
      }
    }
    else
    {
      long long v671 = *(_OWORD *)v694;
      *(void *)(v670 + 16) = v695;
      *(_OWORD *)unint64_t v670 = v671;
      v692[9] = v670 + 24;
    }
    if (SHIBYTE(v697) < 0) {
      operator delete(v696[0]);
    }
  }
  if (*((char *)v7 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v7[4], v7[5]);
  }
  else
  {
    long long v681 = *((_OWORD *)v7 + 2);
    *(void *)(a2 + 16) = v7[6];
    *(_OWORD *)a2 = v681;
  }
}

void sub_216B201C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  sub_216790E64(v72 - 160);
  if (*(char *)(v72 - 161) < 0) {
    operator delete(*(void **)(v72 - 184));
  }
  if (*(char *)(v72 - 193) < 0) {
    operator delete(*(void **)(v72 - 216));
  }
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216B20D98(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 32);
  sub_216782F20(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_216B20DE4(uint64_t **a1, const void **a2, long long *a3)
{
  char v5 = (uint64_t **)sub_21677B220((uint64_t)a1, &v10, a2);
  char v6 = *v5;
  if (!*v5)
  {
    char v7 = v5;
    sub_216B20E78((uint64_t)a1, a3, (uint64_t)v9);
    sub_21677B358(a1, v10, v7, v9[0]);
    char v6 = v9[0];
    v9[0] = 0;
    sub_216B20F5C((uint64_t)v9, 0);
  }
  return v6;
}

void *sub_216B20E78@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_216B20EE4(v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216B20ECC(_Unwind_Exception *a1)
{
  sub_216B20F5C(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_216B20EE4(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  *((unsigned char *)__dst + 24) = *((unsigned char *)a2 + 24);
  __dst[5] = 0;
  __dst[6] = 0;
  __dst[4] = 0;
  *((_OWORD *)__dst + 2) = a2[2];
  __dst[6] = *((void *)a2 + 6);
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  return __dst;
}

void sub_216B20F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216B20FB4((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_216B20FB4(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  sub_216782F20(&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_216B20FFC(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B212FC(a1, 1);
  if (v5)
  {
    sub_216B21400(a1, (uint64_t)v33);
    unint64_t v6 = v4[10];
    char v7 = v4 + 8;
    unint64_t v8 = v4[9];
    if (v8 >= v6)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      uint64_t v39 = v4 + 10;
      if (v14) {
        unint64_t v15 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v14);
      }
      else {
        unint64_t v15 = 0;
      }
      char v16 = &v15[24 * v11];
      long long v35 = v15;
      unint64_t v36 = v16;
      long long v38 = &v15[24 * v14];
      long long v17 = *(_OWORD *)v33;
      *((void *)v16 + 2) = v34;
      *(_OWORD *)char v16 = v17;
      v33[1] = 0;
      uint64_t v34 = 0;
      v33[0] = 0;
      unint64_t v37 = v16 + 24;
      sub_216790CCC(v4 + 8, &v35);
      uint64_t v10 = v4[9];
      sub_216790E64((uint64_t)&v35);
    }
    else
    {
      long long v9 = *(_OWORD *)v33;
      *(void *)(v8 + 16) = v34;
      *(_OWORD *)unint64_t v8 = v9;
      v33[1] = 0;
      uint64_t v34 = 0;
      v33[0] = 0;
      uint64_t v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_216B20FFC(__p, a1);
    unint64_t v19 = v4[9];
    unint64_t v18 = v4[10];
    if (v19 >= v18)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      if (2 * v23 > v22) {
        unint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v22;
      }
      uint64_t v39 = v4 + 10;
      if (v24) {
        unint64_t v25 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v24);
      }
      else {
        unint64_t v25 = 0;
      }
      unint64_t v26 = &v25[24 * v21];
      long long v35 = v25;
      unint64_t v36 = v26;
      long long v38 = &v25[24 * v24];
      long long v27 = *(_OWORD *)__p;
      *((void *)v26 + 2) = v32;
      *(_OWORD *)unint64_t v26 = v27;
      __p[1] = 0;
      uint64_t v32 = 0;
      __p[0] = 0;
      unint64_t v37 = v26 + 24;
      sub_216790CCC(v4 + 8, &v35);
      uint64_t v28 = v4[9];
      sub_216790E64((uint64_t)&v35);
      int v29 = SHIBYTE(v32);
      v4[9] = v28;
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v20 = *(_OWORD *)__p;
      *(void *)(v19 + 16) = v32;
      *(_OWORD *)unint64_t v19 = v20;
      v4[9] = v19 + 24;
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(v33[0]);
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v30 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v30;
  }
}

void sub_216B212A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B212FC(uint64_t **a1, char a2)
{
  sub_216B21468(v7);
  *(_OWORD *)std::string __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B213D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B21400@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B2151C(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

void sub_216B21468(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x800000021747016ELL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x800000021747016ELL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B21508(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2151C(uint64_t **a1, char a2)
{
  sub_216B21620(v7);
  *(_OWORD *)std::string __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B215F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B21620(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x80000002174701AFLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x80000002174701AFLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B216C0(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B216D4(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)std::string __p = *(_OWORD *)v37;
  unint64_t v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  long long v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  unint64_t v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B21AE0(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        unint64_t v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)unint64_t v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      unint64_t v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B21B48(a1, (uint64_t)v37);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        uint64_t v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        uint64_t v28 = 0;
      }
      int v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)int v29 = v30;
      v37[1] = 0;
      long long v38 = 0;
      v37[0] = 0;
      unint64_t v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B21A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B21AE0@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B21CFC(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

void sub_216B21B48(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B21EB4(a1, 1);
  if (v5)
  {
    sub_216B21FB8(a1, (uint64_t)__p);
    unint64_t v6 = v4[10];
    unint64_t v7 = v4[9];
    if (v7 >= v6)
    {
      uint64_t v9 = v4[8];
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v11;
      }
      v22[4] = v4 + 10;
      if (v13) {
        unint64_t v14 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v13);
      }
      else {
        unint64_t v14 = 0;
      }
      unint64_t v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      long long v16 = *(_OWORD *)__p;
      *((void *)v15 + 2) = v21;
      *(_OWORD *)unint64_t v15 = v16;
      __p[1] = 0;
      uint64_t v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_216790CCC(v4 + 8, v22);
      uint64_t v17 = v4[9];
      sub_216790E64((uint64_t)v22);
      int v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)__p;
      *(void *)(v7 + 16) = v21;
      *(_OWORD *)unint64_t v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v19 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_216B21CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B21CFC(uint64_t **a1, char a2)
{
  sub_216B21E00(v7);
  *(_OWORD *)std::string __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B21DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B21E00(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x800000021747028FLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x800000021747028FLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B21EA0(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B21EB4(uint64_t **a1, char a2)
{
  sub_216B22020(v7);
  *(_OWORD *)std::string __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B21F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B21FB8@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B220D4(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

void sub_216B22020(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x80000002174702D3 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x80000002174702D3 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B220C0(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B220D4(uint64_t **a1, char a2)
{
  sub_216B221D8(v7);
  *(_OWORD *)std::string __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B221A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B221D8(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217470348 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217470348 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B22278(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B2228C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_4plusINS0_5ascii5blankEJEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_4plusINS0_5ascii5blankEJEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)std::string __p = *(_OWORD *)v37;
  unint64_t v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  long long v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  unint64_t v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B22AA4(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        int v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        int v18 = 0;
      }
      long long v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)long long v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      unint64_t v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B216D4(a1, (uint64_t)v37);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        uint64_t v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        uint64_t v28 = 0;
      }
      int v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)int v29 = v30;
      v37[1] = 0;
      long long v38 = 0;
      v37[0] = 0;
      unint64_t v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B22608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_216B22698(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_4plusINS0_5ascii5blankEJEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_4plusINS0_5ascii5blankEJEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15NotKWEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)std::string __p = *(_OWORD *)v37;
  unint64_t v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  long long v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  unint64_t v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B2228C(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        int v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        int v18 = 0;
      }
      long long v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)long long v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      unint64_t v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B22698(v37, a1);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        uint64_t v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        uint64_t v28 = 0;
      }
      int v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)int v29 = v30;
      v37[1] = 0;
      long long v38 = 0;
      v37[0] = 0;
      unint64_t v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B22A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_216B22AA4(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B22DA4(a1, 2);
  if (v5)
  {
    sub_216B21400(a1, (uint64_t)v33);
    unint64_t v6 = v4[10];
    char v7 = v4 + 8;
    unint64_t v8 = v4[9];
    if (v8 >= v6)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      uint64_t v39 = v4 + 10;
      if (v14) {
        unint64_t v15 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v14);
      }
      else {
        unint64_t v15 = 0;
      }
      unint64_t v16 = &v15[24 * v11];
      uint64_t v35 = v15;
      uint64_t v36 = v16;
      long long v38 = &v15[24 * v14];
      long long v17 = *(_OWORD *)v33;
      *((void *)v16 + 2) = v34;
      *(_OWORD *)unint64_t v16 = v17;
      v33[1] = 0;
      uint64_t v34 = 0;
      v33[0] = 0;
      unint64_t v37 = v16 + 24;
      sub_216790CCC(v4 + 8, &v35);
      uint64_t v10 = v4[9];
      sub_216790E64((uint64_t)&v35);
    }
    else
    {
      long long v9 = *(_OWORD *)v33;
      *(void *)(v8 + 16) = v34;
      *(_OWORD *)unint64_t v8 = v9;
      v33[1] = 0;
      uint64_t v34 = 0;
      v33[0] = 0;
      uint64_t v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_216B22EA8(a1, (uint64_t)__p);
    unint64_t v19 = v4[9];
    unint64_t v18 = v4[10];
    if (v19 >= v18)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      if (2 * v23 > v22) {
        unint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v22;
      }
      uint64_t v39 = v4 + 10;
      if (v24) {
        unint64_t v25 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v24);
      }
      else {
        unint64_t v25 = 0;
      }
      unint64_t v26 = &v25[24 * v21];
      uint64_t v35 = v25;
      uint64_t v36 = v26;
      long long v38 = &v25[24 * v24];
      long long v27 = *(_OWORD *)__p;
      *((void *)v26 + 2) = v32;
      *(_OWORD *)unint64_t v26 = v27;
      __p[1] = 0;
      uint64_t v32 = 0;
      __p[0] = 0;
      unint64_t v37 = v26 + 24;
      sub_216790CCC(v4 + 8, &v35);
      uint64_t v28 = v4[9];
      sub_216790E64((uint64_t)&v35);
      int v29 = SHIBYTE(v32);
      v4[9] = v28;
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v20 = *(_OWORD *)__p;
      *(void *)(v19 + 16) = v32;
      *(_OWORD *)unint64_t v19 = v20;
      v4[9] = v19 + 24;
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(v33[0]);
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v30 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v30;
  }
}

void sub_216B22D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B22DA4(uint64_t **a1, char a2)
{
  sub_216B2305C(v7);
  *(_OWORD *)std::string __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B22E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B22EA8(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B23110(a1, 1);
  if (v5)
  {
    sub_216B23214(a1, (uint64_t)__p);
    unint64_t v6 = v4[10];
    unint64_t v7 = v4[9];
    if (v7 >= v6)
    {
      uint64_t v9 = v4[8];
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v11;
      }
      v22[4] = v4 + 10;
      if (v13) {
        unint64_t v14 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v13);
      }
      else {
        unint64_t v14 = 0;
      }
      unint64_t v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      long long v16 = *(_OWORD *)__p;
      *((void *)v15 + 2) = v21;
      *(_OWORD *)unint64_t v15 = v16;
      __p[1] = 0;
      uint64_t v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_216790CCC(v4 + 8, v22);
      uint64_t v17 = v4[9];
      sub_216790E64((uint64_t)v22);
      int v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)__p;
      *(void *)(v7 + 16) = v21;
      *(_OWORD *)unint64_t v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v19 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_216B23030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2305C(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x800000021747054ELL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x800000021747054ELL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B230FC(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B23110(uint64_t **a1, char a2)
{
  sub_216B23514(v7);
  *(_OWORD *)std::string __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B231E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B23214(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B235C8(a1, 2);
  if (v5)
  {
    sub_216B21400(a1, (uint64_t)v33);
    unint64_t v6 = v4[10];
    unint64_t v7 = v4 + 8;
    unint64_t v8 = v4[9];
    if (v8 >= v6)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      uint64_t v39 = v4 + 10;
      if (v14) {
        unint64_t v15 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v14);
      }
      else {
        unint64_t v15 = 0;
      }
      long long v16 = &v15[24 * v11];
      uint64_t v35 = v15;
      uint64_t v36 = v16;
      long long v38 = &v15[24 * v14];
      long long v17 = *(_OWORD *)v33;
      *((void *)v16 + 2) = v34;
      *(_OWORD *)long long v16 = v17;
      v33[1] = 0;
      uint64_t v34 = 0;
      v33[0] = 0;
      unint64_t v37 = v16 + 24;
      sub_216790CCC(v4 + 8, &v35);
      uint64_t v10 = v4[9];
      sub_216790E64((uint64_t)&v35);
    }
    else
    {
      long long v9 = *(_OWORD *)v33;
      *(void *)(v8 + 16) = v34;
      *(_OWORD *)unint64_t v8 = v9;
      v33[1] = 0;
      uint64_t v34 = 0;
      v33[0] = 0;
      uint64_t v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_216B22EA8(__p, a1);
    unint64_t v19 = v4[9];
    unint64_t v18 = v4[10];
    if (v19 >= v18)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      if (2 * v23 > v22) {
        unint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v22;
      }
      uint64_t v39 = v4 + 10;
      if (v24) {
        unint64_t v25 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v24);
      }
      else {
        unint64_t v25 = 0;
      }
      unint64_t v26 = &v25[24 * v21];
      uint64_t v35 = v25;
      uint64_t v36 = v26;
      long long v38 = &v25[24 * v24];
      long long v27 = *(_OWORD *)__p;
      *((void *)v26 + 2) = v32;
      *(_OWORD *)unint64_t v26 = v27;
      __p[1] = 0;
      uint64_t v32 = 0;
      __p[0] = 0;
      unint64_t v37 = v26 + 24;
      sub_216790CCC(v4 + 8, &v35);
      uint64_t v28 = v4[9];
      sub_216790E64((uint64_t)&v35);
      int v29 = SHIBYTE(v32);
      v4[9] = v28;
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v20 = *(_OWORD *)__p;
      *(void *)(v19 + 16) = v32;
      *(_OWORD *)unint64_t v19 = v20;
      v4[9] = v19 + 24;
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(v33[0]);
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v30 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v30;
  }
}

void sub_216B234BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_216B23514(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x80000002174705C7 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x80000002174705C7 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B235B4(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B235C8(uint64_t **a1, char a2)
{
  sub_216B236CC(v7);
  *(_OWORD *)std::string __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2369C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B236CC(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217470586 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217470586 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2376C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B23780(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredFuncNameE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredFuncNameE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)std::string __p = *(_OWORD *)v37;
  unint64_t v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  long long v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  unint64_t v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B23BF4(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        unint64_t v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)unint64_t v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      unint64_t v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B23C5C(a1, (uint64_t)v37);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        uint64_t v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        uint64_t v28 = 0;
      }
      int v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)int v29 = v30;
      v37[1] = 0;
      long long v38 = 0;
      v37[0] = 0;
      unint64_t v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B23AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B23B8C@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B242CC(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B23BF4@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B23F5C(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

void sub_216B23C5C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B24114(a1, 1);
  if (v5)
  {
    sub_216B21FB8(a1, (uint64_t)v33);
    unint64_t v6 = v4[10];
    char v7 = v4 + 8;
    unint64_t v8 = v4[9];
    if (v8 >= v6)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      uint64_t v39 = v4 + 10;
      if (v14) {
        unint64_t v15 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v14);
      }
      else {
        unint64_t v15 = 0;
      }
      unint64_t v16 = &v15[24 * v11];
      uint64_t v35 = v15;
      uint64_t v36 = v16;
      long long v38 = &v15[24 * v14];
      long long v17 = *(_OWORD *)v33;
      *((void *)v16 + 2) = v34;
      *(_OWORD *)unint64_t v16 = v17;
      v33[1] = 0;
      uint64_t v34 = 0;
      v33[0] = 0;
      unint64_t v37 = v16 + 24;
      sub_216790CCC(v4 + 8, &v35);
      uint64_t v10 = v4[9];
      sub_216790E64((uint64_t)&v35);
    }
    else
    {
      long long v9 = *(_OWORD *)v33;
      *(void *)(v8 + 16) = v34;
      *(_OWORD *)unint64_t v8 = v9;
      v33[1] = 0;
      uint64_t v34 = 0;
      v33[0] = 0;
      uint64_t v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_216B23C5C(__p, a1);
    unint64_t v19 = v4[9];
    unint64_t v18 = v4[10];
    if (v19 >= v18)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      if (2 * v23 > v22) {
        unint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v22;
      }
      uint64_t v39 = v4 + 10;
      if (v24) {
        unint64_t v25 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v24);
      }
      else {
        unint64_t v25 = 0;
      }
      unint64_t v26 = &v25[24 * v21];
      uint64_t v35 = v25;
      uint64_t v36 = v26;
      long long v38 = &v25[24 * v24];
      long long v27 = *(_OWORD *)__p;
      *((void *)v26 + 2) = v32;
      *(_OWORD *)unint64_t v26 = v27;
      __p[1] = 0;
      uint64_t v32 = 0;
      __p[0] = 0;
      unint64_t v37 = v26 + 24;
      sub_216790CCC(v4 + 8, &v35);
      uint64_t v28 = v4[9];
      sub_216790E64((uint64_t)&v35);
      int v29 = SHIBYTE(v32);
      v4[9] = v28;
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v20 = *(_OWORD *)__p;
      *(void *)(v19 + 16) = v32;
      *(_OWORD *)unint64_t v19 = v20;
      v4[9] = v19 + 24;
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(v33[0]);
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v30 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v30;
  }
}

void sub_216B23F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B23F5C(uint64_t **a1, char a2)
{
  sub_216B24060(v7);
  *(_OWORD *)std::string __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B24030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B24060(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217470752 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217470752 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B24100(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B24114(uint64_t **a1, char a2)
{
  sub_216B24218(v7);
  *(_OWORD *)std::string __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B241E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B24218(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x80000002174707ADLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x80000002174707ADLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B242B8(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B242CC(uint64_t **a1, char a2)
{
  sub_216B243D0(v7);
  *(_OWORD *)std::string __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B243A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B243D0(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217470820 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217470820 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B24470(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B24484(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  sub_216B29BC0(v61);
  LOBYTE(v58[0]) = 3;
  *(_OWORD *)std::string __p = *(_OWORD *)v61;
  unint64_t v64 = v62;
  v61[0] = 0;
  v61[1] = 0;
  long long v62 = 0;
  LOBYTE(v65) = 3;
  memset(v66, 0, 24);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  v58[1] = 0;
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v6 = v5;
  v56[0] = v66;
  sub_216782F20((void ***)v56);
  if (SHIBYTE(v64) < 0) {
    operator delete(__p[0]);
  }
  v56[0] = &v58[1];
  sub_216782F20((void ***)v56);
  if (SHIBYTE(v62) < 0) {
    operator delete(v61[0]);
  }
  if (v6)
  {
    sub_216B24A9C(a1, (uint64_t)v58);
    unint64_t v7 = v4[10];
    uint64_t v8 = v4 + 8;
    unint64_t v9 = v4[9];
    if (v9 >= v7)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v8) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v8) >> 3);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x555555555555555) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v13;
      }
      v66[0] = v4 + 10;
      if (v15) {
        unint64_t v16 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v15);
      }
      else {
        unint64_t v16 = 0;
      }
      long long v17 = &v16[24 * v12];
      __p[0] = v16;
      __p[1] = v17;
      long long v65 = &v16[24 * v15];
      long long v18 = *(_OWORD *)v58;
      *((void *)v17 + 2) = v59;
      *(_OWORD *)long long v17 = v18;
      v58[1] = 0;
      uint64_t v59 = 0;
      v58[0] = 0;
      unint64_t v64 = v17 + 24;
      sub_216790CCC(v4 + 8, __p);
      uint64_t v11 = v4[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v10 = *(_OWORD *)v58;
      *(void *)(v9 + 16) = v59;
      *(_OWORD *)unint64_t v9 = v10;
      v58[1] = 0;
      uint64_t v59 = 0;
      v58[0] = 0;
      uint64_t v11 = v9 + 24;
      v4[9] = v9 + 24;
    }
    v4[9] = v11;
    sub_216B26A64(a1, (uint64_t)v61);
    unint64_t v19 = v4[9];
    unint64_t v20 = v4[10];
    if (v19 >= v20)
    {
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v8) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v8) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x555555555555555) {
        unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v26 = v24;
      }
      v66[0] = v4 + 10;
      if (v26) {
        long long v27 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v26);
      }
      else {
        long long v27 = 0;
      }
      uint64_t v28 = &v27[24 * v23];
      __p[0] = v27;
      __p[1] = v28;
      long long v65 = &v27[24 * v26];
      long long v29 = *(_OWORD *)v61;
      *((void *)v28 + 2) = v62;
      *(_OWORD *)uint64_t v28 = v29;
      v61[1] = 0;
      long long v62 = 0;
      v61[0] = 0;
      unint64_t v64 = v28 + 24;
      sub_216790CCC(v4 + 8, __p);
      uint64_t v22 = v4[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v21 = *(_OWORD *)v61;
      *(void *)(v19 + 16) = v62;
      *(_OWORD *)unint64_t v19 = v21;
      v61[1] = 0;
      long long v62 = 0;
      v61[0] = 0;
      uint64_t v22 = v19 + 24;
      v4[9] = v19 + 24;
    }
    v4[9] = v22;
    sub_216B26E70(a1, (uint64_t)v56);
    unint64_t v30 = v4[9];
    unint64_t v31 = v4[10];
    if (v30 >= v31)
    {
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *v8) >> 3);
      unint64_t v35 = v34 + 1;
      if (v34 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *v8) >> 3);
      if (2 * v36 > v35) {
        unint64_t v35 = 2 * v36;
      }
      if (v36 >= 0x555555555555555) {
        unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v37 = v35;
      }
      v66[0] = v4 + 10;
      if (v37) {
        long long v38 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v37);
      }
      else {
        long long v38 = 0;
      }
      uint64_t v39 = &v38[24 * v34];
      __p[0] = v38;
      __p[1] = v39;
      long long v65 = &v38[24 * v37];
      long long v40 = *(_OWORD *)v56;
      *((void *)v39 + 2) = v57;
      *(_OWORD *)uint64_t v39 = v40;
      v56[1] = 0;
      uint64_t v57 = 0;
      v56[0] = 0;
      unint64_t v64 = v39 + 24;
      sub_216790CCC(v4 + 8, __p);
      uint64_t v33 = v4[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v32 = *(_OWORD *)v56;
      *(void *)(v30 + 16) = v57;
      *(_OWORD *)unint64_t v30 = v32;
      v56[1] = 0;
      uint64_t v57 = 0;
      v56[0] = 0;
      uint64_t v33 = v30 + 24;
      v4[9] = v30 + 24;
    }
    v4[9] = v33;
    sub_216B279C4(a1, (uint64_t)v54);
    unint64_t v42 = v4[9];
    unint64_t v41 = v4[10];
    if (v42 >= v41)
    {
      unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *v8) >> 3);
      unint64_t v45 = v44 + 1;
      if (v44 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *v8) >> 3);
      if (2 * v46 > v45) {
        unint64_t v45 = 2 * v46;
      }
      if (v46 >= 0x555555555555555) {
        unint64_t v47 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v47 = v45;
      }
      v66[0] = v4 + 10;
      if (v47) {
        int v48 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v47);
      }
      else {
        int v48 = 0;
      }
      char v49 = &v48[24 * v44];
      __p[0] = v48;
      __p[1] = v49;
      long long v65 = &v48[24 * v47];
      long long v50 = *(_OWORD *)v54;
      *((void *)v49 + 2) = v55;
      *(_OWORD *)char v49 = v50;
      v54[1] = 0;
      uint64_t v55 = 0;
      v54[0] = 0;
      unint64_t v64 = v49 + 24;
      sub_216790CCC(v4 + 8, __p);
      uint64_t v51 = v4[9];
      sub_216790E64((uint64_t)__p);
      int v52 = SHIBYTE(v55);
      v4[9] = v51;
      if (v52 < 0) {
        operator delete(v54[0]);
      }
    }
    else
    {
      long long v43 = *(_OWORD *)v54;
      *(void *)(v42 + 16) = v55;
      *(_OWORD *)unint64_t v42 = v43;
      v4[9] = v42 + 24;
    }
    if (SHIBYTE(v57) < 0) {
      operator delete(v56[0]);
    }
    if (SHIBYTE(v62) < 0) {
      operator delete(v61[0]);
    }
    if (SHIBYTE(v59) < 0) {
      operator delete(v58[0]);
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v53 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v53;
  }
}

void sub_216B249C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void sub_216B24A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  long long v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_216B20D98((uint64_t)va1);
  sub_216782F20((void ***)va);
  if (SHIBYTE(v14) < 0) {
    JUMPOUT(0x216B24A68);
  }
  JUMPOUT(0x216B24A6CLL);
}

void sub_216B24A9C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredArgFloatE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    long long v4 = v3;
    sub_216779094(&v262, v3);
    free(v4);
  }
  else
  {
    sub_216779094(&v262, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredArgFloatE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v259) = 2;
  long long v264 = v262;
  v265 = v263;
  long long v262 = 0uLL;
  long long v263 = 0;
  LOBYTE(v266) = 2;
  uint64_t v268 = 0;
  uint64_t v269 = 0;
  char v267 = 0;
  uint64_t v260 = 0;
  uint64_t v261 = 0;
  *((void *)&v259 + 1) = 0;
  char v5 = sub_216B20DE4(a1, (const void **)&v264, &v264);
  char v7 = v6;
  *(void *)&long long v257 = &v267;
  sub_216782F20((void ***)&v257);
  if (SHIBYTE(v265) < 0) {
    operator delete((void *)v264);
  }
  *(void *)&long long v257 = (char *)&v259 + 8;
  sub_216782F20((void ***)&v257);
  if (SHIBYTE(v263) < 0) {
    operator delete((void *)v262);
  }
  if (v7)
  {
    sub_216B29C6C(a1, (uint64_t)v243);
    unint64_t v8 = v5[10];
    uint64_t v9 = v5 + 8;
    unint64_t v10 = v5[9];
    if (v10 >= v8)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v9) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v9) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v14;
      }
      char v267 = v5 + 10;
      if (v16) {
        long long v17 = (char *)sub_216782ED8((uint64_t)(v5 + 10), v16);
      }
      else {
        long long v17 = 0;
      }
      long long v18 = &v17[24 * v13];
      *(void *)&long long v264 = v17;
      *((void *)&v264 + 1) = v18;
      char v266 = &v17[24 * v16];
      long long v19 = *(_OWORD *)v243;
      *((void *)v18 + 2) = v244;
      *(_OWORD *)long long v18 = v19;
      v243[1] = 0;
      uint64_t v244 = 0;
      v243[0] = 0;
      v265 = v18 + 24;
      sub_216790CCC(v5 + 8, &v264);
      uint64_t v12 = v5[9];
      sub_216790E64((uint64_t)&v264);
    }
    else
    {
      long long v11 = *(_OWORD *)v243;
      *(void *)(v10 + 16) = v244;
      *(_OWORD *)unint64_t v10 = v11;
      v243[1] = 0;
      uint64_t v244 = 0;
      v243[0] = 0;
      uint64_t v12 = v10 + 24;
      v5[9] = v10 + 24;
    }
    v5[9] = v12;
    unint64_t v20 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13InfENS0_3seqIJNS3_6DigitsENS0_12if_then_elseINS3_4FracENS0_3optIJNS3_3ExpEEEESA_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v20)
    {
      sub_216779094(&v262, v20);
      free(v20);
    }
    else
    {
      sub_216779094(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13InfENS0_3seqIJNS3_6DigitsENS0_12if_then_elseINS3_4FracENS0_3optIJNS3_3ExpEEEESA_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v259) = 3;
    long long v264 = v262;
    v265 = v263;
    long long v262 = 0uLL;
    long long v263 = 0;
    LOBYTE(v266) = 3;
    uint64_t v268 = 0;
    uint64_t v269 = 0;
    char v267 = 0;
    uint64_t v260 = 0;
    uint64_t v261 = 0;
    *((void *)&v259 + 1) = 0;
    long long v21 = sub_216B20DE4(a1, (const void **)&v264, &v264);
    char v23 = v22;
    *(void *)&long long v257 = &v267;
    sub_216782F20((void ***)&v257);
    if (SHIBYTE(v265) < 0) {
      operator delete((void *)v264);
    }
    *(void *)&long long v257 = (char *)&v259 + 8;
    sub_216782F20((void ***)&v257);
    if (SHIBYTE(v263) < 0) {
      operator delete((void *)v262);
    }
    if (v23)
    {
      unint64_t v24 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13InfE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v24)
      {
        sub_216779094(&v262, v24);
        free(v24);
      }
      else
      {
        sub_216779094(&v262, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13InfE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v259) = 2;
      long long v264 = v262;
      v265 = v263;
      long long v262 = 0uLL;
      long long v263 = 0;
      LOBYTE(v266) = 2;
      uint64_t v268 = 0;
      uint64_t v269 = 0;
      char v267 = 0;
      uint64_t v260 = 0;
      uint64_t v261 = 0;
      *((void *)&v259 + 1) = 0;
      unint64_t v25 = sub_216B20DE4(a1, (const void **)&v264, &v264);
      char v27 = v26;
      *(void *)&long long v257 = &v267;
      sub_216782F20((void ***)&v257);
      if (SHIBYTE(v265) < 0) {
        operator delete((void *)v264);
      }
      *(void *)&long long v257 = (char *)&v259 + 8;
      sub_216782F20((void ***)&v257);
      uint64_t v9 = v5 + 8;
      if (SHIBYTE(v263) < 0) {
        operator delete((void *)v262);
      }
      if (v27)
      {
        sub_216B2A090(a1, (uint64_t)&v259);
        uint64_t v28 = v25 + 8;
        unint64_t v29 = v25[10];
        unint64_t v30 = v25[9];
        if (v30 >= v29)
        {
          unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *v28) >> 3);
          unint64_t v34 = v33 + 1;
          if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *v28) >> 3);
          if (2 * v35 > v34) {
            unint64_t v34 = 2 * v35;
          }
          if (v35 >= 0x555555555555555) {
            unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v36 = v34;
          }
          char v267 = v25 + 10;
          if (v36) {
            unint64_t v37 = (char *)sub_216782ED8((uint64_t)(v25 + 10), v36);
          }
          else {
            unint64_t v37 = 0;
          }
          long long v38 = &v37[24 * v33];
          *(void *)&long long v264 = v37;
          *((void *)&v264 + 1) = v38;
          char v266 = &v37[24 * v36];
          long long v39 = v259;
          *((void *)v38 + 2) = v260;
          *(_OWORD *)long long v38 = v39;
          uint64_t v260 = 0;
          long long v259 = 0uLL;
          v265 = v38 + 24;
          sub_216790CCC(v25 + 8, &v264);
          uint64_t v32 = v25[9];
          sub_216790E64((uint64_t)&v264);
        }
        else
        {
          long long v31 = v259;
          *(void *)(v30 + 16) = v260;
          *(_OWORD *)unint64_t v30 = v31;
          uint64_t v260 = 0;
          long long v259 = 0uLL;
          uint64_t v32 = v30 + 24;
          v25[9] = v30 + 24;
        }
        v25[9] = v32;
        sub_216B21B48(a1, (uint64_t)&v262);
        unint64_t v41 = v25[9];
        unint64_t v40 = v25[10];
        if (v41 >= v40)
        {
          unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *v28) >> 3);
          unint64_t v44 = v43 + 1;
          if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v28) >> 3);
          if (2 * v45 > v44) {
            unint64_t v44 = 2 * v45;
          }
          if (v45 >= 0x555555555555555) {
            unint64_t v46 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v46 = v44;
          }
          char v267 = v25 + 10;
          if (v46) {
            unint64_t v47 = (char *)sub_216782ED8((uint64_t)(v25 + 10), v46);
          }
          else {
            unint64_t v47 = 0;
          }
          int v48 = &v47[24 * v43];
          *(void *)&long long v264 = v47;
          *((void *)&v264 + 1) = v48;
          char v266 = &v47[24 * v46];
          long long v49 = v262;
          *((void *)v48 + 2) = v263;
          *(_OWORD *)int v48 = v49;
          long long v263 = 0;
          long long v262 = 0uLL;
          v265 = v48 + 24;
          sub_216790CCC(v25 + 8, &v264);
          uint64_t v50 = v25[9];
          sub_216790E64((uint64_t)&v264);
          int v51 = SHIBYTE(v263);
          v25[9] = v50;
          uint64_t v9 = v5 + 8;
          if (v51 < 0) {
            operator delete((void *)v262);
          }
        }
        else
        {
          long long v42 = v262;
          *(void *)(v41 + 16) = v263;
          *(_OWORD *)unint64_t v41 = v42;
          v25[9] = v41 + 24;
          uint64_t v9 = v5 + 8;
        }
        if (SHIBYTE(v260) < 0) {
          operator delete((void *)v259);
        }
      }
      if (*((char *)v25 + 55) < 0)
      {
        sub_216778F24(__dst, (void *)v25[4], v25[5]);
      }
      else
      {
        *(_OWORD *)std::string __dst = *((_OWORD *)v25 + 2);
        uint64_t v248 = v25[6];
      }
      int v52 = v21 + 8;
      unint64_t v53 = v21[10];
      unint64_t v54 = v21[9];
      uint64_t v237 = v21 + 8;
      if (v54 >= v53)
      {
        unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - *v52) >> 3);
        unint64_t v58 = v57 + 1;
        if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *v52) >> 3);
        if (2 * v59 > v58) {
          unint64_t v58 = 2 * v59;
        }
        if (v59 >= 0x555555555555555) {
          unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v60 = v58;
        }
        char v267 = v21 + 10;
        if (v60) {
          long long v61 = (char *)sub_216782ED8((uint64_t)(v21 + 10), v60);
        }
        else {
          long long v61 = 0;
        }
        long long v62 = &v61[24 * v57];
        *(void *)&long long v264 = v61;
        *((void *)&v264 + 1) = v62;
        char v266 = &v61[24 * v60];
        long long v63 = *(_OWORD *)__dst;
        *((void *)v62 + 2) = v248;
        *(_OWORD *)long long v62 = v63;
        __dst[1] = 0;
        uint64_t v248 = 0;
        __dst[0] = 0;
        v265 = v62 + 24;
        sub_216790CCC(v21 + 8, &v264);
        uint64_t v56 = v21[9];
        sub_216790E64((uint64_t)&v264);
      }
      else
      {
        long long v55 = *(_OWORD *)__dst;
        *(void *)(v54 + 16) = v248;
        *(_OWORD *)unint64_t v54 = v55;
        __dst[1] = 0;
        uint64_t v248 = 0;
        __dst[0] = 0;
        uint64_t v56 = v54 + 24;
        v21[9] = v54 + 24;
      }
      v21[9] = v56;
      unint64_t v64 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsENS0_12if_then_elseINS3_4FracENS0_3optIJNS3_3ExpEEEES8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v64)
      {
        sub_216779094(&v262, v64);
        free(v64);
      }
      else
      {
        sub_216779094(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsENS0_12if_then_elseINS3_4FracENS0_3optIJNS3_3ExpEEEES8_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v259) = 2;
      long long v264 = v262;
      v265 = v263;
      long long v262 = 0uLL;
      long long v263 = 0;
      LOBYTE(v266) = 2;
      uint64_t v268 = 0;
      uint64_t v269 = 0;
      char v267 = 0;
      uint64_t v260 = 0;
      uint64_t v261 = 0;
      *((void *)&v259 + 1) = 0;
      long long v65 = sub_216B20DE4(a1, (const void **)&v264, &v264);
      char v67 = v66;
      *(void *)&long long v257 = &v267;
      sub_216782F20((void ***)&v257);
      if (SHIBYTE(v265) < 0) {
        operator delete((void *)v264);
      }
      *(void *)&long long v257 = (char *)&v259 + 8;
      sub_216782F20((void ***)&v257);
      if (SHIBYTE(v263) < 0) {
        operator delete((void *)v262);
      }
      if (v67)
      {
        sub_216B2A2B0(a1, (uint64_t)&v251);
        unint64_t v68 = v65[10];
        unint64_t v69 = v65[9];
        int v238 = v65 + 8;
        if (v69 >= v68)
        {
          uint64_t v72 = v65[8];
          unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - v72) >> 3);
          unint64_t v74 = v73 + 1;
          if (v73 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - v72) >> 3);
          if (2 * v75 > v74) {
            unint64_t v74 = 2 * v75;
          }
          if (v75 >= 0x555555555555555) {
            unint64_t v76 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v76 = v74;
          }
          char v267 = v65 + 10;
          if (v76) {
            long long v77 = (char *)sub_216782ED8((uint64_t)(v65 + 10), v76);
          }
          else {
            long long v77 = 0;
          }
          unint64_t v78 = &v77[24 * v73];
          *(void *)&long long v264 = v77;
          *((void *)&v264 + 1) = v78;
          char v266 = &v77[24 * v76];
          long long v79 = v251;
          *((void *)v78 + 2) = v252;
          *(_OWORD *)unint64_t v78 = v79;
          uint64_t v252 = 0;
          long long v251 = 0uLL;
          v265 = v78 + 24;
          sub_216790CCC(v238, &v264);
          uint64_t v71 = v65[9];
          sub_216790E64((uint64_t)&v264);
        }
        else
        {
          long long v70 = v251;
          *(void *)(v69 + 16) = v252;
          *(_OWORD *)unint64_t v69 = v70;
          uint64_t v252 = 0;
          long long v251 = 0uLL;
          uint64_t v71 = v69 + 24;
          v65[9] = v69 + 24;
        }
        v65[9] = v71;
        unint64_t v80 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl12if_then_elseIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracENS0_3optIJNS3_3ExpEEEES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v80)
        {
          sub_216779094(&v262, v80);
          free(v80);
        }
        else
        {
          sub_216779094(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl12if_then_elseIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracENS0_3optIJNS3_3ExpEEEES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v259) = 3;
        long long v264 = v262;
        v265 = v263;
        long long v262 = 0uLL;
        long long v263 = 0;
        LOBYTE(v266) = 3;
        uint64_t v268 = 0;
        uint64_t v269 = 0;
        char v267 = 0;
        uint64_t v260 = 0;
        uint64_t v261 = 0;
        *((void *)&v259 + 1) = 0;
        unint64_t v239 = sub_216B20DE4(a1, (const void **)&v264, &v264);
        char v82 = v81;
        *(void *)&long long v257 = &v267;
        sub_216782F20((void ***)&v257);
        if (SHIBYTE(v265) < 0) {
          operator delete((void *)v264);
        }
        *(void *)&long long v257 = (char *)&v259 + 8;
        sub_216782F20((void ***)&v257);
        if (SHIBYTE(v263) < 0) {
          operator delete((void *)v262);
        }
        if (v82)
        {
          uint64_t v83 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracENS0_3optIJNS4_3ExpEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v83)
          {
            sub_216779094(&v262, v83);
            free(v83);
          }
          else
          {
            sub_216779094(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracENS0_3optIJNS4_3ExpEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v259) = 2;
          long long v264 = v262;
          v265 = v263;
          long long v262 = 0uLL;
          long long v263 = 0;
          LOBYTE(v266) = 2;
          uint64_t v268 = 0;
          uint64_t v269 = 0;
          char v267 = 0;
          uint64_t v260 = 0;
          uint64_t v261 = 0;
          *((void *)&v259 + 1) = 0;
          long long v84 = sub_216B20DE4(a1, (const void **)&v264, &v264);
          char v86 = v85;
          *(void *)&long long v257 = &v267;
          sub_216782F20((void ***)&v257);
          if (SHIBYTE(v265) < 0) {
            operator delete((void *)v264);
          }
          *(void *)&long long v257 = (char *)&v259 + 8;
          sub_216782F20((void ***)&v257);
          if (SHIBYTE(v263) < 0) {
            operator delete((void *)v262);
          }
          if (v86)
          {
            sub_216B2B158(a1, (uint64_t)&v257);
            unint64_t v87 = v84 + 8;
            unint64_t v88 = v84[10];
            unint64_t v89 = v84[9];
            v235 = v84 + 8;
            if (v89 >= v88)
            {
              unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - *v87) >> 3);
              unint64_t v93 = v92 + 1;
              if (v92 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - *v87) >> 3);
              if (2 * v94 > v93) {
                unint64_t v93 = 2 * v94;
              }
              if (v94 >= 0x555555555555555) {
                unint64_t v95 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v95 = v93;
              }
              char v267 = v84 + 10;
              if (v95) {
                v96 = (char *)sub_216782ED8((uint64_t)(v84 + 10), v95);
              }
              else {
                v96 = 0;
              }
              long long v97 = &v96[24 * v92];
              *(void *)&long long v264 = v96;
              *((void *)&v264 + 1) = v97;
              char v266 = &v96[24 * v95];
              long long v98 = v257;
              *((void *)v97 + 2) = v258;
              *(_OWORD *)long long v97 = v98;
              uint64_t v258 = 0;
              long long v257 = 0uLL;
              v265 = v97 + 24;
              sub_216790CCC(v84 + 8, &v264);
              uint64_t v91 = v84[9];
              sub_216790E64((uint64_t)&v264);
            }
            else
            {
              long long v90 = v257;
              *(void *)(v89 + 16) = v258;
              *(_OWORD *)unint64_t v89 = v90;
              uint64_t v258 = 0;
              long long v257 = 0uLL;
              uint64_t v91 = v89 + 24;
              v84[9] = v89 + 24;
            }
            v84[9] = v91;
            unint64_t v99 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13ExpEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
            if (v99)
            {
              sub_216779094(&v262, v99);
              free(v99);
            }
            else
            {
              sub_216779094(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3optIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13ExpEEEE" & 0x7FFFFFFFFFFFFFFFLL));
            }
            LOBYTE(v259) = 1;
            long long v264 = v262;
            v265 = v263;
            long long v262 = 0uLL;
            long long v263 = 0;
            LOBYTE(v266) = 1;
            uint64_t v268 = 0;
            uint64_t v269 = 0;
            char v267 = 0;
            uint64_t v260 = 0;
            uint64_t v261 = 0;
            *((void *)&v259 + 1) = 0;
            long long v100 = sub_216B20DE4(a1, (const void **)&v264, &v264);
            char v102 = v101;
            v270[0] = (void **)&v267;
            sub_216782F20(v270);
            if (SHIBYTE(v265) < 0) {
              operator delete((void *)v264);
            }
            v270[0] = (void **)&v259 + 1;
            sub_216782F20(v270);
            if (SHIBYTE(v263) < 0) {
              operator delete((void *)v262);
            }
            if (v102)
            {
              sub_216B2BB34(a1, (uint64_t)&v259);
              unint64_t v103 = v100[10];
              unint64_t v104 = v100[9];
              if (v104 >= v103)
              {
                uint64_t v106 = v100[8];
                unint64_t v107 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104 - v106) >> 3);
                unint64_t v108 = v107 + 1;
                if (v107 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_21677CB10();
                }
                unint64_t v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - v106) >> 3);
                if (2 * v109 > v108) {
                  unint64_t v108 = 2 * v109;
                }
                if (v109 >= 0x555555555555555) {
                  unint64_t v110 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v110 = v108;
                }
                char v267 = v100 + 10;
                if (v110) {
                  unint64_t v111 = (char *)sub_216782ED8((uint64_t)(v100 + 10), v110);
                }
                else {
                  unint64_t v111 = 0;
                }
                long long v112 = &v111[24 * v107];
                *(void *)&long long v264 = v111;
                *((void *)&v264 + 1) = v112;
                char v266 = &v111[24 * v110];
                long long v113 = v259;
                *((void *)v112 + 2) = v260;
                *(_OWORD *)long long v112 = v113;
                uint64_t v260 = 0;
                long long v259 = 0uLL;
                v265 = v112 + 24;
                sub_216790CCC(v100 + 8, &v264);
                uint64_t v114 = v100[9];
                sub_216790E64((uint64_t)&v264);
                int v115 = SHIBYTE(v260);
                v100[9] = v114;
                if (v115 < 0) {
                  operator delete((void *)v259);
                }
              }
              else
              {
                long long v105 = v259;
                *(void *)(v104 + 16) = v260;
                *(_OWORD *)unint64_t v104 = v105;
                v100[9] = v104 + 24;
              }
            }
            if (*((char *)v100 + 55) < 0)
            {
              sub_216778F24(__p, (void *)v100[4], v100[5]);
            }
            else
            {
              *(_OWORD *)std::string __p = *((_OWORD *)v100 + 2);
              uint64_t v256 = v100[6];
            }
            unint64_t v117 = v84[9];
            unint64_t v116 = v84[10];
            if (v117 >= v116)
            {
              unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117 - *v235) >> 3);
              unint64_t v120 = v119 + 1;
              if (v119 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v121 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - *v235) >> 3);
              if (2 * v121 > v120) {
                unint64_t v120 = 2 * v121;
              }
              if (v121 >= 0x555555555555555) {
                unint64_t v122 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v122 = v120;
              }
              char v267 = v84 + 10;
              if (v122) {
                unint64_t v123 = (char *)sub_216782ED8((uint64_t)(v84 + 10), v122);
              }
              else {
                unint64_t v123 = 0;
              }
              unint64_t v124 = &v123[24 * v119];
              *(void *)&long long v264 = v123;
              *((void *)&v264 + 1) = v124;
              char v266 = &v123[24 * v122];
              long long v125 = *(_OWORD *)__p;
              *((void *)v124 + 2) = v256;
              *(_OWORD *)unint64_t v124 = v125;
              __p[1] = 0;
              uint64_t v256 = 0;
              __p[0] = 0;
              v265 = v124 + 24;
              sub_216790CCC(v235, &v264);
              uint64_t v126 = v84[9];
              sub_216790E64((uint64_t)&v264);
              int v127 = SHIBYTE(v256);
              v84[9] = v126;
              if (v127 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v118 = *(_OWORD *)__p;
              *(void *)(v117 + 16) = v256;
              *(_OWORD *)unint64_t v117 = v118;
              v84[9] = v117 + 24;
            }
            if (SHIBYTE(v258) < 0) {
              operator delete((void *)v257);
            }
          }
          if (*((char *)v84 + 55) < 0)
          {
            sub_216778F24(v253, (void *)v84[4], v84[5]);
          }
          else
          {
            *(_OWORD *)unint64_t v253 = *((_OWORD *)v84 + 2);
            uint64_t v254 = v84[6];
          }
          unint64_t v128 = v239;
          unint64_t v129 = v239[10];
          unint64_t v130 = v239[9];
          long long v236 = v239 + 8;
          if (v130 >= v129)
          {
            uint64_t v133 = v239[8];
            unint64_t v134 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v130 - v133) >> 3);
            unint64_t v135 = v134 + 1;
            if (v134 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v136 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v129 - v133) >> 3);
            if (2 * v136 > v135) {
              unint64_t v135 = 2 * v136;
            }
            if (v136 >= 0x555555555555555) {
              unint64_t v137 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v137 = v135;
            }
            char v267 = v239 + 10;
            if (v137) {
              v138 = (char *)sub_216782ED8((uint64_t)(v239 + 10), v137);
            }
            else {
              v138 = 0;
            }
            unint64_t v128 = v239;
            v139 = &v138[24 * v134];
            *(void *)&long long v264 = v138;
            *((void *)&v264 + 1) = v139;
            char v266 = &v138[24 * v137];
            long long v140 = *(_OWORD *)v253;
            *((void *)v139 + 2) = v254;
            *(_OWORD *)v139 = v140;
            v253[1] = 0;
            uint64_t v254 = 0;
            v253[0] = 0;
            v265 = v139 + 24;
            sub_216790CCC(v236, &v264);
            uint64_t v132 = v239[9];
            sub_216790E64((uint64_t)&v264);
          }
          else
          {
            long long v131 = *(_OWORD *)v253;
            *(void *)(v130 + 16) = v254;
            *(_OWORD *)unint64_t v130 = v131;
            v253[1] = 0;
            uint64_t v254 = 0;
            v253[0] = 0;
            uint64_t v132 = v130 + 24;
            v239[9] = v130 + 24;
          }
          v128[9] = v132;
          char v141 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracEEEENS5_3ExpEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v141)
          {
            sub_216779094(&v262, v141);
            free(v141);
          }
          else
          {
            sub_216779094(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracEEEENS5_3ExpEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(v259) = 2;
          long long v264 = v262;
          v265 = v263;
          long long v262 = 0uLL;
          long long v263 = 0;
          LOBYTE(v266) = 2;
          uint64_t v268 = 0;
          uint64_t v269 = 0;
          char v267 = 0;
          uint64_t v260 = 0;
          uint64_t v261 = 0;
          *((void *)&v259 + 1) = 0;
          v142 = sub_216B20DE4(a1, (const void **)&v264, &v264);
          char v144 = v143;
          *(void *)&long long v257 = &v267;
          sub_216782F20((void ***)&v257);
          if (SHIBYTE(v265) < 0) {
            operator delete((void *)v264);
          }
          *(void *)&long long v257 = (char *)&v259 + 8;
          sub_216782F20((void ***)&v257);
          if (SHIBYTE(v263) < 0) {
            operator delete((void *)v262);
          }
          if (v144)
          {
            char v145 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal6not_atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
            if (v145)
            {
              sub_216779094(&v262, v145);
              free(v145);
            }
            else
            {
              sub_216779094(&v262, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal6not_atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracEEEE" & 0x7FFFFFFFFFFFFFFFLL));
            }
            LOBYTE(v259) = 1;
            long long v264 = v262;
            v265 = v263;
            long long v262 = 0uLL;
            long long v263 = 0;
            LOBYTE(v266) = 1;
            uint64_t v268 = 0;
            uint64_t v269 = 0;
            char v267 = 0;
            uint64_t v260 = 0;
            uint64_t v261 = 0;
            *((void *)&v259 + 1) = 0;
            v146 = sub_216B20DE4(a1, (const void **)&v264, &v264);
            char v148 = v147;
            v270[0] = (void **)&v267;
            sub_216782F20(v270);
            if (SHIBYTE(v265) < 0) {
              operator delete((void *)v264);
            }
            v270[0] = (void **)&v259 + 1;
            sub_216782F20(v270);
            if (SHIBYTE(v263) < 0) {
              operator delete((void *)v262);
            }
            if (v148)
            {
              sub_216B2B158(a1, (uint64_t)&v259);
              unint64_t v149 = v146[10];
              unint64_t v150 = v146[9];
              if (v150 >= v149)
              {
                uint64_t v152 = v146[8];
                unint64_t v153 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v150 - v152) >> 3);
                unint64_t v154 = v153 + 1;
                if (v153 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_21677CB10();
                }
                unint64_t v155 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - v152) >> 3);
                if (2 * v155 > v154) {
                  unint64_t v154 = 2 * v155;
                }
                if (v155 >= 0x555555555555555) {
                  unint64_t v156 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v156 = v154;
                }
                char v267 = v146 + 10;
                if (v156) {
                  long long v157 = (char *)sub_216782ED8((uint64_t)(v146 + 10), v156);
                }
                else {
                  long long v157 = 0;
                }
                unint64_t v158 = &v157[24 * v153];
                *(void *)&long long v264 = v157;
                *((void *)&v264 + 1) = v158;
                char v266 = &v157[24 * v156];
                long long v159 = v259;
                *((void *)v158 + 2) = v260;
                *(_OWORD *)unint64_t v158 = v159;
                uint64_t v260 = 0;
                long long v259 = 0uLL;
                v265 = v158 + 24;
                sub_216790CCC(v146 + 8, &v264);
                uint64_t v160 = v146[9];
                sub_216790E64((uint64_t)&v264);
                int v161 = SHIBYTE(v260);
                v146[9] = v160;
                if (v161 < 0) {
                  operator delete((void *)v259);
                }
              }
              else
              {
                long long v151 = v259;
                *(void *)(v150 + 16) = v260;
                *(_OWORD *)unint64_t v150 = v151;
                v146[9] = v150 + 24;
              }
            }
            if (*((char *)v146 + 55) < 0)
            {
              sub_216778F24(&v257, (void *)v146[4], v146[5]);
            }
            else
            {
              long long v257 = *((_OWORD *)v146 + 2);
              uint64_t v258 = v146[6];
            }
            unint64_t v162 = v142 + 8;
            unint64_t v163 = v142[10];
            unint64_t v164 = v142[9];
            if (v164 >= v163)
            {
              unint64_t v167 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v164 - *v162) >> 3);
              unint64_t v168 = v167 + 1;
              if (v167 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v169 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v163 - *v162) >> 3);
              if (2 * v169 > v168) {
                unint64_t v168 = 2 * v169;
              }
              if (v169 >= 0x555555555555555) {
                unint64_t v170 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v170 = v168;
              }
              char v267 = v142 + 10;
              if (v170) {
                unint64_t v171 = (char *)sub_216782ED8((uint64_t)(v142 + 10), v170);
              }
              else {
                unint64_t v171 = 0;
              }
              long long v172 = &v171[24 * v167];
              *(void *)&long long v264 = v171;
              *((void *)&v264 + 1) = v172;
              char v266 = &v171[24 * v170];
              long long v173 = v257;
              *((void *)v172 + 2) = v258;
              *(_OWORD *)long long v172 = v173;
              uint64_t v258 = 0;
              long long v257 = 0uLL;
              v265 = v172 + 24;
              sub_216790CCC(v142 + 8, &v264);
              uint64_t v166 = v142[9];
              sub_216790E64((uint64_t)&v264);
            }
            else
            {
              long long v165 = v257;
              *(void *)(v164 + 16) = v258;
              *(_OWORD *)unint64_t v164 = v165;
              uint64_t v258 = 0;
              long long v257 = 0uLL;
              uint64_t v166 = v164 + 24;
              v142[9] = v164 + 24;
            }
            v142[9] = v166;
            sub_216B2BB34(a1, (uint64_t)&v259);
            unint64_t v175 = v142[9];
            unint64_t v174 = v142[10];
            if (v175 >= v174)
            {
              unint64_t v177 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v175 - *v162) >> 3);
              unint64_t v178 = v177 + 1;
              if (v177 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v174 - *v162) >> 3);
              if (2 * v179 > v178) {
                unint64_t v178 = 2 * v179;
              }
              if (v179 >= 0x555555555555555) {
                unint64_t v180 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v180 = v178;
              }
              char v267 = v142 + 10;
              if (v180) {
                long long v181 = (char *)sub_216782ED8((uint64_t)(v142 + 10), v180);
              }
              else {
                long long v181 = 0;
              }
              v182 = &v181[24 * v177];
              *(void *)&long long v264 = v181;
              *((void *)&v264 + 1) = v182;
              char v266 = &v181[24 * v180];
              long long v183 = v259;
              *((void *)v182 + 2) = v260;
              *(_OWORD *)v182 = v183;
              uint64_t v260 = 0;
              long long v259 = 0uLL;
              v265 = v182 + 24;
              sub_216790CCC(v142 + 8, &v264);
              uint64_t v184 = v142[9];
              sub_216790E64((uint64_t)&v264);
              int v185 = SHIBYTE(v260);
              v142[9] = v184;
              if (v185 < 0) {
                operator delete((void *)v259);
              }
            }
            else
            {
              long long v176 = v259;
              *(void *)(v175 + 16) = v260;
              *(_OWORD *)unint64_t v175 = v176;
              v142[9] = v175 + 24;
            }
            if (SHIBYTE(v258) < 0) {
              operator delete((void *)v257);
            }
          }
          if (*((char *)v142 + 55) < 0)
          {
            sub_216778F24(__p, (void *)v142[4], v142[5]);
          }
          else
          {
            *(_OWORD *)std::string __p = *((_OWORD *)v142 + 2);
            uint64_t v256 = v142[6];
          }
          unint64_t v187 = v239[9];
          unint64_t v186 = v239[10];
          if (v187 >= v186)
          {
            unint64_t v189 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v187 - *v236) >> 3);
            unint64_t v190 = v189 + 1;
            uint64_t v9 = v5 + 8;
            if (v189 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v191 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186 - *v236) >> 3);
            if (2 * v191 > v190) {
              unint64_t v190 = 2 * v191;
            }
            if (v191 >= 0x555555555555555) {
              unint64_t v192 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v192 = v190;
            }
            char v267 = v239 + 10;
            if (v192) {
              unint64_t v193 = (char *)sub_216782ED8((uint64_t)(v239 + 10), v192);
            }
            else {
              unint64_t v193 = 0;
            }
            unint64_t v194 = &v193[24 * v189];
            *(void *)&long long v264 = v193;
            *((void *)&v264 + 1) = v194;
            char v266 = &v193[24 * v192];
            long long v195 = *(_OWORD *)__p;
            *((void *)v194 + 2) = v256;
            *(_OWORD *)unint64_t v194 = v195;
            __p[1] = 0;
            uint64_t v256 = 0;
            __p[0] = 0;
            v265 = v194 + 24;
            sub_216790CCC(v236, &v264);
            uint64_t v196 = v239[9];
            sub_216790E64((uint64_t)&v264);
            int v197 = SHIBYTE(v256);
            v239[9] = v196;
            if (v197 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v188 = *(_OWORD *)__p;
            *(void *)(v187 + 16) = v256;
            *(_OWORD *)unint64_t v187 = v188;
            v239[9] = v187 + 24;
            uint64_t v9 = v5 + 8;
          }
          if (SHIBYTE(v254) < 0) {
            operator delete(v253[0]);
          }
        }
        if (*((char *)v239 + 55) < 0)
        {
          sub_216778F24(v249, (void *)v239[4], v239[5]);
        }
        else
        {
          *(_OWORD *)uint64_t v249 = *((_OWORD *)v239 + 2);
          uint64_t v250 = v239[6];
        }
        unint64_t v199 = v65[9];
        unint64_t v198 = v65[10];
        if (v199 >= v198)
        {
          unint64_t v201 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v199 - *v238) >> 3);
          unint64_t v202 = v201 + 1;
          if (v201 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v198 - *v238) >> 3);
          if (2 * v203 > v202) {
            unint64_t v202 = 2 * v203;
          }
          if (v203 >= 0x555555555555555) {
            unint64_t v204 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v204 = v202;
          }
          char v267 = v65 + 10;
          if (v204) {
            unint64_t v205 = (char *)sub_216782ED8((uint64_t)(v65 + 10), v204);
          }
          else {
            unint64_t v205 = 0;
          }
          long long v206 = &v205[24 * v201];
          *(void *)&long long v264 = v205;
          *((void *)&v264 + 1) = v206;
          char v266 = &v205[24 * v204];
          long long v207 = *(_OWORD *)v249;
          *((void *)v206 + 2) = v250;
          *(_OWORD *)long long v206 = v207;
          v249[1] = 0;
          uint64_t v250 = 0;
          v249[0] = 0;
          v265 = v206 + 24;
          sub_216790CCC(v238, &v264);
          uint64_t v208 = v65[9];
          sub_216790E64((uint64_t)&v264);
          int v209 = SHIBYTE(v250);
          v65[9] = v208;
          if (v209 < 0) {
            operator delete(v249[0]);
          }
        }
        else
        {
          long long v200 = *(_OWORD *)v249;
          *(void *)(v199 + 16) = v250;
          *(_OWORD *)unint64_t v199 = v200;
          v65[9] = v199 + 24;
        }
        if (SHIBYTE(v252) < 0) {
          operator delete((void *)v251);
        }
      }
      if (*((char *)v65 + 55) < 0)
      {
        sub_216778F24(v245, (void *)v65[4], v65[5]);
      }
      else
      {
        *(_OWORD *)unint64_t v245 = *((_OWORD *)v65 + 2);
        uint64_t v246 = v65[6];
      }
      unint64_t v211 = v21[9];
      unint64_t v210 = v21[10];
      if (v211 >= v210)
      {
        unint64_t v213 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v211 - *v237) >> 3);
        unint64_t v214 = v213 + 1;
        if (v213 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v215 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v210 - *v237) >> 3);
        if (2 * v215 > v214) {
          unint64_t v214 = 2 * v215;
        }
        if (v215 >= 0x555555555555555) {
          unint64_t v216 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v216 = v214;
        }
        char v267 = v21 + 10;
        if (v216) {
          long long v217 = (char *)sub_216782ED8((uint64_t)(v21 + 10), v216);
        }
        else {
          long long v217 = 0;
        }
        unint64_t v218 = &v217[24 * v213];
        *(void *)&long long v264 = v217;
        *((void *)&v264 + 1) = v218;
        char v266 = &v217[24 * v216];
        long long v219 = *(_OWORD *)v245;
        *((void *)v218 + 2) = v246;
        *(_OWORD *)unint64_t v218 = v219;
        v245[1] = 0;
        uint64_t v246 = 0;
        v245[0] = 0;
        v265 = v218 + 24;
        sub_216790CCC(v237, &v264);
        uint64_t v220 = v21[9];
        sub_216790E64((uint64_t)&v264);
        int v221 = SHIBYTE(v246);
        v21[9] = v220;
        if (v221 < 0) {
          operator delete(v245[0]);
        }
      }
      else
      {
        long long v212 = *(_OWORD *)v245;
        *(void *)(v211 + 16) = v246;
        *(_OWORD *)unint64_t v211 = v212;
        v21[9] = v211 + 24;
      }
      if (SHIBYTE(v248) < 0) {
        operator delete(__dst[0]);
      }
    }
    if (*((char *)v21 + 55) < 0)
    {
      sub_216778F24(v241, (void *)v21[4], v21[5]);
    }
    else
    {
      *(_OWORD *)long long v241 = *((_OWORD *)v21 + 2);
      uint64_t v242 = v21[6];
    }
    unint64_t v223 = v5[9];
    unint64_t v222 = v5[10];
    if (v223 >= v222)
    {
      unint64_t v225 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v223 - *v9) >> 3);
      unint64_t v226 = v225 + 1;
      if (v225 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v227 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v222 - *v9) >> 3);
      if (2 * v227 > v226) {
        unint64_t v226 = 2 * v227;
      }
      if (v227 >= 0x555555555555555) {
        unint64_t v228 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v228 = v226;
      }
      char v267 = v5 + 10;
      if (v228) {
        long long v229 = (char *)sub_216782ED8((uint64_t)(v5 + 10), v228);
      }
      else {
        long long v229 = 0;
      }
      unint64_t v230 = &v229[24 * v225];
      *(void *)&long long v264 = v229;
      *((void *)&v264 + 1) = v230;
      char v266 = &v229[24 * v228];
      long long v231 = *(_OWORD *)v241;
      *((void *)v230 + 2) = v242;
      *(_OWORD *)unint64_t v230 = v231;
      v241[1] = 0;
      uint64_t v242 = 0;
      v241[0] = 0;
      v265 = v230 + 24;
      sub_216790CCC(v9, &v264);
      uint64_t v232 = v5[9];
      sub_216790E64((uint64_t)&v264);
      int v233 = SHIBYTE(v242);
      v5[9] = v232;
      if (v233 < 0) {
        operator delete(v241[0]);
      }
    }
    else
    {
      long long v224 = *(_OWORD *)v241;
      *(void *)(v223 + 16) = v242;
      *(_OWORD *)unint64_t v223 = v224;
      v5[9] = v223 + 24;
    }
    if (SHIBYTE(v244) < 0) {
      operator delete(v243[0]);
    }
  }
  if (*((char *)v5 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v5[4], v5[5]);
  }
  else
  {
    long long v234 = *((_OWORD *)v5 + 2);
    *(void *)(a2 + 16) = v5[6];
    *(_OWORD *)a2 = v234;
  }
}

void sub_216B26640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  sub_216790E64(v53 - 160);
  if (*(char *)(v53 - 193) < 0) {
    operator delete(*(void **)(v53 - 216));
  }
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void sub_216B26A64(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgIntE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgIntE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)std::string __p = *(_OWORD *)v37;
  unint64_t v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  long long v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  char v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  unint64_t v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B29C6C(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    unint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        long long v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        long long v18 = 0;
      }
      long long v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)long long v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      unint64_t v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B2A2B0(a1, (uint64_t)v37);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        uint64_t v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        uint64_t v28 = 0;
      }
      unint64_t v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)unint64_t v29 = v30;
      v37[1] = 0;
      long long v38 = 0;
      v37[0] = 0;
      unint64_t v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B26DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_216B26E70(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_111PredArgBoolE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v98, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v98, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_111PredArgBoolE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v95[0]) = 3;
  *(_OWORD *)std::string __p = *(_OWORD *)v98;
  char v101 = v99;
  v98[0] = 0;
  v98[1] = 0;
  unint64_t v99 = 0;
  LOBYTE(v102) = 3;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  unint64_t v103 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  v95[1] = 0;
  char v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  __dst[0] = &v103;
  sub_216782F20((void ***)__dst);
  if (SHIBYTE(v101) < 0) {
    operator delete(__p[0]);
  }
  __dst[0] = &v95[1];
  sub_216782F20((void ***)__dst);
  if (SHIBYTE(v99) < 0) {
    operator delete(v98[0]);
  }
  if (v8)
  {
    unint64_t v9 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14TrueE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v9)
    {
      unint64_t v10 = v9;
      sub_216779094(v98, v9);
      free(v10);
    }
    else
    {
      sub_216779094(v98, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14TrueE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v95[0]) = 2;
    *(_OWORD *)std::string __p = *(_OWORD *)v98;
    char v101 = v99;
    v98[0] = 0;
    v98[1] = 0;
    unint64_t v99 = 0;
    LOBYTE(v102) = 2;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    unint64_t v103 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    v95[1] = 0;
    unint64_t v11 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
    char v13 = v12;
    v91[0] = &v103;
    sub_216782F20((void ***)v91);
    if (SHIBYTE(v101) < 0) {
      operator delete(__p[0]);
    }
    v91[0] = &v95[1];
    sub_216782F20((void ***)v91);
    if (SHIBYTE(v99) < 0) {
      operator delete(v98[0]);
    }
    if (v13)
    {
      sub_216B2CBD4(a1, (uint64_t)v95);
      unint64_t v14 = v11[10];
      unint64_t v15 = v11 + 8;
      unint64_t v16 = v11[9];
      if (v16 >= v14)
      {
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *v15) >> 3);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v15) >> 3);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v20;
        }
        unint64_t v103 = v11 + 10;
        if (v22) {
          long long v23 = (char *)sub_216782ED8((uint64_t)(v11 + 10), v22);
        }
        else {
          long long v23 = 0;
        }
        unint64_t v24 = &v23[24 * v19];
        __p[0] = v23;
        __p[1] = v24;
        char v102 = &v23[24 * v22];
        long long v25 = *(_OWORD *)v95;
        *((void *)v24 + 2) = v96;
        *(_OWORD *)unint64_t v24 = v25;
        v95[1] = 0;
        uint64_t v96 = 0;
        v95[0] = 0;
        char v101 = v24 + 24;
        sub_216790CCC(v11 + 8, __p);
        uint64_t v18 = v11[9];
        sub_216790E64((uint64_t)__p);
      }
      else
      {
        long long v17 = *(_OWORD *)v95;
        *(void *)(v16 + 16) = v96;
        *(_OWORD *)unint64_t v16 = v17;
        v95[1] = 0;
        uint64_t v96 = 0;
        v95[0] = 0;
        uint64_t v18 = v16 + 24;
        v11[9] = v16 + 24;
      }
      v11[9] = v18;
      sub_216B21B48(a1, (uint64_t)v98);
      unint64_t v27 = v11[9];
      unint64_t v26 = v11[10];
      if (v27 >= v26)
      {
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v15) >> 3);
        unint64_t v30 = v29 + 1;
        if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v15) >> 3);
        if (2 * v31 > v30) {
          unint64_t v30 = 2 * v31;
        }
        if (v31 >= 0x555555555555555) {
          unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v32 = v30;
        }
        unint64_t v103 = v11 + 10;
        if (v32) {
          long long v33 = (char *)sub_216782ED8((uint64_t)(v11 + 10), v32);
        }
        else {
          long long v33 = 0;
        }
        unint64_t v34 = &v33[24 * v29];
        __p[0] = v33;
        __p[1] = v34;
        char v102 = &v33[24 * v32];
        long long v35 = *(_OWORD *)v98;
        *((void *)v34 + 2) = v99;
        *(_OWORD *)unint64_t v34 = v35;
        v98[1] = 0;
        unint64_t v99 = 0;
        v98[0] = 0;
        char v101 = v34 + 24;
        sub_216790CCC(v11 + 8, __p);
        uint64_t v36 = v11[9];
        sub_216790E64((uint64_t)__p);
        int v37 = SHIBYTE(v99);
        v11[9] = v36;
        if (v37 < 0) {
          operator delete(v98[0]);
        }
      }
      else
      {
        long long v28 = *(_OWORD *)v98;
        *(void *)(v27 + 16) = v99;
        *(_OWORD *)unint64_t v27 = v28;
        v11[9] = v27 + 24;
      }
      if (SHIBYTE(v96) < 0) {
        operator delete(v95[0]);
      }
    }
    if (*((char *)v11 + 55) < 0)
    {
      sub_216778F24(__dst, (void *)v11[4], v11[5]);
    }
    else
    {
      *(_OWORD *)std::string __dst = *((_OWORD *)v11 + 2);
      uint64_t v94 = v11[6];
    }
    long long v38 = v6 + 8;
    unint64_t v39 = v6[10];
    unint64_t v40 = v6[9];
    if (v40 >= v39)
    {
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v38) >> 3);
      unint64_t v44 = v43 + 1;
      if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *v38) >> 3);
      if (2 * v45 > v44) {
        unint64_t v44 = 2 * v45;
      }
      if (v45 >= 0x555555555555555) {
        unint64_t v46 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v46 = v44;
      }
      unint64_t v103 = v6 + 10;
      if (v46) {
        unint64_t v47 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v46);
      }
      else {
        unint64_t v47 = 0;
      }
      int v48 = &v47[24 * v43];
      __p[0] = v47;
      __p[1] = v48;
      char v102 = &v47[24 * v46];
      long long v49 = *(_OWORD *)__dst;
      *((void *)v48 + 2) = v94;
      *(_OWORD *)int v48 = v49;
      __dst[1] = 0;
      uint64_t v94 = 0;
      __dst[0] = 0;
      char v101 = v48 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v42 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v41 = *(_OWORD *)__dst;
      *(void *)(v40 + 16) = v94;
      *(_OWORD *)unint64_t v40 = v41;
      __dst[1] = 0;
      uint64_t v94 = 0;
      __dst[0] = 0;
      uint64_t v42 = v40 + 24;
      v6[9] = v40 + 24;
    }
    v6[9] = v42;
    uint64_t v50 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15FalseE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v50)
    {
      sub_216779094(v98, v50);
      free(v50);
    }
    else
    {
      sub_216779094(v98, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15FalseE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v95[0]) = 2;
    *(_OWORD *)std::string __p = *(_OWORD *)v98;
    char v101 = v99;
    v98[0] = 0;
    v98[1] = 0;
    unint64_t v99 = 0;
    LOBYTE(v102) = 2;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    unint64_t v103 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    v95[1] = 0;
    int v51 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
    char v53 = v52;
    v106[0] = (void **)&v103;
    sub_216782F20(v106);
    if (SHIBYTE(v101) < 0) {
      operator delete(__p[0]);
    }
    v106[0] = &v95[1];
    sub_216782F20(v106);
    if (SHIBYTE(v99) < 0) {
      operator delete(v98[0]);
    }
    if (v53)
    {
      sub_216B2CDF4(a1, (uint64_t)v95);
      unint64_t v54 = v51 + 8;
      unint64_t v55 = v51[10];
      unint64_t v56 = v51[9];
      if (v56 >= v55)
      {
        unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - *v54) >> 3);
        unint64_t v60 = v59 + 1;
        if (v59 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - *v54) >> 3);
        if (2 * v61 > v60) {
          unint64_t v60 = 2 * v61;
        }
        if (v61 >= 0x555555555555555) {
          unint64_t v62 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v62 = v60;
        }
        unint64_t v103 = v51 + 10;
        if (v62) {
          long long v63 = (char *)sub_216782ED8((uint64_t)(v51 + 10), v62);
        }
        else {
          long long v63 = 0;
        }
        unint64_t v64 = &v63[24 * v59];
        __p[0] = v63;
        __p[1] = v64;
        char v102 = &v63[24 * v62];
        long long v65 = *(_OWORD *)v95;
        *((void *)v64 + 2) = v96;
        *(_OWORD *)unint64_t v64 = v65;
        v95[1] = 0;
        uint64_t v96 = 0;
        v95[0] = 0;
        char v101 = v64 + 24;
        sub_216790CCC(v51 + 8, __p);
        uint64_t v58 = v51[9];
        sub_216790E64((uint64_t)__p);
      }
      else
      {
        long long v57 = *(_OWORD *)v95;
        *(void *)(v56 + 16) = v96;
        *(_OWORD *)unint64_t v56 = v57;
        v95[1] = 0;
        uint64_t v96 = 0;
        v95[0] = 0;
        uint64_t v58 = v56 + 24;
        v51[9] = v56 + 24;
      }
      v51[9] = v58;
      sub_216B21B48(a1, (uint64_t)v98);
      unint64_t v67 = v51[9];
      unint64_t v66 = v51[10];
      if (v67 >= v66)
      {
        unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - *v54) >> 3);
        unint64_t v70 = v69 + 1;
        if (v69 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - *v54) >> 3);
        if (2 * v71 > v70) {
          unint64_t v70 = 2 * v71;
        }
        if (v71 >= 0x555555555555555) {
          unint64_t v72 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v72 = v70;
        }
        unint64_t v103 = v51 + 10;
        if (v72) {
          unint64_t v73 = (char *)sub_216782ED8((uint64_t)(v51 + 10), v72);
        }
        else {
          unint64_t v73 = 0;
        }
        unint64_t v74 = &v73[24 * v69];
        __p[0] = v73;
        __p[1] = v74;
        char v102 = &v73[24 * v72];
        long long v75 = *(_OWORD *)v98;
        *((void *)v74 + 2) = v99;
        *(_OWORD *)unint64_t v74 = v75;
        v98[1] = 0;
        unint64_t v99 = 0;
        v98[0] = 0;
        char v101 = v74 + 24;
        sub_216790CCC(v51 + 8, __p);
        uint64_t v76 = v51[9];
        sub_216790E64((uint64_t)__p);
        int v77 = SHIBYTE(v99);
        v51[9] = v76;
        if (v77 < 0) {
          operator delete(v98[0]);
        }
      }
      else
      {
        long long v68 = *(_OWORD *)v98;
        *(void *)(v67 + 16) = v99;
        *(_OWORD *)unint64_t v67 = v68;
        v51[9] = v67 + 24;
      }
      if (SHIBYTE(v96) < 0) {
        operator delete(v95[0]);
      }
    }
    if (*((char *)v51 + 55) < 0)
    {
      sub_216778F24(v91, (void *)v51[4], v51[5]);
    }
    else
    {
      *(_OWORD *)uint64_t v91 = *((_OWORD *)v51 + 2);
      uint64_t v92 = v51[6];
    }
    unint64_t v79 = v6[9];
    unint64_t v78 = v6[10];
    if (v79 >= v78)
    {
      unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - *v38) >> 3);
      unint64_t v82 = v81 + 1;
      if (v81 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - *v38) >> 3);
      if (2 * v83 > v82) {
        unint64_t v82 = 2 * v83;
      }
      if (v83 >= 0x555555555555555) {
        unint64_t v84 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v84 = v82;
      }
      unint64_t v103 = v6 + 10;
      if (v84) {
        char v85 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v84);
      }
      else {
        char v85 = 0;
      }
      char v86 = &v85[24 * v81];
      __p[0] = v85;
      __p[1] = v86;
      char v102 = &v85[24 * v84];
      long long v87 = *(_OWORD *)v91;
      *((void *)v86 + 2) = v92;
      *(_OWORD *)char v86 = v87;
      v91[1] = 0;
      uint64_t v92 = 0;
      v91[0] = 0;
      char v101 = v86 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v88 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v89 = SHIBYTE(v92);
      v6[9] = v88;
      if (v89 < 0) {
        operator delete(v91[0]);
      }
    }
    else
    {
      long long v80 = *(_OWORD *)v91;
      *(void *)(v79 + 16) = v92;
      *(_OWORD *)unint64_t v79 = v80;
      v6[9] = v79 + 24;
    }
    if (SHIBYTE(v94) < 0) {
      operator delete(__dst[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v90 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v90;
  }
}

void sub_216B27838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_216B279C4(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredArgStringE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    long long v4 = v3;
    sub_216779094(&v279, v3);
    free(v4);
  }
  else
  {
    sub_216779094(&v279, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredArgStringE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(__p) = 3;
  long long v281 = v279;
  long long v282 = v280;
  long long v279 = 0uLL;
  unint64_t v280 = 0;
  LOBYTE(v283) = 3;
  uint64_t v285 = 0;
  uint64_t v286 = 0;
  unint64_t v284 = 0;
  uint64_t v277 = 0;
  uint64_t v278 = 0;
  *((void *)&__p + 1) = 0;
  char v5 = sub_216B20DE4(a1, (const void **)&v281, &v281);
  char v7 = v6;
  __dst[0] = &v284;
  sub_216782F20((void ***)__dst);
  if (SHIBYTE(v282) < 0) {
    operator delete((void *)v281);
  }
  __dst[0] = (char *)&__p + 8;
  sub_216782F20((void ***)__dst);
  if (SHIBYTE(v280) < 0) {
    operator delete((void *)v279);
  }
  if (v7)
  {
    char v8 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112QuotedStringE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v8)
    {
      unint64_t v9 = v8;
      sub_216779094(&v279, v8);
      free(v9);
    }
    else
    {
      sub_216779094(&v279, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112QuotedStringE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(__p) = 3;
    long long v281 = v279;
    long long v282 = v280;
    long long v279 = 0uLL;
    unint64_t v280 = 0;
    LOBYTE(v283) = 3;
    uint64_t v285 = 0;
    uint64_t v286 = 0;
    unint64_t v284 = 0;
    uint64_t v277 = 0;
    uint64_t v278 = 0;
    *((void *)&__p + 1) = 0;
    unint64_t v10 = sub_216B20DE4(a1, (const void **)&v281, &v281);
    char v12 = v11;
    __dst[0] = &v284;
    sub_216782F20((void ***)__dst);
    if (SHIBYTE(v282) < 0) {
      operator delete((void *)v281);
    }
    __dst[0] = (char *)&__p + 8;
    sub_216782F20((void ***)__dst);
    if (SHIBYTE(v280) < 0) {
      operator delete((void *)v279);
    }
    if (v12)
    {
      char v13 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl7if_mustINS0_5ascii3oneIJLc34EEEEJNS0_5untilIS4_JN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v13)
      {
        unint64_t v14 = v13;
        sub_216779094(&v279, v13);
        free(v14);
      }
      else
      {
        sub_216779094(&v279, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl7if_mustINS0_5ascii3oneIJLc34EEEEJNS0_5untilIS4_JN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(__p) = 2;
      long long v281 = v279;
      long long v282 = v280;
      long long v279 = 0uLL;
      unint64_t v280 = 0;
      LOBYTE(v283) = 2;
      uint64_t v285 = 0;
      uint64_t v286 = 0;
      unint64_t v284 = 0;
      uint64_t v277 = 0;
      uint64_t v278 = 0;
      *((void *)&__p + 1) = 0;
      unint64_t v15 = sub_216B20DE4(a1, (const void **)&v281, &v281);
      char v17 = v16;
      __dst[0] = &v284;
      sub_216782F20((void ***)__dst);
      if (SHIBYTE(v282) < 0) {
        operator delete((void *)v281);
      }
      __dst[0] = (char *)&__p + 8;
      sub_216782F20((void ***)__dst);
      if (SHIBYTE(v280) < 0) {
        operator delete((void *)v279);
      }
      if (v17)
      {
        sub_216B2D014(a1, (uint64_t)v271);
        unint64_t v18 = v15[10];
        unint64_t v19 = v15 + 8;
        unint64_t v20 = v15[9];
        if (v20 >= v18)
        {
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v19) >> 3);
          unint64_t v24 = v23 + 1;
          if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v19) >> 3);
          if (2 * v25 > v24) {
            unint64_t v24 = 2 * v25;
          }
          if (v25 >= 0x555555555555555) {
            unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v26 = v24;
          }
          unint64_t v284 = v15 + 10;
          if (v26) {
            unint64_t v27 = (char *)sub_216782ED8((uint64_t)(v15 + 10), v26);
          }
          else {
            unint64_t v27 = 0;
          }
          long long v28 = &v27[24 * v23];
          *(void *)&long long v281 = v27;
          *((void *)&v281 + 1) = v28;
          uint64_t v283 = &v27[24 * v26];
          long long v29 = *(_OWORD *)v271;
          *((void *)v28 + 2) = v272;
          *(_OWORD *)long long v28 = v29;
          v271[1] = 0;
          uint64_t v272 = 0;
          v271[0] = 0;
          long long v282 = v28 + 24;
          sub_216790CCC(v15 + 8, &v281);
          uint64_t v22 = v15[9];
          sub_216790E64((uint64_t)&v281);
        }
        else
        {
          long long v21 = *(_OWORD *)v271;
          *(void *)(v20 + 16) = v272;
          *(_OWORD *)unint64_t v20 = v21;
          v271[1] = 0;
          uint64_t v272 = 0;
          v271[0] = 0;
          uint64_t v22 = v20 + 24;
          v15[9] = v20 + 24;
        }
        v15[9] = v22;
        unint64_t v30 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_5untilINS0_5ascii3oneIJLc34EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v30)
        {
          sub_216779094(&v279, v30);
          free(v30);
        }
        else
        {
          sub_216779094(&v279, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_5untilINS0_5ascii3oneIJLc34EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(__p) = 2;
        long long v281 = v279;
        long long v282 = v280;
        long long v279 = 0uLL;
        unint64_t v280 = 0;
        LOBYTE(v283) = 2;
        uint64_t v285 = 0;
        uint64_t v286 = 0;
        unint64_t v284 = 0;
        uint64_t v277 = 0;
        uint64_t v278 = 0;
        *((void *)&__p + 1) = 0;
        unint64_t v31 = sub_216B20DE4(a1, (const void **)&v281, &v281);
        char v33 = v32;
        __dst[0] = &v284;
        sub_216782F20((void ***)__dst);
        if (SHIBYTE(v282) < 0) {
          operator delete((void *)v281);
        }
        __dst[0] = (char *)&__p + 8;
        sub_216782F20((void ***)__dst);
        unint64_t v34 = v15 + 8;
        if (SHIBYTE(v280) < 0) {
          operator delete((void *)v279);
        }
        if (v33)
        {
          long long v35 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_6not_atIJNS0_5ascii3oneIJLc34EEEEEEEJNS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v35)
          {
            sub_216779094(&v279, v35);
            free(v35);
          }
          else
          {
            sub_216779094(&v279, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_6not_atIJNS0_5ascii3oneIJLc34EEEEEEEJNS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(__p) = 1;
          long long v281 = v279;
          long long v282 = v280;
          long long v279 = 0uLL;
          unint64_t v280 = 0;
          LOBYTE(v283) = 1;
          uint64_t v285 = 0;
          uint64_t v286 = 0;
          unint64_t v284 = 0;
          uint64_t v277 = 0;
          uint64_t v278 = 0;
          *((void *)&__p + 1) = 0;
          uint64_t v36 = sub_216B20DE4(a1, (const void **)&v281, &v281);
          char v38 = v37;
          v265[0] = &v284;
          sub_216782F20((void ***)v265);
          if (SHIBYTE(v282) < 0) {
            operator delete((void *)v281);
          }
          v265[0] = (char *)&__p + 8;
          sub_216782F20((void ***)v265);
          if (SHIBYTE(v280) < 0) {
            operator delete((void *)v279);
          }
          if (v38)
          {
            sub_216B2D180(a1, (uint64_t)&__p);
            unint64_t v39 = v36 + 8;
            unint64_t v40 = v36[10];
            unint64_t v41 = v36[9];
            if (v41 >= v40)
            {
              unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *v39) >> 3);
              unint64_t v45 = v44 + 1;
              if (v44 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v39) >> 3);
              if (2 * v46 > v45) {
                unint64_t v45 = 2 * v46;
              }
              if (v46 >= 0x555555555555555) {
                unint64_t v47 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v47 = v45;
              }
              unint64_t v284 = v36 + 10;
              if (v47) {
                int v48 = (char *)sub_216782ED8((uint64_t)(v36 + 10), v47);
              }
              else {
                int v48 = 0;
              }
              long long v49 = &v48[24 * v44];
              *(void *)&long long v281 = v48;
              *((void *)&v281 + 1) = v49;
              uint64_t v283 = &v48[24 * v47];
              long long v50 = __p;
              *((void *)v49 + 2) = v277;
              *(_OWORD *)long long v49 = v50;
              uint64_t v277 = 0;
              long long __p = 0uLL;
              long long v282 = v49 + 24;
              sub_216790CCC(v36 + 8, &v281);
              uint64_t v43 = v36[9];
              sub_216790E64((uint64_t)&v281);
            }
            else
            {
              long long v42 = __p;
              *(void *)(v41 + 16) = v277;
              *(_OWORD *)unint64_t v41 = v42;
              uint64_t v277 = 0;
              long long __p = 0uLL;
              uint64_t v43 = v41 + 24;
              v36[9] = v41 + 24;
            }
            v36[9] = v43;
            sub_216B2E70C(a1, (uint64_t)&v279);
            unint64_t v52 = v36[9];
            unint64_t v51 = v36[10];
            if (v52 >= v51)
            {
              unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *v39) >> 3);
              unint64_t v55 = v54 + 1;
              if (v54 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *v39) >> 3);
              if (2 * v56 > v55) {
                unint64_t v55 = 2 * v56;
              }
              if (v56 >= 0x555555555555555) {
                unint64_t v57 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v57 = v55;
              }
              unint64_t v284 = v36 + 10;
              if (v57) {
                uint64_t v58 = (char *)sub_216782ED8((uint64_t)(v36 + 10), v57);
              }
              else {
                uint64_t v58 = 0;
              }
              unint64_t v59 = &v58[24 * v54];
              *(void *)&long long v281 = v58;
              *((void *)&v281 + 1) = v59;
              uint64_t v283 = &v58[24 * v57];
              long long v60 = v279;
              *((void *)v59 + 2) = v280;
              *(_OWORD *)unint64_t v59 = v60;
              unint64_t v280 = 0;
              long long v279 = 0uLL;
              long long v282 = v59 + 24;
              sub_216790CCC(v36 + 8, &v281);
              uint64_t v61 = v36[9];
              sub_216790E64((uint64_t)&v281);
              int v62 = SHIBYTE(v280);
              v36[9] = v61;
              if (v62 < 0) {
                operator delete((void *)v279);
              }
            }
            else
            {
              long long v53 = v279;
              *(void *)(v52 + 16) = v280;
              *(_OWORD *)unint64_t v52 = v53;
              v36[9] = v52 + 24;
            }
            if (SHIBYTE(v277) < 0) {
              operator delete((void *)__p);
            }
          }
          if (*((char *)v36 + 55) < 0)
          {
            sub_216778F24(__dst, (void *)v36[4], v36[5]);
          }
          else
          {
            *(_OWORD *)std::string __dst = *((_OWORD *)v36 + 2);
            uint64_t v274 = v36[6];
          }
          long long v63 = v31 + 8;
          unint64_t v64 = v31[10];
          unint64_t v65 = v31[9];
          if (v65 >= v64)
          {
            unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - *v63) >> 3);
            unint64_t v69 = v68 + 1;
            if (v68 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - *v63) >> 3);
            if (2 * v70 > v69) {
              unint64_t v69 = 2 * v70;
            }
            if (v70 >= 0x555555555555555) {
              unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v71 = v69;
            }
            unint64_t v284 = v31 + 10;
            if (v71) {
              unint64_t v72 = (char *)sub_216782ED8((uint64_t)(v31 + 10), v71);
            }
            else {
              unint64_t v72 = 0;
            }
            unint64_t v73 = &v72[24 * v68];
            *(void *)&long long v281 = v72;
            *((void *)&v281 + 1) = v73;
            uint64_t v283 = &v72[24 * v71];
            long long v74 = *(_OWORD *)__dst;
            *((void *)v73 + 2) = v274;
            *(_OWORD *)unint64_t v73 = v74;
            __dst[1] = 0;
            uint64_t v274 = 0;
            __dst[0] = 0;
            long long v282 = v73 + 24;
            sub_216790CCC(v31 + 8, &v281);
            uint64_t v67 = v31[9];
            sub_216790E64((uint64_t)&v281);
          }
          else
          {
            long long v66 = *(_OWORD *)__dst;
            *(void *)(v65 + 16) = v274;
            *(_OWORD *)unint64_t v65 = v66;
            __dst[1] = 0;
            uint64_t v274 = 0;
            __dst[0] = 0;
            uint64_t v67 = v65 + 24;
            v31[9] = v65 + 24;
          }
          v31[9] = v67;
          sub_216B2D014(a1, (uint64_t)&__p);
          unint64_t v76 = v31[9];
          unint64_t v75 = v31[10];
          if (v76 >= v75)
          {
            unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - *v63) >> 3);
            unint64_t v79 = v78 + 1;
            if (v78 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - *v63) >> 3);
            if (2 * v80 > v79) {
              unint64_t v79 = 2 * v80;
            }
            if (v80 >= 0x555555555555555) {
              unint64_t v81 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v81 = v79;
            }
            unint64_t v284 = v31 + 10;
            if (v81) {
              unint64_t v82 = (char *)sub_216782ED8((uint64_t)(v31 + 10), v81);
            }
            else {
              unint64_t v82 = 0;
            }
            unint64_t v83 = &v82[24 * v78];
            *(void *)&long long v281 = v82;
            *((void *)&v281 + 1) = v83;
            uint64_t v283 = &v82[24 * v81];
            long long v84 = __p;
            *((void *)v83 + 2) = v277;
            *(_OWORD *)unint64_t v83 = v84;
            uint64_t v277 = 0;
            long long __p = 0uLL;
            long long v282 = v83 + 24;
            sub_216790CCC(v31 + 8, &v281);
            uint64_t v85 = v31[9];
            sub_216790E64((uint64_t)&v281);
            int v86 = SHIBYTE(v277);
            v31[9] = v85;
            unint64_t v34 = v15 + 8;
            if (v86 < 0) {
              operator delete((void *)__p);
            }
          }
          else
          {
            long long v77 = __p;
            *(void *)(v76 + 16) = v277;
            *(_OWORD *)unint64_t v76 = v77;
            v31[9] = v76 + 24;
            unint64_t v34 = v15 + 8;
          }
          if (SHIBYTE(v274) < 0) {
            operator delete(__dst[0]);
          }
        }
        if (*((char *)v31 + 55) < 0)
        {
          sub_216778F24(v269, (void *)v31[4], v31[5]);
        }
        else
        {
          *(_OWORD *)uint64_t v269 = *((_OWORD *)v31 + 2);
          uint64_t v270 = v31[6];
        }
        unint64_t v88 = v15[9];
        unint64_t v87 = v15[10];
        if (v88 >= v87)
        {
          unint64_t v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - *v34) >> 3);
          unint64_t v91 = v90 + 1;
          if (v90 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - *v34) >> 3);
          if (2 * v92 > v91) {
            unint64_t v91 = 2 * v92;
          }
          if (v92 >= 0x555555555555555) {
            unint64_t v93 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v93 = v91;
          }
          unint64_t v284 = v15 + 10;
          if (v93) {
            uint64_t v94 = (char *)sub_216782ED8((uint64_t)(v15 + 10), v93);
          }
          else {
            uint64_t v94 = 0;
          }
          unint64_t v95 = &v94[24 * v90];
          *(void *)&long long v281 = v94;
          *((void *)&v281 + 1) = v95;
          uint64_t v283 = &v94[24 * v93];
          long long v96 = *(_OWORD *)v269;
          *((void *)v95 + 2) = v270;
          *(_OWORD *)unint64_t v95 = v96;
          v269[1] = 0;
          uint64_t v270 = 0;
          v269[0] = 0;
          long long v282 = v95 + 24;
          sub_216790CCC(v34, &v281);
          uint64_t v97 = v15[9];
          sub_216790E64((uint64_t)&v281);
          int v98 = SHIBYTE(v270);
          v15[9] = v97;
          if (v98 < 0) {
            operator delete(v269[0]);
          }
        }
        else
        {
          long long v89 = *(_OWORD *)v269;
          *(void *)(v88 + 16) = v270;
          *(_OWORD *)unint64_t v88 = v89;
          v15[9] = v88 + 24;
        }
        if (SHIBYTE(v272) < 0) {
          operator delete(v271[0]);
        }
      }
      if (*((char *)v15 + 55) < 0)
      {
        sub_216778F24(v267, (void *)v15[4], v15[5]);
      }
      else
      {
        *(_OWORD *)char v267 = *((_OWORD *)v15 + 2);
        uint64_t v268 = v15[6];
      }
      unint64_t v99 = v10[10];
      unint64_t v100 = v10[9];
      uint64_t v261 = v10 + 8;
      if (v100 >= v99)
      {
        uint64_t v103 = v10[8];
        unint64_t v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - v103) >> 3);
        unint64_t v105 = v104 + 1;
        if (v104 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - v103) >> 3);
        if (2 * v106 > v105) {
          unint64_t v105 = 2 * v106;
        }
        if (v106 >= 0x555555555555555) {
          unint64_t v107 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v107 = v105;
        }
        unint64_t v284 = v10 + 10;
        if (v107) {
          unint64_t v108 = (char *)sub_216782ED8((uint64_t)(v10 + 10), v107);
        }
        else {
          unint64_t v108 = 0;
        }
        unint64_t v109 = &v108[24 * v104];
        *(void *)&long long v281 = v108;
        *((void *)&v281 + 1) = v109;
        uint64_t v283 = &v108[24 * v107];
        long long v110 = *(_OWORD *)v267;
        *((void *)v109 + 2) = v268;
        *(_OWORD *)unint64_t v109 = v110;
        v267[1] = 0;
        uint64_t v268 = 0;
        v267[0] = 0;
        long long v282 = v109 + 24;
        sub_216790CCC(v261, &v281);
        uint64_t v102 = v10[9];
        sub_216790E64((uint64_t)&v281);
      }
      else
      {
        long long v101 = *(_OWORD *)v267;
        *(void *)(v100 + 16) = v268;
        *(_OWORD *)unint64_t v100 = v101;
        v267[1] = 0;
        uint64_t v268 = 0;
        v267[0] = 0;
        uint64_t v102 = v100 + 24;
        v10[9] = v100 + 24;
      }
      v10[9] = v102;
      unint64_t v111 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl7if_mustINS0_5ascii3oneIJLc39EEEEJNS0_5untilIS4_JN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v111)
      {
        sub_216779094(&v279, v111);
        free(v111);
      }
      else
      {
        sub_216779094(&v279, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl7if_mustINS0_5ascii3oneIJLc39EEEEJNS0_5untilIS4_JN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(__p) = 2;
      long long v281 = v279;
      long long v282 = v280;
      long long v279 = 0uLL;
      unint64_t v280 = 0;
      LOBYTE(v283) = 2;
      uint64_t v285 = 0;
      uint64_t v286 = 0;
      unint64_t v284 = 0;
      uint64_t v277 = 0;
      uint64_t v278 = 0;
      *((void *)&__p + 1) = 0;
      long long v112 = sub_216B20DE4(a1, (const void **)&v281, &v281);
      char v114 = v113;
      __dst[0] = &v284;
      sub_216782F20((void ***)__dst);
      if (SHIBYTE(v282) < 0) {
        operator delete((void *)v281);
      }
      __dst[0] = (char *)&__p + 8;
      sub_216782F20((void ***)__dst);
      if (SHIBYTE(v280) < 0) {
        operator delete((void *)v279);
      }
      if (v114)
      {
        sub_216B2FB08(a1, (uint64_t)v271);
        int v115 = v112 + 8;
        unint64_t v116 = v112[10];
        unint64_t v117 = v112[9];
        if (v117 >= v116)
        {
          unint64_t v120 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117 - *v115) >> 3);
          unint64_t v121 = v120 + 1;
          if (v120 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - *v115) >> 3);
          if (2 * v122 > v121) {
            unint64_t v121 = 2 * v122;
          }
          if (v122 >= 0x555555555555555) {
            unint64_t v123 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v123 = v121;
          }
          unint64_t v284 = v112 + 10;
          if (v123) {
            unint64_t v124 = (char *)sub_216782ED8((uint64_t)(v112 + 10), v123);
          }
          else {
            unint64_t v124 = 0;
          }
          long long v125 = &v124[24 * v120];
          *(void *)&long long v281 = v124;
          *((void *)&v281 + 1) = v125;
          uint64_t v283 = &v124[24 * v123];
          long long v126 = *(_OWORD *)v271;
          *((void *)v125 + 2) = v272;
          *(_OWORD *)long long v125 = v126;
          v271[1] = 0;
          uint64_t v272 = 0;
          v271[0] = 0;
          long long v282 = v125 + 24;
          sub_216790CCC(v112 + 8, &v281);
          uint64_t v119 = v112[9];
          sub_216790E64((uint64_t)&v281);
        }
        else
        {
          long long v118 = *(_OWORD *)v271;
          *(void *)(v117 + 16) = v272;
          *(_OWORD *)unint64_t v117 = v118;
          v271[1] = 0;
          uint64_t v272 = 0;
          v271[0] = 0;
          uint64_t v119 = v117 + 24;
          v112[9] = v117 + 24;
        }
        v112[9] = v119;
        int v127 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_5untilINS0_5ascii3oneIJLc39EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v127)
        {
          sub_216779094(&v279, v127);
          free(v127);
        }
        else
        {
          sub_216779094(&v279, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJNS0_5untilINS0_5ascii3oneIJLc39EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(__p) = 2;
        long long v281 = v279;
        long long v282 = v280;
        long long v279 = 0uLL;
        unint64_t v280 = 0;
        LOBYTE(v283) = 2;
        uint64_t v285 = 0;
        uint64_t v286 = 0;
        unint64_t v284 = 0;
        uint64_t v277 = 0;
        uint64_t v278 = 0;
        *((void *)&__p + 1) = 0;
        uint64_t v260 = sub_216B20DE4(a1, (const void **)&v281, &v281);
        char v129 = v128;
        __dst[0] = &v284;
        sub_216782F20((void ***)__dst);
        if (SHIBYTE(v282) < 0) {
          operator delete((void *)v281);
        }
        __dst[0] = (char *)&__p + 8;
        sub_216782F20((void ***)__dst);
        if (SHIBYTE(v280) < 0) {
          operator delete((void *)v279);
        }
        if (v129)
        {
          unint64_t v130 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_6not_atIJNS0_5ascii3oneIJLc39EEEEEEEJNS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
          if (v130)
          {
            sub_216779094(&v279, v130);
            free(v130);
          }
          else
          {
            sub_216779094(&v279, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_6not_atIJNS0_5ascii3oneIJLc39EEEEEEEJNS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
          }
          LOBYTE(__p) = 1;
          long long v281 = v279;
          long long v282 = v280;
          long long v279 = 0uLL;
          unint64_t v280 = 0;
          LOBYTE(v283) = 1;
          uint64_t v285 = 0;
          uint64_t v286 = 0;
          unint64_t v284 = 0;
          uint64_t v277 = 0;
          uint64_t v278 = 0;
          *((void *)&__p + 1) = 0;
          long long v131 = sub_216B20DE4(a1, (const void **)&v281, &v281);
          char v133 = v132;
          unint64_t v275 = (void **)&v284;
          sub_216782F20(&v275);
          if (SHIBYTE(v282) < 0) {
            operator delete((void *)v281);
          }
          unint64_t v275 = (void **)&__p + 1;
          sub_216782F20(&v275);
          if (SHIBYTE(v280) < 0) {
            operator delete((void *)v279);
          }
          if (v133)
          {
            sub_216B2FC74(a1, (uint64_t)&__p);
            unint64_t v134 = v131 + 8;
            unint64_t v135 = v131[10];
            unint64_t v136 = v131[9];
            if (v136 >= v135)
            {
              unint64_t v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136 - *v134) >> 3);
              unint64_t v140 = v139 + 1;
              if (v139 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - *v134) >> 3);
              if (2 * v141 > v140) {
                unint64_t v140 = 2 * v141;
              }
              if (v141 >= 0x555555555555555) {
                unint64_t v142 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v142 = v140;
              }
              unint64_t v284 = v131 + 10;
              if (v142) {
                char v143 = (char *)sub_216782ED8((uint64_t)(v131 + 10), v142);
              }
              else {
                char v143 = 0;
              }
              char v144 = &v143[24 * v139];
              *(void *)&long long v281 = v143;
              *((void *)&v281 + 1) = v144;
              uint64_t v283 = &v143[24 * v142];
              long long v145 = __p;
              *((void *)v144 + 2) = v277;
              *(_OWORD *)char v144 = v145;
              uint64_t v277 = 0;
              long long __p = 0uLL;
              long long v282 = v144 + 24;
              sub_216790CCC(v131 + 8, &v281);
              uint64_t v138 = v131[9];
              sub_216790E64((uint64_t)&v281);
            }
            else
            {
              long long v137 = __p;
              *(void *)(v136 + 16) = v277;
              *(_OWORD *)unint64_t v136 = v137;
              uint64_t v277 = 0;
              long long __p = 0uLL;
              uint64_t v138 = v136 + 24;
              v131[9] = v136 + 24;
            }
            v131[9] = v138;
            sub_216B31200(a1, (uint64_t)&v279);
            unint64_t v147 = v131[9];
            unint64_t v146 = v131[10];
            if (v147 >= v146)
            {
              unint64_t v149 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - *v134) >> 3);
              unint64_t v150 = v149 + 1;
              if (v149 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_21677CB10();
              }
              unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - *v134) >> 3);
              if (2 * v151 > v150) {
                unint64_t v150 = 2 * v151;
              }
              if (v151 >= 0x555555555555555) {
                unint64_t v152 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v152 = v150;
              }
              unint64_t v284 = v131 + 10;
              if (v152) {
                unint64_t v153 = (char *)sub_216782ED8((uint64_t)(v131 + 10), v152);
              }
              else {
                unint64_t v153 = 0;
              }
              unint64_t v154 = &v153[24 * v149];
              *(void *)&long long v281 = v153;
              *((void *)&v281 + 1) = v154;
              uint64_t v283 = &v153[24 * v152];
              long long v155 = v279;
              *((void *)v154 + 2) = v280;
              *(_OWORD *)unint64_t v154 = v155;
              unint64_t v280 = 0;
              long long v279 = 0uLL;
              long long v282 = v154 + 24;
              sub_216790CCC(v131 + 8, &v281);
              uint64_t v156 = v131[9];
              sub_216790E64((uint64_t)&v281);
              int v157 = SHIBYTE(v280);
              v131[9] = v156;
              if (v157 < 0) {
                operator delete((void *)v279);
              }
            }
            else
            {
              long long v148 = v279;
              *(void *)(v147 + 16) = v280;
              *(_OWORD *)unint64_t v147 = v148;
              v131[9] = v147 + 24;
            }
            if (SHIBYTE(v277) < 0) {
              operator delete((void *)__p);
            }
          }
          if (*((char *)v131 + 55) < 0)
          {
            sub_216778F24(__dst, (void *)v131[4], v131[5]);
          }
          else
          {
            *(_OWORD *)std::string __dst = *((_OWORD *)v131 + 2);
            uint64_t v274 = v131[6];
          }
          unint64_t v158 = v260;
          long long v159 = v260 + 8;
          unint64_t v160 = v260[10];
          unint64_t v161 = v260[9];
          if (v161 >= v160)
          {
            unint64_t v164 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v161 - *v159) >> 3);
            unint64_t v165 = v164 + 1;
            if (v164 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v166 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - *v159) >> 3);
            if (2 * v166 > v165) {
              unint64_t v165 = 2 * v166;
            }
            if (v166 >= 0x555555555555555) {
              unint64_t v167 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v167 = v165;
            }
            unint64_t v284 = v260 + 10;
            if (v167) {
              unint64_t v168 = (char *)sub_216782ED8((uint64_t)(v260 + 10), v167);
            }
            else {
              unint64_t v168 = 0;
            }
            unint64_t v169 = &v168[24 * v164];
            *(void *)&long long v281 = v168;
            *((void *)&v281 + 1) = v169;
            uint64_t v283 = &v168[24 * v167];
            long long v170 = *(_OWORD *)__dst;
            *((void *)v169 + 2) = v274;
            *(_OWORD *)unint64_t v169 = v170;
            __dst[1] = 0;
            uint64_t v274 = 0;
            __dst[0] = 0;
            long long v282 = v169 + 24;
            sub_216790CCC(v159, &v281);
            unint64_t v158 = v260;
            uint64_t v163 = v260[9];
            sub_216790E64((uint64_t)&v281);
          }
          else
          {
            long long v162 = *(_OWORD *)__dst;
            *(void *)(v161 + 16) = v274;
            *(_OWORD *)unint64_t v161 = v162;
            __dst[1] = 0;
            uint64_t v274 = 0;
            __dst[0] = 0;
            uint64_t v163 = v161 + 24;
            v260[9] = v161 + 24;
          }
          v158[9] = v163;
          sub_216B2FB08(a1, (uint64_t)&__p);
          unint64_t v172 = v158[9];
          unint64_t v171 = v158[10];
          if (v172 >= v171)
          {
            unint64_t v174 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v172 - *v159) >> 3);
            unint64_t v175 = v174 + 1;
            if (v174 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v176 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171 - *v159) >> 3);
            if (2 * v176 > v175) {
              unint64_t v175 = 2 * v176;
            }
            if (v176 >= 0x555555555555555) {
              unint64_t v177 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v177 = v175;
            }
            unint64_t v284 = v260 + 10;
            if (v177) {
              unint64_t v178 = (char *)sub_216782ED8((uint64_t)(v260 + 10), v177);
            }
            else {
              unint64_t v178 = 0;
            }
            unint64_t v179 = &v178[24 * v174];
            *(void *)&long long v281 = v178;
            *((void *)&v281 + 1) = v179;
            uint64_t v283 = &v178[24 * v177];
            long long v180 = __p;
            *((void *)v179 + 2) = v277;
            *(_OWORD *)unint64_t v179 = v180;
            uint64_t v277 = 0;
            long long __p = 0uLL;
            long long v282 = v179 + 24;
            sub_216790CCC(v159, &v281);
            uint64_t v181 = v260[9];
            sub_216790E64((uint64_t)&v281);
            int v182 = SHIBYTE(v277);
            v260[9] = v181;
            if (v182 < 0) {
              operator delete((void *)__p);
            }
          }
          else
          {
            long long v173 = __p;
            *(void *)(v172 + 16) = v277;
            *(_OWORD *)unint64_t v172 = v173;
            v158[9] = v172 + 24;
          }
          if (SHIBYTE(v274) < 0) {
            operator delete(__dst[0]);
          }
        }
        if (*((char *)v260 + 55) < 0)
        {
          sub_216778F24(v269, (void *)v260[4], v260[5]);
        }
        else
        {
          *(_OWORD *)uint64_t v269 = *((_OWORD *)v260 + 2);
          uint64_t v270 = v260[6];
        }
        unint64_t v184 = v112[9];
        unint64_t v183 = v112[10];
        if (v184 >= v183)
        {
          unint64_t v186 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v184 - *v115) >> 3);
          unint64_t v187 = v186 + 1;
          if (v186 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v188 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v183 - *v115) >> 3);
          if (2 * v188 > v187) {
            unint64_t v187 = 2 * v188;
          }
          if (v188 >= 0x555555555555555) {
            unint64_t v189 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v189 = v187;
          }
          unint64_t v284 = v112 + 10;
          if (v189) {
            unint64_t v190 = (char *)sub_216782ED8((uint64_t)(v112 + 10), v189);
          }
          else {
            unint64_t v190 = 0;
          }
          unint64_t v191 = &v190[24 * v186];
          *(void *)&long long v281 = v190;
          *((void *)&v281 + 1) = v191;
          uint64_t v283 = &v190[24 * v189];
          long long v192 = *(_OWORD *)v269;
          *((void *)v191 + 2) = v270;
          *(_OWORD *)unint64_t v191 = v192;
          v269[1] = 0;
          uint64_t v270 = 0;
          v269[0] = 0;
          long long v282 = v191 + 24;
          sub_216790CCC(v112 + 8, &v281);
          uint64_t v193 = v112[9];
          sub_216790E64((uint64_t)&v281);
          int v194 = SHIBYTE(v270);
          v112[9] = v193;
          if (v194 < 0) {
            operator delete(v269[0]);
          }
        }
        else
        {
          long long v185 = *(_OWORD *)v269;
          *(void *)(v184 + 16) = v270;
          *(_OWORD *)unint64_t v184 = v185;
          v112[9] = v184 + 24;
        }
        if (SHIBYTE(v272) < 0) {
          operator delete(v271[0]);
        }
      }
      if (*((char *)v112 + 55) < 0)
      {
        sub_216778F24(v265, (void *)v112[4], v112[5]);
      }
      else
      {
        *(_OWORD *)v265 = *((_OWORD *)v112 + 2);
        uint64_t v266 = v112[6];
      }
      unint64_t v196 = v10[9];
      unint64_t v195 = v10[10];
      if (v196 >= v195)
      {
        unint64_t v198 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v196 - *v261) >> 3);
        unint64_t v199 = v198 + 1;
        if (v198 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v200 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v195 - *v261) >> 3);
        if (2 * v200 > v199) {
          unint64_t v199 = 2 * v200;
        }
        if (v200 >= 0x555555555555555) {
          unint64_t v201 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v201 = v199;
        }
        unint64_t v284 = v10 + 10;
        if (v201) {
          unint64_t v202 = (char *)sub_216782ED8((uint64_t)(v10 + 10), v201);
        }
        else {
          unint64_t v202 = 0;
        }
        unint64_t v203 = &v202[24 * v198];
        *(void *)&long long v281 = v202;
        *((void *)&v281 + 1) = v203;
        uint64_t v283 = &v202[24 * v201];
        long long v204 = *(_OWORD *)v265;
        *((void *)v203 + 2) = v266;
        *(_OWORD *)unint64_t v203 = v204;
        v265[1] = 0;
        uint64_t v266 = 0;
        v265[0] = 0;
        long long v282 = v203 + 24;
        sub_216790CCC(v261, &v281);
        uint64_t v205 = v10[9];
        sub_216790E64((uint64_t)&v281);
        int v206 = SHIBYTE(v266);
        v10[9] = v205;
        if (v206 < 0) {
          operator delete(v265[0]);
        }
      }
      else
      {
        long long v197 = *(_OWORD *)v265;
        *(void *)(v196 + 16) = v266;
        *(_OWORD *)unint64_t v196 = v197;
        v10[9] = v196 + 24;
      }
      if (SHIBYTE(v268) < 0) {
        operator delete(v267[0]);
      }
    }
    if (*((char *)v10 + 55) < 0)
    {
      sub_216778F24(v263, (void *)v10[4], v10[5]);
    }
    else
    {
      *(_OWORD *)long long v263 = *((_OWORD *)v10 + 2);
      uint64_t v264 = v10[6];
    }
    long long v207 = v5 + 8;
    unint64_t v208 = v5[10];
    unint64_t v209 = v5[9];
    if (v209 >= v208)
    {
      unint64_t v212 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v209 - *v207) >> 3);
      unint64_t v213 = v212 + 1;
      if (v212 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v214 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v208 - *v207) >> 3);
      if (2 * v214 > v213) {
        unint64_t v213 = 2 * v214;
      }
      if (v214 >= 0x555555555555555) {
        unint64_t v215 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v215 = v213;
      }
      unint64_t v284 = v5 + 10;
      if (v215) {
        unint64_t v216 = (char *)sub_216782ED8((uint64_t)(v5 + 10), v215);
      }
      else {
        unint64_t v216 = 0;
      }
      long long v217 = &v216[24 * v212];
      *(void *)&long long v281 = v216;
      *((void *)&v281 + 1) = v217;
      uint64_t v283 = &v216[24 * v215];
      long long v218 = *(_OWORD *)v263;
      *((void *)v217 + 2) = v264;
      *(_OWORD *)long long v217 = v218;
      v263[1] = 0;
      uint64_t v264 = 0;
      v263[0] = 0;
      long long v282 = v217 + 24;
      sub_216790CCC(v5 + 8, &v281);
      uint64_t v211 = v5[9];
      sub_216790E64((uint64_t)&v281);
    }
    else
    {
      long long v210 = *(_OWORD *)v263;
      *(void *)(v209 + 16) = v264;
      *(_OWORD *)unint64_t v209 = v210;
      v263[1] = 0;
      uint64_t v264 = 0;
      v263[0] = 0;
      uint64_t v211 = v209 + 24;
      v5[9] = v209 + 24;
    }
    v5[9] = v211;
    long long v219 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114UnquotedStringE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v219)
    {
      sub_216779094(&v279, v219);
      free(v219);
    }
    else
    {
      sub_216779094(&v279, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114UnquotedStringE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(__p) = 1;
    long long v281 = v279;
    long long v282 = v280;
    long long v279 = 0uLL;
    unint64_t v280 = 0;
    LOBYTE(v283) = 1;
    uint64_t v285 = 0;
    uint64_t v286 = 0;
    unint64_t v284 = 0;
    uint64_t v277 = 0;
    uint64_t v278 = 0;
    *((void *)&__p + 1) = 0;
    uint64_t v220 = sub_216B20DE4(a1, (const void **)&v281, &v281);
    char v222 = v221;
    v271[0] = &v284;
    sub_216782F20((void ***)v271);
    if (SHIBYTE(v282) < 0) {
      operator delete((void *)v281);
    }
    v271[0] = (char *)&__p + 8;
    sub_216782F20((void ***)v271);
    if (SHIBYTE(v280) < 0) {
      operator delete((void *)v279);
    }
    if (v222)
    {
      sub_216B31978(a1, (uint64_t)&__p);
      unint64_t v223 = v220 + 8;
      unint64_t v224 = v220[10];
      unint64_t v225 = v220[9];
      if (v225 >= v224)
      {
        unint64_t v228 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v225 - *v223) >> 3);
        unint64_t v229 = v228 + 1;
        if (v228 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v230 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v224 - *v223) >> 3);
        if (2 * v230 > v229) {
          unint64_t v229 = 2 * v230;
        }
        if (v230 >= 0x555555555555555) {
          unint64_t v231 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v231 = v229;
        }
        unint64_t v284 = v220 + 10;
        if (v231) {
          uint64_t v232 = (char *)sub_216782ED8((uint64_t)(v220 + 10), v231);
        }
        else {
          uint64_t v232 = 0;
        }
        int v233 = &v232[24 * v228];
        *(void *)&long long v281 = v232;
        *((void *)&v281 + 1) = v233;
        uint64_t v283 = &v232[24 * v231];
        long long v234 = __p;
        *((void *)v233 + 2) = v277;
        *(_OWORD *)int v233 = v234;
        uint64_t v277 = 0;
        long long __p = 0uLL;
        long long v282 = v233 + 24;
        sub_216790CCC(v220 + 8, &v281);
        uint64_t v227 = v220[9];
        sub_216790E64((uint64_t)&v281);
      }
      else
      {
        long long v226 = __p;
        *(void *)(v225 + 16) = v277;
        *(_OWORD *)unint64_t v225 = v226;
        uint64_t v277 = 0;
        long long __p = 0uLL;
        uint64_t v227 = v225 + 24;
        v220[9] = v225 + 24;
      }
      v220[9] = v227;
      sub_216B31D84(a1, (uint64_t)&v279);
      unint64_t v236 = v220[9];
      unint64_t v235 = v220[10];
      if (v236 >= v235)
      {
        unint64_t v238 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v236 - *v223) >> 3);
        unint64_t v239 = v238 + 1;
        if (v238 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v240 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v235 - *v223) >> 3);
        if (2 * v240 > v239) {
          unint64_t v239 = 2 * v240;
        }
        if (v240 >= 0x555555555555555) {
          unint64_t v241 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v241 = v239;
        }
        unint64_t v284 = v220 + 10;
        if (v241) {
          uint64_t v242 = (char *)sub_216782ED8((uint64_t)(v220 + 10), v241);
        }
        else {
          uint64_t v242 = 0;
        }
        unint64_t v243 = &v242[24 * v238];
        *(void *)&long long v281 = v242;
        *((void *)&v281 + 1) = v243;
        uint64_t v283 = &v242[24 * v241];
        long long v244 = v279;
        *((void *)v243 + 2) = v280;
        *(_OWORD *)unint64_t v243 = v244;
        unint64_t v280 = 0;
        long long v279 = 0uLL;
        long long v282 = v243 + 24;
        sub_216790CCC(v220 + 8, &v281);
        uint64_t v245 = v220[9];
        sub_216790E64((uint64_t)&v281);
        int v246 = SHIBYTE(v280);
        v220[9] = v245;
        if (v246 < 0) {
          operator delete((void *)v279);
        }
      }
      else
      {
        long long v237 = v279;
        *(void *)(v236 + 16) = v280;
        *(_OWORD *)unint64_t v236 = v237;
        v220[9] = v236 + 24;
      }
      if (SHIBYTE(v277) < 0) {
        operator delete((void *)__p);
      }
    }
    if (*((char *)v220 + 55) < 0)
    {
      sub_216778F24(__dst, (void *)v220[4], v220[5]);
    }
    else
    {
      *(_OWORD *)std::string __dst = *((_OWORD *)v220 + 2);
      uint64_t v274 = v220[6];
    }
    unint64_t v248 = v5[9];
    unint64_t v247 = v5[10];
    if (v248 >= v247)
    {
      unint64_t v250 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v248 - *v207) >> 3);
      unint64_t v251 = v250 + 1;
      if (v250 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v252 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v247 - *v207) >> 3);
      if (2 * v252 > v251) {
        unint64_t v251 = 2 * v252;
      }
      if (v252 >= 0x555555555555555) {
        unint64_t v253 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v253 = v251;
      }
      unint64_t v284 = v5 + 10;
      if (v253) {
        uint64_t v254 = (char *)sub_216782ED8((uint64_t)(v5 + 10), v253);
      }
      else {
        uint64_t v254 = 0;
      }
      uint64_t v255 = &v254[24 * v250];
      *(void *)&long long v281 = v254;
      *((void *)&v281 + 1) = v255;
      uint64_t v283 = &v254[24 * v253];
      long long v256 = *(_OWORD *)__dst;
      *((void *)v255 + 2) = v274;
      *(_OWORD *)uint64_t v255 = v256;
      __dst[1] = 0;
      uint64_t v274 = 0;
      __dst[0] = 0;
      long long v282 = v255 + 24;
      sub_216790CCC(v5 + 8, &v281);
      uint64_t v257 = v5[9];
      sub_216790E64((uint64_t)&v281);
      int v258 = SHIBYTE(v274);
      v5[9] = v257;
      if (v258 < 0) {
        operator delete(__dst[0]);
      }
    }
    else
    {
      long long v249 = *(_OWORD *)__dst;
      *(void *)(v248 + 16) = v274;
      *(_OWORD *)unint64_t v248 = v249;
      v5[9] = v248 + 24;
    }
    if (SHIBYTE(v264) < 0) {
      operator delete(v263[0]);
    }
  }
  if (*((char *)v5 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v5[4], v5[5]);
  }
  else
  {
    long long v259 = *((_OWORD *)v5 + 2);
    *(void *)(a2 + 16) = v5[6];
    *(_OWORD *)a2 = v259;
  }
}

void sub_216B29750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  sub_216790E64(v59 - 160);
  if (*(char *)(v59 - 161) < 0) {
    operator delete(*(void **)(v59 - 184));
  }
  if (a59 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void sub_216B29BC0(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B29C58(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B29C6C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B29E20(a1, 1);
  if (v5)
  {
    sub_216B29F24(a1, (uint64_t)__p);
    unint64_t v6 = v4[10];
    unint64_t v7 = v4[9];
    if (v7 >= v6)
    {
      uint64_t v9 = v4[8];
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v11;
      }
      v22[4] = v4 + 10;
      if (v13) {
        unint64_t v14 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v13);
      }
      else {
        unint64_t v14 = 0;
      }
      unint64_t v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      long long v16 = *(_OWORD *)__p;
      *((void *)v15 + 2) = v21;
      *(_OWORD *)unint64_t v15 = v16;
      __p[1] = 0;
      uint64_t v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_216790CCC(v4 + 8, v22);
      uint64_t v17 = v4[9];
      sub_216790E64((uint64_t)v22);
      int v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)__p;
      *(void *)(v7 + 16) = v21;
      *(_OWORD *)unint64_t v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v19 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_216B29DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B29E20(uint64_t **a1, char a2)
{
  sub_216A4CE54(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B29EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B29F24@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B29F8C(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B29F8C(uint64_t **a1, char a2)
{
  sub_216A4CF08(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2A060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2A090@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B2A0F8(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B2A0F8(uint64_t **a1, char a2)
{
  sub_216B2A1FC(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2A1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2A1FC(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217470A26 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217470A26 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2A29C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B2A2B0(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  sub_216B2A884(v35);
  LOBYTE(v32[0]) = 2;
  *(_OWORD *)long long __p = *(_OWORD *)v35;
  char v38 = v36;
  v35[0] = 0;
  v35[1] = 0;
  uint64_t v36 = 0;
  LOBYTE(v39) = 2;
  memset(v40, 0, sizeof(v40));
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  v32[1] = 0;
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v6 = v5;
  unint64_t v41 = (void **)v40;
  sub_216782F20(&v41);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v41 = &v32[1];
  sub_216782F20(&v41);
  if (SHIBYTE(v36) < 0) {
    operator delete(v35[0]);
  }
  if (v6)
  {
    sub_216B2A668(a1, (uint64_t)v32);
    unint64_t v7 = v4[10];
    uint64_t v8 = v4 + 8;
    unint64_t v9 = v4[9];
    if (v9 >= v7)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v8) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v8) >> 3);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x555555555555555) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v13;
      }
      v40[0] = v4 + 10;
      if (v15) {
        long long v16 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v15);
      }
      else {
        long long v16 = 0;
      }
      uint64_t v17 = &v16[24 * v12];
      __p[0] = v16;
      __p[1] = v17;
      unint64_t v39 = &v16[24 * v15];
      long long v18 = *(_OWORD *)v32;
      *((void *)v17 + 2) = v33;
      *(_OWORD *)uint64_t v17 = v18;
      v32[1] = 0;
      uint64_t v33 = 0;
      v32[0] = 0;
      char v38 = v17 + 24;
      sub_216790CCC(v4 + 8, __p);
      uint64_t v11 = v4[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v10 = *(_OWORD *)v32;
      *(void *)(v9 + 16) = v33;
      *(_OWORD *)unint64_t v9 = v10;
      v32[1] = 0;
      uint64_t v33 = 0;
      v32[0] = 0;
      uint64_t v11 = v9 + 24;
      v4[9] = v9 + 24;
    }
    v4[9] = v11;
    sub_216B2A6D0(a1, (uint64_t)v35);
    unint64_t v20 = v4[9];
    unint64_t v19 = v4[10];
    if (v20 >= v19)
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v8) >> 3);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v8) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v23;
      }
      v40[0] = v4 + 10;
      if (v25) {
        unint64_t v26 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v25);
      }
      else {
        unint64_t v26 = 0;
      }
      unint64_t v27 = &v26[24 * v22];
      __p[0] = v26;
      __p[1] = v27;
      unint64_t v39 = &v26[24 * v25];
      long long v28 = *(_OWORD *)v35;
      *((void *)v27 + 2) = v36;
      *(_OWORD *)unint64_t v27 = v28;
      v35[1] = 0;
      uint64_t v36 = 0;
      v35[0] = 0;
      char v38 = v27 + 24;
      sub_216790CCC(v4 + 8, __p);
      uint64_t v29 = v4[9];
      sub_216790E64((uint64_t)__p);
      int v30 = SHIBYTE(v36);
      v4[9] = v29;
      if (v30 < 0) {
        operator delete(v35[0]);
      }
    }
    else
    {
      long long v21 = *(_OWORD *)v35;
      *(void *)(v20 + 16) = v36;
      *(_OWORD *)unint64_t v20 = v21;
      v4[9] = v20 + 24;
    }
    if (SHIBYTE(v33) < 0) {
      operator delete(v32[0]);
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v31 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v31;
  }
}

void sub_216B2A5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2A668@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B2A930(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

void sub_216B2A6D0(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B2AAE8(a1, 1);
  if (v5)
  {
    sub_216B2ABEC(a1, (uint64_t)__p);
    unint64_t v6 = v4[10];
    unint64_t v7 = v4[9];
    if (v7 >= v6)
    {
      uint64_t v9 = v4[8];
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v11;
      }
      v22[4] = v4 + 10;
      if (v13) {
        unint64_t v14 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v13);
      }
      else {
        unint64_t v14 = 0;
      }
      unint64_t v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      long long v16 = *(_OWORD *)__p;
      *((void *)v15 + 2) = v21;
      *(_OWORD *)unint64_t v15 = v16;
      __p[1] = 0;
      uint64_t v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_216790CCC(v4 + 8, v22);
      uint64_t v17 = v4[9];
      sub_216790E64((uint64_t)v22);
      int v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)__p;
      *(void *)(v7 + 16) = v21;
      *(_OWORD *)unint64_t v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v19 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_216B2A858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2A884(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2A91C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2A930(uint64_t **a1, char a2)
{
  sub_216B2AA34(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2AA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2AA34(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217470B88 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217470B88 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2AAD4(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2AAE8(uint64_t **a1, char a2)
{
  sub_216B2AEEC(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2ABBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2ABEC(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B2AFA0(a1, 2);
  if (v5)
  {
    sub_216B2A668(a1, (uint64_t)v33);
    unint64_t v6 = v4[10];
    unint64_t v7 = v4 + 8;
    unint64_t v8 = v4[9];
    if (v8 >= v6)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      unint64_t v39 = v4 + 10;
      if (v14) {
        unint64_t v15 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v14);
      }
      else {
        unint64_t v15 = 0;
      }
      long long v16 = &v15[24 * v11];
      long long v35 = v15;
      uint64_t v36 = v16;
      char v38 = &v15[24 * v14];
      long long v17 = *(_OWORD *)v33;
      *((void *)v16 + 2) = v34;
      *(_OWORD *)long long v16 = v17;
      v33[1] = 0;
      uint64_t v34 = 0;
      v33[0] = 0;
      char v37 = v16 + 24;
      sub_216790CCC(v4 + 8, &v35);
      uint64_t v10 = v4[9];
      sub_216790E64((uint64_t)&v35);
    }
    else
    {
      long long v9 = *(_OWORD *)v33;
      *(void *)(v8 + 16) = v34;
      *(_OWORD *)unint64_t v8 = v9;
      v33[1] = 0;
      uint64_t v34 = 0;
      v33[0] = 0;
      uint64_t v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_216B2A6D0(__p, a1);
    unint64_t v19 = v4[9];
    unint64_t v18 = v4[10];
    if (v19 >= v18)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      if (2 * v23 > v22) {
        unint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v22;
      }
      unint64_t v39 = v4 + 10;
      if (v24) {
        unint64_t v25 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v24);
      }
      else {
        unint64_t v25 = 0;
      }
      unint64_t v26 = &v25[24 * v21];
      long long v35 = v25;
      uint64_t v36 = v26;
      char v38 = &v25[24 * v24];
      long long v27 = *(_OWORD *)__p;
      *((void *)v26 + 2) = v32;
      *(_OWORD *)unint64_t v26 = v27;
      __p[1] = 0;
      uint64_t v32 = 0;
      __p[0] = 0;
      char v37 = v26 + 24;
      sub_216790CCC(v4 + 8, &v35);
      uint64_t v28 = v4[9];
      sub_216790E64((uint64_t)&v35);
      int v29 = SHIBYTE(v32);
      v4[9] = v28;
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v20 = *(_OWORD *)__p;
      *(void *)(v19 + 16) = v32;
      *(_OWORD *)unint64_t v19 = v20;
      v4[9] = v19 + 24;
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(v33[0]);
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v30 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v30;
  }
}

void sub_216B2AE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_216B2AEEC(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217470BBELL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217470BBELL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2AF8C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2AFA0(uint64_t **a1, char a2)
{
  sub_216B2B0A4(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2B074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2B0A4(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217470B3BLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217470B3BLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2B144(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B2B158(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v69, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v69, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14FracE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v66[0]) = 2;
  *(_OWORD *)long long __p = *(_OWORD *)v69;
  unint64_t v72 = v70;
  v69[0] = 0;
  v69[1] = 0;
  unint64_t v70 = 0;
  LOBYTE(v73) = 2;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  long long v74 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  v66[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  v64[0] = &v74;
  sub_216782F20((void ***)v64);
  if (SHIBYTE(v72) < 0) {
    operator delete(__p[0]);
  }
  v64[0] = &v66[1];
  sub_216782F20((void ***)v64);
  if (SHIBYTE(v70) < 0) {
    operator delete(v69[0]);
  }
  if (v8)
  {
    sub_216B2B914(a1, (uint64_t)v64);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      long long v74 = v6 + 10;
      if (v17) {
        unint64_t v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v73 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v64;
      *((void *)v19 + 2) = v65;
      *(_OWORD *)unint64_t v19 = v20;
      v64[1] = 0;
      uint64_t v65 = 0;
      v64[0] = 0;
      unint64_t v72 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v64;
      *(void *)(v11 + 16) = v65;
      *(_OWORD *)unint64_t v11 = v12;
      v64[1] = 0;
      uint64_t v65 = 0;
      v64[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    uint64_t v21 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v21)
    {
      sub_216779094(v69, v21);
      free(v21);
    }
    else
    {
      sub_216779094(v69, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v66[0]) = 2;
    *(_OWORD *)long long __p = *(_OWORD *)v69;
    unint64_t v72 = v70;
    v69[0] = 0;
    v69[1] = 0;
    unint64_t v70 = 0;
    LOBYTE(v73) = 2;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    long long v74 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    v66[1] = 0;
    unint64_t v22 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
    char v24 = v23;
    v77[0] = (void **)&v74;
    sub_216782F20(v77);
    if (SHIBYTE(v72) < 0) {
      operator delete(__p[0]);
    }
    v77[0] = &v66[1];
    sub_216782F20(v77);
    if (SHIBYTE(v70) < 0) {
      operator delete(v69[0]);
    }
    if (v24)
    {
      sub_216B2A668(a1, (uint64_t)v66);
      unint64_t v25 = v22 + 8;
      unint64_t v26 = v22[10];
      unint64_t v27 = v22[9];
      if (v27 >= v26)
      {
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v25) >> 3);
        unint64_t v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v25) >> 3);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v31;
        }
        long long v74 = v22 + 10;
        if (v33) {
          uint64_t v34 = (char *)sub_216782ED8((uint64_t)(v22 + 10), v33);
        }
        else {
          uint64_t v34 = 0;
        }
        long long v35 = &v34[24 * v30];
        __p[0] = v34;
        __p[1] = v35;
        unint64_t v73 = &v34[24 * v33];
        long long v36 = *(_OWORD *)v66;
        *((void *)v35 + 2) = v67;
        *(_OWORD *)long long v35 = v36;
        v66[1] = 0;
        uint64_t v67 = 0;
        v66[0] = 0;
        unint64_t v72 = v35 + 24;
        sub_216790CCC(v22 + 8, __p);
        uint64_t v29 = v22[9];
        sub_216790E64((uint64_t)__p);
      }
      else
      {
        long long v28 = *(_OWORD *)v66;
        *(void *)(v27 + 16) = v67;
        *(_OWORD *)unint64_t v27 = v28;
        v66[1] = 0;
        uint64_t v67 = 0;
        v66[0] = 0;
        uint64_t v29 = v27 + 24;
        v22[9] = v27 + 24;
      }
      v22[9] = v29;
      sub_216B2A6D0(a1, (uint64_t)v69);
      unint64_t v38 = v22[9];
      unint64_t v37 = v22[10];
      if (v38 >= v37)
      {
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v25) >> 3);
        unint64_t v41 = v40 + 1;
        if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v25) >> 3);
        if (2 * v42 > v41) {
          unint64_t v41 = 2 * v42;
        }
        if (v42 >= 0x555555555555555) {
          unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v43 = v41;
        }
        long long v74 = v22 + 10;
        if (v43) {
          unint64_t v44 = (char *)sub_216782ED8((uint64_t)(v22 + 10), v43);
        }
        else {
          unint64_t v44 = 0;
        }
        unint64_t v45 = &v44[24 * v40];
        __p[0] = v44;
        __p[1] = v45;
        unint64_t v73 = &v44[24 * v43];
        long long v46 = *(_OWORD *)v69;
        *((void *)v45 + 2) = v70;
        *(_OWORD *)unint64_t v45 = v46;
        v69[1] = 0;
        unint64_t v70 = 0;
        v69[0] = 0;
        unint64_t v72 = v45 + 24;
        sub_216790CCC(v22 + 8, __p);
        uint64_t v47 = v22[9];
        sub_216790E64((uint64_t)__p);
        int v48 = SHIBYTE(v70);
        v22[9] = v47;
        if (v48 < 0) {
          operator delete(v69[0]);
        }
      }
      else
      {
        long long v39 = *(_OWORD *)v69;
        *(void *)(v38 + 16) = v70;
        *(_OWORD *)unint64_t v38 = v39;
        v22[9] = v38 + 24;
      }
      if (SHIBYTE(v67) < 0) {
        operator delete(v66[0]);
      }
    }
    if (*((char *)v22 + 55) < 0)
    {
      sub_216778F24(v62, (void *)v22[4], v22[5]);
    }
    else
    {
      *(_OWORD *)int v62 = *((_OWORD *)v22 + 2);
      uint64_t v63 = v22[6];
    }
    unint64_t v50 = v6[9];
    unint64_t v49 = v6[10];
    if (v50 >= v49)
    {
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *v10) >> 3);
      unint64_t v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *v10) >> 3);
      if (2 * v54 > v53) {
        unint64_t v53 = 2 * v54;
      }
      if (v54 >= 0x555555555555555) {
        unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v55 = v53;
      }
      long long v74 = v6 + 10;
      if (v55) {
        unint64_t v56 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v55);
      }
      else {
        unint64_t v56 = 0;
      }
      unint64_t v57 = &v56[24 * v52];
      __p[0] = v56;
      __p[1] = v57;
      unint64_t v73 = &v56[24 * v55];
      long long v58 = *(_OWORD *)v62;
      *((void *)v57 + 2) = v63;
      *(_OWORD *)unint64_t v57 = v58;
      v62[1] = 0;
      uint64_t v63 = 0;
      v62[0] = 0;
      unint64_t v72 = v57 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v59 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v60 = SHIBYTE(v63);
      v6[9] = v59;
      if (v60 < 0) {
        operator delete(v62[0]);
      }
    }
    else
    {
      long long v51 = *(_OWORD *)v62;
      *(void *)(v50 + 16) = v63;
      *(_OWORD *)unint64_t v50 = v51;
      v6[9] = v50 + 24;
    }
    if (SHIBYTE(v65) < 0) {
      operator delete(v64[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v61 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v61;
  }
}

void sub_216B2B7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2B914@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B2B97C(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B2B97C(uint64_t **a1, char a2)
{
  sub_216B2BA80(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  uint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2BA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2BA80(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217470D4ALL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217470D4ALL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2BB20(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B2BB34(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13ExpE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v82, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v82, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_13ExpE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v79[0]) = 2;
  *(_OWORD *)long long __p = *(_OWORD *)v82;
  uint64_t v85 = v83;
  v82[0] = 0;
  v82[1] = 0;
  unint64_t v83 = 0;
  LOBYTE(v86) = 2;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  unint64_t v87 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  v79[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  v77[0] = &v87;
  sub_216782F20((void ***)v77);
  if (SHIBYTE(v85) < 0) {
    operator delete(__p[0]);
  }
  v77[0] = &v79[1];
  sub_216782F20((void ***)v77);
  if (SHIBYTE(v83) < 0) {
    operator delete(v82[0]);
  }
  if (v8)
  {
    sub_216B2C428(a1, (uint64_t)v77);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      unint64_t v87 = v6 + 10;
      if (v17) {
        unint64_t v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      int v86 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v77;
      *((void *)v19 + 2) = v78;
      *(_OWORD *)unint64_t v19 = v20;
      v77[1] = 0;
      uint64_t v78 = 0;
      v77[0] = 0;
      uint64_t v85 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v77;
      *(void *)(v11 + 16) = v78;
      *(_OWORD *)unint64_t v11 = v12;
      v77[1] = 0;
      uint64_t v78 = 0;
      v77[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B2C490(a1, (uint64_t)v75);
    unint64_t v21 = v6[9];
    unint64_t v22 = v6[10];
    if (v21 >= v22)
    {
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      unint64_t v26 = v25 + 1;
      if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      if (2 * v27 > v26) {
        unint64_t v26 = 2 * v27;
      }
      if (v27 >= 0x555555555555555) {
        unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v28 = v26;
      }
      unint64_t v87 = v6 + 10;
      if (v28) {
        uint64_t v29 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v28);
      }
      else {
        uint64_t v29 = 0;
      }
      unint64_t v30 = &v29[24 * v25];
      __p[0] = v29;
      __p[1] = v30;
      int v86 = &v29[24 * v28];
      long long v31 = *(_OWORD *)v75;
      *((void *)v30 + 2) = v76;
      *(_OWORD *)unint64_t v30 = v31;
      v75[1] = 0;
      uint64_t v76 = 0;
      v75[0] = 0;
      uint64_t v85 = v30 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v24 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v23 = *(_OWORD *)v75;
      *(void *)(v21 + 16) = v76;
      *(_OWORD *)unint64_t v21 = v23;
      v75[1] = 0;
      uint64_t v76 = 0;
      v75[0] = 0;
      uint64_t v24 = v21 + 24;
      v6[9] = v21 + 24;
    }
    v6[9] = v24;
    unint64_t v32 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v32)
    {
      sub_216779094(v82, v32);
      free(v32);
    }
    else
    {
      sub_216779094(v82, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_16DigitsEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v79[0]) = 2;
    *(_OWORD *)long long __p = *(_OWORD *)v82;
    uint64_t v85 = v83;
    v82[0] = 0;
    v82[1] = 0;
    unint64_t v83 = 0;
    LOBYTE(v86) = 2;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    unint64_t v87 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    v79[1] = 0;
    unint64_t v33 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
    char v35 = v34;
    v90[0] = (void **)&v87;
    sub_216782F20(v90);
    if (SHIBYTE(v85) < 0) {
      operator delete(__p[0]);
    }
    v90[0] = &v79[1];
    sub_216782F20(v90);
    if (SHIBYTE(v83) < 0) {
      operator delete(v82[0]);
    }
    if (v35)
    {
      sub_216B2A668(a1, (uint64_t)v79);
      long long v36 = v33 + 8;
      unint64_t v37 = v33[10];
      unint64_t v38 = v33[9];
      if (v38 >= v37)
      {
        unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v36) >> 3);
        unint64_t v42 = v41 + 1;
        if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v36) >> 3);
        if (2 * v43 > v42) {
          unint64_t v42 = 2 * v43;
        }
        if (v43 >= 0x555555555555555) {
          unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v44 = v42;
        }
        unint64_t v87 = v33 + 10;
        if (v44) {
          unint64_t v45 = (char *)sub_216782ED8((uint64_t)(v33 + 10), v44);
        }
        else {
          unint64_t v45 = 0;
        }
        long long v46 = &v45[24 * v41];
        __p[0] = v45;
        __p[1] = v46;
        int v86 = &v45[24 * v44];
        long long v47 = *(_OWORD *)v79;
        *((void *)v46 + 2) = v80;
        *(_OWORD *)long long v46 = v47;
        v79[1] = 0;
        uint64_t v80 = 0;
        v79[0] = 0;
        uint64_t v85 = v46 + 24;
        sub_216790CCC(v33 + 8, __p);
        uint64_t v40 = v33[9];
        sub_216790E64((uint64_t)__p);
      }
      else
      {
        long long v39 = *(_OWORD *)v79;
        *(void *)(v38 + 16) = v80;
        *(_OWORD *)unint64_t v38 = v39;
        v79[1] = 0;
        uint64_t v80 = 0;
        v79[0] = 0;
        uint64_t v40 = v38 + 24;
        v33[9] = v38 + 24;
      }
      v33[9] = v40;
      sub_216B2A6D0(a1, (uint64_t)v82);
      unint64_t v49 = v33[9];
      unint64_t v48 = v33[10];
      if (v49 >= v48)
      {
        unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *v36) >> 3);
        unint64_t v52 = v51 + 1;
        if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *v36) >> 3);
        if (2 * v53 > v52) {
          unint64_t v52 = 2 * v53;
        }
        if (v53 >= 0x555555555555555) {
          unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v54 = v52;
        }
        unint64_t v87 = v33 + 10;
        if (v54) {
          unint64_t v55 = (char *)sub_216782ED8((uint64_t)(v33 + 10), v54);
        }
        else {
          unint64_t v55 = 0;
        }
        unint64_t v56 = &v55[24 * v51];
        __p[0] = v55;
        __p[1] = v56;
        int v86 = &v55[24 * v54];
        long long v57 = *(_OWORD *)v82;
        *((void *)v56 + 2) = v83;
        *(_OWORD *)unint64_t v56 = v57;
        v82[1] = 0;
        unint64_t v83 = 0;
        v82[0] = 0;
        uint64_t v85 = v56 + 24;
        sub_216790CCC(v33 + 8, __p);
        uint64_t v58 = v33[9];
        sub_216790E64((uint64_t)__p);
        int v59 = SHIBYTE(v83);
        v33[9] = v58;
        if (v59 < 0) {
          operator delete(v82[0]);
        }
      }
      else
      {
        long long v50 = *(_OWORD *)v82;
        *(void *)(v49 + 16) = v83;
        *(_OWORD *)unint64_t v49 = v50;
        v33[9] = v49 + 24;
      }
      if (SHIBYTE(v80) < 0) {
        operator delete(v79[0]);
      }
    }
    if (*((char *)v33 + 55) < 0)
    {
      sub_216778F24(v73, (void *)v33[4], v33[5]);
    }
    else
    {
      *(_OWORD *)unint64_t v73 = *((_OWORD *)v33 + 2);
      uint64_t v74 = v33[6];
    }
    unint64_t v61 = v6[9];
    unint64_t v60 = v6[10];
    if (v61 >= v60)
    {
      unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - *v10) >> 3);
      unint64_t v64 = v63 + 1;
      if (v63 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v10) >> 3);
      if (2 * v65 > v64) {
        unint64_t v64 = 2 * v65;
      }
      if (v65 >= 0x555555555555555) {
        unint64_t v66 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v66 = v64;
      }
      unint64_t v87 = v6 + 10;
      if (v66) {
        uint64_t v67 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v66);
      }
      else {
        uint64_t v67 = 0;
      }
      uint64_t v68 = &v67[24 * v63];
      __p[0] = v67;
      __p[1] = v68;
      int v86 = &v67[24 * v66];
      long long v69 = *(_OWORD *)v73;
      *((void *)v68 + 2) = v74;
      *(_OWORD *)uint64_t v68 = v69;
      v73[1] = 0;
      uint64_t v74 = 0;
      v73[0] = 0;
      uint64_t v85 = v68 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v70 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v71 = SHIBYTE(v74);
      v6[9] = v70;
      if (v71 < 0) {
        operator delete(v73[0]);
      }
    }
    else
    {
      long long v62 = *(_OWORD *)v73;
      *(void *)(v61 + 16) = v74;
      *(_OWORD *)unint64_t v61 = v62;
      v6[9] = v61 + 24;
    }
    if (SHIBYTE(v76) < 0) {
      operator delete(v75[0]);
    }
    if (SHIBYTE(v78) < 0) {
      operator delete(v77[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v72 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v72;
  }
}

void sub_216B2C2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2C428@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B2C644(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

void sub_216B2C490(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B2C7FC(a1, 1);
  if (v5)
  {
    sub_216B2C900(a1, (uint64_t)__p);
    unint64_t v6 = v4[10];
    unint64_t v7 = v4[9];
    if (v7 >= v6)
    {
      uint64_t v9 = v4[8];
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v11;
      }
      v22[4] = v4 + 10;
      if (v13) {
        unint64_t v14 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v13);
      }
      else {
        unint64_t v14 = 0;
      }
      unint64_t v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      long long v16 = *(_OWORD *)__p;
      *((void *)v15 + 2) = v21;
      *(_OWORD *)unint64_t v15 = v16;
      __p[1] = 0;
      uint64_t v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_216790CCC(v4 + 8, v22);
      uint64_t v17 = v4[9];
      sub_216790E64((uint64_t)v22);
      int v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)__p;
      *(void *)(v7 + 16) = v21;
      *(_OWORD *)unint64_t v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v19 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_216B2C618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2C644(uint64_t **a1, char a2)
{
  sub_216B2C748(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2C718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2C748(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217470E77 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217470E77 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2C7E8(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2C7FC(uint64_t **a1, char a2)
{
  sub_216B2C968(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2C8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2C900@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B2CA1C(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

void sub_216B2C968(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217470EAELL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217470EAELL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2CA08(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2CA1C(uint64_t **a1, char a2)
{
  sub_216B2CB20(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2CAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2CB20(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217470EF1 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217470EF1 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2CBC0(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2CBD4@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B2CC3C(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B2CC3C(uint64_t **a1, char a2)
{
  sub_216B2CD40(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2CD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2CD40(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217471126 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217471126 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2CDE0(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2CDF4@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B2CE5C(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B2CE5C(uint64_t **a1, char a2)
{
  sub_216B2CF60(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2CF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2CF60(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x80000002174711A9 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x80000002174711A9 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2D000(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2D014@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B2D07C(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B2D07C(uint64_t **a1, char a2)
{
  sub_216A46B94(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2D150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2D180(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc34EEEEEEENS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    long long v4 = v3;
    sub_216779094(&v178, v3);
    free(v4);
  }
  else
  {
    sub_216779094(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc34EEEEEEENS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v175) = 2;
  long long v180 = v178;
  uint64_t v181 = v179;
  long long v178 = 0uLL;
  unint64_t v179 = 0;
  LOBYTE(v182) = 2;
  uint64_t v184 = 0;
  uint64_t v185 = 0;
  unint64_t v183 = 0;
  uint64_t v176 = 0;
  uint64_t v177 = 0;
  *((void *)&v175 + 1) = 0;
  char v5 = sub_216B20DE4(a1, (const void **)&v180, &v180);
  char v7 = v6;
  v173[0] = &v183;
  sub_216782F20((void ***)v173);
  if (SHIBYTE(v181) < 0) {
    operator delete((void *)v180);
  }
  v173[0] = (char *)&v175 + 8;
  sub_216782F20((void ***)v173);
  if (SHIBYTE(v179) < 0) {
    operator delete((void *)v178);
  }
  if (v7)
  {
    sub_216B2EB18(a1, (uint64_t)v165);
    unint64_t v8 = v5[10];
    uint64_t v9 = v5 + 8;
    unint64_t v10 = v5[9];
    if (v10 >= v8)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v9) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v9) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v14;
      }
      unint64_t v183 = v5 + 10;
      if (v16) {
        uint64_t v17 = (char *)sub_216782ED8((uint64_t)(v5 + 10), v16);
      }
      else {
        uint64_t v17 = 0;
      }
      int v18 = &v17[24 * v13];
      *(void *)&long long v180 = v17;
      *((void *)&v180 + 1) = v18;
      int v182 = &v17[24 * v16];
      long long v19 = *(_OWORD *)v165;
      *((void *)v18 + 2) = v166;
      *(_OWORD *)int v18 = v19;
      v165[1] = 0;
      uint64_t v166 = 0;
      v165[0] = 0;
      uint64_t v181 = v18 + 24;
      sub_216790CCC(v5 + 8, &v180);
      uint64_t v12 = v5[9];
      sub_216790E64((uint64_t)&v180);
    }
    else
    {
      long long v11 = *(_OWORD *)v165;
      *(void *)(v10 + 16) = v166;
      *(_OWORD *)unint64_t v10 = v11;
      v165[1] = 0;
      uint64_t v166 = 0;
      v165[0] = 0;
      uint64_t v12 = v10 + 24;
      v5[9] = v10 + 24;
    }
    v5[9] = v12;
    sub_216B2ECCC(a1, (uint64_t)v163);
    unint64_t v20 = v5[9];
    unint64_t v21 = v5[10];
    if (v20 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v9) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v9) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      unint64_t v183 = v5 + 10;
      if (v27) {
        unint64_t v28 = (char *)sub_216782ED8((uint64_t)(v5 + 10), v27);
      }
      else {
        unint64_t v28 = 0;
      }
      uint64_t v29 = &v28[24 * v24];
      *(void *)&long long v180 = v28;
      *((void *)&v180 + 1) = v29;
      int v182 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v163;
      *((void *)v29 + 2) = v164;
      *(_OWORD *)uint64_t v29 = v30;
      v163[1] = 0;
      uint64_t v164 = 0;
      v163[0] = 0;
      uint64_t v181 = v29 + 24;
      sub_216790CCC(v5 + 8, &v180);
      uint64_t v23 = v5[9];
      sub_216790E64((uint64_t)&v180);
    }
    else
    {
      long long v22 = *(_OWORD *)v163;
      *(void *)(v20 + 16) = v164;
      *(_OWORD *)unint64_t v20 = v22;
      v163[1] = 0;
      uint64_t v164 = 0;
      v163[0] = 0;
      uint64_t v23 = v20 + 24;
      v5[9] = v20 + 24;
    }
    v5[9] = v23;
    long long v31 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v31)
    {
      sub_216779094(&v178, v31);
      free(v31);
    }
    else
    {
      sub_216779094(&v178, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v175) = 3;
    long long v180 = v178;
    uint64_t v181 = v179;
    long long v178 = 0uLL;
    unint64_t v179 = 0;
    LOBYTE(v182) = 3;
    uint64_t v184 = 0;
    uint64_t v185 = 0;
    unint64_t v183 = 0;
    uint64_t v176 = 0;
    uint64_t v177 = 0;
    *((void *)&v175 + 1) = 0;
    unint64_t v32 = sub_216B20DE4(a1, (const void **)&v180, &v180);
    char v34 = v33;
    v173[0] = &v183;
    sub_216782F20((void ***)v173);
    if (SHIBYTE(v181) < 0) {
      operator delete((void *)v180);
    }
    v173[0] = (char *)&v175 + 8;
    sub_216782F20((void ***)v173);
    if (SHIBYTE(v179) < 0) {
      operator delete((void *)v178);
    }
    char v35 = v5 + 8;
    if (v34)
    {
      long long v36 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_5ascii3oneIJLc92EEEENS0_4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS4_IJLc34EEEEEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v36)
      {
        sub_216779094(&v178, v36);
        free(v36);
      }
      else
      {
        sub_216779094(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_5ascii3oneIJLc92EEEENS0_4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS4_IJLc34EEEEEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v175) = 2;
      long long v180 = v178;
      uint64_t v181 = v179;
      long long v178 = 0uLL;
      unint64_t v179 = 0;
      LOBYTE(v182) = 2;
      uint64_t v184 = 0;
      uint64_t v185 = 0;
      unint64_t v183 = 0;
      uint64_t v176 = 0;
      uint64_t v177 = 0;
      *((void *)&v175 + 1) = 0;
      unint64_t v37 = sub_216B20DE4(a1, (const void **)&v180, &v180);
      char v39 = v38;
      v173[0] = &v183;
      sub_216782F20((void ***)v173);
      if (SHIBYTE(v181) < 0) {
        operator delete((void *)v180);
      }
      v173[0] = (char *)&v175 + 8;
      sub_216782F20((void ***)v173);
      if (SHIBYTE(v179) < 0) {
        operator delete((void *)v178);
      }
      if (v39)
      {
        sub_216B2F410(a1, (uint64_t)v173);
        uint64_t v40 = v37 + 8;
        unint64_t v41 = v37[10];
        unint64_t v42 = v37[9];
        long long v159 = v37 + 8;
        if (v42 >= v41)
        {
          unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *v40) >> 3);
          unint64_t v46 = v45 + 1;
          if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *v40) >> 3);
          if (2 * v47 > v46) {
            unint64_t v46 = 2 * v47;
          }
          if (v47 >= 0x555555555555555) {
            unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v48 = v46;
          }
          unint64_t v183 = v37 + 10;
          if (v48) {
            unint64_t v49 = (char *)sub_216782ED8((uint64_t)(v37 + 10), v48);
          }
          else {
            unint64_t v49 = 0;
          }
          long long v50 = &v49[24 * v45];
          *(void *)&long long v180 = v49;
          *((void *)&v180 + 1) = v50;
          int v182 = &v49[24 * v48];
          long long v51 = *(_OWORD *)v173;
          *((void *)v50 + 2) = v174;
          *(_OWORD *)long long v50 = v51;
          v173[1] = 0;
          uint64_t v174 = 0;
          v173[0] = 0;
          uint64_t v181 = v50 + 24;
          sub_216790CCC(v37 + 8, &v180);
          uint64_t v44 = v37[9];
          sub_216790E64((uint64_t)&v180);
        }
        else
        {
          long long v43 = *(_OWORD *)v173;
          *(void *)(v42 + 16) = v174;
          *(_OWORD *)unint64_t v42 = v43;
          v173[1] = 0;
          uint64_t v174 = 0;
          v173[0] = 0;
          uint64_t v44 = v42 + 24;
          v37[9] = v42 + 24;
        }
        v37[9] = v44;
        unint64_t v52 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS0_5ascii3oneIJLc34EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v52)
        {
          sub_216779094(&v178, v52);
          free(v52);
        }
        else
        {
          sub_216779094(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS0_5ascii3oneIJLc34EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v175) = 3;
        long long v180 = v178;
        uint64_t v181 = v179;
        long long v178 = 0uLL;
        unint64_t v179 = 0;
        LOBYTE(v182) = 3;
        uint64_t v184 = 0;
        uint64_t v185 = 0;
        unint64_t v183 = 0;
        uint64_t v176 = 0;
        uint64_t v177 = 0;
        *((void *)&v175 + 1) = 0;
        unint64_t v53 = sub_216B20DE4(a1, (const void **)&v180, &v180);
        char v55 = v54;
        v167[0] = &v183;
        sub_216782F20((void ***)v167);
        if (SHIBYTE(v181) < 0) {
          operator delete((void *)v180);
        }
        v167[0] = (char *)&v175 + 8;
        sub_216782F20((void ***)v167);
        if (SHIBYTE(v179) < 0) {
          operator delete((void *)v178);
        }
        if (v55)
        {
          sub_216B2D014(a1, (uint64_t)&v175);
          unint64_t v56 = v53 + 8;
          unint64_t v57 = v53[10];
          unint64_t v58 = v53[9];
          if (v58 >= v57)
          {
            unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *v56) >> 3);
            unint64_t v62 = v61 + 1;
            if (v61 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *v56) >> 3);
            if (2 * v63 > v62) {
              unint64_t v62 = 2 * v63;
            }
            if (v63 >= 0x555555555555555) {
              unint64_t v64 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v64 = v62;
            }
            unint64_t v183 = v53 + 10;
            if (v64) {
              unint64_t v65 = (char *)sub_216782ED8((uint64_t)(v53 + 10), v64);
            }
            else {
              unint64_t v65 = 0;
            }
            unint64_t v66 = &v65[24 * v61];
            *(void *)&long long v180 = v65;
            *((void *)&v180 + 1) = v66;
            int v182 = &v65[24 * v64];
            long long v67 = v175;
            *((void *)v66 + 2) = v176;
            *(_OWORD *)unint64_t v66 = v67;
            uint64_t v176 = 0;
            long long v175 = 0uLL;
            uint64_t v181 = v66 + 24;
            sub_216790CCC(v53 + 8, &v180);
            uint64_t v60 = v53[9];
            sub_216790E64((uint64_t)&v180);
          }
          else
          {
            long long v59 = v175;
            *(void *)(v58 + 16) = v176;
            *(_OWORD *)unint64_t v58 = v59;
            uint64_t v176 = 0;
            long long v175 = 0uLL;
            uint64_t v60 = v58 + 24;
            v53[9] = v58 + 24;
          }
          v53[9] = v60;
          sub_216B2F57C(a1, (uint64_t)&v178);
          unint64_t v69 = v53[9];
          unint64_t v68 = v53[10];
          if (v69 >= v68)
          {
            unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - *v56) >> 3);
            unint64_t v72 = v71 + 1;
            if (v71 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - *v56) >> 3);
            if (2 * v73 > v72) {
              unint64_t v72 = 2 * v73;
            }
            if (v73 >= 0x555555555555555) {
              unint64_t v74 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v74 = v72;
            }
            unint64_t v183 = v53 + 10;
            if (v74) {
              uint64_t v75 = (char *)sub_216782ED8((uint64_t)(v53 + 10), v74);
            }
            else {
              uint64_t v75 = 0;
            }
            uint64_t v76 = &v75[24 * v71];
            *(void *)&long long v180 = v75;
            *((void *)&v180 + 1) = v76;
            int v182 = &v75[24 * v74];
            long long v77 = v178;
            *((void *)v76 + 2) = v179;
            *(_OWORD *)uint64_t v76 = v77;
            unint64_t v179 = 0;
            long long v178 = 0uLL;
            uint64_t v181 = v76 + 24;
            sub_216790CCC(v53 + 8, &v180);
            uint64_t v78 = v53[9];
            sub_216790E64((uint64_t)&v180);
            int v79 = SHIBYTE(v179);
            v53[9] = v78;
            if (v79 < 0) {
              operator delete((void *)v178);
            }
          }
          else
          {
            long long v70 = v178;
            *(void *)(v69 + 16) = v179;
            *(_OWORD *)unint64_t v69 = v70;
            v53[9] = v69 + 24;
          }
          if (SHIBYTE(v176) < 0) {
            operator delete((void *)v175);
          }
        }
        if (*((char *)v53 + 55) < 0)
        {
          sub_216778F24(__p, (void *)v53[4], v53[5]);
        }
        else
        {
          *(_OWORD *)long long __p = *((_OWORD *)v53 + 2);
          uint64_t v172 = v53[6];
        }
        unint64_t v81 = v37[9];
        unint64_t v80 = v37[10];
        if (v81 >= v80)
        {
          unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - *v159) >> 3);
          unint64_t v84 = v83 + 1;
          if (v83 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - *v159) >> 3);
          if (2 * v85 > v84) {
            unint64_t v84 = 2 * v85;
          }
          if (v85 >= 0x555555555555555) {
            unint64_t v86 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v86 = v84;
          }
          unint64_t v183 = v37 + 10;
          if (v86) {
            unint64_t v87 = (char *)sub_216782ED8((uint64_t)(v37 + 10), v86);
          }
          else {
            unint64_t v87 = 0;
          }
          uint64_t v88 = &v87[24 * v83];
          *(void *)&long long v180 = v87;
          *((void *)&v180 + 1) = v88;
          int v182 = &v87[24 * v86];
          long long v89 = *(_OWORD *)__p;
          *((void *)v88 + 2) = v172;
          *(_OWORD *)uint64_t v88 = v89;
          __p[1] = 0;
          uint64_t v172 = 0;
          __p[0] = 0;
          uint64_t v181 = v88 + 24;
          sub_216790CCC(v159, &v180);
          uint64_t v90 = v37[9];
          sub_216790E64((uint64_t)&v180);
          int v91 = SHIBYTE(v172);
          v37[9] = v90;
          if (v91 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v82 = *(_OWORD *)__p;
          *(void *)(v81 + 16) = v172;
          *(_OWORD *)unint64_t v81 = v82;
          v37[9] = v81 + 24;
        }
        if (SHIBYTE(v174) < 0) {
          operator delete(v173[0]);
        }
      }
      if (*((char *)v37 + 55) < 0)
      {
        sub_216778F24(__dst, (void *)v37[4], v37[5]);
      }
      else
      {
        *(_OWORD *)std::string __dst = *((_OWORD *)v37 + 2);
        uint64_t v170 = v37[6];
      }
      unint64_t v92 = v32 + 8;
      unint64_t v93 = v32[10];
      unint64_t v94 = v32[9];
      if (v94 >= v93)
      {
        unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - *v92) >> 3);
        unint64_t v98 = v97 + 1;
        if (v97 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93 - *v92) >> 3);
        if (2 * v99 > v98) {
          unint64_t v98 = 2 * v99;
        }
        if (v99 >= 0x555555555555555) {
          unint64_t v100 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v100 = v98;
        }
        unint64_t v183 = v32 + 10;
        if (v100) {
          long long v101 = (char *)sub_216782ED8((uint64_t)(v32 + 10), v100);
        }
        else {
          long long v101 = 0;
        }
        uint64_t v102 = &v101[24 * v97];
        *(void *)&long long v180 = v101;
        *((void *)&v180 + 1) = v102;
        int v182 = &v101[24 * v100];
        long long v103 = *(_OWORD *)__dst;
        *((void *)v102 + 2) = v170;
        *(_OWORD *)uint64_t v102 = v103;
        __dst[1] = 0;
        uint64_t v170 = 0;
        __dst[0] = 0;
        uint64_t v181 = v102 + 24;
        sub_216790CCC(v32 + 8, &v180);
        uint64_t v96 = v32[9];
        sub_216790E64((uint64_t)&v180);
      }
      else
      {
        long long v95 = *(_OWORD *)__dst;
        *(void *)(v94 + 16) = v170;
        *(_OWORD *)unint64_t v94 = v95;
        __dst[1] = 0;
        uint64_t v170 = 0;
        __dst[0] = 0;
        uint64_t v96 = v94 + 24;
        v32[9] = v94 + 24;
      }
      v32[9] = v96;
      unint64_t v104 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc92EEEEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedINS5_IJLc34EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v104)
      {
        sub_216779094(&v178, v104);
        free(v104);
      }
      else
      {
        sub_216779094(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc92EEEEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedINS5_IJLc34EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v175) = 2;
      long long v180 = v178;
      uint64_t v181 = v179;
      long long v178 = 0uLL;
      unint64_t v179 = 0;
      LOBYTE(v182) = 2;
      uint64_t v184 = 0;
      uint64_t v185 = 0;
      unint64_t v183 = 0;
      uint64_t v176 = 0;
      uint64_t v177 = 0;
      *((void *)&v175 + 1) = 0;
      unint64_t v105 = sub_216B20DE4(a1, (const void **)&v180, &v180);
      char v107 = v106;
      v173[0] = &v183;
      sub_216782F20((void ***)v173);
      if (SHIBYTE(v181) < 0) {
        operator delete((void *)v180);
      }
      v173[0] = (char *)&v175 + 8;
      sub_216782F20((void ***)v173);
      if (SHIBYTE(v179) < 0) {
        operator delete((void *)v178);
      }
      char v35 = v5 + 8;
      if (v107)
      {
        sub_216B2F79C(a1, (uint64_t)v173);
        unint64_t v108 = v105 + 8;
        unint64_t v109 = v105[10];
        unint64_t v110 = v105[9];
        if (v110 >= v109)
        {
          unint64_t v113 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - *v108) >> 3);
          unint64_t v114 = v113 + 1;
          if (v113 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v109 - *v108) >> 3);
          if (2 * v115 > v114) {
            unint64_t v114 = 2 * v115;
          }
          if (v115 >= 0x555555555555555) {
            unint64_t v116 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v116 = v114;
          }
          unint64_t v183 = v105 + 10;
          if (v116) {
            unint64_t v117 = (char *)sub_216782ED8((uint64_t)(v105 + 10), v116);
          }
          else {
            unint64_t v117 = 0;
          }
          long long v118 = &v117[24 * v113];
          *(void *)&long long v180 = v117;
          *((void *)&v180 + 1) = v118;
          int v182 = &v117[24 * v116];
          long long v119 = *(_OWORD *)v173;
          *((void *)v118 + 2) = v174;
          *(_OWORD *)long long v118 = v119;
          v173[1] = 0;
          uint64_t v174 = 0;
          v173[0] = 0;
          uint64_t v181 = v118 + 24;
          sub_216790CCC(v105 + 8, &v180);
          uint64_t v112 = v105[9];
          sub_216790E64((uint64_t)&v180);
        }
        else
        {
          long long v111 = *(_OWORD *)v173;
          *(void *)(v110 + 16) = v174;
          *(_OWORD *)unint64_t v110 = v111;
          v173[1] = 0;
          uint64_t v174 = 0;
          v173[0] = 0;
          uint64_t v112 = v110 + 24;
          v105[9] = v110 + 24;
        }
        v105[9] = v112;
        unint64_t v120 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v120)
        {
          sub_216779094(&v178, v120);
          free(v120);
        }
        else
        {
          sub_216779094(&v178, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v175) = 0;
        long long v180 = v178;
        uint64_t v181 = v179;
        long long v178 = 0uLL;
        unint64_t v179 = 0;
        LOBYTE(v182) = 0;
        uint64_t v184 = 0;
        uint64_t v185 = 0;
        unint64_t v183 = 0;
        uint64_t v176 = 0;
        uint64_t v177 = 0;
        *((void *)&v175 + 1) = 0;
        unint64_t v121 = sub_216B20DE4(a1, (const void **)&v180, &v180);
        v186[0] = (void **)&v183;
        sub_216782F20(v186);
        if (SHIBYTE(v181) < 0) {
          operator delete((void *)v180);
        }
        v186[0] = (void **)&v175 + 1;
        sub_216782F20(v186);
        if (SHIBYTE(v179) < 0) {
          operator delete((void *)v178);
        }
        if (*((char *)v121 + 55) < 0)
        {
          sub_216778F24(__p, (void *)v121[4], v121[5]);
        }
        else
        {
          *(_OWORD *)long long __p = *((_OWORD *)v121 + 2);
          uint64_t v172 = v121[6];
        }
        unint64_t v123 = v105[9];
        unint64_t v122 = v105[10];
        if (v123 >= v122)
        {
          unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - *v108) >> 3);
          unint64_t v126 = v125 + 1;
          if (v125 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - *v108) >> 3);
          if (2 * v127 > v126) {
            unint64_t v126 = 2 * v127;
          }
          if (v127 >= 0x555555555555555) {
            unint64_t v128 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v128 = v126;
          }
          unint64_t v183 = v105 + 10;
          if (v128) {
            char v129 = (char *)sub_216782ED8((uint64_t)(v105 + 10), v128);
          }
          else {
            char v129 = 0;
          }
          unint64_t v130 = &v129[24 * v125];
          *(void *)&long long v180 = v129;
          *((void *)&v180 + 1) = v130;
          int v182 = &v129[24 * v128];
          long long v131 = *(_OWORD *)__p;
          *((void *)v130 + 2) = v172;
          *(_OWORD *)unint64_t v130 = v131;
          __p[1] = 0;
          uint64_t v172 = 0;
          __p[0] = 0;
          uint64_t v181 = v130 + 24;
          sub_216790CCC(v105 + 8, &v180);
          uint64_t v132 = v105[9];
          sub_216790E64((uint64_t)&v180);
          int v133 = SHIBYTE(v172);
          v105[9] = v132;
          unint64_t v92 = v32 + 8;
          char v35 = v5 + 8;
          if (v133 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v124 = *(_OWORD *)__p;
          *(void *)(v123 + 16) = v172;
          *(_OWORD *)unint64_t v123 = v124;
          v105[9] = v123 + 24;
          unint64_t v92 = v32 + 8;
          char v35 = v5 + 8;
        }
        if (SHIBYTE(v174) < 0) {
          operator delete(v173[0]);
        }
      }
      if (*((char *)v105 + 55) < 0)
      {
        sub_216778F24(v167, (void *)v105[4], v105[5]);
      }
      else
      {
        *(_OWORD *)unint64_t v167 = *((_OWORD *)v105 + 2);
        uint64_t v168 = v105[6];
      }
      unint64_t v135 = v32[9];
      unint64_t v134 = v32[10];
      if (v135 >= v134)
      {
        unint64_t v137 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - *v92) >> 3);
        unint64_t v138 = v137 + 1;
        if (v137 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - *v92) >> 3);
        if (2 * v139 > v138) {
          unint64_t v138 = 2 * v139;
        }
        if (v139 >= 0x555555555555555) {
          unint64_t v140 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v140 = v138;
        }
        unint64_t v183 = v32 + 10;
        if (v140) {
          unint64_t v141 = (char *)sub_216782ED8((uint64_t)(v32 + 10), v140);
        }
        else {
          unint64_t v141 = 0;
        }
        unint64_t v142 = &v141[24 * v137];
        *(void *)&long long v180 = v141;
        *((void *)&v180 + 1) = v142;
        int v182 = &v141[24 * v140];
        long long v143 = *(_OWORD *)v167;
        *((void *)v142 + 2) = v168;
        *(_OWORD *)unint64_t v142 = v143;
        v167[1] = 0;
        uint64_t v168 = 0;
        v167[0] = 0;
        uint64_t v181 = v142 + 24;
        sub_216790CCC(v92, &v180);
        uint64_t v144 = v32[9];
        sub_216790E64((uint64_t)&v180);
        int v145 = SHIBYTE(v168);
        v32[9] = v144;
        if (v145 < 0) {
          operator delete(v167[0]);
        }
      }
      else
      {
        long long v136 = *(_OWORD *)v167;
        *(void *)(v135 + 16) = v168;
        *(_OWORD *)unint64_t v135 = v136;
        v32[9] = v135 + 24;
      }
      if (SHIBYTE(v170) < 0) {
        operator delete(__dst[0]);
      }
    }
    if (*((char *)v32 + 55) < 0)
    {
      sub_216778F24(v161, (void *)v32[4], v32[5]);
    }
    else
    {
      *(_OWORD *)unint64_t v161 = *((_OWORD *)v32 + 2);
      uint64_t v162 = v32[6];
    }
    unint64_t v147 = v5[9];
    unint64_t v146 = v5[10];
    if (v147 >= v146)
    {
      unint64_t v149 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - *v35) >> 3);
      unint64_t v150 = v149 + 1;
      if (v149 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - *v35) >> 3);
      if (2 * v151 > v150) {
        unint64_t v150 = 2 * v151;
      }
      if (v151 >= 0x555555555555555) {
        unint64_t v152 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v152 = v150;
      }
      unint64_t v183 = v5 + 10;
      if (v152) {
        unint64_t v153 = (char *)sub_216782ED8((uint64_t)(v5 + 10), v152);
      }
      else {
        unint64_t v153 = 0;
      }
      unint64_t v154 = &v153[24 * v149];
      *(void *)&long long v180 = v153;
      *((void *)&v180 + 1) = v154;
      int v182 = &v153[24 * v152];
      long long v155 = *(_OWORD *)v161;
      *((void *)v154 + 2) = v162;
      *(_OWORD *)unint64_t v154 = v155;
      v161[1] = 0;
      uint64_t v162 = 0;
      v161[0] = 0;
      uint64_t v181 = v154 + 24;
      sub_216790CCC(v35, &v180);
      uint64_t v156 = v5[9];
      sub_216790E64((uint64_t)&v180);
      int v157 = SHIBYTE(v162);
      v5[9] = v156;
      if (v157 < 0) {
        operator delete(v161[0]);
      }
    }
    else
    {
      long long v148 = *(_OWORD *)v161;
      *(void *)(v147 + 16) = v162;
      *(_OWORD *)unint64_t v147 = v148;
      v5[9] = v147 + 24;
    }
    if (SHIBYTE(v164) < 0) {
      operator delete(v163[0]);
    }
    if (SHIBYTE(v166) < 0) {
      operator delete(v165[0]);
    }
  }
  if (*((char *)v5 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v5[4], v5[5]);
  }
  else
  {
    long long v158 = *((_OWORD *)v5 + 2);
    *(void *)(a2 + 16) = v5[6];
    *(_OWORD *)a2 = v158;
  }
}

void sub_216B2E40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  sub_216790E64(v58 - 160);
  if (*(char *)(v58 - 161) < 0) {
    operator delete(*(void **)(v58 - 184));
  }
  if (*(char *)(v58 - 193) < 0) {
    operator delete(*(void **)(v58 - 216));
  }
  if (a58 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void sub_216B2E70C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc34EEEEEEENS4_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS7_EEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc34EEEEEEENS4_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS7_EEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)long long __p = *(_OWORD *)v37;
  uint64_t v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  char v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  char v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  long long v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  long long v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B2D180(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    unint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        int v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        int v18 = 0;
      }
      long long v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)long long v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B2E70C(v37, a1);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        unint64_t v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        unint64_t v28 = 0;
      }
      uint64_t v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)uint64_t v29 = v30;
      v37[1] = 0;
      char v38 = 0;
      v37[0] = 0;
      uint64_t v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B2EA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_216B2EB18(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B2EE80(a1, 1);
  if (v5)
  {
    sub_216B2D014(a1, (uint64_t)__p);
    unint64_t v6 = v4[10];
    unint64_t v7 = v4[9];
    if (v7 >= v6)
    {
      uint64_t v9 = v4[8];
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v11;
      }
      v22[4] = v4 + 10;
      if (v13) {
        unint64_t v14 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v13);
      }
      else {
        unint64_t v14 = 0;
      }
      unint64_t v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      long long v16 = *(_OWORD *)__p;
      *((void *)v15 + 2) = v21;
      *(_OWORD *)unint64_t v15 = v16;
      __p[1] = 0;
      uint64_t v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_216790CCC(v4 + 8, v22);
      uint64_t v17 = v4[9];
      sub_216790E64((uint64_t)v22);
      int v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)__p;
      *(void *)(v7 + 16) = v21;
      *(_OWORD *)unint64_t v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v19 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_216B2ECA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2ECCC(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B2F038(a1, 1);
  if (v5)
  {
    sub_216B2F13C(a1, (uint64_t)__p);
    unint64_t v6 = v4[10];
    unint64_t v7 = v4[9];
    if (v7 >= v6)
    {
      uint64_t v9 = v4[8];
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v11;
      }
      v22[4] = v4 + 10;
      if (v13) {
        unint64_t v14 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v13);
      }
      else {
        unint64_t v14 = 0;
      }
      unint64_t v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      long long v16 = *(_OWORD *)__p;
      *((void *)v15 + 2) = v21;
      *(_OWORD *)unint64_t v15 = v16;
      __p[1] = 0;
      uint64_t v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_216790CCC(v4 + 8, v22);
      uint64_t v17 = v4[9];
      sub_216790E64((uint64_t)v22);
      int v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)__p;
      *(void *)(v7 + 16) = v21;
      *(_OWORD *)unint64_t v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v19 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_216B2EE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2EE80(uint64_t **a1, char a2)
{
  sub_216B2EF84(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2EF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2EF84(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x80000002174715BFLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x80000002174715BFLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2F024(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2F038(uint64_t **a1, char a2)
{
  sub_216B2F1A4(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2F10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2F13C@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B2F258(a1, 1);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

void sub_216B2F1A4(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217471609 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217471609 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2F244(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2F258(uint64_t **a1, char a2)
{
  sub_216B2F35C(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2F32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2F35C(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217471644 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217471644 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2F3FC(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2F410@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B2F478(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B2F478(uint64_t **a1, char a2)
{
  sub_216A44DE4(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2F54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2F57C@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B2F5E4(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B2F5E4(uint64_t **a1, char a2)
{
  sub_216B2F6E8(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2F6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2F6E8(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x80000002174717FALL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x80000002174717FALL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2F788(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B2F79C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B2F950(a1, 1);
  if (v5)
  {
    sub_216B2F410(a1, (uint64_t)__p);
    unint64_t v6 = v4[10];
    unint64_t v7 = v4[9];
    if (v7 >= v6)
    {
      uint64_t v9 = v4[8];
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v11;
      }
      v22[4] = v4 + 10;
      if (v13) {
        unint64_t v14 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v13);
      }
      else {
        unint64_t v14 = 0;
      }
      unint64_t v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      long long v16 = *(_OWORD *)__p;
      *((void *)v15 + 2) = v21;
      *(_OWORD *)unint64_t v15 = v16;
      __p[1] = 0;
      uint64_t v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_216790CCC(v4 + 8, v22);
      uint64_t v17 = v4[9];
      sub_216790E64((uint64_t)v22);
      int v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)__p;
      *(void *)(v7 + 16) = v21;
      *(_OWORD *)unint64_t v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v19 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_216B2F924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2F950(uint64_t **a1, char a2)
{
  sub_216B2FA54(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2FA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2FA54(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x80000002174718EBLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x80000002174718EBLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B2FAF4(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B2FB08@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B2FB70(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B2FB70(uint64_t **a1, char a2)
{
  sub_216A4B35C(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B2FC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B2FC74(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc39EEEEEEENS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    long long v4 = v3;
    sub_216779094(&v178, v3);
    free(v4);
  }
  else
  {
    sub_216779094(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc39EEEEEEENS3_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS6_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v175) = 2;
  long long v180 = v178;
  uint64_t v181 = v179;
  long long v178 = 0uLL;
  unint64_t v179 = 0;
  LOBYTE(v182) = 2;
  uint64_t v184 = 0;
  uint64_t v185 = 0;
  unint64_t v183 = 0;
  uint64_t v176 = 0;
  uint64_t v177 = 0;
  *((void *)&v175 + 1) = 0;
  char v5 = sub_216B20DE4(a1, (const void **)&v180, &v180);
  char v7 = v6;
  v173[0] = &v183;
  sub_216782F20((void ***)v173);
  if (SHIBYTE(v181) < 0) {
    operator delete((void *)v180);
  }
  v173[0] = (char *)&v175 + 8;
  sub_216782F20((void ***)v173);
  if (SHIBYTE(v179) < 0) {
    operator delete((void *)v178);
  }
  if (v7)
  {
    sub_216B3160C(a1, (uint64_t)v165);
    unint64_t v8 = v5[10];
    uint64_t v9 = v5 + 8;
    unint64_t v10 = v5[9];
    if (v10 >= v8)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v9) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v9) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v14;
      }
      unint64_t v183 = v5 + 10;
      if (v16) {
        uint64_t v17 = (char *)sub_216782ED8((uint64_t)(v5 + 10), v16);
      }
      else {
        uint64_t v17 = 0;
      }
      int v18 = &v17[24 * v13];
      *(void *)&long long v180 = v17;
      *((void *)&v180 + 1) = v18;
      int v182 = &v17[24 * v16];
      long long v19 = *(_OWORD *)v165;
      *((void *)v18 + 2) = v166;
      *(_OWORD *)int v18 = v19;
      v165[1] = 0;
      uint64_t v166 = 0;
      v165[0] = 0;
      uint64_t v181 = v18 + 24;
      sub_216790CCC(v5 + 8, &v180);
      uint64_t v12 = v5[9];
      sub_216790E64((uint64_t)&v180);
    }
    else
    {
      long long v11 = *(_OWORD *)v165;
      *(void *)(v10 + 16) = v166;
      *(_OWORD *)unint64_t v10 = v11;
      v165[1] = 0;
      uint64_t v166 = 0;
      v165[0] = 0;
      uint64_t v12 = v10 + 24;
      v5[9] = v10 + 24;
    }
    v5[9] = v12;
    sub_216B2ECCC(a1, (uint64_t)v163);
    unint64_t v20 = v5[9];
    unint64_t v21 = v5[10];
    if (v20 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v9) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v9) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      unint64_t v183 = v5 + 10;
      if (v27) {
        unint64_t v28 = (char *)sub_216782ED8((uint64_t)(v5 + 10), v27);
      }
      else {
        unint64_t v28 = 0;
      }
      uint64_t v29 = &v28[24 * v24];
      *(void *)&long long v180 = v28;
      *((void *)&v180 + 1) = v29;
      int v182 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v163;
      *((void *)v29 + 2) = v164;
      *(_OWORD *)uint64_t v29 = v30;
      v163[1] = 0;
      uint64_t v164 = 0;
      v163[0] = 0;
      uint64_t v181 = v29 + 24;
      sub_216790CCC(v5 + 8, &v180);
      uint64_t v23 = v5[9];
      sub_216790E64((uint64_t)&v180);
    }
    else
    {
      long long v22 = *(_OWORD *)v163;
      *(void *)(v20 + 16) = v164;
      *(_OWORD *)unint64_t v20 = v22;
      v163[1] = 0;
      uint64_t v164 = 0;
      v163[0] = 0;
      uint64_t v23 = v20 + 24;
      v5[9] = v20 + 24;
    }
    v5[9] = v23;
    uint64_t v31 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v31)
    {
      sub_216779094(&v178, v31);
      free(v31);
    }
    else
    {
      sub_216779094(&v178, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v175) = 3;
    long long v180 = v178;
    uint64_t v181 = v179;
    long long v178 = 0uLL;
    unint64_t v179 = 0;
    LOBYTE(v182) = 3;
    uint64_t v184 = 0;
    uint64_t v185 = 0;
    unint64_t v183 = 0;
    uint64_t v176 = 0;
    uint64_t v177 = 0;
    *((void *)&v175 + 1) = 0;
    int v32 = sub_216B20DE4(a1, (const void **)&v180, &v180);
    char v34 = v33;
    v173[0] = &v183;
    sub_216782F20((void ***)v173);
    if (SHIBYTE(v181) < 0) {
      operator delete((void *)v180);
    }
    v173[0] = (char *)&v175 + 8;
    sub_216782F20((void ***)v173);
    if (SHIBYTE(v179) < 0) {
      operator delete((void *)v178);
    }
    uint64_t v35 = v5 + 8;
    if (v34)
    {
      uint64_t v36 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_5ascii3oneIJLc92EEEENS0_4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS4_IJLc39EEEEEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v36)
      {
        sub_216779094(&v178, v36);
        free(v36);
      }
      else
      {
        sub_216779094(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_5ascii3oneIJLc92EEEENS0_4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS4_IJLc39EEEEEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v175) = 2;
      long long v180 = v178;
      uint64_t v181 = v179;
      long long v178 = 0uLL;
      unint64_t v179 = 0;
      LOBYTE(v182) = 2;
      uint64_t v184 = 0;
      uint64_t v185 = 0;
      unint64_t v183 = 0;
      uint64_t v176 = 0;
      uint64_t v177 = 0;
      *((void *)&v175 + 1) = 0;
      unint64_t v37 = sub_216B20DE4(a1, (const void **)&v180, &v180);
      char v39 = v38;
      v173[0] = &v183;
      sub_216782F20((void ***)v173);
      if (SHIBYTE(v181) < 0) {
        operator delete((void *)v180);
      }
      v173[0] = (char *)&v175 + 8;
      sub_216782F20((void ***)v173);
      if (SHIBYTE(v179) < 0) {
        operator delete((void *)v178);
      }
      if (v39)
      {
        sub_216B2F410(a1, (uint64_t)v173);
        uint64_t v40 = v37 + 8;
        unint64_t v41 = v37[10];
        unint64_t v42 = v37[9];
        long long v159 = v37 + 8;
        if (v42 >= v41)
        {
          unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *v40) >> 3);
          unint64_t v46 = v45 + 1;
          if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *v40) >> 3);
          if (2 * v47 > v46) {
            unint64_t v46 = 2 * v47;
          }
          if (v47 >= 0x555555555555555) {
            unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v48 = v46;
          }
          unint64_t v183 = v37 + 10;
          if (v48) {
            unint64_t v49 = (char *)sub_216782ED8((uint64_t)(v37 + 10), v48);
          }
          else {
            unint64_t v49 = 0;
          }
          long long v50 = &v49[24 * v45];
          *(void *)&long long v180 = v49;
          *((void *)&v180 + 1) = v50;
          int v182 = &v49[24 * v48];
          long long v51 = *(_OWORD *)v173;
          *((void *)v50 + 2) = v174;
          *(_OWORD *)long long v50 = v51;
          v173[1] = 0;
          uint64_t v174 = 0;
          v173[0] = 0;
          uint64_t v181 = v50 + 24;
          sub_216790CCC(v37 + 8, &v180);
          uint64_t v44 = v37[9];
          sub_216790E64((uint64_t)&v180);
        }
        else
        {
          long long v43 = *(_OWORD *)v173;
          *(void *)(v42 + 16) = v174;
          *(_OWORD *)unint64_t v42 = v43;
          v173[1] = 0;
          uint64_t v174 = 0;
          v173[0] = 0;
          uint64_t v44 = v42 + 24;
          v37[9] = v42 + 24;
        }
        v37[9] = v44;
        unint64_t v52 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS0_5ascii3oneIJLc39EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v52)
        {
          sub_216779094(&v178, v52);
          free(v52);
        }
        else
        {
          sub_216779094(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedINS0_5ascii3oneIJLc39EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v175) = 3;
        long long v180 = v178;
        uint64_t v181 = v179;
        long long v178 = 0uLL;
        unint64_t v179 = 0;
        LOBYTE(v182) = 3;
        uint64_t v184 = 0;
        uint64_t v185 = 0;
        unint64_t v183 = 0;
        uint64_t v176 = 0;
        uint64_t v177 = 0;
        *((void *)&v175 + 1) = 0;
        unint64_t v53 = sub_216B20DE4(a1, (const void **)&v180, &v180);
        char v55 = v54;
        v167[0] = &v183;
        sub_216782F20((void ***)v167);
        if (SHIBYTE(v181) < 0) {
          operator delete((void *)v180);
        }
        v167[0] = (char *)&v175 + 8;
        sub_216782F20((void ***)v167);
        if (SHIBYTE(v179) < 0) {
          operator delete((void *)v178);
        }
        if (v55)
        {
          sub_216B2FB08(a1, (uint64_t)&v175);
          unint64_t v56 = v53 + 8;
          unint64_t v57 = v53[10];
          unint64_t v58 = v53[9];
          if (v58 >= v57)
          {
            unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *v56) >> 3);
            unint64_t v62 = v61 + 1;
            if (v61 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *v56) >> 3);
            if (2 * v63 > v62) {
              unint64_t v62 = 2 * v63;
            }
            if (v63 >= 0x555555555555555) {
              unint64_t v64 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v64 = v62;
            }
            unint64_t v183 = v53 + 10;
            if (v64) {
              unint64_t v65 = (char *)sub_216782ED8((uint64_t)(v53 + 10), v64);
            }
            else {
              unint64_t v65 = 0;
            }
            unint64_t v66 = &v65[24 * v61];
            *(void *)&long long v180 = v65;
            *((void *)&v180 + 1) = v66;
            int v182 = &v65[24 * v64];
            long long v67 = v175;
            *((void *)v66 + 2) = v176;
            *(_OWORD *)unint64_t v66 = v67;
            uint64_t v176 = 0;
            long long v175 = 0uLL;
            uint64_t v181 = v66 + 24;
            sub_216790CCC(v53 + 8, &v180);
            uint64_t v60 = v53[9];
            sub_216790E64((uint64_t)&v180);
          }
          else
          {
            long long v59 = v175;
            *(void *)(v58 + 16) = v176;
            *(_OWORD *)unint64_t v58 = v59;
            uint64_t v176 = 0;
            long long v175 = 0uLL;
            uint64_t v60 = v58 + 24;
            v53[9] = v58 + 24;
          }
          v53[9] = v60;
          sub_216B2F57C(a1, (uint64_t)&v178);
          unint64_t v69 = v53[9];
          unint64_t v68 = v53[10];
          if (v69 >= v68)
          {
            unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - *v56) >> 3);
            unint64_t v72 = v71 + 1;
            if (v71 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - *v56) >> 3);
            if (2 * v73 > v72) {
              unint64_t v72 = 2 * v73;
            }
            if (v73 >= 0x555555555555555) {
              unint64_t v74 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v74 = v72;
            }
            unint64_t v183 = v53 + 10;
            if (v74) {
              uint64_t v75 = (char *)sub_216782ED8((uint64_t)(v53 + 10), v74);
            }
            else {
              uint64_t v75 = 0;
            }
            uint64_t v76 = &v75[24 * v71];
            *(void *)&long long v180 = v75;
            *((void *)&v180 + 1) = v76;
            int v182 = &v75[24 * v74];
            long long v77 = v178;
            *((void *)v76 + 2) = v179;
            *(_OWORD *)uint64_t v76 = v77;
            unint64_t v179 = 0;
            long long v178 = 0uLL;
            uint64_t v181 = v76 + 24;
            sub_216790CCC(v53 + 8, &v180);
            uint64_t v78 = v53[9];
            sub_216790E64((uint64_t)&v180);
            int v79 = SHIBYTE(v179);
            v53[9] = v78;
            if (v79 < 0) {
              operator delete((void *)v178);
            }
          }
          else
          {
            long long v70 = v178;
            *(void *)(v69 + 16) = v179;
            *(_OWORD *)unint64_t v69 = v70;
            v53[9] = v69 + 24;
          }
          if (SHIBYTE(v176) < 0) {
            operator delete((void *)v175);
          }
        }
        if (*((char *)v53 + 55) < 0)
        {
          sub_216778F24(__p, (void *)v53[4], v53[5]);
        }
        else
        {
          *(_OWORD *)long long __p = *((_OWORD *)v53 + 2);
          uint64_t v172 = v53[6];
        }
        unint64_t v81 = v37[9];
        unint64_t v80 = v37[10];
        if (v81 >= v80)
        {
          unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - *v159) >> 3);
          unint64_t v84 = v83 + 1;
          if (v83 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - *v159) >> 3);
          if (2 * v85 > v84) {
            unint64_t v84 = 2 * v85;
          }
          if (v85 >= 0x555555555555555) {
            unint64_t v86 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v86 = v84;
          }
          unint64_t v183 = v37 + 10;
          if (v86) {
            unint64_t v87 = (char *)sub_216782ED8((uint64_t)(v37 + 10), v86);
          }
          else {
            unint64_t v87 = 0;
          }
          uint64_t v88 = &v87[24 * v83];
          *(void *)&long long v180 = v87;
          *((void *)&v180 + 1) = v88;
          int v182 = &v87[24 * v86];
          long long v89 = *(_OWORD *)__p;
          *((void *)v88 + 2) = v172;
          *(_OWORD *)uint64_t v88 = v89;
          __p[1] = 0;
          uint64_t v172 = 0;
          __p[0] = 0;
          uint64_t v181 = v88 + 24;
          sub_216790CCC(v159, &v180);
          uint64_t v90 = v37[9];
          sub_216790E64((uint64_t)&v180);
          int v91 = SHIBYTE(v172);
          v37[9] = v90;
          if (v91 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v82 = *(_OWORD *)__p;
          *(void *)(v81 + 16) = v172;
          *(_OWORD *)unint64_t v81 = v82;
          v37[9] = v81 + 24;
        }
        if (SHIBYTE(v174) < 0) {
          operator delete(v173[0]);
        }
      }
      if (*((char *)v37 + 55) < 0)
      {
        sub_216778F24(__dst, (void *)v37[4], v37[5]);
      }
      else
      {
        *(_OWORD *)std::string __dst = *((_OWORD *)v37 + 2);
        uint64_t v170 = v37[6];
      }
      unint64_t v92 = v32 + 8;
      unint64_t v93 = v32[10];
      unint64_t v94 = v32[9];
      if (v94 >= v93)
      {
        unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - *v92) >> 3);
        unint64_t v98 = v97 + 1;
        if (v97 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93 - *v92) >> 3);
        if (2 * v99 > v98) {
          unint64_t v98 = 2 * v99;
        }
        if (v99 >= 0x555555555555555) {
          unint64_t v100 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v100 = v98;
        }
        unint64_t v183 = v32 + 10;
        if (v100) {
          long long v101 = (char *)sub_216782ED8((uint64_t)(v32 + 10), v100);
        }
        else {
          long long v101 = 0;
        }
        uint64_t v102 = &v101[24 * v97];
        *(void *)&long long v180 = v101;
        *((void *)&v180 + 1) = v102;
        int v182 = &v101[24 * v100];
        long long v103 = *(_OWORD *)__dst;
        *((void *)v102 + 2) = v170;
        *(_OWORD *)uint64_t v102 = v103;
        __dst[1] = 0;
        uint64_t v170 = 0;
        __dst[0] = 0;
        uint64_t v181 = v102 + 24;
        sub_216790CCC(v32 + 8, &v180);
        uint64_t v96 = v32[9];
        sub_216790E64((uint64_t)&v180);
      }
      else
      {
        long long v95 = *(_OWORD *)__dst;
        *(void *)(v94 + 16) = v170;
        *(_OWORD *)unint64_t v94 = v95;
        __dst[1] = 0;
        uint64_t v170 = 0;
        __dst[0] = 0;
        uint64_t v96 = v94 + 24;
        v32[9] = v94 + 24;
      }
      v32[9] = v96;
      unint64_t v104 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc92EEEEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedINS5_IJLc39EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v104)
      {
        sub_216779094(&v178, v104);
        free(v104);
      }
      else
      {
        sub_216779094(&v178, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc92EEEEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedINS5_IJLc39EEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v175) = 2;
      long long v180 = v178;
      uint64_t v181 = v179;
      long long v178 = 0uLL;
      unint64_t v179 = 0;
      LOBYTE(v182) = 2;
      uint64_t v184 = 0;
      uint64_t v185 = 0;
      unint64_t v183 = 0;
      uint64_t v176 = 0;
      uint64_t v177 = 0;
      *((void *)&v175 + 1) = 0;
      unint64_t v105 = sub_216B20DE4(a1, (const void **)&v180, &v180);
      char v107 = v106;
      v173[0] = &v183;
      sub_216782F20((void ***)v173);
      if (SHIBYTE(v181) < 0) {
        operator delete((void *)v180);
      }
      v173[0] = (char *)&v175 + 8;
      sub_216782F20((void ***)v173);
      if (SHIBYTE(v179) < 0) {
        operator delete((void *)v178);
      }
      uint64_t v35 = v5 + 8;
      if (v107)
      {
        sub_216B2F79C(a1, (uint64_t)v173);
        unint64_t v108 = v105 + 8;
        unint64_t v109 = v105[10];
        unint64_t v110 = v105[9];
        if (v110 >= v109)
        {
          unint64_t v113 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - *v108) >> 3);
          unint64_t v114 = v113 + 1;
          if (v113 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v109 - *v108) >> 3);
          if (2 * v115 > v114) {
            unint64_t v114 = 2 * v115;
          }
          if (v115 >= 0x555555555555555) {
            unint64_t v116 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v116 = v114;
          }
          unint64_t v183 = v105 + 10;
          if (v116) {
            unint64_t v117 = (char *)sub_216782ED8((uint64_t)(v105 + 10), v116);
          }
          else {
            unint64_t v117 = 0;
          }
          long long v118 = &v117[24 * v113];
          *(void *)&long long v180 = v117;
          *((void *)&v180 + 1) = v118;
          int v182 = &v117[24 * v116];
          long long v119 = *(_OWORD *)v173;
          *((void *)v118 + 2) = v174;
          *(_OWORD *)long long v118 = v119;
          v173[1] = 0;
          uint64_t v174 = 0;
          v173[0] = 0;
          uint64_t v181 = v118 + 24;
          sub_216790CCC(v105 + 8, &v180);
          uint64_t v112 = v105[9];
          sub_216790E64((uint64_t)&v180);
        }
        else
        {
          long long v111 = *(_OWORD *)v173;
          *(void *)(v110 + 16) = v174;
          *(_OWORD *)unint64_t v110 = v111;
          v173[1] = 0;
          uint64_t v174 = 0;
          v173[0] = 0;
          uint64_t v112 = v110 + 24;
          v105[9] = v110 + 24;
        }
        v105[9] = v112;
        unint64_t v120 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
        if (v120)
        {
          sub_216779094(&v178, v120);
          free(v120);
        }
        else
        {
          sub_216779094(&v178, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19UnescapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
        }
        LOBYTE(v175) = 0;
        long long v180 = v178;
        uint64_t v181 = v179;
        long long v178 = 0uLL;
        unint64_t v179 = 0;
        LOBYTE(v182) = 0;
        uint64_t v184 = 0;
        uint64_t v185 = 0;
        unint64_t v183 = 0;
        uint64_t v176 = 0;
        uint64_t v177 = 0;
        *((void *)&v175 + 1) = 0;
        unint64_t v121 = sub_216B20DE4(a1, (const void **)&v180, &v180);
        v186[0] = (void **)&v183;
        sub_216782F20(v186);
        if (SHIBYTE(v181) < 0) {
          operator delete((void *)v180);
        }
        v186[0] = (void **)&v175 + 1;
        sub_216782F20(v186);
        if (SHIBYTE(v179) < 0) {
          operator delete((void *)v178);
        }
        if (*((char *)v121 + 55) < 0)
        {
          sub_216778F24(__p, (void *)v121[4], v121[5]);
        }
        else
        {
          *(_OWORD *)long long __p = *((_OWORD *)v121 + 2);
          uint64_t v172 = v121[6];
        }
        unint64_t v123 = v105[9];
        unint64_t v122 = v105[10];
        if (v123 >= v122)
        {
          unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - *v108) >> 3);
          unint64_t v126 = v125 + 1;
          if (v125 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - *v108) >> 3);
          if (2 * v127 > v126) {
            unint64_t v126 = 2 * v127;
          }
          if (v127 >= 0x555555555555555) {
            unint64_t v128 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v128 = v126;
          }
          unint64_t v183 = v105 + 10;
          if (v128) {
            char v129 = (char *)sub_216782ED8((uint64_t)(v105 + 10), v128);
          }
          else {
            char v129 = 0;
          }
          unint64_t v130 = &v129[24 * v125];
          *(void *)&long long v180 = v129;
          *((void *)&v180 + 1) = v130;
          int v182 = &v129[24 * v128];
          long long v131 = *(_OWORD *)__p;
          *((void *)v130 + 2) = v172;
          *(_OWORD *)unint64_t v130 = v131;
          __p[1] = 0;
          uint64_t v172 = 0;
          __p[0] = 0;
          uint64_t v181 = v130 + 24;
          sub_216790CCC(v105 + 8, &v180);
          uint64_t v132 = v105[9];
          sub_216790E64((uint64_t)&v180);
          int v133 = SHIBYTE(v172);
          v105[9] = v132;
          unint64_t v92 = v32 + 8;
          uint64_t v35 = v5 + 8;
          if (v133 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v124 = *(_OWORD *)__p;
          *(void *)(v123 + 16) = v172;
          *(_OWORD *)unint64_t v123 = v124;
          v105[9] = v123 + 24;
          unint64_t v92 = v32 + 8;
          uint64_t v35 = v5 + 8;
        }
        if (SHIBYTE(v174) < 0) {
          operator delete(v173[0]);
        }
      }
      if (*((char *)v105 + 55) < 0)
      {
        sub_216778F24(v167, (void *)v105[4], v105[5]);
      }
      else
      {
        *(_OWORD *)unint64_t v167 = *((_OWORD *)v105 + 2);
        uint64_t v168 = v105[6];
      }
      unint64_t v135 = v32[9];
      unint64_t v134 = v32[10];
      if (v135 >= v134)
      {
        unint64_t v137 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - *v92) >> 3);
        unint64_t v138 = v137 + 1;
        if (v137 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - *v92) >> 3);
        if (2 * v139 > v138) {
          unint64_t v138 = 2 * v139;
        }
        if (v139 >= 0x555555555555555) {
          unint64_t v140 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v140 = v138;
        }
        unint64_t v183 = v32 + 10;
        if (v140) {
          unint64_t v141 = (char *)sub_216782ED8((uint64_t)(v32 + 10), v140);
        }
        else {
          unint64_t v141 = 0;
        }
        unint64_t v142 = &v141[24 * v137];
        *(void *)&long long v180 = v141;
        *((void *)&v180 + 1) = v142;
        int v182 = &v141[24 * v140];
        long long v143 = *(_OWORD *)v167;
        *((void *)v142 + 2) = v168;
        *(_OWORD *)unint64_t v142 = v143;
        v167[1] = 0;
        uint64_t v168 = 0;
        v167[0] = 0;
        uint64_t v181 = v142 + 24;
        sub_216790CCC(v92, &v180);
        uint64_t v144 = v32[9];
        sub_216790E64((uint64_t)&v180);
        int v145 = SHIBYTE(v168);
        v32[9] = v144;
        if (v145 < 0) {
          operator delete(v167[0]);
        }
      }
      else
      {
        long long v136 = *(_OWORD *)v167;
        *(void *)(v135 + 16) = v168;
        *(_OWORD *)unint64_t v135 = v136;
        v32[9] = v135 + 24;
      }
      if (SHIBYTE(v170) < 0) {
        operator delete(__dst[0]);
      }
    }
    if (*((char *)v32 + 55) < 0)
    {
      sub_216778F24(v161, (void *)v32[4], v32[5]);
    }
    else
    {
      *(_OWORD *)unint64_t v161 = *((_OWORD *)v32 + 2);
      uint64_t v162 = v32[6];
    }
    unint64_t v147 = v5[9];
    unint64_t v146 = v5[10];
    if (v147 >= v146)
    {
      unint64_t v149 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - *v35) >> 3);
      unint64_t v150 = v149 + 1;
      if (v149 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - *v35) >> 3);
      if (2 * v151 > v150) {
        unint64_t v150 = 2 * v151;
      }
      if (v151 >= 0x555555555555555) {
        unint64_t v152 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v152 = v150;
      }
      unint64_t v183 = v5 + 10;
      if (v152) {
        unint64_t v153 = (char *)sub_216782ED8((uint64_t)(v5 + 10), v152);
      }
      else {
        unint64_t v153 = 0;
      }
      unint64_t v154 = &v153[24 * v149];
      *(void *)&long long v180 = v153;
      *((void *)&v180 + 1) = v154;
      int v182 = &v153[24 * v152];
      long long v155 = *(_OWORD *)v161;
      *((void *)v154 + 2) = v162;
      *(_OWORD *)unint64_t v154 = v155;
      v161[1] = 0;
      uint64_t v162 = 0;
      v161[0] = 0;
      uint64_t v181 = v154 + 24;
      sub_216790CCC(v35, &v180);
      uint64_t v156 = v5[9];
      sub_216790E64((uint64_t)&v180);
      int v157 = SHIBYTE(v162);
      v5[9] = v156;
      if (v157 < 0) {
        operator delete(v161[0]);
      }
    }
    else
    {
      long long v148 = *(_OWORD *)v161;
      *(void *)(v147 + 16) = v162;
      *(_OWORD *)unint64_t v147 = v148;
      v5[9] = v147 + 24;
    }
    if (SHIBYTE(v164) < 0) {
      operator delete(v163[0]);
    }
    if (SHIBYTE(v166) < 0) {
      operator delete(v165[0]);
    }
  }
  if (*((char *)v5 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v5[4], v5[5]);
  }
  else
  {
    long long v158 = *((_OWORD *)v5 + 2);
    *(void *)(a2 + 16) = v5[6];
    *(_OWORD *)a2 = v158;
  }
}

void sub_216B30F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  sub_216790E64(v58 - 160);
  if (*(char *)(v58 - 161) < 0) {
    operator delete(*(void **)(v58 - 184));
  }
  if (*(char *)(v58 - 193) < 0) {
    operator delete(*(void **)(v58 - 216));
  }
  if (a58 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void sub_216B31200(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc39EEEEEEENS4_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS7_EEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS1_6not_atIJNS0_5ascii3oneIJLc39EEEEEEENS4_IJNS1_3eofEEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS7_EEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)long long __p = *(_OWORD *)v37;
  uint64_t v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  char v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  char v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  long long v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  long long v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B2FC74(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    unint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        int v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        int v18 = 0;
      }
      long long v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)long long v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B31200(v37, a1);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        unint64_t v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        unint64_t v28 = 0;
      }
      uint64_t v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)uint64_t v29 = v30;
      v37[1] = 0;
      char v38 = 0;
      v37[0] = 0;
      uint64_t v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B3157C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_216B3160C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B317C0(a1, 1);
  if (v5)
  {
    sub_216B2FB08(a1, (uint64_t)__p);
    unint64_t v6 = v4[10];
    unint64_t v7 = v4[9];
    if (v7 >= v6)
    {
      uint64_t v9 = v4[8];
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v11;
      }
      v22[4] = v4 + 10;
      if (v13) {
        unint64_t v14 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v13);
      }
      else {
        unint64_t v14 = 0;
      }
      unint64_t v15 = &v14[24 * v10];
      v22[0] = v14;
      v22[1] = v15;
      v22[3] = &v14[24 * v13];
      long long v16 = *(_OWORD *)__p;
      *((void *)v15 + 2) = v21;
      *(_OWORD *)unint64_t v15 = v16;
      __p[1] = 0;
      uint64_t v21 = 0;
      __p[0] = 0;
      v22[2] = v15 + 24;
      sub_216790CCC(v4 + 8, v22);
      uint64_t v17 = v4[9];
      sub_216790E64((uint64_t)v22);
      int v18 = SHIBYTE(v21);
      v4[9] = v17;
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v8 = *(_OWORD *)__p;
      *(void *)(v7 + 16) = v21;
      *(_OWORD *)unint64_t v7 = v8;
      v4[9] = v7 + 24;
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v19 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v19;
  }
}

void sub_216B31794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B317C0(uint64_t **a1, char a2)
{
  sub_216B318C4(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B31894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B318C4(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217471CE8 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217471CE8 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B31964(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B31978(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_118UnquotedStringCharE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_118UnquotedStringCharE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 3;
  *(_OWORD *)long long __p = *(_OWORD *)v37;
  uint64_t v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  char v38 = 0;
  LOBYTE(v41) = 3;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  long long v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  long long v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B32190(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        int v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        int v18 = 0;
      }
      long long v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)long long v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B321F8(a1, (uint64_t)v37);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        unint64_t v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        unint64_t v28 = 0;
      }
      uint64_t v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)uint64_t v29 = v30;
      v37[1] = 0;
      char v38 = 0;
      v37[0] = 0;
      uint64_t v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B31CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_216B31D84(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_118UnquotedStringCharEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_118UnquotedStringCharEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)long long __p = *(_OWORD *)v37;
  uint64_t v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  char v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  long long v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  long long v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B31978(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        int v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        int v18 = 0;
      }
      long long v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)long long v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B31D84(v37, a1);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        unint64_t v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        unint64_t v28 = 0;
      }
      uint64_t v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)uint64_t v29 = v30;
      v37[1] = 0;
      char v38 = 0;
      v37[0] = 0;
      uint64_t v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B32100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B32190@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B32260(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B321F8@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B32418(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B32260(uint64_t **a1, char a2)
{
  sub_216B32364(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  uint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B32334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B32364(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x80000002174720CFLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x80000002174720CFLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B32404(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B32418(uint64_t **a1, char a2)
{
  sub_216B3251C(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  uint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B324EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B3251C(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217472105 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217472105 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B325BC(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B325D0(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_5ascii3oneIJLc44EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_5ascii3oneIJLc44EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)long long __p = *(_OWORD *)v37;
  uint64_t v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  char v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  long long v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  long long v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B32DE8(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        int v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        int v18 = 0;
      }
      long long v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)long long v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B24484(a1, (uint64_t)v37);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        unint64_t v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        unint64_t v28 = 0;
      }
      uint64_t v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)uint64_t v29 = v30;
      v37[1] = 0;
      char v38 = 0;
      v37[0] = 0;
      uint64_t v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B3294C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_216B329DC(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_5ascii3oneIJLc44EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_5ascii3oneIJLc44EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)long long __p = *(_OWORD *)v37;
  uint64_t v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  char v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  long long v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  long long v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B325D0(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        int v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        int v18 = 0;
      }
      long long v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)long long v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B329DC(v37, a1);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        unint64_t v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        unint64_t v28 = 0;
      }
      uint64_t v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)uint64_t v29 = v30;
      v37[1] = 0;
      char v38 = 0;
      v37[0] = 0;
      uint64_t v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B32D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B32DE8@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B32E50(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B32E50(uint64_t **a1, char a2)
{
  sub_216A59010(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  uint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B32F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B32F54(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B3337C(a1, 2);
  if (v5)
  {
    sub_216B20FFC(a1, (uint64_t)v46);
    unint64_t v6 = v4[10];
    char v7 = v4 + 8;
    unint64_t v8 = v4[9];
    if (v8 >= v6)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      unint64_t v52 = v4 + 10;
      if (v14) {
        unint64_t v15 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v14);
      }
      else {
        unint64_t v15 = 0;
      }
      unint64_t v16 = &v15[24 * v11];
      unint64_t v48 = v15;
      unint64_t v49 = v16;
      long long v51 = &v15[24 * v14];
      long long v17 = *(_OWORD *)v46;
      *((void *)v16 + 2) = v47;
      *(_OWORD *)unint64_t v16 = v17;
      v46[1] = 0;
      uint64_t v47 = 0;
      v46[0] = 0;
      long long v50 = v16 + 24;
      sub_216790CCC(v4 + 8, &v48);
      uint64_t v10 = v4[9];
      sub_216790E64((uint64_t)&v48);
    }
    else
    {
      long long v9 = *(_OWORD *)v46;
      *(void *)(v8 + 16) = v47;
      *(_OWORD *)unint64_t v8 = v9;
      v46[1] = 0;
      uint64_t v47 = 0;
      v46[0] = 0;
      uint64_t v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_216B33480(a1, (uint64_t)v44);
    unint64_t v18 = v4[9];
    unint64_t v19 = v4[10];
    if (v18 >= v19)
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v23;
      }
      unint64_t v52 = v4 + 10;
      if (v25) {
        unint64_t v26 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v25);
      }
      else {
        unint64_t v26 = 0;
      }
      unint64_t v27 = &v26[24 * v22];
      unint64_t v48 = v26;
      unint64_t v49 = v27;
      long long v51 = &v26[24 * v25];
      long long v28 = *(_OWORD *)v44;
      *((void *)v27 + 2) = v45;
      *(_OWORD *)unint64_t v27 = v28;
      v44[1] = 0;
      uint64_t v45 = 0;
      v44[0] = 0;
      long long v50 = v27 + 24;
      sub_216790CCC(v4 + 8, &v48);
      uint64_t v21 = v4[9];
      sub_216790E64((uint64_t)&v48);
    }
    else
    {
      long long v20 = *(_OWORD *)v44;
      *(void *)(v18 + 16) = v45;
      *(_OWORD *)unint64_t v18 = v20;
      v44[1] = 0;
      uint64_t v45 = 0;
      v44[0] = 0;
      uint64_t v21 = v18 + 24;
      v4[9] = v18 + 24;
    }
    v4[9] = v21;
    sub_216B20FFC(a1, (uint64_t)__p);
    unint64_t v30 = v4[9];
    unint64_t v29 = v4[10];
    if (v30 >= v29)
    {
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *v7) >> 3);
      unint64_t v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *v7) >> 3);
      if (2 * v34 > v33) {
        unint64_t v33 = 2 * v34;
      }
      if (v34 >= 0x555555555555555) {
        unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v35 = v33;
      }
      unint64_t v52 = v4 + 10;
      if (v35) {
        uint64_t v36 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v35);
      }
      else {
        uint64_t v36 = 0;
      }
      unint64_t v37 = &v36[24 * v32];
      unint64_t v48 = v36;
      unint64_t v49 = v37;
      long long v51 = &v36[24 * v35];
      long long v38 = *(_OWORD *)__p;
      *((void *)v37 + 2) = v43;
      *(_OWORD *)unint64_t v37 = v38;
      __p[1] = 0;
      uint64_t v43 = 0;
      __p[0] = 0;
      long long v50 = v37 + 24;
      sub_216790CCC(v4 + 8, &v48);
      uint64_t v39 = v4[9];
      sub_216790E64((uint64_t)&v48);
      int v40 = SHIBYTE(v43);
      v4[9] = v39;
      if (v40 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v31 = *(_OWORD *)__p;
      *(void *)(v30 + 16) = v43;
      *(_OWORD *)unint64_t v30 = v31;
      v4[9] = v30 + 24;
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(v46[0]);
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v41 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v41;
  }
}

void sub_216B332F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B3337C(uint64_t **a1, char a2)
{
  sub_216B334E8(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B33450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B33480@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B3359C(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

void sub_216B334E8(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217472368 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217472368 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B33588(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B3359C(uint64_t **a1, char a2)
{
  sub_216A53E0C(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B33670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B336A0(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B37F20(a1, 1);
  if (v5)
  {
    sub_216B21400(a1, (uint64_t)v33);
    unint64_t v6 = v4[10];
    char v7 = v4 + 8;
    unint64_t v8 = v4[9];
    if (v8 >= v6)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      uint64_t v39 = v4 + 10;
      if (v14) {
        unint64_t v15 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v14);
      }
      else {
        unint64_t v15 = 0;
      }
      unint64_t v16 = &v15[24 * v11];
      unint64_t v35 = v15;
      uint64_t v36 = v16;
      long long v38 = &v15[24 * v14];
      long long v17 = *(_OWORD *)v33;
      *((void *)v16 + 2) = v34;
      *(_OWORD *)unint64_t v16 = v17;
      v33[1] = 0;
      uint64_t v34 = 0;
      v33[0] = 0;
      unint64_t v37 = v16 + 24;
      sub_216790CCC(v4 + 8, &v35);
      uint64_t v10 = v4[9];
      sub_216790E64((uint64_t)&v35);
    }
    else
    {
      long long v9 = *(_OWORD *)v33;
      *(void *)(v8 + 16) = v34;
      *(_OWORD *)unint64_t v8 = v9;
      v33[1] = 0;
      uint64_t v34 = 0;
      v33[0] = 0;
      uint64_t v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_216B20FFC(a1, (uint64_t)__p);
    unint64_t v19 = v4[9];
    unint64_t v18 = v4[10];
    if (v19 >= v18)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      if (2 * v23 > v22) {
        unint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v22;
      }
      uint64_t v39 = v4 + 10;
      if (v24) {
        unint64_t v25 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v24);
      }
      else {
        unint64_t v25 = 0;
      }
      unint64_t v26 = &v25[24 * v21];
      unint64_t v35 = v25;
      uint64_t v36 = v26;
      long long v38 = &v25[24 * v24];
      long long v27 = *(_OWORD *)__p;
      *((void *)v26 + 2) = v32;
      *(_OWORD *)unint64_t v26 = v27;
      __p[1] = 0;
      uint64_t v32 = 0;
      __p[0] = 0;
      unint64_t v37 = v26 + 24;
      sub_216790CCC(v4 + 8, &v35);
      uint64_t v28 = v4[9];
      sub_216790E64((uint64_t)&v35);
      int v29 = SHIBYTE(v32);
      v4[9] = v28;
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v20 = *(_OWORD *)__p;
      *(void *)(v19 + 16) = v32;
      *(_OWORD *)unint64_t v19 = v20;
      v4[9] = v19 + 24;
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(v33[0]);
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v30 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v30;
  }
}

void sub_216B33948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B339A0@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B380D8(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

void sub_216B33A08(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS6_5blankES9_EEvEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v69, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v69, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgENS0_3padINS0_5ascii3oneIJLc44EEEENS6_5blankES9_EEvEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v66[0]) = 2;
  *(_OWORD *)long long __p = *(_OWORD *)v69;
  unint64_t v72 = v70;
  v69[0] = 0;
  v69[1] = 0;
  long long v70 = 0;
  LOBYTE(v73) = 2;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  unint64_t v74 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  v66[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  v64[0] = &v74;
  sub_216782F20((void ***)v64);
  if (SHIBYTE(v72) < 0) {
    operator delete(__p[0]);
  }
  v64[0] = &v66[1];
  sub_216782F20((void ***)v64);
  if (SHIBYTE(v70) < 0) {
    operator delete(v69[0]);
  }
  if (v8)
  {
    sub_216B341C4(a1, (uint64_t)v64);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      unint64_t v74 = v6 + 10;
      if (v17) {
        unint64_t v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v73 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v64;
      *((void *)v19 + 2) = v65;
      *(_OWORD *)unint64_t v19 = v20;
      v64[1] = 0;
      uint64_t v65 = 0;
      v64[0] = 0;
      unint64_t v72 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v64;
      *(void *)(v11 + 16) = v65;
      *(_OWORD *)unint64_t v11 = v12;
      v64[1] = 0;
      uint64_t v65 = 0;
      v64[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    unint64_t v21 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v21)
    {
      sub_216779094(v69, v21);
      free(v21);
    }
    else
    {
      sub_216779094(v69, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v66[0]) = 1;
    *(_OWORD *)long long __p = *(_OWORD *)v69;
    unint64_t v72 = v70;
    v69[0] = 0;
    v69[1] = 0;
    long long v70 = 0;
    LOBYTE(v73) = 1;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    unint64_t v74 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    v66[1] = 0;
    unint64_t v22 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
    char v24 = v23;
    v77[0] = (void **)&v74;
    sub_216782F20(v77);
    if (SHIBYTE(v72) < 0) {
      operator delete(__p[0]);
    }
    v77[0] = &v66[1];
    sub_216782F20(v77);
    if (SHIBYTE(v70) < 0) {
      operator delete(v69[0]);
    }
    if (v24)
    {
      sub_216B356FC(a1, (uint64_t)v66);
      unint64_t v25 = v22 + 8;
      unint64_t v26 = v22[10];
      unint64_t v27 = v22[9];
      if (v27 >= v26)
      {
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v25) >> 3);
        unint64_t v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v25) >> 3);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v31;
        }
        unint64_t v74 = v22 + 10;
        if (v33) {
          uint64_t v34 = (char *)sub_216782ED8((uint64_t)(v22 + 10), v33);
        }
        else {
          uint64_t v34 = 0;
        }
        unint64_t v35 = &v34[24 * v30];
        __p[0] = v34;
        __p[1] = v35;
        unint64_t v73 = &v34[24 * v33];
        long long v36 = *(_OWORD *)v66;
        *((void *)v35 + 2) = v67;
        *(_OWORD *)unint64_t v35 = v36;
        v66[1] = 0;
        uint64_t v67 = 0;
        v66[0] = 0;
        unint64_t v72 = v35 + 24;
        sub_216790CCC(v22 + 8, __p);
        uint64_t v29 = v22[9];
        sub_216790E64((uint64_t)__p);
      }
      else
      {
        long long v28 = *(_OWORD *)v66;
        *(void *)(v27 + 16) = v67;
        *(_OWORD *)unint64_t v27 = v28;
        v66[1] = 0;
        uint64_t v67 = 0;
        v66[0] = 0;
        uint64_t v29 = v27 + 24;
        v22[9] = v27 + 24;
      }
      v22[9] = v29;
      sub_216B35B08(a1, (uint64_t)v69);
      unint64_t v38 = v22[9];
      unint64_t v37 = v22[10];
      if (v38 >= v37)
      {
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v25) >> 3);
        unint64_t v41 = v40 + 1;
        if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v25) >> 3);
        if (2 * v42 > v41) {
          unint64_t v41 = 2 * v42;
        }
        if (v42 >= 0x555555555555555) {
          unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v43 = v41;
        }
        unint64_t v74 = v22 + 10;
        if (v43) {
          uint64_t v44 = (char *)sub_216782ED8((uint64_t)(v22 + 10), v43);
        }
        else {
          uint64_t v44 = 0;
        }
        uint64_t v45 = &v44[24 * v40];
        __p[0] = v44;
        __p[1] = v45;
        unint64_t v73 = &v44[24 * v43];
        long long v46 = *(_OWORD *)v69;
        *((void *)v45 + 2) = v70;
        *(_OWORD *)uint64_t v45 = v46;
        v69[1] = 0;
        long long v70 = 0;
        v69[0] = 0;
        unint64_t v72 = v45 + 24;
        sub_216790CCC(v22 + 8, __p);
        uint64_t v47 = v22[9];
        sub_216790E64((uint64_t)__p);
        int v48 = SHIBYTE(v70);
        v22[9] = v47;
        if (v48 < 0) {
          operator delete(v69[0]);
        }
      }
      else
      {
        long long v39 = *(_OWORD *)v69;
        *(void *)(v38 + 16) = v70;
        *(_OWORD *)unint64_t v38 = v39;
        v22[9] = v38 + 24;
      }
      if (SHIBYTE(v67) < 0) {
        operator delete(v66[0]);
      }
    }
    if (*((char *)v22 + 55) < 0)
    {
      sub_216778F24(v62, (void *)v22[4], v22[5]);
    }
    else
    {
      *(_OWORD *)unint64_t v62 = *((_OWORD *)v22 + 2);
      uint64_t v63 = v22[6];
    }
    unint64_t v50 = v6[9];
    unint64_t v49 = v6[10];
    if (v50 >= v49)
    {
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *v10) >> 3);
      unint64_t v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *v10) >> 3);
      if (2 * v54 > v53) {
        unint64_t v53 = 2 * v54;
      }
      if (v54 >= 0x555555555555555) {
        unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v55 = v53;
      }
      unint64_t v74 = v6 + 10;
      if (v55) {
        unint64_t v56 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v55);
      }
      else {
        unint64_t v56 = 0;
      }
      unint64_t v57 = &v56[24 * v52];
      __p[0] = v56;
      __p[1] = v57;
      unint64_t v73 = &v56[24 * v55];
      long long v58 = *(_OWORD *)v62;
      *((void *)v57 + 2) = v63;
      *(_OWORD *)unint64_t v57 = v58;
      v62[1] = 0;
      uint64_t v63 = 0;
      v62[0] = 0;
      unint64_t v72 = v57 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v59 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v60 = SHIBYTE(v63);
      v6[9] = v59;
      if (v60 < 0) {
        operator delete(v62[0]);
      }
    }
    else
    {
      long long v51 = *(_OWORD *)v62;
      *(void *)(v50 + 16) = v63;
      *(_OWORD *)unint64_t v50 = v51;
      v6[9] = v50 + 24;
    }
    if (SHIBYTE(v65) < 0) {
      operator delete(v64[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v61 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v61;
  }
}

void sub_216B340AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_216B341C4(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v57, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v57, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v54[0]) = 2;
  *(_OWORD *)long long __p = *(_OWORD *)v57;
  int v60 = v58;
  v57[0] = 0;
  v57[1] = 0;
  long long v58 = 0;
  LOBYTE(v61) = 2;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  unint64_t v62 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  v54[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  v52[0] = &v62;
  sub_216782F20((void ***)v52);
  if (SHIBYTE(v60) < 0) {
    operator delete(__p[0]);
  }
  v52[0] = &v54[1];
  sub_216782F20((void ***)v52);
  if (SHIBYTE(v58) < 0) {
    operator delete(v57[0]);
  }
  if (v8)
  {
    unint64_t v9 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl6not_atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredKWArgPrefixEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v9)
    {
      uint64_t v10 = v9;
      sub_216779094(v57, v9);
      free(v10);
    }
    else
    {
      sub_216779094(v57, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl6not_atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredKWArgPrefixEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v54[0]) = 1;
    *(_OWORD *)long long __p = *(_OWORD *)v57;
    int v60 = v58;
    v57[0] = 0;
    v57[1] = 0;
    long long v58 = 0;
    LOBYTE(v61) = 1;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    unint64_t v62 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    v54[1] = 0;
    unint64_t v11 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
    char v13 = v12;
    uint64_t v65 = (void **)&v62;
    sub_216782F20(&v65);
    if (SHIBYTE(v60) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v65 = &v54[1];
    sub_216782F20(&v65);
    if (SHIBYTE(v58) < 0) {
      operator delete(v57[0]);
    }
    if (v13)
    {
      sub_216B3481C(a1, (uint64_t)v54);
      unint64_t v14 = v11[10];
      unint64_t v15 = v11[9];
      if (v15 >= v14)
      {
        uint64_t v17 = v11[8];
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v17) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v17) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x555555555555555) {
          unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v21 = v19;
        }
        unint64_t v62 = v11 + 10;
        if (v21) {
          unint64_t v22 = (char *)sub_216782ED8((uint64_t)(v11 + 10), v21);
        }
        else {
          unint64_t v22 = 0;
        }
        char v23 = &v22[24 * v18];
        __p[0] = v22;
        __p[1] = v23;
        long long v61 = &v22[24 * v21];
        long long v24 = *(_OWORD *)v54;
        *((void *)v23 + 2) = v55;
        *(_OWORD *)char v23 = v24;
        v54[1] = 0;
        uint64_t v55 = 0;
        v54[0] = 0;
        int v60 = v23 + 24;
        sub_216790CCC(v11 + 8, __p);
        uint64_t v25 = v11[9];
        sub_216790E64((uint64_t)__p);
        int v26 = SHIBYTE(v55);
        v11[9] = v25;
        if (v26 < 0) {
          operator delete(v54[0]);
        }
      }
      else
      {
        long long v16 = *(_OWORD *)v54;
        *(void *)(v15 + 16) = v55;
        *(_OWORD *)unint64_t v15 = v16;
        v11[9] = v15 + 24;
      }
    }
    if (*((char *)v11 + 55) < 0)
    {
      sub_216778F24(v52, (void *)v11[4], v11[5]);
    }
    else
    {
      *(_OWORD *)unint64_t v52 = *((_OWORD *)v11 + 2);
      uint64_t v53 = v11[6];
    }
    unint64_t v27 = v6 + 8;
    unint64_t v28 = v6[10];
    unint64_t v29 = v6[9];
    if (v29 >= v28)
    {
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *v27) >> 3);
      unint64_t v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *v27) >> 3);
      if (2 * v34 > v33) {
        unint64_t v33 = 2 * v34;
      }
      if (v34 >= 0x555555555555555) {
        unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v35 = v33;
      }
      unint64_t v62 = v6 + 10;
      if (v35) {
        long long v36 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v35);
      }
      else {
        long long v36 = 0;
      }
      unint64_t v37 = &v36[24 * v32];
      __p[0] = v36;
      __p[1] = v37;
      long long v61 = &v36[24 * v35];
      long long v38 = *(_OWORD *)v52;
      *((void *)v37 + 2) = v53;
      *(_OWORD *)unint64_t v37 = v38;
      v52[1] = 0;
      uint64_t v53 = 0;
      v52[0] = 0;
      int v60 = v37 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v30 = *(_OWORD *)v52;
      *(void *)(v29 + 16) = v53;
      *(_OWORD *)unint64_t v29 = v30;
      v52[1] = 0;
      uint64_t v53 = 0;
      v52[0] = 0;
      uint64_t v31 = v29 + 24;
      v6[9] = v29 + 24;
    }
    v6[9] = v31;
    sub_216B24484(a1, (uint64_t)v54);
    unint64_t v40 = v6[9];
    unint64_t v39 = v6[10];
    if (v40 >= v39)
    {
      unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v27) >> 3);
      unint64_t v43 = v42 + 1;
      if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *v27) >> 3);
      if (2 * v44 > v43) {
        unint64_t v43 = 2 * v44;
      }
      if (v44 >= 0x555555555555555) {
        unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v45 = v43;
      }
      unint64_t v62 = v6 + 10;
      if (v45) {
        long long v46 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v45);
      }
      else {
        long long v46 = 0;
      }
      uint64_t v47 = &v46[24 * v42];
      __p[0] = v46;
      __p[1] = v47;
      long long v61 = &v46[24 * v45];
      long long v48 = *(_OWORD *)v54;
      *((void *)v47 + 2) = v55;
      *(_OWORD *)uint64_t v47 = v48;
      v54[1] = 0;
      uint64_t v55 = 0;
      v54[0] = 0;
      int v60 = v47 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v49 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v50 = SHIBYTE(v55);
      v6[9] = v49;
      if (v50 < 0) {
        operator delete(v54[0]);
      }
    }
    else
    {
      long long v41 = *(_OWORD *)v54;
      *(void *)(v40 + 16) = v55;
      *(_OWORD *)unint64_t v40 = v41;
      v6[9] = v40 + 24;
    }
    if (SHIBYTE(v53) < 0) {
      operator delete(v52[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v51 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v51;
  }
}

void sub_216B34744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B3481C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredKWArgPrefixE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v68, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v68, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredKWArgPrefixE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v65[0]) = 2;
  *(_OWORD *)long long __p = *(_OWORD *)v68;
  unint64_t v71 = v69;
  v68[0] = 0;
  v68[1] = 0;
  unint64_t v69 = 0;
  LOBYTE(v72) = 2;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  unint64_t v73 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  v65[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  v63[0] = &v73;
  sub_216782F20((void ***)v63);
  if (SHIBYTE(v71) < 0) {
    operator delete(__p[0]);
  }
  v63[0] = &v65[1];
  sub_216782F20((void ***)v63);
  if (SHIBYTE(v69) < 0) {
    operator delete(v68[0]);
  }
  if (v8)
  {
    unint64_t v9 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredKWArgNameE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v9)
    {
      uint64_t v10 = v9;
      sub_216779094(v68, v9);
      free(v10);
    }
    else
    {
      sub_216779094(v68, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredKWArgNameE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v65[0]) = 2;
    *(_OWORD *)long long __p = *(_OWORD *)v68;
    unint64_t v71 = v69;
    v68[0] = 0;
    v68[1] = 0;
    unint64_t v69 = 0;
    LOBYTE(v72) = 2;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    unint64_t v73 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    v65[1] = 0;
    unint64_t v11 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
    char v13 = v12;
    uint64_t v76 = (void **)&v73;
    sub_216782F20(&v76);
    if (SHIBYTE(v71) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v76 = &v65[1];
    sub_216782F20(&v76);
    if (SHIBYTE(v69) < 0) {
      operator delete(v68[0]);
    }
    if (v13)
    {
      sub_216B23BF4(a1, (uint64_t)v65);
      unint64_t v14 = v11[10];
      unint64_t v15 = v11 + 8;
      unint64_t v16 = v11[9];
      if (v16 >= v14)
      {
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *v15) >> 3);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v15) >> 3);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v20;
        }
        unint64_t v73 = v11 + 10;
        if (v22) {
          char v23 = (char *)sub_216782ED8((uint64_t)(v11 + 10), v22);
        }
        else {
          char v23 = 0;
        }
        long long v24 = &v23[24 * v19];
        __p[0] = v23;
        __p[1] = v24;
        unint64_t v72 = &v23[24 * v22];
        long long v25 = *(_OWORD *)v65;
        *((void *)v24 + 2) = v66;
        *(_OWORD *)long long v24 = v25;
        v65[1] = 0;
        uint64_t v66 = 0;
        v65[0] = 0;
        unint64_t v71 = v24 + 24;
        sub_216790CCC(v11 + 8, __p);
        uint64_t v18 = v11[9];
        sub_216790E64((uint64_t)__p);
      }
      else
      {
        long long v17 = *(_OWORD *)v65;
        *(void *)(v16 + 16) = v66;
        *(_OWORD *)unint64_t v16 = v17;
        v65[1] = 0;
        uint64_t v66 = 0;
        v65[0] = 0;
        uint64_t v18 = v16 + 24;
        v11[9] = v16 + 24;
      }
      v11[9] = v18;
      sub_216B23C5C(a1, (uint64_t)v68);
      unint64_t v27 = v11[9];
      unint64_t v26 = v11[10];
      if (v27 >= v26)
      {
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v15) >> 3);
        unint64_t v30 = v29 + 1;
        if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v15) >> 3);
        if (2 * v31 > v30) {
          unint64_t v30 = 2 * v31;
        }
        if (v31 >= 0x555555555555555) {
          unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v32 = v30;
        }
        unint64_t v73 = v11 + 10;
        if (v32) {
          unint64_t v33 = (char *)sub_216782ED8((uint64_t)(v11 + 10), v32);
        }
        else {
          unint64_t v33 = 0;
        }
        unint64_t v34 = &v33[24 * v29];
        __p[0] = v33;
        __p[1] = v34;
        unint64_t v72 = &v33[24 * v32];
        long long v35 = *(_OWORD *)v68;
        *((void *)v34 + 2) = v69;
        *(_OWORD *)unint64_t v34 = v35;
        v68[1] = 0;
        unint64_t v69 = 0;
        v68[0] = 0;
        unint64_t v71 = v34 + 24;
        sub_216790CCC(v11 + 8, __p);
        uint64_t v36 = v11[9];
        sub_216790E64((uint64_t)__p);
        int v37 = SHIBYTE(v69);
        v11[9] = v36;
        if (v37 < 0) {
          operator delete(v68[0]);
        }
      }
      else
      {
        long long v28 = *(_OWORD *)v68;
        *(void *)(v27 + 16) = v69;
        *(_OWORD *)unint64_t v27 = v28;
        v11[9] = v27 + 24;
      }
      if (SHIBYTE(v66) < 0) {
        operator delete(v65[0]);
      }
    }
    if (*((char *)v11 + 55) < 0)
    {
      sub_216778F24(v63, (void *)v11[4], v11[5]);
    }
    else
    {
      *(_OWORD *)uint64_t v63 = *((_OWORD *)v11 + 2);
      uint64_t v64 = v11[6];
    }
    long long v38 = v6 + 8;
    unint64_t v39 = v6[10];
    unint64_t v40 = v6[9];
    if (v40 >= v39)
    {
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *v38) >> 3);
      unint64_t v44 = v43 + 1;
      if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *v38) >> 3);
      if (2 * v45 > v44) {
        unint64_t v44 = 2 * v45;
      }
      if (v45 >= 0x555555555555555) {
        unint64_t v46 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v46 = v44;
      }
      unint64_t v73 = v6 + 10;
      if (v46) {
        uint64_t v47 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v46);
      }
      else {
        uint64_t v47 = 0;
      }
      long long v48 = &v47[24 * v43];
      __p[0] = v47;
      __p[1] = v48;
      unint64_t v72 = &v47[24 * v46];
      long long v49 = *(_OWORD *)v63;
      *((void *)v48 + 2) = v64;
      *(_OWORD *)long long v48 = v49;
      v63[1] = 0;
      uint64_t v64 = 0;
      v63[0] = 0;
      unint64_t v71 = v48 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v42 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v41 = *(_OWORD *)v63;
      *(void *)(v40 + 16) = v64;
      *(_OWORD *)unint64_t v40 = v41;
      v63[1] = 0;
      uint64_t v64 = 0;
      v63[0] = 0;
      uint64_t v42 = v40 + 24;
      v6[9] = v40 + 24;
    }
    v6[9] = v42;
    sub_216B34FB0(a1, (uint64_t)v65);
    unint64_t v51 = v6[9];
    unint64_t v50 = v6[10];
    if (v51 >= v50)
    {
      unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *v38) >> 3);
      unint64_t v54 = v53 + 1;
      if (v53 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *v38) >> 3);
      if (2 * v55 > v54) {
        unint64_t v54 = 2 * v55;
      }
      if (v55 >= 0x555555555555555) {
        unint64_t v56 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v56 = v54;
      }
      unint64_t v73 = v6 + 10;
      if (v56) {
        unint64_t v57 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v56);
      }
      else {
        unint64_t v57 = 0;
      }
      long long v58 = &v57[24 * v53];
      __p[0] = v57;
      __p[1] = v58;
      unint64_t v72 = &v57[24 * v56];
      long long v59 = *(_OWORD *)v65;
      *((void *)v58 + 2) = v66;
      *(_OWORD *)long long v58 = v59;
      v65[1] = 0;
      uint64_t v66 = 0;
      v65[0] = 0;
      unint64_t v71 = v58 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v60 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v61 = SHIBYTE(v66);
      v6[9] = v60;
      if (v61 < 0) {
        operator delete(v65[0]);
      }
    }
    else
    {
      long long v52 = *(_OWORD *)v65;
      *(void *)(v51 + 16) = v66;
      *(_OWORD *)unint64_t v51 = v52;
      v6[9] = v51 + 24;
    }
    if (SHIBYTE(v64) < 0) {
      operator delete(v63[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v62 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v62;
  }
}

void sub_216B34EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void sub_216B34FB0(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B353D8(a1, 2);
  if (v5)
  {
    sub_216B20FFC(a1, (uint64_t)v46);
    unint64_t v6 = v4[10];
    char v7 = v4 + 8;
    unint64_t v8 = v4[9];
    if (v8 >= v6)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      long long v52 = v4 + 10;
      if (v14) {
        unint64_t v15 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v14);
      }
      else {
        unint64_t v15 = 0;
      }
      unint64_t v16 = &v15[24 * v11];
      long long v48 = v15;
      long long v49 = v16;
      unint64_t v51 = &v15[24 * v14];
      long long v17 = *(_OWORD *)v46;
      *((void *)v16 + 2) = v47;
      *(_OWORD *)unint64_t v16 = v17;
      v46[1] = 0;
      uint64_t v47 = 0;
      v46[0] = 0;
      unint64_t v50 = v16 + 24;
      sub_216790CCC(v4 + 8, &v48);
      uint64_t v10 = v4[9];
      sub_216790E64((uint64_t)&v48);
    }
    else
    {
      long long v9 = *(_OWORD *)v46;
      *(void *)(v8 + 16) = v47;
      *(_OWORD *)unint64_t v8 = v9;
      v46[1] = 0;
      uint64_t v47 = 0;
      v46[0] = 0;
      uint64_t v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_216B354DC(a1, (uint64_t)v44);
    unint64_t v18 = v4[9];
    unint64_t v19 = v4[10];
    if (v18 >= v19)
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v23;
      }
      long long v52 = v4 + 10;
      if (v25) {
        unint64_t v26 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v25);
      }
      else {
        unint64_t v26 = 0;
      }
      unint64_t v27 = &v26[24 * v22];
      long long v48 = v26;
      long long v49 = v27;
      unint64_t v51 = &v26[24 * v25];
      long long v28 = *(_OWORD *)v44;
      *((void *)v27 + 2) = v45;
      *(_OWORD *)unint64_t v27 = v28;
      v44[1] = 0;
      uint64_t v45 = 0;
      v44[0] = 0;
      unint64_t v50 = v27 + 24;
      sub_216790CCC(v4 + 8, &v48);
      uint64_t v21 = v4[9];
      sub_216790E64((uint64_t)&v48);
    }
    else
    {
      long long v20 = *(_OWORD *)v44;
      *(void *)(v18 + 16) = v45;
      *(_OWORD *)unint64_t v18 = v20;
      v44[1] = 0;
      uint64_t v45 = 0;
      v44[0] = 0;
      uint64_t v21 = v18 + 24;
      v4[9] = v18 + 24;
    }
    v4[9] = v21;
    sub_216B20FFC(a1, (uint64_t)__p);
    unint64_t v30 = v4[9];
    unint64_t v29 = v4[10];
    if (v30 >= v29)
    {
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *v7) >> 3);
      unint64_t v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *v7) >> 3);
      if (2 * v34 > v33) {
        unint64_t v33 = 2 * v34;
      }
      if (v34 >= 0x555555555555555) {
        unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v35 = v33;
      }
      long long v52 = v4 + 10;
      if (v35) {
        uint64_t v36 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v35);
      }
      else {
        uint64_t v36 = 0;
      }
      int v37 = &v36[24 * v32];
      long long v48 = v36;
      long long v49 = v37;
      unint64_t v51 = &v36[24 * v35];
      long long v38 = *(_OWORD *)__p;
      *((void *)v37 + 2) = v43;
      *(_OWORD *)int v37 = v38;
      __p[1] = 0;
      uint64_t v43 = 0;
      __p[0] = 0;
      unint64_t v50 = v37 + 24;
      sub_216790CCC(v4 + 8, &v48);
      uint64_t v39 = v4[9];
      sub_216790E64((uint64_t)&v48);
      int v40 = SHIBYTE(v43);
      v4[9] = v39;
      if (v40 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v31 = *(_OWORD *)__p;
      *(void *)(v30 + 16) = v43;
      *(_OWORD *)unint64_t v30 = v31;
      v4[9] = v30 + 24;
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(v46[0]);
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v41 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v41;
  }
}

void sub_216B35354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B353D8(uint64_t **a1, char a2)
{
  sub_2169C60F4(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B354AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B354DC@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B35544(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B35544(uint64_t **a1, char a2)
{
  sub_216B35648(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B35618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B35648(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217472766 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217472766 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B356E8(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B356FC(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)long long __p = *(_OWORD *)v37;
  int v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  long long v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  uint64_t v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B35F14(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        unint64_t v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      long long v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)unint64_t v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      int v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B341C4(a1, (uint64_t)v37);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        long long v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        long long v28 = 0;
      }
      unint64_t v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      long long v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)unint64_t v29 = v30;
      v37[1] = 0;
      long long v38 = 0;
      v37[0] = 0;
      int v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B35A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_216B35B08(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS5_5blankES8_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS5_5blankES8_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115PredParenPosArgEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)long long __p = *(_OWORD *)v37;
  int v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  long long v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  uint64_t v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B356FC(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        unint64_t v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      long long v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)unint64_t v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      int v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B35B08(v37, a1);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        long long v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        long long v28 = 0;
      }
      unint64_t v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      long long v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)unint64_t v29 = v30;
      v37[1] = 0;
      long long v38 = 0;
      v37[0] = 0;
      int v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B35E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_216B35F14(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = sub_216B3633C(a1, 2);
  if (v5)
  {
    sub_216B20FFC(a1, (uint64_t)v46);
    unint64_t v6 = v4[10];
    char v7 = v4 + 8;
    unint64_t v8 = v4[9];
    if (v8 >= v6)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v7) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *v7) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      long long v52 = v4 + 10;
      if (v14) {
        unint64_t v15 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v14);
      }
      else {
        unint64_t v15 = 0;
      }
      unint64_t v16 = &v15[24 * v11];
      long long v48 = v15;
      long long v49 = v16;
      unint64_t v51 = &v15[24 * v14];
      long long v17 = *(_OWORD *)v46;
      *((void *)v16 + 2) = v47;
      *(_OWORD *)unint64_t v16 = v17;
      v46[1] = 0;
      uint64_t v47 = 0;
      v46[0] = 0;
      unint64_t v50 = v16 + 24;
      sub_216790CCC(v4 + 8, &v48);
      uint64_t v10 = v4[9];
      sub_216790E64((uint64_t)&v48);
    }
    else
    {
      long long v9 = *(_OWORD *)v46;
      *(void *)(v8 + 16) = v47;
      *(_OWORD *)unint64_t v8 = v9;
      v46[1] = 0;
      uint64_t v47 = 0;
      v46[0] = 0;
      uint64_t v10 = v8 + 24;
      v4[9] = v8 + 24;
    }
    v4[9] = v10;
    sub_216B32DE8(a1, (uint64_t)v44);
    unint64_t v18 = v4[9];
    unint64_t v19 = v4[10];
    if (v18 >= v19)
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *v7) >> 3);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v7) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v23;
      }
      long long v52 = v4 + 10;
      if (v25) {
        unint64_t v26 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v25);
      }
      else {
        unint64_t v26 = 0;
      }
      unint64_t v27 = &v26[24 * v22];
      long long v48 = v26;
      long long v49 = v27;
      unint64_t v51 = &v26[24 * v25];
      long long v28 = *(_OWORD *)v44;
      *((void *)v27 + 2) = v45;
      *(_OWORD *)unint64_t v27 = v28;
      v44[1] = 0;
      uint64_t v45 = 0;
      v44[0] = 0;
      unint64_t v50 = v27 + 24;
      sub_216790CCC(v4 + 8, &v48);
      uint64_t v21 = v4[9];
      sub_216790E64((uint64_t)&v48);
    }
    else
    {
      long long v20 = *(_OWORD *)v44;
      *(void *)(v18 + 16) = v45;
      *(_OWORD *)unint64_t v18 = v20;
      v44[1] = 0;
      uint64_t v45 = 0;
      v44[0] = 0;
      uint64_t v21 = v18 + 24;
      v4[9] = v18 + 24;
    }
    v4[9] = v21;
    sub_216B20FFC(a1, (uint64_t)__p);
    unint64_t v30 = v4[9];
    unint64_t v29 = v4[10];
    if (v30 >= v29)
    {
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *v7) >> 3);
      unint64_t v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *v7) >> 3);
      if (2 * v34 > v33) {
        unint64_t v33 = 2 * v34;
      }
      if (v34 >= 0x555555555555555) {
        unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v35 = v33;
      }
      long long v52 = v4 + 10;
      if (v35) {
        uint64_t v36 = (char *)sub_216782ED8((uint64_t)(v4 + 10), v35);
      }
      else {
        uint64_t v36 = 0;
      }
      int v37 = &v36[24 * v32];
      long long v48 = v36;
      long long v49 = v37;
      unint64_t v51 = &v36[24 * v35];
      long long v38 = *(_OWORD *)__p;
      *((void *)v37 + 2) = v43;
      *(_OWORD *)int v37 = v38;
      __p[1] = 0;
      uint64_t v43 = 0;
      __p[0] = 0;
      unint64_t v50 = v37 + 24;
      sub_216790CCC(v4 + 8, &v48);
      uint64_t v39 = v4[9];
      sub_216790E64((uint64_t)&v48);
      int v40 = SHIBYTE(v43);
      v4[9] = v39;
      if (v40 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v31 = *(_OWORD *)__p;
      *(void *)(v30 + 16) = v43;
      *(_OWORD *)unint64_t v30 = v31;
      v4[9] = v30 + 24;
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(v46[0]);
    }
  }
  if (*((char *)v4 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v4[4], v4[5]);
  }
  else
  {
    long long v41 = *((_OWORD *)v4 + 2);
    *(void *)(a2 + 16) = v4[6];
    *(_OWORD *)a2 = v41;
  }
}

void sub_216B362B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B3633C(uint64_t **a1, char a2)
{
  sub_216B36440(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  unint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B36410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B36440(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x800000021747298FLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x800000021747298FLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B364E0(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B364F4(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgENS0_3padINS0_5ascii3oneIJLc44EEEENS6_5blankES9_EEvEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v69, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v69, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgENS0_3padINS0_5ascii3oneIJLc44EEEENS6_5blankES9_EEvEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v66[0]) = 2;
  *(_OWORD *)long long __p = *(_OWORD *)v69;
  unint64_t v72 = v70;
  v69[0] = 0;
  v69[1] = 0;
  long long v70 = 0;
  LOBYTE(v73) = 2;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v74 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  v66[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  v64[0] = &v74;
  sub_216782F20((void ***)v64);
  if (SHIBYTE(v72) < 0) {
    operator delete(__p[0]);
  }
  v64[0] = &v66[1];
  sub_216782F20((void ***)v64);
  if (SHIBYTE(v70) < 0) {
    operator delete(v69[0]);
  }
  if (v8)
  {
    sub_216B36CB0(a1, (uint64_t)v64);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      uint64_t v74 = v6 + 10;
      if (v17) {
        unint64_t v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v73 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v64;
      *((void *)v19 + 2) = v65;
      *(_OWORD *)unint64_t v19 = v20;
      v64[1] = 0;
      uint64_t v65 = 0;
      v64[0] = 0;
      unint64_t v72 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v64;
      *(void *)(v11 + 16) = v65;
      *(_OWORD *)unint64_t v11 = v12;
      v64[1] = 0;
      uint64_t v65 = 0;
      v64[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    uint64_t v21 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v21)
    {
      sub_216779094(v69, v21);
      free(v21);
    }
    else
    {
      sub_216779094(v69, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v66[0]) = 1;
    *(_OWORD *)long long __p = *(_OWORD *)v69;
    unint64_t v72 = v70;
    v69[0] = 0;
    v69[1] = 0;
    long long v70 = 0;
    LOBYTE(v73) = 1;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v74 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    v66[1] = 0;
    unint64_t v22 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
    char v24 = v23;
    v77[0] = (void **)&v74;
    sub_216782F20(v77);
    if (SHIBYTE(v72) < 0) {
      operator delete(__p[0]);
    }
    v77[0] = &v66[1];
    sub_216782F20(v77);
    if (SHIBYTE(v70) < 0) {
      operator delete(v69[0]);
    }
    if (v24)
    {
      sub_216B37708(a1, (uint64_t)v66);
      unint64_t v25 = v22 + 8;
      unint64_t v26 = v22[10];
      unint64_t v27 = v22[9];
      if (v27 >= v26)
      {
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v25) >> 3);
        unint64_t v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v25) >> 3);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v31;
        }
        uint64_t v74 = v22 + 10;
        if (v33) {
          unint64_t v34 = (char *)sub_216782ED8((uint64_t)(v22 + 10), v33);
        }
        else {
          unint64_t v34 = 0;
        }
        unint64_t v35 = &v34[24 * v30];
        __p[0] = v34;
        __p[1] = v35;
        unint64_t v73 = &v34[24 * v33];
        long long v36 = *(_OWORD *)v66;
        *((void *)v35 + 2) = v67;
        *(_OWORD *)unint64_t v35 = v36;
        v66[1] = 0;
        uint64_t v67 = 0;
        v66[0] = 0;
        unint64_t v72 = v35 + 24;
        sub_216790CCC(v22 + 8, __p);
        uint64_t v29 = v22[9];
        sub_216790E64((uint64_t)__p);
      }
      else
      {
        long long v28 = *(_OWORD *)v66;
        *(void *)(v27 + 16) = v67;
        *(_OWORD *)unint64_t v27 = v28;
        v66[1] = 0;
        uint64_t v67 = 0;
        v66[0] = 0;
        uint64_t v29 = v27 + 24;
        v22[9] = v27 + 24;
      }
      v22[9] = v29;
      sub_216B37B14(a1, (uint64_t)v69);
      unint64_t v38 = v22[9];
      unint64_t v37 = v22[10];
      if (v38 >= v37)
      {
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v25) >> 3);
        unint64_t v41 = v40 + 1;
        if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v25) >> 3);
        if (2 * v42 > v41) {
          unint64_t v41 = 2 * v42;
        }
        if (v42 >= 0x555555555555555) {
          unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v43 = v41;
        }
        uint64_t v74 = v22 + 10;
        if (v43) {
          unint64_t v44 = (char *)sub_216782ED8((uint64_t)(v22 + 10), v43);
        }
        else {
          unint64_t v44 = 0;
        }
        uint64_t v45 = &v44[24 * v40];
        __p[0] = v44;
        __p[1] = v45;
        unint64_t v73 = &v44[24 * v43];
        long long v46 = *(_OWORD *)v69;
        *((void *)v45 + 2) = v70;
        *(_OWORD *)uint64_t v45 = v46;
        v69[1] = 0;
        long long v70 = 0;
        v69[0] = 0;
        unint64_t v72 = v45 + 24;
        sub_216790CCC(v22 + 8, __p);
        uint64_t v47 = v22[9];
        sub_216790E64((uint64_t)__p);
        int v48 = SHIBYTE(v70);
        v22[9] = v47;
        if (v48 < 0) {
          operator delete(v69[0]);
        }
      }
      else
      {
        long long v39 = *(_OWORD *)v69;
        *(void *)(v38 + 16) = v70;
        *(_OWORD *)unint64_t v38 = v39;
        v22[9] = v38 + 24;
      }
      if (SHIBYTE(v67) < 0) {
        operator delete(v66[0]);
      }
    }
    if (*((char *)v22 + 55) < 0)
    {
      sub_216778F24(v62, (void *)v22[4], v22[5]);
    }
    else
    {
      *(_OWORD *)long long v62 = *((_OWORD *)v22 + 2);
      uint64_t v63 = v22[6];
    }
    unint64_t v50 = v6[9];
    unint64_t v49 = v6[10];
    if (v50 >= v49)
    {
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *v10) >> 3);
      unint64_t v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *v10) >> 3);
      if (2 * v54 > v53) {
        unint64_t v53 = 2 * v54;
      }
      if (v54 >= 0x555555555555555) {
        unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v55 = v53;
      }
      uint64_t v74 = v6 + 10;
      if (v55) {
        unint64_t v56 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v55);
      }
      else {
        unint64_t v56 = 0;
      }
      unint64_t v57 = &v56[24 * v52];
      __p[0] = v56;
      __p[1] = v57;
      unint64_t v73 = &v56[24 * v55];
      long long v58 = *(_OWORD *)v62;
      *((void *)v57 + 2) = v63;
      *(_OWORD *)unint64_t v57 = v58;
      v62[1] = 0;
      uint64_t v63 = 0;
      v62[0] = 0;
      unint64_t v72 = v57 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v59 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v60 = SHIBYTE(v63);
      v6[9] = v59;
      if (v60 < 0) {
        operator delete(v62[0]);
      }
    }
    else
    {
      long long v51 = *(_OWORD *)v62;
      *(void *)(v50 + 16) = v63;
      *(_OWORD *)unint64_t v50 = v51;
      v6[9] = v50 + 24;
    }
    if (SHIBYTE(v65) < 0) {
      operator delete(v64[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v61 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v61;
  }
}

void sub_216B36B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_216B36CB0(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(&v95, v4);
    free(v5);
  }
  else
  {
    sub_216779094(&v95, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v92[0]) = 2;
  *(_OWORD *)long long __p = v95;
  unint64_t v98 = v96;
  long long v95 = 0uLL;
  uint64_t v96 = 0;
  LOBYTE(v99) = 2;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  unint64_t v100 = 0;
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  v92[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  v90[0] = &v100;
  sub_216782F20((void ***)v90);
  if (SHIBYTE(v98) < 0) {
    operator delete(__p[0]);
  }
  v90[0] = &v92[1];
  sub_216782F20((void ***)v90);
  if (SHIBYTE(v96) < 0) {
    operator delete((void *)v95);
  }
  if (v8)
  {
    sub_216B3481C(a1, (uint64_t)v86);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      unint64_t v100 = v6 + 10;
      if (v17) {
        unint64_t v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v99 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v86;
      *((void *)v19 + 2) = v87;
      *(_OWORD *)unint64_t v19 = v20;
      v86[1] = 0;
      uint64_t v87 = 0;
      v86[0] = 0;
      unint64_t v98 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v86;
      *(void *)(v11 + 16) = v87;
      *(_OWORD *)unint64_t v11 = v12;
      v86[1] = 0;
      uint64_t v87 = 0;
      v86[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    uint64_t v21 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v21)
    {
      sub_216779094(&v95, v21);
      free(v21);
    }
    else
    {
      sub_216779094(&v95, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4mustIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110PredArgValEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v92[0]) = 3;
    *(_OWORD *)long long __p = v95;
    unint64_t v98 = v96;
    long long v95 = 0uLL;
    uint64_t v96 = 0;
    LOBYTE(v99) = 3;
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    unint64_t v100 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    v92[1] = 0;
    unint64_t v22 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
    char v24 = v23;
    v90[0] = &v100;
    sub_216782F20((void ***)v90);
    if (SHIBYTE(v98) < 0) {
      operator delete(__p[0]);
    }
    v90[0] = &v92[1];
    sub_216782F20((void ***)v90);
    if (SHIBYTE(v96) < 0) {
      operator delete((void *)v95);
    }
    if (v24)
    {
      sub_216B24A9C(a1, (uint64_t)v92);
      unint64_t v25 = v22 + 8;
      unint64_t v26 = v22[10];
      unint64_t v27 = v22[9];
      if (v27 >= v26)
      {
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *v25) >> 3);
        unint64_t v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v25) >> 3);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v31;
        }
        unint64_t v100 = v22 + 10;
        if (v33) {
          unint64_t v34 = (char *)sub_216782ED8((uint64_t)(v22 + 10), v33);
        }
        else {
          unint64_t v34 = 0;
        }
        unint64_t v35 = &v34[24 * v30];
        __p[0] = v34;
        __p[1] = v35;
        unint64_t v99 = &v34[24 * v33];
        long long v36 = *(_OWORD *)v92;
        *((void *)v35 + 2) = v93;
        *(_OWORD *)unint64_t v35 = v36;
        v92[1] = 0;
        uint64_t v93 = 0;
        v92[0] = 0;
        unint64_t v98 = v35 + 24;
        sub_216790CCC(v22 + 8, __p);
        uint64_t v29 = v22[9];
        sub_216790E64((uint64_t)__p);
      }
      else
      {
        long long v28 = *(_OWORD *)v92;
        *(void *)(v27 + 16) = v93;
        *(_OWORD *)unint64_t v27 = v28;
        v92[1] = 0;
        uint64_t v93 = 0;
        v92[0] = 0;
        uint64_t v29 = v27 + 24;
        v22[9] = v27 + 24;
      }
      v22[9] = v29;
      sub_216B26A64(a1, (uint64_t)&v95);
      unint64_t v37 = v22[9];
      unint64_t v38 = v22[10];
      if (v37 >= v38)
      {
        unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *v25) >> 3);
        unint64_t v42 = v41 + 1;
        if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *v25) >> 3);
        if (2 * v43 > v42) {
          unint64_t v42 = 2 * v43;
        }
        if (v43 >= 0x555555555555555) {
          unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v44 = v42;
        }
        unint64_t v100 = v22 + 10;
        if (v44) {
          uint64_t v45 = (char *)sub_216782ED8((uint64_t)(v22 + 10), v44);
        }
        else {
          uint64_t v45 = 0;
        }
        long long v46 = &v45[24 * v41];
        __p[0] = v45;
        __p[1] = v46;
        unint64_t v99 = &v45[24 * v44];
        long long v47 = v95;
        *((void *)v46 + 2) = v96;
        *(_OWORD *)long long v46 = v47;
        uint64_t v96 = 0;
        long long v95 = 0uLL;
        unint64_t v98 = v46 + 24;
        sub_216790CCC(v22 + 8, __p);
        uint64_t v40 = v22[9];
        sub_216790E64((uint64_t)__p);
      }
      else
      {
        long long v39 = v95;
        *(void *)(v37 + 16) = v96;
        *(_OWORD *)unint64_t v37 = v39;
        uint64_t v96 = 0;
        long long v95 = 0uLL;
        uint64_t v40 = v37 + 24;
        v22[9] = v37 + 24;
      }
      v22[9] = v40;
      sub_216B26E70(a1, (uint64_t)v90);
      unint64_t v48 = v22[9];
      unint64_t v49 = v22[10];
      if (v48 >= v49)
      {
        unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *v25) >> 3);
        unint64_t v53 = v52 + 1;
        if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *v25) >> 3);
        if (2 * v54 > v53) {
          unint64_t v53 = 2 * v54;
        }
        if (v54 >= 0x555555555555555) {
          unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v55 = v53;
        }
        unint64_t v100 = v22 + 10;
        if (v55) {
          unint64_t v56 = (char *)sub_216782ED8((uint64_t)(v22 + 10), v55);
        }
        else {
          unint64_t v56 = 0;
        }
        unint64_t v57 = &v56[24 * v52];
        __p[0] = v56;
        __p[1] = v57;
        unint64_t v99 = &v56[24 * v55];
        long long v58 = *(_OWORD *)v90;
        *((void *)v57 + 2) = v91;
        *(_OWORD *)unint64_t v57 = v58;
        v90[1] = 0;
        uint64_t v91 = 0;
        v90[0] = 0;
        unint64_t v98 = v57 + 24;
        sub_216790CCC(v22 + 8, __p);
        uint64_t v51 = v22[9];
        sub_216790E64((uint64_t)__p);
      }
      else
      {
        long long v50 = *(_OWORD *)v90;
        *(void *)(v48 + 16) = v91;
        *(_OWORD *)unint64_t v48 = v50;
        v90[1] = 0;
        uint64_t v91 = 0;
        v90[0] = 0;
        uint64_t v51 = v48 + 24;
        v22[9] = v48 + 24;
      }
      v22[9] = v51;
      sub_216B279C4(a1, (uint64_t)v88);
      unint64_t v60 = v22[9];
      unint64_t v59 = v22[10];
      if (v60 >= v59)
      {
        unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v25) >> 3);
        unint64_t v63 = v62 + 1;
        if (v62 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59 - *v25) >> 3);
        if (2 * v64 > v63) {
          unint64_t v63 = 2 * v64;
        }
        if (v64 >= 0x555555555555555) {
          unint64_t v65 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v65 = v63;
        }
        unint64_t v100 = v22 + 10;
        if (v65) {
          uint64_t v66 = (char *)sub_216782ED8((uint64_t)(v22 + 10), v65);
        }
        else {
          uint64_t v66 = 0;
        }
        uint64_t v67 = &v66[24 * v62];
        __p[0] = v66;
        __p[1] = v67;
        unint64_t v99 = &v66[24 * v65];
        long long v68 = *(_OWORD *)v88;
        *((void *)v67 + 2) = v89;
        *(_OWORD *)uint64_t v67 = v68;
        v88[1] = 0;
        uint64_t v89 = 0;
        v88[0] = 0;
        unint64_t v98 = v67 + 24;
        sub_216790CCC(v22 + 8, __p);
        uint64_t v69 = v22[9];
        sub_216790E64((uint64_t)__p);
        int v70 = SHIBYTE(v89);
        v22[9] = v69;
        if (v70 < 0) {
          operator delete(v88[0]);
        }
      }
      else
      {
        long long v61 = *(_OWORD *)v88;
        *(void *)(v60 + 16) = v89;
        *(_OWORD *)unint64_t v60 = v61;
        v22[9] = v60 + 24;
      }
      if (SHIBYTE(v91) < 0) {
        operator delete(v90[0]);
      }
      if (SHIBYTE(v96) < 0) {
        operator delete((void *)v95);
      }
      if (SHIBYTE(v93) < 0) {
        operator delete(v92[0]);
      }
    }
    if (*((char *)v22 + 55) < 0)
    {
      sub_216778F24(v84, (void *)v22[4], v22[5]);
    }
    else
    {
      *(_OWORD *)unint64_t v84 = *((_OWORD *)v22 + 2);
      uint64_t v85 = v22[6];
    }
    unint64_t v72 = v6[9];
    unint64_t v71 = v6[10];
    if (v72 >= v71)
    {
      unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - *v10) >> 3);
      unint64_t v75 = v74 + 1;
      if (v74 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - *v10) >> 3);
      if (2 * v76 > v75) {
        unint64_t v75 = 2 * v76;
      }
      if (v76 >= 0x555555555555555) {
        unint64_t v77 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v77 = v75;
      }
      unint64_t v100 = v6 + 10;
      if (v77) {
        uint64_t v78 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v77);
      }
      else {
        uint64_t v78 = 0;
      }
      int v79 = &v78[24 * v74];
      __p[0] = v78;
      __p[1] = v79;
      unint64_t v99 = &v78[24 * v77];
      long long v80 = *(_OWORD *)v84;
      *((void *)v79 + 2) = v85;
      *(_OWORD *)int v79 = v80;
      v84[1] = 0;
      uint64_t v85 = 0;
      v84[0] = 0;
      unint64_t v98 = v79 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v81 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v82 = SHIBYTE(v85);
      v6[9] = v81;
      if (v82 < 0) {
        operator delete(v84[0]);
      }
    }
    else
    {
      long long v73 = *(_OWORD *)v84;
      *(void *)(v72 + 16) = v85;
      *(_OWORD *)unint64_t v72 = v73;
      v6[9] = v72 + 24;
    }
    if (SHIBYTE(v87) < 0) {
      operator delete(v86[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v83 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v83;
  }
}

void sub_216B37598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_216B37708(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS4_5blankES7_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 2;
  *(_OWORD *)long long __p = *(_OWORD *)v37;
  uint64_t v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  unint64_t v38 = 0;
  LOBYTE(v41) = 2;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  unint64_t v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B35F14(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        unint64_t v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)unint64_t v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B36CB0(a1, (uint64_t)v37);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        long long v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        long long v28 = 0;
      }
      uint64_t v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)uint64_t v29 = v30;
      v37[1] = 0;
      unint64_t v38 = 0;
      v37[0] = 0;
      uint64_t v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B37A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_216B37B14(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS5_5blankES8_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_3padINS0_5ascii3oneIJLc44EEEENS5_5blankES8_EEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19PredKWArgEEEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)long long __p = *(_OWORD *)v37;
  uint64_t v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  unint64_t v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  unint64_t v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B37708(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        unint64_t v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      unint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)unint64_t v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B37B14(v37, a1);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        long long v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        long long v28 = 0;
      }
      uint64_t v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      unint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)uint64_t v29 = v30;
      v37[1] = 0;
      unint64_t v38 = 0;
      v37[0] = 0;
      uint64_t v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B37E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B37F20(uint64_t **a1, char a2)
{
  sub_216B38024(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  uint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B37FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B38024(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217473083 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217473083 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B380C4(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B380D8(uint64_t **a1, char a2)
{
  sub_216B381DC(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  uint64_t v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B381AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B381DC(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x80000002174730D2 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x80000002174730D2 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B3827C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B38290(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS5_10PredFactorEEEES6_S7_EEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v100, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v100, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJNS0_2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS5_10PredFactorEEEES6_S7_EEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v97[0]) = 2;
  *(_OWORD *)long long __p = *(_OWORD *)v100;
  long long v103 = v101;
  v100[0] = 0;
  v100[1] = 0;
  uint64_t v101 = 0;
  LOBYTE(v104) = 2;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  unint64_t v105 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  v97[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  __dst[0] = &v105;
  sub_216782F20((void ***)__dst);
  if (SHIBYTE(v103) < 0) {
    operator delete(__p[0]);
  }
  __dst[0] = &v97[1];
  sub_216782F20((void ***)__dst);
  if (SHIBYTE(v101) < 0) {
    operator delete(v100[0]);
  }
  if (v8)
  {
    unint64_t v9 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS3_10PredFactorEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v9)
    {
      uint64_t v10 = v9;
      sub_216779094(v100, v9);
      free(v10);
    }
    else
    {
      sub_216779094(v100, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS3_10PredFactorEEEE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v97[0]) = 1;
    *(_OWORD *)long long __p = *(_OWORD *)v100;
    long long v103 = v101;
    v100[0] = 0;
    v100[1] = 0;
    uint64_t v101 = 0;
    LOBYTE(v104) = 1;
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    unint64_t v105 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    v97[1] = 0;
    char v11 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
    char v13 = v12;
    __dst[0] = &v105;
    sub_216782F20((void ***)__dst);
    if (SHIBYTE(v103) < 0) {
      operator delete(__p[0]);
    }
    __dst[0] = &v97[1];
    sub_216782F20((void ***)__dst);
    if (SHIBYTE(v101) < 0) {
      operator delete(v100[0]);
    }
    if (v13)
    {
      unint64_t v14 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS4_10PredFactorEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v14)
      {
        unint64_t v15 = v14;
        sub_216779094(v100, v14);
        free(v15);
      }
      else
      {
        sub_216779094(v100, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS4_10PredFactorEEEE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v97[0]) = 2;
      *(_OWORD *)long long __p = *(_OWORD *)v100;
      long long v103 = v101;
      v100[0] = 0;
      v100[1] = 0;
      uint64_t v101 = 0;
      LOBYTE(v104) = 2;
      uint64_t v106 = 0;
      uint64_t v107 = 0;
      unint64_t v105 = 0;
      uint64_t v98 = 0;
      uint64_t v99 = 0;
      v97[1] = 0;
      unint64_t v16 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
      char v18 = v17;
      uint64_t v96 = (void **)&v105;
      sub_216782F20(&v96);
      if (SHIBYTE(v103) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v96 = &v97[1];
      sub_216782F20(&v96);
      if (SHIBYTE(v101) < 0) {
        operator delete(v100[0]);
      }
      if (v18)
      {
        sub_216B391B0(a1, (uint64_t)v97);
        unint64_t v19 = v16[10];
        uint64_t v20 = v16 + 8;
        unint64_t v21 = v16[9];
        if (v21 >= v19)
        {
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v20) >> 3);
          unint64_t v25 = v24 + 1;
          if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v20) >> 3);
          if (2 * v26 > v25) {
            unint64_t v25 = 2 * v26;
          }
          if (v26 >= 0x555555555555555) {
            unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v27 = v25;
          }
          unint64_t v105 = v16 + 10;
          if (v27) {
            long long v28 = (char *)sub_216782ED8((uint64_t)(v16 + 10), v27);
          }
          else {
            long long v28 = 0;
          }
          uint64_t v29 = &v28[24 * v24];
          __p[0] = v28;
          __p[1] = v29;
          unint64_t v104 = &v28[24 * v27];
          long long v30 = *(_OWORD *)v97;
          *((void *)v29 + 2) = v98;
          *(_OWORD *)uint64_t v29 = v30;
          v97[1] = 0;
          uint64_t v98 = 0;
          v97[0] = 0;
          long long v103 = v29 + 24;
          sub_216790CCC(v16 + 8, __p);
          uint64_t v23 = v16[9];
          sub_216790E64((uint64_t)__p);
        }
        else
        {
          long long v22 = *(_OWORD *)v97;
          *(void *)(v21 + 16) = v98;
          *(_OWORD *)unint64_t v21 = v22;
          v97[1] = 0;
          uint64_t v98 = 0;
          v97[0] = 0;
          uint64_t v23 = v21 + 24;
          v16[9] = v21 + 24;
        }
        v16[9] = v23;
        sub_216B1B264(a1, (uint64_t)v100);
        unint64_t v32 = v16[9];
        unint64_t v31 = v16[10];
        if (v32 >= v31)
        {
          unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - *v20) >> 3);
          unint64_t v35 = v34 + 1;
          if (v34 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *v20) >> 3);
          if (2 * v36 > v35) {
            unint64_t v35 = 2 * v36;
          }
          if (v36 >= 0x555555555555555) {
            unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v37 = v35;
          }
          unint64_t v105 = v16 + 10;
          if (v37) {
            unint64_t v38 = (char *)sub_216782ED8((uint64_t)(v16 + 10), v37);
          }
          else {
            unint64_t v38 = 0;
          }
          long long v39 = &v38[24 * v34];
          __p[0] = v38;
          __p[1] = v39;
          unint64_t v104 = &v38[24 * v37];
          long long v40 = *(_OWORD *)v100;
          *((void *)v39 + 2) = v101;
          *(_OWORD *)long long v39 = v40;
          v100[1] = 0;
          uint64_t v101 = 0;
          v100[0] = 0;
          long long v103 = v39 + 24;
          sub_216790CCC(v16 + 8, __p);
          uint64_t v41 = v16[9];
          sub_216790E64((uint64_t)__p);
          int v42 = SHIBYTE(v101);
          v16[9] = v41;
          if (v42 < 0) {
            operator delete(v100[0]);
          }
        }
        else
        {
          long long v33 = *(_OWORD *)v100;
          *(void *)(v32 + 16) = v101;
          *(_OWORD *)unint64_t v32 = v33;
          v16[9] = v32 + 24;
        }
        if (SHIBYTE(v98) < 0) {
          operator delete(v97[0]);
        }
      }
      if (*((char *)v16 + 55) < 0)
      {
        sub_216778F24(__dst, (void *)v16[4], v16[5]);
      }
      else
      {
        *(_OWORD *)std::string __dst = *((_OWORD *)v16 + 2);
        uint64_t v95 = v16[6];
      }
      unint64_t v43 = v11[10];
      unint64_t v44 = v11[9];
      if (v44 >= v43)
      {
        uint64_t v46 = v11[8];
        unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - v46) >> 3);
        unint64_t v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - v46) >> 3);
        if (2 * v49 > v48) {
          unint64_t v48 = 2 * v49;
        }
        if (v49 >= 0x555555555555555) {
          unint64_t v50 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v50 = v48;
        }
        unint64_t v105 = v11 + 10;
        if (v50) {
          uint64_t v51 = (char *)sub_216782ED8((uint64_t)(v11 + 10), v50);
        }
        else {
          uint64_t v51 = 0;
        }
        unint64_t v52 = &v51[24 * v47];
        __p[0] = v51;
        __p[1] = v52;
        unint64_t v104 = &v51[24 * v50];
        long long v53 = *(_OWORD *)__dst;
        *((void *)v52 + 2) = v95;
        *(_OWORD *)unint64_t v52 = v53;
        __dst[1] = 0;
        uint64_t v95 = 0;
        __dst[0] = 0;
        long long v103 = v52 + 24;
        sub_216790CCC(v11 + 8, __p);
        uint64_t v54 = v11[9];
        sub_216790E64((uint64_t)__p);
        int v55 = SHIBYTE(v95);
        v11[9] = v54;
        if (v55 < 0) {
          operator delete(__dst[0]);
        }
      }
      else
      {
        long long v45 = *(_OWORD *)__dst;
        *(void *)(v44 + 16) = v95;
        *(_OWORD *)unint64_t v44 = v45;
        v11[9] = v44 + 24;
      }
    }
    if (*((char *)v11 + 55) < 0)
    {
      sub_216778F24(v92, (void *)v11[4], v11[5]);
    }
    else
    {
      *(_OWORD *)unint64_t v92 = *((_OWORD *)v11 + 2);
      uint64_t v93 = v11[6];
    }
    unint64_t v56 = v6 + 8;
    unint64_t v57 = v6[10];
    unint64_t v58 = v6[9];
    if (v58 >= v57)
    {
      unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *v56) >> 3);
      unint64_t v62 = v61 + 1;
      if (v61 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *v56) >> 3);
      if (2 * v63 > v62) {
        unint64_t v62 = 2 * v63;
      }
      if (v63 >= 0x555555555555555) {
        unint64_t v64 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v64 = v62;
      }
      unint64_t v105 = v6 + 10;
      if (v64) {
        unint64_t v65 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v64);
      }
      else {
        unint64_t v65 = 0;
      }
      uint64_t v66 = &v65[24 * v61];
      __p[0] = v65;
      __p[1] = v66;
      unint64_t v104 = &v65[24 * v64];
      long long v67 = *(_OWORD *)v92;
      *((void *)v66 + 2) = v93;
      *(_OWORD *)uint64_t v66 = v67;
      v92[1] = 0;
      uint64_t v93 = 0;
      v92[0] = 0;
      long long v103 = v66 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v60 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v59 = *(_OWORD *)v92;
      *(void *)(v58 + 16) = v93;
      *(_OWORD *)unint64_t v58 = v59;
      v92[1] = 0;
      uint64_t v93 = 0;
      v92[0] = 0;
      uint64_t v60 = v58 + 24;
      v6[9] = v58 + 24;
    }
    v6[9] = v60;
    sub_216B391B0(a1, (uint64_t)v97);
    unint64_t v68 = v6[9];
    unint64_t v69 = v6[10];
    if (v68 >= v69)
    {
      unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - *v56) >> 3);
      unint64_t v73 = v72 + 1;
      if (v72 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - *v56) >> 3);
      if (2 * v74 > v73) {
        unint64_t v73 = 2 * v74;
      }
      if (v74 >= 0x555555555555555) {
        unint64_t v75 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v75 = v73;
      }
      unint64_t v105 = v6 + 10;
      if (v75) {
        unint64_t v76 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v75);
      }
      else {
        unint64_t v76 = 0;
      }
      unint64_t v77 = &v76[24 * v72];
      __p[0] = v76;
      __p[1] = v77;
      unint64_t v104 = &v76[24 * v75];
      long long v78 = *(_OWORD *)v97;
      *((void *)v77 + 2) = v98;
      *(_OWORD *)unint64_t v77 = v78;
      v97[1] = 0;
      uint64_t v98 = 0;
      v97[0] = 0;
      long long v103 = v77 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v71 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v70 = *(_OWORD *)v97;
      *(void *)(v68 + 16) = v98;
      *(_OWORD *)unint64_t v68 = v70;
      v97[1] = 0;
      uint64_t v98 = 0;
      v97[0] = 0;
      uint64_t v71 = v68 + 24;
      v6[9] = v68 + 24;
    }
    v6[9] = v71;
    sub_216B1B264(a1, (uint64_t)v100);
    unint64_t v80 = v6[9];
    unint64_t v79 = v6[10];
    if (v80 >= v79)
    {
      unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80 - *v56) >> 3);
      unint64_t v83 = v82 + 1;
      if (v82 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - *v56) >> 3);
      if (2 * v84 > v83) {
        unint64_t v83 = 2 * v84;
      }
      if (v84 >= 0x555555555555555) {
        unint64_t v85 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v85 = v83;
      }
      unint64_t v105 = v6 + 10;
      if (v85) {
        unint64_t v86 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v85);
      }
      else {
        unint64_t v86 = 0;
      }
      uint64_t v87 = &v86[24 * v82];
      __p[0] = v86;
      __p[1] = v87;
      unint64_t v104 = &v86[24 * v85];
      long long v88 = *(_OWORD *)v100;
      *((void *)v87 + 2) = v101;
      *(_OWORD *)uint64_t v87 = v88;
      v100[1] = 0;
      uint64_t v101 = 0;
      v100[0] = 0;
      long long v103 = v87 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v89 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v90 = SHIBYTE(v101);
      v6[9] = v89;
      if (v90 < 0) {
        operator delete(v100[0]);
      }
    }
    else
    {
      long long v81 = *(_OWORD *)v100;
      *(void *)(v80 + 16) = v101;
      *(_OWORD *)unint64_t v80 = v81;
      v6[9] = v80 + 24;
    }
    if (SHIBYTE(v98) < 0) {
      operator delete(v97[0]);
    }
    if (SHIBYTE(v93) < 0) {
      operator delete(v92[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v91 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v91;
  }
}

void sub_216B38C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void sub_216B38DA4(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS6_10PredFactorEEEES7_S8_EEEJEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(v37, v4);
    free(v5);
  }
  else
  {
    sub_216779094(v37, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl8internal4starINS1_3seqIJNS0_2atIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorENS6_10PredFactorEEEES7_S8_EEEJEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v34[0]) = 1;
  *(_OWORD *)long long __p = *(_OWORD *)v37;
  long long v40 = v38;
  v37[0] = 0;
  v37[1] = 0;
  unint64_t v38 = 0;
  LOBYTE(v41) = 1;
  memset(v42, 0, sizeof(v42));
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v8 = v7;
  unint64_t v43 = (void **)v42;
  sub_216782F20(&v43);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v43 = &v34[1];
  sub_216782F20(&v43);
  if (SHIBYTE(v38) < 0) {
    operator delete(v37[0]);
  }
  if (v8)
  {
    sub_216B38290(a1, (uint64_t)v34);
    unint64_t v9 = v6[10];
    uint64_t v10 = v6 + 8;
    unint64_t v11 = v6[9];
    if (v11 >= v9)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v10) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v10) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      v42[0] = v6 + 10;
      if (v17) {
        char v18 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v17);
      }
      else {
        char v18 = 0;
      }
      unint64_t v19 = &v18[24 * v14];
      __p[0] = v18;
      __p[1] = v19;
      uint64_t v41 = &v18[24 * v17];
      long long v20 = *(_OWORD *)v34;
      *((void *)v19 + 2) = v35;
      *(_OWORD *)unint64_t v19 = v20;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      long long v40 = v19 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v13 = v6[9];
      sub_216790E64((uint64_t)__p);
    }
    else
    {
      long long v12 = *(_OWORD *)v34;
      *(void *)(v11 + 16) = v35;
      *(_OWORD *)unint64_t v11 = v12;
      v34[1] = 0;
      uint64_t v35 = 0;
      v34[0] = 0;
      uint64_t v13 = v11 + 24;
      v6[9] = v11 + 24;
    }
    v6[9] = v13;
    sub_216B38DA4(v37, a1);
    unint64_t v22 = v6[9];
    unint64_t v21 = v6[10];
    if (v22 >= v21)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *v10) >> 3);
      unint64_t v25 = v24 + 1;
      if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *v10) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x555555555555555) {
        unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v27 = v25;
      }
      v42[0] = v6 + 10;
      if (v27) {
        long long v28 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v27);
      }
      else {
        long long v28 = 0;
      }
      uint64_t v29 = &v28[24 * v24];
      __p[0] = v28;
      __p[1] = v29;
      uint64_t v41 = &v28[24 * v27];
      long long v30 = *(_OWORD *)v37;
      *((void *)v29 + 2) = v38;
      *(_OWORD *)uint64_t v29 = v30;
      v37[1] = 0;
      unint64_t v38 = 0;
      v37[0] = 0;
      long long v40 = v29 + 24;
      sub_216790CCC(v6 + 8, __p);
      uint64_t v31 = v6[9];
      sub_216790E64((uint64_t)__p);
      int v32 = SHIBYTE(v38);
      v6[9] = v31;
      if (v32 < 0) {
        operator delete(v37[0]);
      }
    }
    else
    {
      long long v23 = *(_OWORD *)v37;
      *(void *)(v22 + 16) = v38;
      *(_OWORD *)unint64_t v22 = v23;
      v6[9] = v22 + 24;
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v33 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v33;
  }
}

void sub_216B39120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_216B391B0(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v4)
  {
    char v5 = v4;
    sub_216779094(&__p, v4);
    free(v5);
  }
  else
  {
    sub_216779094(&__p, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112PredOperatorE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  LOBYTE(v219) = 3;
  long long v224 = __p;
  unint64_t v225 = v223;
  long long __p = 0uLL;
  unint64_t v223 = 0;
  LOBYTE(v226) = 3;
  uint64_t v228 = 0;
  uint64_t v229 = 0;
  uint64_t v227 = 0;
  uint64_t v220 = 0;
  uint64_t v221 = 0;
  *((void *)&v219 + 1) = 0;
  unint64_t v6 = sub_216B20DE4(a1, (const void **)&v224, &v224);
  char v8 = v7;
  v216[0] = &v227;
  sub_216782F20((void ***)v216);
  if (SHIBYTE(v225) < 0) {
    operator delete((void *)v224);
  }
  v216[0] = (char *)&v219 + 8;
  sub_216782F20((void ***)v216);
  if (SHIBYTE(v223) < 0) {
    operator delete((void *)__p);
  }
  if (v8)
  {
    unint64_t v9 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15AndKWENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v9)
    {
      uint64_t v10 = v9;
      sub_216779094(&__p, v9);
      free(v10);
    }
    else
    {
      sub_216779094(&__p, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15AndKWENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v219) = 2;
    long long v224 = __p;
    unint64_t v225 = v223;
    long long __p = 0uLL;
    unint64_t v223 = 0;
    LOBYTE(v226) = 2;
    uint64_t v228 = 0;
    uint64_t v229 = 0;
    uint64_t v227 = 0;
    uint64_t v220 = 0;
    uint64_t v221 = 0;
    *((void *)&v219 + 1) = 0;
    unint64_t v11 = sub_216B20DE4(a1, (const void **)&v224, &v224);
    char v13 = v12;
    v216[0] = &v227;
    sub_216782F20((void ***)v216);
    if (SHIBYTE(v225) < 0) {
      operator delete((void *)v224);
    }
    v216[0] = (char *)&v219 + 8;
    sub_216782F20((void ***)v216);
    if (SHIBYTE(v223) < 0) {
      operator delete((void *)__p);
    }
    if (v13)
    {
      sub_216B20FFC(a1, (uint64_t)v216);
      unint64_t v14 = v11[10];
      unint64_t v15 = v11 + 8;
      unint64_t v16 = v11[9];
      if (v16 >= v14)
      {
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *v15) >> 3);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *v15) >> 3);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v20;
        }
        uint64_t v227 = v11 + 10;
        if (v22) {
          long long v23 = (char *)sub_216782ED8((uint64_t)(v11 + 10), v22);
        }
        else {
          long long v23 = 0;
        }
        unint64_t v24 = &v23[24 * v19];
        *(void *)&long long v224 = v23;
        *((void *)&v224 + 1) = v24;
        long long v226 = &v23[24 * v22];
        long long v25 = *(_OWORD *)v216;
        *((void *)v24 + 2) = v217;
        *(_OWORD *)unint64_t v24 = v25;
        v216[1] = 0;
        uint64_t v217 = 0;
        v216[0] = 0;
        unint64_t v225 = v24 + 24;
        sub_216790CCC(v11 + 8, &v224);
        uint64_t v18 = v11[9];
        sub_216790E64((uint64_t)&v224);
      }
      else
      {
        long long v17 = *(_OWORD *)v216;
        *(void *)(v16 + 16) = v217;
        *(_OWORD *)unint64_t v16 = v17;
        v216[1] = 0;
        uint64_t v217 = 0;
        v216[0] = 0;
        uint64_t v18 = v16 + 24;
        v11[9] = v16 + 24;
      }
      v11[9] = v18;
      unint64_t v26 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15AndKWE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v26)
      {
        sub_216779094(&__p, v26);
        free(v26);
      }
      else
      {
        sub_216779094(&__p, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_15AndKWE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      LOBYTE(v219) = 2;
      long long v224 = __p;
      unint64_t v225 = v223;
      long long __p = 0uLL;
      unint64_t v223 = 0;
      LOBYTE(v226) = 2;
      uint64_t v228 = 0;
      uint64_t v229 = 0;
      uint64_t v227 = 0;
      uint64_t v220 = 0;
      uint64_t v221 = 0;
      *((void *)&v219 + 1) = 0;
      unint64_t v27 = sub_216B20DE4(a1, (const void **)&v224, &v224);
      char v29 = v28;
      v210[0] = &v227;
      sub_216782F20((void ***)v210);
      if (SHIBYTE(v225) < 0) {
        operator delete((void *)v224);
      }
      v210[0] = (char *)&v219 + 8;
      sub_216782F20((void ***)v210);
      if (SHIBYTE(v223) < 0) {
        operator delete((void *)__p);
      }
      if (v29)
      {
        sub_216B3AC90(a1, (uint64_t)&v219);
        long long v30 = v27 + 8;
        unint64_t v31 = v27[10];
        unint64_t v32 = v27[9];
        if (v32 >= v31)
        {
          unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - *v30) >> 3);
          unint64_t v36 = v35 + 1;
          if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *v30) >> 3);
          if (2 * v37 > v36) {
            unint64_t v36 = 2 * v37;
          }
          if (v37 >= 0x555555555555555) {
            unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v38 = v36;
          }
          uint64_t v227 = v27 + 10;
          if (v38) {
            long long v39 = (char *)sub_216782ED8((uint64_t)(v27 + 10), v38);
          }
          else {
            long long v39 = 0;
          }
          long long v40 = &v39[24 * v35];
          *(void *)&long long v224 = v39;
          *((void *)&v224 + 1) = v40;
          long long v226 = &v39[24 * v38];
          long long v41 = v219;
          *((void *)v40 + 2) = v220;
          *(_OWORD *)long long v40 = v41;
          uint64_t v220 = 0;
          long long v219 = 0uLL;
          unint64_t v225 = v40 + 24;
          sub_216790CCC(v27 + 8, &v224);
          uint64_t v34 = v27[9];
          sub_216790E64((uint64_t)&v224);
        }
        else
        {
          long long v33 = v219;
          *(void *)(v32 + 16) = v220;
          *(_OWORD *)unint64_t v32 = v33;
          uint64_t v220 = 0;
          long long v219 = 0uLL;
          uint64_t v34 = v32 + 24;
          v27[9] = v32 + 24;
        }
        v27[9] = v34;
        sub_216B21B48(a1, (uint64_t)&__p);
        unint64_t v43 = v27[9];
        unint64_t v42 = v27[10];
        if (v43 >= v42)
        {
          unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *v30) >> 3);
          unint64_t v46 = v45 + 1;
          if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *v30) >> 3);
          if (2 * v47 > v46) {
            unint64_t v46 = 2 * v47;
          }
          if (v47 >= 0x555555555555555) {
            unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v48 = v46;
          }
          uint64_t v227 = v27 + 10;
          if (v48) {
            unint64_t v49 = (char *)sub_216782ED8((uint64_t)(v27 + 10), v48);
          }
          else {
            unint64_t v49 = 0;
          }
          unint64_t v50 = &v49[24 * v45];
          *(void *)&long long v224 = v49;
          *((void *)&v224 + 1) = v50;
          long long v226 = &v49[24 * v48];
          long long v51 = __p;
          *((void *)v50 + 2) = v223;
          *(_OWORD *)unint64_t v50 = v51;
          unint64_t v223 = 0;
          long long __p = 0uLL;
          unint64_t v225 = v50 + 24;
          sub_216790CCC(v27 + 8, &v224);
          uint64_t v52 = v27[9];
          sub_216790E64((uint64_t)&v224);
          int v53 = SHIBYTE(v223);
          v27[9] = v52;
          if (v53 < 0) {
            operator delete((void *)__p);
          }
        }
        else
        {
          long long v44 = __p;
          *(void *)(v43 + 16) = v223;
          *(_OWORD *)unint64_t v43 = v44;
          v27[9] = v43 + 24;
        }
        if (SHIBYTE(v220) < 0) {
          operator delete((void *)v219);
        }
      }
      if (*((char *)v27 + 55) < 0)
      {
        sub_216778F24(__dst, (void *)v27[4], v27[5]);
      }
      else
      {
        *(_OWORD *)std::string __dst = *((_OWORD *)v27 + 2);
        uint64_t v215 = v27[6];
      }
      unint64_t v54 = v11[9];
      unint64_t v55 = v11[10];
      if (v54 >= v55)
      {
        unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - *v15) >> 3);
        unint64_t v59 = v58 + 1;
        if (v58 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - *v15) >> 3);
        if (2 * v60 > v59) {
          unint64_t v59 = 2 * v60;
        }
        if (v60 >= 0x555555555555555) {
          unint64_t v61 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v61 = v59;
        }
        uint64_t v227 = v11 + 10;
        if (v61) {
          unint64_t v62 = (char *)sub_216782ED8((uint64_t)(v11 + 10), v61);
        }
        else {
          unint64_t v62 = 0;
        }
        unint64_t v63 = &v62[24 * v58];
        *(void *)&long long v224 = v62;
        *((void *)&v224 + 1) = v63;
        long long v226 = &v62[24 * v61];
        long long v64 = *(_OWORD *)__dst;
        *((void *)v63 + 2) = v215;
        *(_OWORD *)unint64_t v63 = v64;
        __dst[1] = 0;
        uint64_t v215 = 0;
        __dst[0] = 0;
        unint64_t v225 = v63 + 24;
        sub_216790CCC(v11 + 8, &v224);
        uint64_t v57 = v11[9];
        sub_216790E64((uint64_t)&v224);
      }
      else
      {
        long long v56 = *(_OWORD *)__dst;
        *(void *)(v54 + 16) = v215;
        *(_OWORD *)unint64_t v54 = v56;
        __dst[1] = 0;
        uint64_t v215 = 0;
        __dst[0] = 0;
        uint64_t v57 = v54 + 24;
        v11[9] = v54 + 24;
      }
      v11[9] = v57;
      sub_216B20FFC(a1, (uint64_t)&v219);
      unint64_t v66 = v11[9];
      unint64_t v65 = v11[10];
      if (v66 >= v65)
      {
        unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - *v15) >> 3);
        unint64_t v69 = v68 + 1;
        if (v68 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - *v15) >> 3);
        if (2 * v70 > v69) {
          unint64_t v69 = 2 * v70;
        }
        if (v70 >= 0x555555555555555) {
          unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v71 = v69;
        }
        uint64_t v227 = v11 + 10;
        if (v71) {
          unint64_t v72 = (char *)sub_216782ED8((uint64_t)(v11 + 10), v71);
        }
        else {
          unint64_t v72 = 0;
        }
        unint64_t v73 = &v72[24 * v68];
        *(void *)&long long v224 = v72;
        *((void *)&v224 + 1) = v73;
        long long v226 = &v72[24 * v71];
        long long v74 = v219;
        *((void *)v73 + 2) = v220;
        *(_OWORD *)unint64_t v73 = v74;
        uint64_t v220 = 0;
        long long v219 = 0uLL;
        unint64_t v225 = v73 + 24;
        sub_216790CCC(v11 + 8, &v224);
        uint64_t v75 = v11[9];
        sub_216790E64((uint64_t)&v224);
        int v76 = SHIBYTE(v220);
        v11[9] = v75;
        if (v76 < 0) {
          operator delete((void *)v219);
        }
      }
      else
      {
        long long v67 = v219;
        *(void *)(v66 + 16) = v220;
        *(_OWORD *)unint64_t v66 = v67;
        v11[9] = v66 + 24;
      }
      if (SHIBYTE(v215) < 0) {
        operator delete(__dst[0]);
      }
      if (SHIBYTE(v217) < 0) {
        operator delete(v216[0]);
      }
    }
    if (*((char *)v11 + 55) < 0)
    {
      sub_216778F24(v212, (void *)v11[4], v11[5]);
    }
    else
    {
      *(_OWORD *)unint64_t v212 = *((_OWORD *)v11 + 2);
      uint64_t v213 = v11[6];
    }
    unint64_t v77 = v6 + 8;
    unint64_t v78 = v6[10];
    unint64_t v79 = v6[9];
    if (v79 >= v78)
    {
      unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - *v77) >> 3);
      unint64_t v83 = v82 + 1;
      if (v82 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v84 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - *v77) >> 3);
      if (2 * v84 > v83) {
        unint64_t v83 = 2 * v84;
      }
      if (v84 >= 0x555555555555555) {
        unint64_t v85 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v85 = v83;
      }
      uint64_t v227 = v6 + 10;
      if (v85) {
        unint64_t v86 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v85);
      }
      else {
        unint64_t v86 = 0;
      }
      uint64_t v87 = &v86[24 * v82];
      *(void *)&long long v224 = v86;
      *((void *)&v224 + 1) = v87;
      long long v226 = &v86[24 * v85];
      long long v88 = *(_OWORD *)v212;
      *((void *)v87 + 2) = v213;
      *(_OWORD *)uint64_t v87 = v88;
      v212[1] = 0;
      uint64_t v213 = 0;
      v212[0] = 0;
      unint64_t v225 = v87 + 24;
      sub_216790CCC(v6 + 8, &v224);
      uint64_t v81 = v6[9];
      sub_216790E64((uint64_t)&v224);
    }
    else
    {
      long long v80 = *(_OWORD *)v212;
      *(void *)(v79 + 16) = v213;
      *(_OWORD *)unint64_t v79 = v80;
      v212[1] = 0;
      uint64_t v213 = 0;
      v212[0] = 0;
      uint64_t v81 = v79 + 24;
      v6[9] = v79 + 24;
    }
    v6[9] = v81;
    uint64_t v89 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14OrKWENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v89)
    {
      sub_216779094(&__p, v89);
      free(v89);
    }
    else
    {
      sub_216779094(&__p, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14OrKWENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v219) = 2;
    long long v224 = __p;
    unint64_t v225 = v223;
    long long __p = 0uLL;
    unint64_t v223 = 0;
    LOBYTE(v226) = 2;
    uint64_t v228 = 0;
    uint64_t v229 = 0;
    uint64_t v227 = 0;
    uint64_t v220 = 0;
    uint64_t v221 = 0;
    *((void *)&v219 + 1) = 0;
    int v90 = sub_216B20DE4(a1, (const void **)&v224, &v224);
    char v92 = v91;
    v216[0] = &v227;
    sub_216782F20((void ***)v216);
    if (SHIBYTE(v225) < 0) {
      operator delete((void *)v224);
    }
    v216[0] = (char *)&v219 + 8;
    sub_216782F20((void ***)v216);
    if (SHIBYTE(v223) < 0) {
      operator delete((void *)__p);
    }
    if (v92)
    {
      sub_216B20FFC(a1, (uint64_t)v216);
      unint64_t v93 = v90[10];
      unint64_t v94 = v90[9];
      unint64_t v209 = v90 + 8;
      if (v94 >= v93)
      {
        uint64_t v97 = v90[8];
        unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - v97) >> 3);
        unint64_t v99 = v98 + 1;
        if (v98 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93 - v97) >> 3);
        if (2 * v100 > v99) {
          unint64_t v99 = 2 * v100;
        }
        if (v100 >= 0x555555555555555) {
          unint64_t v101 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v101 = v99;
        }
        uint64_t v227 = v90 + 10;
        if (v101) {
          uint64_t v102 = (char *)sub_216782ED8((uint64_t)(v90 + 10), v101);
        }
        else {
          uint64_t v102 = 0;
        }
        long long v103 = &v102[24 * v98];
        *(void *)&long long v224 = v102;
        *((void *)&v224 + 1) = v103;
        long long v226 = &v102[24 * v101];
        long long v104 = *(_OWORD *)v216;
        *((void *)v103 + 2) = v217;
        *(_OWORD *)long long v103 = v104;
        v216[1] = 0;
        uint64_t v217 = 0;
        v216[0] = 0;
        unint64_t v225 = v103 + 24;
        sub_216790CCC(v209, &v224);
        uint64_t v96 = v90[9];
        sub_216790E64((uint64_t)&v224);
      }
      else
      {
        long long v95 = *(_OWORD *)v216;
        *(void *)(v94 + 16) = v217;
        *(_OWORD *)unint64_t v94 = v95;
        v216[1] = 0;
        uint64_t v217 = 0;
        v216[0] = 0;
        uint64_t v96 = v94 + 24;
        v90[9] = v94 + 24;
      }
      v90[9] = v96;
      unint64_t v105 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14OrKWE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
      if (v105)
      {
        sub_216779094(&__p, v105);
        free(v105);
      }
      else
      {
        sub_216779094(&__p, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14OrKWE" & 0x7FFFFFFFFFFFFFFFLL));
      }
      uint64_t v106 = a2;
      LOBYTE(v219) = 2;
      long long v224 = __p;
      unint64_t v225 = v223;
      long long __p = 0uLL;
      unint64_t v223 = 0;
      LOBYTE(v226) = 2;
      uint64_t v228 = 0;
      uint64_t v229 = 0;
      uint64_t v227 = 0;
      uint64_t v220 = 0;
      uint64_t v221 = 0;
      *((void *)&v219 + 1) = 0;
      uint64_t v107 = sub_216B20DE4(a1, (const void **)&v224, &v224);
      char v109 = v108;
      long long v218 = (void **)&v227;
      sub_216782F20(&v218);
      if (SHIBYTE(v225) < 0) {
        operator delete((void *)v224);
      }
      long long v218 = (void **)&v219 + 1;
      sub_216782F20(&v218);
      if (SHIBYTE(v223) < 0) {
        operator delete((void *)__p);
      }
      if (v109)
      {
        sub_216B3AEB0(a1, (uint64_t)&v219);
        unint64_t v110 = v107 + 8;
        unint64_t v111 = v107[10];
        unint64_t v112 = v107[9];
        if (v112 >= v111)
        {
          unint64_t v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - *v110) >> 3);
          unint64_t v116 = v115 + 1;
          if (v115 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - *v110) >> 3);
          if (2 * v117 > v116) {
            unint64_t v116 = 2 * v117;
          }
          if (v117 >= 0x555555555555555) {
            unint64_t v118 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v118 = v116;
          }
          uint64_t v227 = v107 + 10;
          if (v118) {
            long long v119 = (char *)sub_216782ED8((uint64_t)(v107 + 10), v118);
          }
          else {
            long long v119 = 0;
          }
          unint64_t v120 = &v119[24 * v115];
          *(void *)&long long v224 = v119;
          *((void *)&v224 + 1) = v120;
          long long v226 = &v119[24 * v118];
          long long v121 = v219;
          *((void *)v120 + 2) = v220;
          *(_OWORD *)unint64_t v120 = v121;
          uint64_t v220 = 0;
          long long v219 = 0uLL;
          unint64_t v225 = v120 + 24;
          sub_216790CCC(v107 + 8, &v224);
          uint64_t v114 = v107[9];
          sub_216790E64((uint64_t)&v224);
        }
        else
        {
          long long v113 = v219;
          *(void *)(v112 + 16) = v220;
          *(_OWORD *)unint64_t v112 = v113;
          uint64_t v220 = 0;
          long long v219 = 0uLL;
          uint64_t v114 = v112 + 24;
          v107[9] = v112 + 24;
        }
        v107[9] = v114;
        sub_216B21B48(a1, (uint64_t)&__p);
        unint64_t v123 = v107[9];
        unint64_t v122 = v107[10];
        if (v123 >= v122)
        {
          unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - *v110) >> 3);
          unint64_t v126 = v125 + 1;
          if (v125 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - *v110) >> 3);
          if (2 * v127 > v126) {
            unint64_t v126 = 2 * v127;
          }
          if (v127 >= 0x555555555555555) {
            unint64_t v128 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v128 = v126;
          }
          uint64_t v227 = v107 + 10;
          if (v128) {
            char v129 = (char *)sub_216782ED8((uint64_t)(v107 + 10), v128);
          }
          else {
            char v129 = 0;
          }
          unint64_t v130 = &v129[24 * v125];
          *(void *)&long long v224 = v129;
          *((void *)&v224 + 1) = v130;
          long long v226 = &v129[24 * v128];
          long long v131 = __p;
          *((void *)v130 + 2) = v223;
          *(_OWORD *)unint64_t v130 = v131;
          unint64_t v223 = 0;
          long long __p = 0uLL;
          unint64_t v225 = v130 + 24;
          sub_216790CCC(v107 + 8, &v224);
          uint64_t v132 = v107[9];
          sub_216790E64((uint64_t)&v224);
          int v133 = SHIBYTE(v223);
          v107[9] = v132;
          a2 = v106;
          if (v133 < 0) {
            operator delete((void *)__p);
          }
        }
        else
        {
          long long v124 = __p;
          *(void *)(v123 + 16) = v223;
          *(_OWORD *)unint64_t v123 = v124;
          v107[9] = v123 + 24;
          a2 = v106;
        }
        if (SHIBYTE(v220) < 0) {
          operator delete((void *)v219);
        }
      }
      if (*((char *)v107 + 55) < 0)
      {
        sub_216778F24(__dst, (void *)v107[4], v107[5]);
      }
      else
      {
        *(_OWORD *)std::string __dst = *((_OWORD *)v107 + 2);
        uint64_t v215 = v107[6];
      }
      unint64_t v134 = v90[9];
      unint64_t v135 = v90[10];
      if (v134 >= v135)
      {
        unint64_t v77 = v6 + 8;
        unint64_t v138 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - *v209) >> 3);
        unint64_t v139 = v138 + 1;
        if (v138 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v140 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - *v209) >> 3);
        if (2 * v140 > v139) {
          unint64_t v139 = 2 * v140;
        }
        if (v140 >= 0x555555555555555) {
          unint64_t v141 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v141 = v139;
        }
        uint64_t v227 = v90 + 10;
        if (v141) {
          unint64_t v142 = (char *)sub_216782ED8((uint64_t)(v90 + 10), v141);
        }
        else {
          unint64_t v142 = 0;
        }
        long long v143 = &v142[24 * v138];
        *(void *)&long long v224 = v142;
        *((void *)&v224 + 1) = v143;
        long long v226 = &v142[24 * v141];
        long long v144 = *(_OWORD *)__dst;
        *((void *)v143 + 2) = v215;
        *(_OWORD *)long long v143 = v144;
        __dst[1] = 0;
        uint64_t v215 = 0;
        __dst[0] = 0;
        unint64_t v225 = v143 + 24;
        sub_216790CCC(v209, &v224);
        uint64_t v137 = v90[9];
        sub_216790E64((uint64_t)&v224);
      }
      else
      {
        long long v136 = *(_OWORD *)__dst;
        *(void *)(v134 + 16) = v215;
        *(_OWORD *)unint64_t v134 = v136;
        __dst[1] = 0;
        uint64_t v215 = 0;
        __dst[0] = 0;
        uint64_t v137 = v134 + 24;
        v90[9] = v134 + 24;
        unint64_t v77 = v6 + 8;
      }
      v90[9] = v137;
      sub_216B20FFC(a1, (uint64_t)&v219);
      unint64_t v146 = v90[9];
      unint64_t v145 = v90[10];
      if (v146 >= v145)
      {
        unint64_t v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - *v209) >> 3);
        unint64_t v149 = v148 + 1;
        if (v148 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145 - *v209) >> 3);
        if (2 * v150 > v149) {
          unint64_t v149 = 2 * v150;
        }
        if (v150 >= 0x555555555555555) {
          unint64_t v151 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v151 = v149;
        }
        uint64_t v227 = v90 + 10;
        if (v151) {
          unint64_t v152 = (char *)sub_216782ED8((uint64_t)(v90 + 10), v151);
        }
        else {
          unint64_t v152 = 0;
        }
        unint64_t v153 = &v152[24 * v148];
        *(void *)&long long v224 = v152;
        *((void *)&v224 + 1) = v153;
        long long v226 = &v152[24 * v151];
        long long v154 = v219;
        *((void *)v153 + 2) = v220;
        *(_OWORD *)unint64_t v153 = v154;
        uint64_t v220 = 0;
        long long v219 = 0uLL;
        unint64_t v225 = v153 + 24;
        sub_216790CCC(v209, &v224);
        uint64_t v155 = v90[9];
        sub_216790E64((uint64_t)&v224);
        int v156 = SHIBYTE(v220);
        v90[9] = v155;
        if (v156 < 0) {
          operator delete((void *)v219);
        }
      }
      else
      {
        long long v147 = v219;
        *(void *)(v146 + 16) = v220;
        *(_OWORD *)unint64_t v146 = v147;
        v90[9] = v146 + 24;
      }
      if (SHIBYTE(v215) < 0) {
        operator delete(__dst[0]);
      }
      if (SHIBYTE(v217) < 0) {
        operator delete(v216[0]);
      }
    }
    if (*((char *)v90 + 55) < 0)
    {
      sub_216778F24(v210, (void *)v90[4], v90[5]);
    }
    else
    {
      *(_OWORD *)long long v210 = *((_OWORD *)v90 + 2);
      uint64_t v211 = v90[6];
    }
    unint64_t v157 = v6[9];
    unint64_t v158 = v6[10];
    if (v157 >= v158)
    {
      unint64_t v161 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v157 - *v77) >> 3);
      unint64_t v162 = v161 + 1;
      if (v161 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v163 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v158 - *v77) >> 3);
      if (2 * v163 > v162) {
        unint64_t v162 = 2 * v163;
      }
      if (v163 >= 0x555555555555555) {
        unint64_t v164 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v164 = v162;
      }
      uint64_t v227 = v6 + 10;
      if (v164) {
        unint64_t v165 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v164);
      }
      else {
        unint64_t v165 = 0;
      }
      uint64_t v166 = &v165[24 * v161];
      *(void *)&long long v224 = v165;
      *((void *)&v224 + 1) = v166;
      long long v226 = &v165[24 * v164];
      long long v167 = *(_OWORD *)v210;
      *((void *)v166 + 2) = v211;
      *(_OWORD *)uint64_t v166 = v167;
      v210[1] = 0;
      uint64_t v211 = 0;
      v210[0] = 0;
      unint64_t v225 = v166 + 24;
      sub_216790CCC(v77, &v224);
      uint64_t v160 = v6[9];
      sub_216790E64((uint64_t)&v224);
    }
    else
    {
      long long v159 = *(_OWORD *)v210;
      *(void *)(v157 + 16) = v211;
      *(_OWORD *)unint64_t v157 = v159;
      v210[1] = 0;
      uint64_t v211 = 0;
      v210[0] = 0;
      uint64_t v160 = v157 + 24;
      v6[9] = v157 + 24;
    }
    v6[9] = v160;
    uint64_t v168 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110ImpliedAndE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
    if (v168)
    {
      sub_216779094(&__p, v168);
      free(v168);
    }
    else
    {
      sub_216779094(&__p, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110ImpliedAndE" & 0x7FFFFFFFFFFFFFFFLL));
    }
    LOBYTE(v219) = 2;
    long long v224 = __p;
    unint64_t v225 = v223;
    long long __p = 0uLL;
    unint64_t v223 = 0;
    LOBYTE(v226) = 2;
    uint64_t v228 = 0;
    uint64_t v229 = 0;
    uint64_t v227 = 0;
    uint64_t v220 = 0;
    uint64_t v221 = 0;
    *((void *)&v219 + 1) = 0;
    unint64_t v169 = sub_216B20DE4(a1, (const void **)&v224, &v224);
    char v171 = v170;
    __dst[0] = &v227;
    sub_216782F20((void ***)__dst);
    if (SHIBYTE(v225) < 0) {
      operator delete((void *)v224);
    }
    __dst[0] = (char *)&v219 + 8;
    sub_216782F20((void ***)__dst);
    if (SHIBYTE(v223) < 0) {
      operator delete((void *)__p);
    }
    if (v171)
    {
      sub_216B21400(a1, (uint64_t)&v219);
      uint64_t v172 = v169 + 8;
      unint64_t v173 = v169[10];
      unint64_t v174 = v169[9];
      if (v174 >= v173)
      {
        unint64_t v177 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v174 - *v172) >> 3);
        unint64_t v178 = v177 + 1;
        if (v177 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v173 - *v172) >> 3);
        if (2 * v179 > v178) {
          unint64_t v178 = 2 * v179;
        }
        if (v179 >= 0x555555555555555) {
          unint64_t v180 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v180 = v178;
        }
        uint64_t v227 = v169 + 10;
        if (v180) {
          uint64_t v181 = (char *)sub_216782ED8((uint64_t)(v169 + 10), v180);
        }
        else {
          uint64_t v181 = 0;
        }
        int v182 = &v181[24 * v177];
        *(void *)&long long v224 = v181;
        *((void *)&v224 + 1) = v182;
        long long v226 = &v181[24 * v180];
        long long v183 = v219;
        *((void *)v182 + 2) = v220;
        *(_OWORD *)int v182 = v183;
        uint64_t v220 = 0;
        long long v219 = 0uLL;
        unint64_t v225 = v182 + 24;
        sub_216790CCC(v169 + 8, &v224);
        uint64_t v176 = v169[9];
        sub_216790E64((uint64_t)&v224);
      }
      else
      {
        long long v175 = v219;
        *(void *)(v174 + 16) = v220;
        *(_OWORD *)unint64_t v174 = v175;
        uint64_t v220 = 0;
        long long v219 = 0uLL;
        uint64_t v176 = v174 + 24;
        v169[9] = v174 + 24;
      }
      v169[9] = v176;
      sub_216B22EA8(a1, (uint64_t)&__p);
      unint64_t v185 = v169[9];
      unint64_t v184 = v169[10];
      if (v185 >= v184)
      {
        unint64_t v187 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v185 - *v172) >> 3);
        unint64_t v188 = v187 + 1;
        if (v187 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_21677CB10();
        }
        unint64_t v189 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v184 - *v172) >> 3);
        if (2 * v189 > v188) {
          unint64_t v188 = 2 * v189;
        }
        if (v189 >= 0x555555555555555) {
          unint64_t v190 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v190 = v188;
        }
        uint64_t v227 = v169 + 10;
        if (v190) {
          unint64_t v191 = (char *)sub_216782ED8((uint64_t)(v169 + 10), v190);
        }
        else {
          unint64_t v191 = 0;
        }
        long long v192 = &v191[24 * v187];
        *(void *)&long long v224 = v191;
        *((void *)&v224 + 1) = v192;
        long long v226 = &v191[24 * v190];
        long long v193 = __p;
        *((void *)v192 + 2) = v223;
        *(_OWORD *)long long v192 = v193;
        unint64_t v223 = 0;
        long long __p = 0uLL;
        unint64_t v225 = v192 + 24;
        sub_216790CCC(v169 + 8, &v224);
        uint64_t v194 = v169[9];
        sub_216790E64((uint64_t)&v224);
        int v195 = SHIBYTE(v223);
        v169[9] = v194;
        if (v195 < 0) {
          operator delete((void *)__p);
        }
      }
      else
      {
        long long v186 = __p;
        *(void *)(v185 + 16) = v223;
        *(_OWORD *)unint64_t v185 = v186;
        v169[9] = v185 + 24;
      }
      if (SHIBYTE(v220) < 0) {
        operator delete((void *)v219);
      }
    }
    if (*((char *)v169 + 55) < 0)
    {
      sub_216778F24(v216, (void *)v169[4], v169[5]);
    }
    else
    {
      *(_OWORD *)unint64_t v216 = *((_OWORD *)v169 + 2);
      uint64_t v217 = v169[6];
    }
    unint64_t v197 = v6[9];
    unint64_t v196 = v6[10];
    if (v197 >= v196)
    {
      unint64_t v199 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v197 - *v77) >> 3);
      unint64_t v200 = v199 + 1;
      if (v199 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v201 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v196 - *v77) >> 3);
      if (2 * v201 > v200) {
        unint64_t v200 = 2 * v201;
      }
      if (v201 >= 0x555555555555555) {
        unint64_t v202 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v202 = v200;
      }
      uint64_t v227 = v6 + 10;
      if (v202) {
        unint64_t v203 = (char *)sub_216782ED8((uint64_t)(v6 + 10), v202);
      }
      else {
        unint64_t v203 = 0;
      }
      long long v204 = &v203[24 * v199];
      *(void *)&long long v224 = v203;
      *((void *)&v224 + 1) = v204;
      long long v226 = &v203[24 * v202];
      long long v205 = *(_OWORD *)v216;
      *((void *)v204 + 2) = v217;
      *(_OWORD *)long long v204 = v205;
      v216[1] = 0;
      uint64_t v217 = 0;
      v216[0] = 0;
      unint64_t v225 = v204 + 24;
      sub_216790CCC(v77, &v224);
      uint64_t v206 = v6[9];
      sub_216790E64((uint64_t)&v224);
      int v207 = SHIBYTE(v217);
      v6[9] = v206;
      if (v207 < 0) {
        operator delete(v216[0]);
      }
    }
    else
    {
      long long v198 = *(_OWORD *)v216;
      *(void *)(v197 + 16) = v217;
      *(_OWORD *)unint64_t v197 = v198;
      v6[9] = v197 + 24;
    }
    if (SHIBYTE(v211) < 0) {
      operator delete(v210[0]);
    }
    if (SHIBYTE(v213) < 0) {
      operator delete(v212[0]);
    }
  }
  if (*((char *)v6 + 55) < 0)
  {
    sub_216778F24((unsigned char *)a2, (void *)v6[4], v6[5]);
  }
  else
  {
    long long v208 = *((_OWORD *)v6 + 2);
    *(void *)(a2 + 16) = v6[6];
    *(_OWORD *)a2 = v208;
  }
}

void sub_216B3A8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  sub_216790E64(v52 - 160);
  if (a52 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B3AC90@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B3ACF8(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B3ACF8(uint64_t **a1, char a2)
{
  sub_216B3ADFC(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  char v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B3ADCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B3ADFC(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217473781 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217473781 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B3AE9C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B3AEB0@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_216B3AF18(a1, 0);
  if (*((char *)result + 55) < 0)
  {
    char v5 = (void *)result[4];
    unint64_t v6 = result[5];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *((_OWORD *)result + 2);
    *(void *)(a2 + 16) = result[6];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

uint64_t *sub_216B3AF18(uint64_t **a1, char a2)
{
  sub_216B3B01C(v7);
  *(_OWORD *)long long __p = *(_OWORD *)v7;
  uint64_t v10 = v8;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  char v11 = a2;
  memset(v12, 0, sizeof(v12));
  memset(v6, 0, sizeof(v6));
  long long v4 = sub_216B20DE4(a1, (const void **)__p, (long long *)__p);
  char v13 = (void **)v12;
  sub_216782F20(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  char v13 = v6;
  sub_216782F20(&v13);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  return v4;
}

void sub_216B3AFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  sub_216B20D98((uint64_t)&a20);
  *(void *)(v21 - 40) = v20;
  sub_216782F20((void ***)(v21 - 40));
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B3B01C(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x800000021747386BLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x800000021747386BLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B3B0BC(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B3B0D0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216B3B0D0(a1, *a2);
    sub_216B3B0D0(a1, a2[1]);
    sub_216B20FB4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

BOOL sub_216B3B12C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = (uint64_t **)(a1 + 56);
  uint64_t v7 = sub_21678C2D8(a1 + 56, (const void **)(*a2 + 32));
  if (a1 + 64 != v7) {
    return *(unsigned char *)(v7 + 56) != 0;
  }
  v30.__locale_ = (std::locale::__imp *)sub_21680EE0C((uint64_t **)(a1 + 32), (const void **)(*a2 + 32), *a2 + 32);
  uint64_t v31 = v8;
  uint64_t v32 = a1 + 32;
  if (v8)
  {
    uint64_t v9 = *a2;
    switch(*(unsigned char *)(*a2 + 56))
    {
      case 0:
        uint64_t v10 = *(const void ***)(v9 + 64);
        char v11 = *(const void ***)(v9 + 72);
        if (v10 != v11)
        {
          char v12 = 0;
          do
          {
            if (v12)
            {
              char v12 = 1;
            }
            else
            {
              long long v33 = (long long *)sub_21678C2D8(a1 + 8, v10);
              char v12 = sub_216B3B12C(a1, &v33, a3);
            }
            v10 += 3;
          }
          while (v10 != v11);
          uint64_t v9 = *a2;
        }
        long long v33 = (long long *)(v9 + 32);
        char v13 = sub_216855CF4(v6, (const void **)(v9 + 32), (uint64_t)&unk_2174BFD90, &v33);
        uint64_t v14 = 1;
        goto LABEL_48;
      case 1:
        long long v25 = *(const void ***)(v9 + 64);
        unint64_t v26 = *(const void ***)(v9 + 72);
        if (v25 != v26)
        {
          char v27 = 0;
          do
          {
            if (v27)
            {
              char v27 = 1;
            }
            else
            {
              long long v33 = (long long *)sub_21678C2D8(a1 + 8, v25);
              char v27 = sub_216B3B12C(a1, &v33, a3);
            }
            v25 += 3;
          }
          while (v25 != v26);
          uint64_t v9 = *a2;
        }
        long long v33 = (long long *)(v9 + 32);
        uint64_t v14 = 0;
        *((unsigned char *)sub_216855CF4(v6, (const void **)(v9 + 32), (uint64_t)&unk_2174BFD90, &v33) + 56) = 0;
        goto LABEL_49;
      case 2:
        uint64_t v21 = *(const void ***)(v9 + 64);
        unint64_t v22 = *(const void ***)(v9 + 72);
        if (v21 == v22)
        {
          uint64_t v14 = 0;
        }
        else
        {
          LOBYTE(v14) = 0;
          do
          {
            if (v14)
            {
              uint64_t v14 = 1;
            }
            else
            {
              long long v33 = (long long *)sub_21678C2D8(a1 + 8, v21);
              uint64_t v14 = sub_216B3B12C(a1, &v33, a3);
            }
            v21 += 3;
          }
          while (v21 != v22);
          uint64_t v9 = *a2;
        }
        goto LABEL_47;
      case 3:
        long long v23 = *(const void ***)(v9 + 64);
        unint64_t v24 = *(const void ***)(v9 + 72);
        if (v23 == v24)
        {
          uint64_t v14 = 1;
        }
        else
        {
          LOBYTE(v14) = 1;
          do
          {
            if (v14)
            {
              long long v33 = (long long *)sub_21678C2D8(a1 + 8, v23);
              uint64_t v14 = sub_216B3B12C(a1, &v33, a3);
            }
            else
            {
              uint64_t v14 = 0;
            }
            v23 += 3;
          }
          while (v23 != v24);
          uint64_t v9 = *a2;
        }
LABEL_47:
        long long v33 = (long long *)(v9 + 32);
        char v13 = sub_216855CF4(v6, (const void **)(v9 + 32), (uint64_t)&unk_2174BFD90, &v33);
LABEL_48:
        *((unsigned char *)v13 + 56) = v14;
LABEL_49:
        sub_216B3B5B4((uint64_t)&v30);
        a3 = v14;
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "code should be unreachable: invalid rule_type value");
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
  }
  else
  {
    sub_216B3B5B4((uint64_t)&v30);
    if ((a3 & 1) == 0)
    {
      ++*(_DWORD *)(a1 + 4);
      if (*(unsigned char *)a1)
      {
        unint64_t v15 = sub_216779180(MEMORY[0x263F8C100], (uint64_t)"problem: cycle without progress detected at rule class ", 55);
        int v16 = *(char *)(*a2 + 55);
        if (v16 >= 0) {
          uint64_t v17 = *a2 + 32;
        }
        else {
          uint64_t v17 = *(void *)(*a2 + 32);
        }
        if (v16 >= 0) {
          uint64_t v18 = *(unsigned __int8 *)(*a2 + 55);
        }
        else {
          uint64_t v18 = *(void *)(*a2 + 40);
        }
        unint64_t v19 = sub_216779180(v15, v17, v18);
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
        uint64_t v20 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(&v30);
        std::ostream::put();
        std::ostream::flush();
      }
    }
    v30.__locale_ = (std::locale::__imp *)(*a2 + 32);
    *((unsigned char *)sub_216855CF4(v6, (const void **)v30.__locale_, (uint64_t)&unk_2174BFD90, (long long **)&v30) + 56) = a3;
  }
  return a3;
}

void sub_216B3B540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_216B3B5B4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 8)) {
    sub_2167ADFC8(v2, *(void *)a1);
  }
  return a1;
}

uint64_t sub_216B3B5F4(uint64_t a1, std::string *a2)
{
  sub_216B3B934(a1, (uint64_t)a2);
  if ((sub_216B3BBC8(a1, a2) & 1) == 0 && (sub_216B3BD10(a1, a2) & 1) == 0 && (sub_216B3BF6C(a1, (uint64_t)a2) & 1) == 0)
  {
    long long v18 = *(_OWORD *)(a1 + 32);
    if ((void)v18 == *(void *)(a1 + 64) || *(unsigned char *)v18 != 40) {
      return 0;
    }
    uint64_t v4 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v18 + 1;
    *(void *)(a1 + 40) = v4;
    ++*(void *)(a1 + 56);
    sub_216B1967C((uint64_t *)a2);
    if ((sub_216B3E468((void *)a1, (uint64_t)a2) & 1) == 0) {
      sub_216B3E4BC(a1);
    }
    if ((sub_216B3E604(a1, (uint64_t)a2) & 1) == 0) {
      sub_216B3E7D0(a1);
    }
  }
  char v5 = (long long *)(a1 + 32);
  long long v12 = *(_OWORD *)(a1 + 32);
  long long v13 = *(_OWORD *)(a1 + 48);
  long long v19 = v12;
  long long v22 = v13;
  if (sub_216B07FF4(a1))
  {
    while (1)
    {
      int v6 = sub_216B3E918((void *)a1, (uint64_t)a2);
      long long *v5 = v19;
      *(_OWORD *)(a1 + 48) = v22;
      if (!v6) {
        break;
      }
      long long v14 = *v5;
      long long v16 = *(_OWORD *)(a1 + 48);
      while ((sub_2169C5224((void *)a1) & 1) != 0)
        ;
      if (sub_216B080E4((void *)a1)
        && (long long v20 = *v5,
            long long v23 = *(_OWORD *)(a1 + 48),
            char v7 = sub_2169C827C((void *)a1),
            long long *v5 = v20,
            *(_OWORD *)(a1 + 48) = v23,
            (v7 & 1) == 0))
      {
        sub_216B3BAA4((char **)(a2->__r_.__value_.__l.__size_ - 48), 3);
        while ((sub_2169C5224((void *)a1) & 1) != 0)
          ;
      }
      else
      {
        long long *v5 = v14;
        *(_OWORD *)(a1 + 48) = v16;
        long long v15 = *v5;
        long long v17 = *(_OWORD *)(a1 + 48);
        while ((sub_2169C5224((void *)a1) & 1) != 0)
          ;
        if (sub_216B08148((void *)a1)
          && (long long v21 = *v5,
              long long v24 = *(_OWORD *)(a1 + 48),
              char v8 = sub_2169C827C((void *)a1),
              long long *v5 = v21,
              *(_OWORD *)(a1 + 48) = v24,
              (v8 & 1) == 0))
        {
          sub_216B3BAA4((char **)(a2->__r_.__value_.__l.__size_ - 48), 4);
          while ((sub_2169C5224((void *)a1) & 1) != 0)
            ;
        }
        else
        {
          long long *v5 = v15;
          *(_OWORD *)(a1 + 48) = v17;
          long long v19 = *v5;
          long long v22 = *(_OWORD *)(a1 + 48);
          if (!sub_2169C5224((void *)a1)) {
            goto LABEL_34;
          }
          while ((sub_2169C5224((void *)a1) & 1) != 0)
            ;
          sub_216B3BAA4((char **)(a2->__r_.__value_.__l.__size_ - 48), 2);
        }
      }
      sub_216B3B934(a1, (uint64_t)a2);
      if ((sub_216B3BBC8(a1, a2) & 1) == 0
        && (sub_216B3BD10(a1, a2) & 1) == 0
        && (sub_216B3BF6C(a1, (uint64_t)a2) & 1) == 0)
      {
        uint64_t v9 = *(unsigned char **)(a1 + 32);
        if (v9 == *(unsigned char **)(a1 + 64) || *v9 != 40) {
          break;
        }
        uint64_t v10 = *(void *)(a1 + 40) + 1;
        *(void *)(a1 + 32) = v9 + 1;
        *(void *)(a1 + 40) = v10;
        ++*(void *)(a1 + 56);
        sub_216B1967C((uint64_t *)a2);
        if ((sub_216B3E468((void *)a1, (uint64_t)a2) & 1) == 0) {
          sub_216B3E4BC(a1);
        }
        if ((sub_216B3E604(a1, (uint64_t)a2) & 1) == 0) {
          sub_216B3E7D0(a1);
        }
      }
      long long v12 = *v5;
      long long v13 = *(_OWORD *)(a1 + 48);
      long long v19 = *v5;
      long long v22 = v13;
      if ((sub_216B07FF4(a1) & 1) == 0) {
        goto LABEL_34;
      }
    }
  }
  else
  {
LABEL_34:
    long long *v5 = v19;
    *(_OWORD *)(a1 + 48) = v22;
  }
  long long *v5 = v12;
  *(_OWORD *)(a1 + 48) = v13;
  return 1;
}

void sub_216B3B8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, long long a18)
{
  *long long v18 = a17;
  v18[1] = a18;
  _Unwind_Resume(a1);
}

__n128 sub_216B3B934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (__n128 *)(a1 + 32);
  __n128 v6 = *(__n128 *)(a1 + 32);
  __n128 v7 = *(__n128 *)(a1 + 48);
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  if (sub_216B3BA0C(a1, a2))
  {
    __n128 v8 = *v4;
    __n128 v9 = v4[1];
    if (sub_2169C5224((void *)a1))
    {
      do
      {
        while ((sub_2169C5224((void *)a1) & 1) != 0)
          ;
        if ((sub_216B3BA0C(a1, a2) & 1) == 0) {
          break;
        }
        __n128 v8 = *v4;
        __n128 v9 = v4[1];
      }
      while ((sub_2169C5224((void *)a1) & 1) != 0);
    }
    __n128 *v4 = v8;
    v4[1] = v9;
    while ((sub_2169C5224((void *)a1) & 1) != 0)
      ;
  }
  else
  {
    __n128 result = v6;
    __n128 *v4 = v6;
    v4[1] = v7;
  }
  return result;
}

void sub_216B3B9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *uint64_t v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B3BA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 48);
  if (sub_216B05F14((void *)a1)
    && (v11 = *v4, v12 = v4[1], v5 = sub_2169C827C((void *)a1), long long *v4 = v11, v4[1] = v12, (v5 & 1) == 0))
  {
    __n128 v7 = (char **)(*(void *)(a2 + 8) - 48);
    uint64_t v6 = 1;
    sub_216B3BAA4(v7, 1);
  }
  else
  {
    uint64_t v6 = 0;
    long long *v4 = v9;
    v4[1] = v10;
  }
  return v6;
}

void sub_216B3BA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_216B3BAA4(char **a1, int a2)
{
  uint64_t v4 = *a1;
  char v5 = a1[1];
  if (v4 == v5)
  {
    __n128 v8 = v4;
  }
  else
  {
    do
    {
      int v6 = *((_DWORD *)v5 - 1);
      if (v6 >= a2)
      {
        BOOL v7 = v6 != 1 && v6 == a2;
        __n128 v8 = v5;
        if (!v7) {
          break;
        }
      }
      sub_216B19B74(a1);
      uint64_t v4 = *a1;
      char v5 = a1[1];
      __n128 v8 = *a1;
    }
    while (*a1 != v5);
  }
  unint64_t v9 = (unint64_t)a1[2];
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v11 = (v8 - v4) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v13 = v9 - (void)v4;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      long long v15 = (char *)sub_21677EA28((uint64_t)(a1 + 2), v14);
      uint64_t v4 = *a1;
      __n128 v8 = a1[1];
    }
    else
    {
      long long v15 = 0;
    }
    long long v16 = &v15[4 * v11];
    long long v17 = &v15[4 * v14];
    *(_DWORD *)long long v16 = a2;
    long long v10 = v16 + 4;
    while (v8 != v4)
    {
      int v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v4) {
      operator delete(v4);
    }
  }
  else
  {
    *(_DWORD *)__n128 v8 = a2;
    long long v10 = v8 + 4;
  }
  a1[1] = v10;
}

uint64_t sub_216B3BBC8(uint64_t a1, std::string *a2)
{
  uint64_t v4 = (long long *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 32);
  long long v12 = *(_OWORD *)(a1 + 48);
  if (sub_216B3BFDC(a1, a2) && (char v5 = *(unsigned char **)(a1 + 32), v5 != *(unsigned char **)(a1 + 64)) && *v5 == 58)
  {
    uint64_t v6 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v5 + 1;
    *(void *)(a1 + 40) = v6;
    ++*(void *)(a1 + 56);
    if (!sub_216B3C360(a1, (uint64_t)a2)) {
      sub_216B3DB78(a1);
    }
    long long v13 = *v4;
    long long v14 = v4[1];
    BOOL v7 = *(unsigned char **)(a1 + 32);
    if (v7 != *(unsigned char **)(a1 + 64))
    {
      do
      {
        if (*v7 != 44) {
          break;
        }
        uint64_t v8 = *(void *)(a1 + 40) + 1;
        *(void *)(a1 + 32) = v7 + 1;
        *(void *)(a1 + 40) = v8;
        ++*(void *)(a1 + 56);
        if ((sub_216B3DAE4(a1, (uint64_t)a2) & 1) == 0) {
          break;
        }
        long long v13 = *v4;
        long long v14 = v4[1];
        BOOL v7 = *(unsigned char **)(a1 + 32);
      }
      while (v7 != *(unsigned char **)(a1 + 64));
      long long *v4 = v13;
      v4[1] = v14;
    }
    uint64_t v9 = 1;
    sub_216B3DCC0((uint64_t)a2, 1);
  }
  else
  {
    uint64_t v9 = 0;
    long long *v4 = v11;
    v4[1] = v12;
  }
  return v9;
}

void sub_216B3BCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12)
{
  _OWORD *v12 = a11;
  v12[1] = a12;
  _OWORD *v12 = a9;
  v12[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B3BD10(uint64_t a1, std::string *a2)
{
  uint64_t v4 = (long long *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 48);
  if (!sub_216B3BFDC(a1, a2)) {
    goto LABEL_14;
  }
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  char v5 = *(unsigned char **)(a1 + 32);
  if (v5 == *(unsigned char **)(a1 + 64) || *v5 != 40)
  {
LABEL_14:
    uint64_t result = 0;
    long long *v4 = v10;
    v4[1] = v11;
    return result;
  }
  uint64_t v6 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v5 + 1;
  *(void *)(a1 + 40) = v6;
  ++*(void *)(a1 + 56);
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  long long v12 = *v4;
  long long v13 = v4[1];
  if (sub_216B3DEA4(a1, (uint64_t)a2))
  {
    long long v14 = *v4;
    long long v16 = v4[1];
    if (sub_216B07970((void *)a1))
    {
      do
      {
        if ((sub_216B3DEA4(a1, (uint64_t)a2) & 1) == 0) {
          break;
        }
        long long v14 = *v4;
        long long v16 = v4[1];
      }
      while ((sub_216B07970((void *)a1) & 1) != 0);
    }
    long long *v4 = v14;
    v4[1] = v16;
    long long v15 = *v4;
    long long v17 = v4[1];
    if (sub_216B07970((void *)a1) && sub_216B3E0D0(a1, a2)) {
      goto LABEL_13;
    }
LABEL_16:
    long long *v4 = v15;
    v4[1] = v17;
    goto LABEL_17;
  }
  long long *v4 = v12;
  v4[1] = v13;
  long long v15 = *v4;
  long long v17 = v4[1];
  if (!sub_216B3E0D0(a1, a2)) {
    goto LABEL_16;
  }
LABEL_13:
  sub_216B3E2F0(a1, a2);
LABEL_17:
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  uint64_t v8 = *(unsigned char **)(a1 + 32);
  if (v8 == *(unsigned char **)(a1 + 64) || *v8 != 41) {
    sub_216B3E370(a1);
  }
  uint64_t v9 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v8 + 1;
  *(void *)(a1 + 40) = v9;
  ++*(void *)(a1 + 56);
  sub_216B3DCC0((uint64_t)a2, 2);
  return 1;
}

void sub_216B3BEDC()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_216B3BF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14)
{
  _OWORD *v14 = a13;
  v14[1] = a14;
  _OWORD *v14 = a9;
  v14[1] = a10;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B3BF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (_OWORD *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 48);
  uint64_t v4 = sub_216B3C0C0(a1);
  if (v4)
  {
    sub_216B3DCC0(a2, 0);
  }
  else
  {
    *uint64_t v3 = v6;
    v3[1] = v7;
  }
  return v4;
}

void sub_216B3BFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B3BFDC(uint64_t a1, std::string *a2)
{
  uint64_t v4 = *(char **)(a1 + 32);
  uint64_t v5 = a1 + 40;
  long long v8 = *(_OWORD *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v6 = sub_216B3C0C0(a1);
  if (v6)
  {
    sub_21682E90C(&__str, v4, *(char **)(a1 + 32), *(void *)(a1 + 32) - (void)v4);
    std::string::operator=(a2 + 1, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(void *)(a1 + 32) = v4;
    *(_OWORD *)uint64_t v5 = v8;
    *(void *)(v5 + 16) = v9;
  }
  return v6;
}

void sub_216B3C088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  *(void *)(v16 + 32) = v17;
  *(_OWORD *)uint64_t v18 = a9;
  *(void *)(v18 + 16) = a10;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B3C0C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 40;
  long long v13 = *(_OWORD *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 56);
  if (!sub_2169C89C8((void *)a1)) {
    goto LABEL_8;
  }
  while ((sub_2169C827C((void *)a1) & 1) != 0)
    ;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v8 = v2;
  *(void *)uint64_t v9 = v2;
  *(_OWORD *)&v9[8] = v13;
  *(void *)&v9[24] = v14;
  uint64_t v10 = v4;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_216778F24(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 88);
  }
  long long v15 = *(_OWORD *)v9;
  long long v16 = *(_OWORD *)&v9[16];
  int v5 = sub_216B3C1DC((uint64_t)&v8);
  int v6 = v5;
  *(_OWORD *)uint64_t v9 = v15;
  *(_OWORD *)&v9[16] = v16;
  if (SHIBYTE(v12) < 0)
  {
    operator delete((void *)__p);
    if (v6) {
      goto LABEL_8;
    }
  }
  else if (v5)
  {
LABEL_8:
    uint64_t result = 0;
    *(void *)(a1 + 32) = v2;
    *(_OWORD *)uint64_t v3 = v13;
    *(void *)(v3 + 16) = v14;
    return result;
  }
  return 1;
}

void sub_216B3C1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, uint64_t a20)
{
  *(void *)(v20 + 32) = v22;
  *(_OWORD *)uint64_t v21 = a19;
  *(void *)(v21 + 16) = a20;
  _Unwind_Resume(a1);
}

uint64_t sub_216B3C1DC(uint64_t a1)
{
  uint64_t v2 = (long long *)(a1 + 8);
  long long v10 = *(_OWORD *)(a1 + 8);
  long long v15 = *(_OWORD *)(a1 + 24);
  if (sub_216B06644((void *)a1))
  {
    long long v20 = *v2;
    long long v26 = v2[1];
    char v3 = sub_216A40368((void *)a1);
    *uint64_t v2 = v20;
    v2[1] = v26;
    if ((v3 & 1) == 0) {
      return *(void *)(a1 + 8) == *(void *)(a1 + 40);
    }
  }
  *uint64_t v2 = v10;
  v2[1] = v15;
  long long v11 = *v2;
  long long v16 = v2[1];
  if (sub_216B066A8((void *)a1))
  {
    long long v21 = *v2;
    long long v27 = v2[1];
    char v4 = sub_216A40368((void *)a1);
    *uint64_t v2 = v21;
    v2[1] = v27;
    if ((v4 & 1) == 0) {
      return *(void *)(a1 + 8) == *(void *)(a1 + 40);
    }
  }
  *uint64_t v2 = v11;
  v2[1] = v16;
  long long v12 = *v2;
  long long v17 = v2[1];
  if (sub_216B0670C((void *)a1))
  {
    long long v22 = *v2;
    long long v28 = v2[1];
    char v5 = sub_216A40368((void *)a1);
    *uint64_t v2 = v22;
    v2[1] = v28;
    if ((v5 & 1) == 0) {
      return *(void *)(a1 + 8) == *(void *)(a1 + 40);
    }
  }
  *uint64_t v2 = v12;
  v2[1] = v17;
  long long v13 = *v2;
  long long v18 = v2[1];
  if (sub_216B06764((void *)a1))
  {
    long long v23 = *v2;
    long long v29 = v2[1];
    char v6 = sub_216A40368((void *)a1);
    *uint64_t v2 = v23;
    v2[1] = v29;
    if ((v6 & 1) == 0) {
      return *(void *)(a1 + 8) == *(void *)(a1 + 40);
    }
  }
  *uint64_t v2 = v13;
  v2[1] = v18;
  long long v14 = *v2;
  long long v19 = v2[1];
  if (sub_216A4FE40((void *)a1))
  {
    long long v24 = *v2;
    long long v30 = v2[1];
    char v7 = sub_216A40368((void *)a1);
    *uint64_t v2 = v24;
    v2[1] = v30;
    if ((v7 & 1) == 0) {
      return *(void *)(a1 + 8) == *(void *)(a1 + 40);
    }
  }
  *uint64_t v2 = v14;
  v2[1] = v19;
  uint64_t result = sub_216A50280((void *)a1);
  if (!result) {
    return result;
  }
  long long v25 = *v2;
  long long v31 = v2[1];
  char v9 = sub_216A40368((void *)a1);
  *uint64_t v2 = v25;
  v2[1] = v31;
  return (v9 & 1) == 0 && *(void *)(a1 + 8) == *(void *)(a1 + 40);
}

uint64_t sub_216B3C360(uint64_t a1, uint64_t a2)
{
  if ((sub_216B3C3F4(a1, a2) & 1) == 0 && (sub_216B3C704(a1, a2) & 1) == 0 && (sub_216B3C88C(a1, a2) & 1) == 0)
  {
    long long v4 = *(_OWORD *)(a1 + 48);
    v6[0] = *(_OWORD *)(a1 + 32);
    v6[1] = v4;
    uint64_t v7 = a1 + 32;
    sub_216B3CFC4(a1);
    sub_216B3D3F4((char **)v6, a1, a2);
  }
  return 1;
}

void sub_216B3C3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B3C3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1 + 32;
  long long v4 = *(char **)(a1 + 32);
  long long v24 = *(_OWORD *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 56);
  if (v4 != *(char **)(a1 + 64) && *v4 == 45)
  {
    uint64_t v6 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v4 + 1;
    *(void *)(a1 + 40) = v6;
    ++*(void *)(a1 + 56);
  }
  uint64_t v7 = (_OWORD *)(a1 + 40);
  long long v8 = *(_OWORD *)(a1 + 48);
  long long v28 = *(_OWORD *)v5;
  long long v29 = v8;
  if (!sub_216B06AD0((void *)a1)
    || (long long v9 = *(_OWORD *)(v5 + 16),
        *(_OWORD *)long long __p = *(_OWORD *)v5,
        long long v27 = v9,
        char v10 = sub_2169C827C((void *)a1),
        long long v11 = v27,
        *(_OWORD *)uint64_t v5 = *(_OWORD *)__p,
        *(_OWORD *)(v5 + 16) = v11,
        (v10 & 1) != 0))
  {
    long long v12 = v29;
    *(_OWORD *)uint64_t v5 = v28;
    *(_OWORD *)(v5 + 16) = v12;
    if (sub_216B06B34((void *)a1))
    {
      long long v13 = *(unsigned char **)(a1 + 32);
      if (v13 != *(unsigned char **)(a1 + 64) && *v13 == 46)
      {
        uint64_t v14 = *(void *)(a1 + 40) + 1;
        *(void *)(a1 + 32) = v13 + 1;
        *(void *)(a1 + 40) = v14;
        ++*(void *)(a1 + 56);
        if (sub_216B06B34((void *)a1))
        {
          long long v15 = *(_OWORD *)(v5 + 16);
          *(_OWORD *)long long __p = *(_OWORD *)v5;
          long long v27 = v15;
          if (sub_216B06D04((void *)a1))
          {
            sub_216B06DA0((void *)a1);
            if ((sub_216B06B34((void *)a1) & 1) == 0) {
              sub_216B3CA3C(a1);
            }
          }
          else
          {
            long long v17 = v27;
            *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
            *(_OWORD *)(v5 + 16) = v17;
          }
          goto LABEL_18;
        }
LABEL_15:
        sub_216B3CA3C(a1);
      }
      if (sub_216B06D04((void *)a1))
      {
        sub_216B06DA0((void *)a1);
        if (sub_216B06B34((void *)a1)) {
          goto LABEL_18;
        }
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    *(void *)uint64_t v5 = v4;
    *uint64_t v7 = v24;
    *(void *)(v5 + 24) = v25;
    return result;
  }
LABEL_18:
  sub_21682E90C(__p, v4, *(char **)v5, *(void *)v5 - (void)v4);
  if (SBYTE7(v27) < 0)
  {
    if (__p[1] != (void *)3)
    {
      if (__p[1] != (void *)4) {
        goto LABEL_31;
      }
      long long v19 = (void **)__p[0];
      goto LABEL_25;
    }
    if (*(_WORD *)__p[0] != 28265 || *((unsigned char *)__p[0] + 2) != 102) {
      goto LABEL_31;
    }
LABEL_37:
    unint64_t v20 = 0x7FF0000000000000;
    goto LABEL_38;
  }
  if (BYTE7(v27) == 3)
  {
    if (LOWORD(__p[0]) != 28265 || BYTE2(__p[0]) != 102) {
      goto LABEL_31;
    }
    goto LABEL_37;
  }
  if (BYTE7(v27) != 4) {
    goto LABEL_31;
  }
  long long v19 = __p;
LABEL_25:
  if (*(_DWORD *)v19 == 1718511917)
  {
    unint64_t v20 = 0xFFF0000000000000;
LABEL_38:
    double v22 = *(double *)&v20;
    goto LABEL_39;
  }
LABEL_31:
  double v22 = pxrInternal__aapl__pxrReserved__::TfStringToDouble((char *)__p, v18);
LABEL_39:
  *((void *)&v28 + 1) = &unk_26C750B03;
  *(double *)&long long v28 = v22;
  sub_216B3CB34(a2, &v28);
  sub_2168EE084((uint64_t)&v28);
  if (SBYTE7(v27) < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_216B3C6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, long long __p, long long a13, char a14)
{
  *long long v15 = __p;
  v15[1] = a13;
  *(void *)long long v15 = v14;
  *(_OWORD *)uint64_t v16 = a9;
  *(void *)(v16 + 16) = a10;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B3C704(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v4 = *(char **)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 56);
  if (v4 != *(char **)(a1 + 64) && *v4 == 45)
  {
    uint64_t v5 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v4 + 1;
    *(void *)(a1 + 40) = v5;
    ++*(void *)(a1 + 56);
  }
  uint64_t v6 = (_OWORD *)(a1 + 40);
  if (!sub_216B06B34((void *)a1)) {
    goto LABEL_8;
  }
  char v12 = 0;
  sub_21682E90C(__p, v4, *(char **)(a1 + 32), *(void *)(a1 + 32) - (void)v4);
  long long v8 = (void *)pxrInternal__aapl__pxrReserved__::TfStringToInt64((char *)__p, &v12, v7);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (!v12)
  {
    __p[0] = v8;
    __p[1] = &unk_26C750823;
    sub_216B3CB34(a2, __p);
    sub_2168EE084((uint64_t)__p);
    return 1;
  }
  else
  {
LABEL_8:
    uint64_t result = 0;
    *(void *)(a1 + 32) = v4;
    *uint64_t v6 = v10;
    *(void *)(a1 + 56) = v11;
  }
  return result;
}

void sub_216B3C844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_2168EE084((uint64_t)&__p);
  *(void *)(v17 + 32) = v18;
  *(_OWORD *)uint64_t v19 = a9;
  *(void *)(v19 + 16) = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B3C88C(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1 + 32;
  long long v4 = *(char **)(a1 + 32);
  uint64_t v6 = a1 + 40;
  long long v18 = *(_OWORD *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v7 = *(_OWORD *)(a1 + 48);
  long long v22 = *(_OWORD *)(a1 + 32);
  long long v23 = v7;
  if (sub_216B06E3C((void *)a1))
  {
    long long v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)long long __p = *(_OWORD *)v5;
    long long v21 = v8;
    char v9 = sub_2169C827C((void *)a1);
    long long v10 = v21;
    *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
    *(_OWORD *)(v5 + 16) = v10;
    if ((v9 & 1) == 0) {
      goto LABEL_6;
    }
  }
  long long v11 = v23;
  *(_OWORD *)uint64_t v5 = v22;
  *(_OWORD *)(v5 + 16) = v11;
  if (!sub_216B06E9C((void *)a1)) {
    goto LABEL_5;
  }
  long long v12 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)long long __p = *(_OWORD *)v5;
  long long v21 = v12;
  char v13 = sub_2169C827C((void *)a1);
  long long v14 = v21;
  *(_OWORD *)uint64_t v5 = *(_OWORD *)__p;
  *(_OWORD *)(v5 + 16) = v14;
  if ((v13 & 1) == 0)
  {
LABEL_6:
    sub_21682E90C(__p, v4, *(char **)v5, *(void *)v5 - (void)v4);
    if ((SBYTE7(v21) & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    BOOL v17 = *(unsigned char *)v16 == 116;
    *((void *)&v22 + 1) = &unk_26C7501AB;
    LOBYTE(v22) = v17;
    sub_216B3CB34(a2, &v22);
    sub_2168EE084((uint64_t)&v22);
    if (SBYTE7(v21) < 0) {
      operator delete(__p[0]);
    }
    return 1;
  }
  else
  {
LABEL_5:
    uint64_t result = 0;
    *(void *)uint64_t v5 = v4;
    *(_OWORD *)uint64_t v6 = v18;
    *(void *)(v6 + 16) = v19;
  }
  return result;
}

void sub_216B3C9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19)
{
  sub_2168EE084((uint64_t)&a19);
  if (a17 < 0) {
    operator delete(__p);
  }
  *long long v21 = v19;
  *(_OWORD *)uint64_t v20 = a9;
  *(void *)(v20 + 16) = a10;
  _Unwind_Resume(a1);
}

void sub_216B3CA3C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_216B2A884(&v5);
  char v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B3CAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_216B3CB34(uint64_t a1, void *a2)
{
  void v8[2] = *MEMORY[0x263EF8340];
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  sub_2168EE4C4(v8, a2);
  unint64_t v3 = *(void *)(a1 + 80);
  if (v3 >= *(void *)(a1 + 88))
  {
    uint64_t v5 = sub_216B3CC64((uint64_t *)(a1 + 72), (long long *)__p);
  }
  else
  {
    long long v4 = *(_OWORD *)__p;
    *(void *)(v3 + 16) = v7;
    *(_OWORD *)unint64_t v3 = v4;
    __p[1] = 0;
    uint64_t v7 = 0;
    __p[0] = 0;
    sub_2168EDFA8((void *)(v3 + 24), v8);
    uint64_t v5 = v3 + 40;
  }
  *(void *)(a1 + 80) = v5;
  sub_2168EE084((uint64_t)v8);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    **(unsigned char **)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 71) = 0;
  }
}

void sub_216B3CC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_216B3CC64(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_2168720A4(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[40 * v9];
  long long v12 = *a2;
  *((void *)v11 + 2) = *((void *)a2 + 2);
  *(_OWORD *)long long v11 = v12;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  sub_2168EDFA8((void *)v11 + 3, (void *)a2 + 3);
  uint64_t v15[2] = v11 + 40;
  sub_216B3CD80(a1, v15);
  uint64_t v13 = a1[1];
  sub_216B3CF48(v15);
  return v13;
}

void sub_216B3CD6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B3CF48((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B3CD80(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216B3CDF8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216B3CDF8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    unint64_t v9 = a3 - 2;
    do
    {
      long long v10 = v9 - 3;
      long long v11 = *(_OWORD *)(v9 - 3);
      *(void *)(v7 - 24) = *(v9 - 1);
      *(_OWORD *)(v7 - 40) = v11;
      *(v9 - 2) = 0;
      *(v9 - 1) = 0;
      *(v9 - 3) = 0;
      sub_2168EDFA8((void *)(v7 - 16), v9);
      uint64_t v7 = *((void *)&v17 + 1) - 40;
      *((void *)&v17 + 1) -= 40;
      v9 -= 5;
    }
    while (v10 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_216B3CEBC((uint64_t)v14);
  return v12;
}

uint64_t sub_216B3CEBC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216B3CEF4((uint64_t *)a1);
  }
  return a1;
}

void sub_216B3CEF4(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_2169B5DA0(v3, v1);
      v1 += 40;
    }
    while (v1 != v2);
  }
}

void **sub_216B3CF48(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_216B3CF7C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 40;
    sub_2169B5DA0(v4, i - 40);
  }
}

void sub_216B3CFC4(uint64_t a1)
{
  uint64_t v3 = (unsigned __int8 **)(a1 + 32);
  uint64_t v2 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 64);
  if (v2 == v4) {
    goto LABEL_29;
  }
  int v5 = *v2;
  if (v5 == 39)
  {
    uint64_t v6 = v2 + 1;
    uint64_t v7 = (void *)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v20;
    unint64_t v9 = (void *)(a1 + 56);
    long long v21 = (long long *)(a1 + 72);
    ++*(void *)(a1 + 56);
    while (1)
    {
      if (v6 != v4)
      {
        int v22 = *v6;
        if (v22 == 92)
        {
          *uint64_t v3 = v6 + 1;
          uint64_t v25 = (*v7)++;
          uint64_t v26 = (*v9)++;
          if (v6 + 1 == v4 || v6[1] != 39)
          {
            if ((sub_216B0769C((void *)a1) & 1) == 0) {
              sub_216B3D854(a1);
            }
          }
          else
          {
            *uint64_t v3 = v6 + 2;
            *uint64_t v7 = v25 + 2;
            *unint64_t v9 = v26 + 2;
          }
          goto LABEL_56;
        }
        if (v22 == 39)
        {
LABEL_57:
          *uint64_t v3 = v6 + 1;
          ++*v7;
          ++*v9;
          return;
        }
      }
      long long v35 = *(_OWORD *)v7;
      unint64_t v36 = *(unsigned __int8 **)(a1 + 56);
      if (!sub_216B07744((void *)a1))
      {
        *uint64_t v3 = v6;
        *(_OWORD *)uint64_t v7 = v35;
        *(void *)(a1 + 56) = v36;
LABEL_61:
        sub_216B3D99C(a1);
      }
      long long v23 = *(unsigned __int8 **)(a1 + 32);
      uint64_t v32 = v23;
      if (*(char *)(a1 + 95) < 0)
      {
        sub_216778F24(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
        uint64_t v24 = v6;
        long long v23 = v32;
      }
      else
      {
        long long __p = *v21;
        uint64_t v34 = *(void *)(a1 + 88);
        uint64_t v24 = v6;
      }
      if (v24 != v23 && (v28 = *v24, long long v27 = v24 + 1, v28 == 39) && v27 == v23)
      {
        int v29 = 0;
        uint64_t v30 = v3;
      }
      else
      {
        uint64_t v30 = 0;
        int v29 = 1;
      }
      if (SHIBYTE(v34) < 0)
      {
        operator delete((void *)__p);
        if (v30)
        {
LABEL_50:
          void *v30 = v6;
          *(_OWORD *)(v30 + 1) = v35;
          v30[3] = v36;
          if ((v29 & 1) == 0) {
            goto LABEL_61;
          }
          goto LABEL_56;
        }
      }
      else if (v30)
      {
        goto LABEL_50;
      }
      if (!v29) {
        goto LABEL_61;
      }
LABEL_56:
      uint64_t v6 = *(unsigned __int8 **)(a1 + 32);
      uint64_t v4 = *(unsigned __int8 **)(a1 + 64);
    }
  }
  if (v5 == 34)
  {
    uint64_t v6 = v2 + 1;
    uint64_t v7 = (void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v8;
    unint64_t v9 = (void *)(a1 + 56);
    long long v10 = (long long *)(a1 + 72);
    ++*(void *)(a1 + 56);
    while (1)
    {
      if (v6 != v4)
      {
        int v11 = *v6;
        if (v11 == 92)
        {
          *uint64_t v3 = v6 + 1;
          uint64_t v14 = (*v7)++;
          uint64_t v15 = (*v9)++;
          if (v6 + 1 == v4 || v6[1] != 34)
          {
            if ((sub_216B0769C((void *)a1) & 1) == 0) {
              sub_216B3D5C4(a1);
            }
          }
          else
          {
            *uint64_t v3 = v6 + 2;
            *uint64_t v7 = v14 + 2;
            *unint64_t v9 = v15 + 2;
          }
          goto LABEL_28;
        }
        if (v11 == 34) {
          goto LABEL_57;
        }
      }
      long long v35 = *(_OWORD *)v7;
      unint64_t v36 = *(unsigned __int8 **)(a1 + 56);
      if (!sub_216B07744((void *)a1))
      {
        *uint64_t v3 = v6;
        *(_OWORD *)uint64_t v7 = v35;
        *(void *)(a1 + 56) = v36;
LABEL_59:
        sub_216B3D70C(a1);
      }
      uint64_t v12 = *(unsigned __int8 **)(a1 + 32);
      long long v31 = v12;
      if (*(char *)(a1 + 95) < 0)
      {
        sub_216778F24(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
        uint64_t v13 = v6;
        uint64_t v12 = v31;
      }
      else
      {
        long long __p = *v10;
        uint64_t v34 = *(void *)(a1 + 88);
        uint64_t v13 = v6;
      }
      if (v13 != v12 && (v17 = *v13, long long v16 = v13 + 1, v17 == 34) && v16 == v12)
      {
        int v18 = 0;
        uint64_t v19 = v3;
      }
      else
      {
        uint64_t v19 = 0;
        int v18 = 1;
      }
      if (SHIBYTE(v34) < 0)
      {
        operator delete((void *)__p);
        if (v19)
        {
LABEL_22:
          *uint64_t v19 = v6;
          *(_OWORD *)(v19 + 1) = v35;
          v19[3] = v36;
          if ((v18 & 1) == 0) {
            goto LABEL_59;
          }
          goto LABEL_28;
        }
      }
      else if (v19)
      {
        goto LABEL_22;
      }
      if (!v18) {
        goto LABEL_59;
      }
LABEL_28:
      uint64_t v6 = *(unsigned __int8 **)(a1 + 32);
      uint64_t v4 = *(unsigned __int8 **)(a1 + 64);
    }
  }
  do
  {
LABEL_29:
    while ((sub_2169C827C((void *)a1) & 1) != 0)
      ;
  }
  while ((sub_216B077AC((void *)a1) & 1) != 0);
}

void sub_216B3D3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, uint64_t a20)
{
  *uint64_t v20 = v22;
  *(_OWORD *)uint64_t v21 = a19;
  *(void *)(v21 + 16) = a20;
  _Unwind_Resume(a1);
}

void sub_216B3D3F4(char **a1, uint64_t a2, uint64_t a3)
{
  void v14[2] = *(unsigned int **)MEMORY[0x263EF8340];
  sub_21682E90C(&v11, *a1, *(char **)(a2 + 32), *(void *)(a2 + 32) - (void)*a1);
  if (((char)v13 & 0x80000000) == 0)
  {
    if (v13 >= 2u)
    {
      if (v11 == 34)
      {
        if (*((unsigned char *)&v11 + v13 - 1) == 34) {
          goto LABEL_15;
        }
      }
      else if (v11 == 39)
      {
        uint64_t v4 = (char *)&v11;
        unint64_t v5 = v13;
        goto LABEL_11;
      }
    }
    uint64_t v7 = 0;
    goto LABEL_19;
  }
  unint64_t v5 = v12;
  if (v12 <= 1)
  {
LABEL_10:
    uint64_t v7 = 0;
LABEL_17:
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)v11;
    goto LABEL_20;
  }
  uint64_t v4 = (char *)v11;
  int v6 = *(unsigned __int8 *)v11;
  if (v6 != 39)
  {
    if (v6 == 34 && *((char *)v11 + v12 - 1) == 34) {
      goto LABEL_15;
    }
    goto LABEL_10;
  }
LABEL_11:
  if (v4[v5 - 1] != 39)
  {
    uint64_t v7 = 0;
    if ((v13 & 0x80) != 0) {
      goto LABEL_16;
    }
    goto LABEL_19;
  }
LABEL_15:
  uint64_t v7 = 1;
  if ((v13 & 0x80) != 0)
  {
LABEL_16:
    unint64_t v5 = v12;
    goto LABEL_17;
  }
LABEL_19:
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)&v11;
  unint64_t v5 = v13;
LABEL_20:
  pxrInternal__aapl__pxrReserved__::Sdf_EvalQuotedString(v8, (const char *)v5, v7, 0, (unsigned __int8 *)__p);
  v14[1] = (unsigned int *)&off_26C750BB8;
  sub_21691B31C(v14, (uint64_t)__p);
  sub_216B3CB34(a3, v14);
  sub_2168EE084((uint64_t)v14);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v13 < 0) {
    operator delete(v11);
  }
}

void sub_216B3D578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_2168EE084(v21 - 40);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_216B3D5C4(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  uint64_t v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B3D69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_216B3D70C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc34EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc34EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  uint64_t v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B3D7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_216B3D854(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17EscapedIN3tao21PXR_INTERNAL_NS_pegtl5ascii3oneIJLc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  uint64_t v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B3D92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_216B3D99C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc39EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl5untilINS0_5ascii3oneIJLc39EEEEJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_110StringCharIS4_EEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  uint64_t v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B3DA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_216B3DAE4(uint64_t a1, uint64_t a2)
{
  if ((sub_216B3C3F4(a1, a2) & 1) == 0 && (sub_216B3C704(a1, a2) & 1) == 0 && (sub_216B3C88C(a1, a2) & 1) == 0)
  {
    long long v4 = *(_OWORD *)(a1 + 48);
    v6[0] = *(_OWORD *)(a1 + 32);
    v6[1] = v4;
    uint64_t v7 = a1 + 32;
    sub_216B3CFC4(a1);
    sub_216B3D3F4((char **)v6, a1, a2);
  }
  return 1;
}

void sub_216B3DB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *char v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_216B3DB78(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredColonArgsE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113PredColonArgsE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  long long v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B3DC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_216B3DCC0(uint64_t a1, int a2)
{
  sub_216B3DD48((uint64_t *)(*(void *)(a1 + 8) - 48), a2, a1 + 24, (long long *)(a1 + 72));
  if (*(char *)(a1 + 47) < 0)
  {
    **(unsigned char **)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 47) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 72);
  for (uint64_t i = *(void *)(a1 + 80); i != v4; sub_2169B5DA0(a1 + 88, i))
    i -= 40;
  *(void *)(a1 + 80) = v4;
}

void sub_216B3DD48(uint64_t *a1, int a2, uint64_t a3, long long *a4)
{
  int v9 = a2;
  *(_OWORD *)char v10 = *(_OWORD *)a3;
  uint64_t v11 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  long long v12 = *a4;
  uint64_t v13 = *((void *)a4 + 2);
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPredicateExpression::MakeCall((uint64_t)&v9, (char **)v14);
  unint64_t v5 = a1[4];
  if (v5 >= a1[5])
  {
    uint64_t v7 = sub_216B09D80(a1 + 3, (uint64_t)v14);
    int v8 = SHIBYTE(v19);
    a1[4] = v7;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    *(void *)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(_OWORD *)unint64_t v5 = *(_OWORD *)v14;
    *(void *)(v5 + 16) = v15;
    v14[0] = 0;
    v14[1] = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    *(_OWORD *)(v5 + 24) = v16;
    *(void *)(v5 + 40) = v17;
    uint64_t v15 = 0;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    long long v6 = *(_OWORD *)__p;
    *(void *)(v5 + 64) = v19;
    *(_OWORD *)(v5 + 48) = v6;
    __p[1] = 0;
    uint64_t v19 = 0;
    __p[0] = 0;
    a1[4] = v5 + 72;
  }
  uint64_t v20 = (void **)&v16;
  sub_2169B5C28(&v20);
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  uint64_t v20 = (void **)&v12;
  sub_2169B5D08(&v20);
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
}

void sub_216B3DE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_216B00F28((uint64_t)va1);
  sub_216B19E98((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B3DEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  char v5 = sub_216B3DF30((void *)a1);
  _OWORD *v4 = v7;
  v4[1] = v8;
  if (v5) {
    return 0;
  }

  return sub_216B3DAE4(a1, a2);
}

void sub_216B3DF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *uint64_t v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B3DF30(void *a1)
{
  uint64_t result = sub_216B3DFB4((uint64_t)a1);
  if (result)
  {
    while ((sub_2169C5224(a1) & 1) != 0)
      ;
    uint64_t v3 = (unsigned char *)a1[4];
    if (v3 == (unsigned char *)a1[8] || *v3 != 61)
    {
      return 0;
    }
    else
    {
      uint64_t v4 = a1[5] + 1;
      a1[4] = v3 + 1;
      a1[5] = v4;
      ++a1[7];
      while ((sub_2169C5224(a1) & 1) != 0)
        ;
      return 1;
    }
  }
  return result;
}

uint64_t sub_216B3DFB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 40;
  long long v13 = *(_OWORD *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 56);
  if (!sub_2169C89C8((void *)a1)) {
    goto LABEL_8;
  }
  while ((sub_2169C827C((void *)a1) & 1) != 0)
    ;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v8 = v2;
  *(void *)uint64_t v9 = v2;
  *(_OWORD *)&v9[8] = v13;
  *(void *)&v9[24] = v14;
  uint64_t v10 = v4;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_216778F24(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 88);
  }
  long long v15 = *(_OWORD *)v9;
  long long v16 = *(_OWORD *)&v9[16];
  int v5 = sub_216B3C1DC((uint64_t)&v8);
  int v6 = v5;
  *(_OWORD *)uint64_t v9 = v15;
  *(_OWORD *)&v9[16] = v16;
  if (SHIBYTE(v12) < 0)
  {
    operator delete((void *)__p);
    if (v6) {
      goto LABEL_8;
    }
  }
  else if (v5)
  {
LABEL_8:
    uint64_t result = 0;
    *(void *)(a1 + 32) = v2;
    *(_OWORD *)uint64_t v3 = v13;
    *(void *)(v3 + 16) = v14;
    return result;
  }
  return 1;
}

void sub_216B3E0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, uint64_t a20)
{
  *(void *)(v20 + 32) = v22;
  *(_OWORD *)uint64_t v21 = a19;
  *(void *)(v21 + 16) = a20;
  _Unwind_Resume(a1);
}

uint64_t sub_216B3E0D0(uint64_t a1, std::string *a2)
{
  uint64_t v4 = *(char **)(a1 + 32);
  int v5 = (std::string *)(a1 + 40);
  std::string v12 = *(std::string *)(a1 + 40);
  uint64_t result = sub_216B3C0C0(a1);
  if (result)
  {
    sub_21682E90C(&__str, v4, *(char **)(a1 + 32), *(void *)(a1 + 32) - (void)v4);
    std::string::operator=(a2 + 2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    while ((sub_2169C5224((void *)a1) & 1) != 0)
      ;
    long long v7 = *(unsigned char **)(a1 + 32);
    if (v7 == *(unsigned char **)(a1 + 64) || *v7 != 61)
    {
      return 0;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v7 + 1;
      *(void *)(a1 + 40) = v8;
      ++*(void *)(a1 + 56);
      while ((sub_2169C5224((void *)a1) & 1) != 0)
        ;
      if ((sub_216B3C360(a1, (uint64_t)a2) & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x28uLL);
        sub_216B29BC0(&v12);
        uint64_t v10 = std::string::insert(&v12, 0, "parse error matching ");
        long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        sub_2169C5604((uint64_t)exception, (uint64_t)&__str, a1);
        __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
      }
      return 1;
    }
  }
  else
  {
    *(void *)(a1 + 32) = v4;
    std::string *v5 = v12;
  }
  return result;
}

void sub_216B3E25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a13 < 0)
  {
    operator delete((void *)a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

__n128 sub_216B3E2F0(uint64_t a1, std::string *a2)
{
  uint64_t v4 = (__n128 *)(a1 + 32);
  __n128 v6 = *(__n128 *)(a1 + 32);
  __n128 v7 = *(__n128 *)(a1 + 48);
  if (sub_216B07970((void *)a1))
  {
    do
    {
      if ((sub_216B3E0D0(a1, a2) & 1) == 0) {
        break;
      }
      __n128 v6 = *v4;
      __n128 v7 = v4[1];
    }
    while ((sub_216B07970((void *)a1) & 1) != 0);
  }
  __n128 result = v6;
  __n128 *v4 = v6;
  v4[1] = v7;
  return result;
}

void sub_216B3E364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *uint64_t v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_216B3E370(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_216A59B38(&v5);
  uint64_t v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B3E408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_216B3E468(void *a1, uint64_t a2)
{
  while ((sub_2169C5224(a1) & 1) != 0)
    ;
  uint64_t v4 = sub_216B3B5F4(a1, a2);
  if (v4)
  {
    while ((sub_2169C5224(a1) & 1) != 0)
      ;
  }
  return v4;
}

void sub_216B3E4BC(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  uint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3padIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18PredExprENS0_5ascii5blankES6_EE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  uint64_t v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B3E594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_216B3E604(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  if ((void)v4 == *(void *)(a1 + 64) || *(unsigned char *)v4 != 41) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 + 1;
  *(void *)(a1 + 40) = v2;
  ++*(void *)(a1 + 56);
  sub_216B3E68C(a2);
  return 1;
}

void sub_216B3E680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *uint64_t v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_216B3E68C(uint64_t a1)
{
  sub_216B19AB8((uint64_t *)(*(void *)(a1 + 8) - 48), (uint64_t)v3);
  uint64_t v2 = *(void *)(a1 + 8);
  sub_216B1995C(a1 + 16, v2 - 48);
  *(void *)(a1 + 8) = v2 - 48;
  sub_216B3E738((uint64_t *)(v2 - 96), (uint64_t)v3);
  if (v6 < 0) {
    operator delete(__p);
  }
  long long v7 = (void **)&v4;
  sub_2169B5C28(&v7);
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
}

void sub_216B3E724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216B3E738(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[4];
  if (v3 >= a1[5])
  {
    uint64_t result = sub_216B09D80(a1 + 3, a2);
  }
  else
  {
    *(void *)unint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = 0;
    *(_OWORD *)unint64_t v3 = *(_OWORD *)a2;
    *(void *)(v3 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(v3 + 24) = 0;
    *(void *)(v3 + 32) = 0;
    *(void *)(v3 + 40) = 0;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(v3 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    long long v4 = *(_OWORD *)(a2 + 48);
    *(void *)(v3 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(v3 + 48) = v4;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 48) = 0;
    uint64_t result = v3 + 72;
  }
  a1[4] = result;
  return result;
}

void sub_216B3E7D0(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  unint64_t v3 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v3)
  {
    sub_216779094(&v6, v3);
    free(v3);
  }
  else
  {
    sub_216779094(&v6, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114PredCloseGroupE" & 0x7FFFFFFFFFFFFFFFLL));
  }
  long long v4 = std::string::insert(&v6, 0, "parse error matching ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
  long long v7 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v7, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B3E8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_216B3E918(void *a1, uint64_t a2)
{
  sub_216B05E1C((uint64_t)a1);
  if ((sub_216B3EA04((uint64_t)a1) & 1) != 0
    || (sub_216B3EAF0((uint64_t)a1) & 1) != 0
    || (sub_216B3ED38((uint64_t)a1) & 1) != 0)
  {
    return 1;
  }
  long long v4 = (unsigned char *)a1[4];
  if (v4 != (unsigned char *)a1[8] && *v4 == 40)
  {
    uint64_t v5 = a1[5] + 1;
    a1[4] = v4 + 1;
    a1[5] = v5;
    ++a1[7];
    if ((sub_216B3F540((uint64_t)a1, a2) & 1) == 0) {
      sub_216B3E4BC((uint64_t)a1);
    }
    std::string v6 = (unsigned char *)a1[4];
    if (v6 == (unsigned char *)a1[8] || *v6 != 41) {
      sub_216B3E7D0((uint64_t)a1);
    }
    uint64_t v7 = a1[5] + 1;
    a1[4] = v6 + 1;
    a1[5] = v7;
    ++a1[7];
    return 1;
  }
  return 0;
}

uint64_t sub_216B3EA04(uint64_t a1)
{
  uint64_t v2 = (_OWORD *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 48);
  if (sub_216B3DFB4(a1) && (unint64_t v3 = *(unsigned char **)(a1 + 32), v3 != *(unsigned char **)(a1 + 64)) && *v3 == 58)
  {
    do
    {
      uint64_t v4 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v3 + 1;
      *(void *)(a1 + 40) = v4;
      ++*(void *)(a1 + 56);
      sub_216B3EE54((__n128 *)a1);
      unint64_t v3 = *(unsigned char **)(a1 + 32);
    }
    while (v3 != *(unsigned char **)(a1 + 64) && *v3 == 44);
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *uint64_t v2 = v6;
    v2[1] = v7;
  }
  return result;
}

void sub_216B3EAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *uint64_t v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B3EAF0(uint64_t a1)
{
  uint64_t v2 = (long long *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  if (!sub_216B3DFB4(a1)) {
    goto LABEL_14;
  }
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  unint64_t v3 = *(unsigned char **)(a1 + 32);
  if (v3 == *(unsigned char **)(a1 + 64) || *v3 != 40)
  {
LABEL_14:
    uint64_t result = 0;
    *uint64_t v2 = v8;
    v2[1] = v9;
    return result;
  }
  uint64_t v4 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v3 + 1;
  *(void *)(a1 + 40) = v4;
  ++*(void *)(a1 + 56);
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  long long v10 = *v2;
  long long v11 = v2[1];
  if (sub_216B3F460(a1))
  {
    long long v12 = *v2;
    long long v14 = v2[1];
    if (sub_216B07970((void *)a1))
    {
      do
      {
        if ((sub_216B3F460(a1) & 1) == 0) {
          break;
        }
        long long v12 = *v2;
        long long v14 = v2[1];
      }
      while ((sub_216B07970((void *)a1) & 1) != 0);
    }
    *uint64_t v2 = v12;
    v2[1] = v14;
    long long v13 = *v2;
    long long v15 = v2[1];
    if (sub_216B07970((void *)a1) && sub_216B3DF30((void *)a1)) {
      goto LABEL_13;
    }
LABEL_16:
    *uint64_t v2 = v13;
    v2[1] = v15;
    goto LABEL_17;
  }
  *uint64_t v2 = v10;
  v2[1] = v11;
  long long v13 = *v2;
  long long v15 = v2[1];
  if (!sub_216B3DF30((void *)a1)) {
    goto LABEL_16;
  }
LABEL_13:
  sub_216B3EE54((__n128 *)a1);
  sub_216B3F4C8((__n128 *)a1);
LABEL_17:
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  long long v6 = *(unsigned char **)(a1 + 32);
  if (v6 == *(unsigned char **)(a1 + 64) || *v6 != 41) {
    sub_216B3E370(a1);
  }
  uint64_t v7 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v6 + 1;
  *(void *)(a1 + 40) = v7;
  ++*(void *)(a1 + 56);
  return 1;
}

void sub_216B3ECA8()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_216B3ECE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14)
{
  _OWORD *v14 = a13;
  v14[1] = a14;
  _OWORD *v14 = a9;
  v14[1] = a10;
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B3ED38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 40;
  long long v13 = *(_OWORD *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 56);
  if (!sub_2169C89C8((void *)a1)) {
    goto LABEL_8;
  }
  while ((sub_2169C827C((void *)a1) & 1) != 0)
    ;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v8 = v2;
  *(void *)long long v9 = v2;
  *(_OWORD *)&v9[8] = v13;
  *(void *)&v9[24] = v14;
  uint64_t v10 = v4;
  if (*(char *)(a1 + 95) < 0)
  {
    sub_216778F24(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 88);
  }
  long long v15 = *(_OWORD *)v9;
  long long v16 = *(_OWORD *)&v9[16];
  char v5 = sub_216B3C1DC((uint64_t)&v8);
  char v6 = v5;
  *(_OWORD *)long long v9 = v15;
  *(_OWORD *)&v9[16] = v16;
  if (SHIBYTE(v12) < 0)
  {
    operator delete((void *)__p);
    if (v6) {
      goto LABEL_8;
    }
  }
  else if (v5)
  {
LABEL_8:
    uint64_t result = 0;
    *(void *)(a1 + 32) = v2;
    *(_OWORD *)uint64_t v3 = v13;
    *(void *)(v3 + 16) = v14;
    return result;
  }
  return 1;
}

void sub_216B3EE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, uint64_t a20)
{
  *(void *)(v20 + 32) = v22;
  *(_OWORD *)uint64_t v21 = a19;
  *(void *)(v21 + 16) = a20;
  _Unwind_Resume(a1);
}

void sub_216B3EE54(__n128 *a1)
{
  if ((sub_216B3EEB8((uint64_t)a1) & 1) == 0)
  {
    sub_216B069B4(a1);
    if ((v2 & 1) == 0 && (sub_216B06A2C((uint64_t)a1) & 1) == 0 && (sub_216B3F040((uint64_t)a1) & 1) == 0)
    {
      do
      {
        while ((sub_2169C827C(a1) & 1) != 0)
          ;
      }
      while ((sub_216B077AC(a1) & 1) != 0);
    }
  }
}

uint64_t sub_216B3EEB8(uint64_t a1)
{
  char v2 = (long long *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  if ((void)v8 != *(void *)(a1 + 64) && *(unsigned char *)v8 == 45)
  {
    uint64_t v3 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v8 + 1;
    *(void *)(a1 + 40) = v3;
    ++*(void *)(a1 + 56);
  }
  long long v10 = *v2;
  long long v11 = *(_OWORD *)(a1 + 48);
  if (sub_216B06AD0((void *)a1))
  {
    long long v12 = *v2;
    long long v14 = v2[1];
    char v4 = sub_2169C827C((void *)a1);
    *char v2 = v12;
    v2[1] = v14;
    if ((v4 & 1) == 0) {
      return 1;
    }
  }
  *char v2 = v10;
  v2[1] = v11;
  if (!sub_216B06B34((void *)a1)) {
    goto LABEL_16;
  }
  char v5 = *(unsigned char **)(a1 + 32);
  if (v5 != *(unsigned char **)(a1 + 64) && *v5 == 46)
  {
    uint64_t v6 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v5 + 1;
    *(void *)(a1 + 40) = v6;
    ++*(void *)(a1 + 56);
    if (sub_216B06B34((void *)a1))
    {
      long long v13 = *v2;
      long long v15 = v2[1];
      if (sub_216B06D04((void *)a1))
      {
        sub_216B06DA0((void *)a1);
        if ((sub_216B06B34((void *)a1) & 1) == 0) {
          sub_216B3CA3C(a1);
        }
      }
      else
      {
        *char v2 = v13;
        v2[1] = v15;
      }
      return 1;
    }
LABEL_15:
    sub_216B3CA3C(a1);
  }
  if (!sub_216B06D04((void *)a1))
  {
LABEL_16:
    uint64_t result = 0;
    *char v2 = v8;
    v2[1] = v9;
    return result;
  }
  sub_216B06DA0((void *)a1);
  if ((sub_216B06B34((void *)a1) & 1) == 0) {
    goto LABEL_15;
  }
  return 1;
}

void sub_216B3F028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  long long v12 = *(_OWORD *)(v11 - 32);
  *long long v10 = *(_OWORD *)(v11 - 48);
  v10[1] = v12;
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B3F040(uint64_t a1)
{
  char v2 = (unsigned __int8 **)(a1 + 32);
  uint64_t v1 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v3 = *(unsigned __int8 **)(a1 + 64);
  if (v1 == v3) {
    return 0;
  }
  int v5 = *v1;
  if (v5 != 39)
  {
    if (v5 == 34)
    {
      uint64_t v6 = v1 + 1;
      uint64_t v7 = (void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v8;
      long long v9 = (void *)(a1 + 56);
      long long v10 = (long long *)(a1 + 72);
      ++*(void *)(a1 + 56);
      while (1)
      {
        if (v6 != v3)
        {
          int v11 = *v6;
          if (v11 == 92)
          {
            *char v2 = v6 + 1;
            uint64_t v14 = (*v7)++;
            uint64_t v15 = (*v9)++;
            if (v6 + 1 == v3 || v6[1] != 34)
            {
              if ((sub_216B0769C((void *)a1) & 1) == 0) {
                sub_216B3D5C4(a1);
              }
            }
            else
            {
              *char v2 = v6 + 2;
              *uint64_t v7 = v14 + 2;
              *long long v9 = v15 + 2;
            }
            goto LABEL_28;
          }
          if (v11 == 34) {
            goto LABEL_55;
          }
        }
        long long v36 = *(_OWORD *)v7;
        unint64_t v37 = *(unsigned __int8 **)(a1 + 56);
        if (!sub_216B07744((void *)a1))
        {
          *char v2 = v6;
          *(_OWORD *)uint64_t v7 = v36;
          *(void *)(a1 + 56) = v37;
LABEL_57:
          sub_216B3D70C(a1);
        }
        long long v12 = *(unsigned __int8 **)(a1 + 32);
        uint64_t v32 = v12;
        if (*(char *)(a1 + 95) < 0)
        {
          sub_216778F24(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
          long long v13 = v6;
          long long v12 = v32;
        }
        else
        {
          long long __p = *v10;
          uint64_t v35 = *(void *)(a1 + 88);
          long long v13 = v6;
        }
        if (v13 != v12 && (v17 = *v13, long long v16 = v13 + 1, v17 == 34) && v16 == v12)
        {
          int v18 = 0;
          uint64_t v19 = v2;
        }
        else
        {
          uint64_t v19 = 0;
          int v18 = 1;
        }
        if (SHIBYTE(v35) < 0)
        {
          operator delete((void *)__p);
          if (v19)
          {
LABEL_22:
            *uint64_t v19 = v6;
            *(_OWORD *)(v19 + 1) = v36;
            v19[3] = v37;
            if ((v18 & 1) == 0) {
              goto LABEL_57;
            }
            goto LABEL_28;
          }
        }
        else if (v19)
        {
          goto LABEL_22;
        }
        if (!v18) {
          goto LABEL_57;
        }
LABEL_28:
        uint64_t v6 = *(unsigned __int8 **)(a1 + 32);
        uint64_t v3 = *(unsigned __int8 **)(a1 + 64);
      }
    }
    return 0;
  }
  uint64_t v6 = v1 + 1;
  uint64_t v7 = (void *)(a1 + 40);
  uint64_t v21 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v21;
  long long v9 = (void *)(a1 + 56);
  uint64_t v22 = (long long *)(a1 + 72);
  ++*(void *)(a1 + 56);
  while (1)
  {
    if (v6 != v3)
    {
      int v23 = *v6;
      if (v23 == 92)
      {
        *char v2 = v6 + 1;
        uint64_t v26 = (*v7)++;
        uint64_t v27 = (*v9)++;
        if (v6 + 1 == v3 || v6[1] != 39)
        {
          if ((sub_216B0769C((void *)a1) & 1) == 0) {
            sub_216B3D854(a1);
          }
        }
        else
        {
          *char v2 = v6 + 2;
          *uint64_t v7 = v26 + 2;
          *long long v9 = v27 + 2;
        }
        goto LABEL_54;
      }
      if (v23 == 39) {
        break;
      }
    }
    long long v36 = *(_OWORD *)v7;
    unint64_t v37 = *(unsigned __int8 **)(a1 + 56);
    if (!sub_216B07744((void *)a1))
    {
      *char v2 = v6;
      *(_OWORD *)uint64_t v7 = v36;
      *(void *)(a1 + 56) = v37;
LABEL_59:
      sub_216B3D99C(a1);
    }
    uint64_t v24 = *(unsigned __int8 **)(a1 + 32);
    long long v33 = v24;
    if (*(char *)(a1 + 95) < 0)
    {
      sub_216778F24(&__p, *(void **)(a1 + 72), *(void *)(a1 + 80));
      uint64_t v25 = v6;
      uint64_t v24 = v33;
    }
    else
    {
      long long __p = *v22;
      uint64_t v35 = *(void *)(a1 + 88);
      uint64_t v25 = v6;
    }
    if (v25 != v24 && (v29 = *v25, int v28 = v25 + 1, v29 == 39) && v28 == v24)
    {
      int v30 = 0;
      long long v31 = v2;
    }
    else
    {
      long long v31 = 0;
      int v30 = 1;
    }
    if (SHIBYTE(v35) < 0)
    {
      operator delete((void *)__p);
      if (v31)
      {
LABEL_48:
        unsigned __int8 *v31 = v6;
        *(_OWORD *)(v31 + 1) = v36;
        v31[3] = v37;
        if ((v30 & 1) == 0) {
          goto LABEL_59;
        }
        goto LABEL_54;
      }
    }
    else if (v31)
    {
      goto LABEL_48;
    }
    if (!v30) {
      goto LABEL_59;
    }
LABEL_54:
    uint64_t v6 = *(unsigned __int8 **)(a1 + 32);
    uint64_t v3 = *(unsigned __int8 **)(a1 + 64);
  }
LABEL_55:
  *char v2 = v6 + 1;
  ++*v7;
  ++*v9;
  return 1;
}

void sub_216B3F444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, uint64_t a20)
{
  *uint64_t v20 = v22;
  *(_OWORD *)uint64_t v21 = a19;
  *(void *)(v21 + 16) = a20;
  _Unwind_Resume(a1);
}

uint64_t sub_216B3F460(uint64_t a1)
{
  char v2 = (_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 48);
  int v3 = sub_216B3DF30((void *)a1);
  *char v2 = v5;
  v2[1] = v6;
  if ((v3 & 1) == 0) {
    sub_216B3EE54((__n128 *)a1);
  }
  return v3 ^ 1u;
}

void sub_216B3F4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

__n128 sub_216B3F4C8(__n128 *a1)
{
  char v2 = a1 + 2;
  __n128 v4 = a1[2];
  __n128 v5 = a1[3];
  if (sub_216B07970(a1))
  {
    do
    {
      if (!sub_216B3DF30(a1)) {
        break;
      }
      sub_216B3EE54(a1);
      __n128 v4 = *v2;
      __n128 v5 = v2[1];
    }
    while ((sub_216B07970(a1) & 1) != 0);
  }
  __n128 result = v4;
  *char v2 = v4;
  v2[1] = v5;
  return result;
}

void sub_216B3F534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_216B3F540(uint64_t a1, uint64_t a2)
{
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  sub_216B05E1C(a1);
  if ((sub_216B3EA04(a1) & 1) == 0 && (sub_216B3EAF0(a1) & 1) == 0 && (sub_216B3ED38(a1) & 1) == 0)
  {
    __n128 v4 = *(unsigned char **)(a1 + 32);
    if (v4 == *(unsigned char **)(a1 + 64) || *v4 != 40) {
      return 0;
    }
    uint64_t v5 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v4 + 1;
    *(void *)(a1 + 40) = v5;
    ++*(void *)(a1 + 56);
    if ((sub_216B3F540(a1, a2) & 1) == 0) {
      sub_216B3E4BC(a1);
    }
    long long v6 = *(unsigned char **)(a1 + 32);
    if (v6 == *(unsigned char **)(a1 + 64) || *v6 != 41) {
      sub_216B3E7D0(a1);
    }
    uint64_t v7 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v6 + 1;
    *(void *)(a1 + 40) = v7;
    ++*(void *)(a1 + 56);
  }
  uint64_t v8 = (long long *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 32);
  long long v12 = *(_OWORD *)(a1 + 48);
  long long v13 = v11;
  long long v14 = v12;
  if (sub_216B07FF4(a1))
  {
    while (1)
    {
      int v9 = sub_216B3E918(a1, a2);
      *uint64_t v8 = v13;
      *(_OWORD *)(a1 + 48) = v14;
      if (!v9 || !sub_216B07FF4(a1) || !sub_216B3E918(a1, a2)) {
        break;
      }
      long long v11 = *v8;
      long long v12 = *(_OWORD *)(a1 + 48);
      long long v13 = *v8;
      long long v14 = v12;
      if ((sub_216B07FF4(a1) & 1) == 0) {
        goto LABEL_16;
      }
    }
  }
  else
  {
LABEL_16:
    *uint64_t v8 = v13;
    *(_OWORD *)(a1 + 48) = v14;
  }
  *uint64_t v8 = v11;
  *(_OWORD *)(a1 + 48) = v12;
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  return 1;
}

void sub_216B3F6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *long long v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_216B3F6F0()
{
  sub_216779094(v3, "SdfPredicateFunctionResult::ConstantOverDescendants");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759CF0, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  sub_216779094(v3, "SdfPredicateFunctionResult::MayVaryOverDescendants");
  long long __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C759CF0, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_216B3F7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::_CountDefaults(pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)this == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    if (*(void *)(v1 + 32)) {
      ++result;
    }
    v1 += 40;
  }
  while (v1 != v2);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity(pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults *this)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  if (*(void *)this != v3)
  {
    uint64_t v4 = 0;
    do
    {
      if (*(char *)(v2 + 23) < 0)
      {
        if (!*(void *)(v2 + 8))
        {
LABEL_7:
          long long v13 = "sdf/predicateLibrary.cpp";
          long long v14 = "CheckValidity";
          uint64_t v15 = 62;
          long long v16 = "BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity() const";
          char v17 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Specified empty predicate expression parameter name");
        }
      }
      else if (!*(unsigned char *)(v2 + 23))
      {
        goto LABEL_7;
      }
      uint64_t v5 = *(void *)(v2 + 32);
      if (v4)
      {
        if (!v5)
        {
          long long v13 = "sdf/predicateLibrary.cpp";
          long long v14 = "CheckValidity";
          uint64_t v15 = 70;
          long long v16 = "BOOL pxrInternal__aapl__pxrReserved__::SdfPredicateParamNamesAndDefaults::CheckValidity() const";
          char v17 = 0;
          long long v6 = (const char *)v2;
          if (*(char *)(v2 + 23) < 0) {
            long long v6 = *(const char **)v2;
          }
          uint64_t v7 = (const char *)v4;
          if (*(char *)(v4 + 23) < 0) {
            uint64_t v7 = *(const char **)v4;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Non-default predicate function parameter '%s' follows default parameter '%s'", v6, v7);
        }
      }
      else if (v5)
      {
        uint64_t v4 = v2;
      }
      else
      {
        uint64_t v4 = 0;
      }
      v2 += 40;
    }
    while (v2 != v3);
  }
  unint64_t v8 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v9 = v18;
  unint64_t v10 = atomic_load((unint64_t *)(v8 + 144));
  BOOL v11 = v9 >= v10
     || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18, (atomic_ullong *)v8);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  return v11;
}

void sub_216B3F998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_216B3F9B8()
{
}

void sub_216B3F9D0()
{
  int v0 = sub_216B47BB4();
  uint64_t v1 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v0);
  sub_216779094(__p, "SdfPrimSpecHandleVector");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v1, (char *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = sub_216B47CB8();
  uint64_t v3 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v2);
  sub_216779094(__p, "map<string, SdfVariantSetSpecHandle>");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v2, v3, (char *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B3FA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::New@<X0>(uint64_t *a1@<X0>, int a2@<W2>, void *a3@<X8>)
{
  long long v6 = sub_21697CF14(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    unint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v8, &v13);
  }
  else
  {
    long long v13 = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v12);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_New(&v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a2, (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)&v11, a3);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t add_explicit = (void *)v12;
  if ((v12 & 7) != 0) {
    unint64_t add_explicit = (void *)atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(add_explicit, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
}

void sub_216B3FB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_New(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *a4@<X3>, void *a5@<X8>)
{
  int v29 = a3;
  IsDormant = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1);
  if (IsDormant)
  {
    uint64_t v24 = "sdf/primSpec.cpp";
    uint64_t v25 = "_New";
    uint64_t v26 = 102;
    uint64_t v27 = "static SdfPrimSpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_New(const SdfPrimSpecHandle &, const "
          "TfToken &, SdfSpecifier, const TfToken &)";
    char v28 = 0;
    unint64_t v11 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v11)
    {
      unint64_t v12 = (const char *)(v11 + 16);
      if (*(char *)(v11 + 39) < 0) {
        unint64_t v12 = *(const char **)v12;
      }
    }
    else
    {
      unint64_t v12 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create prim '%s' because the parent prim is NULL", v12);
  }
  else
  {
    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(IsDormant);
    }
    if (MEMORY[0x21D444760](EmptyString))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v22);
      if (!*(void *)a4 && !a3)
      {
        a4 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
        if (!a4) {
          a4 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
        }
      }
      unint64_t v14 = *(void *)a4;
      unint64_t v21 = v14;
      if ((v14 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        unint64_t v21 = v14 & 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, (uint64_t *)&v24);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v18);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, a2, &v20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_21697C414(&v18);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CreateSpec();
    }
    uint64_t v24 = "sdf/primSpec.cpp";
    uint64_t v25 = "_New";
    uint64_t v26 = 109;
    uint64_t v27 = "static SdfPrimSpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_New(const SdfPrimSpecHandle &, const "
          "TfToken &, SdfSpecifier, const TfToken &)";
    char v28 = 0;
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v21);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, a2, &v22);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v22);
    unint64_t v16 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      char v17 = (const char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0) {
        char v17 = *(const char **)v17;
      }
    }
    else
    {
      char v17 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot create prim '%s' because '%s' is not a valid name", Text, v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_21697C414(&v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
    sub_21697C414(&v21);
  }
  *a5 = 0;
}

void sub_216B3FF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::New(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, int a2@<W2>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v7);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v6);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_New(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, a2, (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)&v6, a3);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t sub_216B400C8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int *a4)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v6 = (char *)&off_26C758118 + 3;
  int v5 = *a4;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(a1, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  return sub_2168EE084((uint64_t)&v5);
}

void sub_216B40140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  if (SpecType == 7)
  {
    v7[0] = "sdf/primSpec.cpp";
    v7[1] = "_ValidateEdit";
    v7[2] = 145;
    void v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(const TfToken &) const";
    char v8 = 0;
    unint64_t v4 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      int v5 = (const char *)(v4 + 16);
      if (*(char *)(v4 + 39) < 0) {
        int v5 = *(const char **)v5;
      }
    }
    else
    {
      int v5 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot edit %s on a pseudo-root", v5);
  }
  return SpecType != 7;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_IsPseudoRoot(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  return pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this) == 7;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetName(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v3);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v4);
  sub_21697C414(&v3);
  return Name;
}

void sub_216B40270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameToken@<X0>(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, atomic_uint **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v7);
  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  int v4 = *(atomic_uint **)NameToken;
  *a2 = *(atomic_uint **)NameToken;
  if ((v4 & 7) != 0)
  {
    int v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v5;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_21697C414(&v7);
}

void sub_216B402F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::CanSetName(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2, uint64_t a3)
{
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(a1) != 7)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CanRename();
  }
  if (a3)
  {
    MEMORY[0x21D4477E0](a3, "The pseudo-root cannot be renamed");
    return 0;
  }
  return a3;
}

void sub_216B403DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17 && a16 < 0) {
    operator delete(__p);
  }
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetName(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v4);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v3);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameToken(a1, &v2);
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Rename();
}

void sub_216B405D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a12);
  sub_21697B754(&a14);
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v16 - 40));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(atomic_uint **this@<X0>, uint64_t a2@<X8>)
{
  sub_216A5E64C(this, &v4);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfGetNameOrderProxy(&v5, (uint64_t *)v3 + 27, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_216B40744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

void sub_216B40760(unsigned int *a1, void *a2)
{
  uint64_t v3 = sub_216B48A7C((uint64_t)a1, a2);
  if (v3 == -1)
  {
    if (*(void *)a1)
    {
      int v4 = (void *)(*(uint64_t (**)(void, void))(**(void **)a1 + 112))(*(void *)a1, a1[4]);
      uint64_t v5 = (uint64_t)(v4[1] - *v4) >> 3;
    }
    else
    {
      uint64_t v5 = 0;
    }
    memset(v6, 0, sizeof(v6));
    sub_216B48AD4(a1, v5, 0, v6);
    int v7 = (void **)v6;
    sub_216889A04(&v7);
  }
  else
  {
    sub_216B41738(a1, v3);
  }
}

void sub_216B40828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_216B40840(unsigned int *a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = sub_216B48A7C((uint64_t)a1, a2);
  if (v5 == -1)
  {
    if (*(void *)a1)
    {
      int v7 = (void *)(*(uint64_t (**)(void, void))(**(void **)a1 + 112))(*(void *)a1, a1[4]);
      uint64_t v8 = (uint64_t)(v7[1] - *v7) >> 3;
    }
    else
    {
      uint64_t v8 = 0;
    }
    memset(v9, 0, sizeof(v9));
    sub_216B48AD4(a1, v8, 0, v9);
    unint64_t v10 = (void **)v9;
  }
  else
  {
    uint64_t v6 = v5;
    sub_216ABE690(v9, 1uLL, a3);
    sub_216B48AD4(a1, v6, 1, v9);
    unint64_t v10 = (void **)v9;
  }
  sub_216889A04(&v10);
}

void sub_216B40920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameRoot@<X0>(uint64_t **this@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v5);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v5);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v3, a2);
  uint64_t result = v6;
  if (v6)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216B409C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameParent@<X0>(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v13);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13))
  {
    *a2 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v11);
    int v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v11);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v7);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, &v9);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    sub_21697C414(&v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    uint64_t v5 = v12;
    if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  return sub_21697C414(&v13);
}

void sub_216B40AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  sub_21697B754((uint64_t *)va1);
  sub_21697B754((uint64_t *)va);
  uint64_t v3 = v9;
  if (v9)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  sub_21697B754((int *)va2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRealNameParent@<X0>(uint64_t **this@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v10);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, &v8);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  uint64_t result = v11;
  if (v11)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216B40C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  sub_21697B754(&a11);
  sub_21697B754(&a9);
  uint64_t v14 = a13;
  if (a13)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren(uint64_t **this)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v4);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v3);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys)) {
    sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Sdf_Children();
}

void sub_216B40D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetNameChildren(uint64_t **a1)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, &v3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v2);
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::SetChildren();
}

void sub_216B40EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::InsertNameChild(uint64_t **a1)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, &v3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v2);
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::InsertChild();
}

void sub_216B40FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveNameChild(uint64_t **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  uint64_t v4 = (uint64_t **)sub_216A663FC(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v4, (uint64_t *)&v16);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, &v25);
  uint64_t v5 = sub_216851B24((uint64_t)&v16);
  if (v5 == sub_216851B24((uint64_t)&v25))
  {
    int v7 = sub_216A663FC(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v7, &v22);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, &v24);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v21);
    BOOL v6 = v24 != (void)v21;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
    sub_21697C414(&v21);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
    sub_21697C414(&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
    sub_21697C414(&v22);
  }
  else
  {
    BOOL v6 = 1;
  }
  uint64_t v8 = v26;
  if (v26 && atomic_fetch_add_explicit((atomic_uint *volatile)(v26 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  int v9 = v17;
  if (v17 && atomic_fetch_add_explicit((atomic_uint *volatile)v17 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(const char *))(*(void *)v9 + 8))(v9);
  }
  if (!v6)
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)&v16);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v25);
    uint64_t v13 = sub_216A663FC(a2);
    NameToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPrimSpec *)v13, (atomic_uint **)&v24);
    if ((v24 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::RemoveChild();
  }
  uint64_t v16 = "sdf/primSpec.cpp";
  char v17 = "RemoveNameChild";
  uint64_t v18 = 287;
  int v19 = "BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveNameChild(const SdfPrimSpecHandle &)";
  char v20 = 0;
  uint64_t v10 = sub_216A663FC(a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v25);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v24);
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot remove child prim '%s' from parent '%s' because it is not a child of that prim", Text, v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
  sub_21697C414(&v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
  sub_21697C414(&v25);
  return 0;
}

void sub_216B412EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, atomic_uint *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_21697B754((_DWORD *)(v9 - 56));
  sub_21697B754((int *)va);
  uint64_t v11 = *(atomic_uint **)(v9 - 40);
  if (v11 && atomic_fetch_add_explicit(v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v11 + 8))(v11);
  }
  if (a5)
  {
    if (atomic_fetch_add_explicit(a5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a5 + 8))(a5);
    }
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasNameChildrenOrder(atomic_uint **this)
{
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(this, (uint64_t)v3);
  uint64_t v1 = sub_216ABD68C((uint64_t)v3);
  if (v4) {
    sub_216784EC4(v4);
  }
  return v1 != 0;
}

void sub_216B4144C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetNameChildrenOrder(atomic_uint **a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(a1, (uint64_t)&v3);
  sub_216B414C4(&v3, a2);
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_216B414AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_216B414C4(unsigned int *a1, void *a2)
{
  uint64_t v4 = *(void *)a1;
  if (v4)
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 112))(v4, a1[4]);
    uint64_t v6 = (uint64_t)(v5[1] - *v5) >> 3;
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_216B48AD4(a1, 0, v6, a2);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::InsertInNameChildrenOrder(atomic_uint **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(this, (uint64_t)&v5);
  sub_216B415A8(&v5, a3, (uint64_t *)a2);
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_216B41590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B415A8(unsigned int *a1, uint64_t a2, uint64_t *a3)
{
  if (a2 == -1)
  {
    uint64_t v5 = *(void *)a1;
    if (*(void *)a1)
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 112))(v5, a1[4]);
      a2 = (v6[1] - *v6) >> 3;
    }
    else
    {
      LODWORD(a2) = 0;
    }
  }
  uint64_t v7 = (int)a2;
  sub_216ABE690(v8, 1uLL, a3);
  sub_216B48AD4(a1, v7, 0, v8);
  uint64_t v9 = (void **)v8;
  sub_216889A04(&v9);
}

void sub_216B41660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveFromNameChildrenOrder(atomic_uint **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(this, (uint64_t)&v3);
  sub_216B40760(&v3, a2);
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_216B416C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveFromNameChildrenOrderByIndex(atomic_uint **this, int a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(this, (uint64_t)&v3);
  sub_216B41738(&v3, a2);
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_216B41720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B41738(unsigned int *a1, uint64_t a2)
{
  memset(v2, 0, sizeof(v2));
  sub_216B48AD4(a1, a2, 1, v2);
  unsigned int v3 = (void **)v2;
  sub_216889A04(&v3);
}

void sub_216B41780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216889A04(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ApplyNameChildrenOrder(atomic_uint **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(a1, (uint64_t)&v3);
  sub_216B417FC(&v3, a2);
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_216B417E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216B417FC(uint64_t *a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  uint64_t result = (void *)sub_216B48D04((uint64_t)a1);
  if (result)
  {
    uint64_t v5 = *a1;
    void v6[3] = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v5 + 72))(v5, a2, v6);
    return sub_216AE2250(v6);
  }
  return result;
}

void sub_216B41898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AE2250((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetProperties(uint64_t **this)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v4);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v3);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys)) {
    sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::Sdf_Children();
}

void sub_216B41978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetProperties(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  int v2 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v2) {
    int v2 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v2 + 40));
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v5);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v4);
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::SetChildren();
  }
  return result;
}

void sub_216B41AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::InsertProperty(uint64_t **this)
{
  int v2 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v2) {
    int v2 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v2 + 40)))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v5);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v4);
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::InsertChild();
  }
  return 0;
}

void sub_216B41C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveProperty(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4) {
    int v4 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v4 + 40));
  if (result)
  {
    uint64_t v6 = (uint64_t **)sub_216990F1C(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v6, (uint64_t *)&v17);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v26);
    uint64_t v7 = sub_216851B24((uint64_t)&v17);
    if (v7 == sub_216851B24((uint64_t)&v26))
    {
      uint64_t v9 = sub_216990F1C(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v9, &v23);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, &v25);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v22);
      BOOL v8 = v25 != (void)v22;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
      sub_21697C414(&v22);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_21697C414(&v25);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
      sub_21697C414(&v23);
    }
    else
    {
      BOOL v8 = 1;
    }
    uint64_t v10 = v27;
    if (v27 && atomic_fetch_add_explicit((atomic_uint *volatile)(v27 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = v18;
    if (v18 && atomic_fetch_add_explicit((atomic_uint *volatile)v18 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v11 + 8))(v11);
    }
    if (!v8)
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, (uint64_t *)&v17);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v26);
      uint64_t v15 = sub_216990F1C(a2);
      NameToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v15, (atomic_uint **)&v25);
      if ((v25 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::RemoveChild();
    }
    char v17 = "sdf/primSpec.cpp";
    uint64_t v18 = "RemoveProperty";
    uint64_t v19 = 382;
    char v20 = "void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveProperty(const SdfPropertySpecHandle &)";
    char v21 = 0;
    uint64_t v12 = sub_216990F1C(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v12, &v26);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v26);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v25);
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot remove property '%s' from prim '%s' because it does not belong to that prim", Text, v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
    sub_21697C414(&v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v26 + 1);
    return (uint64_t)sub_21697C414(&v26);
  }
  return result;
}

void sub_216B41F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, atomic_uint *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_21697B754((_DWORD *)(v9 - 56));
  sub_21697B754((int *)va);
  uint64_t v11 = *(atomic_uint **)(v9 - 40);
  if (v11 && atomic_fetch_add_explicit(v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v11 + 8))(v11);
  }
  if (a5)
  {
    if (atomic_fetch_add_explicit(a5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a5 + 8))(a5);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAttributes(uint64_t **this)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v4);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v3);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys)) {
    sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  sub_216B48D7C();
}

void sub_216B42154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelationships(uint64_t **this)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v4);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v3);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys)) {
    sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  sub_216B48E68();
}

void sub_216B42284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(atomic_uint **this@<X0>, uint64_t a2@<X8>)
{
  sub_216A5E64C(this, &v4);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  int v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    int v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfGetNameOrderProxy(&v5, (uint64_t *)v3 + 34, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_216B4236C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasPropertyOrder(atomic_uint **this)
{
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(this, (uint64_t)v3);
  uint64_t v1 = sub_216ABD68C((uint64_t)v3);
  if (v4) {
    sub_216784EC4(v4);
  }
  return v1 != 0;
}

void sub_216B423D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetPropertyOrder(atomic_uint **this, void *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v4 + 40)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(this, (uint64_t)&v5);
    sub_216B414C4(&v5, a2);
    if (v6) {
      sub_216784EC4(v6);
    }
  }
}

void sub_216B4246C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::InsertInPropertyOrder(atomic_uint **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v6) {
    uint64_t v6 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v6 + 40)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(this, (uint64_t)&v7);
    sub_216B415A8(&v7, a3, (uint64_t *)a2);
    if (v8) {
      sub_216784EC4(v8);
    }
  }
}

void sub_216B42514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveFromPropertyOrder(atomic_uint **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v4 + 40)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(this, (uint64_t)&v5);
    sub_216B40760(&v5, a2);
    if (v6) {
      sub_216784EC4(v6);
    }
  }
}

void sub_216B425AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveFromPropertyOrderByIndex(atomic_uint **this, int a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v4 + 40)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(this, (uint64_t)&v5);
    sub_216B41738(&v5, a2);
    if (v6) {
      sub_216784EC4(v6);
    }
  }
}

void sub_216B42644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ApplyPropertyOrder(atomic_uint **this, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v4 + 40)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(this, (uint64_t)&v5);
    sub_216B417FC(&v5, a2);
    if (v6) {
      sub_216784EC4(v6);
    }
  }
}

void sub_216B426DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetObjectAtPath(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_21697C414(&v10);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, (uint64_t *)&v10);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v10);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
    unsigned int v7 = v11;
    if (v11)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(const char *))(*(void *)v7 + 8))(v7);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
  }
  else
  {
    uint64_t v10 = "sdf/primSpec.cpp";
    uint64_t v11 = "GetObjectAtPath";
    uint64_t v12 = 465;
    uint64_t v13 = "SdfSpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetObjectAtPath(const SdfPath &) const";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot get object at the empty path");
    *a3 = 0;
  }
}

void sub_216B42824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_21697C414(&v10);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, (uint64_t *)&v10);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v10);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
    unsigned int v7 = v11;
    if (v11)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(const char *))(*(void *)v7 + 8))(v7);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
  }
  else
  {
    uint64_t v10 = "sdf/primSpec.cpp";
    uint64_t v11 = "GetPrimAtPath";
    uint64_t v12 = 476;
    uint64_t v13 = "SdfPrimSpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPrimAtPath(const SdfPath &) const";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot get prim at the empty path");
    *a3 = 0;
  }
}

void sub_216B429C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyAtPath(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_21697C414(&v10);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, (uint64_t *)&v10);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v10);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPropertyAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    unsigned int v7 = v11;
    if (v11)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(const char *))(*(void *)v7 + 8))(v7);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
  }
  else
  {
    uint64_t v10 = "sdf/primSpec.cpp";
    uint64_t v11 = "GetPropertyAtPath";
    uint64_t v12 = 487;
    uint64_t v13 = "SdfPropertySpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyAtPath(const SdfPath &) const";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot get property at the empty path");
    *a3 = 0;
  }
}

void sub_216B42B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAttributeAtPath(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_21697C414(&v10);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, (uint64_t *)&v10);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v10);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetAttributeAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    unsigned int v7 = v11;
    if (v11)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(const char *))(*(void *)v7 + 8))(v7);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
  }
  else
  {
    uint64_t v10 = "sdf/primSpec.cpp";
    uint64_t v11 = "GetAttributeAtPath";
    uint64_t v12 = 498;
    uint64_t v13 = "SdfAttributeSpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAttributeAtPath(const SdfPath &) const";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot get attribute at the empty path");
    *a3 = 0;
  }
}

void sub_216B42D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelationshipAtPath(pxrInternal__aapl__pxrReserved__::SdfPrimSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_21697C414(&v10);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, (uint64_t *)&v10);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v10);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetRelationshipAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    unsigned int v7 = v11;
    if (v11)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(const char *))(*(void *)v7 + 8))(v7);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
  }
  else
  {
    uint64_t v10 = "sdf/primSpec.cpp";
    uint64_t v11 = "GetRelationshipAtPath";
    uint64_t v12 = 509;
    uint64_t v13 = "SdfRelationshipSpecHandle pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelationshipAtPath(const SdfPath &) const";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot get relationship at the empty path");
    *a3 = 0;
  }
}

void sub_216B42EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetTypeName@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 448), (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  if (v13 && (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)v12) & 1) != 0)
  {
    uint64_t v5 = (atomic_uint **)sub_21695C470((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    unsigned int v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      unsigned int v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 448));
    uint64_t v5 = (atomic_uint **)sub_21695C470(Fallback);
  }
  int v9 = *v5;
  *a2 = *v5;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v10;
    }
  }
  return sub_2168EE084((uint64_t)v12);
}

void sub_216B43024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetComment@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 48), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_216778F24((unsigned char *)a2, *(void **)v5, *(void *)(v5 + 8));
      return sub_2168EE084((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    unsigned int v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      unsigned int v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 48));
    uint64_t v5 = sub_21695A928(Fallback);
    if (*(char *)(v5 + 23) < 0) {
      goto LABEL_11;
    }
  }
  long long v9 = *(_OWORD *)v5;
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B4316C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetComment(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 48));
  if (result)
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6) {
      uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216B48F54(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 48), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_216778F24((unsigned char *)a2, *(void **)v5, *(void *)(v5 + 8));
      return sub_2168EE084((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    unsigned int v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      unsigned int v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 136));
    uint64_t v5 = sub_21695A928(Fallback);
    if (*(char *)(v5 + 23) < 0) {
      goto LABEL_11;
    }
  }
  long long v9 = *(_OWORD *)v5;
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B43354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetDocumentation(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136));
  if (result)
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6) {
      uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216B48F54(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 136), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetHidden(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    int v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 176), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    int v3 = (unsigned __int8 *)sub_216958184((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 176));
    int v3 = (unsigned __int8 *)sub_216958184(Fallback);
  }
  uint64_t v7 = *v3;
  sub_2168EE084((uint64_t)v9);
  return v7;
}

void sub_216B434FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetHidden(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, char a2)
{
  char v6 = a2;
  int v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    int v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 176));
  if (result)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216A5E3D8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 176), &v6);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSymmetryFunction@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 416), (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  if (v13 && (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)v12) & 1) != 0)
  {
    uint64_t v5 = (atomic_uint **)sub_21695C470((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 416));
    uint64_t v5 = (atomic_uint **)sub_21695C470(Fallback);
  }
  long long v9 = *v5;
  *a2 = *v5;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v10;
    }
  }
  return sub_2168EE084((uint64_t)v12);
}

void sub_216B436B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSymmetryFunction(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 416));
  if (result)
  {
    char v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6) {
      char v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216A5E46C(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 416), (uint64_t *)a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSymmetricPeer@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 392), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_216778F24((unsigned char *)a2, *(void **)v5, *(void *)(v5 + 8));
      return sub_2168EE084((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 392));
    uint64_t v5 = sub_21695A928(Fallback);
    if (*(char *)(v5 + 23) < 0) {
      goto LABEL_11;
    }
  }
  long long v9 = *(_OWORD *)v5;
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B43898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSymmetricPeer(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 392));
  if (result)
  {
    char v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6) {
      char v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216B48F54(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 392), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPrefix@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 256), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_216778F24((unsigned char *)a2, *(void **)v5, *(void *)(v5 + 8));
      return sub_2168EE084((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 256));
    uint64_t v5 = sub_21695A928(Fallback);
    if (*(char *)(v5 + 23) < 0) {
      goto LABEL_11;
    }
  }
  long long v9 = *(_OWORD *)v5;
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B43A80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetPrefix(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 256));
  if (result)
  {
    char v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6) {
      char v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216B48F54(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 256), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSuffix@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 376), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_216778F24((unsigned char *)a2, *(void **)v5, *(void *)(v5 + 8));
      return sub_2168EE084((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 376));
    uint64_t v5 = sub_21695A928(Fallback);
    if (*(char *)(v5 + 23) < 0) {
      goto LABEL_11;
    }
  }
  long long v9 = *(_OWORD *)v5;
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B43C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSuffix(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 376));
  if (result)
  {
    char v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6) {
      char v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216B48F54(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 376), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPrefixSubstitutions@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 264), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_2168EF25C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v5);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 264));
    long long v9 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_2168EF25C(Fallback);
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v9);
  }
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B43E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetPrefixSubstitutions(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const void ****a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 264));
  if (result)
  {
    char v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6) {
      char v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216AEB648(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 264), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSuffixSubstitutions@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 384), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_2168EF25C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v5);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 384));
    long long v9 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_2168EF25C(Fallback);
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v9);
  }
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B43FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSuffixSubstitutions(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const void ****a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 384));
  if (result)
  {
    char v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6) {
      char v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216AEB648(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 384), a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetActive(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    int v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, v2, (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    int v3 = (unsigned __int8 *)sub_216958184((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, v5);
    int v3 = (unsigned __int8 *)sub_216958184(Fallback);
  }
  uint64_t v7 = *v3;
  sub_2168EE084((uint64_t)v9);
  return v7;
}

void sub_216B44198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetActive(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, char a2)
{
  char v6 = a2;
  int v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    int v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, v3);
  if (result)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216A5E3D8(this, v5, &v6);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasActive(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  int v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    int v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, v2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearActive(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  int v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    int v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, v2);
  if (result)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4) {
      uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, v4);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetKind@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 208), (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  if (v13 && (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)v12) & 1) != 0)
  {
    uint64_t v5 = (atomic_uint **)sub_21695C470((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 208));
    uint64_t v5 = (atomic_uint **)sub_21695C470(Fallback);
  }
  long long v9 = *v5;
  *a2 = *v5;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v10;
    }
  }
  return sub_2168EE084((uint64_t)v12);
}

void sub_216B44430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetKind(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 208));
  if (result)
  {
    char v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6) {
      char v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216A5E46C(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 208), (uint64_t *)a2);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasKind(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  int v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    int v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 208));
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearKind(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  int v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    int v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 208));
  if (result)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4) {
      uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 208));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInstanceable(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    int v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 200), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    int v3 = (unsigned __int8 *)sub_216958184((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 200));
    int v3 = (unsigned __int8 *)sub_216958184(Fallback);
  }
  uint64_t v7 = *v3;
  sub_2168EE084((uint64_t)v9);
  return v7;
}

void sub_216B446BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetInstanceable(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, char a2)
{
  char v6 = a2;
  int v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    int v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 200));
  if (result)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216A5E3D8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 200), &v6);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasInstanceable(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  int v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    int v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 200));
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearInstanceable(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  int v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    int v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 200));
  if (result)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4) {
      uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 200));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    int v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 312), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_216A94450((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    int v3 = (unsigned int *)sub_216A943BC((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 312));
    int v3 = (unsigned int *)sub_216A943BC(Fallback);
  }
  uint64_t v7 = *v3;
  sub_2168EE084((uint64_t)v9);
  return v7;
}

void sub_216B4492C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSpecifier(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, int a2)
{
  int v6 = a2;
  int v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    int v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 312));
  if (result)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216B49000(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 312), &v6);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPermission(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    int v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 248), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_216B44AD8((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    int v3 = (unsigned int *)sub_216B44B64((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 248));
    int v3 = (unsigned int *)sub_216B44B64(Fallback);
  }
  uint64_t v7 = *v3;
  sub_2168EE084((uint64_t)v9);
  return v7;
}

void sub_216B44AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B44AD8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217478FF4 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C759D20);
}

uint64_t sub_216B44B64(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216B44AD8(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216B49094, (uint64_t)&stru_26C759D20);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetPermission(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, int a2)
{
  int v6 = a2;
  int v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    int v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 248));
  if (result)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return sub_216B490E8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 248), &v6);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSymmetryArguments(atomic_uint **this)
{
  sub_216B44CF8(this, &v2);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B4934C();
}

void sub_216B44CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_216B44CF8(atomic_uint **a1@<X0>, void *a2@<X8>)
{
  sub_216A5E64C(a1, &v4);
  int v3 = v4;
  *a2 = v4;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetSymmetryArgument(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 408));
  if (result)
  {
    sub_216B44CF8((atomic_uint **)this, v5);
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
      sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_216B4934C();
  }
  return result;
}

void sub_216B44E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B44E54(uint64_t *a1, uint64_t a2)
{
  if (!sub_216B494A0(a1)) {
    return 0;
  }
  if (*a1) {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v5);
  }
  else {
    uint64_t v5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  if (sub_216B49570(a1)) {
    return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)*a1 + 80))(*a1, a2);
  }
  else {
    return 0;
  }
}

double sub_216B44F10@<D0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  void v14[2] = *MEMORY[0x263EF8340];
  v11[1] = 0;
  sub_2168EDF48(&__dst, a2, v11);
  sub_216B496D8(a1, (uint64_t)&v7);
  long long v9 = v7;
  long long v10 = v8;
  sub_2168EE084((uint64_t)v14);
  if (v13 < 0) {
    operator delete(__dst);
  }
  sub_2168EE084((uint64_t)v11);
  long long v7 = 0u;
  long long v8 = 0u;
  if (sub_216B49BB4(&v9, &v7))
  {
    a1 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = *a1;
    if (*a1) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
    }
  }
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v5;
  double result = *(double *)&v10;
  *(_OWORD *)(a3 + 16) = v10;
  return result;
}

void sub_216B45018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_2168EC808(v11 - 80);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B45044(uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t **)a1;
  if (v3)
  {
    sub_216B49CB4(v3, *(void *)(a1 + 8), (void *)(a1 + 16), a2);
  }
  else
  {
    v5[0] = "sdf/mapEditProxy.h";
    v5[1] = "operator=";
    v5[2] = 162;
    v5[3] = "_ValueProxy &pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionar"
            "y>::_ValueProxy::operator=(const U &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = px"
            "rInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDicti"
            "onary>, U = pxrInternal__aapl__pxrReserved__::VtValue]";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Assignment to invalid map proxy");
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetCustomData(atomic_uint **this)
{
  sub_216B44CF8(this, &v2);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B4934C();
}

void sub_216B45130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetCustomData(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 72));
  if (result)
  {
    sub_216B44CF8((atomic_uint **)this, v5);
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
      sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_216B4934C();
  }
  return result;
}

void sub_216B45228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetAssetInfo(atomic_uint **this)
{
  sub_216B44CF8(this, &v2);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B4934C();
}

void sub_216B452BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetAssetInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 16));
  if (result)
  {
    sub_216B44CF8((atomic_uint **)this, v5);
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
      sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_216B4934C();
  }
  return result;
}

void sub_216B453B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetTypeName(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3 || pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(this) == 1)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4) {
      uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 448));
    if (result)
    {
      char v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v6) {
        char v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      long long v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 448);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v11);
      uint64_t result = sub_216A5E46C(this, v7, v11);
      if ((v11[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  else
  {
    v11[0] = (uint64_t)"sdf/primSpec.cpp";
    v11[1] = (uint64_t)"SetTypeName";
    void v11[2] = 570;
    void v11[3] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetTypeName(const std::string &)";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v9);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set empty type name on prim '%s'", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
    return (uint64_t)sub_21697C414(&v9);
  }
  return result;
}

void sub_216B4552C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInheritPathList(atomic_uint **this@<X0>, void *a2@<X8>)
{
  sub_216A5E64C(this, &v4);
  uint64_t v5 = v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfGetPathEditorProxy(&v5, (uint64_t *)v3 + 24, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_216B455E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasInheritPaths(atomic_uint **this)
{
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInheritPathList(this, &v3);
  if (sub_2169918D8((uint64_t)&v3)) {
    uint64_t v1 = sub_216991F78(v3);
  }
  else {
    uint64_t v1 = 1;
  }
  if (v4) {
    sub_216784EC4(v4);
  }
  return v1;
}

void sub_216B4565C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearInheritPathList(atomic_uint **this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 192)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetInheritPathList(this, &v3);
    if (sub_216A5F518((uint64_t)&v3)) {
      (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
    }
    if (v4) {
      sub_216784EC4(v4);
    }
  }
}

void sub_216B45718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecializesList(atomic_uint **this@<X0>, void *a2@<X8>)
{
  sub_216A5E64C(this, &v4);
  uint64_t v5 = v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfGetPathEditorProxy(&v5, (uint64_t *)v3 + 38, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_216B457B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasSpecializes(atomic_uint **this)
{
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecializesList(this, &v3);
  if (sub_2169918D8((uint64_t)&v3)) {
    uint64_t v1 = sub_216991F78(v3);
  }
  else {
    uint64_t v1 = 1;
  }
  if (v4) {
    sub_216784EC4(v4);
  }
  return v1;
}

void sub_216B4582C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearSpecializesList(atomic_uint **this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 304)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecializesList(this, &v3);
    if (sub_216A5F518((uint64_t)&v3)) {
      (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
    }
    if (v4) {
      sub_216784EC4(v4);
    }
  }
}

void sub_216B458E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(atomic_uint **this)
{
  sub_216A5E64C(this, &v2);
  uint64_t v3 = v2;
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v1) {
    uint64_t v1 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfGetPayloadEditorProxy(&v3, (uint64_t *)v1 + 30);
}

void sub_216B45984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasPayloads(atomic_uint **this)
{
}

void sub_216B459FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearPayloadList(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 240));
  if (result) {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList((atomic_uint **)this);
  }
  return result;
}

void sub_216B45AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(atomic_uint **this)
{
  sub_216A5E64C(this, &v2);
  uint64_t v3 = v2;
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v1) {
    uint64_t v1 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfGetReferenceEditorProxy(&v3, (uint64_t *)v1 + 35);
}

void sub_216B45B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasReferences(atomic_uint **this)
{
}

void sub_216B45BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearReferenceList(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 280));
  if (result) {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList((atomic_uint **)this);
  }
  return result;
}

void sub_216B45C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSetNameList(atomic_uint **this)
{
  sub_216A5E64C(this, &v3);
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v1) {
    uint64_t v1 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v2 = operator new(0xB8uLL);
  uint64_t v4 = v3;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  sub_216B4A380(v2, &v4, (uint64_t *)v1 + 59);
}

void sub_216B45D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasVariantSetNames(atomic_uint **this)
{
}

void sub_216B45E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantNames(pxrInternal__aapl__pxrReserved__::SdfSpec *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  long long v28 = 0uLL;
  unint64_t v29 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1) == 7
    || (pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, __p),
        BOOL IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p),
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1),
        sub_21697C414(__p),
        !IsPrimPath))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &i);
    sub_216779094(__p, "");
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&i, a2, (uint64_t)__p, &v26);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 1);
    sub_21697C414(&i);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v22);
    uint64_t v7 = sub_2169791E0(&v22);
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys)) {
      sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    long long i = 0uLL;
    uint64_t v21 = 0;
    uint64_t v9 = sub_216A5B7B0((uint64_t *)(v7 + 112));
    (*(void (**)(uint64_t ***__return_ptr))(*(void *)v9 + 136))(&v30);
    if (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v30))
    {
      if ((v31 & 4) != 0) {
        int v10 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(&v30);
      }
      else {
        int v10 = v30;
      }
    }
    else
    {
      int v10 = (uint64_t **)&i;
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v25 = 0;
    sub_21698FA28(__p, *v10, v10[1], v10[1] - *v10);
    uint64_t v11 = (void ***)sub_2168EE084((uint64_t)&v30);
    int v30 = (uint64_t **)&i;
    sub_216889A04(v11);
    uint64_t v12 = v23;
    if (v23 && atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    sub_21680BC90((uint64_t *)&v28, ((char *)__p[1] - (char *)__p[0]) >> 3);
    for (long long i = *(_OWORD *)__p; (void)i != *((void *)&i + 1); sub_2169CECC4(&i))
    {
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169CEC48(&i, v13, v14);
      if ((**(void **)v15 & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((**(void **)v15 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      }
      char v17 = (long long *)*((void *)&v28 + 1);
      if (*((void *)&v28 + 1) >= v29)
      {
        uint64_t v19 = sub_2167E9A44((uint64_t *)&v28, (long long *)EmptyString);
      }
      else
      {
        if (*((char *)EmptyString + 23) < 0)
        {
          sub_216778F24(*((unsigned char **)&v28 + 1), (void *)*EmptyString, EmptyString[1]);
        }
        else
        {
          long long v18 = *(_OWORD *)EmptyString;
          *(void *)(*((void *)&v28 + 1) + 16) = EmptyString[2];
          *char v17 = v18;
        }
        uint64_t v19 = (uint64_t)v17 + 24;
      }
      *((void *)&v28 + 1) = v19;
    }
    *(_OWORD *)a3 = v28;
    a3[2] = v29;
    long long v28 = 0uLL;
    unint64_t v29 = 0;
    *(void *)&long long i = __p;
    sub_216889A04((void ***)&i);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
    sub_21697C414(&v26);
  }
  __p[0] = &v28;
  sub_216782F20((void ***)__p);
}

void sub_216B46174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSets(uint64_t **this)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v4);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v3);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys)) {
    sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Sdf_Children();
}

void sub_216B46390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_21697B754(&a17);
  uint64_t v21 = a19;
  if (a19)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a19 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveVariantSet(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v2 + 64));
  if (result) {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSets((uint64_t **)this);
  }
  return result;
}

void sub_216B464A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, void *a2@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  if (result != 7)
  {
    sub_216A5E64C((atomic_uint **)this, v6);
    v6[1] = v6[0];
    if (v6[0]) {
      atomic_fetch_add(v6[0], 1u);
    }
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
      sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_216B4BD9C();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_216B4655C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetVariantSelection(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2, uint64_t a3)
{
  char v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    char v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 456)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections(this, &v10);
    if (sub_216B46684(&v10))
    {
      uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(a3 + 8);
      }
      if (v7)
      {
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v9);
        sub_216B467C8(&v10, a2, v8);
        sub_216B468DC((uint64_t)v8, a3);
        sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v9);
      }
      else
      {
        sub_216B4670C(&v10, a2);
      }
    }
    if (v11) {
      sub_216784EC4(v11);
    }
  }
}

void sub_216B46658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B46684(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    if (result)
    {
      if (*a1) {
        return (*(unsigned int (**)(uint64_t))(*(void *)*a1 + 32))(*a1) ^ 1;
      }
      else {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_216B4670C(uint64_t *a1, uint64_t a2)
{
  if (!sub_216B4BEF0(a1)) {
    return 0;
  }
  if (*a1) {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v5);
  }
  else {
    uint64_t v5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  if (sub_216B4BFC0(a1)) {
    return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)*a1 + 80))(*a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_216B467C8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(v9, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
  }
  long long __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_216B4C128(a1, (uint64_t)v9, (uint64_t)&v14);
  long long v16 = v14;
  char v17 = v15;
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  BOOL v5 = sub_216B4C600((uint64_t)&v16, (uint64_t)v9);
  char v6 = 0;
  uint64_t result = 0;
  if (!v5)
  {
    uint64_t result = *a1;
    if (*a1) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    }
    char v6 = a1;
  }
  long long v8 = v17;
  *a3 = v6;
  a3[1] = (uint64_t *)result;
  a3[2] = v8;
  return result;
}

void sub_216B468C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216B468DC(uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t **)a1;
  if (v3)
  {
    sub_216B4C6D4(v3, *(void *)(a1 + 8), (void *)(a1 + 16), a2);
  }
  else
  {
    v5[0] = "sdf/mapEditProxy.h";
    v5[1] = "operator=";
    v5[2] = 162;
    v5[3] = "_ValueProxy &pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValuePr"
            "oxy::operator=(const U &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrRese"
            "rved__::SdfIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>, U = std::string]";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Assignment to invalid map proxy");
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::BlockVariantSelection(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 456)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections(this, &v9);
    if (sub_216B46684(&v9))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v8);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v7 = 0;
      sub_216B467C8(&v9, a2, v5);
      sub_216B468DC((uint64_t)v5, (uint64_t)__p);
      if (SHIBYTE(v7) < 0) {
        operator delete(__p[0]);
      }
      sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v8);
    }
    if (v10) {
      sub_216784EC4(v10);
    }
  }
}

void sub_216B46A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  char v20 = *(std::__shared_weak_count **)(v18 - 24);
  if (v20) {
    sub_216784EC4(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelocates@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, void *a2@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  if (result != 7)
  {
    sub_216A5E64C((atomic_uint **)this, v6);
    v6[1] = v6[0];
    if (v6[0]) {
      atomic_fetch_add(v6[0], 1u);
    }
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
      sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_216B4CA58();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_216B46B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetRelocates(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, void *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 288)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelocates(this, &v5);
    sub_216B4CBAC(&v5, a2);
    if (v6) {
      sub_216784EC4(v6);
    }
  }
}

void sub_216B46B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfPrimSpec::HasRelocates(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 288));
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ClearRelocates(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::_ValidateEdit(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 288));
  if (result)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4) {
      uint64_t v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    return pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 288));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_UncheckedCreatePrimInLayer(pxrInternal__aapl__pxrReserved__ *this, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(this, a2)) {
    return 1;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  unint64_t PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a2);
  sub_216A6E72C((uint64_t *)&v18, PathElementCount);
  int v13 = pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(a2);
  sub_216981010(&v16, a2);
  sub_21698105C(&v17, (_DWORD *)a2 + 1);
  do
  {
    uint64_t v7 = v19;
    if ((unint64_t)v19 >= v20)
    {
      long long v8 = (_DWORD *)sub_216B4D5AC((uint64_t *)&v18, &v16);
    }
    else
    {
      sub_21697D878(v19, &v16);
      sub_21697D8B4(v7 + 1, &v17);
      long long v8 = v7 + 2;
    }
    uint64_t v19 = v8;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 - 2), v21);
    sub_21697DE94(&v16, (int *)v21);
    sub_21697DEEC(&v17, (int *)v21 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v21 + 1);
    sub_21697C414(v21);
  }
  while (!pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16));
  uint64_t v9 = v19;
  if (v18 == v19)
  {
    uint64_t v5 = 1;
  }
  else
  {
    int v14 = *(v19 - 2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v19 - 2);
    int v15 = *(v9 - 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v9 - 1);
    uint64_t v10 = v19 - 2;
    sub_216981128((uint64_t)&v20, v19 - 2);
    uint64_t v19 = v10;
    if (!v13
      || !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CreateSpec();
    }
    uint64_t v25 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, v21);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v21, &v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v21 + 1);
    sub_21697C414(v21);
    if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v24)
      || (v21[0] = (void **)"sdf/primSpec.cpp",
          v21[1] = (void **)"_FindOrCreateVariantSpec",
          _OWORD v21[2] = (void **)824,
          v21[3] = (void **)"BOOL pxrInternal__aapl__pxrReserved__::_FindOrCreateVariantSpec(SdfLayer *, const SdfPath &)",
          char v22 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v21, "primSpec", 0) & 1) != 0))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, (uint64_t)&v23);
      uint64_t v11 = (uint64_t **)sub_216A663FC(&v24);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSets(v11);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v24);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    uint64_t v5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  v21[0] = (void **)&v18;
  sub_216981168(v21);
  return v5;
}

void sub_216B47398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, int a16, int a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v22 - 104));
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v22 - 96));
  sub_21697B754(&a14);
  sub_21697B754(&a16);
  a22 = (void **)&a18;
  sub_216981168(&a22);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfCreatePrimInLayer@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_216B475DC((uint64_t)&v11, a2);
  if (a1[1])
  {
    if (*(unsigned char *)(sub_216850B68(a1 + 1) + 14)) {
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)*a1;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (!sub_216B476C4((uint64_t)v5, &v11)) {
    goto LABEL_9;
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v10);
  char v6 = v12;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_UncheckedCreatePrimInLayer(v5, v12, v7))
  {
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v10);
LABEL_9:
    *a3 = 0;
    goto LABEL_10;
  }
  long long v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v8, v6, a3);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v10);
LABEL_10:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  return sub_21697C414(&v13);
}

void sub_216B475B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B478E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B475DC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  int v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  BOOL IsAbsolutePath = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(*(pxrInternal__aapl__pxrReserved__::SdfPath **)a1);
  if (IsAbsolutePath)
  {
    int v3 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)a1;
  }
  else
  {
    char v6 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)a1;
    uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsAbsolutePath);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(v6, v7, &v8);
    sub_21697DE94((int *)v3, &v8);
    sub_21697DEEC((int *)(a1 + 20), &v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
  }
  *(void *)(a1 + 8) = v3;
  return a1;
}

void sub_216B476A0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216B476C4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t v4 = a2[1];
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(v4)
    && !pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(v4))
  {
    goto LABEL_25;
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(v4);
  if (!v5) {
    goto LABEL_23;
  }
  char v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(v4, v6, (int *)&v21);
  while (1)
  {
    int v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v7);
    uint64_t v9 = v21;
    uint64_t v10 = *v8;
    if (v21 == *v8) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, (uint64_t)&v15);
    char v11 = HIBYTE(v17);
    uint64_t v12 = v16;
    if (v17 >= 0) {
      uint64_t v12 = (const char *)HIBYTE(v17);
    }
    if (v12)
    {
      if (!((v20 & 0x80u) == 0 ? v20 : v19))
      {
        if ((v20 & 0x80) != 0)
        {
          operator delete(__p);
          char v11 = HIBYTE(v17);
        }
        if (v11 < 0) {
          operator delete(v15);
        }
        break;
      }
    }
    if ((v20 & 0x80) != 0)
    {
      operator delete(__p);
      if ((v17 & 0x8000000000000000) == 0) {
        goto LABEL_15;
      }
    }
    else if ((v17 & 0x8000000000000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete(v15);
LABEL_15:
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, &v15);
    sub_21697DE94((int *)&v21, (int *)&v15);
    sub_21697DEEC((int *)&v21 + 1, (int *)&v15 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_21697C414(&v15);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
  sub_21697C414(&v21);
  if (v9 != v10)
  {
LABEL_25:
    int v15 = "sdf/primSpec.cpp";
    int v16 = "Sdf_CanCreatePrimInLayer";
    uint64_t v17 = 979;
    long long __p = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_CanCreatePrimInLayer(SdfLayer *, const _AbsPathHelper &)";
    LOBYTE(v19) = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(*a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create prim at path '%s' because it is not a valid prim or prim variant selection path");
    return 0;
  }
LABEL_23:
  if (a1) {
    return 1;
  }
  int v15 = "sdf/primSpec.cpp";
  int v16 = "Sdf_CanCreatePrimInLayer";
  uint64_t v17 = 985;
  long long __p = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_CanCreatePrimInLayer(SdfLayer *, const _AbsPathHelper &)";
  LOBYTE(v19) = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetText(*a2);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create prim at path '%s' in null or expired layer");
  return 0;
}

void sub_216B478CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B478E8(uint64_t a1)
{
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfJustCreatePrimInLayer(uint64_t a1, uint64_t a2)
{
  sub_216B475DC((uint64_t)v8, a2);
  if (*(void *)(a1 + 8))
  {
    if (*(unsigned char *)(sub_216850B68((uint64_t *)(a1 + 8)) + 14)) {
      int v3 = *(pxrInternal__aapl__pxrReserved__ **)a1;
    }
    else {
      int v3 = 0;
    }
  }
  else
  {
    int v3 = 0;
  }
  if (sub_216B476C4((uint64_t)v3, v8))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v7);
    uint64_t PrimInLayer = pxrInternal__aapl__pxrReserved__::Sdf_UncheckedCreatePrimInLayer(v3, v8[1], v4);
    sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v7);
  }
  else
  {
    uint64_t PrimInLayer = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_21697C414(&v9);
  return PrimInLayer;
}

void sub_216B479C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

uint64_t *sub_216B479F4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216B47B20((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7580A8, (uint64_t)__p);
  int v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7580A8, (char *)8, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C757F48, (void *(*)(void *, BOOL))nullsub_264);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216B47AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216B47B20(unint64_t **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C757F48, (uint64_t)__p);
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  int v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B47B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216B47BB4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C759D00, (uint64_t)__p);
  int v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C759D00, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B47C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B47CB8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C759D10, (uint64_t)__p);
  int v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C759D10, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B47D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216B47DBC(uint64_t result, uint64_t a2, char *a3)
{
  if (*(void *)(result + 16) == *(void *)(result + 40))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::SdfChildrenPr"
            "oxy<pxrInternal__aapl__pxrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildP"
            "olicy>>>::operator->() [T = const pxrInternal__aapl__pxrReserved__::SdfChildrenProxy<pxrInternal__aapl__pxrR"
            "eserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216B47E3C(uint64_t *a1)
{
}

void sub_216B47ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216B47EE4(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_216B47F20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a1 + 40))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    _OWORD v4[2] = 250;
    void v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":SdfChildrenProxy<pxrInternal__aapl__pxrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_Va"
            "riantSetChildPolicy>>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::SdfChildrenProxy<pxrIntern"
            "al__aapl__pxrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>>, Reverse = false]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)(a1 + 16) = v2 + 1;
  }
  return a1;
}

void sub_216B47FA4(uint64_t *a1, unsigned __int8 **a2)
{
  if (sub_216B482F4((uint64_t)a1) && ((*(uint64_t (**)(void))(*(void *)*a1 + 24))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))())
    {
      sub_216B4836C(a1, 0, a2);
    }
    else
    {
      char v4 = (std::__shared_weak_count *)a1[1];
      uint64_t v5 = *a1;
      uint64_t v6 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v7 = 2;
      sub_216B48428((unsigned int *)&v5, a2);
      if (v6) {
        sub_216784EC4(v6);
      }
      sub_216B4836C(a1, 4, a2);
    }
  }
}

void sub_216B480A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B480BC(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(void *)(a1 + 8) != *(void *)(a1 + 24)) {
    sub_216B48A30();
  }
  v3[0] = "tf/iterator.h";
  v3[1] = "operator*";
  _OWORD v3[2] = 271;
  void v3[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfChildrenView<pxrIn"
          "ternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>>::operator*() [T = pxrInternal__aapl__pxrReserved__::SdfC"
          "hildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>, Reverse = false]";
  char v4 = 0;
  int v5 = 4;
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
}

void sub_216B48144()
{
}

uint64_t sub_216B4814C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == *(void *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    _OWORD v4[2] = 250;
    void v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfCh"
            "ildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>>::operator++() [T = pxrInternal__aapl__"
            "pxrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>, Reverse = false]";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)(a1 + 8) = v2 + 1;
  }
  return a1;
}

void sub_216B481D0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_2169912F8();
}

void sub_216B48254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a3;
  sub_216991380();
}

void sub_216B482D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B482F4(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 410;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy"
            ">::_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

void sub_216B4836C(uint64_t *a1, int a2, unsigned __int8 **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  uint64_t v10 = *a1;
  char v11 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = a2;
  unint64_t v5 = sub_216B48514((uint64_t)&v10, a3);
  if (v5 != -1)
  {
    if (!v5) {
      goto LABEL_10;
    }
    sub_216B4856C((unsigned int *)&v10, v5);
  }
  if (sub_216B48898((uint64_t)&v10)) {
    uint64_t v6 = &v10;
  }
  else {
    uint64_t v6 = 0;
  }
  v8.n128_u64[1] = (unint64_t)v6;
  uint64_t v9 = 0;
  sub_216B485D0((unsigned int *)&v10, &v8, (long long *)a3, &v7);
LABEL_10:
  if (v11) {
    sub_216784EC4(v11);
  }
}

void sub_216B4840C(_Unwind_Exception *exception_object)
{
  char v3 = *(std::__shared_weak_count **)(v1 - 32);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B48428(unsigned int *a1, unsigned __int8 **a2)
{
  unint64_t v3 = sub_216B48514((uint64_t)a1, a2);
  if (v3 == -1)
  {
    if (*(void *)a1)
    {
      uint64_t v4 = (void *)(*(uint64_t (**)(void, void))(**(void **)a1 + 112))(*(void *)a1, a1[4]);
      uint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3);
    }
    else
    {
      uint64_t v5 = 0;
    }
    memset(v6, 0, sizeof(v6));
    sub_216B486FC(a1, v5, 0, v6);
    __n128 v7 = (void **)v6;
    sub_216782F20(&v7);
  }
  else
  {
    sub_216B4856C(a1, v3);
  }
}

void sub_216B484FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t sub_216B48514(uint64_t a1, unsigned __int8 **a2)
{
  if (!sub_21698EB54(a1)) {
    return -1;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 16);

  return sub_216B4866C(v4, v5, a2);
}

void sub_216B4856C(unsigned int *a1, uint64_t a2)
{
  memset(v2, 0, sizeof(v2));
  sub_216B486FC(a1, a2, 1, v2);
  unint64_t v3 = (void **)v2;
  sub_216782F20(&v3);
}

void sub_216B485B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216782F20(&a12);
  _Unwind_Resume(a1);
}

__n128 sub_216B485D0@<Q0>(unsigned int *a1@<X0>, __n128 *a2@<X1>, long long *a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v7 = a2[1].n128_i64[0];
  sub_2168758C4(v9, 1uLL, a3);
  sub_216B486FC(a1, v7, 0, v9);
  uint64_t v10 = (void **)v9;
  sub_216782F20(&v10);
  __n128 result = *a2;
  *a4 = *a2;
  a4[1].n128_u64[0] = a2[1].n128_u64[0];
  return result;
}

void sub_216B48654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t sub_216B4866C(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v5 = sub_2169CAFD0(*v4, v4[1], a3);
  if (v5 == v4[1]) {
    return -1;
  }
  else {
    return 0xAAAAAAAAAAAAAAABLL * ((v5 - *v4) >> 3);
  }
}

void sub_216B486FC(unsigned int *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (sub_216B48898((uint64_t)a1))
  {
    if (!a3 && *a4 == a4[1])
    {
      (*(void (**)(void **__return_ptr))(**(void **)a1 + 32))(__p);
      if (v17)
      {
        uint64_t v10 = "sdf/listProxy.h";
        char v11 = "_Edit";
        uint64_t v12 = 750;
        int v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy>::_"
              "Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
        char v14 = 0;
        WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
        if (*((char *)WhyNot + 23) >= 0) {
          uint64_t v9 = (const char *)WhyNot;
        }
        else {
          uint64_t v9 = (const char *)*WhyNot;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing list: %s", v9);
        if (v17 && v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else if (((*(uint64_t (**)(void, void, uint64_t, uint64_t, void *))(**(void **)a1 + 80))(*(void *)a1, a1[4], a2, a3, a4) & 1) == 0)
    {
      uint64_t v10 = "sdf/listProxy.h";
      char v11 = "_Edit";
      uint64_t v12 = 758;
      int v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy>::_Ed"
            "it(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
      char v14 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Inserting invalid value into list editor");
    }
  }
}

void sub_216B48874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B48898(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 689;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy>::_Va"
            "lidate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

void sub_216B48910(_OWORD *a1)
{
  *a1 = 0u;
  a1[1] = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::Sdf_Children();
}

void sub_216B48970(_Unwind_Exception *a1)
{
  sub_216B48988(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216B48988(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 40);
  sub_216889A04(&v5);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  char v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_216B48A30()
{
}

uint64_t sub_216B48A7C(uint64_t a1, void *a2)
{
  if (!sub_216ABD6F8(a1)) {
    return -1;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 16);

  return sub_216B48C70(v4, v5, a2);
}

void sub_216B48AD4(unsigned int *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (sub_216B48D04((uint64_t)a1))
  {
    if (!a3 && *a4 == a4[1])
    {
      (*(void (**)(void **__return_ptr))(**(void **)a1 + 32))(__p);
      if (v17)
      {
        uint64_t v10 = "sdf/listProxy.h";
        char v11 = "_Edit";
        uint64_t v12 = 750;
        int v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolic"
              "y>::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfN"
              "ameTokenKeyPolicy]";
        char v14 = 0;
        WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
        if (*((char *)WhyNot + 23) >= 0) {
          uint64_t v9 = (const char *)WhyNot;
        }
        else {
          uint64_t v9 = (const char *)*WhyNot;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing list: %s", v9);
        if (v17 && v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else if (((*(uint64_t (**)(void, void, uint64_t, uint64_t, void *))(**(void **)a1 + 80))(*(void *)a1, a1[4], a2, a3, a4) & 1) == 0)
    {
      uint64_t v10 = "sdf/listProxy.h";
      char v11 = "_Edit";
      uint64_t v12 = 758;
      int v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy>"
            "::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy]";
      char v14 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Inserting invalid value into list editor");
    }
  }
}

void sub_216B48C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B48C70(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v5 = *(void **)(v4 + 8);
  if (*(void **)v4 == v5)
  {
    uint64_t v6 = *(void **)v4;
  }
  else
  {
    uint64_t v6 = *(void **)v4;
    while ((*v6 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v6 == v5)
      {
        uint64_t v6 = *(void **)(v4 + 8);
        break;
      }
    }
  }
  if (v6 == v5) {
    return -1;
  }
  else {
    return ((uint64_t)v6 - *(void *)v4) >> 3;
  }
}

uint64_t sub_216B48D04(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 689;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy>"
            "::_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

void sub_216B48D7C()
{
}

void sub_216B48DAC(_Unwind_Exception *a1)
{
  sub_216B48DC0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216B48DC0(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 40);
  sub_216889A04(&v5);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  char v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_216B48E68()
{
}

void sub_216B48E98(_Unwind_Exception *a1)
{
  sub_216B48EAC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216B48EAC(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 40);
  sub_216889A04(&v5);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  char v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

BOOL sub_216B48F54(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C750BB8;
  sub_21691B31C(v7, a3);
  BOOL v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B48FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_216B49000(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v6 = (char *)&off_26C758118 + 3;
  int v5 = *a3;
  BOOL v3 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  sub_2168EE084((uint64_t)&v5);
  return v3;
}

void sub_216B49080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216B49094@<X0>(void *a1@<X8>)
{
  __n128 result = operator new(4uLL);
  *__n128 result = 0;
  *a1 = result;
  a1[1] = sub_216B490DC;
  a1[2] = &stru_26C759D20;
  return result;
}

void sub_216B490DC(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

BOOL sub_216B490E8(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v6 = (char *)&off_26C759D30 + 3;
  int v5 = *a3;
  BOOL v3 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  sub_2168EE084((uint64_t)&v5);
  return v3;
}

void sub_216B49168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216B4917C(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_216B4918C(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_216B49198()
{
  return 1;
}

unint64_t sub_216B491A0(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_216B491C0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_216B491D4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216B491EC()
{
  return 0;
}

void *sub_216B491FC()
{
  return &unk_26C759D20;
}

uint64_t sub_216B49208()
{
  return 0;
}

uint64_t sub_216B49210()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216B4921C()
{
  return 0;
}

uint64_t sub_216B49224()
{
  return 0;
}

BOOL sub_216B4922C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217478FF4 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216B49268(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C759D20, a2, a3);
}

void *sub_216B4928C()
{
  return &unk_26C759D20;
}

_DWORD *sub_216B4929C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C759D30 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

void *sub_216B492B8(unsigned int *a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C759D20, *a1, (uint64_t)__p);
  if ((v8 & 0x80u) == 0) {
    BOOL v3 = __p;
  }
  else {
    BOOL v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  int v5 = sub_216779180(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_216B49330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B4934C()
{
}

void sub_216B493C8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_216B49404(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216B4942C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216B4945C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C759E38)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_216B494A0(void *a1)
{
  uint64_t v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(void))(*(void *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  v4[0] = "sdf/mapEditProxy.h";
  v4[1] = "_Validate";
  _OWORD v4[2] = 761;
  void v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Valid"
          "ate() [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = pxrInternal__aapl__pxrReserved__::Sd"
          "fIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing an invalid map proxy");
  return 0;
}

uint64_t sub_216B49570(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(void *)v2 + 24))(&v11);
  }
  else {
    char v11 = 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v11) & 1) != 0
    || (BOOL v3 = sub_21697F2E0(&v11), (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v3) & 1) != 0))
  {
    uint64_t v4 = 1;
  }
  else
  {
    v9[0] = "sdf/mapEditProxy.h";
    v9[1] = "_ValidateErase";
    _OWORD v9[2] = 1019;
    void v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Val"
            "idateErase(const key_type &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = pxrInternal"
            "__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
    char v10 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(__p);
      if (v8 >= 0) {
        char v5 = __p;
      }
      else {
        char v5 = (void **)__p[0];
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      char v5 = __p;
      uint64_t v8 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't erase value from %s: Permission denied.", (const char *)v5);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v4 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  return v4;
}

void sub_216B496A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v15 - 24));
  _Unwind_Resume(a1);
}

double sub_216B496D8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  if (!sub_216B494A0(a1)) {
    goto LABEL_9;
  }
  if (*a1) {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 24))(&v6);
  }
  else {
    *(void *)&long long v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
  if (sub_216B497E8(a1))
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 72))(&v6);
    uint64_t v4 = *a1;
    if (*a1) {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
    }
    *(void *)a2 = a1;
    *(void *)(a2 + 8) = v4;
    double result = *(double *)&v6;
    *(_OWORD *)(a2 + 16) = v6;
    *(unsigned char *)(a2 + 32) = v7;
  }
  else
  {
LABEL_9:
    *(unsigned char *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

BOOL sub_216B497E8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(void *)v2 + 24))(&v28);
  }
  else {
    long long v28 = 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v28) & 1) == 0)
  {
    BOOL v3 = sub_21697F2E0(&v28);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v3) & 1) == 0)
    {
      uint64_t v23 = "sdf/mapEditProxy.h";
      int v24 = "_ValidateInsert";
      uint64_t v25 = 980;
      int v26 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Val"
            "idateInsert(const value_type &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = pxrInter"
            "nal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
      char v27 = 0;
      if (*a1)
      {
        (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(v20);
        if (v21 >= 0) {
          uint64_t v9 = v20;
        }
        else {
          uint64_t v9 = (void **)v20[0];
        }
      }
      else
      {
        v20[0] = 0;
        v20[1] = 0;
        uint64_t v9 = v20;
        uint64_t v21 = 0;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert value in %s: Permission denied.", (const char *)v9);
LABEL_28:
      if (SHIBYTE(v21) < 0) {
        operator delete(v20[0]);
      }
LABEL_30:
      BOOL v6 = 0;
      goto LABEL_31;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a1 + 88))(v20);
  if (v22)
  {
    uint64_t v23 = "sdf/mapEditProxy.h";
    int v24 = "_ValidateInsert";
    uint64_t v25 = 990;
    int v26 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Valid"
          "ateInsert(const value_type &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = pxrInternal_"
          "_aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
    char v27 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(&__p);
      char v4 = HIBYTE(v19);
      char v5 = (void **)__p;
    }
    else
    {
      char v5 = 0;
      char v4 = 0;
      long long __p = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v20);
    p_p = &__p;
    if (v4 < 0) {
      p_p = v5;
    }
    if (*((char *)WhyNot + 23) >= 0) {
      uint64_t v12 = (const char *)WhyNot;
    }
    else {
      uint64_t v12 = (const char *)*WhyNot;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert key in %s: %s", (const char *)p_p, v12);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p);
    }
    if (!v22) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a1 + 96))(v20);
  BOOL v6 = v22 == 0;
  if (v22)
  {
    uint64_t v23 = "sdf/mapEditProxy.h";
    int v24 = "_ValidateInsert";
    uint64_t v25 = 1000;
    int v26 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Valid"
          "ateInsert(const value_type &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = pxrInternal_"
          "_aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
    char v27 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(&__p);
      char v7 = HIBYTE(v19);
      uint64_t v8 = (void **)__p;
    }
    else
    {
      uint64_t v8 = 0;
      char v7 = 0;
      long long __p = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    char v14 = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v20);
    uint64_t v15 = &__p;
    if (v7 < 0) {
      uint64_t v15 = v8;
    }
    if (*((char *)v14 + 23) >= 0) {
      char v16 = (const char *)v14;
    }
    else {
      char v16 = (const char *)*v14;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert value in %s: %s", (const char *)v15, v16);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p);
    }
    if (v22 && SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
  }
LABEL_31:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v28);
  return v6;
}

void sub_216B49B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a24)
  {
    if (a23 < 0) {
      operator delete(__p);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_216B49BB4(void *a1, void *a2)
{
  if (*a1 == *a2)
  {
    uint64_t v3 = a1[3];
    if (v3 == a2[3] && (!v3 || a1[2] == a2[2])) {
      return 1;
    }
  }
  uint64_t result = sub_216B49C34((uint64_t)a1);
  if (result)
  {
    return sub_216B49C34((uint64_t)a2);
  }
  return result;
}

BOOL sub_216B49C34(uint64_t a1)
{
  uint64_t v1 = *(pxrInternal__aapl__pxrReserved__::VtDictionary ***)a1;
  if (!*(void *)a1) {
    return 1;
  }
  uint64_t v3 = *v1;
  if (*v1) {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary *))(*(void *)v3 + 48))(v3);
  }
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v3);
  return *(void *)(a1 + 24) == v5 && (!v5 || *(void *)(a1 + 16) == v4);
}

uint64_t sub_216B49CB4(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t result = sub_216B494A0(a1);
  if (result)
  {
    if (*a1) {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v8);
    }
    else {
      uint64_t v8 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
    uint64_t result = sub_216B49D80(a1);
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 64))(*a1, *a3 + 32, a4);
    }
  }
  return result;
}

BOOL sub_216B49D80(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(void *)v2 + 24))(&v22);
  }
  else {
    char v22 = 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v22) & 1) != 0
    || (uint64_t v3 = sub_21697F2E0(&v22), (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v3) & 1) != 0))
  {
    (*(void (**)(void **__return_ptr))(*(void *)*a1 + 96))(v14);
    BOOL v4 = v16 == 0;
    if (v16)
    {
      char v17 = "sdf/mapEditProxy.h";
      uint64_t v18 = "_ValidateSet";
      uint64_t v19 = 952;
      unsigned __int8 v20 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Val"
            "idateSet(const key_type &, const mapped_type &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValueP"
            "olicy = pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved_"
            "_::VtDictionary>]";
      char v21 = 0;
      if (*a1)
      {
        (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(__p);
        char v5 = HIBYTE(v13);
        BOOL v6 = (void **)__p[0];
      }
      else
      {
        BOOL v6 = 0;
        char v5 = 0;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v13 = 0;
      }
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v14);
      uint64_t v9 = __p;
      if (v5 < 0) {
        uint64_t v9 = v6;
      }
      if (*((char *)WhyNot + 23) >= 0) {
        char v10 = (const char *)WhyNot;
      }
      else {
        char v10 = (const char *)*WhyNot;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value in %s: %s", (const char *)v9, v10);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p[0]);
      }
      if (v16 && SHIBYTE(v15) < 0) {
        operator delete(v14[0]);
      }
    }
  }
  else
  {
    char v17 = "sdf/mapEditProxy.h";
    uint64_t v18 = "_ValidateSet";
    uint64_t v19 = 942;
    unsigned __int8 v20 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Valid"
          "ateSet(const key_type &, const mapped_type &) [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolic"
          "y = pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
    char v21 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(v14);
      if (v15 >= 0) {
        char v7 = v14;
      }
      else {
        char v7 = (void **)v14[0];
      }
    }
    else
    {
      v14[0] = 0;
      v14[1] = 0;
      char v7 = v14;
      uint64_t v15 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value in %s: Permission denied.", (const char *)v7);
    if (SHIBYTE(v15) < 0) {
      operator delete(v14[0]);
    }
    BOOL v4 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v22);
  return v4;
}

void sub_216B49FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_216B4A038(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112);
  if (v3)
  {
    char v5 = (void *)v4(a1, 3);
    return *v5 != v5[1];
  }
  uint64_t v2 = 1;
  BOOL v6 = (void *)v4(a1, 1);
  if (*v6 == v6[1])
  {
    char v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 4);
    if (*v7 == v7[1])
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 5);
      if (*v8 == v8[1])
      {
        uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 2);
        if (*v9 == v9[1])
        {
          char v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 3);
          return *v5 != v5[1];
        }
      }
    }
  }
  return v2;
}

uint64_t sub_216B4A1DC(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112);
  if (v3)
  {
    char v5 = (void *)v4(a1, 3);
    return *v5 != v5[1];
  }
  uint64_t v2 = 1;
  BOOL v6 = (void *)v4(a1, 1);
  if (*v6 == v6[1])
  {
    char v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 4);
    if (*v7 == v7[1])
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 5);
      if (*v8 == v8[1])
      {
        uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 2);
        if (*v9 == v9[1])
        {
          char v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 3);
          return *v5 != v5[1];
        }
      }
    }
  }
  return v2;
}

void sub_216B4A380(void *a1, atomic_uint **a2, uint64_t *a3)
{
  *sub_216B4A600(a1, a2, a3) = &unk_26C759E58;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
}

void sub_216B4A5C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169CBCC8((void **)va);
  sub_2169CBCC8(v3);
  sub_216B4A724(v2);
  _Unwind_Resume(a1);
}

void *sub_216B4A600(void *result, atomic_uint **a2, uint64_t *a3)
{
  int v3 = *a2;
  *uint64_t result = &unk_26C759F08;
  result[1] = v3;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  uint64_t v4 = *a3;
  result[2] = *a3;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_216B4A65C@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_21698F724((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0) {
      a3 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    }
    else {
      a3 = v7;
    }
  }
  sub_2169DAE8C(a4, a3);
  return sub_2168EE084((uint64_t)&v7);
}

void sub_216B4A708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *sub_216B4A724(void *a1)
{
  *a1 = &unk_26C759F08;
  uint64_t v2 = a1[2];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1));
  return a1;
}

void sub_216B4A788(uint64_t a1)
{
  uint64_t v1 = (void *)sub_216B4B21C(a1);

  operator delete(v1);
}

double sub_216B4A7B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    uint64_t v4 = "List editor is expired";
  }
  else
  {
    char v5 = sub_21697F2E0(v3);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
      return result;
    }
    uint64_t v4 = "Permission denied";
  }
  sub_216779094(&v7, v4);
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

BOOL sub_216B4A838(uint64_t a1, void *lpsrc)
{
  int v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C759ED0, (const struct __class_type_info *)&unk_26C759EE0, 0);
  uint64_t v4 = v3;
  if (v3)
  {
    sub_216B4B300(a1, v3 + 32, 0);
  }
  else
  {
    v6[0] = "sdf/listOpListEditor.h";
    v6[1] = "CopyEdits";
    _OWORD v6[2] = 221;
    void v6[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfNam"
            "eKeyPolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not copy from list editor of different type");
  }
  return v4 != 0;
}

void sub_216B4A908()
{
}

void sub_216B4A9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_216B4A9C4()
{
}

void sub_216B4AA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_216B4AA88(uint64_t a1, uint64_t a2)
{
  void v5[4] = *MEMORY[0x263EF8340];
  sub_2169DAE8C((uint64_t)&v4, a1 + 32);
  v5[0] = &unk_26C759F90;
  v5[1] = a1;
  v5[2] = a2;
  v5[3] = v5;
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ModifyOperations();
}

void sub_216B4AB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_216B4ABC8()
{
}

void sub_216B4ABD0(uint64_t a1, int a2)
{
  int v3 = a2;
  sub_2169DAE8C((uint64_t)v2, a1 + 32);
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ReplaceOperations();
}

void sub_216B4ACC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169CBCC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_216B4ACD4(uint64_t a1, int a2, void *lpsrc)
{
  int v6 = a2;
  if (__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C759ED0, (const struct __class_type_info *)&unk_26C759EE0, 0))
  {
    sub_2169DAE8C((uint64_t)v4, a1 + 32);
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ComposeOperations();
  }
  v4[0] = "sdf/listOpListEditor.h";
  v4[1] = "ApplyList";
  _OWORD v4[2] = 296;
  void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfNameK"
          "eyPolicy>::ApplyList(SdfListOpType, const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__"
          "::SdfNameKeyPolicy]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot apply from list editor of different type");
}

void sub_216B4AE2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169CBCC8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B4AE40(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  BOOL v9 = *a3 == v6 || v8 == v7;
  uint64_t i = *a4;
  if (!v9)
  {
    for (uint64_t i = *a4; v5 != v6 && i != v7; i += 24)
    {
      uint64_t v28 = *(unsigned __int8 *)(v5 + 23);
      if ((v28 & 0x80u) == 0) {
        uint64_t v29 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        uint64_t v29 = *(void *)(v5 + 8);
      }
      uint64_t v30 = *(unsigned __int8 *)(i + 23);
      int v31 = (char)v30;
      if ((v30 & 0x80u) != 0) {
        uint64_t v30 = *(void *)(i + 8);
      }
      if (v29 != v30) {
        break;
      }
      if (v31 >= 0) {
        uint64_t v32 = (unsigned __int8 *)i;
      }
      else {
        uint64_t v32 = *(unsigned __int8 **)i;
      }
      if ((v28 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v5, v32, *(void *)(v5 + 8))) {
          break;
        }
      }
      else if (*(unsigned char *)(v5 + 23))
      {
        uint64_t v33 = 0;
        while (*(unsigned __int8 *)(v5 + v33) == v32[v33])
        {
          if (v28 == ++v33) {
            goto LABEL_55;
          }
        }
        break;
      }
LABEL_55:
      v5 += 24;
    }
  }
  if (i != v7)
  {
    uint64_t v11 = i;
    do
    {
      if (v8 != v11)
      {
        uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
        size_t v13 = *(void *)(v11 + 8);
        if ((v12 & 0x80u) == 0) {
          char v14 = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 23);
        }
        else {
          char v14 = *(unsigned __int8 **)(v11 + 8);
        }
        for (uint64_t j = (unsigned __int8 **)v8; j != (unsigned __int8 **)v11; j += 3)
        {
          char v16 = (unsigned __int8 *)*((unsigned __int8 *)j + 23);
          int v17 = (char)v16;
          if ((char)v16 < 0) {
            char v16 = j[1];
          }
          if (v14 == v16)
          {
            if (v17 >= 0) {
              uint64_t v18 = (unsigned __int8 *)j;
            }
            else {
              uint64_t v18 = *j;
            }
            if ((v12 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v11, v18, v13))
              {
LABEL_34:
                unint64_t v45 = "sdf/listEditor.h";
                unint64_t v46 = "_ValidateEdit";
                uint64_t v47 = 262;
                unint64_t v48 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::Sd"
                      "fNameKeyPolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &"
                      ") const [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
                char v49 = 0;
                uint64_t v25 = __p;
                pxrInternal__aapl__pxrReserved__::TfStringify((char *)v11, (uint64_t)__p);
                if (v41 < 0) {
                  uint64_t v25 = (void **)__p[0];
                }
                unint64_t v26 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
                if (v26)
                {
                  char v27 = (const char *)(v26 + 16);
                  if (*(char *)(v26 + 39) < 0) {
                    char v27 = *(const char **)v27;
                  }
                }
                else
                {
                  char v27 = "";
                }
                sub_21698131C(a1, &v43);
                Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate item '%s' not allowed for field '%s' on <%s>", (const char *)v25, v27, Text);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
                sub_21697C414(&v43);
                goto LABEL_60;
              }
            }
            else
            {
              if (!v12) {
                goto LABEL_34;
              }
              uint64_t v19 = 0;
              while (*(unsigned __int8 *)(v11 + v19) == v18[v19])
              {
                if (v12 == ++v19) {
                  goto LABEL_34;
                }
              }
            }
          }
        }
      }
      v11 += 24;
    }
    while (v11 != v7);
  }
  unsigned __int8 v20 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v20);
  FieldDefinition = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (FieldDefinition)
  {
    if (i == v7)
    {
      return 1;
    }
    else
    {
      uint64_t v23 = FieldDefinition;
      while (1)
      {
        sub_2169CC044(v23, i, __p);
        if (v42) {
          break;
        }
        i += 24;
        if (i == v7) {
          return 1;
        }
      }
      unint64_t v45 = "sdf/listEditor.h";
      unint64_t v46 = "_ValidateEdit";
      uint64_t v47 = 279;
      unint64_t v48 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfNameKeyPo"
            "licy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy "
            "= pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
      char v49 = 0;
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
      if (*((char *)WhyNot + 23) >= 0) {
        long long v39 = (const char *)WhyNot;
      }
      else {
        long long v39 = (const char *)*WhyNot;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"%s", v39);
      if (v42)
      {
LABEL_60:
        if (v41 < 0) {
          operator delete(__p[0]);
        }
      }
      return 0;
    }
  }
  else
  {
    unint64_t v45 = "sdf/listEditor.h";
    unint64_t v46 = "_ValidateEdit";
    uint64_t v47 = 273;
    unint64_t v48 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfNameKeyPoli"
          "cy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy = px"
          "rInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    char v49 = 0;
    unint64_t v36 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v36)
    {
      unint64_t v37 = (const char *)(v36 + 16);
      if (*(char *)(v36 + 39) < 0) {
        unint64_t v37 = *(const char **)v37;
      }
    }
    else
    {
      unint64_t v37 = "";
    }
    uint64_t v24 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"No field definition for field '%s'", v37);
  }
  return v24;
}

void sub_216B4B1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_216B4B214()
{
}

uint64_t sub_216B4B21C(uint64_t a1)
{
  *(void *)a1 = &unk_26C759E58;
  uint64_t v4 = (void **)(a1 + 160);
  sub_216782F20(&v4);
  uint64_t v4 = (void **)(a1 + 136);
  sub_216782F20(&v4);
  uint64_t v4 = (void **)(a1 + 112);
  sub_216782F20(&v4);
  uint64_t v4 = (void **)(a1 + 88);
  sub_216782F20(&v4);
  uint64_t v4 = (void **)(a1 + 64);
  sub_216782F20(&v4);
  uint64_t v4 = (void **)(a1 + 40);
  sub_216782F20(&v4);
  *(void *)a1 = &unk_26C759F08;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_216B4B300(uint64_t a1, unsigned char *a2, _DWORD *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    uint64_t v15 = "sdf/listOpListEditor.h";
    char v16 = "_UpdateListOp";
    uint64_t v17 = 113;
    uint64_t v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy"
          ">::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid owner.");
  }
  else
  {
    uint64_t v7 = (uint64_t **)sub_21697F2E0(v6);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v15);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v15);
    char v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8);
    char v10 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)v16 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v10 + 8))(v10);
    }
    if (v9)
    {
      v21[0] = xmmword_2174740A8;
      v21[1] = unk_2174740B8;
      _OWORD v21[2] = xmmword_2174740C8;
      uint64_t v11 = 0;
      uint64_t v12 = v21;
      uint64_t v13 = 1;
      char v14 = (char *)v21 + 8;
      do
      {
        if (!a3 || *a3 == *v12) {
          sub_216B4B744();
        }
        ++v11;
        uint64_t v12 = (_DWORD *)v21 + 2 * v11;
        ++v13;
        v14 += 8;
      }
      while (v13 != 7);
      if ((*a2 != 0) != (*(unsigned char *)(a1 + 32) != 0))
      {
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
        sub_2169DAE8C((uint64_t)&v15, (uint64_t)a2);
        pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::Swap();
      }
    }
    else
    {
      uint64_t v15 = "sdf/listOpListEditor.h";
      char v16 = "_UpdateListOp";
      uint64_t v17 = 118;
      uint64_t v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfNameKeyPoli"
            "cy>::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserved__"
            "::SdfNameKeyPolicy]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer is not editable.");
    }
  }
}

void sub_216B4B6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_2168EE084(v30 - 160);
  sub_2169CBCC8(&a11);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a30);
  _Unwind_Resume(a1);
}

void sub_216B4B744()
{
}

__n128 sub_216B4B7F4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C759F90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216B4B840(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C759F90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_216B4B870(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_216B4B880(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C759FF0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216B4B8C0()
{
  return &unk_26C759FF0;
}

void sub_216B4B8CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v2 + 48))(__p);
  if (v6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_216778F24((unsigned char *)a2, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)__p;
      *(void *)(a2 + 16) = v5;
    }
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    sub_2169CBF18(a2, (long long *)__p);
  }
  if (v6)
  {
    if (SHIBYTE(v5) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216B4B98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_216B4B9B4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216B4B9DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216B4BA0C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75A050)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_216B4BA50(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112);
  if (v3)
  {
    uint64_t v5 = (void *)v4(a1, 3);
    return *v5 != v5[1];
  }
  uint64_t v2 = 1;
  char v6 = (void *)v4(a1, 1);
  if (*v6 == v6[1])
  {
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 4);
    if (*v7 == v7[1])
    {
      uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 5);
      if (*v8 == v8[1])
      {
        char v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 2);
        if (*v9 == v9[1])
        {
          uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 3);
          return *v5 != v5[1];
        }
      }
    }
  }
  return v2;
}

void sub_216B4BBF4()
{
}

void sub_216B4BC58(_Unwind_Exception *a1)
{
  sub_216991430(v1);
  _Unwind_Resume(a1);
}

void sub_216B4BC6C()
{
}

void sub_216B4BCC4()
{
}

void sub_216B4BD9C()
{
}

void sub_216B4BE18(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_216B4BE54(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216B4BE7C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216B4BEAC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75A0B0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_216B4BEF0(void *a1)
{
  uint64_t v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(void))(*(void *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  v4[0] = "sdf/mapEditProxy.h";
  v4[1] = "_Validate";
  _OWORD v4[2] = 761;
  void v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_Validate() [T = s"
          "td::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditProxyVal"
          "uePolicy<std::map<std::string, std::string>>]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing an invalid map proxy");
  return 0;
}

uint64_t sub_216B4BFC0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(void *)v2 + 24))(&v11);
  }
  else {
    uint64_t v11 = 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v11) & 1) != 0
    || (int v3 = sub_21697F2E0(&v11), (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v3) & 1) != 0))
  {
    uint64_t v4 = 1;
  }
  else
  {
    v9[0] = "sdf/mapEditProxy.h";
    v9[1] = "_ValidateErase";
    _OWORD v9[2] = 1019;
    void v9[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValidateErase(c"
            "onst key_type &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::S"
            "dfIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>]";
    char v10 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(__p);
      if (v8 >= 0) {
        char v5 = __p;
      }
      else {
        char v5 = (void **)__p[0];
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      char v5 = __p;
      uint64_t v8 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't erase value from %s: Permission denied.", (const char *)v5);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v4 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  return v4;
}

void sub_216B4C0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v15 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_216B4C128@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_216B4BEF0(a1);
  if (!result) {
    goto LABEL_9;
  }
  if (*a1) {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v10);
  }
  else {
    uint64_t v10 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v10);
  uint64_t result = sub_216B4C234(a1);
  if (result)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 72))(*a1, a2);
    char v9 = v8;
    uint64_t result = *a1;
    if (*a1) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    }
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = result;
    *(void *)(a3 + 16) = v7;
    *(unsigned char *)(a3 + 24) = v9;
  }
  else
  {
LABEL_9:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 24) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

BOOL sub_216B4C234(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(void *)v2 + 24))(&v28);
  }
  else {
    uint64_t v28 = 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v28) & 1) == 0)
  {
    int v3 = sub_21697F2E0(&v28);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v3) & 1) == 0)
    {
      uint64_t v23 = "sdf/mapEditProxy.h";
      uint64_t v24 = "_ValidateInsert";
      uint64_t v25 = 980;
      unint64_t v26 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValidateInsert("
            "const value_type &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__"
            "::SdfIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>]";
      char v27 = 0;
      if (*a1)
      {
        (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(v20);
        if (v21 >= 0) {
          char v9 = v20;
        }
        else {
          char v9 = (void **)v20[0];
        }
      }
      else
      {
        v20[0] = 0;
        v20[1] = 0;
        char v9 = v20;
        uint64_t v21 = 0;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert value in %s: Permission denied.", (const char *)v9);
LABEL_28:
      if (SHIBYTE(v21) < 0) {
        operator delete(v20[0]);
      }
LABEL_30:
      BOOL v6 = 0;
      goto LABEL_31;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a1 + 88))(v20);
  if (v22)
  {
    uint64_t v23 = "sdf/mapEditProxy.h";
    uint64_t v24 = "_ValidateInsert";
    uint64_t v25 = 990;
    unint64_t v26 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValidateInsert(co"
          "nst value_type &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::Sd"
          "fIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>]";
    char v27 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(&__p);
      char v4 = HIBYTE(v19);
      char v5 = (void **)__p;
    }
    else
    {
      char v5 = 0;
      char v4 = 0;
      long long __p = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v20);
    p_p = &__p;
    if (v4 < 0) {
      p_p = v5;
    }
    if (*((char *)WhyNot + 23) >= 0) {
      uint64_t v12 = (const char *)WhyNot;
    }
    else {
      uint64_t v12 = (const char *)*WhyNot;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert key in %s: %s", (const char *)p_p, v12);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p);
    }
    if (!v22) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a1 + 96))(v20);
  BOOL v6 = v22 == 0;
  if (v22)
  {
    uint64_t v23 = "sdf/mapEditProxy.h";
    uint64_t v24 = "_ValidateInsert";
    uint64_t v25 = 1000;
    unint64_t v26 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValidateInsert(co"
          "nst value_type &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::Sd"
          "fIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>]";
    char v27 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(&__p);
      char v7 = HIBYTE(v19);
      char v8 = (void **)__p;
    }
    else
    {
      char v8 = 0;
      char v7 = 0;
      long long __p = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    char v14 = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v20);
    uint64_t v15 = &__p;
    if (v7 < 0) {
      uint64_t v15 = v8;
    }
    if (*((char *)v14 + 23) >= 0) {
      char v16 = (const char *)v14;
    }
    else {
      char v16 = (const char *)*v14;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert value in %s: %s", (const char *)v15, v16);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p);
    }
    if (v22 && SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
  }
LABEL_31:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v28);
  return v6;
}

void sub_216B4C598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a24)
  {
    if (a23 < 0) {
      operator delete(__p);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 40));
  _Unwind_Resume(a1);
}

BOOL sub_216B4C600(uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t **)a1;
  char v4 = *(uint64_t **)a2;
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 16) == *(void *)(a2 + 16)) {
    return 1;
  }
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *v3;
    if (*v3) {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
    }
    if (v5 != v6 + 8) {
      return 0;
    }
    char v4 = *(uint64_t **)a2;
  }
  if (!v4) {
    return 1;
  }
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *v4;
  if (*v4) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
  }
  return v8 == v9 + 8;
}

uint64_t sub_216B4C6D4(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t result = sub_216B4BEF0(a1);
  if (result)
  {
    if (*a1) {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 24))(&v8);
    }
    else {
      uint64_t v8 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
    uint64_t result = sub_216B4C7A0(a1);
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 64))(*a1, *a3 + 32, a4);
    }
  }
  return result;
}

BOOL sub_216B4C7A0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(void *)v2 + 24))(&v22);
  }
  else {
    char v22 = 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v22) & 1) != 0
    || (int v3 = sub_21697F2E0(&v22), (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v3) & 1) != 0))
  {
    (*(void (**)(void **__return_ptr))(*(void *)*a1 + 96))(v14);
    BOOL v4 = v16 == 0;
    if (v16)
    {
      uint64_t v17 = "sdf/mapEditProxy.h";
      uint64_t v18 = "_ValidateSet";
      uint64_t v19 = 952;
      unsigned __int8 v20 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValidateSet(con"
            "st key_type &, const mapped_type &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aap"
            "l__pxrReserved__::SdfIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>]";
      char v21 = 0;
      if (*a1)
      {
        (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(__p);
        char v5 = HIBYTE(v13);
        uint64_t v6 = (void **)__p[0];
      }
      else
      {
        uint64_t v6 = 0;
        char v5 = 0;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v13 = 0;
      }
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v14);
      uint64_t v9 = __p;
      if (v5 < 0) {
        uint64_t v9 = v6;
      }
      if (*((char *)WhyNot + 23) >= 0) {
        uint64_t v10 = (const char *)WhyNot;
      }
      else {
        uint64_t v10 = (const char *)*WhyNot;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value in %s: %s", (const char *)v9, v10);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p[0]);
      }
      if (v16 && SHIBYTE(v15) < 0) {
        operator delete(v14[0]);
      }
    }
  }
  else
  {
    uint64_t v17 = "sdf/mapEditProxy.h";
    uint64_t v18 = "_ValidateSet";
    uint64_t v19 = 942;
    unsigned __int8 v20 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_ValidateSet(const"
          " key_type &, const mapped_type &) [T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__p"
          "xrReserved__::SdfIdentityMapEditProxyValuePolicy<std::map<std::string, std::string>>]";
    char v21 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(v14);
      if (v15 >= 0) {
        char v7 = v14;
      }
      else {
        char v7 = (void **)v14[0];
      }
    }
    else
    {
      v14[0] = 0;
      v14[1] = 0;
      char v7 = v14;
      uint64_t v15 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value in %s: Permission denied.", (const char *)v7);
    if (SHIBYTE(v15) < 0) {
      operator delete(v14[0]);
    }
    BOOL v4 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v22);
  return v4;
}

void sub_216B4C9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 40));
  _Unwind_Resume(a1);
}

void sub_216B4CA58()
{
}

void sub_216B4CAD4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_216B4CB10(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216B4CB38(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216B4CB68(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75A110)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216B4CBAC(uint64_t *a1, void *a2)
{
  if (sub_216B4CE88(a1))
  {
    v25[0] = 0;
    v25[1] = 0;
    char v22 = (void *)*a2;
    uint64_t v23 = a2 + 1;
    uint64_t v24 = (uint64_t *)v25;
    while (v22 != v23)
    {
      if (*a1) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(void *)*a1 + 24))(v16);
      }
      else {
        v16[0] = 0;
      }
      uint64_t v6 = (_DWORD *)sub_216B4CF58(&v22, v4, v5);
      pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy::CanonicalizePair(v16, v6, &v18);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16);
      sub_216AECC4C(&v24, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, &v18);
      if ((v7 & 1) == 0)
      {
        v16[0] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)"sdf/mapEditProxy.h";
        v16[1] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)"_Copy";
        v16[2] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)892;
        v16[3] = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)"void pxrInternal__aapl__pxrReserved__::SdfMapEditProx"
                                                                   "y<std::map<pxrInternal__aapl__pxrReserved__::SdfPath,"
                                                                   " pxrInternal__aapl__pxrReserved__::SdfPath>, pxrInter"
                                                                   "nal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePo"
                                                                   "licy>::_Copy(const Type &) [T = std::map<pxrInternal_"
                                                                   "_aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxr"
                                                                   "Reserved__::SdfPath>, _ValuePolicy = pxrInternal__aap"
                                                                   "l__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
        char v17 = 0;
        if (*a1)
        {
          (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(v14);
          char v8 = HIBYTE(v15);
          uint64_t v9 = (void **)v14[0];
        }
        else
        {
          uint64_t v9 = 0;
          char v8 = 0;
          v14[0] = 0;
          v14[1] = 0;
          uint64_t v15 = 0;
        }
        sub_216983118((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18);
        uint64_t v10 = v14;
        if (v8 < 0) {
          uint64_t v10 = v9;
        }
        if (v13 >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't copy to %s: Duplicate key '%s' exists in map.", (const char *)v10, p_p);
        if (v13 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v15) < 0) {
          operator delete(v14[0]);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
        sub_21697C414(&v20);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
        sub_21697C414(&v18);
        goto LABEL_24;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
      sub_21697C414(&v20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_21697C414(&v18);
      sub_2169961FC(&v22);
    }
    if (sub_216B4D02C(a1, (uint64_t)&v24)) {
      (*(void (**)(uint64_t, uint64_t **))(*(void *)*a1 + 56))(*a1, &v24);
    }
LABEL_24:
    sub_21698F21C((uint64_t)&v24, v25[0]);
  }
}

void sub_216B4CE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28)
{
  sub_216B4CFD8(&a28);
  sub_21698F21C(v28 - 72, *(void **)(v28 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_216B4CE88(void *a1)
{
  uint64_t v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(void))(*(void *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  v4[0] = "sdf/mapEditProxy.h";
  v4[1] = "_Validate";
  _OWORD v4[2] = 761;
  void v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxr"
          "Internal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>::_"
          "Validate() [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>"
          ", _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing an invalid map proxy");
  return 0;
}

uint64_t sub_216B4CF58(void *a1, uint64_t a2, char *a3)
{
  if (*a1 == a1[1])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator*";
    _OWORD v4[2] = 271;
    void v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrReserved__::SdfP"
            "ath, pxrInternal__aapl__pxrReserved__::SdfPath>>::operator*() [T = const std::map<pxrInternal__aapl__pxrRese"
            "rved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return *a1 + 28;
}

void sub_216B4CFD0()
{
}

_DWORD *sub_216B4CFD8(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_21697C414(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

BOOL sub_216B4D02C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(void *)v4 + 24))(&v18);
  }
  else {
    int v18 = 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v18) & 1) != 0
    || (char v7 = sub_21697F2E0(&v18), (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v7) & 1) != 0))
  {
    if (*(void *)(a2 + 16))
    {
      char v13 = *(char **)a2;
      char v14 = (const char *)(a2 + 8);
      while (1)
      {
        BOOL v8 = v13 == v14;
        if (v13 == v14) {
          break;
        }
        sub_216B4CF58(&v13, v5, v6);
        if (!sub_216B4D1E0(a1)) {
          break;
        }
        sub_2169961FC(&v13);
      }
    }
    else
    {
      BOOL v8 = 1;
    }
  }
  else
  {
    char v13 = "sdf/mapEditProxy.h";
    char v14 = "_ValidateCopy";
    uint64_t v15 = 908;
    char v16 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxr"
          "Internal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>::_"
          "ValidateCopy(const Type &) [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrRese"
          "rved__::SdfPath>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
    char v17 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(__p);
      if (v12 >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v9 = __p;
      uint64_t v12 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't copy to %s: Permission denied.", (const char *)v9);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
    BOOL v8 = 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v18);
  return v8;
}

void sub_216B4D1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v15 - 24));
  _Unwind_Resume(a1);
}

BOOL sub_216B4D1E0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **__return_ptr))(*(void *)v2 + 24))(&v28);
  }
  else {
    uint64_t v28 = 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v28) & 1) == 0)
  {
    int v3 = sub_21697F2E0(&v28);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v3) & 1) == 0)
    {
      uint64_t v23 = "sdf/mapEditProxy.h";
      uint64_t v24 = "_ValidateInsert";
      uint64_t v25 = 980;
      unint64_t v26 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, p"
            "xrInternal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy"
            ">::_ValidateInsert(const value_type &) [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal_"
            "_aapl__pxrReserved__::SdfPath>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
      char v27 = 0;
      if (*a1)
      {
        (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(v20);
        if (v21 >= 0) {
          uint64_t v9 = v20;
        }
        else {
          uint64_t v9 = (void **)v20[0];
        }
      }
      else
      {
        v20[0] = 0;
        v20[1] = 0;
        uint64_t v9 = v20;
        uint64_t v21 = 0;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert value in %s: Permission denied.", (const char *)v9);
LABEL_28:
      if (SHIBYTE(v21) < 0) {
        operator delete(v20[0]);
      }
LABEL_30:
      BOOL v6 = 0;
      goto LABEL_31;
    }
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a1 + 88))(v20);
  if (v22)
  {
    uint64_t v23 = "sdf/mapEditProxy.h";
    uint64_t v24 = "_ValidateInsert";
    uint64_t v25 = 990;
    unint64_t v26 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxr"
          "Internal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>::_"
          "ValidateInsert(const value_type &) [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl_"
          "_pxrReserved__::SdfPath>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
    char v27 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(&__p);
      char v4 = HIBYTE(v19);
      uint64_t v5 = (void **)__p;
    }
    else
    {
      uint64_t v5 = 0;
      char v4 = 0;
      long long __p = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v20);
    p_p = &__p;
    if (v4 < 0) {
      p_p = v5;
    }
    if (*((char *)WhyNot + 23) >= 0) {
      uint64_t v12 = (const char *)WhyNot;
    }
    else {
      uint64_t v12 = (const char *)*WhyNot;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert key in %s: %s", (const char *)p_p, v12);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p);
    }
    if (!v22) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a1 + 96))(v20);
  BOOL v6 = v22 == 0;
  if (v22)
  {
    uint64_t v23 = "sdf/mapEditProxy.h";
    uint64_t v24 = "_ValidateInsert";
    uint64_t v25 = 1000;
    unint64_t v26 = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxr"
          "Internal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>::_"
          "ValidateInsert(const value_type &) [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl_"
          "_pxrReserved__::SdfPath>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
    char v27 = 0;
    if (*a1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(&__p);
      char v7 = HIBYTE(v19);
      BOOL v8 = (void **)__p;
    }
    else
    {
      BOOL v8 = 0;
      char v7 = 0;
      long long __p = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    char v14 = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v20);
    uint64_t v15 = &__p;
    if (v7 < 0) {
      uint64_t v15 = v8;
    }
    if (*((char *)v14 + 23) >= 0) {
      char v16 = (const char *)v14;
    }
    else {
      char v16 = (const char *)*v14;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't insert value in %s: %s", (const char *)v15, v16);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p);
    }
    if (v22 && SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
  }
LABEL_31:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v28);
  return v6;
}

void sub_216B4D544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a24)
  {
    if (a23 < 0) {
      operator delete(__p);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_216B4D5AC(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_21677CB28(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  char v14 = &v10[8 * v4];
  char v16 = &v10[8 * v9];
  sub_21697D878(v14, a2);
  sub_21697D8B4((_DWORD *)v14 + 1, a2 + 1);
  uint64_t v15 = v14 + 8;
  sub_216981C20(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216981DDC(&v13);
  return v11;
}

void sub_216B4D688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981DDC((void **)va);
  _Unwind_Resume(a1);
}

void sub_216B4D6A0()
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v3);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v4);
  sub_21697C414(&v3);
  return Name;
}

void sub_216B4D70C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetNameToken@<X0>(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this@<X0>, atomic_uint **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v7);
  NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  int v4 = *(atomic_uint **)NameToken;
  *a2 = *(atomic_uint **)NameToken;
  if ((v4 & 7) != 0)
  {
    unint64_t v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v5;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_21697C414(&v7);
}

void sub_216B4D794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::CanSetName()
{
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v0);
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CanRename();
}

void sub_216B4D83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17 && a16 < 0) {
    operator delete(__p);
  }
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetName()
{
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v0);
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::Rename();
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetOwner@<X0>(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v7);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
  sub_21697C414(&v7);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, &v7);
    sub_21697DE94(&v9, (int *)&v7);
    sub_21697DEEC(&v10, (int *)&v7 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
    sub_21697C414(&v7);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v7);
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v7);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, a2);
  uint64_t v5 = v8;
  if (v8 && atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  return sub_21697C414(&v9);
}

void sub_216B4DA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDisplayGroup@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 104), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_216778F24((unsigned char *)a2, *(void **)v5, *(void *)(v5 + 8));
      return sub_2168EE084((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 104));
    uint64_t v5 = sub_21695A928(Fallback);
    if (*(char *)(v5 + 23) < 0) {
      goto LABEL_11;
    }
  }
  long long v9 = *(_OWORD *)v5;
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B4DBB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDisplayGroup(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216B48F54(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 104), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDisplayName@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 120), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_216778F24((unsigned char *)a2, *(void **)v5, *(void *)(v5 + 8));
      return sub_2168EE084((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 120));
    uint64_t v5 = sub_21695A928(Fallback);
    if (*(char *)(v5 + 23) < 0) {
      goto LABEL_11;
    }
  }
  long long v9 = *(_OWORD *)v5;
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B4DD5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDisplayName(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216B48F54(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 120), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_216778F24((unsigned char *)a2, *(void **)v5, *(void *)(v5 + 8));
      return sub_2168EE084((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 136));
    uint64_t v5 = sub_21695A928(Fallback);
    if (*(char *)(v5 + 23) < 0) {
      goto LABEL_11;
    }
  }
  long long v9 = *(_OWORD *)v5;
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B4DF04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDocumentation(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216B48F54(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetHidden(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 176), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    int v3 = (unsigned __int8 *)sub_216958184((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 176));
    int v3 = (unsigned __int8 *)sub_216958184(Fallback);
  }
  uint64_t v7 = *v3;
  sub_2168EE084((uint64_t)v9);
  return v7;
}

void sub_216B4E06C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetHidden(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, char a2)
{
  char v5 = a2;
  int v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    int v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return sub_216A5E3D8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 176), &v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetPrefix@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 256), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_216778F24((unsigned char *)a2, *(void **)v5, *(void *)(v5 + 8));
      return sub_2168EE084((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 256));
    uint64_t v5 = sub_21695A928(Fallback);
    if (*(char *)(v5 + 23) < 0) {
      goto LABEL_11;
    }
  }
  long long v9 = *(_OWORD *)v5;
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B4E210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetPrefix(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216B48F54(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 256), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSuffix@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 376), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_216778F24((unsigned char *)a2, *(void **)v5, *(void *)(v5 + 8));
      return sub_2168EE084((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 376));
    uint64_t v5 = sub_21695A928(Fallback);
    if (*(char *)(v5 + 23) < 0) {
      goto LABEL_11;
    }
  }
  long long v9 = *(_OWORD *)v5;
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B4E3B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetSuffix(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216B48F54(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 376), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSymmetricPeer@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 392), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_216778F24((unsigned char *)a2, *(void **)v5, *(void *)(v5 + 8));
      return sub_2168EE084((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 392));
    uint64_t v5 = sub_21695A928(Fallback);
    if (*(char *)(v5 + 23) < 0) {
      goto LABEL_11;
    }
  }
  long long v9 = *(_OWORD *)v5;
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B4E560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetSymmetricPeer(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216B48F54(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 392), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSymmetryFunction@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 416), (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  if (v13 && (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)v12) & 1) != 0)
  {
    uint64_t v5 = (atomic_uint **)sub_21695C470((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 416));
    uint64_t v5 = (atomic_uint **)sub_21695C470(Fallback);
  }
  long long v9 = *v5;
  *a2 = *v5;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v10;
    }
  }
  return sub_2168EE084((uint64_t)v12);
}

void sub_216B4E6F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetSymmetryFunction(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216A5E46C(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 416), (uint64_t *)a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetPermission(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 248), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_216B44AD8((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    int v3 = (unsigned int *)sub_216B44B64((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 248));
    int v3 = (unsigned int *)sub_216B44B64(Fallback);
  }
  uint64_t v7 = *v3;
  sub_2168EE084((uint64_t)v9);
  return v7;
}

void sub_216B4E858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetPermission(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, int a2)
{
  int v5 = a2;
  int v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    int v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return sub_216B490E8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 248), &v5);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetCustomData(atomic_uint **this)
{
  sub_216B44CF8(this, &v2);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B4934C();
}

void sub_216B4E93C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetCustomData(atomic_uint **a1)
{
  sub_216B44CF8(a1, v2);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B4934C();
}

void sub_216B4E9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSymmetryArguments(atomic_uint **this)
{
  sub_216B44CF8(this, &v2);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B4934C();
}

void sub_216B4EA90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetSymmetryArgument(atomic_uint **a1)
{
  sub_216B44CF8(a1, v2);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B4934C();
}

void sub_216B4EB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetAssetInfo(atomic_uint **this)
{
  sub_216B44CF8(this, &v2);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B4934C();
}

void sub_216B4EBE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetAssetInfo(atomic_uint **a1)
{
  sub_216B44CF8(a1, v2);
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B4934C();
}

void sub_216B4ECA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDefaultValue@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, void *a2@<X8>)
{
  _OWORD v9[2] = *MEMORY[0x263EF8340];
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 88), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v9[1])
  {
    sub_2168EE4C4(a2, v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    BOOL v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v6) {
      BOOL v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 88));
    sub_2168EE4C4(a2, Fallback);
  }
  return sub_2168EE084((uint64_t)v9);
}

void sub_216B4EDBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfPropertySpec::HasDefaultValue(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 88));
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::ClearDefaultValue(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 88));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 64), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    int v3 = (unsigned __int8 *)sub_216958184((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    int v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      int v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 64));
    int v3 = (unsigned __int8 *)sub_216958184(Fallback);
  }
  uint64_t v7 = *v3;
  sub_2168EE084((uint64_t)v9);
  return v7;
}

void sub_216B4EF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetCustom(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, char a2)
{
  char v5 = a2;
  int v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    int v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return sub_216A5E3D8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 64), &v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 48), (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  if (v12 && (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    uint64_t v5 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if (*(char *)(v5 + 23) < 0)
    {
LABEL_11:
      sub_216778F24((unsigned char *)a2, *(void **)v5, *(void *)(v5 + 8));
      return sub_2168EE084((uint64_t)v11);
    }
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 48));
    uint64_t v5 = sub_21695A928(Fallback);
    if (*(char *)(v5 + 23) < 0) {
      goto LABEL_11;
    }
  }
  long long v9 = *(_OWORD *)v5;
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  *(_OWORD *)a2 = v9;
  return sub_2168EE084((uint64_t)v11);
}

void sub_216B4F118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetComment(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }

  return sub_216B48F54(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 48), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 464), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_2169DC5C4((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    int v3 = (unsigned int *)sub_2169D0924((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 464));
    int v3 = (unsigned int *)sub_2169D0924(Fallback);
  }
  uint64_t v7 = *v3;
  sub_2168EE084((uint64_t)v9);
  return v7;
}

void sub_216B4F280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDefaultValue(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (*((void *)a2 + 1))
  {
    int v3 = a2;
    Valueuint64_t Type = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetValueType(this);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v35);
    if (ValueType == v35)
    {
      if (!sub_216A5F85C(v3))
      {
        uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)"sdf/propertySpec.cpp";
        unint64_t v36 = (unint64_t)"SetDefaultValue";
        uint64_t v37 = 180;
        unint64_t v38 = "BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDefaultValue(const VtValue &)";
        char v39 = 0;
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, __p);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
        uint64_t TypeName = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(this);
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, &v33);
        unint64_t v19 = (unint64_t)v33 & 0xFFFFFFFFFFFFFFF8;
        if (((unint64_t)v33 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          int v20 = (const char *)(v19 + 16);
          if (*(char *)(v19 + 39) < 0) {
            int v20 = *(const char **)v20;
          }
        }
        else
        {
          int v20 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v35, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value on attribute <%s> with unknown type \"%s\"", Text, v20);
        if ((v33 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        uint64_t v24 = __p;
        goto LABEL_51;
      }
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v13) {
        uint64_t v13 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      return pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v13 + 88), v3);
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91068, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B91068))
      {
        qword_267B91060 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755210, v27, v28);
        __cxa_guard_release(&qword_267B91068);
      }
      if (ValueType == (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)qword_267B91060)
      {
        uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)"sdf/propertySpec.cpp";
        unint64_t v36 = (unint64_t)"SetDefaultValue";
        uint64_t v37 = 188;
        unint64_t v38 = "BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDefaultValue(const VtValue &)";
        char v39 = 0;
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v33);
        uint64_t v15 = __p;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, (uint64_t)__p);
        if (v31 < 0) {
          uint64_t v15 = (void **)__p[0];
        }
        uint64_t v29 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(this);
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v29, (atomic_uint **)&TypeName);
        unint64_t v16 = TypeName & 0xFFFFFFFFFFFFFFF8;
        if ((TypeName & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          char v17 = (const char *)(v16 + 16);
          if (*(char *)(v16 + 39) < 0) {
            char v17 = *(const char **)v17;
          }
        }
        else
        {
          char v17 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v35, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value on <%s>: %s-typed attributes cannot have an authored default value", (const char *)v15, v17);
        if ((TypeName & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(TypeName & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v31 < 0) {
          operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
        goto LABEL_46;
      }
      unint64_t Typeid = pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&ValueType);
      if (!sub_21677EC50(Typeid, MEMORY[0x263F8C288])
        && !pxrInternal__aapl__pxrReserved__::TfType::IsEnumType((pxrInternal__aapl__pxrReserved__::TfType *)&ValueType, (uint64_t)v5, v6))
      {
        char v22 = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&ValueType);
        pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid(v3, v22, &v35);
        if (v36)
        {
          if (sub_21699AB4C((pxrInternal__aapl__pxrReserved__::VtValue *)&v35)
            && ((v36 & 4) != 0
              ? (uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfPathExpression **))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(&v35))
              : (uint64_t v23 = v35),
                !pxrInternal__aapl__pxrReserved__::SdfPathExpression::IsAbsolute(v23)))
          {
            __p[0] = this;
            sub_216B4FB94((uint64_t *)&v35, (pxrInternal__aapl__pxrReserved__::SdfSpec **)__p);
          }
          else if (sub_21699AC40((pxrInternal__aapl__pxrReserved__::VtValue *)&v35))
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v33);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, __p);
            sub_21697B754(&v33);
            uint64_t v33 = (atomic_uint *)__p;
            sub_216B4FE74(&v35, (pxrInternal__aapl__pxrReserved__::SdfPath **)&v33);
            sub_21697B754(__p);
          }
          unint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v26) {
            unint64_t v26 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          int v3 = (pxrInternal__aapl__pxrReserved__::VtValue *)&v35;
        }
        else
        {
          if (!sub_216A5F85C(v3))
          {
            sub_2168EE084((uint64_t)&v35);
            goto LABEL_8;
          }
          unint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v26) {
            unint64_t v26 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
        }
        BOOL v12 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v26 + 88), v3);
        sub_2168EE084((uint64_t)&v35);
        return v12;
      }
      uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(v3, v5, v6);
      if (ValueType != (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)Type)
      {
LABEL_8:
        uint64_t v35 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)"sdf/propertySpec.cpp";
        unint64_t v36 = (unint64_t)"SetDefaultValue";
        uint64_t v37 = 249;
        unint64_t v38 = "BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::SetDefaultValue(const VtValue &)";
        char v39 = 0;
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v33);
        uint64_t v8 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33);
        sub_216928738((uint64_t)v3);
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&ValueType);
        uint64_t v10 = __p;
        if (v31 < 0) {
          uint64_t v10 = (void **)__p[0];
        }
        if (*(char *)(v9 + 23) >= 0) {
          uint64_t v11 = (const char *)v9;
        }
        else {
          uint64_t v11 = *(const char **)v9;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v35, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set value on <%s> to %s: expected a value of type \"%s\"", v8, (const char *)v10, v11);
        if (v31 < 0) {
          operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
LABEL_46:
        uint64_t v24 = (void **)&v33;
LABEL_51:
        sub_21697C414(v24);
        return 0;
      }
      uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v21) {
        uint64_t v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      return pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v21 + 88), v3);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPropertySpec::ClearDefaultValue(this);
    return 1;
  }
}

void sub_216B4F7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetValueType(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  if (SpecType == 8)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91078, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B91078))
    {
      qword_267B91070 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755058, v6, v7);
      __cxa_guard_release(&qword_267B91078);
    }
    return qword_267B91070;
  }
  else if (SpecType == 1)
  {
    Schema = (atomic_ullong ***)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    sub_216B501A0(this, (atomic_uint **)&v10);
    v8[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10);
    uint64_t v11 = *(void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v8);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    v8[0] = "sdf/propertySpec.cpp";
    v8[1] = "GetValueType";
    void v8[2] = 279;
    void v8[3] = "TfType pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetValueType() const";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v10);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Unrecognized subclass of SdfPropertySpec on <%s>", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_21697C414(&v10);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v11);
  }
  return v11;
}

void sub_216B4FA1C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  if (SpecType == 8) {
    goto LABEL_6;
  }
  if (SpecType != 1)
  {
    v8[0] = (atomic_uint *)"sdf/propertySpec.cpp";
    v8[1] = (atomic_uint *)"GetTypeName";
    void v8[2] = (atomic_uint *)297;
    void v8[3] = (atomic_uint *)"SdfValueTypeName pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName() const";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v6);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Unrecognized subclass of SdfPropertySpec on <%s>", Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_21697C414(&v6);
LABEL_6:
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
    return Type;
  }
  Schema = (atomic_ullong ***)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  sub_216B501A0(this, v8);
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindOrCreateType(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)v8);
  if (((uint64_t)v8[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return Type;
}

void sub_216B4FB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B4FB94(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfSpec **a2)
{
  uint64_t v3 = sub_216B5051C(a1);
  *(_OWORD *)long long __p = *(_OWORD *)v3;
  uint64_t v10 = *(void *)(v3 + 16);
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  long long v4 = *(_OWORD *)(v3 + 24);
  *(void *)uint64_t v3 = 0;
  long long v11 = v4;
  uint64_t v12 = *(void *)(v3 + 40);
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 24) = 0;
  long long v13 = *(_OWORD *)(v3 + 48);
  uint64_t v14 = *(void *)(v3 + 64);
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  long long v5 = *(_OWORD *)(v3 + 72);
  uint64_t v16 = *(void *)(v3 + 88);
  *(_OWORD *)uint64_t v15 = v5;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = 0;
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(*a2, &v17);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17, &v19);
  sub_216B505B0((uint64_t)__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, (uint64_t)v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)long long __p = *(_OWORD *)v21;
  uint64_t v10 = v22;
  v21[1] = 0;
  uint64_t v22 = 0;
  v21[0] = 0;
  sub_2169B59AC((void **)&v11);
  long long v11 = v23;
  uint64_t v12 = v24;
  uint64_t v24 = 0;
  long long v23 = 0uLL;
  sub_2169B5A6C((void **)&v13);
  long long v13 = v25;
  uint64_t v14 = v26;
  uint64_t v26 = 0;
  long long v25 = 0uLL;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
  *(_OWORD *)uint64_t v15 = v27;
  uint64_t v16 = v28;
  HIBYTE(v28) = 0;
  LOBYTE(v27) = 0;
  uint64_t v29 = (void **)&v25;
  sub_2169B81EC(&v29);
  uint64_t v29 = (void **)&v23;
  sub_2169B74B8(&v29);
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  int v6 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v6;
    operator delete(v6);
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = 0;
  }
  int v7 = (void **)(v3 + 72);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)__p;
  *(void *)(v3 + 16) = v10;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v10 = 0;
  sub_2169B59AC((void **)(v3 + 24));
  *(_OWORD *)(v3 + 24) = v11;
  *(void *)(v3 + 40) = v12;
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  sub_2169B5A6C((void **)(v3 + 48));
  *(_OWORD *)(v3 + 48) = v13;
  *(void *)(v3 + 64) = v14;
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  if (*(char *)(v3 + 95) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)v15;
  *(void *)(v3 + 88) = v16;
  *(_OWORD *)int v7 = v8;
  HIBYTE(v16) = 0;
  LOBYTE(v15[0]) = 0;
  v21[0] = &v13;
  sub_2169B81EC((void ***)v21);
  v21[0] = &v11;
  sub_2169B74B8((void ***)v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_216B4FE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,int a23)
{
}

void sub_216B4FE74(void *a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t v3 = sub_216B50650(a1);
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v15 = *(_OWORD *)v3;
  long long v16 = v4;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  uint64_t v17 = *(void *)(v3 + 32);
  *(void *)(v3 + 32) = 0;
  sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15, v5, v6);
  uint64_t v7 = v17;
  sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15, v8, v9);
  for (uint64_t i = v17 + 96 * v15; v7 != i; v7 += 96)
  {
    sub_216B505B0(v7, *a2, (uint64_t)__p);
    long long v11 = *(void **)v7;
    if (*(void *)v7)
    {
      *(void *)(v7 + 8) = v11;
      operator delete(v11);
    }
    *(_OWORD *)uint64_t v7 = *(_OWORD *)__p;
    *(void *)(v7 + 16) = v19;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v19 = 0;
    sub_2169B59AC((void **)(v7 + 24));
    *(_OWORD *)(v7 + 24) = v20;
    *(void *)(v7 + 40) = v21;
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    sub_2169B5A6C((void **)(v7 + 48));
    *(_OWORD *)(v7 + 48) = v22;
    *(void *)(v7 + 64) = v23;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    uint64_t v12 = (void **)(v7 + 72);
    if (*(char *)(v7 + 95) < 0) {
      operator delete(*v12);
    }
    long long v13 = v24;
    *(void *)(v7 + 88) = v25;
    *(_OWORD *)uint64_t v12 = v13;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    uint64_t v26 = (void **)&v22;
    sub_2169B81EC(&v26);
    uint64_t v26 = (void **)&v20;
    sub_2169B74B8(&v26);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if ((long long *)v3 != &v15)
  {
    sub_2169B88CC((void *)v3);
    long long v14 = v16;
    *(_OWORD *)uint64_t v3 = v15;
    *(_OWORD *)(v3 + 16) = v14;
    long long v15 = 0u;
    long long v16 = 0u;
    *(void *)(v3 + 32) = v17;
    uint64_t v17 = 0;
  }
  sub_2169B88CC(&v15);
}

void sub_216B50028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTimeSampleMap(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    long long v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = v6;
  sub_216B500D8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 432), (uint64_t)&v5, a2);
  sub_216997EC4((uint64_t)&v5, v6[0]);
}

void sub_216B500C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_216B500D8@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_216995B54((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0) {
      a3 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    }
    else {
      a3 = v7;
    }
  }
  sub_216997AE0(a4, a3);
  return sub_2168EE084((uint64_t)&v7);
}

void sub_216B50184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_216B501A0@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  long long v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    long long v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 448), (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  if (v13 && (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)v12) & 1) != 0)
  {
    uint64_t v5 = (atomic_uint **)sub_21695C470((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 448));
    uint64_t v5 = (atomic_uint **)sub_21695C470(Fallback);
  }
  uint64_t v9 = *v5;
  *a2 = *v5;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v10;
    }
  }
  return sub_2168EE084((uint64_t)v12);
}

void sub_216B502B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfPropertySpec::HasOnlyRequiredFields(uint64_t **this)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v8);
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_2169791E0(&v8);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v6);
  BOOL IsInert = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInert(v2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, 1, 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  uint64_t v4 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return IsInert;
}

void sub_216B5038C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B503EC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216B47B20((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C757F58, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C757F58, (char *)8, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C757F48, (void *(*)(void *, BOOL))nullsub_271);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216B504CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216B5051C(uint64_t *a1)
{
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169B7058(a1);
}

void sub_216B505B0(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  sub_2169B70E4(v5, a1);
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::MakeAbsolute(a2, (uint64_t)v5, a3);
  if (v9 < 0) {
    operator delete(__p);
  }
  uint64_t v10 = (void **)&v7;
  sub_2169B81EC(&v10);
  uint64_t v10 = (void **)&v6;
  sub_2169B74B8(&v10);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_216B5063C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169B5940((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B50650(void *a1)
{
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169B8818((_OWORD **)a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy::CanonicalizeType@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    uint64_t v21 = "sdf/proxyPolicies.cpp";
    long long v22 = "CanonicalizeType";
    uint64_t v23 = 40;
    long long v24 = "static SdfRelocatesMapProxyValuePolicy::Type pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy"
          "::CanonicalizeType(const SdfSpecHandle &, const Type &)";
    char v25 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v21, "spec", 0) & 1) == 0) {
      return sub_216A9A8E8(a3, (uint64_t)a2);
    }
  }
  uint64_t v6 = sub_21697F2E0(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v6, &v19);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = (uint64_t)(a3 + 1);
  uint64_t v21 = (char *)*a2;
  long long v22 = (const char *)(a2 + 1);
  while (v21 != v22)
  {
    char v9 = sub_216996180(&v21, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v9 + 36), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v17);
    uint64_t v12 = sub_216996180(&v21, v10, v11);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v12 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, &v15);
    uint64_t v26 = &v15;
    uint64_t v13 = sub_21698F06C((uint64_t **)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, (uint64_t)&unk_2174BFD90, &v26);
    sub_21697DE94((int *)v13 + 9, &v17);
    sub_21697DEEC((int *)v13 + 10, &v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_21697C414(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
    sub_21697C414(&v17);
    sub_2169961FC(&v21);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  return (uint64_t *)sub_21697C414(&v19);
}

void sub_216B5087C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21698F21C(v3, *(void **)(v3 + 8));
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy::CanonicalizeKey@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1)
    || (v10[0] = "sdf/proxyPolicies.cpp",
        v10[1] = "CanonicalizeKey",
        v10[2] = 58,
        v10[3] = "static SdfRelocatesMapProxyValuePolicy::key_type pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxy"
                 "ValuePolicy::CanonicalizeKey(const SdfSpecHandle &, const key_type &)",
        char v11 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "spec", 0)))
  {
    uint64_t v6 = sub_21697F2E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v6, &v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    return sub_21697C414(&v8);
  }
  else
  {
    sub_216981010(a3, a2);
    return sub_21698105C(a3 + 1, (_DWORD *)a2 + 1);
  }
}

void sub_216B5099C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy::CanonicalizeValue@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1)
    || (v10[0] = "sdf/proxyPolicies.cpp",
        v10[1] = "CanonicalizeValue",
        v10[2] = 66,
        v10[3] = "static SdfRelocatesMapProxyValuePolicy::mapped_type pxrInternal__aapl__pxrReserved__::SdfRelocatesMapPr"
                 "oxyValuePolicy::CanonicalizeValue(const SdfSpecHandle &, const mapped_type &)",
        char v11 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "spec", 0)))
  {
    uint64_t v6 = sub_21697F2E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v6, &v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    return sub_21697C414(&v8);
  }
  else
  {
    sub_216981010(a3, a2);
    return sub_21698105C(a3 + 1, (_DWORD *)a2 + 1);
  }
}

void sub_216B50A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy::CanonicalizePair@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v12[0] = "sdf/proxyPolicies.cpp";
    v12[1] = "CanonicalizePair";
    v12[2] = 74;
    void v12[3] = "static SdfRelocatesMapProxyValuePolicy::value_type pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyVa"
             "luePolicy::CanonicalizePair(const SdfSpecHandle &, const value_type &)";
    char v13 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "spec", 0) & 1) == 0) {
      return sub_216A8FD38(a3, a2);
    }
  }
  uint64_t v6 = sub_21697F2E0(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v6, v12);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v12, &v10);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v12, &v8);
  sub_216AFDD70(a3, &v10, &v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v12 + 1);
  return sub_21697C414(v12);
}

void sub_216B50BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  sub_21697B754((uint64_t *)va);
  sub_21697B754((int *)va1);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfAttributeViewPredicate::SdfAttributeViewPredicate(_DWORD *this)
{
  *this = 1;
  return this;
}

{
  *this = 1;
  return this;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfRelationshipViewPredicate::SdfRelationshipViewPredicate(_DWORD *this)
{
  *this = 8;
  return this;
}

{
  *this = 8;
  return this;
}

void sub_216B50C04()
{
  sub_216B50ED4();
  sub_216B50FD8();
  sub_216B510DC();
  uint64_t v0 = sub_216B511E0();
  uint64_t v1 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v0);
  sub_216779094(__p, "SdfInheritsProxy");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v0, v1, (char *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = sub_216B512E4();
  uint64_t v3 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v2);
  sub_216779094(__p, "SdfReferencesProxy");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v2, v3, (char *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = sub_216B513E8();
  uint64_t v5 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot((pxrInternal__aapl__pxrReserved__::TfType *)v4);
  sub_216779094(__p, "SdfPayloadsProxy");
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias(v4, v5, (char *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B50CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfGetPathEditorProxy(atomic_uint **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  sub_216B514EC(a1, a2, &v5);
  uint64_t v4 = v6;
  *a3 = v5;
  a3[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v6) {
      sub_216784EC4(v6);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::SdfGetReferenceEditorProxy(atomic_uint **a1, uint64_t *a2)
{
}

void pxrInternal__aapl__pxrReserved__::SdfGetPayloadEditorProxy(atomic_uint **a1, uint64_t *a2)
{
}

void pxrInternal__aapl__pxrReserved__::SdfGetNameOrderProxy(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
LABEL_6:
    *(_DWORD *)(a3 + 16) = 3;
    return;
  }
  uint64_t v6 = operator new(0x48uLL);
  sub_216B5524C(v6, (atomic_uint **)a1, a2, 3);
  sub_216B56854(&v9, (uint64_t)v6);
  char v7 = v10;
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v7;
  if (!v7) {
    goto LABEL_6;
  }
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  int v8 = v10;
  *(_DWORD *)(a3 + 16) = 3;
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_216B50EC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B50ED4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75A120, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C75A120, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B50F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B50FD8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75A130, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C75A130, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B51098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B510DC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75A140, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C75A140, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B5119C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B511E0()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75A150, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C75A150, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B512A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B512E4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75A160, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C75A160, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B513A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B513E8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75A170, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C75A170, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B514A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216B514EC(atomic_uint **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 53) & 0xFFFFFFFFFFFFFFF8))
  {
    char v13 = operator new(0xB8uLL);
    uint64_t v14 = (uint64_t)v13;
    int v15 = *a1;
    int v17 = v15;
    if (v15) {
      atomic_fetch_add(v15, 1u);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetListEditor::Sdf_RelationshipTargetListEditor(v13, a1, &v17);
    sub_216B5169C(a3, v14);
  }
  else
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7) {
      uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    unint64_t v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = *((void *)v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    int v10 = operator new(0xB8uLL);
    uint64_t v11 = (uint64_t)v10;
    if (v8 != v9)
    {
      uint64_t v12 = *a1;
      int v17 = v12;
      if (v12) {
        atomic_fetch_add(v12, 1u);
      }
      sub_216980810(v10, a1, a2, &v17);
    }
    uint64_t v16 = *a1;
    int v17 = v16;
    if (v16) {
      atomic_fetch_add(v16, 1u);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::Sdf_AttributeConnectionListEditor(v10, a1, &v17);
    sub_216B517AC(a3, v11);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v17);
}

void sub_216B51650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void *sub_216B5169C(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  void *v4 = &unk_26C75A190;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216B516F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_21732481C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B51710(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216B51738(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216B51768(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75A1E0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216B517AC(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  void *v4 = &unk_26C75A208;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216B51804(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_21732481C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B51820(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216B51848(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216B51878(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75A258)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216B518BC(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  void *v4 = &unk_26C75A280;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216B51914(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_21732481C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B51930(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216B51958(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216B51988(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75A2D0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216B519CC(atomic_uint **a1, uint64_t *a2)
{
  char v4 = operator new(0xB8uLL);
  sub_216B51A40(v4, a1, a2);
}

void sub_216B51A2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216B51A40(void *a1, atomic_uint **a2, uint64_t *a3)
{
  *sub_216B51CC0(a1, a2, a3) = &unk_26C75A2F8;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp();
}

void sub_216B51C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169D5040((void **)va);
  sub_2169D5040(v3);
  sub_216B51DE4(v2);
  _Unwind_Resume(a1);
}

void *sub_216B51CC0(void *result, atomic_uint **a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *uint64_t result = &unk_26C75A3A8;
  result[1] = v3;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  uint64_t v4 = *a3;
  result[2] = *a3;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_216B51D1C@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_21698E9D8((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0) {
      a3 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    }
    else {
      a3 = v7;
    }
  }
  sub_2169D73B4(a4, a3);
  return sub_2168EE084((uint64_t)&v7);
}

void sub_216B51DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *sub_216B51DE4(void *a1)
{
  *a1 = &unk_26C75A3A8;
  uint64_t v2 = a1[2];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1));
  return a1;
}

void sub_216B51E48(uint64_t a1)
{
  uint64_t v1 = (void *)sub_216B527F8(a1);

  operator delete(v1);
}

double sub_216B51E70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    uint64_t v4 = "List editor is expired";
  }
  else
  {
    uint64_t v5 = sub_21697F2E0(v3);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
      return result;
    }
    uint64_t v4 = "Permission denied";
  }
  sub_216779094(&v7, v4);
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

BOOL sub_216B51EF8(uint64_t a1, void *lpsrc)
{
  uint64_t v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C75A370, (const struct __class_type_info *)&unk_26C75A380, 0);
  uint64_t v4 = v3;
  if (v3)
  {
    sub_216B528DC(a1, v3 + 32, 0);
  }
  else
  {
    v6[0] = "sdf/listOpListEditor.h";
    v6[1] = "CopyEdits";
    _OWORD v6[2] = 221;
    void v6[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfRef"
            "erenceTypePolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::Sdf"
            "ReferenceTypePolicy]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not copy from list editor of different type");
  }
  return v4 != 0;
}

void sub_216B51FC8()
{
}

void sub_216B52070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_216B52084()
{
}

void sub_216B52134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_216B52148(uint64_t a1, uint64_t a2)
{
  void v5[4] = *MEMORY[0x263EF8340];
  sub_2169D73B4((uint64_t)&v4, a1 + 32);
  v5[0] = &unk_26C75A430;
  v5[1] = a1;
  v5[2] = a2;
  v5[3] = v5;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ModifyOperations();
}

void sub_216B5225C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_216B52288()
{
}

void sub_216B52290(uint64_t a1, int a2)
{
  int v3 = a2;
  sub_2169D73B4((uint64_t)v2, a1 + 32);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ReplaceOperations();
}

void sub_216B52380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169D5040((void **)va);
  _Unwind_Resume(a1);
}

void sub_216B52394(uint64_t a1, int a2, void *lpsrc)
{
  int v6 = a2;
  if (__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C75A370, (const struct __class_type_info *)&unk_26C75A380, 0))
  {
    sub_2169D73B4((uint64_t)v4, a1 + 32);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ComposeOperations();
  }
  v4[0] = "sdf/listOpListEditor.h";
  v4[1] = "ApplyList";
  _OWORD v4[2] = 296;
  void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfRefer"
          "enceTypePolicy>::ApplyList(SdfListOpType, const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrRese"
          "rved__::SdfReferenceTypePolicy]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot apply from list editor of different type");
}

void sub_216B524EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169D5040((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B52500(uint64_t a1, uint64_t a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  int v6 = *a3;
  char v7 = a3[1];
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  if (*a3 != v7 && v8 != v9)
  {
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v6, v8)) {
        break;
      }
      v6 += 56;
      v8 += 56;
      if (v6 == v7) {
        break;
      }
    }
    while (v8 != v9);
  }
  if (v8 != v9)
  {
    uint64_t v11 = v8;
    while (2)
    {
      for (uint64_t i = *a4; i != v11; i += 56)
      {
        if (pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v11, i))
        {
          uint64_t v32 = "sdf/listEditor.h";
          uint64_t v33 = "_ValidateEdit";
          uint64_t v34 = 262;
          uint64_t v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfRefer"
                "enceTypePolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) cons"
                "t [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
          char v36 = 0;
          int v18 = __p;
          sub_216B52F9C((uint64_t)v11);
          if (v28 < 0) {
            int v18 = (void **)__p[0];
          }
          unint64_t v19 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
          if (v19)
          {
            int v20 = (const char *)(v19 + 16);
            if (*(char *)(v19 + 39) < 0) {
              int v20 = *(const char **)v20;
            }
          }
          else
          {
            int v20 = "";
          }
          sub_21698131C(a1, &v30);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate item '%s' not allowed for field '%s' on <%s>", (const char *)v18, v20, Text);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
          sub_21697C414(&v30);
          goto LABEL_30;
        }
      }
      v11 += 56;
      if (v11 != v9) {
        continue;
      }
      break;
    }
  }
  char v13 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v13);
  FieldDefinition = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (FieldDefinition)
  {
    if (v8 == v9)
    {
      return 1;
    }
    else
    {
      uint64_t v16 = FieldDefinition;
      while (1)
      {
        sub_216B530E4(v16, (long long *)v8, __p);
        if (v29) {
          break;
        }
        v8 += 56;
        if (v8 == v9) {
          return 1;
        }
      }
      uint64_t v32 = "sdf/listEditor.h";
      uint64_t v33 = "_ValidateEdit";
      uint64_t v34 = 279;
      uint64_t v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfReference"
            "TypePolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypeP"
            "olicy = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
      char v36 = 0;
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
      if (*((char *)WhyNot + 23) >= 0) {
        uint64_t v26 = (const char *)WhyNot;
      }
      else {
        uint64_t v26 = (const char *)*WhyNot;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"%s", v26);
      if (v29)
      {
LABEL_30:
        if (v28 < 0) {
          operator delete(__p[0]);
        }
      }
      return 0;
    }
  }
  else
  {
    uint64_t v32 = "sdf/listEditor.h";
    uint64_t v33 = "_ValidateEdit";
    uint64_t v34 = 273;
    uint64_t v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfReferenceTy"
          "pePolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolic"
          "y = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
    char v36 = 0;
    unint64_t v23 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      long long v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0) {
        long long v24 = *(const char **)v24;
      }
    }
    else
    {
      long long v24 = "";
    }
    uint64_t v17 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"No field definition for field '%s'", v24);
  }
  return v17;
}

void sub_216B527AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_216B527F0()
{
}

uint64_t sub_216B527F8(uint64_t a1)
{
  *(void *)a1 = &unk_26C75A2F8;
  uint64_t v4 = (void **)(a1 + 160);
  sub_2169CC68C(&v4);
  uint64_t v4 = (void **)(a1 + 136);
  sub_2169CC68C(&v4);
  uint64_t v4 = (void **)(a1 + 112);
  sub_2169CC68C(&v4);
  uint64_t v4 = (void **)(a1 + 88);
  sub_2169CC68C(&v4);
  uint64_t v4 = (void **)(a1 + 64);
  sub_2169CC68C(&v4);
  uint64_t v4 = (void **)(a1 + 40);
  sub_2169CC68C(&v4);
  *(void *)a1 = &unk_26C75A3A8;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_216B528DC(uint64_t a1, unsigned char *a2, _DWORD *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v6 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    int v15 = "sdf/listOpListEditor.h";
    uint64_t v16 = "_UpdateListOp";
    uint64_t v17 = 113;
    int v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfReferenceType"
          "Policy>::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserved"
          "__::SdfReferenceTypePolicy]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid owner.");
  }
  else
  {
    char v7 = (uint64_t **)sub_21697F2E0(v6);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v15);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v15);
    char v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8);
    int v10 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)v16 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v10 + 8))(v10);
    }
    if (v9)
    {
      v21[0] = xmmword_2174755E4;
      v21[1] = unk_2174755F4;
      _OWORD v21[2] = xmmword_217475604;
      uint64_t v11 = 0;
      uint64_t v12 = v21;
      uint64_t v13 = 1;
      uint64_t v14 = (char *)v21 + 8;
      do
      {
        if (!a3 || *a3 == *v12) {
          sub_216B52D20();
        }
        ++v11;
        uint64_t v12 = (_DWORD *)v21 + 2 * v11;
        ++v13;
        v14 += 8;
      }
      while (v13 != 7);
      if ((*a2 != 0) != (*(unsigned char *)(a1 + 32) != 0))
      {
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
        sub_2169D73B4((uint64_t)&v15, (uint64_t)a2);
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::Swap();
      }
    }
    else
    {
      int v15 = "sdf/listOpListEditor.h";
      uint64_t v16 = "_UpdateListOp";
      uint64_t v17 = 118;
      int v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfReferenceTy"
            "pePolicy>::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrRese"
            "rved__::SdfReferenceTypePolicy]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer is not editable.");
    }
  }
}

void sub_216B52CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_2168EE084(v30 - 160);
  sub_2169D5040(&a11);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a30);
  _Unwind_Resume(a1);
}

void sub_216B52D20()
{
}

__n128 sub_216B52DC4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C75A430;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216B52E10(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75A430;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216B52E40@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_216B52E9C(*(void *)(a1 + 16), a2);
}

uint64_t sub_216B52E50(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75A490)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216B52E90()
{
  return &unk_26C75A490;
}

uint64_t sub_216B52E9C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v2 + 48))(v5);
  if (v6)
  {
    sub_2169D5338(a2, v5);
    a2[56] = 1;
  }
  else
  {
    sub_216B52F44(a2, (uint64_t)v5);
  }
  return sub_216ADDBA8((uint64_t)v5);
}

void sub_216B52F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_216B52F44(char *__dst, uint64_t a2)
{
  *std::string __dst = 0;
  __dst[56] = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    sub_2169D5338(__dst, (long long *)a2);
    __dst[56] = 1;
  }
  return __dst;
}

void sub_216B52F88(_Unwind_Exception *a1)
{
  sub_216ADDBA8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216B52F9C(uint64_t a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216B530D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B530E4@<X0>(uint64_t *result@<X0>, long long *a2@<X1>, unsigned char *a3@<X8>)
{
  v5[2] = *MEMORY[0x263EF8340];
  int v3 = (void (*)(uint64_t, void *))result[9];
  if (v3)
  {
    uint64_t v4 = *result;
    v5[1] = &off_26C75A4A0;
    sub_216B53430(v5, a2);
    v3(v4, v5);
    return (uint64_t *)sub_2168EE084((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_216B53184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B531A0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 56), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_216B531C0(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216B53328(a1);
}

uint64_t sub_216B531D0()
{
  return 1;
}

unint64_t sub_216B531D8(pxrInternal__aapl__pxrReserved__ **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (unsigned int *)((char *)*a1 + 24);
  int v3 = (int8x16_t *)((char *)*a1 + 32);
  uint64_t v4 = (uint64_t *)((char *)*a1 + 48);
  uint64_t v6 = 0;
  char v7 = 0;
  sub_2169D7BA4((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

uint64_t sub_216B53238(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfReference::operator==(*a1, *a2);
}

uint64_t sub_216B53244(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfReference::operator==(*a1, a2);
}

uint64_t sub_216B53250()
{
  return 0;
}

void *sub_216B5325C(uint64_t *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_216B5326C()
{
  return &unk_26C75A558;
}

uint64_t sub_216B53278()
{
  return 0;
}

uint64_t sub_216B53280()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216B5328C()
{
  return 0;
}

uint64_t sub_216B53294()
{
  return 0;
}

BOOL sub_216B5329C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217475307 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216B532D8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C75A558, a2, a3);
}

void *sub_216B532FC()
{
  return &unk_26C75A558;
}

uint64_t sub_216B53308(uint64_t a1)
{
  return *(void *)a1;
}

char *sub_216B53310@<X0>(long long **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C75A4A0;
  return sub_216B53430(a2, v2);
}

uint64_t *sub_216B53328(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 56), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168EBBB8((void ***)(v2 + 48), 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v2 + 28));
    sub_21697C414((_DWORD *)(v2 + 24));
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }
  return a1;
}

long long *sub_216B533A4(long long **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 14);
  if (v2 != 1)
  {
    int v3 = operator new(0x40uLL);
    sub_2169D5338((char *)v3, *a1);
    atomic_store(0, (unsigned int *)v3 + 14);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 14, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = (long long *)v3;
    sub_216B53328((uint64_t *)&v5);
  }
  return *a1;
}

void sub_216B5341C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_216B53430(void *a1, long long *a2)
{
  uint64_t v4 = operator new(0x40uLL);
  __n128 result = sub_2169D5338((char *)v4, a2);
  atomic_store(0, (unsigned int *)v4 + 14);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 14, 1u, memory_order_relaxed);
  return result;
}

void sub_216B53484(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216B53498(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C75A578;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216B534F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324840(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B5350C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216B53534(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216B53564(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75A5C8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216B535A8(atomic_uint **a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0xB8uLL);
  sub_216B5361C(v4, a1, a2);
}

void sub_216B53608(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_216B5361C(void *a1, atomic_uint **a2, uint64_t *a3)
{
  *sub_216B5389C(a1, a2, a3) = &unk_26C75A5F0;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp();
}

void sub_216B53860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169D8044((void **)va);
  sub_2169D8044(v3);
  sub_216B539C0(v2);
  _Unwind_Resume(a1);
}

void *sub_216B5389C(void *result, atomic_uint **a2, uint64_t *a3)
{
  int v3 = *a2;
  *uint64_t result = &unk_26C75A6A0;
  result[1] = v3;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  uint64_t v4 = *a3;
  result[2] = *a3;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_216B538F8@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_21698E94C((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0) {
      a3 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    }
    else {
      a3 = v7;
    }
  }
  sub_2169DA0D8(a4, a3);
  return sub_2168EE084((uint64_t)&v7);
}

void sub_216B539A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *sub_216B539C0(void *a1)
{
  *a1 = &unk_26C75A6A0;
  uint64_t v2 = a1[2];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1));
  return a1;
}

void sub_216B53A24(uint64_t a1)
{
  uint64_t v1 = (void *)sub_216B543D4(a1);

  operator delete(v1);
}

double sub_216B53A4C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    uint64_t v4 = "List editor is expired";
  }
  else
  {
    uint64_t v5 = sub_21697F2E0(v3);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
      return result;
    }
    uint64_t v4 = "Permission denied";
  }
  sub_216779094(&v7, v4);
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

BOOL sub_216B53AD4(uint64_t a1, void *lpsrc)
{
  int v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C75A668, (const struct __class_type_info *)&unk_26C75A678, 0);
  uint64_t v4 = v3;
  if (v3)
  {
    sub_216B544B8(a1, v3 + 32, 0);
  }
  else
  {
    v6[0] = "sdf/listOpListEditor.h";
    v6[1] = "CopyEdits";
    _OWORD v6[2] = 221;
    void v6[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPay"
            "loadTypePolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPa"
            "yloadTypePolicy]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not copy from list editor of different type");
  }
  return v4 != 0;
}

void sub_216B53BA4()
{
}

void sub_216B53C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_216B53C60()
{
}

void sub_216B53D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_216B53D24(uint64_t a1, uint64_t a2)
{
  void v5[4] = *MEMORY[0x263EF8340];
  sub_2169DA0D8((uint64_t)&v4, a1 + 32);
  v5[0] = &unk_26C75A728;
  v5[1] = a1;
  v5[2] = a2;
  void v5[3] = v5;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ModifyOperations();
}

void sub_216B53E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_216B53E64()
{
}

void sub_216B53E6C(uint64_t a1, int a2)
{
  int v3 = a2;
  sub_2169DA0D8((uint64_t)v2, a1 + 32);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ReplaceOperations();
}

void sub_216B53F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169D8044((void **)va);
  _Unwind_Resume(a1);
}

void sub_216B53F70(uint64_t a1, int a2, void *lpsrc)
{
  int v6 = a2;
  if (__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C75A668, (const struct __class_type_info *)&unk_26C75A678, 0))
  {
    sub_2169DA0D8((uint64_t)v4, a1 + 32);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ComposeOperations();
  }
  v4[0] = "sdf/listOpListEditor.h";
  v4[1] = "ApplyList";
  _OWORD v4[2] = 296;
  void v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPaylo"
          "adTypePolicy>::ApplyList(SdfListOpType, const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserv"
          "ed__::SdfPayloadTypePolicy]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot apply from list editor of different type");
}

void sub_216B540C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169D8044((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B540DC(uint64_t a1, uint64_t a2, unsigned __int8 **a3, unsigned __int8 **a4)
{
  int v6 = *a3;
  char v7 = a3[1];
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  if (*a3 != v7 && v8 != v9)
  {
    do
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v6, v8)) {
        break;
      }
      v6 += 48;
      v8 += 48;
      if (v6 == v7) {
        break;
      }
    }
    while (v8 != v9);
  }
  if (v8 != v9)
  {
    uint64_t v11 = v8;
    while (2)
    {
      for (uint64_t i = *a4; i != v11; i += 48)
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v11, i))
        {
          uint64_t v32 = "sdf/listEditor.h";
          uint64_t v33 = "_ValidateEdit";
          uint64_t v34 = 262;
          uint64_t v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfPaylo"
                "adTypePolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const "
                "[TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
          char v36 = 0;
          int v18 = __p;
          sub_216B54BE0((uint64_t)v11);
          if (v28 < 0) {
            int v18 = (void **)__p[0];
          }
          unint64_t v19 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
          if (v19)
          {
            int v20 = (const char *)(v19 + 16);
            if (*(char *)(v19 + 39) < 0) {
              int v20 = *(const char **)v20;
            }
          }
          else
          {
            int v20 = "";
          }
          sub_21698131C(a1, &v30);
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate item '%s' not allowed for field '%s' on <%s>", (const char *)v18, v20, Text);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
          sub_21697C414(&v30);
          goto LABEL_30;
        }
      }
      v11 += 48;
      if (v11 != v9) {
        continue;
      }
      break;
    }
  }
  uint64_t v13 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v13);
  FieldDefinition = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (FieldDefinition)
  {
    if (v8 == v9)
    {
      return 1;
    }
    else
    {
      uint64_t v16 = FieldDefinition;
      while (1)
      {
        sub_216B54D28(v16, (long long *)v8, __p);
        if (v29) {
          break;
        }
        v8 += 48;
        if (v8 == v9) {
          return 1;
        }
      }
      uint64_t v32 = "sdf/listEditor.h";
      uint64_t v33 = "_ValidateEdit";
      uint64_t v34 = 279;
      uint64_t v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfPayloadTy"
            "pePolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePol"
            "icy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
      char v36 = 0;
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
      if (*((char *)WhyNot + 23) >= 0) {
        uint64_t v26 = (const char *)WhyNot;
      }
      else {
        uint64_t v26 = (const char *)*WhyNot;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"%s", v26);
      if (v29)
      {
LABEL_30:
        if (v28 < 0) {
          operator delete(__p[0]);
        }
      }
      return 0;
    }
  }
  else
  {
    uint64_t v32 = "sdf/listEditor.h";
    uint64_t v33 = "_ValidateEdit";
    uint64_t v34 = 273;
    uint64_t v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfPayloadType"
          "Policy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy "
          "= pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
    char v36 = 0;
    unint64_t v23 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      long long v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0) {
        long long v24 = *(const char **)v24;
      }
    }
    else
    {
      long long v24 = "";
    }
    uint64_t v17 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"No field definition for field '%s'", v24);
  }
  return v17;
}

void sub_216B54388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_216B543CC()
{
}

uint64_t sub_216B543D4(uint64_t a1)
{
  *(void *)a1 = &unk_26C75A5F0;
  uint64_t v4 = (void **)(a1 + 160);
  sub_2169CC78C(&v4);
  uint64_t v4 = (void **)(a1 + 136);
  sub_2169CC78C(&v4);
  uint64_t v4 = (void **)(a1 + 112);
  sub_2169CC78C(&v4);
  uint64_t v4 = (void **)(a1 + 88);
  sub_2169CC78C(&v4);
  uint64_t v4 = (void **)(a1 + 64);
  sub_2169CC78C(&v4);
  uint64_t v4 = (void **)(a1 + 40);
  sub_2169CC78C(&v4);
  *(void *)a1 = &unk_26C75A6A0;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_216B544B8(uint64_t a1, unsigned char *a2, _DWORD *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v6 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    int v15 = "sdf/listOpListEditor.h";
    uint64_t v16 = "_UpdateListOp";
    uint64_t v17 = 113;
    int v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePo"
          "licy>::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserved__"
          "::SdfPayloadTypePolicy]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid owner.");
  }
  else
  {
    char v7 = (uint64_t **)sub_21697F2E0(v6);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v15);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v15);
    char v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8);
    int v10 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)v16 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v10 + 8))(v10);
    }
    if (v9)
    {
      v21[0] = xmmword_2174755E4;
      v21[1] = unk_2174755F4;
      _OWORD v21[2] = xmmword_217475604;
      uint64_t v11 = 0;
      uint64_t v12 = v21;
      uint64_t v13 = 1;
      uint64_t v14 = (char *)v21 + 8;
      do
      {
        if (!a3 || *a3 == *v12) {
          sub_216B548FC();
        }
        ++v11;
        uint64_t v12 = (_DWORD *)v21 + 2 * v11;
        ++v13;
        v14 += 8;
      }
      while (v13 != 7);
      if ((*a2 != 0) != (*(unsigned char *)(a1 + 32) != 0))
      {
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
        sub_2169DA0D8((uint64_t)&v15, (uint64_t)a2);
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::Swap();
      }
    }
    else
    {
      int v15 = "sdf/listOpListEditor.h";
      uint64_t v16 = "_UpdateListOp";
      uint64_t v17 = 118;
      int v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPayloadType"
            "Policy>::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserv"
            "ed__::SdfPayloadTypePolicy]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer is not editable.");
    }
  }
}

void sub_216B548A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_2168EE084(v30 - 160);
  sub_2169D8044(&a11);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a30);
  _Unwind_Resume(a1);
}

void sub_216B548FC()
{
}

__n128 sub_216B549A0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C75A728;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216B549EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75A728;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216B54A1C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_216B54A78(*(void *)(a1 + 16), a2);
}

uint64_t sub_216B54A2C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75A788)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216B54A6C()
{
  return &unk_26C75A788;
}

uint64_t sub_216B54A78@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v2 + 48))(v5);
  if (v6) {
    sub_216ABE38C(a2, v5);
  }
  else {
    sub_216B54B18(a2, (uint64_t)v5);
  }
  return sub_216ADDCD4((uint64_t)v5);
}

void sub_216B54B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216ADDCD4((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_216B54B18(unsigned char *__dst, uint64_t a2)
{
  *std::string __dst = 0;
  __dst[48] = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    sub_216B54B70(__dst, (long long *)a2);
    __dst[48] = 1;
  }
  return __dst;
}

void sub_216B54B5C(_Unwind_Exception *a1)
{
  sub_216ADDCD4(v1);
  _Unwind_Resume(a1);
}

void *sub_216B54B70(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  sub_216981010((_DWORD *)__dst + 6, (_DWORD *)a2 + 6);
  sub_21698105C((_DWORD *)__dst + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)__dst + 2) = a2[2];
  return __dst;
}

uint64_t sub_216B54BE0(uint64_t a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216B54D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B54D28@<X0>(uint64_t *result@<X0>, long long *a2@<X1>, unsigned char *a3@<X8>)
{
  v5[2] = *(atomic_uint **)MEMORY[0x263EF8340];
  int v3 = (void (*)(uint64_t, atomic_uint **))result[9];
  if (v3)
  {
    uint64_t v4 = *result;
    v5[1] = (atomic_uint *)&off_26C75A798;
    sub_216B550D8(v5, a2);
    v3(v4, v5);
    return (uint64_t *)sub_2168EE084((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_216B54DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B54DE4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_216B54E04(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216B54F68(a1);
}

uint64_t sub_216B54E14()
{
  return 1;
}

unint64_t sub_216B54E1C(pxrInternal__aapl__pxrReserved__ **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (unsigned int *)((char *)*a1 + 24);
  int v3 = (int8x16_t *)((char *)*a1 + 32);
  uint64_t v5 = 0;
  char v6 = 0;
  sub_2169DA89C((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL sub_216B54E78(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(*a1, *a2);
}

BOOL sub_216B54E84(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(*a1, a2);
}

uint64_t sub_216B54E90()
{
  return 0;
}

void *sub_216B54E9C(uint64_t *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_216B54EAC()
{
  return &unk_26C759CB0;
}

uint64_t sub_216B54EB8()
{
  return 0;
}

uint64_t sub_216B54EC0()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216B54ECC()
{
  return 0;
}

uint64_t sub_216B54ED4()
{
  return 0;
}

BOOL sub_216B54EDC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000021747579ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216B54F18(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C759CB0, a2, a3);
}

void *sub_216B54F3C()
{
  return &unk_26C759CB0;
}

uint64_t sub_216B54F48(uint64_t a1)
{
  return *(void *)a1;
}

unsigned char *sub_216B54F50@<X0>(long long **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C75A798;
  return sub_216B550D8((atomic_uint **)a2, v2);
}

uint64_t *sub_216B54F68(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v2 + 28));
    sub_21697C414((_DWORD *)(v2 + 24));
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }
  return a1;
}

long long *sub_216B54FD8(long long **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 12);
  if (v2 != 1)
  {
    int v3 = (atomic_uint *)operator new(0x38uLL);
    sub_216B55060(v3, *a1);
    atomic_fetch_add_explicit(v3 + 12, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = (long long *)v3;
    sub_216B54F68((uint64_t *)&v5);
  }
  return *a1;
}

void sub_216B5504C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_216B55060(unsigned char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  sub_216981010((_DWORD *)__dst + 6, (_DWORD *)a2 + 6);
  sub_21698105C((_DWORD *)__dst + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)__dst + 2) = a2[2];
  atomic_store(0, (unsigned int *)__dst + 12);
  return __dst;
}

unsigned char *sub_216B550D8(atomic_uint **a1, long long *a2)
{
  long long v4 = (atomic_uint *)operator new(0x38uLL);
  __n128 result = sub_216B55060(v4, a2);
  *a1 = v4;
  atomic_fetch_add_explicit(v4 + 12, 1u, memory_order_relaxed);
  return result;
}

void sub_216B55128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216B5513C(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  void *v4 = &unk_26C75A860;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216B55194(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324864(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B551B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216B551D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216B55208(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75A8B0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_216B5524C(void *a1, atomic_uint **a2, uint64_t *a3, int a4)
{
  uint64_t v8 = sub_216B5539C(a1, a2, a3);
  *uint64_t v8 = &unk_26C75A8D8;
  void v8[4] = 0;
  *((_DWORD *)v8 + 10) = a4;
  v8[6] = 0;
  char v9 = (uint64_t **)(v8 + 6);
  v8[7] = 0;
  unsigned char v8[8] = 0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2) & 1) == 0)
  {
    int v10 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2);
    memset(v12, 0, sizeof(v12));
    sub_216B553F8(v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)a3, v12, &v13);
    if (v9 != &v13) {
      sub_216ABF1B0(v9, v13, v14, v14 - v13);
    }
    int v15 = (void **)&v13;
    sub_216889A04(&v15);
    int v15 = (void **)v12;
    sub_216889A04(&v15);
  }
  return a1;
}

void sub_216B55330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  *(void *)(v3 - 40) = va1;
  sub_216889A04((void ***)(v3 - 40));
  *(void *)(v3 - 40) = va;
  sub_216889A04((void ***)(v3 - 40));
  sub_216889A04((void ***)va1);
  uint64_t v5 = v2[4];
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216B55508(v2);
  _Unwind_Resume(a1);
}

void *sub_216B5539C(void *result, atomic_uint **a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *uint64_t result = &unk_26C75A988;
  result[1] = v3;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  uint64_t v4 = *a3;
  result[2] = *a3;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_216B553F8@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t **a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_21697BFBC((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0) {
      a3 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    }
    else {
      a3 = v7;
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_21698FA28(a4, *a3, a3[1], a3[1] - *a3);
  return sub_2168EE084((uint64_t)&v7);
}

void sub_216B554B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void **sub_216B554D0(void **a1)
{
  uint64_t v3 = a1;
  sub_216889A04(&v3);
  return a1;
}

void *sub_216B55508(void *a1)
{
  *a1 = &unk_26C75A988;
  uint64_t v2 = a1[2];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1));
  return a1;
}

void sub_216B5556C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_216B5613C(a1);

  operator delete(v1);
}

double sub_216B55594@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    uint64_t v4 = "List editor is expired";
  }
  else
  {
    uint64_t v5 = sub_21697F2E0(v3);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
      return result;
    }
    uint64_t v4 = "Permission denied";
  }
  sub_216779094(&v7, v4);
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_216B5561C(uint64_t a1, void *lpsrc)
{
  uint64_t v3 = (uint64_t **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C75A950, (const struct __class_type_info *)&unk_26C75A960, 0);
  if (v3)
  {
    if (*(_DWORD *)(a1 + 40) == *((_DWORD *)v3 + 10))
    {
      sub_216B561E8(a1, v3 + 6);
      return 1;
    }
    uint64_t v5 = "sdf/vectorListEditor.h";
    uint64_t v6 = "CopyEdits";
    uint64_t v7 = 223;
    uint64_t v8 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTo"
         "kenKeyPolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameTok"
         "enKeyPolicy, FieldStorageuint64_t Type = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot copy from list editor in different mode");
  }
  else
  {
    uint64_t v5 = "sdf/vectorListEditor.h";
    uint64_t v6 = "CopyEdits";
    uint64_t v7 = 218;
    uint64_t v8 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTo"
         "kenKeyPolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameTok"
         "enKeyPolicy, FieldStorageuint64_t Type = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot copy from list editor of different type");
  }
  return 0;
}

BOOL sub_216B55728(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if (v1)
  {
    memset(v3, 0, sizeof(v3));
    sub_216B561E8(a1, v3);
    uint64_t v4 = (void **)v3;
    sub_216889A04(&v4);
  }
  return v1 != 0;
}

void sub_216B5577C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_216B55794(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if (!v1)
  {
    memset(v3, 0, sizeof(v3));
    sub_216B561E8(a1, v3);
    uint64_t v4 = (void **)v3;
    sub_216889A04(&v4);
  }
  return v1 == 0;
}

void sub_216B557E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B55800(uint64_t result)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 48) != *(void *)(result + 56)) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
  }
  return result;
}

void sub_216B55940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_216B56714((void *)(v9 - 72));
  sub_2169E0B70(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_216B5596C(uint64_t result)
{
  if (*(void *)(result + 48) != *(void *)(result + 56)) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
  }
  return result;
}

void sub_216B55A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_216B55A54(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 40) == a2) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
  }
  return 0;
}

void sub_216B55B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_216B55B7C(uint64_t a1, int a2, void *lpsrc)
{
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C75A950, (const struct __class_type_info *)&unk_26C75A960, 0);
  if (v5)
  {
    if (*(_DWORD *)(a1 + 40) == a2 || v5[10] == a2) {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
    }
  }
  else
  {
    v6[0] = "sdf/vectorListEditor.h";
    v6[1] = "ApplyList";
    _OWORD v6[2] = 322;
    void v6[3] = "virtual void pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNam"
            "eTokenKeyPolicy>::ApplyList(SdfListOpType, const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrR"
            "eserved__::SdfNameTokenKeyPolicy, FieldStorageuint64_t Type = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot apply from list editor of different type");
  }
}

void sub_216B55D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

uint64_t sub_216B55DA0(uint64_t a1, uint64_t a2, void *a3, uint64_t **a4)
{
  uint64_t v5 = a3[1];
  uint64_t v6 = *a4;
  char v7 = a4[1];
  BOOL v8 = *a3 == v5 || v6 == v7;
  uint64_t v9 = *a4;
  if (!v8)
  {
    uint64_t v20 = *a3 + 8;
    uint64_t v9 = *a4;
    do
    {
      if ((*(void *)(v20 - 8) & 0xFFFFFFFFFFFFFFF8) != (*v9 & 0xFFFFFFFFFFFFFFF8)) {
        break;
      }
      ++v9;
      if (v20 == v5) {
        break;
      }
      v20 += 8;
    }
    while (v9 != v7);
  }
  if (v9 != v7)
  {
    int v10 = v9;
    while (v6 == v10)
    {
LABEL_12:
      if (++v10 == v7) {
        goto LABEL_13;
      }
    }
    uint64_t v11 = *a4;
    while ((*v10 & 0xFFFFFFFFFFFFFFF8) != (*v11 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v11 == v10) {
        goto LABEL_12;
      }
    }
    uint64_t v32 = "sdf/listEditor.h";
    uint64_t v33 = "_ValidateEdit";
    uint64_t v34 = 262;
    uint64_t v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKe"
          "yPolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy"
          " = pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy]";
    char v36 = 0;
    uint64_t v17 = __p;
    sub_2169C3354(v10);
    if (v28 < 0) {
      uint64_t v17 = (void **)__p[0];
    }
    unint64_t v18 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v18)
    {
      char v19 = (const char *)(v18 + 16);
      if (*(char *)(v18 + 39) < 0) {
        char v19 = *(const char **)v19;
      }
    }
    else
    {
      char v19 = "";
    }
    sub_21698131C(a1, &v30);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate item '%s' not allowed for field '%s' on <%s>", (const char *)v17, v19, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    sub_21697C414(&v30);
LABEL_30:
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
LABEL_13:
  uint64_t v12 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v12);
  FieldDefinition = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (FieldDefinition)
  {
    if (v9 != v7)
    {
      int v15 = FieldDefinition;
      while (1)
      {
        sub_216B56798(v15, v9, __p);
        if (v29) {
          break;
        }
        if (++v9 == v7) {
          return 1;
        }
      }
      uint64_t v32 = "sdf/listEditor.h";
      uint64_t v33 = "_ValidateEdit";
      uint64_t v34 = 279;
      uint64_t v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfNameToken"
            "KeyPolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePo"
            "licy = pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy]";
      char v36 = 0;
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
      if (*((char *)WhyNot + 23) >= 0) {
        uint64_t v26 = (const char *)WhyNot;
      }
      else {
        uint64_t v26 = (const char *)*WhyNot;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"%s", v26);
      if (!v29) {
        return 0;
      }
      goto LABEL_30;
    }
    return 1;
  }
  else
  {
    uint64_t v32 = "sdf/listEditor.h";
    uint64_t v33 = "_ValidateEdit";
    uint64_t v34 = 273;
    uint64_t v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKe"
          "yPolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy"
          " = pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy]";
    char v36 = 0;
    unint64_t v23 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      long long v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0) {
        long long v24 = *(const char **)v24;
      }
    }
    else
    {
      long long v24 = "";
    }
    uint64_t v16 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"No field definition for field '%s'", v24);
  }
  return v16;
}

void sub_216B5605C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216B560A0(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 40) == a2) {
    return (uint64_t *)(a1 + 48);
  }
  {
    pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy,pxrInternal__aapl__pxrReserved__::TfToken>::_GetOperations(pxrInternal__aapl__pxrReserved__::SdfListOpType)const::empty = 0;
    *(void *)algn_26798C3E8 = 0;
    qword_26798C3F0 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy,pxrInternal__aapl__pxrReserved__::TfToken>::_GetOperations(pxrInternal__aapl__pxrReserved__::SdfListOpType)const::empty, &dword_216758000);
  }
  return &pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyPolicy,pxrInternal__aapl__pxrReserved__::TfToken>::_GetOperations(pxrInternal__aapl__pxrReserved__::SdfListOpType)const::empty;
}

uint64_t sub_216B5613C(uint64_t a1)
{
  *(void *)a1 = &unk_26C75A8D8;
  uint64_t v5 = (void **)(a1 + 48);
  sub_216889A04(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)a1 = &unk_26C75A988;
  uint64_t v3 = *(void *)(a1 + 16);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 8));
  return a1;
}

void sub_216B561E8(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    *(void *)&long long v20 = "sdf/vectorListEditor.h";
    *((void *)&v20 + 1) = "_UpdateFieldData";
    uint64_t v21 = 142;
    uint64_t v22 = "void pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKeyP"
          "olicy>::_UpdateFieldData(const value_vector_type &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameTok"
          "enKeyPolicy, FieldStorageuint64_t Type = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid owner.");
  }
  else
  {
    uint64_t v5 = (uint64_t **)sub_21697F2E0(v4);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v5, (uint64_t *)&v20);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v20);
    char v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v6);
    uint64_t v8 = *((void *)&v20 + 1);
    if (*((void *)&v20 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    if (v7)
    {
      uint64_t v9 = *(void **)(a1 + 48);
      uint64_t v11 = *a2;
      int v10 = a2[1];
      if ((char *)v10 - (char *)*a2 == *(void *)(a1 + 56) - (void)v9)
      {
        while (v11 != v10)
        {
          if ((*v11 & 0xFFFFFFFFFFFFFFF8) != (*v9 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_13;
          }
          ++v11;
          ++v9;
        }
      }
      else
      {
LABEL_13:
        if ((*(unsigned int (**)(uint64_t, void, uint64_t, uint64_t **))(*(void *)a1 + 96))(a1, *(unsigned int *)(a1 + 40), a1 + 48, a2))
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
          long long v20 = 0uLL;
          uint64_t v21 = 0;
          sub_21698FA28(&v20, *a2, a2[1], a2[1] - *a2);
          long long v12 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)(a1 + 48) = v20;
          long long v20 = v12;
          uint64_t v13 = *(void *)(a1 + 64);
          *(void *)(a1 + 64) = v21;
          uint64_t v21 = v13;
          uint64_t v14 = *a2;
          int v15 = a2[1];
          if (*a2 == v15)
          {
            uint64_t v17 = sub_21697F2E0(v4);
            pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
          }
          else
          {
            memset(v18, 0, sizeof(v18));
            sub_21698FA28(v18, v14, v15, v15 - v14);
            uint64_t v16 = sub_21697F2E0(v4);
            sub_216B564C8(v16, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (uint64_t **)v18);
            long long v24 = v18;
            sub_216889A04((void ***)&v24);
          }
          (*(void (**)(uint64_t, void, long long *, uint64_t **))(*(void *)a1 + 104))(a1, *(unsigned int *)(a1 + 40), &v20, a2);
          v18[0] = (void **)&v20;
          sub_216889A04(v18);
          sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
        }
      }
    }
    else
    {
      *(void *)&long long v20 = "sdf/vectorListEditor.h";
      *((void *)&v20 + 1) = "_UpdateFieldData";
      uint64_t v21 = 147;
      uint64_t v22 = "void pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfNameTokenKe"
            "yPolicy>::_UpdateFieldData(const value_vector_type &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNam"
            "eTokenKeyPolicy, FieldStorageuint64_t Type = pxrInternal__aapl__pxrReserved__::TfToken]";
      char v23 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer is not editable.");
    }
  }
}

void sub_216B5646C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12, int a13, char a14)
{
  a9 = (void **)&a14;
  sub_216889A04(&a9);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_216B564C8(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t **a3)
{
  v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C756C08;
  sub_2169DBAB4(v7, a3);
  BOOL v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B56558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_216B5657C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C75AA10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216B565C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C75AA10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_216B565F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_216B56654(*(void *)(a1 + 16), a2);
}

uint64_t sub_216B56608(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75AA80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216B56648()
{
  return &unk_26C75AA80;
}

void *sub_216B56654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  __n128 result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v2 + 48))(&v7);
  if (v8)
  {
    uint64_t v5 = v7;
    *(void *)a2 = v7;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        *(void *)a2 = v6;
      }
    }
    *(unsigned char *)(a2 + 8) = 1;
    if (v8)
    {
      if ((v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  return result;
}

void *sub_216B56714(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_216B56798@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  v7[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = (void (*)(uint64_t, void *))result[9];
  if (v3)
  {
    uint64_t v4 = *result;
    uint64_t v5 = *a2;
    v7[0] = v5;
    v7[1] = (char *)&off_26C750C70 + 1;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = v6;
      }
    }
    v3(v4, v7);
    return (uint64_t *)sub_2168EE084((uint64_t)v7);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_216B56840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B56854(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C75AAA0;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_216B568AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217324888(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_216B568C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_216B568F0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_216B56920(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75AAF0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_216B56968()
{
}

uint64_t *sub_216B56980()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216B56AAC((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75AB08, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C75AB08, (char *)8, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7580A8, (void *(*)(void *, BOOL))nullsub_281);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216B56A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216B56AAC(unint64_t **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7580A8, (uint64_t)__p);
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B56B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216B56B40()
{
  sub_216B57064();

  return sub_216B57168();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(uint64_t a1, uint64_t a2, _DWORD *a3, _OWORD *a4, const pxrInternal__aapl__pxrReserved__::VtDictionary *a5)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v10);
  if (SHIBYTE(v11) < 0)
  {
    sub_216778F24((unsigned char *)a1, v10[0], (unint64_t)v10[1]);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)v10;
    *(void *)(a1 + 16) = v11;
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  sub_216981010((_DWORD *)(a1 + 24), a3);
  sub_21698105C((_DWORD *)(a1 + 28), a3 + 1);
  *(_OWORD *)(a1 + 32) = *a4;
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 48), a5);
  return a1;
}

void sub_216B56C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t **pxrInternal__aapl__pxrReserved__::SdfReference::SetCustomData(uint64_t a1, long long *a2, void *a3)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(a1 + 48);
  if (a3[1])
  {
    char v5 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](v3, a2);
    return (uint64_t **)sub_2168EC6DC(v5, a3);
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtDictionary::erase((uint64_t ***)v3, (const void **)a2);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::SdfReference::IsInternal(pxrInternal__aapl__pxrReserved__::SdfReference *this)
{
  if (*((char *)this + 23) < 0) {
    uint64_t v1 = *((void *)this + 1);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 23);
  }
  return v1 == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfReference::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    char v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  if (*((void *)a1 + 3) != *((void *)v6 + 3)
    || !pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)a1 + 4, (double *)v6 + 4))
  {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::operator==((void **)a1 + 6, (uint64_t *)v6 + 6, v9);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfReference::operator<(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3 = (double *)a1;
  int v4 = (char)a2[23];
  uint64_t v5 = a1[23];
  int v7 = *(const void **)a1;
  size_t v6 = *((void *)a1 + 1);
  if ((v5 & 0x80u) == 0) {
    size_t v8 = a1[23];
  }
  else {
    size_t v8 = *((void *)a1 + 1);
  }
  if ((v5 & 0x80u) != 0) {
    a1 = *(unsigned __int8 **)a1;
  }
  if (v4 >= 0) {
    size_t v9 = a2[23];
  }
  else {
    size_t v9 = *((void *)a2 + 1);
  }
  if (v4 >= 0) {
    int v10 = a2;
  }
  else {
    int v10 = *(unsigned __int8 **)a2;
  }
  if (v9 >= v8) {
    size_t v11 = v8;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(a1, v10, v11);
  BOOL v13 = v8 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  if (v8 != v9) {
    return 0;
  }
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(v7, v10, v6)) {
      return 0;
    }
  }
  else if (v5)
  {
    int v15 = v3;
    while (*(unsigned __int8 *)v15 == *v10)
    {
      int v15 = (double *)((char *)v15 + 1);
      ++v10;
      if (!--v5) {
        goto LABEL_27;
      }
    }
    return 0;
  }
LABEL_27:
  if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24)))return 1; {
  if (*((void *)v3 + 3) != *((void *)a2 + 3))
  }
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator<(v3 + 4, (double *)a2 + 4)) {
    return 1;
  }
  BOOL result = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==(v3 + 4, (double *)a2 + 4);
  if (result)
  {
    unint64_t v16 = pxrInternal__aapl__pxrReserved__::VtDictionary::size((pxrInternal__aapl__pxrReserved__::VtDictionary *)(v3 + 6));
    return v16 < pxrInternal__aapl__pxrReserved__::VtDictionary::size((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a2 + 48));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFindReferenceByIdentity(unsigned __int8 **a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3) {
    return 0xFFFFFFFFLL;
  }
  while (!sub_216B5726C((uint64_t)&v7, a2, v2))
  {
    v2 += 56;
    if (v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }
  if (v2 == a1[1]) {
    return 0xFFFFFFFFLL;
  }
  else {
    return -1227133513 * ((unint64_t)(v2 - *a1) >> 3);
  }
}

uint64_t *sub_216B57064()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  size_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75A558, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C75A558, (char *)0x38, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    size_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B57124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B57168()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  size_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C75AB20, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C75AB20, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    size_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B57228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL sub_216B5726C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    int v10 = a3;
  }
  else {
    int v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, v10, v5)) {
      return *((void *)a2 + 3) == *((void *)a3 + 3);
    }
    return 0;
  }
  if (v4)
  {
    for (uint64_t i = a2; *i == *v10; ++i)
    {
      ++v10;
      if (!--v4) {
        return *((void *)a2 + 3) == *((void *)a3 + 3);
      }
    }
    return 0;
  }
  return *((void *)a2 + 3) == *((void *)a3 + 3);
}

void sub_216B57324()
{
}

void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  char v25 = a3;
  int v24 = a4;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    char v19 = "sdf/relationshipSpec.cpp";
    long long v20 = "New";
    uint64_t v21 = 63;
    uint64_t v22 = "static SdfRelationshipSpecHandle pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New(const SdfPrimSpecH"
          "andle &, const std::string &, BOOL, SdfVariability)";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"NULL owner prim");
LABEL_12:
    *a5 = 0;
    return;
  }
  if ((MEMORY[0x21D444B30](a2) & 1) == 0)
  {
    char v19 = "sdf/relationshipSpec.cpp";
    long long v20 = "New";
    uint64_t v21 = 69;
    uint64_t v22 = "static SdfRelationshipSpecHandle pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New(const SdfPrimSpecH"
          "andle &, const std::string &, BOOL, SdfVariability)";
    char v23 = 0;
    int v10 = sub_216A663FC(a1);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v17);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
    if (*(char *)(a2 + 23) >= 0) {
      int v12 = (const char *)a2;
    }
    else {
      int v12 = *(const char **)a2;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create a relationship on %s with invalid name: %s", Text, v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
    sub_21697C414(&v17);
    goto LABEL_12;
  }
  int v8 = sub_216A663FC(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v8, &v19);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, &v17);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
  sub_21697C414(&v19);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v17))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v16);
    int v9 = (uint64_t **)sub_216A663FC(a1);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v9, (uint64_t *)&v19);
    pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CreateSpec();
  }
  char v19 = "sdf/relationshipSpec.cpp";
  long long v20 = "New";
  uint64_t v21 = 77;
  uint64_t v22 = "static SdfRelationshipSpecHandle pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::New(const SdfPrimSpecHan"
        "dle &, const std::string &, BOOL, SdfVariability)";
  char v23 = 0;
  BOOL v13 = sub_216A663FC(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &v16);
  uint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16);
  if (*(char *)(a2 + 23) >= 0) {
    int v15 = (const char *)a2;
  }
  else {
    int v15 = *(const char **)a2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create relationship at invalid path <%s.%s>", v14, v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_21697C414(&v16);
  *a5 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
}

void sub_216B576B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = a14;
  if (a14)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a11);
  sub_21697B754(&a12);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_CanonicalizeTargetPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, &v8);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_21697C414(&v6);
}

void sub_216B57814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_MakeCompleteTargetSpecPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_CanonicalizeTargetPath(this, a2, &v8);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_21697C414(&v8);
}

void sub_216B578B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_GetTargetSpec@<X0>(uint64_t **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(this, &v10);
  int v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v10);
  pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_MakeCompleteTargetSpecPath((pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec *)this, a2, &v8);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  uint64_t result = v11;
  if (v11)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216B579A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_21697B754(&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(atomic_uint **this@<X0>, void *a2@<X8>)
{
  sub_216A5E64C(this, &v4);
  size_t v5 = v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfGetPathEditorProxy(&v5, (uint64_t *)v3 + 53, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_216B57A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::HasTargetPathList(atomic_uint **this)
{
  pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(this, &v3);
  if (sub_2169918D8((uint64_t)&v3)) {
    uint64_t v1 = sub_216991F78(v3);
  }
  else {
    uint64_t v1 = 1;
  }
  if (v4) {
    sub_216784EC4(v4);
  }
  return v1;
}

void sub_216B57AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::ClearTargetPathList(atomic_uint **this)
{
  pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList(this, &v1);
  if (sub_216A5F518((uint64_t)&v1)) {
    (*(void (**)(uint64_t))(*(void *)v1 + 48))(v1);
  }
  if (v2) {
    sub_216784EC4(v2);
  }
}

void sub_216B57B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::ReplaceTargetPath(pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  v55[2] = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this))
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, &v49);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v47);
    pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_CanonicalizeTargetPath(this, a2, (int *)&v46);
    pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_CanonicalizeTargetPath(this, a3, (int *)&v45);
    if (v46 != v45)
    {
      uint64_t v6 = sub_2169791E0(&v47);
      if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys)) {
        sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      }
      uint64_t v37 = 0;
      unint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v8 = sub_216A5B7B0((uint64_t *)(v6 + 112));
      (*(void (**)(void ****__return_ptr))(*(void *)v8 + 136))(&v53);
      if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v53))
      {
        if ((v54 & 4) != 0) {
          int v9 = (void *****)(*(uint64_t (**)(void ****))(((unint64_t)v54 & 0xFFFFFFFFFFFFFFF8) + 168))(&v53);
        }
        else {
          int v9 = (void *****)v53;
        }
      }
      else
      {
        int v9 = &v37;
      }
      char v42 = 0;
      int v43 = 0;
      uint64_t v44 = 0;
      sub_216980EEC(&v42, *v9, v9[1], v9[1] - *v9);
      uint64_t v10 = (void ***)sub_2168EE084((uint64_t)&v53);
      int v53 = (void ***)&v37;
      sub_216981168(v10);
      if (v43 == v42) {
        goto LABEL_42;
      }
      uint64_t v11 = 0;
      int v12 = -1;
      int v13 = -1;
      do
      {
        uint64_t v14 = *(void *)&v42[8 * v11];
        if (v14 == v45) {
          int v15 = v11;
        }
        else {
          int v15 = v13;
        }
        if (v14 == v46) {
          int v12 = v11;
        }
        else {
          int v13 = v15;
        }
        ++v11;
      }
      while ((v43 - v42) >> 3 != v11);
      if (v12 == -1) {
        goto LABEL_42;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)&v49, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, v55);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)&v49, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, &v51);
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v47);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51))
      {
        Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this);
        int v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_2169791E0(&v47);
        pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51, (uint64_t)&v53);
        char v19 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v53;
        long long v20 = v54;
        while (v19 != v20)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::HoldsChildren(Schema, v19))
          {
            uint64_t v37 = (void ****)"sdf/relationshipSpec.cpp";
            unint64_t v38 = "ReplaceTargetPath";
            uint64_t v39 = 220;
            uint64_t v40 = "void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::ReplaceTargetPath(const SdfPath &, const SdfPath &)";
            char v41 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
            uint64_t v32 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
            String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v49);
            if (*((char *)String + 23) >= 0) {
              uint64_t v34 = (const char *)String;
            }
            else {
              uint64_t v34 = (const char *)*String;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't replace target %s with target %s in relationship %s: %s", Text, v32, v34, "Target already exists");
            uint64_t v37 = &v53;
            sub_216889A04((void ***)&v37);
            goto LABEL_40;
          }
          char v19 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v19 + 8);
        }
        uint64_t v37 = &v53;
        sub_216889A04((void ***)&v37);
        pxrInternal__aapl__pxrReserved__::SdfSpec::_DeleteSpec((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51);
        uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v47);
        if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51))
        {
          uint64_t v37 = (void ****)"sdf/relationshipSpec.cpp";
          unint64_t v38 = "ReplaceTargetPath";
          uint64_t v39 = 228;
          uint64_t v40 = "void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::ReplaceTargetPath(const SdfPath &, const SdfPath &)";
          char v41 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "!layer->HasSpec(newTargetSpecPath)", 0);
        }
      }
      if (pxrInternal__aapl__pxrReserved__::SdfSpec::_MoveSpec((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v55, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51))
      {
        uint64_t v22 = (int *)&v42[8 * v12];
        sub_2169C487C(v22, &v45);
        sub_2169C48D4(v22 + 1, (_DWORD *)&v45 + 1);
        if (v13 != -1)
        {
          sub_216A8E5E4((uint64_t)&v37, (int *)&v42[8 * v13 + 8], (int *)v43, (int *)&v42[8 * v13]);
          int v24 = v23;
          for (uint64_t i = v43; i != (char *)v24; sub_216981128((uint64_t)&v44, i))
            i -= 8;
          int v43 = (char *)v24;
        }
        uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v47);
        long long v27 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v27) {
          long long v27 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        }
        sub_216A6E944(v26, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v49, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v27 + 48), (_DWORD **)&v42);
        char v28 = 1;
      }
      else
      {
        uint64_t v37 = (void ****)"sdf/relationshipSpec.cpp";
        unint64_t v38 = "ReplaceTargetPath";
        uint64_t v39 = 234;
        uint64_t v40 = "void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::ReplaceTargetPath(const SdfPath &, const SdfPath &)";
        char v41 = 0;
        char v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v46);
        int v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot move %s to %s", v29, v30);
LABEL_40:
        char v28 = 0;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
      sub_21697C414(&v51);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v55 + 1);
      sub_21697C414(v55);
      if (v28)
      {
LABEL_42:
        sub_2169791E0(&v47);
        if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
          sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
      }
      uint64_t v37 = (void ****)&v42;
      sub_216981168((void ***)&v37);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    sub_21697C414(&v45);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_21697C414(&v46);
    uint64_t v36 = v48;
    if (v48 && atomic_fetch_add_explicit((atomic_uint *volatile)(v48 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v50);
    sub_21697C414(&v49);
  }
  else
  {
    uint64_t v37 = (void ****)"sdf/relationshipSpec.cpp";
    unint64_t v38 = "ReplaceTargetPath";
    uint64_t v39 = 173;
    uint64_t v40 = "void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::ReplaceTargetPath(const SdfPath &, const SdfPath &)";
    char v41 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"ReplaceTargetPath: Permission denied.");
  }
}

void sub_216B5837C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,int a39,int a40,int a41,uint64_t a42,uint64_t a43,int a44,void **a45)
{
  sub_21697B754(&a45);
  sub_21697B754((_DWORD *)(v45 - 104));
  a45 = (void **)&a36;
  sub_216981168(&a45);
  sub_21697B754(&a39);
  sub_21697B754(&a41);
  uint64_t v47 = a43;
  if (a43)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a43 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
    }
  }
  sub_21697B754(&a44);
  _Unwind_Resume(a1);
}

void sub_216B58500()
{
}

_DWORD *sub_216B58508@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)a3 == *(void *)result)
  {
    sub_216981010((_DWORD *)a4, a2);
    uint64_t v6 = (_DWORD *)(a4 + 4);
    int v7 = a2 + 1;
LABEL_6:
    uint64_t result = sub_21698105C(v6, v7);
    char v8 = 1;
    goto LABEL_7;
  }
  if (*(void *)a3 != *(void *)a2)
  {
    sub_216981010((_DWORD *)a4, a3);
    uint64_t v6 = (_DWORD *)(a4 + 4);
    int v7 = a3 + 1;
    goto LABEL_6;
  }
  char v8 = 0;
  *(unsigned char *)a4 = 0;
LABEL_7:
  *(unsigned char *)(a4 + 8) = v8;
  return result;
}

_DWORD *sub_216B58598(_DWORD *a1)
{
  return a1;
}

uint64_t sub_216B585E4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  void v8[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v8[1] = (unsigned int *)&off_26C754E58;
  sub_216982A54(v8, a4);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(a1, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_2168EE084((uint64_t)v8);
}

void sub_216B5867C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::RemoveTargetPath(pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(this, v4);
  pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::_CanonicalizeTargetPath(this, a2, (int *)&v5);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v5, &v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v5 + 1);
  sub_21697C414(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v4 + 1);
  sub_21697C414(v4);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v6);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)this, &v5);
  memset(v4, 0, sizeof(v4));
  pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::SetChildren();
}

void sub_216B587FC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  if (a3) {
    sub_216784EC4(a3);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  sub_21697B754((int *)va1);
  _Unwind_Resume(a1);
}

void sub_216B588BC(void *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (sub_216A5F518((uint64_t)a1) && ((*(uint64_t (**)(void))(*(void *)*a1 + 24))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))())
    {
      uint64_t v4 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 0;
      sub_216B590F4((unsigned int *)&v8, a2);
    }
    else
    {
      uint64_t v5 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 1;
      sub_216B590F4((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
      uint64_t v6 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 4;
      sub_216B590F4((unsigned int *)&v8, a2);
      if (v9) {
        sub_216784EC4(v9);
      }
      uint64_t v7 = (std::__shared_weak_count *)a1[1];
      uint64_t v8 = *a1;
      int v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = 5;
      sub_216B590F4((unsigned int *)&v8, a2);
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
}

void sub_216B58A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *sub_216B58A40(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)sub_216A5F518((uint64_t)a1);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v14);
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    uint64_t v11 = *a1;
    int v12 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v13 = 0;
    sub_216B590F4((unsigned int *)&v11, a2);
    if (v12) {
      sub_216784EC4(v12);
    }
    uint64_t v6 = (std::__shared_weak_count *)a1[1];
    uint64_t v11 = *a1;
    int v12 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v13 = 1;
    sub_216B590F4((unsigned int *)&v11, a2);
    if (v12) {
      sub_216784EC4(v12);
    }
    uint64_t v7 = (std::__shared_weak_count *)a1[1];
    uint64_t v11 = *a1;
    int v12 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v13 = 4;
    sub_216B590F4((unsigned int *)&v11, a2);
    if (v12) {
      sub_216784EC4(v12);
    }
    uint64_t v8 = (std::__shared_weak_count *)a1[1];
    uint64_t v11 = *a1;
    int v12 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v13 = 5;
    sub_216B590F4((unsigned int *)&v11, a2);
    if (v12) {
      sub_216784EC4(v12);
    }
    int v9 = (std::__shared_weak_count *)a1[1];
    uint64_t v11 = *a1;
    int v12 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v13 = 2;
    sub_216B590F4((unsigned int *)&v11, a2);
    if (v12) {
      sub_216784EC4(v12);
    }
    int v10 = (std::__shared_weak_count *)a1[1];
    uint64_t v11 = *a1;
    int v12 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v13 = 3;
    sub_216B590F4((unsigned int *)&v11, a2);
    if (v12) {
      sub_216784EC4(v12);
    }
    return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v14);
  }
  return result;
}

void sub_216B58BD0(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a3) {
    sub_216784EC4(a3);
  }
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetNoLoadHint(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 224), (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v10 && (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)v9) & 1) != 0)
  {
    uint64_t v3 = (unsigned __int8 *)sub_216958184((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5) {
      uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 224));
    uint64_t v3 = (unsigned __int8 *)sub_216958184(Fallback);
  }
  uint64_t v7 = *v3;
  sub_2168EE084((uint64_t)v9);
  return v7;
}

void sub_216B58CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::SetNoLoadHint(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, char a2)
{
  char v5 = a2;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return sub_216A5E3D8(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 224), &v5);
}

uint64_t *sub_216B58D68()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216A5F484((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7580C0, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C7580C0, (char *)8, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C757F58, (void *(*)(void *, BOOL))nullsub_282);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216B58E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216B58E98(uint64_t a1)
{
  *(void *)a1 = &unk_26C75AB40;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  return a1;
}

void sub_216B58EFC(_DWORD *a1)
{
  *(void *)a1 = &unk_26C75AB40;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 7);
  sub_21697C414(a1 + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_21697C414(a1 + 4);

  operator delete(a1);
}

void *sub_216B58F70(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = &unk_26C75AB40;
  v2[1] = v3;
  sub_216A8FD38((_DWORD *)v2 + 4, (_DWORD *)(a1 + 16));
  return v2;
}

_DWORD *sub_216B58FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26C75AB40;
  *(void *)(a2 + 8) = v2;
  return sub_216A8FD38((_DWORD *)(a2 + 16), (_DWORD *)(a1 + 16));
}

_DWORD *sub_216B58FF8(uint64_t a1)
{
  return sub_216B590A0((_DWORD *)(a1 + 8));
}

void sub_216B59000(_DWORD *a1)
{
  sub_216B590A0(a1 + 2);

  operator delete(a1);
}

uint64_t sub_216B5903C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1 + 16, a1 + 24, a2);
}

uint64_t sub_216B59054(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C75ABB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216B59094()
{
  return &unk_26C75ABB0;
}

_DWORD *sub_216B590A0(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 5);
  sub_21697C414(a1 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);

  return sub_21697C414(a1 + 2);
}

void sub_216B590F4(unsigned int *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3 = sub_216B591D4((uint64_t)a1, a2);
  if (v3 == -1)
  {
    if (*(void *)a1)
    {
      char v4 = (void *)(*(uint64_t (**)(void, void))(**(void **)a1 + 112))(*(void *)a1, a1[4]);
      uint64_t v5 = (uint64_t)(v4[1] - *v4) >> 3;
    }
    else
    {
      uint64_t v5 = 0;
    }
    memset(v6, 0, sizeof(v6));
    sub_216B59290(a1, v5, 0, v6);
    int v7 = (void **)v6;
    sub_216981168(&v7);
  }
  else
  {
    sub_216B5922C(a1, v3);
  }
}

void sub_216B591BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B591D4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (!sub_216991AC8(a1)) {
    return -1;
  }
  char v4 = *(pxrInternal__aapl__pxrReserved__::Sdf_Identity ***)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 16);

  return sub_216B5942C(v4, v5, a2);
}

void sub_216B5922C(unsigned int *a1, uint64_t a2)
{
  memset(v2, 0, sizeof(v2));
  sub_216B59290(a1, a2, 1, v2);
  uint64_t v3 = (void **)v2;
  sub_216981168(&v3);
}

void sub_216B59274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216981168(&a12);
  _Unwind_Resume(a1);
}

void sub_216B59290(unsigned int *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (sub_216B594F8((uint64_t)a1))
  {
    if (!a3 && *a4 == a4[1])
    {
      (*(void (**)(void **__return_ptr))(**(void **)a1 + 32))(__p);
      if (v17)
      {
        uint64_t v10 = "sdf/listProxy.h";
        uint64_t v11 = "_Edit";
        uint64_t v12 = 750;
        int v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::_"
              "Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
        char v14 = 0;
        WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
        if (*((char *)WhyNot + 23) >= 0) {
          int v9 = (const char *)WhyNot;
        }
        else {
          int v9 = (const char *)*WhyNot;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing list: %s", v9);
        if (v17 && v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else if (((*(uint64_t (**)(void, void, uint64_t, uint64_t, void *))(**(void **)a1 + 80))(*(void *)a1, a1[4], a2, a3, a4) & 1) == 0)
    {
      uint64_t v10 = "sdf/listProxy.h";
      uint64_t v11 = "_Edit";
      uint64_t v12 = 758;
      int v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::_Ed"
            "it(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
      char v14 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Inserting invalid value into list editor");
    }
  }
}

void sub_216B59408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B5942C(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v4 = a1 + 3;
  uint64_t v5 = (*((uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*a1 + 14))(a1);
  uint64_t v6 = *(void **)v5;
  int v7 = *(void **)(v5 + 8);
  sub_216982C8C(v4, a3, (int *)&v9);
  if (v6 != v7)
  {
    while (*v6 != v9)
    {
      if (++v6 == v7)
      {
        uint64_t v6 = v7;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
  sub_21697C414(&v9);
  if (v6 == *(void **)(v5 + 8)) {
    return -1;
  }
  else {
    return ((uint64_t)v6 - *(void *)v5) >> 3;
  }
}

uint64_t sub_216B594F8(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 689;
    void v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::_Va"
            "lidate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfSchemaE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v10);
  uint64_t v2 = std::string::insert(&v10, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type v14 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v11, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::SdfSchema*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)operator new(0x3B8uLL);
      pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SdfSchemaBase(v9);
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::SdfSchema*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v12--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v11);
  return v5;
}

void sub_216B59768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    _OWORD v3[2] = 56;
    void v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::SetI"
            "nstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::SdfSchema]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::DeleteInstance()
{
  for (uint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
        result;
        uint64_t result = v1)
  {
    uint64_t v1 = result;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance, (unint64_t *)&v1, 0);
    if (v1 == result)
    {
      uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v2();
    }
    sched_yield();
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfSchema::SdfSchema(pxrInternal__aapl__pxrReserved__::SdfSchema *this)
{
}

{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SdfSchemaBase(this);
}

void sub_216B5990C()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_SCHEMA_PROHIBIT_INVALID_VARIANT_SELECTIONS)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::FieldDefinition(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this, const pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  *(void *)this = a2;
  uint64_t v5 = *(void *)a3;
  *((void *)this + 1) = *(void *)a3;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2168EE4C4((void *)this + 2, a4);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(_DWORD *)((char *)this + 55) = 0;
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetName(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  return (uint64_t)this + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  return (uint64_t)this + 16;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetInfo(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  return (uint64_t)this + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::IsPlugin(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::IsReadOnly(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  return *((unsigned __int8 *)this + 57);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::HoldsChildren(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  return *((unsigned __int8 *)this + 58);
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::FallbackValue(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::Plugin(uint64_t this)
{
  *(unsigned char *)(this + 56) = 1;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::ReadOnly(uint64_t this)
{
  *(unsigned char *)(this + 57) = 1;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::Children(uint64_t this)
{
  *(_WORD *)(this + 57) = 257;
  return this;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::AddInfo(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::JsValue *a3)
{
  char v4 = (uint64_t *)((char *)this + 32);
  uint64_t v5 = *(void *)a2;
  v9[0] = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v9[0] = v6;
    }
  }
  int v7 = (std::__shared_weak_count *)*((void *)a3 + 1);
  v9[1] = *(void *)a3;
  std::string v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_216B59B20(v4, (uint64_t)v9);
  if (v10) {
    sub_216784EC4(v10);
  }
  if ((v9[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return this;
}

void sub_216B59B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  sub_2173242CC(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_216B59B20(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    int v13 = (char *)sub_216782ED8(result, v12);
    std::string::size_type v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(void *)std::string::size_type v14 = *(void *)a2;
    *(void *)a2 = 0;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_216B6F5E8(a1, v16);
    uint64_t v8 = a1[1];
    uint64_t result = sub_216B6F824((uint64_t)v16);
  }
  else
  {
    *(void *)unint64_t v7 = *(void *)a2;
    *(void *)a2 = 0;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_216B59C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B6F824((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::ValueValidator(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::ListValueValidator(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::MapKeyValidator(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::MapValueValidator(uint64_t result, uint64_t a2)
{
  *(void *)(result + 88) = a2;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetFields@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *this@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_216AFE5A8(a2, *((void *)this + 3));
  char v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    uint64_t result = (void *)*result;
    do
    {
      unint64_t v5 = result + 1;
      sub_2168D2318(result, v4 + 2);
      char v4 = (void *)*v4;
      uint64_t result = v5;
    }
    while (v4);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetMetadataFields@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v11 = *(void *)(this + 16);
  uint64_t v12 = 0;
  while (v11 != v12)
  {
    if (*(unsigned char *)(*sub_216B59D98(&v11, a2, a3) + 25))
    {
      unint64_t v7 = (uint64_t *)(*sub_216B59D98(&v11, v5, v6) + 16);
      uint64_t v8 = *(uint64_t **)(a4 + 8);
      if ((unint64_t)v8 >= *(void *)(a4 + 16))
      {
        unint64_t v10 = sub_216973984((char **)a4, v7);
      }
      else
      {
        uint64_t v9 = *v7;
        *uint64_t v8 = *v7;
        if ((v9 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v8 &= 0xFFFFFFFFFFFFFFF8;
        }
        unint64_t v10 = (char *)(v8 + 1);
      }
      *(void *)(a4 + 8) = v10;
    }
    this = sub_216B59E14((uint64_t)&v11);
  }
  return this;
}

void sub_216B59D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_216B59D98(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    _OWORD v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TfHashMap<pxr"
            "Internal__aapl__pxrReserved__::TfToken, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_FieldInfo, pxrInte"
            "rnal__aapl__pxrReserved__::TfToken::HashFunctor>>::operator->() [T = const pxrInternal__aapl__pxrReserved__:"
            ":TfHashMap<pxrInternal__aapl__pxrReserved__::TfToken, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_Fiel"
            "dInfo, pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216B59E14(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    _OWORD v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TfHashMap<pxrInternal__aapl__pxrReserved__::TfToken, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_Fiel"
            "dInfo, pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor>>::operator++() [T = const pxrInternal__aapl__"
            "pxrReserved__::TfHashMap<pxrInternal__aapl__pxrReserved__::TfToken, pxrInternal__aapl__pxrReserved__::SdfSch"
            "emaBase::_FieldInfo, pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)a1 = **(void **)a1;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsMetadataField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v2 = sub_2168CB120(this, a2);
  if (v2) {
    BOOL v3 = *((unsigned char *)v2 + 25) != 0;
  }
  return (v2 != 0) & v3;
}

void *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetMetadataFieldDisplayGroup@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t result = sub_2168CB120(this, a2);
  if (!result || !*((unsigned char *)result + 25))
  {
    unint64_t v6 = 0;
LABEL_7:
    *a3 = v6;
    return result;
  }
  int v5 = (atomic_uint *)result[4];
  *a3 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v2 = sub_2168CB120(this, a2);
  if (v2) {
    BOOL v3 = *((unsigned char *)v2 + 24) != 0;
  }
  return (v2 != 0) & v3;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsValidField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return sub_2168CB120(this, a2) != 0;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3)
{
  uint64_t v4 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField(this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v4, a3);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  v8[1] = 1;
  uint64_t v9 = 0;
  sub_2168D2318(&v9, a3);
  v8[0] = a4;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::_AddField(*((void *)this + 1), (uint64_t *)a2, v8);
  if (a4) {
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_AddRequiredFieldName(*(char **)this, a2);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::_AddField(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  sub_216B6A9A0((uint64_t)&v20, a2, (uint64_t)a3);
  unint64_t v15 = v20;
  LOWORD(v16) = v21;
  uint64_t v17 = v22;
  unint64_t v20 = 0;
  uint64_t v22 = 0;
  sub_216B6F8CC(a1, &v15, (uint64_t *)&v15);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v6)
  {
    if (*a3)
    {
      uint64_t v11 = *(char **)(a1 + 40);
      uint64_t v9 = *(char **)(a1 + 48);
      unint64_t v10 = (void *)(a1 + 40);
      if (v9 != v11)
      {
        unint64_t v12 = (v9 - v11) >> 3;
        do
        {
          int v13 = (uint64_t *)&v11[8 * (v12 >> 1)];
          int v14 = sub_2168BE1F8((uint64_t)&v15, v13, a2);
          if (v14) {
            v12 += ~(v12 >> 1);
          }
          else {
            v12 >>= 1;
          }
          if (v14) {
            uint64_t v11 = (char *)(v13 + 1);
          }
        }
        while (v12);
        uint64_t v9 = v11;
      }
      sub_216A6BFEC(v10, v9, (char *)a2);
    }
  }
  else
  {
    unint64_t v15 = (unint64_t)"sdf/schema.cpp";
    char v16 = "_AddField";
    uint64_t v17 = 304;
    int v18 = "void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::_AddField(const TfToken &, const _FieldInfo &)";
    char v19 = 0;
    unint64_t v7 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      uint64_t v8 = (const char *)(v7 + 16);
      if (*(char *)(v7 + 39) < 0) {
        uint64_t v8 = *(const char **)v8;
      }
    }
    else
    {
      uint64_t v8 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate registration for field '%s'", v8);
  }
}

void sub_216B5A248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173248AC((uint64_t *)va, v3, (uint64_t *)va1);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_AddRequiredFieldName(char *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v2 = this;
  BOOL v3 = (void *)*((void *)this + 116);
  uint64_t v4 = (void *)*((void *)this + 117);
  if (v3 != v4)
  {
    while ((*v3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)a2 & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v3 == v4)
      {
        BOOL v3 = (void *)*((void *)this + 117);
        break;
      }
    }
  }
  if (v3 == v4)
  {
    if ((unint64_t)v4 >= *((void *)this + 118))
    {
      this = sub_216973984((char **)this + 116, (uint64_t *)a2);
    }
    else
    {
      uint64_t v5 = *(void *)a2;
      void *v4 = *(void *)a2;
      if ((v5 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v4 &= 0xFFFFFFFFFFFFFFF8;
      }
      this = (char *)(v4 + 1);
    }
    *((void *)v2 + 117) = this;
  }
  return this;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::Field(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3)
{
  v7[1] = 0;
  uint64_t v8 = 0;
  v7[0] = a3;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::_AddField(*((void *)this + 1), (uint64_t *)a2, v7);
  if (a3) {
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_AddRequiredFieldName(*(char **)this, a2);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return this;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::CopyFrom(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *this, const pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if ((const pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)v3 != a2)
  {
    *(_DWORD *)(v3 + 32) = *((_DWORD *)a2 + 8);
    sub_216B6AA04((void *)v3, *((uint64_t **)a2 + 2), 0);
    sub_216ABF1B0((void *)(v3 + 40), *((uint64_t **)a2 + 5), *((uint64_t **)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3);
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType::~SdfChildrenKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *this)
{
  uint64_t v10 = (void **)((char *)this + 72);
  sub_216889A04(&v10);
  uint64_t v2 = *((void *)this + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 7);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 6);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 5);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 4);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 1);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType::SdfChildrenKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "connectionChildren", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "expressionChildren", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "mapperArgChildren", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "mapperChildren", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "primChildren", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "properties", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "targetChildren", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "variantChildren", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "variantSetChildren", 0);
  uint64_t v3 = *(void *)this;
  uint64_t v18 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *v2;
  uint64_t v19 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 2);
  uint64_t v20 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 3);
  uint64_t v21 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 4);
  uint64_t v22 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v23 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 6);
  uint64_t v24 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 7);
  uint64_t v25 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 8);
  uint64_t v26 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  unint64_t v12 = (char *)operator new(0x48uLL);
  uint64_t v13 = 0;
  *((void *)this + 9) = v12;
  *((void *)this + 10) = v12;
  *((void *)this + 11) = v12 + 72;
  do
  {
    uint64_t v14 = *(uint64_t *)((char *)&v18 + v13);
    *(void *)&v12[v13] = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v12[v13] &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 += 8;
  }
  while (v13 != 72);
  *((void *)this + 10) = v12 + 72;
  for (uint64_t i = 64; i != -8; i -= 8)
  {
    uint64_t v16 = *(uint64_t *)((char *)&v18 + i);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216B5A8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v21 = 64;
  while (1)
  {
    uint64_t v22 = *(void *)(&a11 + v21);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v21 -= 8;
    if (v21 == -8)
    {
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::~SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
  unint64_t v63 = (void **)((char *)this + 496);
  sub_216889A04(&v63);
  uint64_t v2 = *((void *)this + 61);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 60);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 59);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 58);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 57);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 56);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 55);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 54);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 53);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 52);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 51);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 50);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 49);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 48);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 47);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 46);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 45);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 44);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 43);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 42);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *((void *)this + 41);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *((void *)this + 40);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *((void *)this + 39);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *((void *)this + 38);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *((void *)this + 37);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *((void *)this + 36);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *((void *)this + 35);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *((void *)this + 34);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *((void *)this + 33);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *((void *)this + 32);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *((void *)this + 31);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *((void *)this + 30);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *((void *)this + 29);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *((void *)this + 28);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *((void *)this + 27);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *((void *)this + 26);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *((void *)this + 25);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v39 = *((void *)this + 24);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = *((void *)this + 23);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v41 = *((void *)this + 22);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v42 = *((void *)this + 21);
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v43 = *((void *)this + 20);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v44 = *((void *)this + 19);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v45 = *((void *)this + 18);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v46 = *((void *)this + 17);
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v47 = *((void *)this + 16);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v48 = *((void *)this + 15);
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v49 = *((void *)this + 14);
  if ((v49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v50 = *((void *)this + 13);
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v51 = *((void *)this + 12);
  if ((v51 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v52 = *((void *)this + 11);
  if ((v52 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v53 = *((void *)this + 10);
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v54 = *((void *)this + 9);
  if ((v54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v55 = *((void *)this + 8);
  if ((v55 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v56 = *((void *)this + 7);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v57 = *((void *)this + 6);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v58 = *((void *)this + 5);
  if ((v58 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v59 = *((void *)this + 4);
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v60 = *((void *)this + 3);
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v61 = *((void *)this + 2);
  if ((v61 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v62 = *((void *)this + 1);
  if ((v62 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  unint64_t v70 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "active", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v70, "allowedTokens", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "assetInfo", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "colorConfiguration", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "colorManagementSystem", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "colorSpace", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "comment", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "connectionPaths", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "custom", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "customData", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "customLayerData", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "default", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "defaultPrim", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "displayGroup", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "displayGroupOrder", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "displayName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "displayUnit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "documentation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "endTimeCode", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "expressionVariables", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "framePrecision", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "framesPerSecond", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "hidden", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "hasOwnedSubLayers", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "inheritPaths", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "instanceable", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "kind", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "primOrder", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "noLoadHint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "owner", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "payload", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "permission", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "prefix", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "prefixSubstitutions", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "propertyOrder", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "references", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "relocates", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "sessionOwner", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 304, "specializes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 312, "specifier", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 320, "startTimeCode", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 328, "playbackMode", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 336, "autoPlay", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 344, "preliminary:collidesWithEnvironment", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 352, "sceneName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 360, "subLayers", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 368, "subLayerOffsets", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 376, "suffix", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 384, "suffixSubstitutions", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 392, "symmetricPeer", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 400, "symmetryArgs", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 408, "symmetryArguments", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 416, "symmetryFunction", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 424, "targetPaths", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 432, "timeSamples", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 440, "timeCodesPerSecond", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 448, "typeName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 456, "variantSelection", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 464, "variability", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 472, "variantSetNames", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 480, "endFrame", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 488, "startFrame", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v71 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v70;
  uint64_t v72 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v73 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v74 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v75 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v76 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v77 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v78 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v79 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v80 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v81 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v82 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v83 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v84 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v85 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v86 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v87 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v88 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v89 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v90 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v90 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v91 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v91 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v92 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v92 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v93 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v93 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v94 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v94 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v95 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v95 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v96 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v96 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v97 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v97 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v98 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v98 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v99 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v99 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v100 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v100 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v32 = *((void *)this + 30);
  uint64_t v101 = v32;
  if ((v32 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v101 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *((void *)this + 31);
  uint64_t v102 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v102 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v103 = v34;
  if ((v34 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v103 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v35 = *((void *)this + 33);
  uint64_t v104 = v35;
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v104 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v36 = *((void *)this + 34);
  uint64_t v105 = v36;
  if ((v36 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v105 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v37 = *((void *)this + 35);
  uint64_t v106 = v37;
  if ((v37 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v106 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v38 = *((void *)this + 36);
  uint64_t v107 = v38;
  if ((v38 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v107 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v39 = *((void *)this + 37);
  uint64_t v108 = v39;
  if ((v39 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v108 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v40 = *((void *)this + 38);
  uint64_t v109 = v40;
  if ((v40 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v109 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v41 = *((void *)this + 39);
  uint64_t v110 = v41;
  if ((v41 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v110 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v42 = *((void *)this + 40);
  uint64_t v111 = v42;
  if ((v42 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v111 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v43 = *((void *)this + 41);
  uint64_t v112 = v43;
  if ((v43 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v112 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v44 = *((void *)this + 42);
  uint64_t v113 = v44;
  if ((v44 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v113 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v45 = *((void *)this + 43);
  uint64_t v114 = v45;
  if ((v45 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v114 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v46 = *((void *)this + 44);
  uint64_t v115 = v46;
  if ((v46 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v115 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v47 = *((void *)this + 45);
  uint64_t v116 = v47;
  if ((v47 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v116 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v48 = *((void *)this + 46);
  uint64_t v117 = v48;
  if ((v48 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v117 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v49 = *((void *)this + 47);
  uint64_t v118 = v49;
  if ((v49 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v118 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v50 = *((void *)this + 48);
  uint64_t v119 = v50;
  if ((v50 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v119 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v51 = *((void *)this + 49);
  uint64_t v120 = v51;
  if ((v51 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v120 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v52 = *((void *)this + 50);
  uint64_t v121 = v52;
  if ((v52 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v121 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v53 = *((void *)this + 51);
  uint64_t v122 = v53;
  if ((v53 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v122 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v54 = *((void *)this + 52);
  uint64_t v123 = v54;
  if ((v54 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v123 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v55 = *((void *)this + 53);
  uint64_t v124 = v55;
  if ((v55 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v124 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v56 = *((void *)this + 54);
  uint64_t v125 = v56;
  if ((v56 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v125 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v57 = *((void *)this + 55);
  uint64_t v126 = v57;
  if ((v57 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v126 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v58 = *((void *)this + 56);
  uint64_t v127 = v58;
  if ((v58 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v127 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v59 = *((void *)this + 57);
  uint64_t v128 = v59;
  if ((v59 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v128 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v60 = *((void *)this + 58);
  uint64_t v129 = v60;
  if ((v60 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v129 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v61 = *((void *)this + 59);
  uint64_t v130 = v61;
  if ((v61 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v130 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v62 = *((void *)this + 60);
  uint64_t v131 = v62;
  if ((v62 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v131 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v63 = *((void *)this + 61);
  uint64_t v132 = v63;
  if ((v63 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v132 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  long long v64 = (char *)operator new(0x1F0uLL);
  uint64_t v65 = 0;
  *((void *)this + 62) = v64;
  *((void *)this + 63) = v64;
  *((void *)this + 64) = v64 + 496;
  do
  {
    uint64_t v66 = *(uint64_t *)((char *)&v71 + v65);
    *(void *)&v64[v65] = v66;
    if ((v66 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v64[v65] &= 0xFFFFFFFFFFFFFFF8;
    }
    v65 += 8;
  }
  while (v65 != 496);
  *((void *)this + 63) = v64 + 496;
  for (uint64_t i = 488; i != -8; i -= 8)
  {
    uint64_t v68 = *(uint64_t *)((char *)&v71 + i);
    if ((v68 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_216B5C270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48,void *a49,void *a50,void *a51,void *a52,void *a53,void *a54,void *a55,void *a56,void *a57,void *a58,void *a59,void *a60,void *a61,void *a62,void **a63)
{
  sub_216889A04(&a63);
  uint64_t v75 = 488;
  while (1)
  {
    uint64_t v76 = *(void *)(&a65 + v75);
    if ((v76 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v75 -= 8;
    if (v75 == -8)
    {
      if ((*v72 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v71 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v70 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v69 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v68 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v67 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v66 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v74 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v73 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a54 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a56 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a57 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a58 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a59 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a60 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a61 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a62 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v65 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_216B5C990()
{
}

void sub_216B5C998()
{
}

void sub_216B5C9A0()
{
}

void sub_216B5C9A8()
{
}

void sub_216B5C9B0()
{
}

void sub_216B5C9B8()
{
}

void sub_216B5C9C0()
{
}

void sub_216B5C9C8()
{
}

void sub_216B5C9D0()
{
}

void sub_216B5C9D8()
{
}

void sub_216B5C9E0()
{
}

void sub_216B5C9E8()
{
}

void sub_216B5C9F0()
{
}

void sub_216B5C9F8()
{
}

void sub_216B5CA00()
{
}

void sub_216B5CA08()
{
}

void sub_216B5CA10()
{
}

void sub_216B5CA18()
{
}

void sub_216B5CA20()
{
}

void sub_216B5CA28()
{
}

void sub_216B5CA30()
{
}

void sub_216B5CA38()
{
}

void sub_216B5CA40()
{
}

void sub_216B5CA48()
{
}

void sub_216B5CA50()
{
}

void sub_216B5CA58()
{
}

void sub_216B5CA60()
{
}

void sub_216B5CA68()
{
}

void sub_216B5CA70()
{
}

void sub_216B5CA78()
{
}

void sub_216B5CA80()
{
}

void sub_216B5CA88()
{
}

void sub_216B5CA90()
{
}

void sub_216B5CA98()
{
}

void sub_216B5CAA0()
{
}

void sub_216B5CAA8()
{
}

void sub_216B5CAB0()
{
}

void sub_216B5CAB8()
{
}

void sub_216B5CAC0()
{
}

void sub_216B5CAC8()
{
}

void sub_216B5CAD0()
{
}

void sub_216B5CAD8()
{
}

void sub_216B5CAE0()
{
}

void sub_216B5CAE8()
{
}

void sub_216B5CAF0()
{
}

void sub_216B5CAF8()
{
}

void sub_216B5CB00()
{
}

void sub_216B5CB08()
{
}

void sub_216B5CB10()
{
}

void sub_216B5CB18()
{
}

void sub_216B5CB20()
{
}

void sub_216B5CB28()
{
}

void sub_216B5CB30()
{
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::Type(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v8 = operator new(0x90uLL);
  sub_216B6AC28((uint64_t)v8, (uint64_t *)a2, a3, a4);
  *(void *)this = v8;
  return this;
}

void sub_216B5CB9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::Type(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfType *a3)
{
  uint64_t v6 = operator new(0x90uLL);
  sub_216B6AD04((uint64_t)v6, (uint64_t *)a2, a3);
  *(void *)this = v6;
  return this;
}

void sub_216B5CC04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::~Type(char **this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    sub_216B6FB34((uint64_t)this, v1);
  }
}

{
  char *v1;

  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    sub_216B6FB34((uint64_t)this, v1);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::CPPTypeName(uint64_t *a1, const std::string *a2)
{
  return a1;
}

uint64_t sub_216B5CCB8(uint64_t a1, const std::string *a2)
{
  void v9[2] = *MEMORY[0x263EF8340];
  std::string::operator=((std::string *)(a1 + 48), a2);
  if (*(void *)(a1 + 40))
  {
    std::operator+<char>();
    uint64_t v3 = std::string::append(&__p, ">");
    std::string::size_type v4 = v3->__r_.__value_.__r.__words[0];
    v9[0] = v3->__r_.__value_.__l.__size_;
    *(void *)((char *)v9 + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
    char v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*(void **)(a1 + 72));
    }
    uint64_t v6 = v9[0];
    *(void *)(a1 + 72) = v4;
    *(void *)(a1 + 80) = v6;
    *(void *)(a1 + 87) = *(void *)((char *)v9 + 7);
    *(unsigned char *)(a1 + 95) = v5;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

void sub_216B5CDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::Dimensions(uint64_t *a1, __n128 *a2)
{
  uint64_t v2 = *a1;
  __n128 result = *a2;
  *(void *)(v2 + 136) = a2[1].n128_u64[0];
  *(__n128 *)(v2 + 120) = result;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::DefaultUnit(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t v3 = *result;
  *(void *)(v3 + 96) = a2;
  *(_DWORD *)(v3 + 104) = a3;
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::Role(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return this;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type::NoArrays(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *this)
{
  return this;
}

uint64_t sub_216B5CE48(uint64_t a1)
{
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  v4[1] = 0;
  sub_2168ED33C((void *)(a1 + 32), v4);
  sub_2168EE084((uint64_t)v4);
  uint64_t v2 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v2);
  }
  *uint64_t v2 = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::_ValueTypeRegistrar(void *this, pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::AddType(atomic_ullong ***this, const pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ValueTypeRegistrar::Type *a2, char *a3)
{
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SdfSchemaBase(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this)
{
  *((void *)this + 1) = 0;
  *((_OWORD *)this + 1) = 0u;
  *(void *)this = &unk_26C75ABD8;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  uint64_t v2 = (atomic_ullong ***)((char *)this + 920);
  uint64_t v3 = 56;
  do
  {
    std::string::size_type v4 = (char *)this + v3;
    *((void *)v4 + 4) = 0;
    *((void *)v4 + 5) = 0;
    *(_OWORD *)std::string::size_type v4 = 0uLL;
    *((_OWORD *)v4 + 1) = 0uLL;
    *((_DWORD *)v4 + 8) = 1065353216;
    *((void *)v4 + 6) = 0;
    *((void *)v4 + 7) = 0;
    v3 += 72;
    v4[64] = 0;
  }
  while (v4 + 72 != (char *)v2);
  char v5 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *)operator new(8uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::Sdf_ValueTypeRegistry(v5);
  *((void *)this + 115) = v5;
  *((void *)this + 116) = 0;
  *((void *)this + 118) = 0;
  *((void *)this + 117) = 0;
  sub_216B5FDC8((atomic_ullong **)v5, v6);
  sub_216B625B0(*v2, v7);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_RegisterStandardFields(this);
}

void sub_216B5CFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14 = v13;
  operator delete(v14);
  for (uint64_t i = 848; i != -16; i -= 72)
    sub_216B5D048(v11 + i);
  sub_216B6AE6C(v12);
  sub_216859A88(v10, v17);
  _Unwind_Resume(a1);
}

uint64_t sub_216B5D048(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 40);
  sub_216889A04(&v3);
  return sub_2169E3F80(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_RegisterStandardTypes(atomic_ullong ***this, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  return sub_216B5FDC8(this[115], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_RegisterLegacyTypes(atomic_ullong ***this, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  return sub_216B625B0(this[115], a2);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_RegisterStandardFields(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this)
{
  v1[20] = *(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)MEMORY[0x263EF8340];
  v1[0] = this;
  sub_216B63BC8(v1);
}

void sub_216B5F830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_RegisterPluginFields(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  Instance = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(this);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins((uint64_t *)v11, Instance);
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  uint64_t v15 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_UpdateMetadataFromPlugins(this, v11, (uint64_t)v9, (uint64_t)&v13, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_216B710DC(&v13);
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  uint64_t v13 = (void **)v11;
  sub_216850BF4(&v13);
  uint64_t v3 = sub_216B71160(&v13, (uint64_t)this);
  std::string::size_type v4 = (pxrInternal__aapl__pxrReserved__::TfNotice *)sub_216B71244(v3, (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_OnDidRegisterPlugins, 0);
  pxrInternal__aapl__pxrReserved__::TfNotice::_Register(v4, &v7);
  uint64_t v5 = v8;
  if (v8 && atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t result = v14;
  if (v14)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_216B5FB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_216B710DC((void *)(v17 - 56));
  if (a16 < 0) {
    operator delete(__p);
  }
  *(void *)(v17 - 56) = &a17;
  sub_216850BF4((void ***)(v17 - 56));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SdfSchemaBase(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = &unk_26C75ABD8;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  uint64_t v2 = 56;
  do
  {
    uint64_t v3 = a1 + v2;
    *(void *)(v3 + 32) = 0;
    *(void *)(v3 + 40) = 0;
    *(_OWORD *)uint64_t v3 = 0uLL;
    *(_OWORD *)(v3 + 16) = 0uLL;
    *(_DWORD *)(v3 + 32) = 1065353216;
    *(void *)(v3 + 48) = 0;
    *(void *)(v3 + 56) = 0;
    v2 += 72;
    *(unsigned char *)(v3 + 64) = 0;
  }
  while (v3 + 72 != a1 + 920);
  std::string::size_type v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *)operator new(8uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::Sdf_ValueTypeRegistry(v4);
  *(void *)(a1 + 920) = v4;
  *(void *)(a1 + 928) = 0;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 936) = 0;
  return a1;
}

void sub_216B5FCA4(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  operator delete(v5);
  for (uint64_t i = 848; i != -16; i -= 72)
    sub_216B5D048(v1 + i);
  sub_216B6AE6C(v3);
  sub_216859A88(v2, v8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::~SdfSchemaBase(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this)
{
  *(void *)this = &unk_26C75ABD8;
  std::string::size_type v4 = (void **)((char *)this + 928);
  sub_216889A04(&v4);
  sub_216B6FBD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry **)this + 115, 0);
  for (uint64_t i = 0; i != -864; i -= 72)
  {
    std::string::size_type v4 = (void **)((char *)this + i + 888);
    sub_216889A04(&v4);
    sub_2169E3F80((uint64_t)this + i + 848);
  }
  sub_216B6AE6C((uint64_t)this + 16);
  sub_216859A88((uint64_t *)this + 1, v3);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::~SdfSchemaBase(this);

  operator delete(v1);
}

uint64_t sub_216B5FDC8(atomic_ullong **a1, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  unint64_t v99 = (unint64_t)&unk_26C75AC48;
  int v100 = 0;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::SdfDefaultUnit((pxrInternal__aapl__pxrReserved__ *)&v99, a2);
  std::string::size_type v4 = v3;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v5)
  {
    uint64_t v3 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
    uint64_t v5 = v3;
  }
  unint64_t v6 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v6)
  {
    uint64_t v3 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
    unint64_t v6 = (unint64_t)v3;
  }
  unint64_t v7 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v7)
  {
    uint64_t v3 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
    unint64_t v7 = (unint64_t)v3;
  }
  unint64_t v8 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v8)
  {
    uint64_t v3 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
    unint64_t v8 = (unint64_t)v3;
  }
  unint64_t v9 = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v9)
  {
    uint64_t v3 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
    unint64_t v9 = (unint64_t)v3;
  }
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v3);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_26C74C400);
  LOBYTE(v92[0]) = 0;
  sub_216B6AF5C((uint64_t)&v99, (uint64_t)"BOOL", v92);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v11);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v98.__r_.__value_.__s.__data_[0] = 0;
  sub_216B6B144((uint64_t)&v99, (uint64_t)"uchar", &v98);
  sub_216779094(v92, "unsigned char");
  uint64_t v12 = sub_216B5CCB8((uint64_t)&v99, (const std::string *)v92);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v12, v13);
  if (SBYTE7(v93) < 0) {
    operator delete(v92[0]);
  }
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v98.__r_.__value_.__l.__data_) = 0;
  sub_216B6B2A8((uint64_t)&v99, (uint64_t)"int", &v98);
  sub_216779094(v92, "int");
  uint64_t v14 = sub_216B5CCB8((uint64_t)&v99, (const std::string *)v92);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v14, v15);
  if (SBYTE7(v93) < 0) {
    operator delete(v92[0]);
  }
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v98.__r_.__value_.__l.__data_) = 0;
  sub_216B6B40C((uint64_t)&v99, (uint64_t)"uint", &v98);
  sub_216779094(v92, "unsigned int");
  uint64_t v16 = sub_216B5CCB8((uint64_t)&v99, (const std::string *)v92);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v16, v17);
  if (SBYTE7(v93) < 0) {
    operator delete(v92[0]);
  }
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v98.__r_.__value_.__r.__words[0] = 0;
  sub_216B6B570((uint64_t)&v99, (uint64_t)"int64", &v98);
  sub_216779094(v92, "int64_t");
  uint64_t v18 = sub_216B5CCB8((uint64_t)&v99, (const std::string *)v92);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v18, v19);
  if (SBYTE7(v93) < 0) {
    operator delete(v92[0]);
  }
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v98.__r_.__value_.__r.__words[0] = 0;
  sub_216B6B6D0((uint64_t)&v99, (uint64_t)"uint64", &v98);
  sub_216779094(v92, "uint64_t");
  uint64_t v20 = sub_216B5CCB8((uint64_t)&v99, (const std::string *)v92);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v20, v21);
  if (SBYTE7(v93) < 0) {
    operator delete(v92[0]);
  }
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LOWORD(v98.__r_.__value_.__l.__data_) = 0;
  sub_216B6B830((uint64_t)&v99, (uint64_t)"half", &v98);
  sub_216779094(v92, "GfHalf");
  uint64_t v22 = sub_216B5CCB8((uint64_t)&v99, (const std::string *)v92);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v22, v23);
  if (SBYTE7(v93) < 0) {
    operator delete(v92[0]);
  }
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v92[0]) = 0;
  sub_216B6B994((uint64_t)&v99, (uint64_t)"float", v92);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v24);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  sub_216B6BAF8((uint64_t)&v99, (uint64_t)"double", v92);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v25);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  sub_216B6BC5C((uint64_t)&v99, (uint64_t)"timecode", v92);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v26);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  v92[1] = 0;
  *(void *)&long long v93 = 0;
  sub_216B6BDBC((uint64_t)&v99, (uint64_t)"string", (uint64_t)v92);
  sub_216779094(&v98, "std::string");
  uint64_t v27 = sub_216B5CCB8((uint64_t)&v99, &v98);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v27, v28);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SBYTE7(v93) < 0) {
    operator delete(v92[0]);
  }
  v92[0] = 0;
  sub_216B6BF28((uint64_t)&v99, (uint64_t)"token", v92);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v29);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (((uint64_t)v92[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v92[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v92);
  sub_216B6C0A4((uint64_t)&v99, (uint64_t)"asset", (long long *)v92);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v30);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v94) < 0) {
    operator delete(*((void **)&v93 + 1));
  }
  if (SBYTE7(v93) < 0) {
    operator delete(v92[0]);
  }
  sub_216B6C210((uint64_t)&v99, (uint64_t)"opaque");
  uint64_t v31 = sub_216B5CE48((uint64_t)&v99);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v31, v32);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216B6C210((uint64_t)&v99, (uint64_t)"group");
  uint64_t v33 = sub_216B5CE48((uint64_t)&v99);
  uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v34) {
    uint64_t v34 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  sub_2168D2318((void *)(v33 + 112), (void *)v34 + 9);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, v33, v35);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(_OWORD *)uint64_t v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  *(_OWORD *)uint64_t v92 = 0u;
  long long v93 = 0u;
  sub_216B6C368((uint64_t)&v99, (uint64_t)"pathExpression", (uint64_t)v92);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v36);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v97) < 0) {
    operator delete(v96[1]);
  }
  v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
  sub_2169B81EC((void ***)&v98);
  v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93 + 8;
  sub_2169B74B8((void ***)&v98);
  if (v92[0])
  {
    v92[1] = v92[0];
    operator delete(v92[0]);
  }
  v92[0] = 0;
  v92[1] = 0;
  sub_216B6C4D4((uint64_t)&v99, (uint64_t)"double2", v92);
  v110.i64[0] = 2;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v37);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  v92[1] = 0;
  *(void *)&long long v93 = 0;
  sub_216B6C658((uint64_t)&v99, (uint64_t)"double3", (uint64_t)v92);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v38);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(_OWORD *)uint64_t v92 = 0u;
  long long v93 = 0u;
  sub_216B6C7E4((uint64_t)&v99, (uint64_t)"double4", v92);
  v110.i64[0] = 4;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v39);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  sub_216B6C968((uint64_t)&v99, (uint64_t)"float2", v92);
  v110.i64[0] = 2;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v40);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  LODWORD(v92[1]) = 0;
  sub_216B6CAC8((uint64_t)&v99, (uint64_t)"float3", (uint64_t)v92);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v41);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  v92[1] = 0;
  sub_216B6CC54((uint64_t)&v99, (uint64_t)"float4", v92);
  v110.i64[0] = 4;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v42);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v92[0]) = 0;
  sub_216B6CDD8((uint64_t)&v99, (uint64_t)"half2", v92);
  v110.i64[0] = 2;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v43);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v92[0]) = 0;
  WORD2(v92[0]) = 0;
  sub_216B6CF3C((uint64_t)&v99, (uint64_t)"half3", (uint64_t)v92);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v44);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  sub_216B6D0A8((uint64_t)&v99, (uint64_t)"half4", v92);
  v110.i64[0] = 4;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v45);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  sub_216B6D208((uint64_t)&v99, (uint64_t)"int2", v92);
  v110.i64[0] = 2;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v46);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  LODWORD(v92[1]) = 0;
  sub_216B6D368((uint64_t)&v99, (uint64_t)"int3", (uint64_t)v92);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v47);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  v92[1] = 0;
  sub_216B6D4F4((uint64_t)&v99, (uint64_t)"int4", v92);
  v110.i64[0] = 4;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v48);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v92[0]) = 0;
  WORD2(v92[0]) = 0;
  sub_216B6CF3C((uint64_t)&v99, (uint64_t)"point3h", (uint64_t)v92);
  uint64_t v49 = *((void *)v4 + 1);
  uint64_t v107 = *(void *)v4;
  int v108 = v49;
  sub_2168D2318(&v109, v5);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v50);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  LODWORD(v92[1]) = 0;
  sub_216B6CAC8((uint64_t)&v99, (uint64_t)"point3f", (uint64_t)v92);
  uint64_t v51 = *((void *)v4 + 1);
  uint64_t v107 = *(void *)v4;
  int v108 = v51;
  sub_2168D2318(&v109, v5);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v52);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  v92[1] = 0;
  *(void *)&long long v93 = 0;
  sub_216B6C658((uint64_t)&v99, (uint64_t)"point3d", (uint64_t)v92);
  uint64_t v53 = *((void *)v4 + 1);
  uint64_t v107 = *(void *)v4;
  int v108 = v53;
  sub_2168D2318(&v109, v5);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v54);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v92[0]) = 0;
  WORD2(v92[0]) = 0;
  sub_216B6CF3C((uint64_t)&v99, (uint64_t)"vector3h", (uint64_t)v92);
  uint64_t v55 = (void *)(v6 + 16);
  uint64_t v56 = *((void *)v4 + 1);
  uint64_t v107 = *(void *)v4;
  int v108 = v56;
  sub_2168D2318(&v109, v55);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v57);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  LODWORD(v92[1]) = 0;
  sub_216B6CAC8((uint64_t)&v99, (uint64_t)"vector3f", (uint64_t)v92);
  uint64_t v58 = *((void *)v4 + 1);
  uint64_t v107 = *(void *)v4;
  int v108 = v58;
  sub_2168D2318(&v109, v55);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v59);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  v92[1] = 0;
  *(void *)&long long v93 = 0;
  sub_216B6C658((uint64_t)&v99, (uint64_t)"vector3d", (uint64_t)v92);
  uint64_t v60 = *((void *)v4 + 1);
  uint64_t v107 = *(void *)v4;
  int v108 = v60;
  sub_2168D2318(&v109, v55);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v61);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v92[0]) = 0;
  WORD2(v92[0]) = 0;
  sub_216B6CF3C((uint64_t)&v99, (uint64_t)"normal3h", (uint64_t)v92);
  uint64_t v62 = (void *)(v7 + 8);
  uint64_t v63 = *((void *)v4 + 1);
  uint64_t v107 = *(void *)v4;
  int v108 = v63;
  sub_2168D2318(&v109, v62);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v64);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  LODWORD(v92[1]) = 0;
  sub_216B6CAC8((uint64_t)&v99, (uint64_t)"normal3f", (uint64_t)v92);
  uint64_t v65 = *((void *)v4 + 1);
  uint64_t v107 = *(void *)v4;
  int v108 = v65;
  sub_2168D2318(&v109, v62);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v66);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  v92[1] = 0;
  *(void *)&long long v93 = 0;
  sub_216B6C658((uint64_t)&v99, (uint64_t)"normal3d", (uint64_t)v92);
  uint64_t v67 = *((void *)v4 + 1);
  uint64_t v107 = *(void *)v4;
  int v108 = v67;
  sub_2168D2318(&v109, v62);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v68);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v92[0]) = 0;
  WORD2(v92[0]) = 0;
  sub_216B6CF3C((uint64_t)&v99, (uint64_t)"color3h", (uint64_t)v92);
  unint64_t v69 = (void *)(v8 + 24);
  sub_2168D2318(&v109, v69);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v70);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  LODWORD(v92[1]) = 0;
  sub_216B6CAC8((uint64_t)&v99, (uint64_t)"color3f", (uint64_t)v92);
  sub_2168D2318(&v109, v69);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v71);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  v92[1] = 0;
  *(void *)&long long v93 = 0;
  sub_216B6C658((uint64_t)&v99, (uint64_t)"color3d", (uint64_t)v92);
  sub_2168D2318(&v109, v69);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v72);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  sub_216B6D0A8((uint64_t)&v99, (uint64_t)"color4h", v92);
  sub_2168D2318(&v109, v69);
  v110.i64[0] = 4;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v73);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  v92[1] = 0;
  sub_216B6CC54((uint64_t)&v99, (uint64_t)"color4f", v92);
  sub_2168D2318(&v109, v69);
  v110.i64[0] = 4;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v74);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(_OWORD *)uint64_t v92 = 0u;
  long long v93 = 0u;
  sub_216B6C7E4((uint64_t)&v99, (uint64_t)"color4d", v92);
  sub_2168D2318(&v109, v69);
  v110.i64[0] = 4;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v75);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = (void *)0x3C00000000000000;
  sub_216B6D678((uint64_t)&v99, (uint64_t)"quath", v92);
  v110.i64[0] = 4;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v76);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(_OWORD *)uint64_t v92 = xmmword_217453090;
  sub_216B6D7D8((uint64_t)&v99, (uint64_t)"quatf", v92);
  v110.i64[0] = 4;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v77);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  v92[1] = 0;
  *(void *)&long long v93 = 0;
  *((void *)&v93 + 1) = 0x3FF0000000000000;
  sub_216B6D958((uint64_t)&v99, (uint64_t)"quatd", v92);
  v110.i64[0] = 4;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v78);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal((uint64_t)v92, 1.0);
  sub_216B6DAD8((uint64_t)&v99, (uint64_t)"matrix2d", v92);
  int64x2_t v110 = vdupq_n_s64(2uLL);
  uint64_t v111 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v79);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((uint64_t)v92, 1.0);
  sub_216B6DC5C((uint64_t)&v99, (uint64_t)"matrix3d", (uint64_t)v92);
  int64x2_t v110 = vdupq_n_s64(3uLL);
  uint64_t v111 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v80);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v92, 1.0);
  sub_216B6DDF0((uint64_t)&v99, (uint64_t)"matrix4d", v92);
  int64x2_t v110 = vdupq_n_s64(4uLL);
  uint64_t v111 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v81);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v92, 1.0);
  sub_216B6DDF0((uint64_t)&v99, (uint64_t)"frame4d", v92);
  uint64_t v82 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v82) {
    uint64_t v82 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  sub_2168D2318(&v109, (void *)v82 + 4);
  int64x2_t v110 = vdupq_n_s64(4uLL);
  uint64_t v111 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v83);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  sub_216B6C968((uint64_t)&v99, (uint64_t)"texCoord2f", v92);
  uint64_t v84 = (void *)(v9 + 80);
  sub_2168D2318(&v109, v84);
  v110.i64[0] = 2;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v85);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  v92[1] = 0;
  sub_216B6C4D4((uint64_t)&v99, (uint64_t)"texCoord2d", v92);
  sub_2168D2318(&v109, v84);
  v110.i64[0] = 2;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v86);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v92[0]) = 0;
  sub_216B6CDD8((uint64_t)&v99, (uint64_t)"texCoord2h", v92);
  sub_2168D2318(&v109, v84);
  v110.i64[0] = 2;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v87);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  LODWORD(v92[1]) = 0;
  sub_216B6CAC8((uint64_t)&v99, (uint64_t)"texCoord3f", (uint64_t)v92);
  sub_2168D2318(&v109, v84);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v88);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v92[0] = 0;
  v92[1] = 0;
  *(void *)&long long v93 = 0;
  sub_216B6C658((uint64_t)&v99, (uint64_t)"texCoord3d", (uint64_t)v92);
  sub_2168D2318(&v109, v84);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v89);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v92[0]) = 0;
  WORD2(v92[0]) = 0;
  sub_216B6CF3C((uint64_t)&v99, (uint64_t)"texCoord3h", (uint64_t)v92);
  sub_2168D2318(&v109, v84);
  v110.i64[0] = 3;
  uint64_t v111 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v99, v90);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v106 < 0) {
    operator delete(__p);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  sub_2168EE084((uint64_t)v102);
  uint64_t result = sub_2168EE084((uint64_t)v101);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216B623E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
}

uint64_t sub_216B625B0(atomic_ullong **a1, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  unint64_t v56 = (unint64_t)&unk_26C75AC48;
  int v57 = 0;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfDefaultUnit((pxrInternal__aapl__pxrReserved__ *)&v56, a2);
  std::string::size_type v4 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v4) {
    std::string::size_type v4 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v5) {
    uint64_t v5 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v6) {
    unint64_t v6 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  unint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v7) {
    unint64_t v7 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  *(void *)&long long v54 = 0;
  sub_216B6D208((uint64_t)&v56, (uint64_t)"Vec2i", &v54);
  v67.i64[0] = 2;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v8);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v54) = 0;
  sub_216B6CDD8((uint64_t)&v56, (uint64_t)"Vec2h", &v54);
  v67.i64[0] = 2;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v9);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)&long long v54 = 0;
  sub_216B6C968((uint64_t)&v56, (uint64_t)"Vec2f", &v54);
  v67.i64[0] = 2;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v10);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v54 = 0uLL;
  sub_216B6C4D4((uint64_t)&v56, (uint64_t)"Vec2d", &v54);
  v67.i64[0] = 2;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v11);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)&long long v54 = 0;
  DWORD2(v54) = 0;
  sub_216B6D368((uint64_t)&v56, (uint64_t)"Vec3i", (uint64_t)&v54);
  v67.i64[0] = 3;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v12);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v54) = 0;
  WORD2(v54) = 0;
  sub_216B6CF3C((uint64_t)&v56, (uint64_t)"Vec3h", (uint64_t)&v54);
  v67.i64[0] = 3;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v13);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)&long long v54 = 0;
  DWORD2(v54) = 0;
  sub_216B6CAC8((uint64_t)&v56, (uint64_t)"Vec3f", (uint64_t)&v54);
  v67.i64[0] = 3;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v14);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v54 = 0uLL;
  *(void *)&long long v55 = 0;
  sub_216B6C658((uint64_t)&v56, (uint64_t)"Vec3d", (uint64_t)&v54);
  v67.i64[0] = 3;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v15);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v54 = 0uLL;
  sub_216B6D4F4((uint64_t)&v56, (uint64_t)"Vec4i", &v54);
  v67.i64[0] = 4;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v16);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)&long long v54 = 0;
  sub_216B6D0A8((uint64_t)&v56, (uint64_t)"Vec4h", &v54);
  v67.i64[0] = 4;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v17);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v54 = 0uLL;
  sub_216B6CC54((uint64_t)&v56, (uint64_t)"Vec4f", &v54);
  v67.i64[0] = 4;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v18);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v54 = 0u;
  long long v55 = 0u;
  sub_216B6C7E4((uint64_t)&v56, (uint64_t)"Vec4d", &v54);
  v67.i64[0] = 4;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v19);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v54 = 0uLL;
  *(void *)&long long v55 = 0;
  sub_216B6C658((uint64_t)&v56, (uint64_t)"Point", (uint64_t)&v54);
  uint64_t v20 = v3[1];
  uint64_t v64 = *v3;
  int v65 = v20;
  sub_2168D2318(&v66, v4);
  v67.i64[0] = 3;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v21);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)&long long v54 = 0;
  DWORD2(v54) = 0;
  sub_216B6CAC8((uint64_t)&v56, (uint64_t)"PointFloat", (uint64_t)&v54);
  uint64_t v22 = v3[1];
  uint64_t v64 = *v3;
  int v65 = v22;
  sub_2168D2318(&v66, v4);
  v67.i64[0] = 3;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v23);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v54 = 0uLL;
  *(void *)&long long v55 = 0;
  sub_216B6C658((uint64_t)&v56, (uint64_t)"Normal", (uint64_t)&v54);
  uint64_t v24 = (void *)((char *)v6 + 8);
  uint64_t v25 = v3[1];
  uint64_t v64 = *v3;
  int v65 = v25;
  sub_2168D2318(&v66, v24);
  v67.i64[0] = 3;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v26);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)&long long v54 = 0;
  DWORD2(v54) = 0;
  sub_216B6CAC8((uint64_t)&v56, (uint64_t)"NormalFloat", (uint64_t)&v54);
  uint64_t v27 = v3[1];
  uint64_t v64 = *v3;
  int v65 = v27;
  sub_2168D2318(&v66, v24);
  v67.i64[0] = 3;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v28);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v54 = 0uLL;
  *(void *)&long long v55 = 0;
  sub_216B6C658((uint64_t)&v56, (uint64_t)"Vector", (uint64_t)&v54);
  uint64_t v29 = (void *)((char *)v5 + 16);
  uint64_t v30 = v3[1];
  uint64_t v64 = *v3;
  int v65 = v30;
  sub_2168D2318(&v66, v29);
  v67.i64[0] = 3;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v31);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)&long long v54 = 0;
  DWORD2(v54) = 0;
  sub_216B6CAC8((uint64_t)&v56, (uint64_t)"VectorFloat", (uint64_t)&v54);
  uint64_t v32 = v3[1];
  uint64_t v64 = *v3;
  int v65 = v32;
  sub_2168D2318(&v66, v29);
  v67.i64[0] = 3;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v33);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v54 = 0uLL;
  *(void *)&long long v55 = 0;
  sub_216B6C658((uint64_t)&v56, (uint64_t)"Color", (uint64_t)&v54);
  uint64_t v34 = (void *)((char *)v7 + 24);
  sub_2168D2318(&v66, v34);
  v67.i64[0] = 3;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v35);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)&long long v54 = 0;
  DWORD2(v54) = 0;
  sub_216B6CAC8((uint64_t)&v56, (uint64_t)"ColorFloat", (uint64_t)&v54);
  sub_2168D2318(&v66, v34);
  v67.i64[0] = 3;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v36);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)&long long v54 = 0x3C00000000000000;
  sub_216B6D678((uint64_t)&v56, (uint64_t)"Quath", &v54);
  v67.i64[0] = 4;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v37);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v54 = xmmword_217453090;
  sub_216B6D7D8((uint64_t)&v56, (uint64_t)"Quatf", &v54);
  v67.i64[0] = 4;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v38);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v54 = 0uLL;
  *(void *)&long long v55 = 0;
  *((void *)&v55 + 1) = 0x3FF0000000000000;
  sub_216B6D958((uint64_t)&v56, (uint64_t)"Quatd", &v54);
  v67.i64[0] = 4;
  uint64_t v68 = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v39);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal((uint64_t)&v54, 1.0);
  sub_216B6DAD8((uint64_t)&v56, (uint64_t)"Matrix2d", &v54);
  int64x2_t v67 = vdupq_n_s64(2uLL);
  uint64_t v68 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v40);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((uint64_t)&v54, 1.0);
  sub_216B6DC5C((uint64_t)&v56, (uint64_t)"Matrix3d", (uint64_t)&v54);
  int64x2_t v67 = vdupq_n_s64(3uLL);
  uint64_t v68 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v41);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v54, 1.0);
  sub_216B6DDF0((uint64_t)&v56, (uint64_t)"Matrix4d", &v54);
  int64x2_t v67 = vdupq_n_s64(4uLL);
  uint64_t v68 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v42);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v54, 1.0);
  sub_216B6DDF0((uint64_t)&v56, (uint64_t)"Frame", &v54);
  uint64_t v43 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v43) {
    uint64_t v43 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  sub_2168D2318(&v66, (void *)v43 + 4);
  int64x2_t v67 = vdupq_n_s64(4uLL);
  uint64_t v68 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v44);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v54, 1.0);
  sub_216B6DDF0((uint64_t)&v56, (uint64_t)"Transform", &v54);
  uint64_t v45 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v45) {
    uint64_t v45 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  sub_2168D2318(&v66, (void *)v45 + 5);
  int64x2_t v67 = vdupq_n_s64(4uLL);
  uint64_t v68 = 2;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v46);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v54) = 0;
  sub_216B6B2A8((uint64_t)&v56, (uint64_t)"PointIndex", &v54);
  uint64_t v47 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v47) {
    uint64_t v47 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  sub_2168D2318(&v66, (void *)v47 + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v48);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v54) = 0;
  sub_216B6B2A8((uint64_t)&v56, (uint64_t)"EdgeIndex", &v54);
  uint64_t v49 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v49) {
    uint64_t v49 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  sub_2168D2318(&v66, (void *)v49 + 7);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v50);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(v54) = 0;
  sub_216B6B2A8((uint64_t)&v56, (uint64_t)"FaceIndex", &v54);
  uint64_t v51 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  if (!v51) {
    uint64_t v51 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
  }
  sub_2168D2318(&v66, (void *)v51 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t)&v56, v52);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v63 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v60);
  }
  sub_2168EE084((uint64_t)v59);
  uint64_t result = sub_2168EE084((uint64_t)v58);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_216B63B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_216B63BC8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2) {
    uint64_t v2 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B6FC10(a1, v2);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    uint64_t v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B6FCA0(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 8));
  std::string::size_type v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    std::string::size_type v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B6FD98(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 16));
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5) {
    uint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B6FE5C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 24));
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    unint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B6FF3C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 32));
  unint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    unint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B6FF3C(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 40));
  unint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8) {
    unint64_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B6FFC8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 48));
  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys)) {
    sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216B70098();
}

void *sub_216B64600(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, unsigned char *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unint64_t v6 = &unk_26C7501AB;
  v5[0] = *a3;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  sub_2168EE084((uint64_t)v5);
  return v3;
}

void sub_216B64680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B64694(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  v7[2] = *MEMORY[0x263EF8340];
  v7[1] = off_26C755978;
  sub_2168F8DBC(v7, a3);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B64724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B64740(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const void ****a3)
{
  v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C74DD80;
  sub_2168EEEA8(v7, a3);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B647D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_216B647EC@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_21695C360(a1))
  {
    uint64_t v4 = sub_21695A928(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidIdentifier(v4, a2);
  }
  else
  {
    sub_216779094(&v6, "Expected value of type std::string");
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

void *sub_216B6487C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  v7[2] = *MEMORY[0x263EF8340];
  v7[1] = &off_26C758890;
  sub_216A9EC50(v7, a3);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B6490C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B64928(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, long long *a3)
{
  v7[2] = *MEMORY[0x263EF8340];
  v7[1] = &off_26C755A30;
  sub_2169B3DA8(v7, a3);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B649B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B649D4(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t *a3)
{
  v7[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a3;
  v7[0] = v3;
  v7[1] = (char *)&off_26C750C70 + 1;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)(v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      v7[0] = v4;
    }
  }
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B64A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B64A80(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, char *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  sub_216B70FDC((uint64_t)v7, a3);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B64B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B64B24(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C754E58;
  sub_216982A54(v7, a3);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B64BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_216B64BD0@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_216994F90(a1))
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_216995078(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidAttributeConnectionPath(v4, a2);
  }
  else
  {
    sub_216779094(&v6, "Expected value of type SdfPath");
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v5 = sub_2168CB1F4((void *)this + 2, a2);
  uint64_t v7 = v5;
  if (!v5)
  {
    uint64_t v28 = "sdf/schema.cpp";
    uint64_t v29 = "_DoRegisterField";
    uint64_t v30 = 1050;
    uint64_t v31 = "SdfSchemaBase::FieldDefinition &pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(const TfToke"
          "n &, const VtValue &)";
    char v32 = 0;
    int v33 = 4;
    unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      uint64_t v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0) {
        uint64_t v9 = *(const char **)v9;
      }
    }
    else
    {
      uint64_t v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v28, (pxrInternal__aapl__pxrReserved__ *)"Field '%s' has not been created.", v6, v9);
  }
  uint64_t Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 5));
  uint64_t v11 = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a3);
  if (strcmp((const char *)(*(void *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v11 + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    uint64_t v28 = "sdf/schema.cpp";
    uint64_t v29 = "_DoRegisterField";
    uint64_t v30 = 1060;
    uint64_t v31 = "SdfSchemaBase::FieldDefinition &pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(const TfToke"
          "n &, const VtValue &)";
    char v32 = 0;
    int v33 = 4;
    unint64_t v14 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      uint64_t v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        uint64_t v15 = *(const char **)v15;
      }
    }
    else
    {
      uint64_t v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 5), v12, v13, (uint64_t)v26);
    int v16 = v27;
    uint64_t v17 = (void **)v26[0];
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v18, v19, (uint64_t)__p);
    if (v16 >= 0) {
      uint64_t v21 = v26;
    }
    else {
      uint64_t v21 = v17;
    }
    if (v25 >= 0) {
      uint64_t v22 = __p;
    }
    else {
      uint64_t v22 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v28, (pxrInternal__aapl__pxrReserved__ *)"Registered fallback value for field '%s' does not match field type definition. (expected: %s, got: %s)", v20, v15, v21, v22);
  }
  sub_2168EC6DC(v7 + 5, a3);
  return v7 + 3;
}

void sub_216B64E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216B64E54(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  v7[2] = *MEMORY[0x263EF8340];
  v7[1] = off_26C7558C0;
  sub_2168F8DBC(v7, a3);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B64EE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B64F00(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _OWORD *a3)
{
  void v9[2] = *MEMORY[0x263EF8340];
  v9[1] = &off_26C757FE0;
  long long v6 = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)long long v6 = *a3;
  atomic_store(0, v6 + 4);
  v9[0] = v6;
  atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 4, 1u, memory_order_relaxed);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  sub_2168EE084((uint64_t)v9);
  return v7;
}

void sub_216B64FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B64FC8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3)
{
  v5[2] = *MEMORY[0x263EF8340];
  v5[1] = &unk_26C750B03;
  v5[0] = *a3;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  sub_2168EE084((uint64_t)v5);
  return v3;
}

void sub_216B65048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B6505C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  long long v6 = &unk_26C750543;
  int v5 = *a3;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  sub_2168EE084((uint64_t)&v5);
  return v3;
}

void sub_216B650DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_216B650F0@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_21691CE68(a1))
  {
    BOOL v4 = *(double *)sub_21691CEA0(a1) > 0.0;
    sub_216B6E124(a2, v4, "Value must be greater than 0");
  }
  else
  {
    sub_216779094(&v6, "Expected value of type double");
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

double sub_216B65190@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_216994F90(a1))
  {
    BOOL v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_216995078(a1);
    return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidInheritPath(v4, a2);
  }
  else
  {
    sub_216779094(&v6, "Expected value of type SdfPath");
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

void *sub_216B6521C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t **a3)
{
  v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C756C08;
  sub_2169DBAB4(v7, a3);
  int v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B652AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216B652C8(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_21695DC44(a1))
  {
    BOOL v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21695C470(a1);
    if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    }
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidIdentifier((uint64_t)EmptyString, a2);
  }
  else
  {
    sub_216779094(&v6, "Expected value of type TfToken");
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
}

void *sub_216B6536C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C756A98;
  sub_2169DABAC(v7, a3);
  int v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B653FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_216B65418@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_216B6E1CC(a1))
  {
    uint64_t v4 = sub_216B6E258(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidPayload(v4, a2);
  }
  else
  {
    sub_216779094(&v6, "Expected value of type SdfPayload");
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

void *sub_216B654A4(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  long long v6 = (char *)&off_26C759D30 + 3;
  int v5 = *a3;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  sub_2168EE084((uint64_t)&v5);
  return v3;
}

void sub_216B65524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216B65538(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, std::string *a2@<X8>)
{
  sub_216B65620(a1, (uint64_t)a2);
  if (!a2[1].__r_.__value_.__s.__data_[0])
  {
    uint64_t v4 = sub_21695A928(a1);
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *(void *)(v4 + 8);
    }
    if (!v5)
    {
      sub_216779094(&v8, "Expected non-empty string");
      std::string __p = v8;
      char v7 = 1;
      sub_216B6E498(a2, &__p);
      if (v7)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
}

void sub_216B655DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15 && a14 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v15 + 24))
  {
    if (*(char *)(v15 + 23) < 0) {
      operator delete(*(void **)v15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B65620@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = sub_21695C360(a1);
  if (result)
  {
    char v4 = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_216779094(&v5, "Expected value of type string");
    *(_OWORD *)a2 = v5;
    *(void *)(a2 + 16) = v6;
    char v4 = 1;
  }
  *(unsigned char *)(a2 + 24) = v4;
  return result;
}

void sub_216B65688(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_21695DC44(a1))
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21695C470(a1);
    if ((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    }
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidNamespacedIdentifier((size_t *)EmptyString, a2);
  }
  else
  {
    sub_216779094(&v6, "Expected value of type TfToken");
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
}

void *sub_216B6572C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C7569E0;
  sub_2169D7F48(v7, a3);
  long long v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B657BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_216B657D8@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_216B6E53C(a1))
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_216B6E5C8(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidReference(v4, a2);
  }
  else
  {
    sub_216779094(&v6, "Expected value of type SdfReference");
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

double sub_216B65864@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_216994F90(a1))
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_216995078(a1);
    return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidSpecializesPath(v4, a2);
  }
  else
  {
    sub_216779094(&v6, "Expected value of type SdfPath");
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

double sub_216B658F0@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_216994F90(a1))
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_216995078(a1);
    return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelationshipTargetPath(v4, a2);
  }
  else
  {
    sub_216779094(&v6, "Expected value of type SdfPath");
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

void *sub_216B6597C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  v7[2] = *MEMORY[0x263EF8340];
  v7[1] = &off_26C7584A0;
  sub_216A9AFA0(v7, a3);
  long long v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B65A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_216B65A28@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_216994F90(a1))
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_216995078(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelocatesPath(v4, a2);
  }
  else
  {
    sub_216779094(&v6, "Expected value of type SdfPath");
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

void *sub_216B65AB4(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  long long v6 = (char *)&off_26C758118 + 3;
  int v5 = *a3;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  sub_2168EE084((uint64_t)&v5);
  return v3;
}

void sub_216B65B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B65B48(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, long long **a3)
{
  v7[2] = *MEMORY[0x263EF8340];
  v7[1] = &off_26C756898;
  sub_2169CBC44(v7, a3);
  int v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B65BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_216B65BF4@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_21695C360(a1))
  {
    uint64_t v4 = sub_21695A928(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidSubLayer(v4, a2);
  }
  else
  {
    sub_216779094(&v6, "Expected value of type std::string");
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

void *sub_216B65C80(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C7567E0;
  sub_2169CB460(v7, a3);
  int v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B65D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B65D2C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C756B50;
  sub_2169DB6A8(v7, a3);
  int v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B65DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B65DD8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const void ***a3)
{
  v7[2] = *MEMORY[0x263EF8340];
  v7[1] = &off_26C756CD0;
  sub_2169DC07C(v7, a3);
  int v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B65E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_216B65E84@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_21695C360(a1))
  {
    uint64_t v4 = (long long *)sub_21695A928(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantSelection(v4, (unsigned char *)a2);
  }
  else
  {
    sub_216779094(&v6, "Expected value of type std::string");
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

void *sub_216B65F10(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  long long v6 = (char *)&off_26C756E60 + 3;
  int v5 = *a3;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  sub_2168EE084((uint64_t)&v5);
  return v3;
}

void sub_216B65F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_216B65FA4(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _DWORD **a3)
{
  v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C756D88;
  sub_2169DC54C(v7, a3);
  int v5 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_DoRegisterField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_216B66034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_216B66050@<D0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X1>, uint64_t a2@<X8>)
{
  if (sub_21695C360(a1))
  {
    uint64_t v4 = (long long *)sub_21695A928(a1);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier(v4, a2);
  }
  else
  {
    sub_216779094(&v6, "Expected value of type std::string");
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_UpdateMetadataFromPlugins(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = a5;
  uint64_t v193 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B910C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B910C0))
  {
    sub_216779094(qword_267B910A8, "SdfMetadata");
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267B910A8, &dword_216758000);
    __cxa_guard_release(&qword_267B910C0);
    uint64_t v7 = a5;
  }
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8) {
    uint64_t v9 = (const void **)a3;
  }
  else {
    uint64_t v9 = (const void **)qword_267B910A8;
  }
  v7[1] = 0;
  v7[2] = 0;
  *uint64_t v7 = 0;
  uint64_t v10 = *a2;
  uint64_t v160 = a2[1];
  unint64_t v161 = v9;
  if (*a2 != v160)
  {
    while (1)
    {
      v172[0] = 0;
      v172[1] = 0;
      char v171 = (uint64_t *)v172;
      uint64_t v11 = (const void ***)sub_2168E5D78(v10);
      pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata(v11, v170);
      BOOL v12 = sub_2169734C4((uint64_t)v170, v161, &v171);
      uint64_t v13 = v171;
      if (v171 != (uint64_t *)v172 && v12) {
        break;
      }
LABEL_369:
      sub_216812ED4((uint64_t)v170, (void *)v170[1]);
      sub_216812ED4((uint64_t)&v171, v172[0]);
      v10 += 2;
      if (v10 == v160) {
        return;
      }
    }
    while (1)
    {
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v169);
      v168[0] = 0;
      v168[1] = 0;
      long long v167 = (uint64_t *)v168;
      if ((v169 & 0xFFFFFFFFFFFFFFF8) != 0) {
        Emptyunint64_t String = (uint64_t *)((v169 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      }
      if (!sub_2169734C4((uint64_t)&v171, (const void **)EmptyString, &v167))
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_UpdateMetadataFromPlugins";
        __dst.__r_.__value_.__r.__words[2] = 1707;
        unint64_t v189 = "const std::vector<const SdfSchemaBase::FieldDefinition *> pxrInternal__aapl__pxrReserved__::SdfSchemaBase"
               "::_UpdateMetadataFromPlugins(const PlugPluginPtrVector &, const std::string &, const _DefaultValueFactoryFn &)";
        LOBYTE(v190) = 0;
        unint64_t v19 = v169 & 0xFFFFFFFFFFFFFFF8;
        if ((v169 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v20 = (const char *)(v19 + 16);
          if (*(char *)(v19 + 39) < 0) {
            uint64_t v20 = *(const char **)v20;
          }
        }
        else
        {
          uint64_t v20 = "";
        }
        uint64_t v21 = sub_2168E5D78(v10);
        uint64_t v22 = (const char *)(v21 + 32);
        if (*(char *)(v21 + 55) < 0) {
          uint64_t v22 = *(const char **)v22;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Value must be a dictionary (at \"%s\" in plugin \"%s\")", v20, v22);
        goto LABEL_315;
      }
      memset(&v166, 0, sizeof(v166));
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216B69B78();
      if ((*((void *)v17 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v18 = (uint64_t *)((*((void *)v17 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
      }
      if (!sub_216B69AE0(&v167, (const void **)v18, &v166))
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_UpdateMetadataFromPlugins";
        __dst.__r_.__value_.__r.__words[2] = 1716;
        unint64_t v189 = "const std::vector<const SdfSchemaBase::FieldDefinition *> pxrInternal__aapl__pxrReserved__::SdfSchemaBase"
               "::_UpdateMetadataFromPlugins(const PlugPluginPtrVector &, const std::string &, const _DefaultValueFactoryFn &)";
        LOBYTE(v190) = 0;
        unint64_t v25 = v169 & 0xFFFFFFFFFFFFFFF8;
        if ((v169 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v26 = (const char *)(v25 + 16);
          if (*(char *)(v25 + 39) < 0) {
            uint64_t v26 = *(const char **)v26;
          }
        }
        else
        {
          uint64_t v26 = "";
        }
        uint64_t v27 = sub_2168E5D78(v10);
        uint64_t v28 = (const char *)(v27 + 32);
        if (*(char *)(v27 + 55) < 0) {
          uint64_t v28 = *(const char **)v28;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not read a string for \"type\" (at \"%s\" in plugin \"%s\")", v26, v28);
        goto LABEL_313;
      }
      if (sub_2168CB120((void *)a1 + 2, &v169))
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_UpdateMetadataFromPlugins";
        __dst.__r_.__value_.__r.__words[2] = 1724;
        unint64_t v189 = "const std::vector<const SdfSchemaBase::FieldDefinition *> pxrInternal__aapl__pxrReserved__::SdfSchemaBase"
               "::_UpdateMetadataFromPlugins(const PlugPluginPtrVector &, const std::string &, const _DefaultValueFactoryFn &)";
        LOBYTE(v190) = 0;
        unint64_t v23 = v169 & 0xFFFFFFFFFFFFFFF8;
        if ((v169 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v24 = (const char *)(v23 + 16);
          if (*(char *)(v23 + 39) < 0) {
            uint64_t v24 = *(const char **)v24;
          }
        }
        else
        {
          uint64_t v24 = "";
        }
        uint64_t v31 = sub_2168E5D78(v10);
        char v32 = (const char *)(v31 + 32);
        if (*(char *)(v31 + 55) < 0) {
          char v32 = *(const char **)v32;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"\"%s\" is already a registered field (in plugin \"%s\")", v24, v32);
        goto LABEL_313;
      }
      uint64_t v185 = 0;
      uint64_t v29 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216B69B78();
      uint64_t v30 = (*(void *)v29 & 0xFFFFFFFFFFFFFFF8) != 0
          ? (const void **)((*(void *)v29 & 0xFFFFFFFFFFFFFFF8) + 16)
          : (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&__dst);
      uint64_t v33 = sub_21678C2D8((uint64_t)&v167, v30);
      if (v168 == (void **)v33) {
        break;
      }
      std::string::size_type v34 = *(void *)(v33 + 64);
      *(void *)&long long v165 = *(void *)(v33 + 56);
      *((void *)&v165 + 1) = v34;
      if (v34) {
        goto LABEL_49;
      }
LABEL_50:
      if (__dst.__r_.__value_.__l.__size_) {
        sub_216784EC4((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
      }
LABEL_52:
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v164);
      if ((*((unsigned char *)&v166.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (v166.__r_.__value_.__l.__size_ != 10)
        {
          if (v166.__r_.__value_.__l.__size_ != 9)
          {
            if (v166.__r_.__value_.__l.__size_ != 11)
            {
              if (v166.__r_.__value_.__l.__size_ == 12)
              {
                if (*(void *)v166.__r_.__value_.__l.__data_ == 0x696C3436746E6975
                  && *(_DWORD *)(v166.__r_.__value_.__r.__words[0] + 8) == 1886352499)
                {
LABEL_165:
                  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp();
                }
                if (*(void *)v166.__r_.__value_.__l.__data_ == 0x696C676E69727473
                  && *(_DWORD *)(v166.__r_.__value_.__r.__words[0] + 8) == 1886352499)
                {
LABEL_100:
                  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
                }
              }
              goto LABEL_130;
            }
            uint64_t v44 = (std::string *)v166.__r_.__value_.__r.__words[0];
            if (*(void *)v166.__r_.__value_.__l.__data_ == 0x73696C3436746E69
              && *(void *)(v166.__r_.__value_.__r.__words[0] + 3) == 0x706F7473696C3436)
            {
LABEL_125:
              pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp();
            }
LABEL_119:
            std::string::size_type v47 = v44->__r_.__value_.__r.__words[0];
            uint64_t v48 = *(std::string::size_type *)((char *)v44->__r_.__value_.__r.__words + 3);
            if (v47 == 0x73696C6E656B6F74 && v48 == 0x706F7473696C6E65) {
              pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
            }
            goto LABEL_130;
          }
          if (*(void *)v166.__r_.__value_.__l.__data_ == 0x6F7473696C746E69
            && *(unsigned char *)(v166.__r_.__value_.__r.__words[0] + 8) == 112)
          {
LABEL_164:
            pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp();
          }
LABEL_130:
          uint64_t v187 = 0;
          uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType((uint64_t)a1);
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type))
          {
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
            __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetDefaultMetadataValue";
            __dst.__r_.__value_.__r.__words[2] = 1673;
            unint64_t v189 = "VtValue pxrInternal__aapl__pxrReserved__::_GetDefaultMetadataValue(const SdfSchemaBase &, const std::"
                   "string &, const JsValue &)";
            LOBYTE(v190) = 0;
            uint64_t v51 = &v166;
            if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v51 = (std::string *)v166.__r_.__value_.__r.__words[0];
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"\"%s\" is not a registered value type", (const char *)v51);
            long long v183 = 0;
            goto LABEL_166;
          }
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v165))
          {
            DefaultValue = (void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDefaultValue((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
            sub_2168EE4C4(&v182, DefaultValue);
LABEL_166:
            sub_2168EE084((uint64_t)v186);
            goto LABEL_167;
          }
          v173[0] = 0;
          v173[1] = 0;
          uint64_t v174 = 0;
          long long v177 = 0u;
          long long v178 = 0u;
          int64x2_t v176 = 0u;
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v165))
          {
            unint64_t JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&v165);
            long long v55 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
            long long v54 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
            while (v55 != v54)
            {
              if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v55)) {
                goto LABEL_141;
              }
              long long v55 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v55 + 16);
            }
            uint64_t v58 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&v165);
            sub_216782DE0(&v180, (v58[1] - *v58) >> 4);
            uint64_t v59 = *v58;
            uint64_t v60 = v58[1];
            if (*v58 != v60)
            {
              uint64_t v61 = v180;
              do
              {
                unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v59);
                if (*(char *)(String + 23) < 0)
                {
                  sub_216778F24(&__dst, *(void **)String, *(void *)(String + 8));
                }
                else
                {
                  long long v63 = *(_OWORD *)String;
                  __dst.__r_.__value_.__r.__words[2] = *(void *)(String + 16);
                  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v63;
                }
                if (*(char *)(v61 + 23) < 0) {
                  operator delete(*(void **)v61);
                }
                long long v64 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                *(void *)(v61 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
                *(_OWORD *)uint64_t v61 = v64;
                v61 += 24;
                uint64_t v59 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v59 + 16);
              }
              while (v59 != v60);
            }
            uint64_t v66 = (long long *)*((void *)&v180 + 1);
            for (uint64_t i = (long long *)v180; i != v66; uint64_t i = (long long *)((char *)i + 24))
            {
              if (*((char *)i + 23) < 0)
              {
                sub_216778F24(&__dst, *(void **)i, *((void *)i + 1));
              }
              else
              {
                long long v67 = *i;
                __dst.__r_.__value_.__r.__words[2] = *((void *)i + 2);
                *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v67;
              }
              int v191 = 3;
              sub_216B6EE2C(&v176, (uint64_t)&__dst);
              sub_216976F30((uint64_t)&__dst);
            }
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
            sub_216782F20((void ***)&__dst);
LABEL_327:
            pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Sdf_ParserValueContext((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)&__dst);
            if (pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory((uint64_t)&__dst, &v166))
            {
              if (v192) {
                pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::BeginList((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)&__dst);
              }
              while (*((void *)&v178 + 1))
                sub_216B6ECB8(&v176, (uint64_t)&__dst, 0);
              if (v192) {
                pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::EndList((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)&__dst);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue((uint64_t)&__dst, (const char *)v173, v141, &v182);
            }
            else
            {
              unint64_t v142 = &v166;
              if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                unint64_t v142 = (std::string *)v166.__r_.__value_.__r.__words[0];
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\"%s\" is not a valid type", v140, v141, v142);
              if (SHIBYTE(v174) < 0) {
                operator delete(v173[0]);
              }
              *(_OWORD *)unint64_t v173 = v180;
              uint64_t v174 = v181;
              long long v183 = 0;
            }
            sub_2169CC3E0((uint64_t)&__dst);
LABEL_341:
            sub_216B6F2E0(&v176);
            if (!v183)
            {
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
              __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetDefaultMetadataValue";
              __dst.__r_.__value_.__r.__words[2] = 1666;
              unint64_t v189 = "VtValue pxrInternal__aapl__pxrReserved__::_GetDefaultMetadataValue(const SdfSchemaBase &, const std"
                     "::string &, const JsValue &)";
              LOBYTE(v190) = 0;
              long long v143 = v173;
              if (v174 < 0) {
                long long v143 = (void **)v173[0];
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not parse default value: %s", (const char *)v143);
            }
            if (SHIBYTE(v174) < 0) {
              operator delete(v173[0]);
            }
            goto LABEL_166;
          }
LABEL_141:
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)&v165))
          {
            unint64_t v56 = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)&v165);
            if (*(char *)(v56 + 23) < 0)
            {
              sub_216778F24(&__dst, *(void **)v56, *(void *)(v56 + 8));
            }
            else
            {
              long long v57 = *(_OWORD *)v56;
              __dst.__r_.__value_.__r.__words[2] = *(void *)(v56 + 16);
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v57;
            }
            int v191 = 3;
            sub_216B6EE2C(&v176, (uint64_t)&__dst);
            goto LABEL_326;
          }
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v165))
          {
            unint64_t v68 = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&v165);
            unint64_t v70 = *(pxrInternal__aapl__pxrReserved__::JsValue **)v68;
            uint64_t v69 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(v68 + 8);
            while (v70 != v69)
            {
              if (!pxrInternal__aapl__pxrReserved__::JsValue::IsInt(v70)) {
                goto LABEL_189;
              }
              unint64_t v70 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v70 + 16);
            }
            long long v144 = (uint64_t ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&v165);
            sub_2167816FC(&v180, ((char *)v144[1] - (char *)*v144) >> 4);
            unint64_t v146 = *v144;
            unint64_t v145 = v144[1];
            if (*v144 != v145)
            {
              long long v147 = (_DWORD *)v180;
              do
              {
                *v147++ = pxrInternal__aapl__pxrReserved__::JsValue::GetInt(v146);
                v146 += 2;
              }
              while (v146 != v145);
            }
            unint64_t v148 = (std::string::size_type *)*((void *)&v180 + 1);
            unint64_t v149 = (std::string::size_type *)v180;
            if ((void)v180 != *((void *)&v180 + 1))
            {
              do
              {
                uint64_t v150 = *(int *)v149;
                __dst.__r_.__value_.__r.__words[0] = 0;
                int v191 = 0;
                uint64_t v179 = v150;
                sub_216976FD0((uint64_t)&__dst, &v179);
                sub_216B6EE2C(&v176, (uint64_t)&__dst);
                sub_216976F30((uint64_t)&__dst);
                unint64_t v149 = (std::string::size_type *)((char *)v149 + 4);
              }
              while (v149 != v148);
LABEL_365:
              unint64_t v149 = (std::string::size_type *)v180;
            }
            goto LABEL_366;
          }
LABEL_189:
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsInt((pxrInternal__aapl__pxrReserved__::JsValue *)&v165))
          {
            int Int = pxrInternal__aapl__pxrReserved__::JsValue::GetInt((uint64_t **)&v165);
            __dst.__r_.__value_.__r.__words[0] = 0;
            int v191 = 0;
            *(void *)&long long v180 = Int;
            sub_216976FD0((uint64_t)&__dst, &v180);
            sub_216B6EE2C(&v176, (uint64_t)&__dst);
          }
          else
          {
            if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v165))
            {
              unint64_t v151 = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&v165);
              unint64_t v153 = *(pxrInternal__aapl__pxrReserved__::JsValue **)v151;
              unint64_t v152 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(v151 + 8);
              while (v153 != v152)
              {
                if (!pxrInternal__aapl__pxrReserved__::JsValue::IsReal(v153)) {
                  goto LABEL_358;
                }
                unint64_t v153 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v153 + 16);
              }
              long long v154 = (uint64_t ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)&v165);
              sub_21678275C(&v180, ((char *)v154[1] - (char *)*v154) >> 4);
              int v156 = *v154;
              uint64_t v155 = v154[1];
              if (*v154 != v155)
              {
                unint64_t v157 = (double *)v180;
                do
                {
                  *v157++ = pxrInternal__aapl__pxrReserved__::JsValue::GetReal(v156);
                  v156 += 2;
                }
                while (v156 != v155);
              }
              unint64_t v158 = (std::string::size_type *)*((void *)&v180 + 1);
              unint64_t v149 = (std::string::size_type *)v180;
              if ((void)v180 != *((void *)&v180 + 1))
              {
                do
                {
                  __dst.__r_.__value_.__r.__words[0] = *v149;
                  int v191 = 2;
                  sub_216B6EE2C(&v176, (uint64_t)&__dst);
                  sub_216976F30((uint64_t)&__dst);
                  ++v149;
                }
                while (v149 != v158);
                goto LABEL_365;
              }
LABEL_366:
              if (v149)
              {
                *((void *)&v180 + 1) = v149;
                operator delete(v149);
              }
              goto LABEL_327;
            }
LABEL_358:
            if (!pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)&v165))
            {
              MEMORY[0x21D4477E0](v173, "Value was not a string, an int, a double, or a vector of those types");
              long long v183 = 0;
              goto LABEL_341;
            }
            __dst.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::JsValue::GetReal((uint64_t **)&v165);
            int v191 = 2;
            sub_216B6EE2C(&v176, (uint64_t)&__dst);
          }
LABEL_326:
          sub_216976F30((uint64_t)&__dst);
          goto LABEL_327;
        }
        if (*(void *)v166.__r_.__value_.__l.__data_ != 0x616E6F6974636964
          || *(_WORD *)(v166.__r_.__value_.__r.__words[0] + 8) != 31090)
        {
          if (*(void *)v166.__r_.__value_.__l.__data_ == 0x7473696C746E6975
            && *(_WORD *)(v166.__r_.__value_.__r.__words[0] + 8) == 28783)
          {
LABEL_74:
            pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp();
          }
          goto LABEL_130;
        }
      }
      else
      {
        if (HIBYTE(v166.__r_.__value_.__r.__words[2]) != 10)
        {
          if (HIBYTE(v166.__r_.__value_.__r.__words[2]) != 9)
          {
            if (HIBYTE(v166.__r_.__value_.__r.__words[2]) != 11)
            {
              if (HIBYTE(v166.__r_.__value_.__r.__words[2]) == 12)
              {
                if (v166.__r_.__value_.__r.__words[0] == 0x696C3436746E6975
                  && LODWORD(v166.__r_.__value_.__r.__words[1]) == 1886352499)
                {
                  goto LABEL_165;
                }
                if (v166.__r_.__value_.__r.__words[0] == 0x696C676E69727473
                  && LODWORD(v166.__r_.__value_.__r.__words[1]) == 1886352499)
                {
                  goto LABEL_100;
                }
              }
              goto LABEL_130;
            }
            if (v166.__r_.__value_.__r.__words[0] == 0x73696C3436746E69
              && *(std::string::size_type *)((char *)v166.__r_.__value_.__r.__words + 3) == 0x706F7473696C3436)
            {
              goto LABEL_125;
            }
            uint64_t v44 = &v166;
            goto LABEL_119;
          }
          if (v166.__r_.__value_.__r.__words[0] == 0x6F7473696C746E69 && v166.__r_.__value_.__s.__data_[8] == 112) {
            goto LABEL_164;
          }
          goto LABEL_130;
        }
        BOOL v35 = v166.__r_.__value_.__r.__words[0] == 0x616E6F6974636964
           && LOWORD(v166.__r_.__value_.__r.__words[1]) == 31090;
        if (!v35)
        {
          if (v166.__r_.__value_.__r.__words[0] == 0x7473696C746E6975
            && LOWORD(v166.__r_.__value_.__r.__words[1]) == 28783)
          {
            goto LABEL_74;
          }
          goto LABEL_130;
        }
      }
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v165))
      {
        __dst.__r_.__value_.__r.__words[0] = 0;
        long long v183 = &off_26C74DD80;
        sub_2168EEEA8(&v182, (const void ****)&__dst);
        sub_2168EBBB8(&__dst, 0);
      }
      else
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_GetDefaultMetadataValue";
        __dst.__r_.__value_.__r.__words[2] = 1636;
        unint64_t v189 = "VtValue pxrInternal__aapl__pxrReserved__::_GetDefaultMetadataValue(const SdfSchemaBase &, const std::stri"
               "ng &, const JsValue &)";
        LOBYTE(v190) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Default values are not allowed on fields of type \"dictionary\", which will always default to an empty dictionary.");
        long long v183 = 0;
      }
LABEL_167:
      sub_2168ED33C(&v184, &v182);
      sub_2168EE084((uint64_t)&v182);
      if (v185
        || (uint64_t v75 = *(void *)(a4 + 24)) != 0
        && ((*(void (**)(std::string *__return_ptr))(*(void *)v75 + 48))(&__dst),
            sub_2168ED33C(&v184, &__dst),
            sub_2168EE084((uint64_t)&__dst),
            v185))
      {
        uint64_t v71 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v71) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        uint64_t v72 = sub_216862604(&v164, 0);
        __dst.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v73 = (void *)sub_2168520EC(v71 + 19, &__dst);
        if (v73 != v72) {
          pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v71, v72, v73);
        }
        char v74 = 0;
      }
      else
      {
        unint64_t v76 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v76) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        unint64_t v77 = v164;
        unint64_t v78 = atomic_load((unint64_t *)(v76 + 144));
        if (v77 >= v78
          || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v164, (atomic_ullong *)v76))
        {
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_UpdateMetadataFromPlugins";
          __dst.__r_.__value_.__r.__words[2] = 1755;
          unint64_t v189 = "const std::vector<const SdfSchemaBase::FieldDefinition *> pxrInternal__aapl__pxrReserved__::SdfSchemaBa"
                 "se::_UpdateMetadataFromPlugins(const PlugPluginPtrVector &, const std::string &, const _DefaultValueFactoryFn &)";
          LOBYTE(v190) = 0;
          unint64_t v79 = v169 & 0xFFFFFFFFFFFFFFF8;
          if ((v169 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v80 = (const char *)(v79 + 16);
            if (*(char *)(v79 + 39) < 0) {
              uint64_t v80 = *(const char **)v80;
            }
          }
          else
          {
            uint64_t v80 = "";
          }
          uint64_t v81 = sub_2168E5D78(v10);
          uint64_t v82 = (const char *)(v81 + 32);
          if (*(char *)(v81 + 55) < 0) {
            uint64_t v82 = *(const char **)v82;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"No default value for metadata (at \"%s\" in plugin \"%s\")", v80, v82);
        }
        else
        {
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/schema.cpp";
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)"_UpdateMetadataFromPlugins";
          __dst.__r_.__value_.__r.__words[2] = 1761;
          unint64_t v189 = "const std::vector<const SdfSchemaBase::FieldDefinition *> pxrInternal__aapl__pxrReserved__::SdfSchemaBa"
                 "se::_UpdateMetadataFromPlugins(const PlugPluginPtrVector &, const std::string &, const _DefaultValueFactoryFn &)";
          LOBYTE(v190) = 0;
          unint64_t v83 = v169 & 0xFFFFFFFFFFFFFFF8;
          if ((v169 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v84 = (const char *)(v83 + 16);
            if (*(char *)(v83 + 39) < 0) {
              uint64_t v84 = *(const char **)v84;
            }
          }
          else
          {
            uint64_t v84 = "";
          }
          uint64_t v86 = sub_2168E5D78(v10);
          uint64_t v87 = (const char *)(v86 + 32);
          if (*(char *)(v86 + 55) < 0) {
            uint64_t v87 = *(const char **)v87;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Error parsing default value for metadata (at \"%s\" in plugin \"%s\")", v84, v87);
        }
        char v74 = 1;
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v164);
      if (*((void *)&v165 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v165 + 1));
      }
      if (v74) {
        goto LABEL_312;
      }
      *(void *)&long long v165 = 0;
      memset(&__dst, 0, sizeof(__dst));
      uint64_t v88 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216B69B78();
      if ((*((void *)v88 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v89 = (uint64_t *)((*((void *)v88 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v89 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v88);
      }
      if (sub_216B69AE0(&v167, (const void **)v89, &__dst))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v176);
        if ((v165 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v165 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *(void *)&long long v165 = v176.i64[0];
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      uint64_t v90 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)sub_216B69ED0(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v169, &v184, 1);
      v176.i64[1] = 0;
      *(void *)&long long v177 = 0;
      v176.i64[0] = (uint64_t)&v176.i64[1];
      uint64_t v91 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216B69B78();
      if ((*((void *)v91 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v92 = (uint64_t *)((*((void *)v91 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v92 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v91);
      }
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&__dst);
      uint64_t v93 = sub_21678C2D8((uint64_t)&v167, (const void **)v92);
      if (v168 == (void **)v93)
      {
        std::string::size_type size = (atomic_ullong *)__dst.__r_.__value_.__l.__size_;
        *(_OWORD *)unint64_t v173 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        if (!__dst.__r_.__value_.__l.__size_) {
          goto LABEL_218;
        }
LABEL_215:
        atomic_fetch_add_explicit(size + 1, 1uLL, memory_order_relaxed);
        goto LABEL_216;
      }
      std::string::size_type size = *(atomic_ullong **)(v93 + 64);
      v173[0] = *(void **)(v93 + 56);
      v173[1] = size;
      if (size) {
        goto LABEL_215;
      }
LABEL_216:
      if (__dst.__r_.__value_.__l.__size_) {
        sub_216784EC4((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
      }
LABEL_218:
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)v173))
      {
        unint64_t v95 = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v173);
        long long v97 = *(pxrInternal__aapl__pxrReserved__::JsValue **)v95;
        uint64_t v96 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(v95 + 8);
        while (v97 != v96)
        {
          if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v97)) {
            goto LABEL_223;
          }
          long long v97 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v97 + 16);
        }
        unint64_t v99 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v173);
        sub_216782DE0(&v180, (v99[1] - *v99) >> 4);
        uint64_t v101 = *v99;
        int v100 = v99[1];
        if (v101 != v100)
        {
          uint64_t v102 = v180;
          do
          {
            unint64_t v103 = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v101);
            if (*(char *)(v103 + 23) < 0)
            {
              sub_216778F24(&__dst, *(void **)v103, *(void *)(v103 + 8));
            }
            else
            {
              long long v104 = *(_OWORD *)v103;
              __dst.__r_.__value_.__r.__words[2] = *(void *)(v103 + 16);
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v104;
            }
            if (*(char *)(v102 + 23) < 0) {
              operator delete(*(void **)v102);
            }
            long long v105 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            *(void *)(v102 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v102 = v105;
            v102 += 24;
            uint64_t v101 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v101 + 16);
          }
          while (v101 != v100);
        }
        char v106 = (const void **)*((void *)&v180 + 1);
        for (uint64_t j = (const void **)v180; j != v106; j += 3)
          sub_216814A8C((uint64_t **)&v176, &v176.i64[1], j, (uint64_t)j);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v180;
        sub_216782F20((void ***)&__dst);
      }
      else
      {
LABEL_223:
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)v173))
        {
          std::string v98 = (const void **)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)v173);
          sub_21680EE0C((uint64_t **)&v176, v98, (uint64_t)v98);
        }
      }
      int v108 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216B69B78();
      if ((*((void *)v108 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v109 = (uint64_t *)((*((void *)v108 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v109 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v108);
      }
      sub_216B72330(&v167, (const void **)v109);
      if (v173[1]) {
        sub_216784EC4((std::__shared_weak_count *)v173[1]);
      }
      if (!(void)v177) {
        goto LABEL_247;
      }
      sub_216779094(&__dst, "layers");
      uint64_t v110 = sub_21677B088((uint64_t)&v176, (const void **)&__dst.__r_.__value_.__l.__data_);
      uint64_t v111 = v110;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (!v111) {
          goto LABEL_248;
        }
LABEL_247:
        __dst.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition((uint64_t)a1, 7u);
        __dst.__r_.__value_.__l.__size_ = v112;
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&__dst, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v169, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v165, 0);
        goto LABEL_248;
      }
      if (v110) {
        goto LABEL_247;
      }
LABEL_248:
      if (!(void)v177) {
        goto LABEL_253;
      }
      sub_216779094(&__dst, "prims");
      uint64_t v113 = sub_21677B088((uint64_t)&v176, (const void **)&__dst.__r_.__value_.__l.__data_);
      uint64_t v114 = v113;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (!v114) {
          goto LABEL_254;
        }
LABEL_253:
        __dst.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition((uint64_t)a1, 6u);
        __dst.__r_.__value_.__l.__size_ = v115;
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&__dst, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v169, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v165, 0);
        goto LABEL_254;
      }
      if (v113) {
        goto LABEL_253;
      }
LABEL_254:
      if (!(void)v177) {
        goto LABEL_263;
      }
      sub_216779094(&__dst, "properties");
      if (sub_21677B088((uint64_t)&v176, (const void **)&__dst.__r_.__value_.__l.__data_))
      {
        BOOL v116 = 1;
      }
      else
      {
        sub_216779094(&v180, "attributes");
        BOOL v116 = sub_21677B088((uint64_t)&v176, (const void **)&v180) != 0;
        if (SHIBYTE(v181) < 0) {
          operator delete((void *)v180);
        }
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (!v116) {
          goto LABEL_264;
        }
LABEL_263:
        __dst.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition((uint64_t)a1, 1u);
        __dst.__r_.__value_.__l.__size_ = v117;
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&__dst, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v169, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v165, 0);
        goto LABEL_264;
      }
      if (v116) {
        goto LABEL_263;
      }
LABEL_264:
      if (!(void)v177) {
        goto LABEL_273;
      }
      sub_216779094(&__dst, "properties");
      if (sub_21677B088((uint64_t)&v176, (const void **)&__dst.__r_.__value_.__l.__data_))
      {
        BOOL v118 = 1;
      }
      else
      {
        sub_216779094(&v180, "relationships");
        BOOL v118 = sub_21677B088((uint64_t)&v176, (const void **)&v180) != 0;
        if (SHIBYTE(v181) < 0) {
          operator delete((void *)v180);
        }
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (!v118) {
          goto LABEL_274;
        }
LABEL_273:
        __dst.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition((uint64_t)a1, 8u);
        __dst.__r_.__value_.__l.__size_ = v119;
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&__dst, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v169, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v165, 0);
        goto LABEL_274;
      }
      if (v118) {
        goto LABEL_273;
      }
LABEL_274:
      if (!(void)v177) {
        goto LABEL_283;
      }
      sub_216779094(&__dst, "variants");
      if (sub_21677B088((uint64_t)&v176, (const void **)&__dst.__r_.__value_.__l.__data_))
      {
        BOOL v120 = 1;
      }
      else
      {
        sub_216779094(&v180, "prims");
        BOOL v120 = sub_21677B088((uint64_t)&v176, (const void **)&v180) != 0;
        if (SHIBYTE(v181) < 0) {
          operator delete((void *)v180);
        }
      }
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v120) {
          goto LABEL_284;
        }
LABEL_283:
        __dst.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition((uint64_t)a1, 0xAu);
        __dst.__r_.__value_.__l.__size_ = v121;
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner::MetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_SpecDefiner *)&__dst, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v169, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v165, 0);
        goto LABEL_284;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (v120) {
        goto LABEL_283;
      }
LABEL_284:
      uint64_t v122 = v167;
      if (v167 != (uint64_t *)v168)
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__dst);
          pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::AddInfo(v90, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__dst, (const pxrInternal__aapl__pxrReserved__::JsValue *)(v122 + 7));
          if ((__dst.__r_.__value_.__s.__data_[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(__dst.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v123 = (uint64_t *)v122[1];
          if (v123)
          {
            do
            {
              uint64_t v124 = v123;
              uint64_t v123 = (uint64_t *)*v123;
            }
            while (v123);
          }
          else
          {
            do
            {
              uint64_t v124 = (uint64_t *)v122[2];
              BOOL v35 = *v124 == (void)v122;
              uint64_t v122 = v124;
            }
            while (!v35);
          }
          uint64_t v122 = v124;
        }
        while (v124 != (uint64_t *)v168);
      }
      uint64_t v126 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition **)a5[1];
      unint64_t v125 = a5[2];
      if ((unint64_t)v126 >= v125)
      {
        uint64_t v128 = ((uint64_t)v126 - *a5) >> 3;
        if ((unint64_t)(v128 + 1) >> 61) {
          sub_21677CB10();
        }
        uint64_t v129 = v125 - *a5;
        uint64_t v130 = v129 >> 2;
        if (v129 >> 2 <= (unint64_t)(v128 + 1)) {
          uint64_t v130 = v128 + 1;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v131 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v131 = v130;
        }
        if (v131) {
          uint64_t v132 = (char *)sub_21677CB28((uint64_t)(a5 + 2), v131);
        }
        else {
          uint64_t v132 = 0;
        }
        uint64_t v133 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition **)&v132[8 * v128];
        char *v133 = v90;
        uint64_t v127 = v133 + 1;
        unint64_t v135 = (char *)*a5;
        unint64_t v134 = (char *)a5[1];
        if (v134 == (char *)*a5)
        {
          uint64_t v137 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition ***)a5;
        }
        else
        {
          do
          {
            long long v136 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)*((void *)v134 - 1);
            v134 -= 8;
            *--uint64_t v133 = v136;
          }
          while (v134 != v135);
          uint64_t v137 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition ***)a5;
          unint64_t v134 = (char *)*a5;
        }
        *uint64_t v137 = v133;
        v137[1] = v127;
        v137[2] = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition **)&v132[8 * v131];
        if (v134) {
          operator delete(v134);
        }
      }
      else
      {
        *uint64_t v126 = v90;
        uint64_t v127 = v126 + 1;
      }
      a5[1] = v127;
      sub_21678A498((uint64_t)&v176, (char *)v176.i64[1]);
      if ((v165 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v165 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_312:
      sub_2168EE084((uint64_t)&v184);
LABEL_313:
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v166.__r_.__value_.__l.__data_);
      }
LABEL_315:
      sub_216812ED4((uint64_t)&v167, v168[0]);
      if ((v169 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v169 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v138 = (uint64_t *)v13[1];
      if (v138)
      {
        do
        {
          unint64_t v139 = v138;
          unint64_t v138 = (uint64_t *)*v138;
        }
        while (v138);
      }
      else
      {
        do
        {
          unint64_t v139 = (uint64_t *)v13[2];
          BOOL v35 = *v139 == (void)v13;
          uint64_t v13 = v139;
        }
        while (!v35);
      }
      uint64_t v13 = v139;
      if (v139 == (uint64_t *)v172) {
        goto LABEL_369;
      }
    }
    std::string::size_type v34 = __dst.__r_.__value_.__l.__size_;
    long long v165 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    if (!__dst.__r_.__value_.__l.__size_) {
      goto LABEL_52;
    }
LABEL_49:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
    goto LABEL_50;
  }
}

void sub_216B67980(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_OnDidRegisterPlugins(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, uint64_t **a2)
{
  void v5[4] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  uint64_t v3 = 0;
  void v5[3] = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_UpdateMetadataFromPlugins(this, a2 + 1, (uint64_t)v2, (uint64_t)v5, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_216B710DC(v5);
  if (SHIBYTE(v3) < 0) {
    operator delete(v2[0]);
  }
}

void sub_216B67DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, int a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::FieldDefinition((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)v23, this, a2, a3);
  if (a4) {
    v26[24] = 1;
  }
  sub_216B6E83C((uint64_t)v14, (uint64_t *)a2, (uint64_t)v23);
  sub_216B6EC34((uint64_t)v18, (uint64_t)v14);
  uint64_t v7 = sub_216B71A3C((uint64_t)this + 16, v18, (uint64_t *)v18);
  char v9 = v8;
  uint64_t v13 = (void **)&v22;
  sub_216B6EB74(&v13);
  sub_2168EE084((uint64_t)&v20);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (((uint64_t)v18[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v18[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = (void **)&v17;
  sub_216B6EB74(&v13);
  sub_2168EE084((uint64_t)&v16);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v14[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (!v9)
  {
    v18[0] = (void **)"sdf/schema.cpp";
    v18[1] = (void **)"_CreateField";
    uint64_t v19 = 1036;
    uint64_t v20 = "SdfSchemaBase::FieldDefinition &pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(const TfToken &,"
          " const VtValue &, BOOL)";
    char v21 = 0;
    unint64_t v10 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      uint64_t v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        uint64_t v11 = *(const char **)v11;
      }
    }
    else
    {
      uint64_t v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate creation for field '%s'", v11);
  }
  v18[0] = (void **)v26;
  sub_216B6EB74(v18);
  sub_2168EE084((uint64_t)&v25);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v7 + 3;
}

void sub_216B67FCC(_Unwind_Exception *a1)
{
  sub_216B68078(v1 - 152);
  _Unwind_Resume(a1);
}

uint64_t sub_216B68004(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 40);
  sub_216B6EB74(&v4);
  sub_2168EE084(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t sub_216B68078(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 32);
  sub_216B6EB74(&v4);
  sub_2168EE084(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition(uint64_t result, unsigned int a2)
{
  if (!*(unsigned char *)(result + 72 * a2 + 120))
  {
    v6[0] = "sdf/schema.cpp";
    v6[1] = "_ExtendSpecDefinition";
    _OWORD v6[2] = 1076;
    void v6[3] = "SdfSchemaBase::_SpecDefiner pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_ExtendSpecDefinition(SdfSpecType)";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C755200, a2, (uint64_t)__p);
    if (v5 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"No definition for spec type %s", v2, v3);
  }
  return result;
}

void sub_216B681A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v2 = sub_2168CB120((void *)this + 2, a2);
  if (v2) {
    return v2 + 3;
  }
  else {
    return 0;
  }
}

void *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91090, memory_order_acquire) & 1) == 0)
  {
    char v5 = a2;
    long long v6 = this;
    int v4 = __cxa_guard_acquire(&qword_267B91090);
    a2 = v5;
    this = v6;
    if (v4)
    {
      qword_267B91088 = 0;
      __cxa_atexit((void (*)(void *))sub_216B64E50, &unk_267B91080, &dword_216758000);
      __cxa_guard_release(&qword_267B91090);
      a2 = v5;
      this = v6;
    }
  }
  uint64_t v2 = sub_2168CB120((void *)this + 2, a2);
  if (v2) {
    return v2 + 5;
  }
  else {
    return &unk_267B91080;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsRegistered(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  int v4 = sub_2168CB120((void *)this + 2, a2);
  char v5 = v4;
  if (a3 && v4) {
    sub_2168EC6DC(a3, v4 + 5);
  }
  return v5 != 0;
}

void *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::HoldsChildren(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  double result = sub_2168CB120((void *)this + 2, a2);
  if (result) {
    return (void *)(*((unsigned char *)result + 82) != 0);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::CastToTypeOf@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, void *a4@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  long long v6 = sub_2168CB120((void *)this + 2, a2);
  if (v6)
  {
    sub_2168EC6DC(&v8, v6 + 5);
    if (v9) {
      pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeOf(a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v8, a4);
    }
    else {
      sub_2168EE4C4(a4, a3);
    }
  }
  else
  {
    a4[1] = 0;
  }
  return sub_2168EE084((uint64_t)&v8);
}

void sub_216B683B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefinition(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1 + 72 * a2;
  if (*(unsigned char *)(v2 + 120)) {
    return v2 + 56;
  }
  v7[0] = "sdf/schema.cpp";
  v7[1] = "_CheckAndGetSpecDefinition";
  v7[2] = 1140;
  void v7[3] = "const SdfSchemaBase::SpecDefinition *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefiniti"
          "on(SdfSpecType) const";
  char v8 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C755200, a2, (uint64_t)__p);
  if (v6 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"No definition for spec type %s", (const char *)v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_216B6847C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(uint64_t a1, void *a2, unsigned int a3)
{
  double result = (void *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefinition(a1, a3);
  if (result) {
    return (void *)(sub_2168CB120(result, a2) != 0);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFields@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  double result = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefinition(a1, a2);
  if (result)
  {
    return (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetFields(result, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetMetadataFields@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefinition(a1, a2);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetMetadataFields(result, v5, v6, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetMetadataFieldDisplayGroup@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, atomic_uint **a4@<X8>)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefinition(a1, a2);
  if (result)
  {
    return (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetMetadataFieldDisplayGroup(result, a3, a4);
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetRequiredFields(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CheckAndGetSpecDefinition(a1, a2);
  if (v2) {
    return v2 + 40;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B910A0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_267B910A0))
    {
      int v4 = operator new(0x18uLL);
      void *v4 = 0;
      v4[1] = 0;
      _OWORD v4[2] = 0;
      qword_267B91098 = (uint64_t)v4;
      __cxa_guard_release(&qword_267B910A0);
    }
  }
  return qword_267B91098;
}

void sub_216B68640(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidValue(atomic_ullong ***this@<X0>, const pxrInternal__aapl__pxrReserved__::VtValue *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*((void *)a2 + 1)) {
    goto LABEL_31;
  }
  if (sub_2168EC434(a2))
  {
    uint64_t v6 = *((void *)a2 + 1);
    if ((v6 & 4) != 0) {
      char v7 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      char v7 = *(pxrInternal__aapl__pxrReserved__::VtDictionary **)a2;
    }
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v7);
    std::string::size_type size = v9;
    v47.__r_.__value_.__r.__words[0] = v8;
    v47.__r_.__value_.__l.__size_ = v9;
    v47.__r_.__value_.__r.__words[2] = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v7);
    uint64_t v48 = v11;
    while (size != v11 || v11 && v47.__r_.__value_.__r.__words[0] != v47.__r_.__value_.__r.__words[2])
    {
      uint64_t v13 = sub_2168ED218(&v47, v11, v12);
      pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidValue((uint64_t *)&v45, (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)this, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*v13 + 56));
      if (v46)
      {
        uint64_t v24 = sub_2168ED218(&v47, v14, v15);
        uint64_t v27 = (void *)(*v24 + 32);
        if (*(char *)(*v24 + 55) < 0) {
          uint64_t v27 = (void *)*v27;
        }
        uint64_t v28 = sub_2168ED218(&v47, v25, v26);
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)(*v28 + 56), v29, v30, (uint64_t)__p);
        if (v42 >= 0) {
          uint64_t v33 = __p;
        }
        else {
          uint64_t v33 = (void **)__p[0];
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Value for key '%s' does not have a valid scene description type (%s)", v31, v32, v27, v33);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v44) < 0)
        {
          sub_216778F24((unsigned char *)a3, v43[0], (unint64_t)v43[1]);
          int v40 = SHIBYTE(v44);
          *(unsigned char *)(a3 + 24) = 1;
          if (v40 < 0) {
            operator delete(v43[0]);
          }
        }
        else
        {
          *(_OWORD *)a3 = *(_OWORD *)v43;
          *(void *)(a3 + 16) = v44;
          *(unsigned char *)(a3 + 24) = 1;
        }
        if (v46) {
          goto LABEL_40;
        }
        return;
      }
      sub_2168ED448(&v47, v14, v15);
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
      uint64_t v11 = v48;
    }
    goto LABEL_31;
  }
  if (sub_21699AB4C(a2))
  {
    uint64_t v16 = *((void *)a2 + 1);
    if ((v16 & 4) != 0) {
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      uint64_t v17 = *(pxrInternal__aapl__pxrReserved__::SdfPathExpression **)a2;
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfPathExpression::IsAbsolute(v17))
    {
      pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)&v45, v17);
      uint64_t v18 = std::string::insert(&v45, 0, "pathExpression paths must be absolute paths (\"");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      uint64_t v20 = std::string::append(&v47, "\")");
      uint64_t v22 = (void *)v20->__r_.__value_.__r.__words[0];
      unint64_t v21 = v20->__r_.__value_.__l.__size_;
      LODWORD(v43[0]) = v20->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v43 + 3) = *(_DWORD *)((char *)&v20->__r_.__value_.__r.__words[2] + 3);
      int v23 = SHIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (v23 < 0) {
        goto LABEL_37;
      }
      goto LABEL_30;
    }
LABEL_31:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    return;
  }
  v45.__r_.__value_.__r.__words[0] = 0;
  v47.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(this[115], a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v45);
  BOOL IsEmpty = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v47);
  if ((v45.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (!IsEmpty) {
    goto LABEL_31;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a2, v35, v36, (uint64_t)&v45);
  uint64_t v37 = std::string::insert(&v45, 0, "Value does not have a valid scene description type (");
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  uint64_t v39 = std::string::append(&v47, ")");
  uint64_t v22 = (void *)v39->__r_.__value_.__r.__words[0];
  unint64_t v21 = v39->__r_.__value_.__l.__size_;
  LODWORD(v43[0]) = v39->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v43 + 3) = *(_DWORD *)((char *)&v39->__r_.__value_.__r.__words[2] + 3);
  int v23 = SHIBYTE(v39->__r_.__value_.__r.__words[2]);
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (v23 < 0)
  {
LABEL_37:
    sub_216778F24((unsigned char *)a3, v22, v21);
    *(unsigned char *)(a3 + 24) = 1;
    operator delete(v22);
    goto LABEL_38;
  }
LABEL_30:
  *(void *)a3 = v22;
  *(void *)(a3 + 8) = v21;
  *(_DWORD *)(a3 + 16) = v43[0];
  *(_DWORD *)(a3 + 19) = *(_DWORD *)((char *)v43 + 3);
  *(unsigned char *)(a3 + 23) = v23;
  *(unsigned char *)(a3 + 24) = 1;
LABEL_38:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
LABEL_40:
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
}

void sub_216B689C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  operator delete(v29);
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(atomic_ullong ***this, const pxrInternal__aapl__pxrReserved__::VtValue *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(this[115], a2, a3);
}

void *pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetAllTypes@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry **this@<X0>, void *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::GetAllTypes(this[115], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(atomic_ullong ***this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(this[115], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const char *a2)
{
  uint64_t v2 = (atomic_ullong **)*((void *)this + 115);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v4, a2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(v2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v4);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(uint64_t a1)
{
  uint64_t v1 = *(atomic_ullong ***)(a1 + 920);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v3);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(atomic_ullong ***this, const pxrInternal__aapl__pxrReserved__::TfType *a2, atomic_uint **a3)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(this[115], a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindOrCreateType(atomic_ullong ***this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindOrCreateTypeName(this[115], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_GetTypeRegistrar(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this)
{
  return *((void *)this + 115);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidIdentifier(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier(a1))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  else
  {
    std::operator+<char>();
    uint64_t v3 = std::string::append(&__p, "\" is not a valid identifier");
    uint64_t v5 = (void *)v3->__r_.__value_.__r.__words[0];
    unint64_t size = v3->__r_.__value_.__l.__size_;
    v8[0] = v3->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v8 + 3) = *(_DWORD *)((char *)&v3->__r_.__value_.__r.__words[2] + 3);
    int v6 = SHIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (v6 < 0)
    {
      sub_216778F24((unsigned char *)a2, v5, size);
      *(unsigned char *)(a2 + 24) = 1;
      operator delete(v5);
    }
    else
    {
      *(void *)a2 = v5;
      *(void *)(a2 + 8) = size;
      *(_DWORD *)(a2 + 16) = v8[0];
      *(_DWORD *)(a2 + 19) = *(_DWORD *)((char *)v8 + 3);
      *(unsigned char *)(a2 + 23) = v6;
      *(unsigned char *)(a2 + 24) = 1;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_216B68C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidNamespacedIdentifier(size_t *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier(a1))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  else
  {
    std::operator+<char>();
    uint64_t v3 = std::string::append(&__p, "\" is not a valid identifier");
    uint64_t v5 = (void *)v3->__r_.__value_.__r.__words[0];
    unint64_t size = v3->__r_.__value_.__l.__size_;
    v8[0] = v3->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v8 + 3) = *(_DWORD *)((char *)&v3->__r_.__value_.__r.__words[2] + 3);
    int v6 = SHIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (v6 < 0)
    {
      sub_216778F24((unsigned char *)a2, v5, size);
      *(unsigned char *)(a2 + 24) = 1;
      operator delete(v5);
    }
    else
    {
      *(void *)a2 = v5;
      *(void *)(a2 + 8) = size;
      *(_DWORD *)(a2 + 16) = v8[0];
      *(_DWORD *)(a2 + 19) = *(_DWORD *)((char *)v8 + 3);
      *(unsigned char *)(a2 + 23) = v6;
      *(unsigned char *)(a2 + 24) = 1;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_216B68D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier(long long *a1@<X0>, uint64_t a2@<X8>)
{
  sub_2169C4410(v11, 1uLL);
  *(_OWORD *)uint64_t v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)BOOL v12 = 0u;
  sub_2169C4528((unsigned __int8 *)__p, a1, "");
  char v4 = sub_216B71E98(__p);
  sub_2169C44E4((uint64_t)__p);
  if (v4)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  else
  {
    if (*((char *)a1 + 23) >= 0) {
      char v7 = (uint64_t *)a1;
    }
    else {
      char v7 = *(uint64_t **)a1;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\"%s\" is not a valid variant name", v5, v6, v7);
    if (SHIBYTE(v10) < 0)
    {
      sub_216778F24((unsigned char *)a2, __p[0], (unint64_t)__p[1]);
      int v8 = SHIBYTE(v10);
      *(unsigned char *)(a2 + 24) = 1;
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)__p;
      *(void *)(a2 + 16) = v10;
      *(unsigned char *)(a2 + 24) = 1;
    }
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[1]);
  }
  if (SHIBYTE(v13[0]) < 0) {
    operator delete(v12[0]);
  }
  __p[0] = v11;
  sub_216981168((void ***)__p);
}

void sub_216B68EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long __p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (SHIBYTE(a12) < 0) {
    operator delete((void *)__p);
  }
  if (a2 == 1)
  {
    uint64_t v25 = __cxa_begin_catch(a1);
    (*(void (**)(void *))(*(void *)v25 + 16))(v25);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\"%s\" is not a valid variant name due to '%s'", v26, v27);
    if (SHIBYTE(a12) < 0)
    {
      sub_216778F24((unsigned char *)v22, (void *)__p, *((unint64_t *)&__p + 1));
      *(unsigned char *)(v22 + 24) = 1;
      operator delete((void *)__p);
    }
    else
    {
      *(_OWORD *)uint64_t v22 = __p;
      *(void *)(v22 + 16) = a12;
      *(unsigned char *)(v22 + 24) = 1;
    }
    __cxa_end_catch();
    JUMPOUT(0x216B68E6CLL);
  }
  sub_2169C43B8((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantSelection(long long *a1@<X0>, unsigned char *a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfVariableExpression::IsExpression())
  {
    *a2 = 0;
    a2[24] = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier(a1, (uint64_t)a2);
  }
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelocatesPath(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, uint64_t a2@<X8>)
{
  if (sub_216B6916C(this))
  {
    sub_216779094(&v10, "Relocate paths cannot contain variant selections");
    *(std::string *)a2 = v10;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetString(this);
    std::operator+<char>();
    uint64_t v5 = std::string::append(&v10, "> must be a prim path");
    char v7 = (void *)v5->__r_.__value_.__r.__words[0];
    unint64_t size = v5->__r_.__value_.__l.__size_;
    *(_DWORD *)std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    *(_DWORD *)&void v9[3] = *(_DWORD *)((char *)&v5->__r_.__value_.__r.__words[2] + 3);
    int v8 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (v8 < 0)
    {
      sub_216778F24((unsigned char *)a2, v7, size);
      *(unsigned char *)(a2 + 24) = 1;
      operator delete(v7);
    }
    else
    {
      *(void *)a2 = v7;
      *(void *)(a2 + 8) = size;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)v9;
      *(_DWORD *)(a2 + 19) = *(_DWORD *)&v9[3];
      *(unsigned char *)(a2 + 23) = v8;
      *(unsigned char *)(a2 + 24) = 1;
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
}

void sub_216B69140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216B6916C(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B910E8, memory_order_acquire) & 1) == 0)
  {
    char v4 = a1;
    int v2 = __cxa_guard_acquire(&qword_267B910E8);
    a1 = v4;
    if (v2)
    {
      uint64_t v3 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_SCHEMA_PROHIBIT_INVALID_VARIANT_SELECTIONS);
      if (!v3) {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
      }
      byte_267B910E0 = *v3 != 0;
      __cxa_guard_release(&qword_267B910E8);
      a1 = v4;
    }
  }
  if (!byte_267B910E0) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(a1);
}

void sub_216B6923C(_Unwind_Exception *a1)
{
}

double pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidInheritPath@<D0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, uint64_t a2@<X8>)
{
  if (sub_216B6916C(this))
  {
    uint64_t v5 = "Inherit paths cannot contain variant selections";
  }
  else
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this)
      && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
      return result;
    }
    uint64_t v5 = "Inherit paths must be absolute prim paths";
  }
  sub_216779094(&v7, v5);
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

double pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidSpecializesPath@<D0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, uint64_t a2@<X8>)
{
  if (sub_216B6916C(this))
  {
    uint64_t v5 = "Specializes paths cannot contain variant selections";
  }
  else
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this)
      && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
      return result;
    }
    uint64_t v5 = "Specializes paths must be absolute prim paths";
  }
  sub_216779094(&v7, v5);
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidAttributeConnectionPath(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(this))
  {
    sub_216779094(__p, "Attribute connection paths cannot contain variant selections");
LABEL_8:
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v10;
    *(unsigned char *)(a2 + 24) = 1;
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this)
    && ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this) & 1) != 0
     || pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this)))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return;
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Connection paths must be absolute prim or property paths: <%s>", v6, v7, Text);
  if ((SHIBYTE(v10) & 0x80000000) == 0) {
    goto LABEL_8;
  }
  sub_216778F24((unsigned char *)a2, __p[0], (unint64_t)__p[1]);
  int v8 = SHIBYTE(v10);
  *(unsigned char *)(a2 + 24) = 1;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B69448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelationshipTargetPath@<D0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection(this))
  {
    uint64_t v5 = "Relationship target paths cannot contain variant selections";
  }
  else
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this)
      && ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this) & 1) != 0
       || pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(this)
       || pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(this)))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
      return result;
    }
    uint64_t v5 = "Relationship target paths must be absolute prim, property or mapper paths";
  }
  sub_216779094(&v7, v5);
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidReference(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)this + 24);
  if (sub_216B6916C((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)this + 24)))
  {
    sub_216779094(&v10, "Reference paths cannot contain variant selections");
    *(std::string *)a2 = v10;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v4) {
         || pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v4)
  }
         && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v4))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v4);
    std::operator+<char>();
    uint64_t v5 = std::string::append(&v10, "> must be either empty or an absolute prim path");
    long long v7 = (void *)v5->__r_.__value_.__r.__words[0];
    unint64_t size = v5->__r_.__value_.__l.__size_;
    *(_DWORD *)std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
    *(_DWORD *)&void v9[3] = *(_DWORD *)((char *)&v5->__r_.__value_.__r.__words[2] + 3);
    int v8 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (v8 < 0)
    {
      sub_216778F24((unsigned char *)a2, v7, size);
      *(unsigned char *)(a2 + 24) = 1;
      operator delete(v7);
    }
    else
    {
      *(void *)a2 = v7;
      *(void *)(a2 + 8) = size;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)v9;
      *(_DWORD *)(a2 + 19) = *(_DWORD *)&v9[3];
      *(unsigned char *)(a2 + 23) = v8;
      *(unsigned char *)(a2 + 24) = 1;
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
}

void sub_216B6963C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidPayload(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24);
  if (sub_216B6916C((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24)))
  {
    sub_216779094(&v9, "Payload paths cannot contain variant selections");
    *(std::string *)a2 = v9;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v3) {
         || pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(v3)
  }
         && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v3))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v3);
    std::operator+<char>();
    char v4 = std::string::append(&v9, "> must be either empty or an absolute prim path");
    int v6 = (void *)v4->__r_.__value_.__r.__words[0];
    unint64_t size = v4->__r_.__value_.__l.__size_;
    *(_DWORD *)int v8 = v4->__r_.__value_.__r.__words[2];
    *(_DWORD *)&void v8[3] = *(_DWORD *)((char *)&v4->__r_.__value_.__r.__words[2] + 3);
    int v7 = SHIBYTE(v4->__r_.__value_.__r.__words[2]);
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    if (v7 < 0)
    {
      sub_216778F24((unsigned char *)a2, v6, size);
      *(unsigned char *)(a2 + 24) = 1;
      operator delete(v6);
    }
    else
    {
      *(void *)a2 = v6;
      *(void *)(a2 + 8) = size;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)v8;
      *(_DWORD *)(a2 + 19) = *(_DWORD *)&v8[3];
      *(unsigned char *)(a2 + 23) = v7;
      *(unsigned char *)(a2 + 24) = 1;
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
}

void sub_216B697A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidSubLayer(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v29);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v25);
    unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v4) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
    }
    unint64_t v5 = v29;
    unint64_t v6 = atomic_load((unint64_t *)(v4 + 144));
    if (v5 >= v6
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v29, (atomic_ullong *)v4))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
    }
    else
    {
      uint64_t v22 = 0;
      std::string __dst = 0;
      unint64_t v24 = 0;
      int v7 = sub_216862604(&v29, 0);
      uint64_t v8 = sub_216878D10();
      if (v7 != (void *)v8)
      {
        unint64_t v9 = (unint64_t)__dst;
        do
        {
          std::string v10 = (long long *)(v7 + 7);
          if (v9 >= v24)
          {
            unint64_t v9 = sub_2167E9A44((uint64_t *)&v22, v10);
          }
          else
          {
            if (*((char *)v7 + 79) < 0)
            {
              sub_216778F24((unsigned char *)v9, (void *)v7[7], v7[8]);
            }
            else
            {
              long long v11 = *v10;
              *(void *)(v9 + 16) = v7[9];
              *(_OWORD *)unint64_t v9 = v11;
            }
            v9 += 24;
          }
          std::string __dst = (void *)v9;
          int v7 = (void *)v7[1];
        }
        while (v7 != (void *)v8);
      }
      BOOL v12 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v12) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      uint64_t v13 = sub_216862604(&v29, 0);
      v19.__r_.__value_.__s.__data_[0] = 0;
      long long v14 = (void *)sub_2168520EC(v12 + 19, &v19);
      if (v14 != v13) {
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v12, v13, v14);
      }
      pxrInternal__aapl__pxrReserved__::TfStringJoin("; ", &v22, &v19);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &v19;
      }
      else {
        uint64_t v17 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid sublayer path: %s", v15, v16, v17);
      if (SHIBYTE(v21) < 0)
      {
        sub_216778F24((unsigned char *)a2, __p[0], (unint64_t)__p[1]);
        int v18 = SHIBYTE(v21);
        *(unsigned char *)(a2 + 24) = 1;
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_OWORD *)a2 = *(_OWORD *)__p;
        *(void *)(a2 + 16) = v21;
        *(unsigned char *)(a2 + 24) = 1;
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      __p[0] = &v22;
      sub_216782F20((void ***)__p);
    }
    if (v28 < 0) {
      operator delete(v27);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete(v25[0]);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v29);
  }
  else
  {
    sub_216779094(v25, "Sublayer paths must not be empty");
    *(_OWORD *)a2 = *(_OWORD *)v25;
    *(void *)(a2 + 16) = v26;
    *(unsigned char *)(a2 + 24) = 1;
  }
}

void sub_216B69A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  std::string __p = &a23;
  sub_216782F20((void ***)&__p);
  sub_21682E578((uint64_t)&a26);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v26 - 56));
  _Unwind_Resume(a1);
}

BOOL sub_216B69AE0(uint64_t **a1, const void **a2, std::string *a3)
{
  uint64_t v5 = sub_21678C2D8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v5) {
    return 0;
  }
  unint64_t v6 = (uint64_t *)v5;
  int v7 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v5 + 56);
  BOOL result = pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v5 + 56));
  if (result)
  {
    unint64_t String = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString(v7);
    std::string::operator=(a3, String);
    sub_2167AE00C(a1, v6);
    sub_216812F30((uint64_t)(v6 + 4));
    operator delete(v6);
    return 1;
  }
  return result;
}

unint64_t sub_216B69B78()
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B910C8);
  if (!v0)
  {
    unint64_t v0 = (char *)operator new(0x38uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "default", 0);
    int v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "displayGroup", 0);
    uint64_t v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "type", 0);
    unint64_t v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "appliesTo", 0);
    uint64_t v5 = *(void ***)v0;
    std::string v19 = v5;
    if ((v5 & 7) != 0)
    {
      unint64_t v6 = (void **)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v6, 2u, memory_order_relaxed) & 1) == 0) {
        std::string v19 = v6;
      }
    }
    int v7 = (atomic_uint *)*v2;
    uint64_t v20 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v20 = v8;
      }
    }
    unint64_t v9 = (atomic_uint *)*v3;
    uint64_t v21 = v9;
    if ((v9 & 7) != 0)
    {
      std::string v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v21 = v10;
      }
    }
    long long v11 = (atomic_uint *)*v4;
    uint64_t v22 = v11;
    if ((v11 & 7) != 0)
    {
      BOOL v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v22 = v12;
      }
    }
    *((void *)v0 + 4) = 0;
    *((void *)v0 + 5) = 0;
    *((void *)v0 + 6) = 0;
    uint64_t v13 = (char *)operator new(0x20uLL);
    uint64_t v14 = 0;
    *((void *)v0 + 4) = v13;
    *((void *)v0 + 5) = v13;
    *((void *)v0 + 6) = v13 + 32;
    do
    {
      unint64_t v15 = (unint64_t)(&v19)[v14];
      *(void *)&v13[v14 * 8] = v15;
      if ((v15 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v13[v14 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v14;
    }
    while (v14 != 4);
    *((void *)v0 + 5) = v13 + 32;
    for (uint64_t i = 3; i != -1; --i)
    {
      unint64_t v17 = (unint64_t)(&v19)[i];
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v18 = 0;
    atomic_compare_exchange_strong(&qword_267B910C8, (unint64_t *)&v18, (unint64_t)v0);
    if (v18)
    {
      std::string v19 = (void **)(v0 + 32);
      sub_216889A04(&v19);
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B910C8);
    }
  }
  return (unint64_t)v0;
}

void sub_216B69E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

void *sub_216B69ED0(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3, int a4)
{
  void v9[2] = *MEMORY[0x263EF8340];
  sub_2168EE4C4(v9, a3);
  Field = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v9, a4);
  sub_2168EE084((uint64_t)v9);
  return Field;
}

void sub_216B69F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfSchema::~SdfSchema(pxrInternal__aapl__pxrReserved__::SdfSchema *this)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::~SdfSchemaBase(this);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *pxrInternal__aapl__pxrReserved__::Sdf_InitializeValueTypeNames(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B910D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B910D8))
  {
    sub_216B6A94C();
    __cxa_atexit((void (*)(void *))pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::~Sdf_ValueTypeRegistry, &qword_267B910D0, &dword_216758000);
    __cxa_guard_release(&qword_267B910D8);
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)operator new(0x378uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::Sdf_ValueTypeNamesType(v1);
  *(void *)uint64_t v1 = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "BOOL");
  *((void *)v1 + 1) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "uchar");
  *((void *)v1 + 2) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "int");
  *((void *)v1 + 3) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "uint");
  *((void *)v1 + 4) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "int64");
  *((void *)v1 + 5) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "uint64");
  *((void *)v1 + 6) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "half");
  *((void *)v1 + 7) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "float");
  *((void *)v1 + 8) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "double");
  *((void *)v1 + 9) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "timecode");
  *((void *)v1 + 10) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "string");
  *((void *)v1 + 11) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "token");
  *((void *)v1 + 12) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "asset");
  *((void *)v1 + 53) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "opaque");
  *((void *)v1 + 54) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "group");
  *((void *)v1 + 55) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "pathExpression");
  *((void *)v1 + 13) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "int2");
  *((void *)v1 + 14) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "int3");
  *((void *)v1 + 15) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "int4");
  *((void *)v1 + 16) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "half2");
  *((void *)v1 + 17) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "half3");
  *((void *)v1 + 18) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "half4");
  *((void *)v1 + 19) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "float2");
  *((void *)v1 + 20) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "float3");
  *((void *)v1 + 21) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "float4");
  *((void *)v1 + 22) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "double2");
  *((void *)v1 + 23) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "double3");
  *((void *)v1 + 24) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "double4");
  *((void *)v1 + 25) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "point3h");
  *((void *)v1 + 26) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "point3f");
  *((void *)v1 + 27) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "point3d");
  *((void *)v1 + 28) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "vector3h");
  *((void *)v1 + 29) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "vector3f");
  *((void *)v1 + 30) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "vector3d");
  *((void *)v1 + 31) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "normal3h");
  *((void *)v1 + 32) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "normal3f");
  *((void *)v1 + 33) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "normal3d");
  *((void *)v1 + 34) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "color3h");
  *((void *)v1 + 35) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "color3f");
  *((void *)v1 + 36) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "color3d");
  *((void *)v1 + 37) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "color4h");
  *((void *)v1 + 38) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "color4f");
  *((void *)v1 + 39) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "color4d");
  *((void *)v1 + 40) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "quath");
  *((void *)v1 + 41) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "quatf");
  *((void *)v1 + 42) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "quatd");
  *((void *)v1 + 43) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "matrix2d");
  *((void *)v1 + 44) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "matrix3d");
  *((void *)v1 + 45) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "matrix4d");
  *((void *)v1 + 46) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "frame4d");
  *((void *)v1 + 48) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "texCoord2f");
  *((void *)v1 + 49) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "texCoord2d");
  *((void *)v1 + 47) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "texCoord2h");
  *((void *)v1 + 51) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "texCoord3f");
  *((void *)v1 + 52) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "texCoord3d");
  *((void *)v1 + 50) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "texCoord3h");
  *((void *)v1 + 56) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "BOOL[]");
  *((void *)v1 + 57) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "uchar[]");
  *((void *)v1 + 58) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "int[]");
  *((void *)v1 + 60) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "uint[]");
  *((void *)v1 + 59) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "ushort[]");
  *((void *)v1 + 61) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "int64[]");
  *((void *)v1 + 62) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "uint64[]");
  *((void *)v1 + 63) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "half[]");
  *((void *)v1 + 64) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "float[]");
  *((void *)v1 + 65) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "double[]");
  *((void *)v1 + 66) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "timecode[]");
  *((void *)v1 + 67) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "string[]");
  *((void *)v1 + 68) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "token[]");
  *((void *)v1 + 69) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "asset[]");
  *((void *)v1 + 110) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "pathExpression[]");
  *((void *)v1 + 70) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "int2[]");
  *((void *)v1 + 71) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "int3[]");
  *((void *)v1 + 72) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "int4[]");
  *((void *)v1 + 73) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "half2[]");
  *((void *)v1 + 74) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "half3[]");
  *((void *)v1 + 75) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "half4[]");
  *((void *)v1 + 76) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "float2[]");
  *((void *)v1 + 77) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "float3[]");
  *((void *)v1 + 78) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "float4[]");
  *((void *)v1 + 79) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "double2[]");
  *((void *)v1 + 80) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "double3[]");
  *((void *)v1 + 81) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "double4[]");
  *((void *)v1 + 82) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "point3h[]");
  *((void *)v1 + 83) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "point3f[]");
  *((void *)v1 + 84) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "point3d[]");
  *((void *)v1 + 85) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "vector3h[]");
  *((void *)v1 + 86) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "vector3f[]");
  *((void *)v1 + 87) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "vector3d[]");
  *((void *)v1 + 88) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "normal3h[]");
  *((void *)v1 + 89) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "normal3f[]");
  *((void *)v1 + 90) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "normal3d[]");
  *((void *)v1 + 91) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "color3h[]");
  *((void *)v1 + 92) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "color3f[]");
  *((void *)v1 + 93) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "color3d[]");
  *((void *)v1 + 94) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "color4h[]");
  *((void *)v1 + 95) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "color4f[]");
  *((void *)v1 + 96) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "color4d[]");
  *((void *)v1 + 97) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "quath[]");
  *((void *)v1 + 98) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "quatf[]");
  *((void *)v1 + 99) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "quatd[]");
  *((void *)v1 + 100) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "matrix2d[]");
  *((void *)v1 + 101) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "matrix3d[]");
  *((void *)v1 + 102) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "matrix4d[]");
  *((void *)v1 + 103) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "frame4d[]");
  *((void *)v1 + 105) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "texCoord2f[]");
  *((void *)v1 + 106) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "texCoord2d[]");
  *((void *)v1 + 104) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "texCoord2h[]");
  *((void *)v1 + 108) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "texCoord3f[]");
  *((void *)v1 + 109) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "texCoord3d[]");
  *((void *)v1 + 107) = pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(&qword_267B910D0, "texCoord3h[]");
  return v1;
}

void sub_216B6A924(_Unwind_Exception *a1)
{
}

uint64_t sub_216B6A94C()
{
  unint64_t v0 = (atomic_ullong **)pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::Sdf_ValueTypeRegistry((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *)&qword_267B910D0);
  sub_216B5FDC8(v0, v1);
  return sub_216B625B0(&qword_267B910D0, v2);
}

void sub_216B6A984(_Unwind_Exception *a1)
{
}

uint64_t sub_216B6A9A0(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  *(void *)BOOL result = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)result &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_WORD *)(result + 8) = *(_WORD *)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)(result + 16) = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void sub_216B6AA04(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      std::string v10 = v8;
    }
    else
    {
      do
      {
        sub_2168D2318(v8 + 2, v4 + 2);
        *((_WORD *)v8 + 12) = *((_WORD *)v4 + 12);
        sub_2168D2318(v8 + 4, v4 + 4);
        std::string v10 = (void *)*v8;
        sub_2168D22B4(a1, v8);
        uint64_t v4 = (uint64_t *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        uint64_t v8 = v10;
      }
      while (!v11);
    }
    sub_2169E3FBC((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_216B6AB10(a1, v4 + 2);
    uint64_t v4 = (uint64_t *)*v4;
  }
}

void sub_216B6AAE4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_2169E3FBC(v1, v2);
  __cxa_rethrow();
}

void sub_216B6AAFC(_Unwind_Exception *a1)
{
}

void *sub_216B6AB10(void *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x28uLL);
  void *v4 = 0;
  v4[1] = 0;
  sub_216B6ABC4((uint64_t)(v4 + 2), a2);
  v4[1] = bswap64(0x9E3779B97F4A7C55 * (v4[2] & 0xFFFFFFFFFFFFFFF8));
  return sub_2168D22B4(a1, v4);
}

void sub_216B6ABA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_2169E49A4(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_216B6ABC4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)BOOL result = *a2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)result &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  uint64_t v3 = a2[2];
  *(void *)(result + 16) = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_216B6AC28(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v7 = *a2;
  *(void *)a1 = *a2;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 8));
  sub_2168EE4C4((void *)(a1 + 16), a3);
  sub_2168EE4C4((void *)(a1 + 32), a4);
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v8 = MEMORY[0x263F8C258];
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = v8;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 136) = 0;
  return a1;
}

void sub_216B6ACD0(_Unwind_Exception *a1)
{
  sub_2168EE084(v2);
  if ((*v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

double sub_216B6AD04(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 8) = *a3;
  *(void *)(a1 + 24) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v5 = MEMORY[0x263F8C258];
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = v5;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 136) = 0;
  return result;
}

uint64_t *sub_216B6AD68()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B6AE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216B6AE6C(uint64_t a1)
{
  sub_216B6AEA8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216B6AEA8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_216B6AEEC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_216B6AEEC(uint64_t a1)
{
  char v4 = (void **)(a1 + 40);
  sub_216B6EB74(&v4);
  uint64_t result = sub_2168EE084(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_216B6AF5C(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[1] = &unk_26C7501AB;
  LOBYTE(v11[0]) = *a3;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = &off_26C7553B0;
  uint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6B060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6B0C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  sub_2168EE084(a1 + 32);
  sub_2168EE084(a1 + 16);
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t sub_216B6B144(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[1] = &unk_26C75031B;
  LOBYTE(v11[0]) = *a3;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = &off_26C74FB20;
  uint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6B248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6B2A8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[1] = &unk_26C750543;
  LODWORD(v11[0]) = *a3;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = &off_26C74FA68;
  uint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6B3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6B40C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[1] = &unk_26C7505FB;
  LODWORD(v11[0]) = *a3;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = &off_26C74F9B0;
  uint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6B510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6B570(uint64_t a1, uint64_t a2, void *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[0] = *a3;
  v11[1] = &unk_26C750823;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = &off_26C755528;
  uint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6B670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6B6D0(uint64_t a1, uint64_t a2, void *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[0] = *a3;
  v11[1] = &unk_26C7508DB;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = &off_26C755610;
  uint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6B7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6B830(uint64_t a1, uint64_t a2, _WORD *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[1] = (char *)&off_26C750990 + 3;
  LOWORD(v11[0]) = *a3;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = off_26C74ED78;
  uint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6B934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6B994(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[1] = &unk_26C750A4B;
  LODWORD(v11[0]) = *a3;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = &off_26C74ECC0;
  uint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6BA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6BAF8(uint64_t a1, uint64_t a2, void *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[1] = &unk_26C750B03;
  v11[0] = *a3;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = &off_26C74EE30;
  uint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6BBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6BC5C(uint64_t a1, uint64_t a2, void *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[0] = *a3;
  v11[1] = (char *)&off_26C755728 + 1;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = &off_26C7557F0;
  uint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6BD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6BDBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v11[2] = *(unsigned int **)MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[1] = (unsigned int *)&off_26C750BB8;
  sub_21691B31C(v11, a3);
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = off_26C7558C0;
  uint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2169B1EE4(v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6BEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6BF28(uint64_t a1, uint64_t a2, void *a3)
{
  v12[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10, a2, 0);
  v12[0] = *a3;
  v12[1] = (char *)&off_26C750C70 + 1;
  if ((v12[0] & 7) != 0)
  {
    unint64_t v5 = v12[0] & 0xFFFFFFFFFFFFFFF8;
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v12[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      v12[0] = v5;
    }
  }
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  v11[1] = off_26C755978;
  uint64_t v6 = operator new(0x30uLL);
  *((void *)v6 + 4) = 0;
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  atomic_store(0, (unsigned int *)v6 + 10);
  v11[0] = v6;
  atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v10, v12, v11);
  sub_2168EE084((uint64_t)v11);
  sub_2169B2E0C(v8);
  sub_2168EE084((uint64_t)v12);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6C044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6C0A4(uint64_t a1, uint64_t a2, long long *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[1] = &off_26C755A30;
  sub_2169B3DA8(v11, a3);
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = off_26C755AE8;
  unint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)unint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2169B4408(v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6C1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6C210(uint64_t a1, uint64_t a2)
{
  void v9[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v7, a2, 0);
  v9[1] = (char *)&off_26C75AC58 + 3;
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  v8[1] = &off_26C755BA0;
  uint64_t v3 = operator new(0x30uLL);
  *((void *)v3 + 4) = 0;
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  atomic_store(0, (unsigned int *)v3 + 10);
  v8[0] = v3;
  atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v7, v9, v8);
  sub_2168EE084((uint64_t)v8);
  sub_2168F83DC((uint64_t)v5);
  sub_2168EE084((uint64_t)v9);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6C308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6C368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v11[2] = *(unsigned int **)MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[1] = (unsigned int *)&off_26C755C70;
  sub_2169B8284(v11, a3);
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = off_26C755D28;
  unint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)unint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2169B88CC(v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6C46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6C4D4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  v12[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10, a2, 0);
  v12[1] = (char *)&off_26C74E420 + 2;
  unint64_t v5 = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)unint64_t v5 = *a3;
  atomic_store(0, v5 + 4);
  v12[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 4, 1u, memory_order_relaxed);
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  v11[1] = off_26C74F058;
  uint64_t v6 = operator new(0x30uLL);
  *((void *)v6 + 4) = 0;
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  atomic_store(0, (unsigned int *)v6 + 10);
  v11[0] = v6;
  atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v10, v12, v11);
  sub_2168EE084((uint64_t)v11);
  sub_2168F83DC((uint64_t)v8);
  sub_2168EE084((uint64_t)v12);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6C5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6C658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10, a2, 0);
  v12[1] = (char *)&off_26C74E648 + 2;
  unint64_t v5 = operator new(0x20uLL);
  *(_OWORD *)unint64_t v5 = *(_OWORD *)a3;
  *((void *)v5 + 2) = *(void *)(a3 + 16);
  atomic_store(0, (unsigned int *)v5 + 6);
  v12[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 6, 1u, memory_order_relaxed);
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  v11[1] = off_26C74F280;
  uint64_t v6 = operator new(0x30uLL);
  *((void *)v6 + 4) = 0;
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  atomic_store(0, (unsigned int *)v6 + 10);
  v11[0] = v6;
  atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v10, v12, v11);
  sub_2168EE084((uint64_t)v11);
  sub_2168F83DC((uint64_t)v8);
  sub_2168EE084((uint64_t)v12);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6C77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6C7E4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  v13[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11, a2, 0);
  v13[1] = (char *)&off_26C74E870 + 2;
  unint64_t v5 = operator new(0x28uLL);
  long long v6 = a3[1];
  *(_OWORD *)unint64_t v5 = *a3;
  *((_OWORD *)v5 + 1) = v6;
  atomic_store(0, (unsigned int *)v5 + 8);
  v13[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 8, 1u, memory_order_relaxed);
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  v12[1] = off_26C74F4A8;
  uint64_t v7 = operator new(0x30uLL);
  *((void *)v7 + 4) = 0;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  atomic_store(0, (unsigned int *)v7 + 10);
  v12[0] = v7;
  atomic_fetch_add_explicit((atomic_uint *volatile)v7 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v11, v13, v12);
  sub_2168EE084((uint64_t)v12);
  sub_2168F83DC((uint64_t)v9);
  sub_2168EE084((uint64_t)v13);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6C900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6C968(uint64_t a1, uint64_t a2, void *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[0] = *a3;
  v11[1] = (char *)&off_26C74E368 + 3;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = off_26C74EEE8;
  unint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)unint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6CA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6CAC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v12[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10, a2, 0);
  v12[1] = (char *)&off_26C74E590 + 2;
  unint64_t v5 = operator new(0x10uLL);
  *(void *)unint64_t v5 = *(void *)a3;
  _OWORD v5[2] = *(_DWORD *)(a3 + 8);
  atomic_store(0, v5 + 3);
  v12[0] = v5;
  atomic_fetch_add_explicit(v5 + 3, 1u, memory_order_relaxed);
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  v11[1] = off_26C74F110;
  long long v6 = operator new(0x30uLL);
  *((void *)v6 + 4) = 0;
  *(_OWORD *)long long v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  atomic_store(0, (unsigned int *)v6 + 10);
  v11[0] = v6;
  atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v10, v12, v11);
  sub_2168EE084((uint64_t)v11);
  sub_2168F83DC((uint64_t)v8);
  sub_2168EE084((uint64_t)v12);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6CBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6CC54(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  void v12[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10, a2, 0);
  v12[1] = (char *)&off_26C74E7B8 + 2;
  unint64_t v5 = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)unint64_t v5 = *a3;
  atomic_store(0, v5 + 4);
  v12[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 4, 1u, memory_order_relaxed);
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  v11[1] = off_26C74F338;
  long long v6 = operator new(0x30uLL);
  *((void *)v6 + 4) = 0;
  *(_OWORD *)long long v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  atomic_store(0, (unsigned int *)v6 + 10);
  v11[0] = v6;
  atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v10, v12, v11);
  sub_2168EE084((uint64_t)v11);
  sub_2168F83DC((uint64_t)v8);
  sub_2168EE084((uint64_t)v12);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6CD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6CDD8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[1] = (char *)&off_26C74E2B0 + 3;
  LODWORD(v11[0]) = *a3;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = off_26C74EFA0;
  unint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)unint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6CEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6CF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[1] = (char *)&off_26C74E4D8 + 3;
  LODWORD(v11[0]) = *(_DWORD *)a3;
  WORD2(v11[0]) = *(_WORD *)(a3 + 4);
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = off_26C74F1C8;
  unint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)unint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6D048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6D0A8(uint64_t a1, uint64_t a2, void *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[0] = *a3;
  v11[1] = (char *)&off_26C74E700 + 3;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = off_26C74F3F0;
  unint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)unint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6D1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6D208(uint64_t a1, uint64_t a2, void *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[0] = *a3;
  v11[1] = (char *)&off_26C755DE0 + 3;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = off_26C755E98;
  unint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)unint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6D308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6D368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v12[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10, a2, 0);
  v12[1] = (char *)&off_26C755F50 + 2;
  unint64_t v5 = operator new(0x10uLL);
  *(void *)unint64_t v5 = *(void *)a3;
  _OWORD v5[2] = *(_DWORD *)(a3 + 8);
  atomic_store(0, v5 + 3);
  v12[0] = v5;
  atomic_fetch_add_explicit(v5 + 3, 1u, memory_order_relaxed);
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  v11[1] = off_26C756008;
  long long v6 = operator new(0x30uLL);
  *((void *)v6 + 4) = 0;
  *(_OWORD *)long long v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  atomic_store(0, (unsigned int *)v6 + 10);
  v11[0] = v6;
  atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v10, v12, v11);
  sub_2168EE084((uint64_t)v11);
  sub_2168F83DC((uint64_t)v8);
  sub_2168EE084((uint64_t)v12);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6D48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6D4F4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  void v12[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10, a2, 0);
  v12[1] = (char *)&off_26C7560C0 + 2;
  unint64_t v5 = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)unint64_t v5 = *a3;
  atomic_store(0, v5 + 4);
  v12[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 4, 1u, memory_order_relaxed);
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  v11[1] = off_26C756178;
  long long v6 = operator new(0x30uLL);
  *((void *)v6 + 4) = 0;
  *(_OWORD *)long long v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  atomic_store(0, (unsigned int *)v6 + 10);
  v11[0] = v6;
  atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v10, v12, v11);
  sub_2168EE084((uint64_t)v11);
  sub_2168F83DC((uint64_t)v8);
  sub_2168EE084((uint64_t)v12);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6D610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6D678(uint64_t a1, uint64_t a2, void *a3)
{
  void v11[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v9, a2, 0);
  v11[0] = *a3;
  v11[1] = (char *)&off_26C74EB50 + 1;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  v10[1] = off_26C74F788;
  unint64_t v5 = operator new(0x30uLL);
  *((void *)v5 + 4) = 0;
  *(_OWORD *)unint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  atomic_store(0, (unsigned int *)v5 + 10);
  v10[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v9, v11, v10);
  sub_2168EE084((uint64_t)v10);
  sub_2168F83DC((uint64_t)v7);
  sub_2168EE084((uint64_t)v11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6D778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6D7D8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  void v12[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10, a2, 0);
  v12[1] = &off_26C74EA98;
  unint64_t v5 = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)unint64_t v5 = *a3;
  atomic_store(0, v5 + 4);
  v12[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 4, 1u, memory_order_relaxed);
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  v11[1] = off_26C74F6D0;
  long long v6 = operator new(0x30uLL);
  *((void *)v6 + 4) = 0;
  *(_OWORD *)long long v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  atomic_store(0, (unsigned int *)v6 + 10);
  v11[0] = v6;
  atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v10, v12, v11);
  sub_2168EE084((uint64_t)v11);
  sub_2168F83DC((uint64_t)v8);
  sub_2168EE084((uint64_t)v12);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6D8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6D958(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  v13[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11, a2, 0);
  v13[1] = &off_26C74EC08;
  unint64_t v5 = operator new(0x28uLL);
  long long v6 = a3[1];
  *(_OWORD *)unint64_t v5 = *a3;
  *((_OWORD *)v5 + 1) = v6;
  atomic_store(0, (unsigned int *)v5 + 8);
  v13[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 8, 1u, memory_order_relaxed);
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  v12[1] = off_26C74F840;
  uint64_t v7 = operator new(0x30uLL);
  *((void *)v7 + 4) = 0;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  atomic_store(0, (unsigned int *)v7 + 10);
  v12[0] = v7;
  atomic_fetch_add_explicit((atomic_uint *volatile)v7 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v11, v13, v12);
  sub_2168EE084((uint64_t)v12);
  sub_2168F83DC((uint64_t)v9);
  sub_2168EE084((uint64_t)v13);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6DA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6DAD8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  v13[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11, a2, 0);
  v13[1] = (char *)&off_26C7526A0 + 2;
  unint64_t v5 = operator new(0x28uLL);
  long long v6 = a3[1];
  *(_OWORD *)unint64_t v5 = *a3;
  *((_OWORD *)v5 + 1) = v6;
  atomic_store(0, (unsigned int *)v5 + 8);
  v13[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 8, 1u, memory_order_relaxed);
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  v12[1] = off_26C756230;
  uint64_t v7 = operator new(0x30uLL);
  *((void *)v7 + 4) = 0;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  atomic_store(0, (unsigned int *)v7 + 10);
  v12[0] = v7;
  atomic_fetch_add_explicit((atomic_uint *volatile)v7 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v11, v13, v12);
  sub_2168EE084((uint64_t)v12);
  sub_2168F83DC((uint64_t)v9);
  sub_2168EE084((uint64_t)v13);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6DBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6DC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v14[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v12, a2, 0);
  v14[1] = (char *)&off_26C752928 + 2;
  unint64_t v5 = operator new(0x50uLL);
  long long v6 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v5 + 2) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v5 + 3) = v6;
  *((void *)v5 + 8) = *(void *)(a3 + 64);
  long long v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)unint64_t v5 = *(_OWORD *)a3;
  *((_OWORD *)v5 + 1) = v7;
  atomic_store(0, (unsigned int *)v5 + 18);
  v14[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 18, 1u, memory_order_relaxed);
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  v13[1] = off_26C7562E8;
  uint64_t v8 = operator new(0x30uLL);
  *((void *)v8 + 4) = 0;
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  atomic_store(0, (unsigned int *)v8 + 10);
  v13[0] = v8;
  atomic_fetch_add_explicit((atomic_uint *volatile)v8 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v12, v14, v13);
  sub_2168EE084((uint64_t)v13);
  sub_2168F83DC((uint64_t)v10);
  sub_2168EE084((uint64_t)v14);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6DD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6DDF0(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  v16[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v14, a2, 0);
  v16[1] = (char *)&off_26C74E928 + 2;
  unint64_t v5 = operator new(0x88uLL);
  long long v6 = a3[5];
  *((_OWORD *)v5 + 4) = a3[4];
  *((_OWORD *)v5 + 5) = v6;
  long long v7 = a3[7];
  *((_OWORD *)v5 + 6) = a3[6];
  *((_OWORD *)v5 + 7) = v7;
  long long v8 = a3[1];
  *(_OWORD *)unint64_t v5 = *a3;
  *((_OWORD *)v5 + 1) = v8;
  long long v9 = a3[3];
  *((_OWORD *)v5 + 2) = a3[2];
  *((_OWORD *)v5 + 3) = v9;
  atomic_store(0, (unsigned int *)v5 + 32);
  v16[0] = v5;
  atomic_fetch_add_explicit((atomic_uint *volatile)v5 + 32, 1u, memory_order_relaxed);
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  v15[1] = off_26C74F560;
  uint64_t v10 = operator new(0x30uLL);
  *((void *)v10 + 4) = 0;
  *(_OWORD *)uint64_t v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  atomic_store(0, (unsigned int *)v10 + 10);
  v15[0] = v10;
  atomic_fetch_add_explicit((atomic_uint *volatile)v10 + 10, 1u, memory_order_relaxed);
  sub_216B6AC28(a1, &v14, v16, v15);
  sub_2168EE084((uint64_t)v15);
  sub_2168F83DC((uint64_t)v12);
  sub_2168EE084((uint64_t)v16);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_216B6DF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *sub_216B6DF8C(atomic_ullong *a1)
{
  uint64_t result = sub_216B6DFD4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType::~SdfValueRoleNames_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *sub_216B6DFD4()
{
  unint64_t v0 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType::SdfValueRoleNames_StaticTokenType(v0);
  return v0;
}

void sub_216B6E004(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216B6E024()
{
  return 1;
}

unint64_t sub_216B6E02C()
{
  return 0xFD5E9E798547F38FLL;
}

uint64_t sub_216B6E040()
{
  return 1;
}

uint64_t sub_216B6E048()
{
  return 1;
}

uint64_t sub_216B6E054()
{
  return 0;
}

void *sub_216B6E060(uint64_t a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_216B6E070()
{
  return &unk_26C755210;
}

uint64_t sub_216B6E07C()
{
  return 0;
}

uint64_t sub_216B6E084()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216B6E090()
{
  return 0;
}

uint64_t sub_216B6E098()
{
  return 0;
}

BOOL sub_216B6E0A0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217468799 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216B6E0DC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755210, a2, a3);
}

void *sub_216B6E100()
{
  return &unk_26C755210;
}

void sub_216B6E110(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&off_26C75AC58 + 3;
}

uint64_t sub_216B6E124(uint64_t a1, int a2, char *__s)
{
  sub_216779094(__p, __s);
  if (a2)
  {
    char v5 = 0;
    *(unsigned char *)a1 = 0;
  }
  else
  {
    if (SHIBYTE(v8) < 0)
    {
      sub_216778F24((unsigned char *)a1, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)__p;
      *(void *)(a1 + 16) = v8;
    }
    char v5 = 1;
  }
  *(unsigned char *)(a1 + 24) = v5;
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_216B6E1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6E1CC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021747579ELL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C759CB0);
}

uint64_t sub_216B6E258(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216B6E1CC(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      char v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216B6E2EC, (uint64_t)&stru_26C759CB0);
  }
}

uint64_t sub_216B6E2F0@<X0>(void *a1@<X8>)
{
  sub_216B6E344(v4);
  uint64_t v2 = (uint64_t (*)(void))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  a1[2] = &stru_26C759CB0;
  return v2(0);
}

void sub_216B6E344(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x30uLL);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v4 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v3, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(v2, __p, &v4, v3);
  *a1 = v2;
  a1[1] = sub_216B6E430;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v4 + 1);
  sub_21697C414(&v4);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B6E404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_21697B754(&a11);
  if (a17 < 0) {
    operator delete(__p);
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_216B6E430(uint64_t a1)
{
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_21697C414((_DWORD *)(a1 + 24));
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    operator delete((void *)a1);
  }
}

void sub_216B6E498(std::string *__dst, const std::string *a2)
{
  if (__dst[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (__dst[1].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(__dst, a2);
    }
  }
  else if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst->__r_.__value_.__l.__data_);
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_216778F24(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

uint64_t sub_216B6E53C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217475307 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C75A558);
}

uint64_t sub_216B6E5C8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216B6E53C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216B6E65C, (uint64_t)&stru_26C75A558);
  }
}

uint64_t sub_216B6E660@<X0>(void *a1@<X8>)
{
  sub_216B6E6B4(v4);
  uint64_t v2 = (uint64_t (*)(void))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  a1[2] = &stru_26C75A558;
  return v2(0);
}

void sub_216B6E6B4(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x38uLL);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v5 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v4, 0.0, 1.0);
  long long v3 = 0;
  pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(v2, __p, &v5, v4, &v3);
  *a1 = v2;
  a1[1] = sub_216B6E7C8;
  sub_2168EBBB8(&v3, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v5 + 1);
  sub_21697C414(&v5);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B6E788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, int a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_2168EBBB8(&a10, 0);
  sub_21697B754(&a13);
  if (a19 < 0) {
    operator delete(__p);
  }
  operator delete(v19);
  _Unwind_Resume(a1);
}

void sub_216B6E7C8(uint64_t a1)
{
  if (a1)
  {
    sub_2168EBBB8((void ***)(a1 + 48), 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
    sub_21697C414((_DWORD *)(a1 + 24));
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    operator delete((void *)a1);
  }
}

uint64_t sub_216B6E83C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 8) = *(void *)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  *(void *)(a1 + 16) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2168EE4C4((void *)(a1 + 24), (void *)(a3 + 16));
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_216B6E964((uint64_t *)(a1 + 40), *(uint64_t **)(a3 + 32), *(uint64_t **)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  long long v7 = *(_OWORD *)(a3 + 56);
  long long v8 = *(_OWORD *)(a3 + 72);
  *(void *)(a1 + 96) = *(void *)(a3 + 88);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  return a1;
}

void sub_216B6E918(_Unwind_Exception *a1)
{
  sub_2168EE084(v2);
  uint64_t v4 = v1[2];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_216B6E964(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_216782E84(result, a4);
    uint64_t result = sub_216B6E9EC((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_216B6E9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216B6EB74(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_216B6E9EC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _OWORD v8[2] = &v11;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216B6EA78(v4, v6);
      v6 += 3;
      uint64_t v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_216B6EAC0((uint64_t)v8);
  return v4;
}

uint64_t *sub_216B6EA78(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *result &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = a2[2];
  result[1] = a2[1];
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_216B6EAC0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216B6EB0C(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

void sub_216B6EB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3;
    do
    {
      long long v7 = *(std::__shared_weak_count **)(v6 - 8);
      if (v7) {
        sub_216784EC4(v7);
      }
      uint64_t v8 = *(void *)(v6 - 24);
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v6 -= 24;
    }
    while (v6 != a5);
  }
}

void sub_216B6EB74(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_216B6EBC8((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_216B6EBC8(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 24)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(i - 8);
    if (v5) {
      sub_216784EC4(v5);
    }
    uint64_t v6 = *(void *)(i - 24);
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_216B6EC34(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  sub_2168EDFA8((void *)(a1 + 24), (void *)(a2 + 24));
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  long long v4 = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = v5;
  return a1;
}

void sub_216B6ECB8(int64x2_t *a1, uint64_t a2, char *a3)
{
  unint64_t v5 = *(void *)(a2 + 232);
  if (v5)
  {
    int v6 = (int)a3;
    if (v5 <= (int)a3)
    {
      if (a1[2].i64[1])
      {
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue((int *)a2, *(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x49uLL)) + 56 * (a1[2].i64[0] % 0x49uLL));
        sub_216B6F1FC(a1);
      }
    }
    else
    {
      uint64_t v7 = a2 + 216;
      uint64_t v8 = (int)a3;
      pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::BeginTuple((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)a2, (const char *)a2, a3);
      if (*(void *)(v7 + 8 * v6))
      {
        unint64_t v11 = 0;
        uint64_t v12 = (v6 + 1);
        do
        {
          sub_216B6ECB8(a1, a2, v12);
          ++v11;
        }
        while (v11 < *(void *)(v7 + 8 * v8));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::EndTuple((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)a2, v9, v10);
    }
  }
  else
  {
    while (a1[2].i64[1])
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue((int *)a2, *(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x49uLL)) + 56 * (a1[2].i64[0] % 0x49uLL));
      sub_216B6F1FC(a1);
    }
  }
}

uint64_t sub_216B6EE2C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 73 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    sub_216B6EEE4(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  }
  uint64_t result = sub_2169C3F64(v8, a2);
  ++a1[5];
  return result;
}

void sub_216B6EEE4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x49;
  unint64_t v4 = v2 - 73;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::string::size_type v34 = (char *)sub_21677CB28(v5, v33);
      BOOL v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    std::string v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF8uLL);
      sub_216832B24(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF8uLL);
    sub_216832C3C((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      std::string::size_type v34 = (char *)sub_21677CB28((uint64_t)(a1 + 3), v46);
      BOOL v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_21677CB28((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF8uLL);
  sub_216832D5C(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_216832E74((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_216B6F1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_216B6F1FC(int64x2_t *a1)
{
  sub_216976F30(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x49uLL)) + 56 * (a1[2].i64[0] % 0x49uLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_21746C150);

  return sub_216B6F280((uint64_t)a1, 1);
}

uint64_t sub_216B6F280(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x49) {
    a2 = 1;
  }
  if (v2 < 0x92) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 73;
  }
  return v4 ^ 1u;
}

uint64_t sub_216B6F2E0(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  if (v3 == v2)
  {
    int v4 = a1 + 5;
    BOOL v3 = (void **)a1[1];
  }
  else
  {
    int v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x49];
    uint64_t v7 = (uint64_t)*v6 + 56 * (v5 % 0x49);
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0x49] + 56 * ((a1[5] + v5) % 0x49);
    if (v7 != v8)
    {
      do
      {
        uint64_t v7 = sub_216976F30(v7) + 56;
        if (v7 - (void)*v6 == 4088)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      unint64_t v2 = (void **)a1[1];
      BOOL v3 = (void **)a1[2];
    }
  }
  void *v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 36;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 73;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v13 = *v2++;
    operator delete(v13);
  }

  return sub_21683347C((uint64_t)a1);
}

uint64_t *sub_216B6F428()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216B6F554((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_216B6F508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_216B6F554(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  BOOL v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B6F5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B6F5E8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216B6F660((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216B6F660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 24);
      a3 -= 24;
      *(void *)(v7 - 24) = v8;
      *(void *)a3 = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_216B6F6FC((uint64_t)v11);
  return v9;
}

uint64_t sub_216B6F6FC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216B6F734((uint64_t *)a1);
  }
  return a1;
}

void sub_216B6F734(uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_216B6F7AC(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_216B6F7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void **)(a2 + 32); i != *(void **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = (std::__shared_weak_count *)i[2];
    if (v6) {
      sub_216784EC4(v6);
    }
    if ((*i & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*i & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t i = (void *)(*(void *)(a2 + 32) + 24);
  }
}

uint64_t sub_216B6F824(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_216B6F85C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = (void *)(i - 24);
    *(void *)(a1 + 16) = i - 24;
    uint64_t v6 = *(std::__shared_weak_count **)(i - 8);
    if (v6) {
      sub_216784EC4(v6);
    }
    if ((*v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void *sub_216B6F8CC(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  long long v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v7;
  sub_216B6ABC4((uint64_t)(i + 2), a3);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  void *v13 = i;
  *(void *)(v20 + 8 * v3) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216B6FB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_2169E49A4(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216B6FB34(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v3 = *((void *)a2 + 14);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (a2[95] < 0) {
      operator delete(*((void **)a2 + 9));
    }
    if (a2[71] < 0) {
      operator delete(*((void **)a2 + 6));
    }
    sub_2168EE084((uint64_t)(a2 + 32));
    sub_2168EE084((uint64_t)(a2 + 16));
    if ((*(void *)a2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

void sub_216B6FBD0(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry **a1, pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::~Sdf_ValueTypeRegistry(v3);
    operator delete(v4);
  }
}

uint64_t sub_216B6FC10(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v5 = &unk_26C7501AB;
  v4[0] = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v4, 0);
  return sub_2168EE084((uint64_t)v4);
}

void sub_216B6FC8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216B6FCA0(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _OWORD v7[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  v7[1] = off_26C755978;
  uint64_t v4 = operator new(0x30uLL);
  *((void *)v4 + 4) = 0;
  *(_OWORD *)uint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  atomic_store(0, (unsigned int *)v4 + 10);
  v7[0] = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 10, 1u, memory_order_relaxed);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7, 0);
  sub_2168EE084((uint64_t)v7);
  sub_2169B2E0C(v5);
}

void sub_216B6FD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

void sub_216B6FD98(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _OWORD v5[2] = *(unsigned int **)MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = 0;
  v5[1] = (unsigned int *)&off_26C74DD80;
  sub_2168EEEA8(v5, (const void ****)&v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v5, 0);
  sub_2168EE084((uint64_t)v5);
  sub_2168EBBB8(&v4, 0);
}

void sub_216B6FE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char a10)
{
}

void sub_216B6FE5C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _OWORD v8[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v4);
  v8[1] = &off_26C755A30;
  sub_2169B3DA8(v8, (long long *)v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8, 0);
  sub_2168EE084((uint64_t)v8);
  if (v7 < 0) {
    operator delete(__p);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_216B6FF10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084(v2 - 40);
  sub_21682E578((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B6FF3C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  double v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  v4[0] = 0;
  v4[1] = (char *)&off_26C750C70 + 1;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v4, 0);
  return sub_2168EE084((uint64_t)v4);
}

void sub_216B6FFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216B6FFC8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _OWORD v6[2] = *(unsigned int **)MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  v6[1] = (unsigned int *)&off_26C750BB8;
  sub_21691B31C(v6, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_2168EE084((uint64_t)v6);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B7006C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B70098()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
}

void sub_216B70190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084(v2 - 40);
  sub_216980BCC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B701BC(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v5 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v4, 0);
  return sub_2168EE084((uint64_t)v4);
}

void sub_216B70228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216B7023C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _OWORD v7[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  v7[1] = off_26C7558C0;
  uint64_t v4 = operator new(0x30uLL);
  *((void *)v4 + 4) = 0;
  *(_OWORD *)uint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  atomic_store(0, (unsigned int *)v4 + 10);
  v7[0] = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 10, 1u, memory_order_relaxed);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7, 0);
  sub_2168EE084((uint64_t)v7);
  sub_2169B1EE4(v5);
}

void sub_216B702F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

uint64_t sub_216B70334(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _OWORD v6[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  v6[1] = &off_26C757FE0;
  uint64_t v4 = operator new(0x18uLL);
  *(void *)uint64_t v4 = MEMORY[0x263F8C258];
  double v4[2] = 0;
  atomic_store(0, v4 + 4);
  v6[0] = v4;
  atomic_fetch_add_explicit(v4 + 4, 1u, memory_order_relaxed);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  return sub_2168EE084((uint64_t)v6);
}

void sub_216B703E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B703F4(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  double v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  v4[0] = 0;
  v4[1] = &unk_26C750B03;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v4, 0);
  return sub_2168EE084((uint64_t)v4);
}

void sub_216B7046C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B70480(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v5 = &unk_26C750543;
  int v4 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v4, 0);
  return sub_2168EE084((uint64_t)&v4);
}

void sub_216B704FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216B70510(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _OWORD v6[2] = *(unsigned int **)MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  memset(v4, 0, sizeof(v4));
  v6[1] = (unsigned int *)&off_26C756C08;
  sub_2169DBAB4(v6, v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_2168EE084((uint64_t)v6);
  uint64_t v5 = (void **)v4;
  sub_216889A04(&v5);
}

void sub_216B705B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  char v7 = va_arg(va2, void **);
  sub_2168EE084((uint64_t)va2);
  va_copy((va_list)v7, va);
  sub_216889A04((void ***)va1);
  _Unwind_Resume(a1);
}

void sub_216B705E0()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp();
}

void sub_216B706D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084(v2 - 40);
  sub_2169D8044((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216B70704(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v5 = (char *)&off_26C759D30 + 3;
  int v4 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v4, 0);
  return sub_2168EE084((uint64_t)&v4);
}

void sub_216B70780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216B70794()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp();
}

void sub_216B7088C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084(v2 - 40);
  sub_2169D5040((void **)va);
  _Unwind_Resume(a1);
}

void sub_216B708B8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _OWORD v6[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  v5[0] = 0;
  v5[1] = 0;
  int v4 = v5;
  v6[1] = &off_26C758890;
  sub_216A9EC50(v6, (uint64_t)&v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_2168EE084((uint64_t)v6);
  sub_216997EC4((uint64_t)&v4, v5[0]);
}

void sub_216B70960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12)
{
}

void sub_216B70988(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _OWORD v6[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  v5[0] = 0;
  v5[1] = 0;
  int v4 = v5;
  v6[1] = &off_26C7584A0;
  sub_216A9AFA0(v6, (uint64_t)&v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_2168EE084((uint64_t)v6);
  sub_21698F21C((uint64_t)&v4, v5[0]);
}

void sub_216B70A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12)
{
}

uint64_t sub_216B70A58(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v5 = (char *)&off_26C758118 + 3;
  int v4 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v4, 0);
  return sub_2168EE084((uint64_t)&v4);
}

void sub_216B70AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216B70AE8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _OWORD v6[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  memset(v4, 0, sizeof(v4));
  v6[1] = &off_26C756898;
  sub_2169CBC44(v6, v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_2168EE084((uint64_t)v6);
  uint64_t v5 = v4;
  sub_216782F20((void ***)&v5);
}

void sub_216B70B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  char v7 = va_arg(va2, void **);
  sub_2168EE084((uint64_t)va2);
  va_copy((va_list)v7, va);
  sub_216782F20((void ***)va1);
  _Unwind_Resume(a1);
}

void sub_216B70BB8(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _OWORD v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  v7[1] = (unsigned int *)&off_26C7567E0;
  sub_2169CB460(v7, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7, 0);
  sub_2168EE084((uint64_t)v7);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

void sub_216B70C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_216B70C88()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
}

void sub_216B70D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084(v2 - 40);
  sub_2169CBCC8((void **)va);
  _Unwind_Resume(a1);
}

void sub_216B70DAC(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _OWORD v6[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  v5[0] = 0;
  v5[1] = 0;
  int v4 = (const void **)v5;
  v6[1] = &off_26C756CD0;
  sub_2169DC07C(v6, &v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_2168EE084((uint64_t)v6);
  sub_2167877AC((uint64_t)&v4, v5[0]);
}

void sub_216B70E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12)
{
}

uint64_t sub_216B70E7C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v5 = (char *)&off_26C756E60 + 3;
  int v4 = 0;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v2, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v4, 0);
  return sub_2168EE084((uint64_t)&v4);
}

void sub_216B70EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216B70F0C(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _OWORD v6[2] = *(unsigned int **)MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  memset(v4, 0, sizeof(v4));
  v6[1] = (unsigned int *)&off_26C756D88;
  sub_2169DC54C(v6, v4);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::_CreateField(v3, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v6, 0);
  sub_2168EE084((uint64_t)v6);
  uint64_t v5 = (void **)v4;
  sub_216981168(&v5);
}

void sub_216B70FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  char v7 = va_arg(va2, void **);
  sub_2168EE084((uint64_t)va2);
  va_copy((va_list)v7, va);
  sub_216981168((void ***)va1);
  _Unwind_Resume(a1);
}

void sub_216B70FDC(uint64_t a1, char *a2)
{
  sub_216779094(__p, a2);
  *(void *)(a1 + 8) = &off_26C750BB8;
  sub_21691B31C((unsigned int **)a1, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216B71034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *sub_216B71050(atomic_ullong *a1)
{
  uint64_t result = sub_216B71098();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType::~SdfMetadataDisplayGroupTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *sub_216B71098()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::SdfMetadataDisplayGroupTokens_StaticTokenType::SdfMetadataDisplayGroupTokens_StaticTokenType(v0);
  return v0;
}

void sub_216B710C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216B710DC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_216B71160(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C((unint64_t *)(a2 + 8), &v6);
    uint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_216B7122C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216B71244(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v8 = a2;
  *((void *)&v8 + 1) = a3;
  uint64_t v4 = operator new(0x68uLL);
  v7[0] = &unk_26C74B5E8;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v6);
  sub_216B71330((uint64_t)v4, a1, &v8, (uint64_t)v7);
  (*(void (**)(void *))v7[0])(v7);
  return v4;
}

void sub_216B712F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(void))
{
  (*a11)(&a11);
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_216B71330(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  *(void *)a1 = &unk_26C75AD20;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = *a2;
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 16))(a4, a1 + 56);
  *(_OWORD *)(a1 + 88) = *a3;
  return a1;
}

void sub_216B713CC(_Unwind_Exception *a1, const void *a2)
{
  uint64_t v4 = *((void *)v2 + 6);
  if (v4) {
    sub_217324248(v4);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(v2, a2);
  _Unwind_Resume(a1);
}

void sub_216B713EC(uint64_t a1)
{
  *(void *)a1 = &unk_26C75AD20;
  (**(void (***)(void))(a1 + 56))();
  uint64_t v3 = *(atomic_uint **)(a1 + 48);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }

  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *)a1, v2);
}

void sub_216B714A0(uint64_t a1)
{
  *(void *)a1 = &unk_26C75AD20;
  (**(void (***)(void))(a1 + 56))();
  uint64_t v3 = *(atomic_uint **)(a1 + 48);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *)a1, v2);

  operator delete(v4);
}

uint64_t sub_216B71558(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v9 = a1[6];
  long long v8 = a1 + 6;
  if (!v9) {
    return 0;
  }
  long long v13 = v8 - 1;
  uint64_t v14 = sub_216850B68(v8);
  uint64_t v15 = *v13;
  BOOL v16 = !*(unsigned char *)(v14 + 14) || v15 == 0;
  if (v16
    || (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 7)) & 1) != 0)
  {
    return 0;
  }
  if (*a7 != a7[1])
  {
    uint64_t v26 = v15;
    uint64_t v22 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
    uint64_t v23 = sub_216B71994(v13) + 8;
    if (v22) {
      uint64_t v24 = a6;
    }
    else {
      uint64_t v24 = MEMORY[0x263F8C288];
    }
    unint64_t v25 = (char *)v22;
    uint64_t v15 = v26;
  }
  unint64_t v18 = (void (*)(void *, uint64_t))a1[11];
  uint64_t v19 = a1[12];
  uint64_t v20 = (void *)(v15 + (v19 >> 1));
  if (v19) {
    unint64_t v18 = *(void (**)(void *, uint64_t))(*v20 + v18);
  }
  v18(v20, a2);
  if (*a7 != a7[1]) {
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery((uint64_t)a1, a7, v21);
  }
  return 1;
}

uint64_t sub_216B716B8(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v13);
  if (v13[0] == v3)
  {
    v13[0] = "tf/notice.h";
    v13[1] = "GetNoticeType";
    void v13[2] = 563;
    void v13[3] = "virtual TfType pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserve"
             "d__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::Sdf"
             "SchemaBase>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr, void (pxrInternal__aapl__pxrReserved__::SdfSch"
             "emaBase::*)(const pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins &), pxrInternal__aapl__p"
             "xrReserved__::PlugNotice::DidRegisterPlugins>>::GetNoticeType() const [Derived = pxrInternal__aapl__pxrRese"
             "rved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::"
             "SdfSchemaBase>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr, void (pxrInternal__aapl__pxrReserved__::Sdf"
             "SchemaBase::*)(const pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins &), pxrInternal__aapl"
             "__pxrReserved__::PlugNotice::DidRegisterPlugins>]";
    char v14 = 0;
    int v15 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)off_26C74DAF0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v9);
    uint64_t v4 = std::string::insert(&v9, 0, "notice type ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    uint64_t v6 = std::string::append(&v10, " undefined in the TfType system");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((uint64_t)v13, (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
  return v3;
}

void sub_216B717D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B71824(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfType::IsA(a2, v6, v7);
  if (result)
  {
    std::string v9 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
    char IsInvalid = pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid(v9);
    uint64_t result = 0;
    if (a3)
    {
      if ((IsInvalid & 1) == 0) {
        return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v9) == a3;
      }
    }
  }
  return result;
}

uint64_t sub_216B718B4(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
  if (!pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator BOOL(a1 + 56)) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v1);
}

void *sub_216B71904(uint64_t a1)
{
  uint64_t v2 = operator new(0x68uLL);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  sub_216B71330((uint64_t)v2, (void *)(a1 + 40), (_OWORD *)(a1 + 88), a1 + 56);
  return v2;
}

void sub_216B71980(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216B71994(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (BOOL v6 = result == 0) : (BOOL v6 = 1), v6))
  {
    long long v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    _OWORD v8[2] = 216;
    void v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::SdfSchemaBase>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReser"
            "ved__::TfWeakPtr, uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x80000002174762B2 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void *sub_216B71A3C(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    char v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      std::string v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if ((v10[2] & 0xFFFFFFFFFFFFFFF8) == v5) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          std::string v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_216B71CA4(a1, v6, a3, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  unint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    *unint64_t v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  std::string v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_216B71E40((uint64_t)v21, 0);
  return v10;
}

void sub_216B71C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216B71E40((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216B71CA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x78uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint8x8_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_216B71D1C((uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216B71D04(_Unwind_Exception *a1)
{
  sub_216B71E40(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_216B71D1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 8) = a2[1];
  uint64_t v5 = a2[2];
  *(void *)(a1 + 16) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2168EE4C4((void *)(a1 + 24), a2 + 3);
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_216B6E964((uint64_t *)(a1 + 40), (uint64_t *)a2[5], (uint64_t *)a2[6], 0xAAAAAAAAAAAAAAABLL * ((a2[6] - a2[5]) >> 3));
  long long v6 = *((_OWORD *)a2 + 4);
  long long v7 = *((_OWORD *)a2 + 5);
  *(void *)(a1 + 96) = a2[12];
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 8sub_2168EBBB8(&a9, 0) = v7;
  return a1;
}

void sub_216B71DF4(_Unwind_Exception *a1)
{
  sub_2168EE084(v2);
  uint64_t v4 = v1[2];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_216B71E40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216B6AEEC((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_216B71E98(void *a1)
{
  if ((sub_2169C6AB8(a1) & 1) == 0) {
    sub_216B71F18((uint64_t)a1);
  }
  if (a1[4] != a1[8]) {
    sub_216B72124((uint64_t)a1);
  }
  return 1;
}

void sub_216B71F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  *std::string v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_216B71F18(uint64_t a1)
{
}

void sub_216B71F2C()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_216B71F64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_216B71F78(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_216B72070(&v5);
  unint64_t v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B72010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_216B72070(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x80000002174762F6 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    unint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x80000002174762F6 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B72110(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_216B72124(uint64_t a1)
{
}

void sub_216B72138()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_216B72170(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_216B72184(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_216B7227C(&v5);
  unint64_t v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_216B7221C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_216B7227C(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217476338 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    unint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217476338 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_216B7231C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216B72330(uint64_t **a1, const void **a2)
{
  unint64_t v3 = (uint64_t *)sub_21678C2D8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  long long v4 = v3;
  sub_2167AE00C(a1, v3);
  sub_216812F30((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void sub_216B72390()
{
}

atomic_uint **pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(atomic_uint **a1, atomic_uint **a2)
{
  unint64_t v3 = *a2;
  std::string v5 = v3;
  if (v3)
  {
    atomic_fetch_add(v3, 1u);
    unint64_t v3 = v5;
  }
  std::string v5 = *a1;
  *a1 = v3;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this);
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(Layer);

  return pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer@<X0>(uint64_t **this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = *this;
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer((pxrInternal__aapl__pxrReserved__::Sdf_Identity *)result);
    uint64_t v4 = result[1];
    *a2 = *result;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfSpec *this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = a2 + 1;
  if (*(void *)this)
  {
    sub_216981010(a2, (_DWORD *)(v2 + 4));
    return sub_21698105C(v3, (_DWORD *)(v2 + 8));
  }
  else
  {
    *(void *)a2 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v1 = *this;
  if (!*this) {
    return 0;
  }
  Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this);
  if (!Layer[1]) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(sub_216850B68(Layer + 1) + 14);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)*Layer;
  if (!v3 || v4 == 0) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v4, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)v1 + 4));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v1 = *this;
  if (!*this) {
    return 1;
  }
  int v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)v1 + 4);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v1 + 1)) {
    return 1;
  }
  Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this);
  std::string v5 = sub_21697CF14(Layer);
  if (!(v6 & 1 | (unint64_t)v5)) {
    return 1;
  }
  std::string::size_type v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(Layer);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v7, v3) ^ 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v1 = *this;
  if (!v1) {
    return 0;
  }
  Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(v1);
  uint64_t v3 = Layer[1];
  uint64_t v8 = *Layer;
  uint64_t v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v8);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v4);
  uint64_t v6 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return v5;
}

void sub_216B72690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *this;
  if (*this)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this);
    uint64_t v5 = Layer[1];
    uint64_t v7 = *Layer;
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
    }
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_2169791E0(&v7);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(v6, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)v3 + 4), (uint64_t)a2);
    this = v8;
    if (v8)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        return (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*((uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_Identity **))*this
      }
                                                                   + 1))(this);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

void sub_216B72758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfSpec::_HasField(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t (***a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (result)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(result);
    uint64_t v8 = (void *)sub_2169791E0(Layer);
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)*a1 + 4);
    return (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v8, v9, a2, a3);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t result = *this;
  if (result)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(result);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(Layer);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)*this + 4);
    return (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v6, v7, a2, 0);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **pxrInternal__aapl__pxrReserved__::SdfSpec::GetField@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, pxrInternal__aapl__pxrReserved__::VtValue *a3@<X8>)
{
  uint64_t v4 = *this;
  if (*this)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(Layer);
    return (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v7, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)v4 + 4), a2, a3);
  }
  else
  {
    *((void *)a3 + 1) = 0;
  }
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3 = *this;
  if (*this)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(Layer);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v8, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)*this + 4), a2, a3);
  }
  return v3 != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v2 = *this;
  if (*this)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(*this);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(Layer);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v6, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)*this + 4), a2);
  }
  return v2 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetMetaDataInfoKeys@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, void *a2@<X8>)
{
  uint64_t Schema = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  unsigned int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);

  return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetMetadataFields(Schema, SpecType, a2);
}

void *pxrInternal__aapl__pxrReserved__::SdfSpec::GetMetaDataDisplayGroup@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, atomic_uint **a3@<X8>)
{
  uint64_t Schema = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  if (*(unsigned char *)(Schema + 72 * result + 120))
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)(Schema + 72 * result + 56);
    return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetMetadataFieldDisplayGroup(v8, a2, a3);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfSpec::ListInfoKeys(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  unsigned int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  if (*((unsigned char *)Schema + 72 * SpecType + 120))
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::GetFields((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)Schema + 72 * SpecType + 56), v20);
    for (long long i = v20[0]; (void)i != *((void *)&i + 1); sub_21699A5F0(&i))
    {
      uint64_t v8 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_21699A570((uint64_t *)&i, v6, v7);
      FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, v8);
      if (!FieldDefinition
        || (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::HoldsChildren(FieldDefinition) & 1) == 0)
      {
        float v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_21699A570((uint64_t *)&i, v10, v11);
        if (pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, v12))
        {
          unint64_t v15 = (uint64_t *)sub_21699A570((uint64_t *)&i, v13, v14);
          unint64_t v16 = *(uint64_t **)(a2 + 8);
          if ((unint64_t)v16 >= *(void *)(a2 + 16))
          {
            unint64_t v18 = sub_216973984((char **)a2, v15);
          }
          else
          {
            uint64_t v17 = *v15;
            *unint64_t v16 = *v15;
            if ((v17 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *v16 &= 0xFFFFFFFFFFFFFFF8;
            }
            unint64_t v18 = (char *)(v16 + 1);
          }
          *(void *)(a2 + 8) = v18;
        }
      }
    }
    *(void *)&long long i = v20;
    sub_216889A04((void ***)&i);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
}

void sub_216B72B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  v35[2] = *MEMORY[0x263EF8340];
  uint64_t Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, a2);
  unsigned int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  uint64_t result = sub_216B72EA4(a2, SpecType, (uint64_t)Schema, FieldDefinition);
  if (result)
  {
    FallbackValue = (void *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
    sub_2168EE4C4(v35, FallbackValue);
    if (v35[1]) {
      pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeOf(a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v35, v34);
    }
    else {
      sub_2168EE4C4(v34, a3);
    }
    if (v34[1])
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(this, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v34);
    }
    else
    {
      v32[0] = "sdf/spec.cpp";
      v32[1] = "SetInfo";
      v32[2] = 268;
      v32[3] = "void pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfo(const TfToken &, const VtValue &)";
      char v33 = 0;
      unint64_t v13 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v13)
      {
        BOOL v14 = (const char *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0) {
          BOOL v14 = *(const char **)v14;
        }
      }
      else
      {
        BOOL v14 = "";
      }
      unint64_t v15 = v30;
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)v35, v11, v12, (uint64_t)v30);
      if (v31 < 0) {
        unint64_t v15 = (void **)v30[0];
      }
      unint64_t v16 = (const char *)&v28;
      sub_216928738((uint64_t)a3);
      if (v29 < 0) {
        unint64_t v16 = (const char *)v28;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(a3, v17, v18, (uint64_t)__p);
      int v19 = v27;
      uint64_t v20 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)this, &v24);
      unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v24);
      int v22 = __p;
      if (v19 < 0) {
        int v22 = v20;
      }
      if (*((char *)String + 23) >= 0) {
        uint64_t v23 = (const char *)String;
      }
      else {
        uint64_t v23 = (const char *)*String;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set field '%s' of type '%s' to provided value '%s' because the value is an incompatible type '%s', on spec <%s>", v14, (const char *)v15, v16, (const char *)v22, v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
      sub_21697C414(&v24);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (v29 < 0) {
        operator delete(v28);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }
    sub_2168EE084((uint64_t)v34);
    return sub_2168EE084((uint64_t)v35);
  }
  return result;
}

void sub_216B72E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216B72EA4(void *a1, unsigned int a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *this)
{
  if (this)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::IsReadOnly(this))
    {
      unint64_t v15 = "sdf/spec.cpp";
      unint64_t v16 = "_CanEditInfoOnSpec";
      uint64_t v17 = 229;
      unint64_t v18 = "BOOL pxrInternal__aapl__pxrReserved__::_CanEditInfoOnSpec(const TfToken &, SdfSpecType, const SdfSchemaBase "
            "&, const SdfSchema::FieldDefinition *, const char *)";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot %s value for read-only field '%s'");
    }
    else
    {
      Name = (void *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetName(this);
      if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(a3, Name, a2)) {
        return 1;
      }
      unint64_t v15 = "sdf/spec.cpp";
      unint64_t v16 = "_CanEditInfoOnSpec";
      uint64_t v17 = 236;
      unint64_t v18 = "BOOL pxrInternal__aapl__pxrReserved__::_CanEditInfoOnSpec(const TfToken &, SdfSpecType, const SdfSchemaBase "
            "&, const SdfSchema::FieldDefinition *, const char *)";
      char v19 = 0;
      unint64_t v10 = *a1 & 0xFFFFFFFFFFFFFFF8;
      if (v10)
      {
        unint64_t v11 = (const char *)(v10 + 16);
        if (*(char *)(v10 + 39) < 0) {
          unint64_t v11 = *(const char **)v11;
        }
      }
      else
      {
        unint64_t v11 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C755200, a2, (uint64_t)__p);
      if (v14 >= 0) {
        float v12 = __p;
      }
      else {
        float v12 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Field '%s' is not valid for spec type %s", v11, (const char *)v12);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    unint64_t v15 = "sdf/spec.cpp";
    unint64_t v16 = "_CanEditInfoOnSpec";
    uint64_t v17 = 223;
    unint64_t v18 = "BOOL pxrInternal__aapl__pxrReserved__::_CanEditInfoOnSpec(const TfToken &, SdfSpecType, const SdfSchemaBase &,"
          " const SdfSchema::FieldDefinition *, const char *)";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot %s value for unknown field '%s'");
  }
  return 0;
}

void sub_216B73090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfSpec::SetInfoDictionaryValue(atomic_uint **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  void v4[4] = *(atomic_uint **)MEMORY[0x263EF8340];
  sub_216B73234(this, v4);
  sub_216B4934C();
}

void sub_216B731DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void **);
  sub_2168EE084((uint64_t)va1);
  sub_2168EBBB8((void ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_216B73234(atomic_uint **a1@<X0>, atomic_uint **a2@<X8>)
{
  if (!a1)
  {
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  uint64_t v2 = *a1;
  uint64_t v4 = v2;
  if (!v2)
  {
LABEL_6:
    *a2 = 0;
    goto LABEL_7;
  }
  atomic_fetch_add(v2, 1u);
  uint64_t v3 = v4;
  *a2 = v4;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
LABEL_7:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

uint64_t sub_216B7328C@<X0>(void *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  uint64_t result = sub_216B73C88(a1);
  if (result)
  {
    uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(void))(*(void *)*a1 + 48))();
    return pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v5);
  }
  else
  {
    *(void *)a2 = 0;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfSpec::ClearInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, a2);
  if (!FieldDefinition
    || (uint64_t v6 = FieldDefinition,
        unsigned int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this),
        uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)sub_216B72EA4(a2, SpecType, (uint64_t)Schema, v6),
        result))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
    BOOL v9 = pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, a2);
    unint64_t Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)v9);
    unint64_t v11 = *this;
    float v12 = (atomic_uint *)v11;
    if (v11) {
      atomic_fetch_add((atomic_uint *volatile)v11, 1u);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
    return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
  }
  return result;
}

void sub_216B733C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetTypeForInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  Fallbacuint64_t k = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, a2);

  return pxrInternal__aapl__pxrReserved__::VtValue::GetType(Fallback, v5, v6);
}

void *pxrInternal__aapl__pxrReserved__::SdfSpec::GetFallbackForInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B91100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B91100))
  {
    qword_267B910F8 = 0;
    __cxa_atexit((void (*)(void *))sub_216B64E50, &unk_267B910F0, &dword_216758000);
    __cxa_guard_release(&qword_267B91100);
  }
  uint64_t Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, a2);
  if (!FieldDefinition)
  {
    unint64_t v16 = "sdf/spec.cpp";
    uint64_t v17 = "GetFallbackForInfo";
    uint64_t v18 = 360;
    char v19 = "const VtValue &pxrInternal__aapl__pxrReserved__::SdfSpec::GetFallbackForInfo(const TfToken &) const";
    char v20 = 0;
    unint64_t v11 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v11)
    {
      float v12 = (const char *)(v11 + 16);
      if (*(char *)(v11 + 39) < 0) {
        float v12 = *(const char **)v12;
      }
    }
    else
    {
      float v12 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown field '%s'", v12);
    return &unk_267B910F0;
  }
  uint64_t v6 = FieldDefinition;
  uint64_t SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  if (!*((unsigned char *)Schema + 72 * SpecType + 120)
    || (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsMetadataField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)Schema + 72 * SpecType + 56), a2) & 1) == 0)
  {
    unint64_t v16 = "sdf/spec.cpp";
    uint64_t v17 = "GetFallbackForInfo";
    uint64_t v18 = 369;
    char v19 = "const VtValue &pxrInternal__aapl__pxrReserved__::SdfSpec::GetFallbackForInfo(const TfToken &) const";
    char v20 = 0;
    unint64_t v9 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
      unint64_t v10 = (const char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0) {
        unint64_t v10 = *(const char **)v10;
      }
    }
    else
    {
      unint64_t v10 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C755200, SpecType, (uint64_t)__p);
    if (v15 >= 0) {
      unint64_t v13 = __p;
    }
    else {
      unint64_t v13 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Non-metadata key '%s' for type %s", v10, (const char *)v13);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    return &unk_267B910F0;
  }

  return (void *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(v6);
}

void sub_216B73638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::WriteToStream(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (v6)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(v6);
    uint64_t v8 = Layer[1];
    uint64_t v17 = *Layer;
    uint64_t v18 = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v17);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v9);
  uint64_t v11 = sub_216979288(FileFormat);
  float v12 = (atomic_uint *)*a1;
  unint64_t v16 = v12;
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, atomic_uint **, uint64_t, uint64_t))(*(void *)v11 + 80))(v11, &v16, a2, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
  uint64_t v14 = v18;
  if (v18 && atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return v13;
}

void sub_216B7375C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a10);
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSpec::IsInert(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, int a2)
{
  uint64_t v3 = *this;
  if (!v3) {
    return 0;
  }
  Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(v3);
  uint64_t v6 = Layer[1];
  uint64_t v11 = *Layer;
  uint64_t v12 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_2169791E0(&v11);
  BOOL IsInert = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInert(v7, (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)((char *)*this + 4), a2, 0);
  uint64_t v9 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return IsInert;
}

void sub_216B73874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, a2);
  if (FieldDefinition)
  {
    uint64_t v8 = FieldDefinition;
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v12);
    if (v13) {
      FallbackValue = &v12;
    }
    else {
      FallbackValue = (char **)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(v8);
    }
    sub_2168EE4C4(a3, FallbackValue);
    sub_2168EE084((uint64_t)&v12);
  }
  else
  {
    uint64_t v12 = "sdf/spec.cpp";
    uint64_t v13 = "GetInfo";
    uint64_t v14 = 394;
    char v15 = "VtValue pxrInternal__aapl__pxrReserved__::SdfSpec::GetInfo(const TfToken &) const";
    char v16 = 0;
    unint64_t v10 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      uint64_t v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        uint64_t v11 = *(const char **)v11;
      }
    }
    else
    {
      uint64_t v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid info key: %s", v11);
    a3[1] = 0;
  }
}

void sub_216B739B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSpec::operator==(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfSpec::operator<(void *a1, void *a2)
{
  return *a1 < *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::_MoveSpec(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v5 = *this;
  if (v5)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(v5);
    uint64_t v7 = Layer[1];
    uint64_t v12 = *Layer;
    uint64_t v13 = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v12);
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v8, a2, a3);
  uint64_t v10 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return v9;
}

void sub_216B73AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::_DeleteSpec(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3 = *this;
  if (v3)
  {
    Layer = pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(v3);
    uint64_t v5 = Layer[1];
    uint64_t v10 = *Layer;
    uint64_t v11 = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v10);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v6, a2);
  uint64_t v8 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return v7;
}

void sub_216B73B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216B73B84()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C757F48, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C757F48, (char *)8, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_216B73C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_216B73C88(void *a1)
{
  uint64_t v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(void))(*(void *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  v4[0] = "sdf/mapEditProxy.h";
  v4[1] = "_Validate";
  double v4[2] = 772;
  void v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<pxrInternal__aapl__pxrReserved__::VtDictionary>::_Valid"
          "ate() const [T = pxrInternal__aapl__pxrReserved__::VtDictionary, _ValuePolicy = pxrInternal__aapl__pxrReserved"
          "__::SdfIdentityMapEditProxyValuePolicy<pxrInternal__aapl__pxrReserved__::VtDictionary>]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing an invalid map proxy");
  return 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217476398 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  uint64_t v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      int v9 = operator new(0x90uLL);
      sub_216B74AC8((unint64_t)v9);
      unint64_t v11 = atomic_load(a1);
      if (v11)
      {
        if (v9 != (void *)v11)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          uint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeIn"
                "fo>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v10);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        uint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo"
              ">::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v10, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v5;
}

void sub_216B73F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    double v3[2] = 56;
    void v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo"
            ">::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::DeleteInstance()
{
  for (uint64_t i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
        i;
        uint64_t i = v1)
  {
    uint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance, (unint64_t *)&v1, 0);
    if (v1 == i)
    {
      uint64_t v2 = *(void **)(i + 128);
      *(void *)(i + 128) = 0;
      if (v2) {
        operator delete[](v2);
      }
      sub_216862C74(i + 80);
      sub_216862C74(i + 40);
      long long v3 = (void *)sub_216850320(i);
      operator delete(v3);
      return;
    }
    sched_yield();
  }
}

void pxrInternal__aapl__pxrReserved__::SdfSpecTypeRegistration::_RegisterSpecType(pxrInternal__aapl__pxrReserved__::TfType *a1, const std::type_info *a2, pxrInternal__aapl__pxrReserved__::TfType *this)
{
  unsigned int v4 = a2;
  uint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_CreateInstance();
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(this, a2, (char *)this);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v59);
  if (*(void *)v7 == (void)v59)
  {
    *(void *)&long long v59 = "sdf/specType.cpp";
    *((void *)&v59 + 1) = "_RegisterSpecType";
    uint64_t v60 = 138;
    uint64_t v61 = "static void pxrInternal__aapl__pxrReserved__::SdfSpecTypeRegistration::_RegisterSpecType(const std::type_info "
          "&, SdfSpecType, const std::type_info &)";
    char v62 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&__p);
    if (v58 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Schema type %s must be registered with the TfType system.", p_p);
LABEL_24:
    if (v58 < 0) {
      operator delete(__p);
    }
    return;
  }
  uint64_t v10 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(a1, v8, v9);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v59);
  if (*v10 == (void)v59)
  {
    *(void *)&long long v59 = "sdf/specType.cpp";
    *((void *)&v59 + 1) = "_RegisterSpecType";
    uint64_t v60 = 146;
    uint64_t v61 = "static void pxrInternal__aapl__pxrReserved__::SdfSpecTypeRegistration::_RegisterSpecType(const std::type_info "
          "&, SdfSpecType, const std::type_info &)";
    char v62 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*((void *)a1 + 1) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&__p);
    if (v58 >= 0) {
      uint64_t v26 = (const char *)&__p;
    }
    else {
      uint64_t v26 = (const char *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Spec type %s must be registered with the TfType system.", v26);
    goto LABEL_24;
  }
  std::string __p = (void *)(v6 + 128);
  int v57 = -1;
  sub_21686C480((uint64_t)&__p, v11, v12);
  long long v59 = (unint64_t)*v10;
  char v15 = sub_216877674(v6, &v59, &v59) + 3;
  long long v59 = *(unint64_t *)(v6 + 16);
  uint64_t v16 = v4;
  while ((void)v59 != *((void *)&v59 + 1))
  {
    if (v4
      && (uint64_t v17 = sub_216B74570(&v59, v13, v14),
          pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)v10, *(void *)(*v17 + 16), v18)))
    {
      int v19 = (void *)(*sub_216B74570(&v59, v13, v14) + 24);
      uint64_t v20 = 1 << v4;
    }
    else
    {
      uint64_t v21 = sub_216B74570(&v59, v13, v14);
      if (!pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)(*v21 + 16), *v10, v22)) {
        goto LABEL_13;
      }
      uint64_t v20 = *(void *)(*sub_216B74570(&v59, v23, v24) + 24);
      int v19 = v15;
    }
    *v19 |= v20;
LABEL_13:
    sub_216B745EC((uint64_t)&v59);
  }
  if (v4 == 6)
  {
    *v15 |= 0x400uLL;
    goto LABEL_27;
  }
  if (v4)
  {
LABEL_27:
    *(void *)&long long v59 = v7;
    char v27 = sub_216B74C00(v6 + 40, v7, (uint64_t)&unk_2174BFD90, (void **)&v59);
    uint64_t v28 = v27[3];
    char v29 = v27 + 3;
    if (v28 == v27[4])
    {
      sub_216B7466C((uint64_t)(v27 + 3), 0xCuLL);
      uint64_t v28 = *v29;
    }
    *(void *)(v28 + 8 * v16) = *v10;
  }
  *(void *)&long long v59 = v10;
  long long v30 = sub_216B74C00(v6 + 80, v10, (uint64_t)&unk_2174BFD90, (void **)&v59);
  char v33 = v30;
  BOOL v35 = (void **)(v30 + 3);
  std::string::size_type v34 = (void *)v30[3];
  uint64_t v36 = (void *)v30[4];
  if (v34 == v36)
  {
    uint64_t v37 = (void *)v30[3];
  }
  else
  {
    uint64_t v37 = (void *)v30[3];
    while (*v37 != *(void *)v7)
    {
      if (++v37 == v36)
      {
        uint64_t v37 = (void *)v30[4];
        break;
      }
    }
  }
  if (v37 == v36)
  {
    uint64_t v44 = (uint64_t)(v30 + 5);
    unint64_t v45 = v33[5];
    if ((unint64_t)v36 >= v45)
    {
      uint64_t v47 = v36 - v34;
      if ((unint64_t)(v47 + 1) >> 61) {
        sub_21677CB10();
      }
      uint64_t v48 = v45 - (void)v34;
      uint64_t v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1)) {
        uint64_t v49 = v47 + 1;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v49;
      }
      if (v31) {
        uint64_t v50 = (char *)sub_21677CB28(v44, v31);
      }
      else {
        uint64_t v50 = 0;
      }
      uint64_t v51 = &v50[8 * v47];
      uint64_t v52 = &v50[8 * v31];
      *(void *)uint64_t v51 = *(void *)v7;
      unint64_t v46 = v51 + 8;
      long long v54 = (char *)v33[3];
      uint64_t v53 = (char *)v33[4];
      if (v53 != v54)
      {
        do
        {
          uint64_t v55 = *((void *)v53 - 1);
          v53 -= 8;
          *((void *)v51 - 1) = v55;
          v51 -= 8;
        }
        while (v53 != v54);
        uint64_t v53 = (char *)*v35;
      }
      v33[3] = v51;
      v33[4] = v46;
      v33[5] = v52;
      if (v53) {
        operator delete(v53);
      }
    }
    else
    {
      *uint64_t v36 = *(void *)v7;
      unint64_t v46 = v36 + 1;
    }
    v33[4] = v46;
  }
  else
  {
    *(void *)&long long v59 = "sdf/specType.cpp";
    *((void *)&v59 + 1) = "_RegisterSpecType";
    uint64_t v60 = 193;
    uint64_t v61 = "static void pxrInternal__aapl__pxrReserved__::SdfSpecTypeRegistration::_RegisterSpecType(const std::type_info "
          "&, SdfSpecType, const std::type_info &)";
    char v62 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)v10);
    int v39 = *(char *)(TypeName + 23);
    uint64_t v40 = *(const char **)TypeName;
    uint64_t v41 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (v39 >= 0) {
      uint64_t v42 = (const char *)TypeName;
    }
    else {
      uint64_t v42 = v40;
    }
    if (*(char *)(v41 + 23) >= 0) {
      uint64_t v43 = (const char *)v41;
    }
    else {
      uint64_t v43 = *(const char **)v41;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Spec type %s already registered for schema type %s", v42, v43);
  }
  sub_216869774((uint64_t)&__p, v31, v32);
}

void sub_216B74528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216B74570(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    double v3[2] = 287;
    void v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHashMap<pxrIntern"
            "al__aapl__pxrReserved__::TfType, unsigned long, pxrInternal__aapl__pxrReserved__::TfHash>>::operator->() [T "
            "= pxrInternal__aapl__pxrReserved__::TfHashMap<pxrInternal__aapl__pxrReserved__::TfType, unsigned long, pxrIn"
            "ternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216B745EC(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    double v3[2] = 250;
    void v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHas"
            "hMap<pxrInternal__aapl__pxrReserved__::TfType, unsigned long, pxrInternal__aapl__pxrReserved__::TfHash>>::op"
            "erator++() [T = pxrInternal__aapl__pxrReserved__::TfHashMap<pxrInternal__aapl__pxrReserved__::TfType, unsign"
            "ed long, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)a1 = **(void **)a1;
  }
  return a1;
}

void sub_216B7466C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_216B74E68((void **)a1, a2 - v2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_SpecType::Cast(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::SdfSpec *a2, const std::type_info *a3)
{
  int v5 = (void *)sub_216B74814();
  uint64_t Schema = (void *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  int v9 = (char **)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)(*Schema - 8), v7, v8);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v20);
  if (*v9 != v20
    || (uint64_t v20 = "sdf/specType.cpp",
        uint64_t v21 = "Cast",
        uint64_t v22 = 215,
        uint64_t v23 = "static TfType pxrInternal__aapl__pxrReserved__::Sdf_SpecType::Cast(const SdfSpec &, const std::type_info &)",
        char v24 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v20, "!schemaType.IsUnknown()", 0) & 1) != 0))
  {
    unsigned int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
    uint64_t v13 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(a2, v11, v12);
    uint64_t v20 = (char *)(v5 + 16);
    LODWORD(v21) = -1;
    sub_21686C510((uint64_t)&v20, v14, v15);
    if (sub_216B7486C(v5, SpecType, v13))
    {
      uint64_t v18 = sub_216877FD4(v5 + 5, v9)[3];
      if (SpecType == 10 && *v13 == *(void *)(v18 + 48)) {
        uint64_t v25 = *v13;
      }
      else {
        uint64_t v25 = *(void *)(v18 + 8 * SpecType);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v25);
    }
    sub_216869774((uint64_t)&v20, v16, v17);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v25);
  }
  return v25;
}

void sub_216B747F4(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_216B74814()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_CreateInstance();
  }
  while (1)
  {
    unsigned __int8 v1 = atomic_load((unsigned __int8 *)(v0 + 120));
    if (v1) {
      break;
    }
    sched_yield();
  }
  return v0;
}

BOOL sub_216B7486C(void *a1, char a2, void *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v10);
  if (*a3 == v10)
  {
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v9);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v10);
    return v9 != v10;
  }
  else
  {
    uint64_t v6 = sub_216877FD4(a1, a3);
    if (v6) {
      unint64_t v7 = v6[3];
    }
    else {
      unint64_t v7 = 0;
    }
    return (v7 >> a2) & 1;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(char a1, pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  char v4 = (void *)sub_216B74814();
  uint64_t v15 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(a2, v5, v6);
  uint64_t v13 = v4 + 16;
  int v14 = -1;
  sub_21686C510((uint64_t)&v13, v7, v8);
  BOOL v9 = sub_216B7486C(v4, a1, &v15);
  sub_216869774((uint64_t)&v13, v10, v11);
  return v9;
}

void sub_216B74988(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216869774((uint64_t)va, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::SdfSpec *a2, const std::type_info *a3)
{
  int v5 = (void *)sub_216B74814();
  char SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  BOOL v9 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(a2, v7, v8);
  uint64_t Schema = (void *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  uint64_t v13 = (char *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)(*Schema - 8), v11, v12);
  uint64_t v26 = v5 + 16;
  int v27 = -1;
  sub_21686C510((uint64_t)&v26, v14, v15);
  if (sub_216B7486C(v5, SpecType, v9)
    && (uint64_t v18 = sub_216877FD4(v5 + 10, v9)) != 0
    && (uint64_t v19 = v18[3], v20 = v18[4], v19 != v20))
  {
    uint64_t v21 = v19 + 8;
    do
    {
      uint64_t IsA = pxrInternal__aapl__pxrReserved__::TfType::IsA(v13, *(void *)(v21 - 8), v17);
      uint64_t v23 = IsA;
      if (v21 == v20) {
        int v24 = 1;
      }
      else {
        int v24 = IsA;
      }
      v21 += 8;
    }
    while (v24 != 1);
  }
  else
  {
    uint64_t v23 = 0;
  }
  sub_216869774((uint64_t)&v26, v16, v17);
  return v23;
}

void sub_216B74AA4(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_216B74AC8(unint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  sub_21678A04C(a1, 0);
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(unsigned char *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  unint64_t v2 = pxrInternal__aapl__pxrReserved__::TfBigRWMutex::TfBigRWMutex((pxrInternal__aapl__pxrReserved__::TfBigRWMutex *)(a1 + 128));
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo>::_instance, a1))
  {
    v6[0] = "tf/instantiateSingleton.h";
    v6[1] = "SetInstanceConstructed";
    _OWORD v6[2] = 56;
    void v6[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo"
            ">::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Sdf_SpecTypeInfo]";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v3);
  }
  unint64_t Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v2);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_26C75AD88);
  atomic_store(1u, (unsigned __int8 *)(a1 + 120));
  return a1;
}

void sub_216B74BBC(_Unwind_Exception *a1)
{
  sub_216862C74(v3);
  sub_216862C74(v2);
  sub_216850320(v1);
  _Unwind_Resume(a1);
}

void *sub_216B74C00(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  void *v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_216B74E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_21686350C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_216B74E68(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  unint64_t v7 = *(pxrInternal__aapl__pxrReserved__::TfType **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 3)
  {
    if (a2)
    {
      uint64_t v14 = 8 * a2;
      float v15 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 + 8 * a2);
      do
      {
        pxrInternal__aapl__pxrReserved__::TfType::TfType(v7);
        unint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v7 + 8);
        v14 -= 8;
      }
      while (v14);
      unint64_t v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (pxrInternal__aapl__pxrReserved__::TfType *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_21677CB28(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v16 = (pxrInternal__aapl__pxrReserved__::TfType *)&v13[8 * v10];
    unint64_t v17 = &v13[8 * v12];
    uint64_t v18 = 8 * a2;
    size_t v19 = v16;
    uint64_t v20 = (char *)v16 + 8 * a2;
    do
    {
      size_t v19 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)pxrInternal__aapl__pxrReserved__::TfType::TfType(v19)
                                                       + 8);
      v18 -= 8;
    }
    while (v18);
    unint64_t v22 = (char *)*a1;
    uint64_t v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v16 - 1) = v23;
        BOOL v16 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v16 - 8);
      }
      while (v21 != v22);
      uint64_t v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v20;
    a1[2] = v17;
    if (v21)
    {
      operator delete(v21);
    }
  }
}

void sub_216B74FA4(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType::~SdfTextFileFormatTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *this)
{
  uint64_t v4 = (void **)((char *)this + 24);
  sub_216889A04(&v4);
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType::SdfTextFileFormatTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "sdf", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "1.4.32", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "sdf", 0);
  uint64_t v3 = *this;
  float v15 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      float v15 = v4;
    }
  }
  int v5 = *v2;
  BOOL v16 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      BOOL v16 = v6;
    }
  }
  unint64_t v7 = this[2];
  unint64_t v17 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  unint64_t v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    uint64_t v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    uint64_t v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *)this;
}

void sub_216B751F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}